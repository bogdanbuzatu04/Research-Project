context,truth,prediction
"<fim_prefix>tpHandler;
import com.sun.net.httpserver.HttpServer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import static General.MultiBomb.LOGGER;

public class HttpThread extends Thread {
    /**<fim_suffix>
    public final Server server;
    /**
     * The actual http server
     */
    private HttpServer httpServer;

    /**
     * Constructor
     *
     * @param server object about which information is provided by the HttpServer
     */
    public HttpThread(Server server) {
        this.server = server;
    }

    /**
     * Run the HTTP server which provides information about the g<fim_middle>","
     * Instance of the game server
     */","
     * The server object which provides information about the server"
"<fim_prefix>xtends Thread {
    /**
     * Instance of the game server
     */
    public final Server server;
    /**
     * The actual http server
     */
    private HttpServer httpServer;

    /**
     * Constructor
     *
     * @param server object about which information is provided by the HttpServer
     */
    public HttpThread(Server server) {
        this.server = server;
    }

    /**<fim_suffix>
    @Override
    public void run() {
        LOGGER.config(String.format(""Entering: %s %s"", HttpThread.class.getName(), ""run()""));

        try {
            // create new HttpServer
            httpServer = HttpServer.create(new InetSocketAddress(""0.0.0.0"", Server.HTTP_PORT), 0);

            // create new ThreadPoolExecutor for the HttpServer
            ThreadPoolExecutor threadPo<fim_middle>","
     * Run the HTTP server which provides information about the game server
     */","
     * Starts the HttpServer
     */"
"<fim_prefix>/lobby"", new LobbyRequestHandler());

            // assign ThreadPool to the HttpServer
            httpServer.setExecutor(threadPool);

            // start the server
            httpServer.start();

        } catch (IOException e) {
            e.printStackTrace();
        }

        LOGGER.config(String.format(""Exiting: %s %s"", HttpThread.class.getName(), ""run()""));
    }

    /**<fim_suffix>
    public void close() {
        LOGGER.config(String.format(""Entering: %s %s"", HttpThread.class.getName(), ""close()""));
        httpServer.stop(0);
        LOGGER.config(String.format(""Exiting: %s %s"", HttpThread.class.getName(), ""close()""));
    }

    public class ServerRequestHandler implements HttpHandler {

        @Override
        public void handle(HttpExchange httpExchange)<fim_middle>","
     * Close the http server
     */","
     * Close the server
     */"
"<fim_prefix>;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import static General.MultiBomb.LOGGER;

public class HttpThread extends Thread {
    /**
     * Instance of the game server
     */
    public final Server server;
    /**<fim_suffix>
    private HttpServer httpServer;

    /**
     * Constructor
     *
     * @param server object about which information is provided by the HttpServer
     */
    public HttpThread(Server server) {
        this.server = server;
    }

    /**
     * Run the HTTP server which provides information about the game server
     */
    @Override
    public void run() {
        LOGGER.config<fim_middle>","
     * The actual http server
     */","
     * Instance of the HTTP server
    "
"<fim_prefix>obbyInfo(server).toJson()); // OK
            } else if (httpExchange.getRequestMethod().equals(""POST"")) {
                handlePost();
            } else {
                sendResponse(405, new ErrorMessage(""Method Not Allowed"").toJson());
            }

            LOGGER.config(String.format(""Exiting: %s %s"", LobbyRequestHandler.class.getName(), ""handle()""));
        }

        /**<fim_suffix>
        private void handlePost() throws IOException {
            LOGGER.config(String.format(""Entering: %s %s"", LobbyRequestHandler.class.getName(), ""handlePost()""));

            BufferedReader reqBody = new BufferedReader(new InputStreamReader(httpExchange.getRequestBody()));

            Message msg = Message.fromJson(reqBody.readLine());

            if (msg.type.equals(Message.<fim_middle>","
         * Handle post requests to /lobby
         */","
         * Handles a POST request.
         *
"
"<fim_prefix>ATE_LOBBY_TYPE)) {
                CreateLobby createLobby = (CreateLobby) msg;
                handleCreate(createLobby);

            } else {
                sendResponse(400, new ErrorMessage(""JSON message not recognized"").toJson());
            }

            LOGGER.config(String.format(""Exiting: %s %s"", LobbyRequestHandler.class.getName(), ""handlePost()""));
        }

        /**<fim_suffix>
        private void handleJoin(JoinLobby joinLobby) throws IOException {
            LOGGER.config(String.format(""Entering: %s %s"", LobbyRequestHandler.class.getName(), ""handleJoin()""));

            String lobbyName = joinLobby.lobbyName;
            String playerID = joinLobby.playerID;

            String remoteIp = httpExchange.getRequestHeaders().getFirst(""X-FORWARDED-FOR"");
   <fim_middle>","
         * Handle JoinLobby messages that are POSTed to /lobby
         *
         * @param joinLobby message from the POST request body
         */","
         * Handles a request to join a lobby.
         *
         * @param joinLobby The join lobby request.
         * @throws IOException If"
"<fim_prefix>  sendResponse(200, """"); // OK
                } else {
                    // Error with joining lobby
                    sendResponse(400, errorMessage.toJson());

                    server.closeLobby(lobbyName);
                }

            }

            LOGGER.config(String.format(""Exiting: %s %s"", LobbyRequestHandler.class.getName(), ""handleCreate()""));
        }

        /**<fim_suffix>
        private void sendResponse(int code, String responseString) throws IOException {
            LOGGER.config(String.format(""Entering: %s %s"", LobbyRequestHandler.class.getName(), ""sendResponse()""));

            byte[] response = responseString.getBytes();
            httpExchange.sendResponseHeaders(code, response.length);

            OutputStream os = httpExchange.getResponseB<fim_middle>","
         * Send http response to the requester
         *
         * @param code           http status code for the response
         * @param responseString body of the response
         */","
         * Sends a response to the client.
         *
         * @param code                                           "
"<fim_prefix>= server.prepareNewPlayer(remoteIp, lobbyName, playerID);

            if (errorMessage == null) {
                sendResponse(200, """"); // OK
            } else {
                sendResponse(400, errorMessage.toJson()); // Bad Request
            }

            LOGGER.config(String.format(""Exiting: %s %s"", LobbyRequestHandler.class.getName(), ""handleJoin()""));
        }

        /**<fim_suffix>
        private void handleCreate(CreateLobby createLobby) throws IOException {
            LOGGER.config(String.format(""Entering: %s %s"", LobbyRequestHandler.class.getName(), ""handleCreate()""));

            String lobbyName = createLobby.lobbyName;
            String playerID = createLobby.playerID;

            String remoteIp = httpExchange.getRequestHeaders().getFirst(""X-FORWARDE<fim_middle>","
         * Handle CreateLobby messages that are POSTed to /lobby
         *
         * @param createLobby message from the POST request body
         */","
         * Handles the request to create a lobby.
         *
         * @param createLobby The request to create a lobby.
         * @throws"
"<fim_prefix>putStream;
import java.net.InetSocketAddress;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import static General.MultiBomb.LOGGER;

public class HttpThread extends Thread {
    /**
     * Instance of the game server
     */
    public final Server server;
    /**
     * The actual http server
     */
    private HttpServer httpServer;

    /**<fim_suffix>
    public HttpThread(Server server) {
        this.server = server;
    }

    /**
     * Run the HTTP server which provides information about the game server
     */
    @Override
    public void run() {
        LOGGER.config(String.format(""Entering: %s %s"", HttpThread.class.getName(), ""run()""));

        try {
            // create new HttpServer
            httpServer = HttpServer<fim_middle>","
     * Constructor
     *
     * @param server object about which information is provided by the HttpServer
     */","
     * Constructor
     *
     * @param server The game server
     */"
"<fim_prefix>/*<fim_suffix>

package org.cloudhub.file.server.service.server;

import io.grpc.stub.StreamObserver;
import org.cloudhub.file.rpc.container.ContainerStatusRequest;
import org.cloudhub.file.rpc.container.ContainerStatusResponse;
import org.cloudhub.file.rpc.container.SerializedContainerInfo;
import org.cloudhub.file.server.service.container.ContainerService;
import org.cloudhub.file.server.service.c<fim_middle>","
 * Cloudhub - A high available, scalable distributed file system.
 * Copyright (C) 2022 Cloudhub
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */","*
 * @author peijunzhang
 */"
"<fim_prefix>c.container.ContainerStatusServiceGrpc;
import org.cloudhub.file.rpc.container.SerializedContainerInfo;
import org.cloudhub.file.server.service.container.ContainerService;
import org.cloudhub.file.server.service.container.ReplicaContainerDelegate;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

/**<fim_suffix>
@Service
public class ContainerStatusService extends ContainerStatusServiceGrpc.ContainerStatusServiceImplBase {
    private final ContainerService containerService;
    private final ReplicaContainerDelegate replicaContainerDelegate;

    public ContainerStatusService(ContainerService containerService,
                                  ReplicaContainerDelegate replicaContainerDelegat<fim_middle>","
 * @author RollW
 */","
 * @author <NAME>
"
"<fim_prefix>/*<fim_suffix>

package eu.over9000.veya.world;

import java.math.RoundingMode;
import java.util.Objects;
import java.util.Random;

import com.google.common.math.IntMath;

import eu.over9000.veya.util.Location;
import eu.over9000.veya.world.storage.ChunkProvider;
import eu.over9000.veya.world.storage.ChunkRequestLevel;

public class World {
	public static final int MAX_WORLD_HEIGHT = 256;
	public st<fim_middle>","
 * Veya
 * Copyright (C) 2015 s1mpl3x
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */","*
	 * @return the chunkProvider
	 */"
"<fim_prefix>/*<fim_suffix>
package inetsoft.analytic.composition.command;

import inetsoft.uql.asset.internal.AssemblyInfo;
import inetsoft.uql.viewsheet.internal.VSAssemblyInfo;
import inetsoft.util.Tool;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import java.io.PrintWriter;

/**
 * Show data tooltip command.
 *
 * @version 8.5
 * @author InetSoft Technology Corp
 */
public class ShowDataTipComm<fim_middle>","
 * This file is part of StyleBI.
 * Copyright (C) 2024  InetSoft Technology
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Show data tooltip command.
 *
 * @version 8.5
 * @author InetSoft Technology Corp
 */"
"<fim_prefix>n.command;

import inetsoft.uql.asset.internal.AssemblyInfo;
import inetsoft.uql.viewsheet.internal.VSAssemblyInfo;
import inetsoft.util.Tool;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import java.io.PrintWriter;

/**
 * Show data tooltip command.
 *
 * @version 8.5
 * @author InetSoft Technology Corp
 */
public class ShowDataTipCommand extends ViewsheetCommand {
   /**<fim_suffix>
   public ShowDataTipCommand() {
      super();
   }

   /**
    * Constructor.
    * @param info the assembly info.
    * @param childInfos the children info(s) of the param info, if the info is
    *  group container info, the childInfos will exist, otherwise will be null.
    * @param conds the condition of the data tip view.
    * @param pName the name of the object whose data tip<fim_middle>","
    * Constructor.
    */","
    * Constructor.
    */"
"<fim_prefix>e data tip view.
    * @param pName the name of the object whose data tip view info is param info.
    */
   public ShowDataTipCommand(VSAssemblyInfo info, VSAssemblyInfo[] childInfos,
                             String conds, String pName) {
      this();
      put(""condition"", conds);
      put(""pName"", pName);
      this.info = info;
      this.childInfos = childInfos;
   }

   /**<fim_suffix>
   public VSAssemblyInfo getMainInfo() {
      return info;
   }

   /**
    * Get children info.
    */
   public VSAssemblyInfo[] getChildInfos() {
      return childInfos;
   }

   public String getAbsoluteName() {
      return info != null ? info.getAbsoluteName() : null;
   }

   public String[] getChildrenNames() {
      if(childInfos == null) {
         return new String[0];
  <fim_middle>","
    * Get main object info.
    */","
    * Get main info.
    */"
"<fim_prefix> public ShowDataTipCommand(VSAssemblyInfo info, VSAssemblyInfo[] childInfos,
                             String conds, String pName) {
      this();
      put(""condition"", conds);
      put(""pName"", pName);
      this.info = info;
      this.childInfos = childInfos;
   }

   /**
    * Get main object info.
    */
   public VSAssemblyInfo getMainInfo() {
      return info;
   }

   /**<fim_suffix>
   public VSAssemblyInfo[] getChildInfos() {
      return childInfos;
   }

   public String getAbsoluteName() {
      return info != null ? info.getAbsoluteName() : null;
   }

   public String[] getChildrenNames() {
      if(childInfos == null) {
         return new String[0];
      }

      String[] names = new String[childInfos.length];

      for(int i = 0; i < childInfos.length;<fim_middle>","
    * Get children info.
    */","
    * Get child objects info.
   "
"<fim_prefix>uteName() {
      return info != null ? info.getAbsoluteName() : null;
   }

   public String[] getChildrenNames() {
      if(childInfos == null) {
         return new String[0];
      }

      String[] names = new String[childInfos.length];

      for(int i = 0; i < childInfos.length; i++) {
         names[i] = childInfos[i].getAbsoluteName();
      }

      return names;
   }

   /**<fim_suffix>
   @Override
   protected void writeContents(PrintWriter writer) {
      super.writeContents(writer);

      writer.println(""<info>"");
      info.writeXML(writer);
      writer.println(""</info>"");

      if(childInfos != null) {
         writer.println(""<childInfos>"");

         for(int i = 0; i < childInfos.length; i++) {
            childInfos[i].writeXML(writer);
         }

      <fim_middle>","
    * Write the contents of this object.
    * @param writer the output stream to which to write the XML data.
    */","
    * @return the child infos
    */"
"<fim_prefix>of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package inetsoft.analytic.composition.command;

import inetsoft.uql.asset.internal.AssemblyInfo;
import inetsoft.uql.viewsheet.internal.VSAssemblyInfo;
import inetsoft.util.Tool;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import java.io.PrintWriter;

/**<fim_suffix>
public class ShowDataTipCommand extends ViewsheetCommand {
   /**
    * Constructor.
    */
   public ShowDataTipCommand() {
      super();
   }

   /**
    * Constructor.
    * @param info the assembly info.
    * @param childInfos the children info(s) of the param info, if the info is
    *  group container info, the childInfos will exist, otherwise will be null.
    * @param conds <fim_middle>","
 * Show data tooltip command.
 *
 * @version 8.5
 * @author InetSoft Technology Corp
 */","
 * Command to show data tip.
 * @author <NAME>
 * @version 1.0
 * @since"
"<fim_prefix>r writer) {
      super.writeContents(writer);

      writer.println(""<info>"");
      info.writeXML(writer);
      writer.println(""</info>"");

      if(childInfos != null) {
         writer.println(""<childInfos>"");

         for(int i = 0; i < childInfos.length; i++) {
            childInfos[i].writeXML(writer);
         }

         writer.println(""</childInfos>"");
      }
   }

   /**<fim_suffix>
   @Override
   protected void parseContents(Element tag) throws Exception {
      super.parseContents(tag);

      Element infoNode = Tool.getChildNodeByTagName(tag, ""info"");
      info = (VSAssemblyInfo) AssemblyInfo.createAssemblyInfo(infoNode);
      Element infosNode = Tool.getChildNodeByTagName(tag, ""childInfos"");

      if(infosNode != null) {
         NodeList infosNodeList = <fim_middle>","
    * Read in the contents of this object from an xml tag.
    * @param tag the specified xml element.
    */","
    * @see com.perforce.team.ui.xml.XMLStream#getTagName()
    */"
"<fim_prefix>eet.internal.VSAssemblyInfo;
import inetsoft.util.Tool;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import java.io.PrintWriter;

/**
 * Show data tooltip command.
 *
 * @version 8.5
 * @author InetSoft Technology Corp
 */
public class ShowDataTipCommand extends ViewsheetCommand {
   /**
    * Constructor.
    */
   public ShowDataTipCommand() {
      super();
   }

   /**<fim_suffix>
   public ShowDataTipCommand(VSAssemblyInfo info, VSAssemblyInfo[] childInfos,
                             String conds, String pName) {
      this();
      put(""condition"", conds);
      put(""pName"", pName);
      this.info = info;
      this.childInfos = childInfos;
   }

   /**
    * Get main object info.
    */
   public VSAssemblyInfo getMainInfo() {
      return info;
   }

   <fim_middle>","
    * Constructor.
    * @param info the assembly info.
    * @param childInfos the children info(s) of the param info, if the info is
    *  group container info, the childInfos will exist, otherwise will be null.
    * @param conds the condition of the data tip view.
    * @param pName the name of the object whose data tip view info is param info.
    */","
    * Constructor.
    *
    * @param info                                                                                         "
"<fim_prefix>/**<fim_suffix>
/**
 * JReliability is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 * 
 * JReliability is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied<fim_middle>","*****************************************************************************
 * JReliability is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * JReliability is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with JReliability. If not, see http://www.gnu.org/licenses/.
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>neral Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Opt4J. If not, see http://www.gnu.org/licenses/.
 */
package org.jreliability.function.common;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

/**<fim_suffix>
public class SampledReliabilityFunctionTest {
	protected SampledReliabilityFunction f;
	protected List<Double> samples = Arrays.asList(1.5, 0.5, 1.0);

	@Before
	public void init() {
		f = new SampledReliabilityFunction(samples);
	}

	@Test
	public void testGetY() {
		Assert.assertEquals(0.33333333333, f.getY(1.0), 0.0001);
	}

	@Test
	public void testGetYAtZero() {
		Assert.assertEqu<fim_middle>","
 * The {@link SampledReliabilityFunctionTest} to test the
 * {@link SampledReliabilityFunction}.
 * 
 * @author reimann, glass
 *
 */","
 * Tests for {@link SampledReliabilityFunction}.
 * 
 * @author <NAME>
 */"
"<fim_prefix>thout even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with JReliability. If not, see http://www.gnu.org/licenses/.
 *******************************************************************************/
/**<fim_suffix>
package org.jreliability.function.common;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

/**
 * The {@link SampledReliabilityFunctionTest} to test the
 * {@link SampledReliabilityFunction}.
 * 
 * @author reimann, glass
 *
 */
public class SampledReliabilityFunctionTest {
	protec<fim_middle>","
 * JReliability is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 * 
 * JReliability is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Opt4J. If not, see http://www.gnu.org/licenses/.
 */","****************************************************************************
 * Reliability (http://reliability.googlecode.com).
 * Copyright (c) 2012 <NAME>. All rights reserved.
 *
 * All rights reserved. Published under the BSD License in the LICENSE file.
 ******************************************************************************/"
"<fim_prefix>ableServers + 1;
        firePropertyChange(""numberAvailableServers"", numberAvailableServers);

        numberServed = numberServed + 1;
        firePropertyChange(""numberServed"", numberServed);
//        Needs higher priority than Arrival event in case of time ties
        if (getNumberInQueue() > 0) {
            waitDelay(""StartService"", 0.0, Priority.HIGH);
        }
    }

    /**<fim_suffix>
    public void doRenege(Integer customerID) {
        queue.remove(customerID);
        firePropertyChange(""queue"", getQueue());

        numberReneges = numberReneges + 1;
        firePropertyChange(""numberReneges"", numberReneges);
    }

    public void setTotalNumberServers(int totalNumberServers) {
        this.totalNumberServers = totalNumberServers;
    }

    public int getTot<fim_middle>","
     * A customerID has reached the ""limit"" of their patience and leaves the
     * queue without receiving service (""renege).
     *
     * Remove the given customerID from the queue. Increment the total number of
     * reneges.
     *
     * @param customerID Index of customerID leaving queue
     */","
     * @param customerID
     */"
"<fim_prefix>nge(""customer"", customerID);

        queue.remove(customerID);
        firePropertyChange(""queue"", getQueue());

        numberAvailableServers = numberAvailableServers - 1;
        firePropertyChange(""numberAvailableServers"", numberAvailableServers);

        interrupt(""Renege"", customerID);

        waitDelay(""EndService"", serviceTimeGenerator.generate(), customerID);
    }

    /**<fim_suffix>
    public void doEndService(Integer customer) {
        numberAvailableServers = numberAvailableServers + 1;
        firePropertyChange(""numberAvailableServers"", numberAvailableServers);

        numberServed = numberServed + 1;
        firePropertyChange(""numberServed"", numberServed);
//        Needs higher priority than Arrival event in case of time ties
        if (getNumberInQueu<fim_middle>","
     * Increment number of available servers. If queue is not empty, schedule
     * StartService with 0.0 delay.
     *
     * @param customer Index of customerID ending service
     */","
     * Interrupt the customer
     *
     * @param customerID
     */"
"<fim_prefix>    setServiceTimeGenerator(serviceTimeGenerator);
        setRenegeTimeGenerator(renegeTimeGenerator);
    }

    /**
     * Set initial values of all state variables.
     */
    @Override
    public void reset() {
        super.reset();
        numberAvailableServers = getTotalNumberServers();
        queue.clear();
        numberServed = 0;
        numberReneges = 0;
    }

    /**<fim_suffix>
    public void doRun() {
        firePropertyChange(""numberAvailableServers"", numberAvailableServers);
        firePropertyChange(""numberInQueue"", queue.size());
        firePropertyChange(""numberServed"", numberServed);
        firePropertyChange(""numberReneges"", numberReneges);
    }

    /**
     * Add arriving customerID to queue. Schedule Renege event for this
     * customerID a<fim_middle>","
     * Just fires PropertyChangeEvents for time-varying states and for counts.
     */","
     * Add arriving customerID to queue. Schedule Renege event for this
     *"
"<fim_prefix>e times
     * @param renegeTimeGenerator generates renege times
     */
    public ServerWithReneges(int totalNumberServers, RandomVariate serviceTimeGenerator, RandomVariate renegeTimeGenerator) {
        this();
        setTotalNumberServers(totalNumberServers);
        setServiceTimeGenerator(serviceTimeGenerator);
        setRenegeTimeGenerator(renegeTimeGenerator);
    }

    /**<fim_suffix>
    @Override
    public void reset() {
        super.reset();
        numberAvailableServers = getTotalNumberServers();
        queue.clear();
        numberServed = 0;
        numberReneges = 0;
    }

    /**
     * Just fires PropertyChangeEvents for time-varying states and for counts.
     */
    public void doRun() {
        firePropertyChange(""numberAvailableServers"", numberAva<fim_middle>","
     * Set initial values of all state variables.
     */","
     * Creates a new ServerWithReneges with the given number of servers"
"<fim_prefix>    * @param customerID Arriving Customer index
     */
    public void doArrival(Integer customerID) {
        queue.add(customerID);
        firePropertyChange(""queue"", getQueue());

        waitDelay(""Renege"", renegeTimeGenerator.generate(), customerID);
        if (getNumberAvailableServers() > 0) {
            waitDelay(""StartService"", 0.0, Priority.HIGH);
        }
    }

    /**<fim_suffix>
    public void doStartService() {
        Integer customerID = queue.first();
        firePropertyChange(""customer"", customerID);

        queue.remove(customerID);
        firePropertyChange(""queue"", getQueue());

        numberAvailableServers = numberAvailableServers - 1;
        firePropertyChange(""numberAvailableServers"", numberAvailableServers);

        interrupt(""Renege"", cus<fim_middle>","
     * Remove first customerID from queue. Decrement number of available
     * servers. Cancel Renege event for this customerID. Schedule EndService
     * after a delay of a service time.
     */","
     * Start Service
     */"
"<fim_prefix>ends SimEntityBase {

    private int totalNumberServers;
    private RandomVariate serviceTimeGenerator;
    private RandomVariate renegeTimeGenerator;

    protected int numberAvailableServers;
    protected SortedSet<Integer> queue;

    protected int numberServed;
    protected int numberReneges;

    public ServerWithReneges() {
        this.queue = new TreeSet<>();
    }

    /**<fim_suffix>
    public ServerWithReneges(int totalNumberServers, RandomVariate serviceTimeGenerator, RandomVariate renegeTimeGenerator) {
        this();
        setTotalNumberServers(totalNumberServers);
        setServiceTimeGenerator(serviceTimeGenerator);
        setRenegeTimeGenerator(renegeTimeGenerator);
    }

    /**
     * Set initial values of all state variables.
     */
    @Override<fim_middle>","
     *
     * @param totalNumberServers total number of servers
     * @param serviceTimeGenerator Generate service times
     * @param renegeTimeGenerator generates renege times
     */","
     * Set initial values of all state variables.
     */"
"<fim_prefix>  /**
     * Just fires PropertyChangeEvents for time-varying states and for counts.
     */
    public void doRun() {
        firePropertyChange(""numberAvailableServers"", numberAvailableServers);
        firePropertyChange(""numberInQueue"", queue.size());
        firePropertyChange(""numberServed"", numberServed);
        firePropertyChange(""numberReneges"", numberReneges);
    }

    /**<fim_suffix>
    public void doArrival(Integer customerID) {
        queue.add(customerID);
        firePropertyChange(""queue"", getQueue());

        waitDelay(""Renege"", renegeTimeGenerator.generate(), customerID);
        if (getNumberAvailableServers() > 0) {
            waitDelay(""StartService"", 0.0, Priority.HIGH);
        }
    }

    /**
     * Remove first customerID from queue. Decrement n<fim_middle>","
     * Add arriving customerID to queue. Schedule Renege event for this
     * customerID after a renegeTimeGenerator delay. If there is an available
     * server, schedule StartService event
     *
     * @param customerID Arriving Customer index
     */","
     * Wait for a random time and then serve the customer.
     *
     * @param customerID the customerID to serve
     */"
"<fim_prefix>package simkit.examples;

import java.util.SortedSet;
import java.util.TreeSet;
import simkit.Priority;

import simkit.SimEntityBase;
import simkit.random.RandomVariate;

/**<fim_suffix>
public class ServerWithReneges extends SimEntityBase {

    private int totalNumberServers;
    private RandomVariate serviceTimeGenerator;
    private RandomVariate renegeTimeGenerator;

    protected int numberAvailableServers;
    protected SortedSet<Integer> queue;

    protected int numberServed;
    protected int numberReneges;

    public ServerWithReneges() {
        this.queu<fim_middle>","
 * A multiple-server queue with impatient customers. Each arriving is willing to
 * wait only a given amount of time in the queue, represented by the random
 * sequence renegeTimeGenerator. If a customerID's time has elapsed without
 * receiving service, that customerID exits the queue (""reneges"") without
 * receiving service.
 *
 * @author Arnold Buss
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>
package com.softhub.ps.util;

/**<fim_suffix>

import java.awt.Dimension;
import java.awt.AWTEvent;
import java.awt.Event;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.InputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Enumeration;
import java.util.Vector;

publ<fim_middle>","
 * Copyright 1998 by Christian Lehner.
 *
 * This file is part of ToastScript.
 *
 * ToastScript is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * ToastScript is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ToastScript; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package org.openhab.binding.zoneminder.internal.dto;

import com.google.gson.annotations.SerializedName;

/**
 * The {@link EventContainerDTO} holds a Zoneminder event object.
 *
 * @author Mark Hilbush - Initial contribution
 */
public class EventContainerDTO {

    /**
     * Zoneminder event object
     */
    @SerializedName(""Event"")
    public EventDTO event;
}
<fim_middle>","
 * Copyright (c) 2010-2021 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","
 * Copyright 2013-2016 Mark Hilbush
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an ""AS IS"""
"<fim_prefix>buted with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.openhab.binding.zoneminder.internal.dto;

import com.google.gson.annotations.SerializedName;

/**<fim_suffix>
public class EventContainerDTO {

    /**
     * Zoneminder event object
     */
    @SerializedName(""Event"")
    public EventDTO event;
}
<fim_middle>","
 * The {@link EventContainerDTO} holds a Zoneminder event object.
 *
 * @author Mark Hilbush - Initial contribution
 */","
 * Zoneminder event container
 */"
"<fim_prefix>License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.openhab.binding.zoneminder.internal.dto;

import com.google.gson.annotations.SerializedName;

/**
 * The {@link EventContainerDTO} holds a Zoneminder event object.
 *
 * @author Mark Hilbush - Initial contribution
 */
public class EventContainerDTO {

    /**<fim_suffix>
    @SerializedName(""Event"")
    public EventDTO event;
}
<fim_middle>","
     * Zoneminder event object
     */","
     * The event object.
     */"
"<fim_prefix>package universe25.GameLogic.Movement.MoveSequence;

import universe25.GameLogic.Movement.Pathfinding.GridCell;
import universe25.World.GridLayers.GridMapLayer;

import java.util.ArrayList;
import java.util.Collections;

/**<fim_suffix>
public class GridMoveSequence extends MoveSequence {
    private ArrayList<GridCell> cells; // [0]-> row, [1]-> col
    private GridMapLayer grid;

    public GridMoveSequence() {
        this.cells = new ArrayList<>();
    }

    public GridMoveSequence(GridMapLayer grid) {
        this.cells = new ArrayList<>();
        this.grid = grid;
    }

    public GridMoveSequence(GridMapLay<fim_middle>","
 * Created by jorl17 on 11/08/15.
 */","
 * A move sequence that uses a grid to determine the path.
 */"
"<fim_prefix> public GridMoveSequence reverse() {
        super.reverse();
        Collections.reverse(cells);
        return this;
    }

    public void setGrid(GridMapLayer grid) {
        this.grid = grid;
    }

    protected GridMapLayer getGrid() {
        return grid;
    }

    public boolean containsMove(GridCell agentCell) {
        //FIXME: THIS IS SO GOD DAMNED SLOW FOR SURE
        /*<fim_suffix>

        //FIXME Never forget that this forces us to always fetch cells from the same GridLayerMap!! References!
        return cells.contains(agentCell);
    }
}
<fim_middle>","for ( GridCell cell : cells )
            if ( cell.equals(agentCell))
                return true;

        return false;*/","
        for (GridCell cell : cells) {
            if (cell.equals(agentCell)) {
                return true;
  "
"<fim_prefix>/*<fim_suffix>
package components.animation;

import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.scene.input.MouseEvent;

import components.Component;
import components.IComponent;

public class PressAndPassAnimation<T extends Node> extends Component<T>{
	
	private final PressAnimation<T> pressAnimation;
	private final PassAnimation<T> passAnimation;
	
	// Constructors
	
	publ<fim_middle>","-
 * Copyright (c) 2016, NGSPipes Team <ngspipes@gmail.com>
 * All rights reserved.
 *
 * This file is part of NGSPipes <http://ngspipes.github.io/>.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * A component that can be pressed and then passed.
 * @author <NAME>
 *
 * @param <T>
 */"
"<fim_prefix>/**<fim_suffix>

package com.abixen.platform.service.businessintelligence.multivisualisation.domain.model;

import com.abixen.platform.common.domain.model.AbstractBuilder;
import com.abixen.platform.common.domain.model.audit.SimpleAuditingModel;
import com.abixen.platform.service.businessintelligence.multivisualisation.domain.model.datasource.DataSource;

import javax.persistence.CascadeType;
import <fim_middle>","
 * Copyright (c) 2010-present Abixen Systems. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */","
 * Created by abixen on 16.03.2017.
 */"
"<fim_prefix>package games.stendhal.server.entity.spell.effect;

import games.stendhal.common.constants.Nature;
import games.stendhal.server.entity.Entity;
import games.stendhal.server.entity.GuidedEntity;
import games.stendhal.server.entity.player.Player;
/**<fim_suffix>
public class ModifySpeedEffect extends AbstractEffect {

	public ModifySpeedEffect(final Nature nature, final int amount, final int atk, final int def,
			final double lifesteal, final int rate, final int regen, double modifier) {
		super(nature, amount, atk, def, lifesteal, rate, regen, modifier);
	}

	@Override
	public void act(final Player caster, final Entity target) {
		actIntern<fim_middle>","
 * Slow down an entity
 * @author madmetzger
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package be.ac.ua.comp.scarletnebula.wizard;

public interface DataRecorder {

}
<fim_middle>","
 * Copyright (C) 2011  Ives van der Flaas
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package org.entityapi.api.entity.mind.behaviour.goals;

import org.entityapi.api.entity.ControllableEntity;
import org.entityapi.api.entity.mind.behaviour.Behaviour;

public class BehaviourLeapAtTarget extends Behaviour {

    public BehaviourLeapAtTarget(ControllableEntity controllableEntity) {
        this(controllableEntity, 0.4F);
    }

    public BehaviourLeapAtTarget(Controlla<fim_middle>","
 * Copyright (C) EntityAPI Team
 *
 * This file is part of EntityAPI.
 *
 * EntityAPI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * EntityAPI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with EntityAPI.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 2016-12-09.
 */"
"<fim_prefix>/*<fim_suffix>

package bluecrystal.applet.sign;

public interface SignAppletP11 {

	public abstract String sign(int store, int alg, String userPIN,
			String certAlias, String orig);

	public abstract String listCerts(int store, String userPIN);

	public abstract String getCertificate(String alias);

	int getKeySize(String alias);

	String getSubject(String alias);

}<fim_middle>","
    Blue Crystal: Document Digital Signature Tool
    Copyright (C) 2007-2015  Sergio Leal

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package com.rathore.aidoalertsystem;

import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import a<fim_middle>","Created on 15/02/17 by Ingen Dynamics Inc. This program is free software:
 *you can redistribute it and/or modify it under the terms of the GNU General
 *Public License as published by the Free Software Foundation,
 *either version 3 of the License, or (at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by rathore on 4/6/17.
 */"
"<fim_prefix>oid.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;
import com.rathore.aidoalertsystem.Adapter.DashboardAdapter;
import com.rathore.aidoalertsystem.Database.DatabaseHandler;
import com.rathore.aidoalertsystem.Models.Alert;
import com.rathore.aidoalertsystem.Service.BackgroundService;
import java.util.ArrayList;

/*<fim_suffix>
public class Dashboard extends AppCompatActivity {

    //Initializing the required objects and variables.
    private ActionBarDrawerToggle mDrawerToggle;
    private DrawerLayout mDrawerLayout;
    private ListView mDrawerList;
    ListView listView;
    DatabaseHandler databaseHandler;
    ArrayList<Alert> alertArrayList = new ArrayList<>();
    ArrayList<String> alertDialogList;
 <fim_middle>","This Activity was developed by Ingen Dynamics Inc. for use in Aido Robotics.
 *This Activity is used to show triggered alerts in the dashboard where we can see the status of the
 * alerts, we can resolve the alerts and set the priority. If the alert is not resolved the
 * dashboad will keep triggering the alerts.
 */","*
 * Created by Rathore on 10/12/2017.
 */"
"<fim_prefix>ctivity(intent);
                finish();
            }
            if(position==2){
               // opens Mainactivity
                Intent intent = new Intent(getApplicationContext(),MainActivity.class);
                startActivity(intent);
                finish();
            }
        }
    }
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        /*<fim_suffix>
        if (mDrawerToggle.onOptionsItemSelected(item)) {
            return true;
        }

        // Handle your other action bar items...

        return super.onOptionsItemSelected(item);
    }
    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
        mDrawerToggle.syncState();
    }
}


<fim_middle>"," Pass the event to ActionBarDrawerToggle
         * If it returns true, then it has handled
         * the nav drawer indicator touch event
         */"," Handle action bar item clicks here. The action bar will
         * automatically handle clicks on the Home/Up button, so long
         * as you specify a parent activity in AndroidManifest."
"<fim_prefix>shboard.this,alertArrayList);
        listView.setAdapter(dashboardAdapter);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                dailogueBoxForSelectedAlert(alertArrayList.get(position));
            }
        });
    }

    /*<fim_suffix>
    public void dailogueBoxForSelectedAlert(final Alert alert){
        final Dialog dialog=new Dialog(Dashboard.this);
        dialog.setContentView(R.layout.alertcategorylist);
        dialog.getWindow().setBackgroundDrawableResource(R.color.white);
        dialog.setTitle(""Resolve Or Change Priority"");
        ListView listView =(ListView) dialog.findViewById(R.id.alertcategoryList<fim_middle>","The method helps us change the status of the alerts if its resolved and also change the
     *priority.
     */","*
     * This method is used to display the alert details in a dialog box
     * @param alert
 "
"<fim_prefix> * Types of predicates used for annotation queries.
 */
public enum ConstraintType
{
    /**
     * Equals predicate.
     */
    EQ,
    
    /**
     * Greater or equal predicate.
     */
    GE,
    
    /**
     * Greater than predicate.
     */
    GT,
    
    /**
     * Less or equal predicate.
     */
    LE,
    
    /**
     * Less than predicate.
     */
    LT,
    
    /**<fim_suffix>
    REGEX
}
<fim_middle>","
     * Predicate for regular expression matching (see 
     * {@link http://www.w3.org/TR/rdf-sparql-query/#funcex-regex}).
     * Provide the regular expression pattern as the value of the constraint.
     * If the use of flags is required, provide as the value of the constraint 
     * an array of two strings, the first being the pattern, the second 
     * representing the flags.
     */","
     * Regular expression predicate.
     */"
"<fim_prefix>oftware, licenced under the GNU Lesser General Public License,
 *  Version 3, June 2007 (also included with this distribution as file
 *  LICENCE-LGPL3.html).
 *
 *  Valentin Tablan, 5 Aug 2009
 *
 *  $Id: ConstraintType.java 14541 2011-11-14 19:31:23Z ian_roberts $
 */
package gate.mimir;

/**
 * Types of predicates used for annotation queries.
 */
public enum ConstraintType
{
    /**<fim_suffix>
    EQ,
    
    /**
     * Greater or equal predicate.
     */
    GE,
    
    /**
     * Greater than predicate.
     */
    GT,
    
    /**
     * Less or equal predicate.
     */
    LE,
    
    /**
     * Less than predicate.
     */
    LT,
    
    /**
     * Predicate for regular expression matching (see 
     * {@link http://www.w3.org/TR/rdf-sparql-query/#funcex-regex}).
<fim_middle>","
     * Equals predicate.
     */","
     * Predicate for equality.
    "
"<fim_prefix>his file is part of GATE MÃ­mir (see http://gate.ac.uk/family/mimir.html), 
 *  and is free software, licenced under the GNU Lesser General Public License,
 *  Version 3, June 2007 (also included with this distribution as file
 *  LICENCE-LGPL3.html).
 *
 *  Valentin Tablan, 5 Aug 2009
 *
 *  $Id: ConstraintType.java 14541 2011-11-14 19:31:23Z ian_roberts $
 */
package gate.mimir;

/**<fim_suffix>
public enum ConstraintType
{
    /**
     * Equals predicate.
     */
    EQ,
    
    /**
     * Greater or equal predicate.
     */
    GE,
    
    /**
     * Greater than predicate.
     */
    GT,
    
    /**
     * Less or equal predicate.
     */
    LE,
    
    /**
     * Less than predicate.
     */
    LT,
    
    /**
     * Predicate for regular expression matching (see <fim_middle>","
 * Types of predicates used for annotation queries.
 */","
 *  Constraint type.
 *  
 *  @"
"<fim_prefix>lan, 5 Aug 2009
 *
 *  $Id: ConstraintType.java 14541 2011-11-14 19:31:23Z ian_roberts $
 */
package gate.mimir;

/**
 * Types of predicates used for annotation queries.
 */
public enum ConstraintType
{
    /**
     * Equals predicate.
     */
    EQ,
    
    /**
     * Greater or equal predicate.
     */
    GE,
    
    /**
     * Greater than predicate.
     */
    GT,
    
    /**<fim_suffix>
    LE,
    
    /**
     * Less than predicate.
     */
    LT,
    
    /**
     * Predicate for regular expression matching (see 
     * {@link http://www.w3.org/TR/rdf-sparql-query/#funcex-regex}).
     * Provide the regular expression pattern as the value of the constraint.
     * If the use of flags is required, provide as the value of the constraint 
     * an array of two stri<fim_middle>","
     * Less or equal predicate.
     */","
     * Less or equal predicate.
     */"
"<fim_prefix>-14 19:31:23Z ian_roberts $
 */
package gate.mimir;

/**
 * Types of predicates used for annotation queries.
 */
public enum ConstraintType
{
    /**
     * Equals predicate.
     */
    EQ,
    
    /**
     * Greater or equal predicate.
     */
    GE,
    
    /**
     * Greater than predicate.
     */
    GT,
    
    /**
     * Less or equal predicate.
     */
    LE,
    
    /**<fim_suffix>
    LT,
    
    /**
     * Predicate for regular expression matching (see 
     * {@link http://www.w3.org/TR/rdf-sparql-query/#funcex-regex}).
     * Provide the regular expression pattern as the value of the constraint.
     * If the use of flags is required, provide as the value of the constraint 
     * an array of two strings, the first being the pattern, the second 
     * repr<fim_middle>","
     * Less than predicate.
     */","
     * Less than predicate.
     */"
"<fim_prefix>License,
 *  Version 3, June 2007 (also included with this distribution as file
 *  LICENCE-LGPL3.html).
 *
 *  Valentin Tablan, 5 Aug 2009
 *
 *  $Id: ConstraintType.java 14541 2011-11-14 19:31:23Z ian_roberts $
 */
package gate.mimir;

/**
 * Types of predicates used for annotation queries.
 */
public enum ConstraintType
{
    /**
     * Equals predicate.
     */
    EQ,
    
    /**<fim_suffix>
    GE,
    
    /**
     * Greater than predicate.
     */
    GT,
    
    /**
     * Less or equal predicate.
     */
    LE,
    
    /**
     * Less than predicate.
     */
    LT,
    
    /**
     * Predicate for regular expression matching (see 
     * {@link http://www.w3.org/TR/rdf-sparql-query/#funcex-regex}).
     * Provide the regular expression pattern as the value of th<fim_middle>","
     * Greater or equal predicate.
     */","
     * Not equals predicate.
     */"
"<fim_prefix>/*<fim_suffix>
package gate.mimir;

/**
 * Types of predicates used for annotation queries.
 */
public enum ConstraintType
{
    /**
     * Equals predicate.
     */
    EQ,
    
    /**
     * Greater or equal predicate.
     */
    GE,
    
    /**
     * Greater than predicate.
     */
    GT,
    
    /**
     * Less or equal predicate.
     */
    LE,
    
    /**
     * Less than predicate.
  <fim_middle>","
 *  ConstraintType.java
 *
 *  Copyright (c) 2007-2011, The University of Sheffield.
 *
 *  This file is part of GATE MÃ­mir (see http://gate.ac.uk/family/mimir.html), 
 *  and is free software, licenced under the GNU Lesser General Public License,
 *  Version 3, June 2007 (also included with this distribution as file
 *  LICENCE-LGPL3.html).
 *
 *  Valentin Tablan, 5 Aug 2009
 *
 *  $Id: ConstraintType.java 14541 2011-11-14 19:31:23Z ian_roberts $
 */","*
 * Types of predicates used for annotation queries.
 */"
"<fim_prefix>ibution as file
 *  LICENCE-LGPL3.html).
 *
 *  Valentin Tablan, 5 Aug 2009
 *
 *  $Id: ConstraintType.java 14541 2011-11-14 19:31:23Z ian_roberts $
 */
package gate.mimir;

/**
 * Types of predicates used for annotation queries.
 */
public enum ConstraintType
{
    /**
     * Equals predicate.
     */
    EQ,
    
    /**
     * Greater or equal predicate.
     */
    GE,
    
    /**<fim_suffix>
    GT,
    
    /**
     * Less or equal predicate.
     */
    LE,
    
    /**
     * Less than predicate.
     */
    LT,
    
    /**
     * Predicate for regular expression matching (see 
     * {@link http://www.w3.org/TR/rdf-sparql-query/#funcex-regex}).
     * Provide the regular expression pattern as the value of the constraint.
     * If the use of flags is required, provid<fim_middle>","
     * Greater than predicate.
     */","
     * Greater than predicate.
     */"
"<fim_prefix>/**<fim_suffix>

package com.willianveiga.countdowntimer.Utils;

public class StringUtils {

    public static String padTimeUnit(long timeUnit) {
        String padFormat = ""%02d"";
        return String.format(padFormat, timeUnit);
    }
}<fim_middle>","
 * Copyright 2015 Willian Gustavo Veiga
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * Created by willianveiga on 10/10/17.
 */"
"<fim_prefix>package net.sharkfw.security;

import net.sharkfw.knowledgeBase.PeerSemanticTag;

import java.security.PublicKey;

/**<fim_suffix>
public class SimpleSharkCertificate implements SharkCertificate {

    private PublicKey ownerPublickKey;
    private PeerSemanticTag owner;
    private long validity;
    private byte[] fingerprint;
    private long receiveDate;
    private PeerSemanticTag signer;
    private byte[] signature;
    private long signingDate;

    public SimpleSharkCertificate(PublicKey ownerPublickKey,<fim_middle>","
 * Created by j4rvis on 2/13/17.
 */","
 * Created by ALE on 2016/11/1.
 */"
"<fim_prefix>/*<fim_suffix>
package org.ourgrid.worker.communication.dao;

import java.util.Map;

import org.ourgrid.common.interfaces.MessageProcessor;
import org.ourgrid.common.interfaces.to.MessageHandle;
import org.ourgrid.common.util.CommonUtils;

public class WorkerMessageProcessorDAO {
	
	private Map<String, MessageProcessor<?>> workerMessageProcessors;
	
	public WorkerMessageProcessorDAO() {<fim_middle>","
 * Copyright (C) 2008 Universidade Federal de Campina Grande
 *  
 * This file is part of OurGrid. 
 *
 * OurGrid is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version. 
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details. 
 * 
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 * 
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>package osmo.tester.generator.endcondition;

/**<fim_suffix>
public abstract class AbstractEndCondition implements EndCondition {
  private boolean strict = false;

  /**
   * If true, the end condition should immediately stop test generation when it returns true.
   * If false, all other end conditions need to be true as well for test generation to stop.
   *
   * @return True if strict.
   */
  @Override
  public boolean isStrict() {
    retu<fim_middle>","
 * A base class for different end conditions.
 *
 * @author Teemu Kanstren
 */","
 * Abstract class for end conditions.
 *
 * @author <NAME>
 */"
"<fim_prefix>package osmo.tester.generator.endcondition;

/**
 * A base class for different end conditions.
 *
 * @author Teemu Kanstren
 */
public abstract class AbstractEndCondition implements EndCondition {
  private boolean strict = false;

  /**<fim_suffix>
  @Override
  public boolean isStrict() {
    return strict;
  }

  /** @param strict The new strict value. */
  @Override
  public void setStrict(boolean strict) {
    this.strict = strict;
  }
}
<fim_middle>","
   * If true, the end condition should immediately stop test generation when it returns true.
   * If false, all other end conditions need to be true as well for test generation to stop.
   *
   * @return True if strict.
   */","
   * Creates a new end condition.
   *
   * @param strict Whether the end condition is strict.
   */"
"<fim_prefix>s AbstractEndCondition implements EndCondition {
  private boolean strict = false;

  /**
   * If true, the end condition should immediately stop test generation when it returns true.
   * If false, all other end conditions need to be true as well for test generation to stop.
   *
   * @return True if strict.
   */
  @Override
  public boolean isStrict() {
    return strict;
  }

  /**<fim_suffix>
  @Override
  public void setStrict(boolean strict) {
    this.strict = strict;
  }
}
<fim_middle>", @param strict The new strict value. */,"
   * Sets whether the end condition"
"<fim_prefix>/*<fim_suffix>
package org.seedstack.seed.testing.junit4;

import static org.assertj.core.api.Assertions.assertThat;

import com.google.inject.CreationException;
import javax.inject.Inject;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.seedstack.seed.testing.Expected;
import org.seedstack.seed.testing.LaunchWith;
import org.seedstack.seed.testing.junit4.fixtures.TestITLauncher;
<fim_middle>","
 * Copyright Â© 2013-2024, The SeedStack authors <http://seedstack.org>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>

package uk.co.modularaudio.util.audio.math;


public class MixdownSliderDbToLevelComputer extends GenericDbToLevelComputer
{
	public static final float LINEAR_HIGHEST_DB = 10;
	public static final float LINEAR_LOWEST_DB = -30;
	
	public static final float COMPRESSED_HIGHEST_DB = -30;
	public static final float COMPRESSED_LOWEST_DB = -90;

	public MixdownSliderDbToLevelComputer( int n<fim_middle>","
 *
 * Copyright (C) 2015 - Daniel Hams, Modular Audio Limited
 *                      daniel.hams@gmail.com
 *
 * Mad is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Mad is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Mad.  If not, see <http://www.gnu.org/licenses/>.
 *
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package com.wei.c.im.test.helper;

import android.widget.TextView;

import com.wei.c.im.test.R;

public class ArriveStateHelper {

	public static String getArriveState(int arriveState) {
		switch (arriveState) {
		case 0:
			return ""..."";
		case 1:
			return ""未发送"";
		case 2:
			return ""已发送"";
		case 3:
			return ""已发送"";
		case 4:
			return ""送达"";
		case 5:
			retu<fim_middle>","
 * Copyright (C) 2014 Wei Chou (weichou2010@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * 送达状态
 * 
 * @author liuhao
 * @date 2017年6月28日
 */"
"<fim_prefix>/*<fim_suffix>

package fr.dwightstudio.jarmemu.base.asm.instruction;

import fr.dwightstudio.jarmemu.base.asm.argument.IgnoredArgument;
import fr.dwightstudio.jarmemu.base.asm.argument.NullArgument;
import fr.dwightstudio.jarmemu.base.asm.argument.ParsedArgument;
import fr.dwightstudio.jarmemu.base.asm.exception.ASMException;
import fr.dwightstudio.jarmemu.base.asm.exception.ExecutionASMException;
<fim_middle>","
 *            ____           _       __    __     _____ __            ___
 *           / __ \_      __(_)___ _/ /_  / /_   / ___// /___  ______/ (_)___
 *          / / / / | /| / / / __ `/ __ \/ __/   \__ \/ __/ / / / __  / / __ \
 *         / /_/ /| |/ |/ / / /_/ / / / / /_    ___/ / /_/ /_/ / /_/ / / /_/ /
 *        /_____/ |__/|__/_/\__, /_/ /_/\__/   /____/\__/\__,_/\__,_/_/\____/
 *                         /____/
 *     Copyright (C) 2024 Dwight Studio
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>thor Justin Merz
 */
public class DirectionsFeatureSet extends FeatureSet {
	
	protected DirectionsFeatureSet() {}

	/**
	 * The extent of the route.
	 * 
	 * @return Extent
	 */
	public final native Extent getExtent() /*-{
		return this.extent;
	}-*/;

	/**
	 * A single polyline representing the route.
	 * 
	 * @return Polyline
	 */
	public final native Polyline getMergedGeometry() /*<fim_suffix>;
	
	/**
	 * The ID of the route returned from the server.
	 * 
	 * @return String
	 */
	public final native String getRouteId() /*-{
		return this.routeId;
	}-*/;

	/**
	 * Name specified in RouteParameters.stops.
	 * 
	 * @return String
	 */
	public final native String getRouteName() /*-{
		return this.routeName;
	}-*/;
	
	/**
	 * Actual drive time calculated for the route.
	 * 
	 * <fim_middle>","-{
		return this.mergedGeometry;
	}-*/","-{
		return this.mergedGeometry;
	}-*/;"
"<fim_prefix> ETA - The estimated time of arrival at the route segment in the local time.
 *     maneuverType - The type of maneuver that the direction represents.
 *     
 *  DirectionsFeatureSet has no constructor. For more information, see Getting driving directions.
 * 
 * @author Justin Merz
 */
public class DirectionsFeatureSet extends FeatureSet {
	
	protected DirectionsFeatureSet() {}

	/**<fim_suffix>
	public final native Extent getExtent() /*-{
		return this.extent;
	}-*/;

	/**
	 * A single polyline representing the route.
	 * 
	 * @return Polyline
	 */
	public final native Polyline getMergedGeometry() /*-{
		return this.mergedGeometry;
	}-*/;
	
	/**
	 * The ID of the route returned from the server.
	 * 
	 * @return String
	 */
	public final native String getRouteId() /*-{
		retu<fim_middle>","
	 * The extent of the route.
	 * 
	 * @return Extent
	 */","
	 * The extent of the route.
	 * 
	 * @return Extent
	 */"
"<fim_prefix>e type of maneuver that the direction represents.
 *     
 *  DirectionsFeatureSet has no constructor. For more information, see Getting driving directions.
 * 
 * @author Justin Merz
 */
public class DirectionsFeatureSet extends FeatureSet {
	
	protected DirectionsFeatureSet() {}

	/**
	 * The extent of the route.
	 * 
	 * @return Extent
	 */
	public final native Extent getExtent() /*<fim_suffix>;

	/**
	 * A single polyline representing the route.
	 * 
	 * @return Polyline
	 */
	public final native Polyline getMergedGeometry() /*-{
		return this.mergedGeometry;
	}-*/;
	
	/**
	 * The ID of the route returned from the server.
	 * 
	 * @return String
	 */
	public final native String getRouteId() /*-{
		return this.routeId;
	}-*/;

	/**
	 * Name specified in RouteParameters.stops<fim_middle>","-{
		return this.extent;
	}-*/","-{
		return this.extent;
	}-*/;"
"<fim_prefix>tent
	 */
	public final native Extent getExtent() /*-{
		return this.extent;
	}-*/;

	/**
	 * A single polyline representing the route.
	 * 
	 * @return Polyline
	 */
	public final native Polyline getMergedGeometry() /*-{
		return this.mergedGeometry;
	}-*/;
	
	/**
	 * The ID of the route returned from the server.
	 * 
	 * @return String
	 */
	public final native String getRouteId() /*<fim_suffix>;

	/**
	 * Name specified in RouteParameters.stops.
	 * 
	 * @return String
	 */
	public final native String getRouteName() /*-{
		return this.routeName;
	}-*/;
	
	/**
	 * Actual drive time calculated for the route.
	 * 
	 * @return double
	 */
	public final native double getTotalDriveTime() /*-{
		return this.totalDriveTime;
	}-*/;

	/**
	 * The length of the route as specified in Ro<fim_middle>","-{
		return this.routeId;
	}-*/","-{
		return this.routeId;
	}-*/"
"<fim_prefix>getExtent() /*-{
		return this.extent;
	}-*/;

	/**
	 * A single polyline representing the route.
	 * 
	 * @return Polyline
	 */
	public final native Polyline getMergedGeometry() /*-{
		return this.mergedGeometry;
	}-*/;
	
	/**
	 * The ID of the route returned from the server.
	 * 
	 * @return String
	 */
	public final native String getRouteId() /*-{
		return this.routeId;
	}-*/;

	/**<fim_suffix>
	public final native String getRouteName() /*-{
		return this.routeName;
	}-*/;
	
	/**
	 * Actual drive time calculated for the route.
	 * 
	 * @return double
	 */
	public final native double getTotalDriveTime() /*-{
		return this.totalDriveTime;
	}-*/;

	/**
	 * The length of the route as specified in RouteParameters.directionsLengthUnits.
	 * 
	 * @return double
	 */
	public final n<fim_middle>","
	 * Name specified in RouteParameters.stops.
	 * 
	 * @return String
	 */","
	 * The name of the route returned from the server.
	 * 
	 * @return String
"
"<fim_prefix>tMergedGeometry() /*-{
		return this.mergedGeometry;
	}-*/;
	
	/**
	 * The ID of the route returned from the server.
	 * 
	 * @return String
	 */
	public final native String getRouteId() /*-{
		return this.routeId;
	}-*/;

	/**
	 * Name specified in RouteParameters.stops.
	 * 
	 * @return String
	 */
	public final native String getRouteName() /*-{
		return this.routeName;
	}-*/;
	
	/**<fim_suffix>
	public final native double getTotalDriveTime() /*-{
		return this.totalDriveTime;
	}-*/;

	/**
	 * The length of the route as specified in RouteParameters.directionsLengthUnits.
	 * 
	 * @return double
	 */
	public final native double getTotalLength() /*-{
		return this.totalLength;
	}-*/;
	
	/**
	 * The total time calculated for the route as specified in RouteParameters.directionsTi<fim_middle>","
	 * Actual drive time calculated for the route.
	 * 
	 * @return double
	 */","
	 * The total drive time calculated for the route as specified in RouteParameters.directionsTimeUnits.
	"
"<fim_prefix>RouteName() /*-{
		return this.routeName;
	}-*/;
	
	/**
	 * Actual drive time calculated for the route.
	 * 
	 * @return double
	 */
	public final native double getTotalDriveTime() /*-{
		return this.totalDriveTime;
	}-*/;

	/**
	 * The length of the route as specified in RouteParameters.directionsLengthUnits.
	 * 
	 * @return double
	 */
	public final native double getTotalLength() /*<fim_suffix>;
	
	/**
	 * The total time calculated for the route as specified in RouteParameters.directionsTimeAttribute.
	 * 
	 * @return double
	 */
	public final native double getTotalTime() /*-{
		return this.totalTime;
	}-*/;
	
}
<fim_middle>","-{
		return this.totalLength;
	}-*/","-{
		return this.totalLength;
	}-*/;"
"<fim_prefix>*/;

	/**
	 * The length of the route as specified in RouteParameters.directionsLengthUnits.
	 * 
	 * @return double
	 */
	public final native double getTotalLength() /*-{
		return this.totalLength;
	}-*/;
	
	/**
	 * The total time calculated for the route as specified in RouteParameters.directionsTimeAttribute.
	 * 
	 * @return double
	 */
	public final native double getTotalTime() /*<fim_suffix>;
	
}
<fim_middle>","-{
		return this.totalTime;
	}-*/","-{
		return this.totalTime;
	}-*/"
"<fim_prefix> represents.
 *     
 *  DirectionsFeatureSet has no constructor. For more information, see Getting driving directions.
 * 
 * @author Justin Merz
 */
public class DirectionsFeatureSet extends FeatureSet {
	
	protected DirectionsFeatureSet() {}

	/**
	 * The extent of the route.
	 * 
	 * @return Extent
	 */
	public final native Extent getExtent() /*-{
		return this.extent;
	}-*/;

	/**<fim_suffix>
	public final native Polyline getMergedGeometry() /*-{
		return this.mergedGeometry;
	}-*/;
	
	/**
	 * The ID of the route returned from the server.
	 * 
	 * @return String
	 */
	public final native String getRouteId() /*-{
		return this.routeId;
	}-*/;

	/**
	 * Name specified in RouteParameters.stops.
	 * 
	 * @return String
	 */
	public final native String getRouteName() /*-{
		ret<fim_middle>","
	 * A single polyline representing the route.
	 * 
	 * @return Polyline
	 */","
	 * The geometry of the route.
	 * 
	 * @return Polyline
	 */"
"<fim_prefix>atureSet extends FeatureSet {
	
	protected DirectionsFeatureSet() {}

	/**
	 * The extent of the route.
	 * 
	 * @return Extent
	 */
	public final native Extent getExtent() /*-{
		return this.extent;
	}-*/;

	/**
	 * A single polyline representing the route.
	 * 
	 * @return Polyline
	 */
	public final native Polyline getMergedGeometry() /*-{
		return this.mergedGeometry;
	}-*/;
	
	/**<fim_suffix>
	public final native String getRouteId() /*-{
		return this.routeId;
	}-*/;

	/**
	 * Name specified in RouteParameters.stops.
	 * 
	 * @return String
	 */
	public final native String getRouteName() /*-{
		return this.routeName;
	}-*/;
	
	/**
	 * Actual drive time calculated for the route.
	 * 
	 * @return double
	 */
	public final native double getTotalDriveTime() /*-{
		return this.<fim_middle>","
	 * The ID of the route returned from the server.
	 * 
	 * @return String
	 */","
	 * The route id.
	 * 
	 * @return String
	 */"
"<fim_prefix> getRouteId() /*-{
		return this.routeId;
	}-*/;

	/**
	 * Name specified in RouteParameters.stops.
	 * 
	 * @return String
	 */
	public final native String getRouteName() /*-{
		return this.routeName;
	}-*/;
	
	/**
	 * Actual drive time calculated for the route.
	 * 
	 * @return double
	 */
	public final native double getTotalDriveTime() /*-{
		return this.totalDriveTime;
	}-*/;

	/**<fim_suffix>
	public final native double getTotalLength() /*-{
		return this.totalLength;
	}-*/;
	
	/**
	 * The total time calculated for the route as specified in RouteParameters.directionsTimeAttribute.
	 * 
	 * @return double
	 */
	public final native double getTotalTime() /*-{
		return this.totalTime;
	}-*/;
	
}
<fim_middle>","
	 * The length of the route as specified in RouteParameters.directionsLengthUnits.
	 * 
	 * @return double
	 */","
	 * The total length calculated for the route as specified in RouteParameters.directionsLengthAttribute.
	 * 
	 * @return double
"
"<fim_prefix>ine
	 */
	public final native Polyline getMergedGeometry() /*-{
		return this.mergedGeometry;
	}-*/;
	
	/**
	 * The ID of the route returned from the server.
	 * 
	 * @return String
	 */
	public final native String getRouteId() /*-{
		return this.routeId;
	}-*/;

	/**
	 * Name specified in RouteParameters.stops.
	 * 
	 * @return String
	 */
	public final native String getRouteName() /*<fim_suffix>;
	
	/**
	 * Actual drive time calculated for the route.
	 * 
	 * @return double
	 */
	public final native double getTotalDriveTime() /*-{
		return this.totalDriveTime;
	}-*/;

	/**
	 * The length of the route as specified in RouteParameters.directionsLengthUnits.
	 * 
	 * @return double
	 */
	public final native double getTotalLength() /*-{
		return this.totalLength;
	}-*/;
	
	/**
	 *<fim_middle>","-{
		return this.routeName;
	}-*/","-{
		return this.routeName;
	}-*/;"
"<fim_prefix>eturn String
	 */
	public final native String getRouteId() /*-{
		return this.routeId;
	}-*/;

	/**
	 * Name specified in RouteParameters.stops.
	 * 
	 * @return String
	 */
	public final native String getRouteName() /*-{
		return this.routeName;
	}-*/;
	
	/**
	 * Actual drive time calculated for the route.
	 * 
	 * @return double
	 */
	public final native double getTotalDriveTime() /*<fim_suffix>;

	/**
	 * The length of the route as specified in RouteParameters.directionsLengthUnits.
	 * 
	 * @return double
	 */
	public final native double getTotalLength() /*-{
		return this.totalLength;
	}-*/;
	
	/**
	 * The total time calculated for the route as specified in RouteParameters.directionsTimeAttribute.
	 * 
	 * @return double
	 */
	public final native double getTotalTime() /*-{<fim_middle>","-{
		return this.totalDriveTime;
	}-*/","-{
		return this.totalDriveTime;
	}-*/;"
"<fim_prefix>package edu.ucdavis.cstars.client.tasks;

import edu.ucdavis.cstars.client.geometry.Extent;
import edu.ucdavis.cstars.client.geometry.Polyline;

/**<fim_suffix>
public class DirectionsFeatureSet extends FeatureSet {
	
	protected DirectionsFeatureSet() {}

	/**
	 * The extent of the route.
	 * 
	 * @return Extent
	 */
	public final native Extent getExtent() /*-{
		return this.extent;
	}-*/;

	/**
	 * A single polyline representing the route.
	 * 
	 * @return Polyline
	 */
	public final native Polyline getMergedGeometry() /*-{
		return this.mer<fim_middle>","
 * A FeatureSet that has properties specific to routing. The FeatureSet.features property contains the turn by turn directions text and geometry
 * of the route. The attributes for each feature provide information associated with the corresponding route segment. The following attributes
 * are returned: 
 *     text - The direction text.
 *     length - The length of the route segment.
 *     time - The time to travel along the route segment.
 *     ETA - The estimated time of arrival at the route segment in the local time.
 *     maneuverType - The type of maneuver that the direction represents.
 *     
 *  DirectionsFeatureSet has no constructor. For more information, see Getting driving directions.
 * 
 * @author Justin Merz
 */","
 * A set of features representing a route.
 * 
 * @author cszhang
 *
 */"
"<fim_prefix>}-*/;
	
	/**
	 * Actual drive time calculated for the route.
	 * 
	 * @return double
	 */
	public final native double getTotalDriveTime() /*-{
		return this.totalDriveTime;
	}-*/;

	/**
	 * The length of the route as specified in RouteParameters.directionsLengthUnits.
	 * 
	 * @return double
	 */
	public final native double getTotalLength() /*-{
		return this.totalLength;
	}-*/;
	
	/**<fim_suffix>
	public final native double getTotalTime() /*-{
		return this.totalTime;
	}-*/;
	
}
<fim_middle>","
	 * The total time calculated for the route as specified in RouteParameters.directionsTimeAttribute.
	 * 
	 * @return double
	 */","
	 * The total time of the route as specified in RouteParameters.directionsTimeUnits.
	 * 
	 * @return double"
"<fim_prefix>alue for the element <code>license-required</code> 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> licenseRequired(Boolean licenseRequired);

   /**
    * Returns the <code>license-required</code> element
    * @return the node defined for the element <code>license-required</code> 
    */
   public Boolean isLicenseRequired();

   /**<fim_suffix>
   public LicenseType<T> removeLicenseRequired();

 
   // --------------------------------------------------------------------------------------------------------||
   // ClassName: LicenseType ElementName: xsd:ID ElementType : id
   // MaxOccurs: -  isGeneric: true   isAttribute: true isEnum: false isDataType: true
   // --------------------------------------------------------------<fim_middle>","
    * Removes the <code>license-required</code> element 
    * @return the current instance of <code>LicenseType<T></code> 
    */","
    * Removes the <code>license-required</code> element
    * @return the current instance of <code>LicenseType<T></code> 
    */"
"<fim_prefix>package org.jboss.shrinkwrap.descriptor.api.connector15; 

import java.util.List;

import org.jboss.shrinkwrap.descriptor.api.Child;
/**<fim_suffix>
public interface LicenseType<T> extends Child<T>
{
 
   // --------------------------------------------------------------------------------------------------------||
   // ClassName: LicenseType ElementName: xsd:string ElementType : description
   // MaxOccurs: -unbounded  isGeneric: true   isAttribute: false isEnum: false isDataType: true
   // ---------------------------------------<fim_middle>","
 * This interface defines the contract for the <code> licenseType </code> xsd type 
 * @author <a href=""mailto:ralf.battenfeld@bluewin.ch"">Ralf Battenfeld</a>
 * @author <a href=""mailto:alr@jboss.org"">Andrew Lee Rubinger</a>
 */","
 * The LicenseType element is used to define the license type of the connector.
 * 
 * @author <a href=""mailto:<EMAIL>""><NAME></a>
 * @version $Revision: $
 */"
"<fim_prefix>---------------------------------------------||

   /**
    * Creates for all String objects representing <code>description</code> elements, 
    * a new <code>description</code> element 
    * @param values list of <code>description</code> objects 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> description(String ... values);

   /**<fim_suffix>
   public List<String> getAllDescription();

   /**
    * Removes the <code>description</code> element 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> removeAllDescription();

 
   // --------------------------------------------------------------------------------------------------------||
   // ClassName: LicenseType ElementName: xs<fim_middle>","
    * Returns all <code>description</code> elements
    * @return list of <code>description</code> 
    */","
    * Creates for all String objects representing <code>description</code> elements, 
    * a new <code>description</code> element 
"
"<fim_prefix>-----------------------------------------------------------------------------------------||
   // ClassName: LicenseType ElementName: xsd:string ElementType : description
   // MaxOccurs: -unbounded  isGeneric: true   isAttribute: false isEnum: false isDataType: true
   // --------------------------------------------------------------------------------------------------------||

   /**<fim_suffix>
   public LicenseType<T> description(String ... values);

   /**
    * Returns all <code>description</code> elements
    * @return list of <code>description</code> 
    */
   public List<String> getAllDescription();

   /**
    * Removes the <code>description</code> element 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> removeAllDes<fim_middle>","
    * Creates for all String objects representing <code>description</code> elements, 
    * a new <code>description</code> element 
    * @param values list of <code>description</code> objects 
    * @return the current instance of <code>LicenseType<T></code> 
    */","
    * Adds a <code>description</code> element
    * @param value the value of the <code>description</code> element
    * @return the current instance of <code>LicenseType<T></code> 
    */"
"<fim_prefix>--------------------------------------------------------------------------------------------||
   // ClassName: LicenseType ElementName: xsd:boolean ElementType : license-required
   // MaxOccurs: -  isGeneric: true   isAttribute: false isEnum: false isDataType: true
   // --------------------------------------------------------------------------------------------------------||

   /**<fim_suffix>
   public LicenseType<T> licenseRequired(Boolean licenseRequired);

   /**
    * Returns the <code>license-required</code> element
    * @return the node defined for the element <code>license-required</code> 
    */
   public Boolean isLicenseRequired();

   /**
    * Removes the <code>license-required</code> element 
    * @return the current instance of <code>LicenseType<T></code> 
<fim_middle>","
    * Sets the <code>license-required</code> element
    * @param licenseRequired the value for the element <code>license-required</code> 
    * @return the current instance of <code>LicenseType<T></code> 
    */","
    * Sets the <code>license-required</code> element
    * @param licenseRequired the value to set for the element <code>license-required</code> 
    * @return the current instance of <code>LicenseType<T></code> 
  "
"<fim_prefix>------------------------------------------------------------------------------------------||

   /**
    * Sets the <code>license-required</code> element
    * @param licenseRequired the value for the element <code>license-required</code> 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> licenseRequired(Boolean licenseRequired);

   /**<fim_suffix>
   public Boolean isLicenseRequired();

   /**
    * Removes the <code>license-required</code> element 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> removeLicenseRequired();

 
   // --------------------------------------------------------------------------------------------------------||
   // ClassName: LicenseType ElementName: x<fim_middle>","
    * Returns the <code>license-required</code> element
    * @return the node defined for the element <code>license-required</code> 
    */","
    * Gets the <code>license-required</code> element
    * @return the value for the element <code>license-required</code> 
    */"
"<fim_prefix>ribute: true isEnum: false isDataType: true
   // --------------------------------------------------------------------------------------------------------||

   /**
    * Sets the <code>id</code> attribute
    * @param id the value for the attribute <code>id</code> 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> id(String id);

   /**<fim_suffix>
   public String getId();

   /**
    * Removes the <code>id</code> attribute 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> removeId();
}
<fim_middle>","
    * Returns the <code>id</code> attribute
    * @return the value defined for the attribute <code>id</code> 
    */","
    * Gets the <code>id</code> attribute
    * @return the value for the attribute <code>id</code> 
    */"
"<fim_prefix>--||

   /**
    * Sets the <code>id</code> attribute
    * @param id the value for the attribute <code>id</code> 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> id(String id);

   /**
    * Returns the <code>id</code> attribute
    * @return the value defined for the attribute <code>id</code> 
    */
   public String getId();

   /**<fim_suffix>
   public LicenseType<T> removeId();
}
<fim_middle>","
    * Removes the <code>id</code> attribute 
    * @return the current instance of <code>LicenseType<T></code> 
    */","
    * Sets the <code>name</code> attribute
    * @param name the value for the attribute <code>name</code> 
    * @"
"<fim_prefix>>description</code> element 
    * @param values list of <code>description</code> objects 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> description(String ... values);

   /**
    * Returns all <code>description</code> elements
    * @return list of <code>description</code> 
    */
   public List<String> getAllDescription();

   /**<fim_suffix>
   public LicenseType<T> removeAllDescription();

 
   // --------------------------------------------------------------------------------------------------------||
   // ClassName: LicenseType ElementName: xsd:boolean ElementType : license-required
   // MaxOccurs: -  isGeneric: true   isAttribute: false isEnum: false isDataType: true
   // -------------------------------------------<fim_middle>","
    * Removes the <code>description</code> element 
    * @return the current instance of <code>LicenseType<T></code> 
    */","
    * Removes all <code>description</code> elements
    * @return the current instance of <code>LicenseType<T></code> 
    */"
"<fim_prefix> 
   // --------------------------------------------------------------------------------------------------------||
   // ClassName: LicenseType ElementName: xsd:ID ElementType : id
   // MaxOccurs: -  isGeneric: true   isAttribute: true isEnum: false isDataType: true
   // --------------------------------------------------------------------------------------------------------||

   /**<fim_suffix>
   public LicenseType<T> id(String id);

   /**
    * Returns the <code>id</code> attribute
    * @return the value defined for the attribute <code>id</code> 
    */
   public String getId();

   /**
    * Removes the <code>id</code> attribute 
    * @return the current instance of <code>LicenseType<T></code> 
    */
   public LicenseType<T> removeId();
}
<fim_middle>","
    * Sets the <code>id</code> attribute
    * @param id the value for the attribute <code>id</code> 
    * @return the current instance of <code>LicenseType<T></code> 
    */","
    * Sets the <code>id</code> attribute
    * @param id the value to set for the attribute <code>id</code> 
    * @return the current instance of <code>LicenseType<T></code> 
  "
"<fim_prefix>/*<fim_suffix>
package to.etc.webapp.query;

import org.eclipse.jdt.annotation.NonNull;

/**
 * Represents the selection of some operation on a property, or of the property value itself.
 *
 * @author <a href=""mailto:jal@etc.to"">Frits Jalvingh</a>
 * Created on Jul 14, 2009
 */
final public class QPropertySelection extends QSelectionItem {
	private String		m_property;

	/**
	 * Create a selection us<fim_middle>","
 * DomUI Java User Interface library
 * Copyright (c) 2010 by Frits Jalvingh, Itris B.V.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * See the ""sponsors"" file for a list of supporters.
 *
 * The latest version of DomUI and related code, support and documentation
 * can be found at http://www.domui.org/
 * The contact for the project is Frits Jalvingh <jal@etc.to>.
 */","*
 * Represents the selection of some operation on a property, or of the property value itself.
 *
 * @author <a href=""mailto:jal@etc.to"">Frits Jalvingh</a>
 * Created on Jul 14, 2009
 */"
"<fim_prefix>, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * See the ""sponsors"" file for a list of supporters.
 *
 * The latest version of DomUI and related code, support and documentation
 * can be found at http://www.domui.org/
 * The contact for the project is Frits Jalvingh <jal@etc.to>.
 */
package to.etc.webapp.query;

import org.eclipse.jdt.annotation.NonNull;

/**<fim_suffix>
final public class QPropertySelection extends QSelectionItem {
	private String		m_property;

	/**
	 * Create a selection using the specified function applied to the specified property.
	 * @param function
	 * @param property
	 */
	protected QPropertySelection(QSelectionFunction function, String property) {
		super(function);
		m_property = property;
	}

	public String getProperty() {
<fim_middle>","
 * Represents the selection of some operation on a property, or of the property value itself.
 *
 * @author <a href=""mailto:jal@etc.to"">Frits Jalvingh</a>
 * Created on Jul 14, 2009
 */","
 * A selection that selects a property of an object.
 *
 * @author Frits Jalvingh <jal@etc.to>
 * @since 1.0
 */"
"<fim_prefix>Jalvingh <jal@etc.to>.
 */
package to.etc.webapp.query;

import org.eclipse.jdt.annotation.NonNull;

/**
 * Represents the selection of some operation on a property, or of the property value itself.
 *
 * @author <a href=""mailto:jal@etc.to"">Frits Jalvingh</a>
 * Created on Jul 14, 2009
 */
final public class QPropertySelection extends QSelectionItem {
	private String		m_property;

	/**<fim_suffix>
	protected QPropertySelection(QSelectionFunction function, String property) {
		super(function);
		m_property = property;
	}

	public String getProperty() {
		return m_property;
	}
	@Override
	public void visit(@NonNull QNodeVisitor v) throws Exception {
		v.visitPropertySelection(this);
	}
}
<fim_middle>","
	 * Create a selection using the specified function applied to the specified property.
	 * @param function
	 * @param property
	 */","
	 * Creates a new instance.
	 *
	 * @param function
	 *           "
"<fim_prefix>/*<fim_suffix>
package com.bigdata.btree.proc;

/**
 * Interface for procedures that operation on a single index or index partition
 */
public interface ISimpleIndexProcedure<T> extends IIndexProcedure<T> {
    
}
<fim_middle>","

 Copyright (C) SYSTAP, LLC DBA Blazegraph 2006-2016.  All rights reserved.

 Contact:
 SYSTAP, LLC DBA Blazegraph
 2501 Calvert ST NW #106
 Washington, DC 20008
 licenses@blazegraph.com

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; version 2 of the License.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 */","
 * Copyright (C) 2015 <NAME> (<EMAIL>)
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>hout even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 */
package com.bigdata.btree.proc;

/**<fim_suffix>
public interface ISimpleIndexProcedure<T> extends IIndexProcedure<T> {
    
}
<fim_middle>","
 * Interface for procedures that operation on a single index or index partition
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>ement = new Eelement(OP.OP_CHS);
            } else {
                try {
                    double val =  Double.parseDouble(tok);
                    element = new Eelement(val);
                } catch(java.lang.NumberFormatException ex) {
                    element = new Eelement(tok);
                }
            }
            expression[k] = element;
        }
    }

    /**<fim_suffix>
    public double evaluate(GetVariable variables) {
        Stack<Double> stack = new Stack<Double>();

        for( Eelement elem : expression ) {
            switch( elem.op ) {
                case OP_ADD: {
                    final Double y = stack.pop();
                    final Double x = stack.pop();
                    stack.push(x+y);
                    break;
            <fim_middle>","
     *
     * @param variables
     * @return evaluate expression given context (i.e. variables)
     */","
     * Evaluates the expression.
     * @param variables
     * @return
     */"
"<fim_prefix>51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 *
 */

package dr.inference.model;

import java.util.Stack;

/**
 * Simple RPN expression evaluator.
 *
 * Limitations:
 *   - variables are statistics of 1 dimension.
 *   - Four basic operations (easy to extend, though)
 *
 * @author Joseph Heled
 *         Date: 10/05/2008
 */
public class RPNexpressionCalculator {
    /**<fim_suffix>
    public interface GetVariable {
        /**
         *
         * @param name
         * @return  variable value
         */
        double get(String name);
    }

   private enum OP { OP_ADD, OP_SUB, OP_MULT, OP_DIV, OP_LOG, OP_EXP, OP_CHS, OP_CONST, OP_REF }

    private class Eelement {
        OP op;
        String name;
        private double value;

        Eelement(OP op) {<fim_middle>","
     * Interfave for variable access by name
     */","
     *
     * @param expression
    "
"<fim_prefix>LITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with BEAST; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 *
 */

package dr.inference.model;

import java.util.Stack;

/**<fim_suffix>
public class RPNexpressionCalculator {
    /**
     * Interfave for variable access by name
     */
    public interface GetVariable {
        /**
         *
         * @param name
         * @return  variable value
         */
        double get(String name);
    }

   private enum OP { OP_ADD, OP_SUB, OP_MULT, OP_DIV, OP_LOG, OP_EXP, OP_CHS, OP_CONST, OP_REF }

    private class Eel<fim_middle>","
 * Simple RPN expression evaluator.
 *
 * Limitations:
 *   - variables are statistics of 1 dimension.
 *   - Four basic operations (easy to extend, though)
 *
 * @author Joseph Heled
 *         Date: 10/05/2008
 */","
 * @author <NAME>
 * @version $Id: RPNexpressionCalculator.java,v 1.1 2005/03/13 20:50:56 rambaut Exp $
 */"
"<fim_prefix>/*<fim_suffix>

package dr.inference.model;

import java.util.Stack;

/**
 * Simple RPN expression evaluator.
 *
 * Limitations:
 *   - variables are statistics of 1 dimension.
 *   - Four basic operations (easy to extend, though)
 *
 * @author Joseph Heled
 *         Date: 10/05/2008
 */
public class RPNexpressionCalculator {
    /**
     * Interfave for variable access by name
     */
    public i<fim_middle>","
 * RPNexpressionCalculator.java
 *
 * Copyright Â© 2002-2024 the BEAST Development Team
 * http://beast.community/about
 *
 * This file is part of BEAST.
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership and licensing.
 *
 * BEAST is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 *  BEAST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with BEAST; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 *
 */","*
 * Simple RPN expression evaluator.
 *
 * Limitations:
 *   - variables are statistics of 1 dimension.
 *   - Four basic operations (easy to extend, though)
 *
 * @author Joseph Heled
 *         Date: 10/05/2008
 */"
"<fim_prefix>ort java.util.Stack;

/**
 * Simple RPN expression evaluator.
 *
 * Limitations:
 *   - variables are statistics of 1 dimension.
 *   - Four basic operations (easy to extend, though)
 *
 * @author Joseph Heled
 *         Date: 10/05/2008
 */
public class RPNexpressionCalculator {
    /**
     * Interfave for variable access by name
     */
    public interface GetVariable {
        /**<fim_suffix>
        double get(String name);
    }

   private enum OP { OP_ADD, OP_SUB, OP_MULT, OP_DIV, OP_LOG, OP_EXP, OP_CHS, OP_CONST, OP_REF }

    private class Eelement {
        OP op;
        String name;
        private double value;

        Eelement(OP op) {
            this.op = op;
            name = null;
        }

         Eelement(String name) {
            this.op = OP.OP_REF;<fim_middle>","
         *
         * @param name
         * @return  variable value
         */","
         * @param name
         * @return
         */"
"<fim_prefix>push(Math.exp(x));
                    break;
                }
                case OP_CONST: {
                    stack.push(elem.value);
                    break;
                }
                case OP_REF: {
                    stack.push(variables.get(elem.name) );
                    break;
                }
            }
        }

        return stack.pop();
    }

    /**<fim_suffix>
    public String validate() {
        int stackSize = 0;

        for(Eelement elem : expression) {
            switch( elem.op ) {
                case OP_ADD:
                case OP_SUB:
                case OP_MULT:
                case OP_DIV: {
                    if( stackSize < 2 ) {
                        return ""Binary operator underflow"";
                    }
           <fim_middle>","
     * @return null if all ok, error message otherwise 
     **/","
     * Evaluates the expression.
     * @return the result of"
"<fim_prefix>/*<fim_suffix>

package com.mucommander.ui.action.impl;

import com.mucommander.ui.action.*;
import com.mucommander.ui.main.MainFrame;

import javax.swing.KeyStroke;
import java.util.Map;

/**
 * Splits the folder panels vertically (top/bottom) within the MainFrame.
 * This is the default split orientation.
 *
 * @author Maxence Bernard
 */
public class SplitVerticallyAction extends <fim_middle>","
 * This file is part of muCommander, http://www.mucommander.com
 * Copyright (C) 2002-2012 Maxence Bernard
 *
 * muCommander is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * muCommander is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Copyright (c) 2017, MuCommander, Maxence Bernard. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
"
"<fim_prefix> * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.mucommander.ui.action.impl;

import com.mucommander.ui.action.*;
import com.mucommander.ui.main.MainFrame;

import javax.swing.KeyStroke;
import java.util.Map;

/**<fim_suffix>
public class SplitVerticallyAction extends TcAction {

    private SplitVerticallyAction(MainFrame mainFrame, Map<String, Object> properties) {
        super(mainFrame, properties);
    }

    @Override
    public void performAction() {
        mainFrame.setSplitPaneOrientation(true);
    }

	@Override
	public ActionDescriptor getDescriptor() {
		return new Descriptor();<fim_middle>","
 * Splits the folder panels vertically (top/bottom) within the MainFrame.
 * This is the default split orientation.
 *
 * @author Maxence Bernard
 */","
 * @author <NAME> (muhammad.muaaz)
 */"
"<fim_prefix>/*<fim_suffix>

package com.touhoupixel.touhoupixeldungeonreloaded.services.updates;

//TODO with install and review functionality, this service is less and less just about updates
// perhaps rename to PlatformService, StoreService, DistributionService, etc?
public abstract class UpdateService {

	public static abstract class UpdateResultCallback {
		public abstract void onUpdateAvailable( Available<fim_middle>","
 * Pixel Dungeon
 * Copyright (C) 2012-2015 Oleg Dolya
 *
 * Shattered Pixel Dungeon
 * Copyright (C) 2014-2022 Evan Debenham
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * Created by <NAME> on 11/12/2016.
 */"
"<fim_prefix>/*<fim_suffix>
package net.wurstclient.features.mods;

@Mod.Info(description = ""Allows you to see caves through walls."",
	name = ""CaveFinder"",
	tags = ""cave finder"",
	help = ""Mods/CaveFinder"")
@Mod.Bypasses
public final class CaveFinderMod extends Mod
{
	
}
<fim_middle>","
 * Copyright © 2014 - 2017 | Wurst-Imperium | All rights reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */","
 * Copyright (c) 2017, Adam <<EMAIL>>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
"
"<fim_prefix>/*<fim_suffix>

package de.static_interface.sinksql.query;

import de.static_interface.sinksql.AbstractTable;
import de.static_interface.sinksql.Row;

public abstract class SubQuery<T extends Row> extends Query<T> {

    public SubQuery(Query parent) {
        super(parent);
    }

    public MasterQuery<T> getMasterQuery() {
        return getParent().getMasterQuery();
    }

    @Override
    publ<fim_middle>","
 * Copyright (c) 2013 - 2016 Trojaner <trojaner25@gmail.com> and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package org.tanaguru.rules.rgaa32017;

import org.tanaguru.ruleimplementation.AbstractNotTestedRuleImplementation;

/**
 * Implementation of the rule 11.10.9 of the referential Rgaa 3-2017.
 *
 * For more details about the implementation, refer to <a href=""http://tanaguru-rules-rgaa3.readthedocs.org/en/latest/Rule-11-10-9"">the rule 11.10.9 design page.</a>
 * @see <a href=""http://refe<fim_middle>","
 * Tanaguru - Automated webpage assessment
 * Copyright (C) 2008-2017  Tanaguru.org
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact us by mail: tanaguru AT tanaguru DOT org
 */","*
 * Implementation of the rule 11.10.9 of the referential Rgaa 3-2017.
 *
 * For more details about the implementation, refer to <a href=""http://tanaguru-rules-rgaa3.readthedocs.org/en/latest/Rule-11-10-9"">the rule 11.10.9 design page.</a>
 * @see <a href=""http://referancetargets.org/download/referential-rgaa-3-2017-en.pdf"">Rgaa 3-2017</a>
 * @author <NAME>
 *
 */"
"<fim_prefix> *
 * For more details about the implementation, refer to <a href=""http://tanaguru-rules-rgaa3.readthedocs.org/en/latest/Rule-11-10-9"">the rule 11.10.9 design page.</a>
 * @see <a href=""http://references.modernisation.gouv.fr/referentiel-technique-0#test-11-10-9""> 11.10.9 rule specification</a>
 */

public class Rgaa32017Rule111009 extends AbstractNotTestedRuleImplementation {

    /**<fim_suffix>
    public Rgaa32017Rule111009 () {
        super();
    }

}<fim_middle>","
     * Default constructor
     */","
     * The constructor.
    "
"<fim_prefix>he
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact us by mail: tanaguru AT tanaguru DOT org
 */
package org.tanaguru.rules.rgaa32017;

import org.tanaguru.ruleimplementation.AbstractNotTestedRuleImplementation;

/**<fim_suffix>

public class Rgaa32017Rule111009 extends AbstractNotTestedRuleImplementation {

    /**
     * Default constructor
     */
    public Rgaa32017Rule111009 () {
        super();
    }

}<fim_middle>","
 * Implementation of the rule 11.10.9 of the referential Rgaa 3-2017.
 *
 * For more details about the implementation, refer to <a href=""http://tanaguru-rules-rgaa3.readthedocs.org/en/latest/Rule-11-10-9"">the rule 11.10.9 design page.</a>
 * @see <a href=""http://references.modernisation.gouv.fr/referentiel-technique-0#test-11-10-9""> 11.10.9 rule specification</a>
 */","
 * Rule 11.1009 - The page must not contain any form of tracking.
 *
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package org.openhab.binding.guntamatic.internal;

import java.util.Collection;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;
import org.openhab.core.thing.type.ChannelType;
import org.openhab.core.thing.type.ChannelTypeBuilder;
import org.ope<fim_middle>","
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix> org.openhab.core.thing.type.ChannelType;
import org.openhab.core.thing.type.ChannelTypeBuilder;
import org.openhab.core.thing.type.ChannelTypeProvider;
import org.openhab.core.thing.type.ChannelTypeUID;
import org.openhab.core.thing.type.StateChannelTypeBuilder;
import org.openhab.core.types.StateDescriptionFragmentBuilder;
import org.osgi.service.component.annotations.Component;

/**<fim_suffix>
@Component(service = { ChannelTypeProvider.class, GuntamaticChannelTypeProvider.class })
@NonNullByDefault
public class GuntamaticChannelTypeProvider implements ChannelTypeProvider {
    private final Map<String, ChannelType> channelTypes = new ConcurrentHashMap<>();

    @Override
    public Collection<ChannelType> getChannelTypes(@Nullable Locale locale) {
        return channelType<fim_middle>","
 * Provide channelTypes for Guntamatic Heating Systems
 *
 * @author Weger Michael - Initial contribution
 */","
 * Channel type provider for Guntamatic.
 */"
"<fim_prefix>/*<fim_suffix>
package org.sonar.java.checks;

import org.junit.jupiter.api.Test;
import org.sonar.java.checks.verifier.CheckVerifier;

import static org.sonar.java.checks.verifier.TestUtils.mainCodeSourcesPath;

class BigDecimalDoubleConstructorCheckTest {

  @Test
  void test() {
    CheckVerifier.newVerifier()
      .onFile(mainCodeSourcesPath(""checks/BigDecimalDoubleConstructorCheckSample.java"")<fim_middle>","
 * SonarQube Java
 * Copyright (C) 2012-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */","*
 * Copyright (c) SonarSource SA and Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */"
"<fim_prefix>/*<fim_suffix>
package org.openjdk.skara.jcheck;

public interface Check {
    String name();
    String description();
}
<fim_middle>","
 * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package org.eurocarbdb.action.hplc;

import org.eurocarbdb.action.*;
import org.eurocarbdb.dataaccess.*;
import org.eurocarbdb.dataaccess.hplc.Column;
import org.eurocarbdb.dataaccess.hibernate.*;

import org.hibernate.*;
import org.hibernate.criterion.*;
import org.hibernate.cfg.*;
import java.util.*;

import com.opensymphony.xwork.Action;
import com.opensymphony.xwork.Preparable;

i<fim_middle>","
*   EuroCarbDB, a framework for carbohydrate bioinformatics
*
*   Copyright (c) 2006-2009, Eurocarb project, or third-party contributors as
*   indicated by the @author tags or express copyright attribution
*   statements applied by the authors.  
*
*   This copyrighted material is made available to anyone wishing to use, modify,
*   copy, or redistribute it subject to the terms and conditions of the GNU
*   Lesser General Public License, as published by the Free Software Foundation.
*   A copy of this license accompanies this distribution in the file LICENSE.txt.
*
*   This program is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
*   or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
*   for more details.
*
*   Last commit: $Rev: 1549 $ by $Author: glycoslave $ on $Date:: 2009-07-19 #$  
*/","*
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix>/*<fim_suffix>

package proguard.strip;

import proguard.AppView;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import proguard.Configuration;
import proguard.classfile.Clazz;
import proguard.classfile.attribute.Attribute;
import proguard.classfile.attribute.annotation.Annotation;
import proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute;<fim_middle>","
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2020 Guardsquare NV
 */","*
 * @author <NAME>
 */"
"<fim_prefix>teEditor;
import proguard.classfile.kotlin.KotlinConstants;
import proguard.classfile.kotlin.visitor.KotlinMetadataRemover;
import proguard.classfile.kotlin.visitor.filter.KotlinClassFilter;
import proguard.classfile.visitor.*;
import proguard.pass.Pass;
import proguard.util.ProcessingFlagSetter;
import proguard.util.ProcessingFlags;

import static proguard.util.ProcessingFlags.*;

/**<fim_suffix>
public class KotlinAnnotationStripper implements Pass
{
    private static final Logger logger = LogManager.getLogger(KotlinAnnotationStripper.class);

    private final Configuration configuration;

    public KotlinAnnotationStripper(Configuration configuration)
    {
        this.configuration = configuration;
    }


    @Override
    public void execute(AppView appView)
    {
   <fim_middle>","
 * This pass aggressively strips the kotlin.Metadata annotation from classes. We only keep
 * the metadata for classes/members if the class isn't processed in any way.
 *
 * @author James Hamilton
 */","
 * This pass removes all annotations from the Kotlin classes.
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package etomica.simulation;

import etomica.box.Box;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class SimulationEventManager {

    private final List<SimulationListener> listeners = new ArrayList<>();
    private final Simulation simulation;

    protected SimulationEventManager(Simulation sim) {
        simulation = sim;
    }

    public <fim_middle>"," This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */","*
     * Adds a listener to the list of listeners.
     *
     * @param listener the listener to add
     */"
"<fim_prefix>le.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.mechinn.android.ouralliance.data.Team;

import java.lang.reflect.Type;
import java.util.Date;

/**<fim_suffix>
public class TeamAdapter implements JsonSerializer<Team>, JsonDeserializer<Team> {
    @Override
    public Team deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        Team team = new Team();
        JsonObject object = json.getAsJsonObject();
        team.setTeamNumber(object.get(Team.TEAM_NUMBER).getAsInt());
        team.<fim_middle>","
 * Created by mechinn on 3/10/15.
 */","
 * Created by mechinn on 2016/1/18.
 */"
"<fim_prefix>/**<fim_suffix>
package eu.itesla_project.modules.rules.expr;

import eu.itesla_project.modules.histo.HistoDbAttributeId;

import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 *
 * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>
 */
public class ExpressionEvaluator implements ExpressionVisitor<Object, Void> {

    private final Map<HistoDbAttributeId, Obj<fim_middle>","
 * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */","
 *
 * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>
 */"
"<fim_prefix> * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package eu.itesla_project.modules.rules.expr;

import eu.itesla_project.modules.histo.HistoDbAttributeId;

import java.util.List;
import java.util.Map;
import java.util.Objects;

/**<fim_suffix>
public class ExpressionEvaluator implements ExpressionVisitor<Object, Void> {

    private final Map<HistoDbAttributeId, Object> attributeValues;

    private final List<HistoDbAttributeId> missingAttributes;

    public ExpressionEvaluator(Map<HistoDbAttributeId, Object> attributeValues, List<HistoDbAttributeId> missingAttributes) {
        this.attributeValues = attributeValues;
   <fim_middle>","
 *
 * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.cms.manage.service;

import com.baomidou.mybatisplus.extension.service.IService;
import com.cms.common.core.domain.SysConfig;
import com.cms.common.tool.result.ResultUtil;
import com.cms.manage.entity.SysConfigEntity;

import java.util.List;

/**<fim_suffix>
public interface SysConfigService extends IService<SysConfigEntity> {

    ResultUtil<?> listConfigs();

    ResultUtil<?> saveConfigs(List<SysConfig> sysConfigs);

    List<SysConfig> selectConfigList();
}
<fim_middle>","
 * @author DT辰白
 * @date 2022/4/17 13:46
 */","
 * @description:
 * @author: zengjintao
 * @create: 2022-"
"<fim_prefix>mport de.unibi.citec.clf.bonsai.engine.model.AbstractSkill;
import de.unibi.citec.clf.bonsai.engine.model.ExitStatus;
import de.unibi.citec.clf.bonsai.engine.model.ExitToken;
import de.unibi.citec.clf.bonsai.engine.model.config.ISkillConfigurator;
import de.unibi.citec.clf.bonsai.engine.model.config.SkillConfigurationException;
import de.unibi.citec.clf.btl.data.person.PersonData;

/**<fim_suffix>
public class ComparePersonName extends AbstractSkill {

    private ExitToken tokenSuccessEqual;
    private ExitToken tokenSuccessNotEqual;

    private MemorySlotReader<PersonData> personDataSlot;
    private MemorySlotReader<String>     nameSlot;

    private PersonData personData;
    private String name;

    @Override
    public void configure(ISkillConfigurator configurator) th<fim_middle>","
 * This skill compares the name field of a person data with a name in a slot and return success.equal if they are same same and success.notEqual if they dont.
 * error if something goes wrong.
 *
 * <pre>
 *
 * Options:
 *
 * Slots:
 *  PersonDataSlot: [PersonData] [Read]
 *      -> Memory slot persondata to read the name from
 *  StringSlot: [String] [Read]
 *      -> Memory slot name to compare
 *
 *
 * ExitTokens:
 *  success.equal:                  The names have been the same (comparision ignores lower and upper chars)
 *  success.notEqual:               The names have not been the same (comparision ignores lower and upper chars)
 *  fatal:                          Something went wrong, no persondata in slot or no string in name slot
 *
 * </pre>
 *
 * @author pvonneumanncosel
 */","
 *
 * @author mfriedrichs(at)techfak.uni-bielefeld.de
 */"
"<fim_prefix>/**<fim_suffix>
package org.verapdf.gf.model.impl.sa.structelems;

import org.verapdf.gf.model.impl.sa.GFSAStructElem;
import org.verapdf.model.salayer.SACaption;
import org.verapdf.pd.structure.PDStructElem;
import org.verapdf.tools.TaggedPDFConstants;

public class GFSACaption extends GFSAStructElem implements SACaption {

    public static final String CAPTION_STRUCTURE_ELEMENT_TYPE = ""SACaption"";<fim_middle>","
 * This file is part of veraPDF WCAG Validation, a module of the veraPDF project.
 * Copyright (c) 2015-2024, veraPDF Consortium <info@verapdf.org>
 * All rights reserved.
 *
 * veraPDF WCAG Validation is free software: you can redistribute it and/or modify
 * it under the terms of either:
 *
 * The GNU General public license GPLv3+.
 * You should have received a copy of the GNU General Public License
 * along with veraPDF WCAG Validation as the LICENSE.GPL file in the root of the source
 * tree.  If not, see http://www.gnu.org/licenses/ or
 * https://www.gnu.org/licenses/gpl-3.0.en.html.
 *
 * The Mozilla Public License MPLv2+.
 * You should have received a copy of the Mozilla Public License along with
 * veraPDF WCAG Validation as the LICENSE.MPL file in the root of the source tree.
 * If a copy of the MPL was not distributed with this file, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */","
 * Copyright (C) 2011-2012 The VErapdf Team <<EMAIL>>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>ot.tms;

import us.mn.state.dot.sonar.SonarObject;

/**
 * An action plan is a set of actions which can be deployed together.
 *
 * @author Douglas Lau
 */
public interface ActionPlan extends SonarObject {

	/** SONAR type name */
	String SONAR_TYPE = ""action_plan"";

	/** Set the description */
	void setDescription(String d);

	/** Get the description */
	String getDescription();

	/**<fim_suffix>
	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/** Get the active status */
	boolean getActive();

	/** Set the default phase */
	void setDefaultPhase(PlanPhase dp);

	/*<fim_middle>", Set the sync actions flag */, Set the sync actions flag */
"<fim_prefix>lic License for more details.
 */
package us.mn.state.dot.tms;

import us.mn.state.dot.sonar.SonarObject;

/**
 * An action plan is a set of actions which can be deployed together.
 *
 * @author Douglas Lau
 */
public interface ActionPlan extends SonarObject {

	/** SONAR type name */
	String SONAR_TYPE = ""action_plan"";

	/** Set the description */
	void setDescription(String d);

	/**<fim_suffix>
	String getDescription();

	/** Set the sync actions flag */
	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/** Get the active status */
	boolean getActive();

	/** Set t<fim_middle>", Get the description */, Get the description */
"<fim_prefix> of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package us.mn.state.dot.tms;

import us.mn.state.dot.sonar.SonarObject;

/**<fim_suffix>
public interface ActionPlan extends SonarObject {

	/** SONAR type name */
	String SONAR_TYPE = ""action_plan"";

	/** Set the description */
	void setDescription(String d);

	/** Get the description */
	String getDescription();

	/** Set the sync actions flag */
	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/** Set the sticky flag */
	<fim_middle>","
 * An action plan is a set of actions which can be deployed together.
 *
 * @author Douglas Lau
 */","
 * Action plan
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package us.mn.state.dot.tms;

import us.mn.state.dot.sonar.SonarObject;

/**
 * An action plan is a set of actions which can be deployed together.
 *
 * @author Douglas Lau
 */
public interface ActionPlan extends SonarObject {

	/**<fim_suffix>
	String SONAR_TYPE = ""action_plan"";

	/** Set the description */
	void setDescription(String d);

	/** Get the description */
	String getDescription();

	/** Set the sync actions flag */
	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky(<fim_middle>", SONAR type name */, The type of this object
"<fim_prefix>ends SonarObject {

	/** SONAR type name */
	String SONAR_TYPE = ""action_plan"";

	/** Set the description */
	void setDescription(String d);

	/** Get the description */
	String getDescription();

	/** Set the sync actions flag */
	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/**<fim_suffix>
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/** Get the active status */
	boolean getActive();

	/** Set the default phase */
	void setDefaultPhase(PlanPhase dp);

	/** Get the default phase */
	PlanPhase getDefaultPhase();

	/** Set the phase */
	void setPhase(PlanPhase p);

	/** Get the phase */
	PlanPhase getPhase();
}
<fim_middle>", Get the sticky flag */, Get the sticky flag */
"<fim_prefix> SONAR_TYPE = ""action_plan"";

	/** Set the description */
	void setDescription(String d);

	/** Get the description */
	String getDescription();

	/** Set the sync actions flag */
	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/**<fim_suffix>
	void setActive(boolean a);

	/** Get the active status */
	boolean getActive();

	/** Set the default phase */
	void setDefaultPhase(PlanPhase dp);

	/** Get the default phase */
	PlanPhase getDefaultPhase();

	/** Set the phase */
	void setPhase(PlanPhase p);

	/** Get the phase */
	PlanPhase getPhase();
}
<fim_middle>", Set the active status */, Set the active status */
"<fim_prefix>void setDescription(String d);

	/** Get the description */
	String getDescription();

	/** Set the sync actions flag */
	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/**<fim_suffix>
	boolean getActive();

	/** Set the default phase */
	void setDefaultPhase(PlanPhase dp);

	/** Get the default phase */
	PlanPhase getDefaultPhase();

	/** Set the phase */
	void setPhase(PlanPhase p);

	/** Get the phase */
	PlanPhase getPhase();
}
<fim_middle>", Get the active status */, Get the active status */
"<fim_prefix>	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/** Get the active status */
	boolean getActive();

	/** Set the default phase */
	void setDefaultPhase(PlanPhase dp);

	/**<fim_suffix>
	PlanPhase getDefaultPhase();

	/** Set the phase */
	void setPhase(PlanPhase p);

	/** Get the phase */
	PlanPhase getPhase();
}
<fim_middle>", Get the default phase */, Get the default phase */
"<fim_prefix>/*<fim_suffix>
package us.mn.state.dot.tms;

import us.mn.state.dot.sonar.SonarObject;

/**
 * An action plan is a set of actions which can be deployed together.
 *
 * @author Douglas Lau
 */
public interface ActionPlan extends SonarObject {

	/** SONAR type name */
	String SONAR_TYPE = ""action_plan"";

	/** Set the description */
	void setDescription(String d);

	/** Get the description */
	String g<fim_middle>","
 * IRIS -- Intelligent Roadway Information System
 * Copyright (C) 2009-2011  Minnesota Department of Transportation
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */","*
 * An action plan is a set of actions which can be deployed together.
 *
 * @author Douglas Lau
 */"
"<fim_prefix>ion */
	String getDescription();

	/** Set the sync actions flag */
	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/** Get the active status */
	boolean getActive();

	/**<fim_suffix>
	void setDefaultPhase(PlanPhase dp);

	/** Get the default phase */
	PlanPhase getDefaultPhase();

	/** Set the phase */
	void setPhase(PlanPhase p);

	/** Get the phase */
	PlanPhase getPhase();
}
<fim_middle>", Set the default phase */, Set the default phase */
"<fim_prefix>* @author Douglas Lau
 */
public interface ActionPlan extends SonarObject {

	/** SONAR type name */
	String SONAR_TYPE = ""action_plan"";

	/** Set the description */
	void setDescription(String d);

	/** Get the description */
	String getDescription();

	/** Set the sync actions flag */
	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/**<fim_suffix>
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/** Get the active status */
	boolean getActive();

	/** Set the default phase */
	void setDefaultPhase(PlanPhase dp);

	/** Get the default phase */
	PlanPhase getDefaultPhase();

	/** Set the phase */
	void setPhase(PlanPhase p);

	/** Get the p<fim_middle>", Set the sticky flag */, Set the sticky flag */
"<fim_prefix>FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package us.mn.state.dot.tms;

import us.mn.state.dot.sonar.SonarObject;

/**
 * An action plan is a set of actions which can be deployed together.
 *
 * @author Douglas Lau
 */
public interface ActionPlan extends SonarObject {

	/** SONAR type name */
	String SONAR_TYPE = ""action_plan"";

	/**<fim_suffix>
	void setDescription(String d);

	/** Get the description */
	String getDescription();

	/** Set the sync actions flag */
	void setSyncActions(boolean s);

	/** Get the sync actions flag */
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/<fim_middle>", Set the description */, Set the description */
"<fim_prefix>lag */
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/** Get the active status */
	boolean getActive();

	/** Set the default phase */
	void setDefaultPhase(PlanPhase dp);

	/** Get the default phase */
	PlanPhase getDefaultPhase();

	/**<fim_suffix>
	void setPhase(PlanPhase p);

	/** Get the phase */
	PlanPhase getPhase();
}
<fim_middle>", Set the phase */, Set the phase */
"<fim_prefix>ky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/** Get the active status */
	boolean getActive();

	/** Set the default phase */
	void setDefaultPhase(PlanPhase dp);

	/** Get the default phase */
	PlanPhase getDefaultPhase();

	/** Set the phase */
	void setPhase(PlanPhase p);

	/**<fim_suffix>
	PlanPhase getPhase();
}
<fim_middle>", Get the phase */, Get the phase */
"<fim_prefix> plan is a set of actions which can be deployed together.
 *
 * @author Douglas Lau
 */
public interface ActionPlan extends SonarObject {

	/** SONAR type name */
	String SONAR_TYPE = ""action_plan"";

	/** Set the description */
	void setDescription(String d);

	/** Get the description */
	String getDescription();

	/** Set the sync actions flag */
	void setSyncActions(boolean s);

	/**<fim_suffix>
	boolean getSyncActions();

	/** Set the sticky flag */
	void setSticky(boolean s);

	/** Get the sticky flag */
	boolean getSticky();

	/** Set the active status */
	void setActive(boolean a);

	/** Get the active status */
	boolean getActive();

	/** Set the default phase */
	void setDefaultPhase(PlanPhase dp);

	/** Get the default phase */
	PlanPhase getDefaultPhase();

	/** Set t<fim_middle>", Get the sync actions flag */, Get the sync actions flag */
"<fim_prefix>package com.bioxx.tfc2.api.interfaces;

import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;

import com.bioxx.tfc2.entity.EntityFallingBlockTFC;

public interface IGravityBlock 
{
	/**<fim_suffix>
	public int getSlideHeight();

	/**
	 * @return Chance that a block will slide [0.0 - 1.0]
	 */
	public float getSlideChance();

	public void onStartFalling(EntityFallingBlockTFC fallingEntity);

	public void onEndFalling(World worldIn, BlockPos pos);

	public boolean canFallInto(World worldIn, BlockPos pos);
}
<fim_middle>","
	 * @return Minimum cliffheight required for this block to slide down to lower elevation. -1 disables sliding
	 */","
	 * @return The height of the block when it is falling
	 */"
"<fim_prefix>package com.bioxx.tfc2.api.interfaces;

import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;

import com.bioxx.tfc2.entity.EntityFallingBlockTFC;

public interface IGravityBlock 
{
	/**
	 * @return Minimum cliffheight required for this block to slide down to lower elevation. -1 disables sliding
	 */
	public int getSlideHeight();

	/**<fim_suffix>
	public float getSlideChance();

	public void onStartFalling(EntityFallingBlockTFC fallingEntity);

	public void onEndFalling(World worldIn, BlockPos pos);

	public boolean canFallInto(World worldIn, BlockPos pos);
}
<fim_middle>","
	 * @return Chance that a block will slide [0.0 - 1.0]
	 */","
	 * @return Chance of falling down this block. 0 disables falling down.
	 */"
"<fim_prefix>/*<fim_suffix>

package ghm.follow.gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ghm.follow.gui.LineTextUI;
import javax.swing.JComponent;
import javax.swing.JTextField;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestLineTextUI {

  @BeforeClass 
  public static void ini<fim_middle>","
 * This file was automatically generated by EvoSuite
 */","*
 * LineTextUI Tester.
 *
 * @"
"<fim_prefix>/**<fim_suffix>
package net.geoprism.registry.io;

@com.runwaysdk.business.ClassSignature(hash = -451983623)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SridException.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class SridExceptionBase extends com.runwaysdk.business.Sm<fim_middle>","
 * Copyright (c) 2022 TerraFrame, Inc. All rights reserved.
 *
 * This file is part of Geoprism Registry(tm).
 *
 * Geoprism Registry(tm) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * Geoprism Registry(tm) is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Geoprism Registry(tm).  If not, see <http://www.gnu.org/licenses/>.
 */","
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SridException.java
 *
 * @author Autogenerated by RunwaySDK
 */"
"<fim_prefix> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Geoprism Registry(tm).  If not, see <http://www.gnu.org/licenses/>.
 */
package net.geoprism.registry.io;

@com.runwaysdk.business.ClassSignature(hash = -451983623)
/**<fim_suffix>
public abstract class SridExceptionBase extends com.runwaysdk.business.SmartException
{
  public final static String CLASS = ""net.geoprism.registry.io.SridException"";
  public static final java.lang.String OID = ""oid"";
  private static final long serialVersionUID = -451983623;
  
  public SridExceptionBase()
  {
    super();
  }
  
  public SridExceptionBase(java.lang.Stri<fim_middle>","
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to SridException.java
 *
 * @author Autogenerated by RunwaySDK
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package org.erikaredmark.monkeyshines;

import java.awt.event.KeyEvent;

import org.newdawn.slick.Input;

import com.google.common.collect.ImmutableMap;

/**<fim_suffix>
public class KeyBindingsSlick {
	public final int left;
	public final int right;
	public final int jump;
	
	private KeyBindingsSlick(int left, int right, int jump) {
		this.left = left;
		this.right = right;
		this.jump = jump;
	}
	
	/**
	 * Translates awt key codes to Slick ones when constructing this object. Note that some keys may not convert
	 * properly; check any n<fim_middle>","
 * Slick-based key bindings. in order to preserve user options, key bindings are still saved as 
 * AWT KeyEvent keycodes, but upon starting the game, that keybinding must be converted to this form.
 * <p/>
 * It is the responsibility of the UI to not allow AWT key codes that are not mappable to Slick ones.
 * <p/>
 * Instances of this class are immutable.
 */","
 * A collection of key bindings for the game.
 * 
 * @author <NAME>
 */"
"<fim_prefix>ibility of the UI to not allow AWT key codes that are not mappable to Slick ones.
 * <p/>
 * Instances of this class are immutable.
 */
public class KeyBindingsSlick {
	public final int left;
	public final int right;
	public final int jump;
	
	private KeyBindingsSlick(int left, int right, int jump) {
		this.left = left;
		this.right = right;
		this.jump = jump;
	}
	
	/**<fim_suffix>
	public static KeyBindingsSlick fromKeyBindingsAwt(KeyBindingsAwt awtKeys) {
		return new KeyBindingsSlick(
			awtToSlick.getOrDefault(awtKeys.left, Input.KEY_LEFT),
			awtToSlick.getOrDefault(awtKeys.right, Input.KEY_RIGHT),
			awtToSlick.getOrDefault(awtKeys.jump, Input.KEY_UP));
	}
	
	
	/**
	 * Checks if the given key code from Java awt can map to something from Slick.
	<fim_middle>","
	 * Translates awt key codes to Slick ones when constructing this object. Note that some keys may not convert
	 * properly; check any new key codes against keyMappingExistsFor first.
	 * 
	 * If a key code cannot be converted, it assumes the defaults (arrow keys)
	 * @param code
	 * @return
	 */","
	 * Creates a new instance of {@link KeyBindingsSlick} from the given key bindings from Java AWT.
	 * @param awtKeys The key bindings from Java AWT.
	 * @return A new instance of {@link KeyBindingsSlick}.
	 */"
"<fim_prefix> converted, it assumes the defaults (arrow keys)
	 * @param code
	 * @return
	 */
	public static KeyBindingsSlick fromKeyBindingsAwt(KeyBindingsAwt awtKeys) {
		return new KeyBindingsSlick(
			awtToSlick.getOrDefault(awtKeys.left, Input.KEY_LEFT),
			awtToSlick.getOrDefault(awtKeys.right, Input.KEY_RIGHT),
			awtToSlick.getOrDefault(awtKeys.jump, Input.KEY_UP));
	}
	
	
	/**<fim_suffix>
	public static boolean keyMappingExistsFor(int awtCode) {
		return awtToSlick.containsKey(awtCode);
	}
	
	// There are probably some missing keys here. Hopefully this covers most of them.
	private static ImmutableMap<Integer, Integer> awtToSlick = ImmutableMap.<Integer, Integer>builder().
		put(KeyEvent.VK_0, Input.KEY_0).
		put(KeyEvent.VK_1, Input.KEY_1).
		put(KeyEvent.VK_<fim_middle>","
	 * Checks if the given key code from Java awt can map to something from Slick.
	 * GUI should check this before allowing the user to commit the change.
	 */","
	 * Returns true if the key mapping exists for the given AWT code.
	 * @param awtCode
	 * @return
	 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.jpt.jpa.core.internal.resource.java.binary;

import org.eclipse.jdt.core.IAnnotation;
import org.eclipse.jpt.common.core.resource.java.JavaResourceAnnotatedElement;
import org.eclipse.jpt.jpa.core.resource.java.DiscriminatorColumnAnnotation;
import org.eclipse.jpt.jpa.core.resource.java.DiscriminatorType;

public abstract class BinaryBaseDiscriminatorColumnAnnotati<fim_middle>","*****************************************************************************
 * Copyright (c) 2011 Oracle. All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0, which accompanies this distribution
 * and is available at https://www.eclipse.org/legal/epl-2.0/.
 * 
 * Contributors:
 *     Oracle - initial API and implementation
 ******************************************************************************/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix> pro.zackpollard.telegrambot.api.event.chat;

import pro.zackpollard.telegrambot.api.chat.GroupChat;
import pro.zackpollard.telegrambot.api.chat.message.Message;
import pro.zackpollard.telegrambot.api.chat.message.content.PhotoContent;
import pro.zackpollard.telegrambot.api.chat.message.content.type.PhotoSize;
import pro.zackpollard.telegrambot.api.event.chat.message.MessageEvent;

/**<fim_suffix>
public class NewGroupChatPhotoEvent extends MessageEvent {

    public NewGroupChatPhotoEvent(Message message) {
        super(message);
    }

    /**
     * Gets the GroupChat that had its photo changed that triggered this Event
     *
     * @return The GroupChat that had its photo changed that triggered this Event
     */
    @Override
    public GroupChat getChat() {

        ret<fim_middle>","
 * @author Zack Pollard
 */","
 * Represents a new group chat photo event
"
"<fim_prefix>ent {

    public NewGroupChatPhotoEvent(Message message) {
        super(message);
    }

    /**
     * Gets the GroupChat that had its photo changed that triggered this Event
     *
     * @return The GroupChat that had its photo changed that triggered this Event
     */
    @Override
    public GroupChat getChat() {

        return (GroupChat) getMessage().getChat();
    }

    /**<fim_suffix>
    public PhotoSize[] getContent() {

        return ((PhotoContent) getMessage().getContent()).getContent();
    }
}
<fim_middle>","
     * Gets the PhotoSize array that contains the photo that was set that triggered this Event
     *
     * @return The PhotoSize array that contains the photo that was set that triggered this Event
     */","
     * Gets the new photo that was added to the GroupChat that had its photo changed that triggered this Event
     *
     * @return The new photo that was added to the GroupChat that had its photo changed that triggered"
"<fim_prefix>lard.telegrambot.api.chat.message.content.PhotoContent;
import pro.zackpollard.telegrambot.api.chat.message.content.type.PhotoSize;
import pro.zackpollard.telegrambot.api.event.chat.message.MessageEvent;

/**
 * @author Zack Pollard
 */
public class NewGroupChatPhotoEvent extends MessageEvent {

    public NewGroupChatPhotoEvent(Message message) {
        super(message);
    }

    /**<fim_suffix>
    @Override
    public GroupChat getChat() {

        return (GroupChat) getMessage().getChat();
    }

    /**
     * Gets the PhotoSize array that contains the photo that was set that triggered this Event
     *
     * @return The PhotoSize array that contains the photo that was set that triggered this Event
     */
    public PhotoSize[] getContent() {

        return ((PhotoCont<fim_middle>","
     * Gets the GroupChat that had its photo changed that triggered this Event
     *
     * @return The GroupChat that had its photo changed that triggered this Event
     */","
     * Gets the PhotoContent that was set that triggered this Event
     *
     * @return The PhotoContent that was set that triggered this Event
     */"
"<fim_prefix>/*<fim_suffix>
package com.jenkins.weavedreamer.print;

import com.jenkins.weavedreamer.WeavingDraftWindow;
import com.jenkins.weavedreamer.WeavingGridControl;
import com.jenkins.weavedreamer.models.EditingSession;
import com.jenkins.weavedreamer.models.WeavingPatternModel;

import javax.swing.*;
import java.awt.*;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import<fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","*
 * Created by <NAME> on 11/12/2016.
 */"
"<fim_prefix>mer.WeavingDraftWindow;
import com.jenkins.weavedreamer.WeavingGridControl;
import com.jenkins.weavedreamer.models.EditingSession;
import com.jenkins.weavedreamer.models.WeavingPatternModel;

import javax.swing.*;
import java.awt.*;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.text.MessageFormat;

/**<fim_suffix>
public class PrintPattern extends AbstractWeaveDreamerPrintable {
    private WeavingGridControl weavingPatternGrid;

    private Font headerFont = new Font(""Arial"", Font.BOLD, 12);

    private Font textFont = new Font(""Arial"", Font.PLAIN, 8);
    private Printable weavingGridPrintable;


    public PrintPattern(EditingSession session, WeavingDraftWindow draftWindow) {
   <fim_middle>","
 * @author David
 */","
 * @author <NAME>"
"<fim_prefix>package name.abhijitsarkar.lucene.util;

import java.io.File;

import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

/**<fim_suffix>
public class SearchOptionsParser {
    private CommandLine line = null;
    private final HelpFormatter formatter = new HelpFormatter();

    public SearchOptionsParser(final String[] args) throws ParseException {
        final Options options = new Options();

        final Option query = new Option(""q"", ""query"", true, ""Query"");
        query.setRequired(true);

        options.addOp<fim_middle>","
 * This class serves as an utility to any class that does Lucene searches. It
 * accepts parameters like index directory, field name and query string. It also
 * provides reasonable defaults for some parameters. To find out more about this
 * class, just run the Lucene searcher from command line.
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package com.krawler.crm.database.tables;

import com.krawler.common.admin.User;

public class CustomReportList {
    private int rno;
    private String rname;
//    private String runiquename;
    private String rdescription;
    private String rcategory;
    private String rfilterjson;
    private User usersByUpdatedbyid;
    private User usersByCreatedbyid;
    private Long created<fim_middle>","
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/","*
 * Created by <NAME> on 03/03/2018.
 */"
"<fim_prefix>/*<fim_suffix>
package com.premiumminds.billy.portugal.test.util;

import com.google.inject.Injector;
import com.premiumminds.billy.portugal.persistence.entities.PTSupplierEntity;
import com.premiumminds.billy.portugal.services.entities.PTAddress;
import com.premiumminds.billy.portugal.services.entities.PTContact;
import com.premiumminds.billy.portugal.services.entities.PTSupplier;

public class PTS<fim_middle>","
 * Copyright (C) 2017 Premium Minds.
 *
 * This file is part of billy portugal (PT Pack).
 *
 * billy portugal (PT Pack) is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * billy portugal (PT Pack) is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with billy portugal (PT Pack). If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by billy on 17/06/16.
 */"
"<fim_prefix>/*<fim_suffix>

package org.restcomm.protocols.ss7.map.api.service.callhandling;

import java.io.Serializable;

/**
*
<code>
UUI  ::= OCTET STRING (SIZE (1..131))
-- Octets are coded according to ETS 300 356

</code>
*
*
* @author sergey vetyutnev
*
*/
public interface UUI extends Serializable {

    byte[] getData();

    // TODO: implement the internal structure

}
<fim_middle>","
 * TeleStax, Open Source Cloud Communications  Copyright 2012.
 * and individual contributors
 * by the @authors tag. See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */","*
 *
 * @author sergey vetyutnev
 *
 */"
"<fim_prefix>e for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.restcomm.protocols.ss7.map.api.service.callhandling;

import java.io.Serializable;

/**<fim_suffix>
public interface UUI extends Serializable {

    byte[] getData();

    // TODO: implement the internal structure

}
<fim_middle>","
*
<code>
UUI  ::= OCTET STRING (SIZE (1..131))
-- Octets are coded according to ETS 300 356

</code>
*
*
* @author sergey vetyutnev
*
*/","
 * User User Interface (UUI)
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package bdl.build.javafx.scene.layout;

import bdl.build.GObject;
import bdl.view.right.PropertyEditPane;
import bdl.build.properties.PanelProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import java.util.List;
import javafx.scene.layout.BorderPane;

public class GBorderPane extends BorderPane implements GObject {
<fim_middle>","
 * This file is part of JavaFX-GUI-Builder.
 *
 * Copyright (C) 2014  Leon Atherton, Ben Goodwin, David Hodgson
 *
 * JavaFX-GUI-Builder is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * JavaFX-GUI-Builder is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JavaFX-GUI-Builder.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package xades4j.production;

import xades4j.algorithms.Algorithm;
import com.google.inject.Inject;
import org.apache.xml.security.utils.Constants;
import org.w3c.dom.Element;
import xades4j.utils.CannotAddDataToDigestInputException;
import xades4j.properties.SignatureTimeStampProperty;
import xades4j.properties.data.BaseXAdESTimeStampData;
import xades4j.utils.TimeStampDiges<fim_middle>","
 * XAdES4j - A Java library for generation and verification of XAdES signatures.
 * Copyright (C) 2010 Luis Goncalves.
 *
 * XAdES4j is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or any later version.
 *
 * XAdES4j is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with XAdES4j. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>es.data.BaseXAdESTimeStampData;
import xades4j.utils.TimeStampDigestInput;
import xades4j.properties.data.SignatureTimeStampData;
import xades4j.providers.AlgorithmsProviderEx;
import xades4j.providers.TimeStampTokenProvider;
import xades4j.providers.TimeStampTokenProvider.TimeStampTokenRes;
import xades4j.utils.DOMHelper;
import xades4j.utils.TimeStampDigestInputFactory;

/**<fim_suffix>
class DataGenSigTimeStamp extends DataGenBaseTimeStamp<SignatureTimeStampProperty>
{
    @Inject
    public DataGenSigTimeStamp(
            TimeStampTokenProvider timeStampTokenProvider,
            AlgorithmsProviderEx algorithmsProvider,
            TimeStampDigestInputFactory timeStampDigestInputFactory)
    {
        super(algorithmsProvider, timeStampTokenProvider, time<fim_middle>","
 *
 * @author Lu√≠s
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package cn.taketoday.context.annotation.gh24375;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target(ElementType.ANNOTATION_TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface NestedAnnotation {

  String name() default """";

}
<fim_middle>","
 * Original Author -> Harry Yang (taketoday@foxmail.com) https://taketoday.cn
 * Copyright Â© TODAY & 2017 - 2022 All Rights Reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/]
 */","*
 * @author <NAME>
 */"
"<fim_prefix> private Integer experiment;

    /**
     * The local date time at which the click interaction occurred in the Scratch GUI.
     */
    @JsonProperty(""time"")
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime date;

    /**
     * The type of click event that occurred.
     */
    @JsonProperty(""type"")
    private ClickEventType eventType;

    /**<fim_suffix>
    private ClickEventSpecific event;

    /**
     * Additional information about the event.
     */
    private String metadata;

    /**
     * Constructs a new click event dto with the given attributes.
     *
     * @param user The id of the user who caused the event.
     * @param experiment The id of the experiment during which the event occurred.
     * @param date The time at<fim_middle>","
     * The specific event that occurred.
     */","
     * The specific event that occurred.
     */"
"<fim_prefix>ocalDateTimeDeserializer.class)
    private LocalDateTime date;

    /**
     * The type of click event that occurred.
     */
    @JsonProperty(""type"")
    private ClickEventType eventType;

    /**
     * The specific event that occurred.
     */
    private ClickEventSpecific event;

    /**
     * Additional information about the event.
     */
    private String metadata;

    /**<fim_suffix>
    public ClickEventDTO(final Integer user, final Integer experiment, final LocalDateTime date,
                         final ClickEventType eventType, final ClickEventSpecific event, final String metadata) {
        this.user = user;
        this.experiment = experiment;
        this.date = date;
        this.eventType = eventType;
        this.event = event;
        this.metadata <fim_middle>","
     * Constructs a new click event dto with the given attributes.
     *
     * @param user The id of the user who caused the event.
     * @param experiment The id of the experiment during which the event occurred.
     * @param date The time at which the event occurred.
     * @param eventType The type of event.
     * @param event The specific event.
     * @param metadata The metadata.
     */","
     * Default constructor.
     */"
"<fim_prefix>h a button, icon, or similar event.
 */
@Builder
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class ClickEventDTO implements EventDTO {

    /**
     * The unique ID of the click event.
     */
    private Integer id;

    /**
     * The ID of the user who caused the event.
     */
    private Integer user;

    /**<fim_suffix>
    private Integer experiment;

    /**
     * The local date time at which the click interaction occurred in the Scratch GUI.
     */
    @JsonProperty(""time"")
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime date;

    /**
     * The type of click event that occurred.
     */
    @JsonProperty(""type"")
    private ClickEventType eventType;

   <fim_middle>","
     * The ID of the experiment during which the event occurred.
     */","
     * The ID of the project in which the click interaction occurred.
    "
"<fim_prefix>sr310.deser.LocalDateTimeDeserializer;
import fim.unipassau.de.scratchLog.util.enums.ClickEventSpecific;
import fim.unipassau.de.scratchLog.util.enums.ClickEventType;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

import java.time.LocalDateTime;
import java.util.Objects;

/**<fim_suffix>
@Builder
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class ClickEventDTO implements EventDTO {

    /**
     * The unique ID of the click event.
     */
    private Integer id;

    /**
     * The ID of the user who caused the event.
     */
    private Integer user;

    /**
     * The ID of the experiment during<fim_middle>","
 * A DTO representing a click event that resulted from user interaction with a button, icon, or similar event.
 */","
 * A DTO for a click event.
 */"
"<fim_prefix>@JsonIgnoreProperties(ignoreUnknown = true)
public class ClickEventDTO implements EventDTO {

    /**
     * The unique ID of the click event.
     */
    private Integer id;

    /**
     * The ID of the user who caused the event.
     */
    private Integer user;

    /**
     * The ID of the experiment during which the event occurred.
     */
    private Integer experiment;

    /**<fim_suffix>
    @JsonProperty(""time"")
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime date;

    /**
     * The type of click event that occurred.
     */
    @JsonProperty(""type"")
    private ClickEventType eventType;

    /**
     * The specific event that occurred.
     */
    private ClickEventSpecific event;

    /**
     * Additional information about<fim_middle>","
     * The local date time at which the click interaction occurred in the Scratch GUI.
     */","
     * The date and time of the click event.
     */"
"<fim_prefix>final Integer user, final Integer experiment, final LocalDateTime date,
                         final ClickEventType eventType, final ClickEventSpecific event, final String metadata) {
        this.user = user;
        this.experiment = experiment;
        this.date = date;
        this.eventType = eventType;
        this.event = event;
        this.metadata = metadata;
    }

    /**<fim_suffix>
    @Override
    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other == null || getClass() != other.getClass()) {
            return false;
        }

        ClickEventDTO that = (ClickEventDTO) other;
        return Objects.equals(id, that.id);
    }

    /**
     * Calculates a hash code for this click even<fim_middle>","
     * Indicates whether some {@code other} click event DTO is semantically equal to this click event DTO.
     *
     * @param other The object to compare this click event DTO to.
     * @return {@code true} iff {@code other} is a semantically equivalent click event DTO.
     */","
     * Returns the id of this click event.
     *
     * @return the id of this click event.
     */"
"<fim_prefix>a semantically equivalent click event DTO.
     */
    @Override
    public boolean equals(final Object other) {
        if (this == other) {
            return true;
        }

        if (other == null || getClass() != other.getClass()) {
            return false;
        }

        ClickEventDTO that = (ClickEventDTO) other;
        return Objects.equals(id, that.id);
    }

    /**<fim_suffix>
    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

}
<fim_middle>","
     * Calculates a hash code for this click event DTO for hashing purposes, and to fulfill the
     * {@link Object#equals(Object)} contract.
     *
     * @return The hash code value of the click event DTO.
     */","
     * Returns a hash code value for this object.
     *
     * @return a hash code value for this object.
     */"
"<fim_prefix>/*<fim_suffix>

package fim.unipassau.de.scratchLog.web.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;
import fim.unipassau.de.scratchLog.util.enums.ClickEventSpecific;
import fim.uni<fim_middle>","
 * Copyright (C) 2023 ScratchLog contributors
 *
 * This file is part of ScratchLog.
 *
 * ScratchLog is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * ScratchLog is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ScratchLog. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 11.12.16.
 */"
"<fim_prefix>k.Setter;
import lombok.ToString;

import java.time.LocalDateTime;
import java.util.Objects;

/**
 * A DTO representing a click event that resulted from user interaction with a button, icon, or similar event.
 */
@Builder
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class ClickEventDTO implements EventDTO {

    /**<fim_suffix>
    private Integer id;

    /**
     * The ID of the user who caused the event.
     */
    private Integer user;

    /**
     * The ID of the experiment during which the event occurred.
     */
    private Integer experiment;

    /**
     * The local date time at which the click interaction occurred in the Scratch GUI.
     */
    @JsonProperty(""time"")
    @JsonDeserialize(using =<fim_middle>","
     * The unique ID of the click event.
     */","
     * The ID of the click event.
     */"
"<fim_prefix>occurred in the Scratch GUI.
     */
    @JsonProperty(""time"")
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime date;

    /**
     * The type of click event that occurred.
     */
    @JsonProperty(""type"")
    private ClickEventType eventType;

    /**
     * The specific event that occurred.
     */
    private ClickEventSpecific event;

    /**<fim_suffix>
    private String metadata;

    /**
     * Constructs a new click event dto with the given attributes.
     *
     * @param user The id of the user who caused the event.
     * @param experiment The id of the experiment during which the event occurred.
     * @param date The time at which the event occurred.
     * @param eventType The type of event.
     * @param event The specific<fim_middle>","
     * Additional information about the event.
     */","
     * The metadata associated with the event.
    "
"<fim_prefix>l.Objects;

/**
 * A DTO representing a click event that resulted from user interaction with a button, icon, or similar event.
 */
@Builder
@Getter
@Setter
@ToString
@NoArgsConstructor
@AllArgsConstructor
@JsonIgnoreProperties(ignoreUnknown = true)
public class ClickEventDTO implements EventDTO {

    /**
     * The unique ID of the click event.
     */
    private Integer id;

    /**<fim_suffix>
    private Integer user;

    /**
     * The ID of the experiment during which the event occurred.
     */
    private Integer experiment;

    /**
     * The local date time at which the click interaction occurred in the Scratch GUI.
     */
    @JsonProperty(""time"")
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime date;

    /**
     * The typ<fim_middle>","
     * The ID of the user who caused the event.
     */","
     * The ID of the user who performed the click interaction.
    "
"<fim_prefix> event.
     */
    private Integer user;

    /**
     * The ID of the experiment during which the event occurred.
     */
    private Integer experiment;

    /**
     * The local date time at which the click interaction occurred in the Scratch GUI.
     */
    @JsonProperty(""time"")
    @JsonDeserialize(using = LocalDateTimeDeserializer.class)
    private LocalDateTime date;

    /**<fim_suffix>
    @JsonProperty(""type"")
    private ClickEventType eventType;

    /**
     * The specific event that occurred.
     */
    private ClickEventSpecific event;

    /**
     * Additional information about the event.
     */
    private String metadata;

    /**
     * Constructs a new click event dto with the given attributes.
     *
     * @param user The id of the user who caused th<fim_middle>","
     * The type of click event that occurred.
     */","
     * The type of click event that occurred.
     */"
"<fim_prefix>package org.xbib.elasticsearch.plugin.bundle.test.index.analysis.baseform;

import org.apache.lucene.util.SuppressForbidden;
import org.xbib.elasticsearch.plugin.bundle.common.fsa.Dictionary;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.StandardCharsets;

/**<fim_suffix>
public class DictionaryTest {

    @SuppressForbidden(reason = ""accessing local resources from classpath"")
    public void testVerifyDE() throws IOException {
        Dictionary dictionary = new Dictionary();
        InputStreamReader reader = new InputStreamReader(getClass().getResourceAsStream(""de-lemma-utf8.txt""),
                StandardCharsets.UTF_8);
        dictionary.loadLine<fim_middle>","
 * Dictionary tests.
 */","
 *
 */"
"<fim_prefix>package IRPact_modellierung.events;


import IRPact_modellierung.SimulationEntity;
import IRPact_modellierung.simulation.SimulationContainer;

/**<fim_suffix>
public abstract class Event extends SimulationEntity implements Comparable<Event> {

	private double scheduledForTime;

	/**
	 * Abstraction of an event representing a model dynamic at a specified time
	 *
	 * @param simulationContainer The simulation container the model dynamic is to take place in
	 * @param scheduledForTime The simulation time at which the event shall be processed
	<fim_middle>","
 * An event is an abstraction representing any model dynamics.
 * It is created by an entity involved in the (concrete) model dynamic,
 * and serves to interact with (not necessarily other) entities in that model dynamic.
 * It is closely tied to the temporal model by its scheduled time,
 * and managed by an EventScheduler.
 * Its effects are modeled within the event through their processing method.
 * Every (distinct) model dynamic should model their own type of event,
 * formalizing their dynamics in its processing method.
 *
 * @author Simon Johanning
 */","
 * Abstract class representing an event
 *
 * @author <NAME>
 */"
"<fim_prefix>me() > scheduledForTime) throw new IllegalArgumentException(""Event is scheduled for the past (""+scheduledForTime+"")!; Since time is unidirectional this is a violation of semantics!!\nSimulation time is ""+simulationContainer.getTimeModel().getSimulationTime());
		this.scheduledForTime = scheduledForTime;
	}

	public double getScheduledForTime() {
		return this.scheduledForTime;
	}

	/**<fim_suffix>
	public int compareTo(Event otherEvent) {
		if(this.getScheduledForTime() - otherEvent.getScheduledForTime() < 0.0) return -1;
		else if(this.getScheduledForTime() == otherEvent.getScheduledForTime()) return 0;
		else return 1;
	}

	/**
	 * Method to execute the event; Will make the model dynamics associated to this event come into effect
	 *
	 * @param systemTime The current time of <fim_middle>","
	 * Method to compare the execution time of this event to another event for sorting events by execution time
	 *
	 * @param otherEvent Event that to reference the scheduled time of this event to
	 * @return -1 if this event is scheduled before otherEvent, 0 if both events are scheduled for the same time, 1 if event is scheduled to be executed after otherEvent
	 */","
	 * Method to execute the event; Will make the model dynamics associated to this event come into effect
	 *
	 * @param systemTime The current time of the simulation
	 */"
"<fim_prefix>ed by an EventScheduler.
 * Its effects are modeled within the event through their processing method.
 * Every (distinct) model dynamic should model their own type of event,
 * formalizing their dynamics in its processing method.
 *
 * @author Simon Johanning
 */
public abstract class Event extends SimulationEntity implements Comparable<Event> {

	private double scheduledForTime;

	/**<fim_suffix>
	public Event(SimulationContainer simulationContainer, double scheduledForTime) throws IllegalArgumentException{
		super(simulationContainer);
		if(simulationContainer == null) throw new IllegalArgumentException(""Simulation container is null. Event to instantiate has no context in which it is executed!!"");
		else if(simulationContainer.getTimeModel().getSimulationTime() > scheduledFor<fim_middle>","
	 * Abstraction of an event representing a model dynamic at a specified time
	 *
	 * @param simulationContainer The simulation container the model dynamic is to take place in
	 * @param scheduledForTime The simulation time at which the event shall be processed
	 *
	 * @throws IllegalArgumentException When the simulation container is null or the scheduled time lies before the (reference) time within the simulation container
	 */","
	 * Creates a new Event.
	 *
	 * @param simulationContainer the simulation container in which the event is executed.
	 * @param scheduledForTime the time at which the event is scheduled to be executed.
	 * @throws IllegalArgumentException if simulationContainer is null."
"<fim_prefix>is event is scheduled before otherEvent, 0 if both events are scheduled for the same time, 1 if event is scheduled to be executed after otherEvent
	 */
	public int compareTo(Event otherEvent) {
		if(this.getScheduledForTime() - otherEvent.getScheduledForTime() < 0.0) return -1;
		else if(this.getScheduledForTime() == otherEvent.getScheduledForTime()) return 0;
		else return 1;
	}

	/**<fim_suffix>
	public abstract void processEvent(double systemTime);
}<fim_middle>","
	 * Method to execute the event; Will make the model dynamics associated to this event come into effect
	 *
	 * @param systemTime The current time of the system for execution
	 */","
	 * Process the event
	 * @param systemTime the current system time
	 */"
"<fim_prefix>package imcode.server.document.textdocument;

import com.fasterxml.jackson.annotation.JsonIgnore;
import imcode.server.document.DocumentDomainObject;
import imcode.server.document.DocumentReference;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

import java.io.Serializable;
import java.util.LinkedList;

/**<fim_suffix>

public class MenuItemDomainObject implements Cloneable, Serializable {

    private Integer sortKey;

    private TreeSortKeyDomainObject treeSortKey = new TreeSortKeyDomainObject("""");

    @JsonIgnore
    private DocumentReference documentReference;

    private Integer id;

    public MenuItemDomainObject() {
    }

    public MenuItemDomainObject(DocumentReference documentReferenc<fim_middle>","
 * Menu item descriptor.
 *
 * @see imcode.server.document.textdocument.MenuDomainObject
 */","
 * Created by zhanghailong on 14-9-1.
 */"
"<fim_prefix>/*<fim_suffix>
package com.warxim.vucsa.common.connection;

/**
 * State of connection.
 */
public enum ConnectionState {
    /**
     * Connection is starting
     */
    STARTING,
    /**
     * Connection is running
     */
    STARTED,
    /**
     * Connection is stopping
     */
    STOPPING,
    /**
     * Connection is offline
     */
    STOPPED
}
<fim_middle>","
 * Vulnerable Client-Server Application (VuCSA)
 *
 * Copyright (C) 2021 Michal VÃ¡lka
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program. If
 * not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 11/12/2017.
 */"
"<fim_prefix>ied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program. If
 * not, see <https://www.gnu.org/licenses/>.
 */
package com.warxim.vucsa.common.connection;

/**
 * State of connection.
 */
public enum ConnectionState {
    /**<fim_suffix>
    STARTING,
    /**
     * Connection is running
     */
    STARTED,
    /**
     * Connection is stopping
     */
    STOPPING,
    /**
     * Connection is offline
     */
    STOPPED
}
<fim_middle>","
     * Connection is starting
     */","
     * Connection is starting
     */"
"<fim_prefix>ral Public License along with this program. If
 * not, see <https://www.gnu.org/licenses/>.
 */
package com.warxim.vucsa.common.connection;

/**
 * State of connection.
 */
public enum ConnectionState {
    /**
     * Connection is starting
     */
    STARTING,
    /**
     * Connection is running
     */
    STARTED,
    /**
     * Connection is stopping
     */
    STOPPING,
    /**<fim_suffix>
    STOPPED
}
<fim_middle>","
     * Connection is offline
     */","
     * Connection is stopped
     */"
"<fim_prefix>will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program. If
 * not, see <https://www.gnu.org/licenses/>.
 */
package com.warxim.vucsa.common.connection;

/**<fim_suffix>
public enum ConnectionState {
    /**
     * Connection is starting
     */
    STARTING,
    /**
     * Connection is running
     */
    STARTED,
    /**
     * Connection is stopping
     */
    STOPPING,
    /**
     * Connection is offline
     */
    STOPPED
}
<fim_middle>","
 * State of connection.
 */","
 * Connection state
 *
 *"
"<fim_prefix>PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program. If
 * not, see <https://www.gnu.org/licenses/>.
 */
package com.warxim.vucsa.common.connection;

/**
 * State of connection.
 */
public enum ConnectionState {
    /**
     * Connection is starting
     */
    STARTING,
    /**<fim_suffix>
    STARTED,
    /**
     * Connection is stopping
     */
    STOPPING,
    /**
     * Connection is offline
     */
    STOPPED
}
<fim_middle>","
     * Connection is running
     */","
     * Connection is started
     */"
"<fim_prefix>tails.
 *
 * You should have received a copy of the GNU General Public License along with this program. If
 * not, see <https://www.gnu.org/licenses/>.
 */
package com.warxim.vucsa.common.connection;

/**
 * State of connection.
 */
public enum ConnectionState {
    /**
     * Connection is starting
     */
    STARTING,
    /**
     * Connection is running
     */
    STARTED,
    /**<fim_suffix>
    STOPPING,
    /**
     * Connection is offline
     */
    STOPPED
}
<fim_middle>","
     * Connection is stopping
     */","
     * Connection is stopping"
"<fim_prefix>package dev.bonnie.thesideways.util;

import dev.bonnie.thesideways.TheSidewaysConfig;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.Level;

public final class LevelUtil {
    /**<fim_suffix>

    public static ResourceKey<Level> destinationDimension() {
        return ResourceKey.create(Registries.DIMENSION, new ResourceLocation(TheSidewaysConfig.SERVER.portal_destination_dimension_ID.get()));
    }

    /**
     * Used to determine a return dimension for Aether-related teleportation. By default, this is ""minecraft:overworld"".
     */
    public static ResourceKey<Level> <fim_middle>","
     * Used to determine a destination dimension for Aether-related teleportation. By default, this is ""aether:the_aether"".
     */","
     * Used to determine the dimension that the player is teleported to when they die. By default, this is ""minecraft:overworld"".
    "
"<fim_prefix>lic final class LevelUtil {
    /**
     * Used to determine a destination dimension for Aether-related teleportation. By default, this is ""aether:the_aether"".
     */

    public static ResourceKey<Level> destinationDimension() {
        return ResourceKey.create(Registries.DIMENSION, new ResourceLocation(TheSidewaysConfig.SERVER.portal_destination_dimension_ID.get()));
    }

    /**<fim_suffix>
    public static ResourceKey<Level> returnDimension() {
        return ResourceKey.create(Registries.DIMENSION, new ResourceLocation(TheSidewaysConfig.SERVER.portal_return_dimension_ID.get()));
    }
}
<fim_middle>","
     * Used to determine a return dimension for Aether-related teleportation. By default, this is ""minecraft:overworld"".
     */","
     * Used to determine a source dimension for Aether-related teleportation. By default, this is ""aether:the_aether"".
    "
"<fim_prefix>/*<fim_suffix>
package org.openxls.formats.XLS;

import org.openxls.toolkit.ByteTools;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <b>Label: BiffRec Value, String Constant (204h)</b><br>
 * The Label record describes a cell that contains a string.
 * The String length must be in the range 000h-00ffh (0-255).
 * <p><pre>
 * offset  name        size    contents
 * ---
 * 4       r<fim_middle>","
 * --------- BEGIN COPYRIGHT NOTICE ---------
 * Copyright 2002-2012 Extentech Inc.
 * Copyright 2013 Infoteria America Corp.
 * 
 * This file is part of OpenXLS.
 * 
 * OpenXLS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 * 
 * OpenXLS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with OpenXLS.  If not, see
 * <http://www.gnu.org/licenses/>.
 * ---------- END COPYRIGHT NOTICE ----------
 */","*
 * <b>Label: BiffRec Value, String Constant (204h)</b><br>
 * The Label record describes a cell that contains a string.
 * The String length must be in the range 000h-00ffh (0-255).
 * <p><pre>
 * offset  name        size    contents
 * ---
 * 4       r            2       String length
 * 6       s            var     String
 * </pre>
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix>* GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with OpenXLS.  If not, see
 * <http://www.gnu.org/licenses/>.
 * ---------- END COPYRIGHT NOTICE ----------
 */
package org.openxls.formats.XLS;

import org.openxls.toolkit.ByteTools;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**<fim_suffix>

public final class Label extends XLSCellRecord
{
	private static final Logger log = LoggerFactory.getLogger( Label.class );
	private static final long serialVersionUID = -2921430854162954640L;
	int cch;
	String val;

	@Override
	public void init()
	{
		super.init();
		short s;
		short s1;
		// get the row, col and ixfe information
		s = ByteTools.readShort( getByteAt( 0 ), getByteAt(<fim_middle>","
 * <b>Label: BiffRec Value, String Constant (204h)</b><br>
 * The Label record describes a cell that contains a string.
 * The String length must be in the range 000h-00ffh (0-255).
 * <p><pre>
 * offset  name        size    contents
 * ---
 * 4       rw          2       Row Number
 * 6       col         2       Column Number of the RK record
 * 8       ixfe        2       Index to XF cell format record
 * 10      cch         2       Length of the string
 * 12      rgch        var     The String
 * </p></pre>
 *
 * @see LABELSST
 * @see STRING
 * @see RSTRING
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.xpandit.fusionplugin.pentaho;


/**<fim_suffix>
public class FusionComponent {
    
    //TODO Create a class that implements the component properly so that it can be called on an xAction. The generate would start calling this class instead.

}
<fim_middle>","
 * Class that implements the FusionCharts plugin component.
 *
 * @author rplp
 * @since 1.0
 * @version $Revision: 7787 $
 *
 */","
 * Created by gmoran on 3/27/2016.
 */"
"<fim_prefix>package com.jacob.test.vbscript;

import com.jacob.activeX.ActiveXComponent;
import com.jacob.com.ComException;
import com.jacob.com.ComThread;
import com.jacob.com.DispatchEvents;
import com.jacob.com.Variant;
import com.jacob.test.BaseTestCase;

/**<fim_suffix>
public class ScriptTest3ActiveX extends BaseTestCase {
	public static ActiveXComponent sC;

	public static DispatchEvents de = null;

	public static boolean quit = false;

	public void testYetAnotherScriptTest() {
		try {
			ComThread.InitMTA();
			ScriptTest3ActiveXInner script = new ScriptTest3ActiveXInner();
			script.start();
			try {
				Thread.sleep(1000);
			} catch (Interrupte<fim_middle>","
 * Here we create the ScriptControl component in a separate MTA thread and then
 * call the Eval method from the main thread. The main thread must also be an
 * MTA thread. If you try to create it as an STA then you will not be able to
 * make calls into a component running in another thread.
 * <p>
 * May need to run with some command line options (including from inside
 * Eclipse). Look in the docs area at the Jacob usage document for command line
 * options.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.github.hanyaeger.core.entities.events;

import com.github.hanyaeger.core.entities.Removable;
import javafx.event.Event;

/**<fim_suffix>
public class RemoveEntityEvent extends Event {

    private final transient Removable removable;

    /**
     * Instantiate a new {@code RemoveEntityEvent}. Pass the {@link Removable} as an argument.
     *
     * @param removable the {@link Removable} that needs to be removed
     */
    public RemoveEntityEvent(final Removable removable) {
        super(EventTypes.REMOVE);

       <fim_middle>","
 * Send a {@code RemoveEntityEvent} when a  {@link Removable} needs to be removed.
 */","
 * An event that is fired when an entity is removed.
 *
 * @author <NAME> (<EMAIL>)"
"<fim_prefix>package com.github.hanyaeger.core.entities.events;

import com.github.hanyaeger.core.entities.Removable;
import javafx.event.Event;

/**
 * Send a {@code RemoveEntityEvent} when a  {@link Removable} needs to be removed.
 */
public class RemoveEntityEvent extends Event {

    private final transient Removable removable;

    /**<fim_suffix>
    public RemoveEntityEvent(final Removable removable) {
        super(EventTypes.REMOVE);

        this.removable = removable;
    }

    @Override
    public Removable getSource() {
        return removable;
    }
}
<fim_middle>","
     * Instantiate a new {@code RemoveEntityEvent}. Pass the {@link Removable} as an argument.
     *
     * @param removable the {@link Removable} that needs to be removed
     */","
     * Create a new {@code RemoveEntityEvent}.
     *
     * @param removable the {@link Removable} that needs to be removed.
     */"
"<fim_prefix>/**<fim_suffix>
package com.mechalikh.pureedgesim.network;

import com.mechalikh.pureedgesim.datacentersmanager.ComputingNode;
import com.mechalikh.pureedgesim.energy.EnergyModelNetworkLink;
import com.mechalikh.pureedgesim.scenariomanager.SimulationParameters; 
import com.mechalikh.pureedgesim.simulationmanager.SimulationManager;

/**
 * A 4G LTE network link.
 */
public class NetworkLinkCellularUp <fim_middle>","
 *     PureEdgeSim:  A Simulation Framework for Performance Evaluation of Cloud, Edge and Mist Computing Environments 
 *
 *     This file is part of PureEdgeSim Project.
 *
 *     PureEdgeSim is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     PureEdgeSim is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with PureEdgeSim. If not, see <http://www.gnu.org/licenses/>.
 *     
 *     @author Charafeddine Mechalikh
 **/","
 * A 4G LTE network link.
 */"
"<fim_prefix>org/licenses/>.
 *     
 *     @author Charafeddine Mechalikh
 **/
package com.mechalikh.pureedgesim.network;

import com.mechalikh.pureedgesim.datacentersmanager.ComputingNode;
import com.mechalikh.pureedgesim.energy.EnergyModelNetworkLink;
import com.mechalikh.pureedgesim.scenariomanager.SimulationParameters; 
import com.mechalikh.pureedgesim.simulationmanager.SimulationManager;

/**<fim_suffix>
public class NetworkLinkCellularUp extends NetworkLinkCellular {

	public NetworkLinkCellularUp(ComputingNode src, ComputingNode dst, SimulationManager simulationManager, NetworkLinkTypes type) {
		super(src, dst, simulationManager, type);
		double energyConsumption = SimulationParameters.cellularDeviceTransmissionWattHourPerBit
				+ SimulationParameters.cellularBaseStationWattHourPe<fim_middle>","
 * A 4G LTE network link.
 */","
 * This class represents a cellular link between two computing"
"<fim_prefix>ost per shares held
     */
    private final LazyValue<Quote> fifoCostPerSharesHeld = new LazyValue<>(() -> {
        var costs = costCalculation.get();
        return Quote.of(costs.netFifoCost().getCurrencyCode(), Math.round(costs.netFifoCost().getAmount()
                        / (double) costs.sharesHeld() * Values.Share.factor() * Values.Quote.factorToMoney()));
    });

    /**<fim_suffix>
    private final LazyValue<Quote> movingAverageCostPerSharesHeld = new LazyValue<>(() -> {
        var costs = costCalculation.get();

        Money netMovingAverageCost = costs.netMovingAverageCost();
        return Quote.of(netMovingAverageCost.getCurrencyCode(), Math.round(netMovingAverageCost.getAmount()
                        / (double) costs.sharesHeld() * Values.Share.factor(<fim_middle>","
     * cost per shares held
     */","
     * The cost per shares held in the moving average."
"<fim_prefix>lineItems));

    /**
     * delta = market value + sells + dividends - purchase costs
     */
    private final LazyValue<Money> delta = new LazyValue<>(() -> deltaCalculation.get().getDelta());

    /**
     * deltaPercent = delta / purchase costs + buy
     */
    private final LazyValue<Double> deltaPercent = new LazyValue<>(() -> deltaCalculation.get().getDeltaPercent());

    /**<fim_suffix>
    // in order to minimize rounding error, first sum up individual values
    // and convert only then into the term currency
    private final LazyValue<Money> marketValue = new LazyValue<>(() -> this.lineItems.stream() //
                    .filter(data -> data instanceof CalculationLineItem.ValuationAtEnd)
                    .map(CalculationLineItem::getValue) //
               <fim_middle>","
     * market value of holdings at end of period
     */","
     * marketValue = sum of all line items
     */"
"<fim_prefix>sCalculation.class, converter, security, lineItems));

    private final LazyValue<CapitalGainsRecord> realizedCapitalGains = new LazyValue<>(
                    () -> capitalGains.get().getRealizedCapitalGains());
    private final LazyValue<CapitalGainsRecord> unrealizedCapitalGains = new LazyValue<>(
                    () -> capitalGains.get().getUnrealizedCapitalGains());

    /*<fim_suffix> LazySecurityPerformanceRecord(Client client, Security security, CurrencyConverter converter,
                    Interval interval)
    {
        super(client, security, converter, interval);
    }

    public LazyValue<Double> getIrr()
    {
        return irr;
    }

    public LazyValue<Double> getTrueTimeWeightedRateOfReturn()
    {
        return twror;
    }

    public LazyValu<fim_middle>", package */,"*
"
"<fim_prefix>   return new LazyValue<>(() -> dividendCalculation.get().numOfEvents());
    }

    public LazyValue<LocalDate> getLastDividendPayment()
    {
        return new LazyValue<>(() -> dividendCalculation.get().lastDividendPayment());
    }

    public LazyValue<Periodicity> getPeriodicity()
    {
        return new LazyValue<>(() -> dividendCalculation.get().periodicity());
    }

    /**<fim_suffix>
    public LazyValue<Double> getRateOfReturnPerYear()
    {
        return new LazyValue<>(() -> dividendCalculation.get().rateOfReturnPerYear());
    }

    public LazyValue<Double> getTotalRateOfReturnDiv()
    {
        return new LazyValue<>(() -> {
            var costs = costCalculation.get();
            return costs.sharesHeld() > 0
                            ? (double) divid<fim_middle>","
     * Gets the rate of return of dividends per year as a percentage of
     * invested.
     * 
     * @return rate of return per year on success, else 0
     */","
     * @return the dividend calculation
     */"
"<fim_prefix>rmanceIndex = new LazyValue<>(
                    () -> PerformanceIndex.forInvestment(client, converter, security, interval, new ArrayList<>()));

    /**
     * True time-weighted rate of return
     */
    private final LazyValue<Double> twror = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getFinalAccumulatedPercentage();
    });

    /**<fim_suffix>
    private final LazyValue<Double> twrorpa = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getFinalAccumulatedAnnualizedPercentage();
    });

    /**
     * Max Drawdown and Max Drawdown Duration
     */
    private final LazyValue<Risk.Drawdown> drawdown = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return i<fim_middle>","
     * Annualized True time-weighted rate of return
     */","
     * True time-weighted rate of return (annualized)
   "
"<fim_prefix>nterval.getEnd())));

    /**
     * Latest quote
     */
    private final LazyValue<SecurityPrice> quote = new LazyValue<>(() -> security.getSecurityPrice(interval.getEnd()));

    private final LazyValue<CostCalculationResult> costCalculation = new LazyValue<>(
                    () -> Calculation.perform(CostCalculation.class, converter, security, lineItems).getResult());

    /**<fim_suffix>
    private final LazyValue<Money> fifoCost = new LazyValue<>(() -> costCalculation.get().fifoCost());

    /**
     * moving average cost of shares held
     */
    private final LazyValue<Money> movingAverageCost = new LazyValue<>(() -> costCalculation.get().movingAverageCost());

    /**
     * market value - fifo cost of shares held
     */
    private final LazyValue<Money> capit<fim_middle>","
     * fifo cost of shares held
     */","
     * FIFO cost of shares held
     */"
"<fim_prefix> twrorpa = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getFinalAccumulatedAnnualizedPercentage();
    });

    /**
     * Max Drawdown and Max Drawdown Duration
     */
    private final LazyValue<Risk.Drawdown> drawdown = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getDrawdown();
    });

    /**<fim_suffix>
    private final LazyValue<Risk.Volatility> volatility = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getVolatility();
    });

    private final LazyValue<DeltaCalculation> deltaCalculation = new LazyValue<>(
                    () -> Calculation.perform(DeltaCalculation.class, converter, security, lineItems));

    /**
     * delta = mark<fim_middle>","
     * Volatility and semi-volatility
     */","
     * Max Drawdown and Max Drawdown Duration
    "
"<fim_prefix>rice(interval.getEnd()));

    private final LazyValue<CostCalculationResult> costCalculation = new LazyValue<>(
                    () -> Calculation.perform(CostCalculation.class, converter, security, lineItems).getResult());

    /**
     * fifo cost of shares held
     */
    private final LazyValue<Money> fifoCost = new LazyValue<>(() -> costCalculation.get().fifoCost());

    /**<fim_suffix>
    private final LazyValue<Money> movingAverageCost = new LazyValue<>(() -> costCalculation.get().movingAverageCost());

    /**
     * market value - fifo cost of shares held
     */
    private final LazyValue<Money> capitalGainsOnHoldings = new LazyValue<>(
                    () -> marketValue.get().subtract(costCalculation.get().fifoCost()));

    /**
     * {@link capitalGainsO<fim_middle>","
     * moving average cost of shares held
     */","
     * market value - fifo cost of shares held
   "
"<fim_prefix>ivate final LazyValue<Double> capitalGainsOnHoldingsMovingAveragePercent = new LazyValue<>(() -> {
        var mv = marketValue.get();
        var cost = costCalculation.get().movingAverageCost();

        if (mv.getAmount() == 0L && cost.getAmount() == 0L)
            return 0d;
        else
            return ((double) mv.getAmount() / (double) cost.getAmount()) - 1;
    });

    /**<fim_suffix>
    private final LazyValue<Quote> fifoCostPerSharesHeld = new LazyValue<>(() -> {
        var costs = costCalculation.get();
        return Quote.of(costs.netFifoCost().getCurrencyCode(), Math.round(costs.netFifoCost().getAmount()
                        / (double) costs.sharesHeld() * Values.Share.factor() * Values.Quote.factorToMoney()));
    });

    /**
     * cost per shares hel<fim_middle>","
     * cost per shares held
     */","
     * cost per shares held
     */"
"<fim_prefix> cost of shares held
     */
    private final LazyValue<Money> movingAverageCost = new LazyValue<>(() -> costCalculation.get().movingAverageCost());

    /**
     * market value - fifo cost of shares held
     */
    private final LazyValue<Money> capitalGainsOnHoldings = new LazyValue<>(
                    () -> marketValue.get().subtract(costCalculation.get().fifoCost()));

    /**<fim_suffix>
    private final LazyValue<Double> capitalGainsOnHoldingsPercent = new LazyValue<>(() -> {
        var mv = marketValue.get();
        var cost = costCalculation.get().fifoCost();

        if (mv.getAmount() == 0L && cost.getAmount() == 0L)
            return 0d;
        else
            return ((double) mv.getAmount() / (double) cost.getAmount()) - 1;
    });

    /**
     * market <fim_middle>","
     * {@link capitalGainsOnHoldings} in percent
     */","
     * market value - fifo cost of shares held
     */"
"<fim_prefix>azyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getFinalAccumulatedPercentage();
    });

    /**
     * Annualized True time-weighted rate of return
     */
    private final LazyValue<Double> twrorpa = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getFinalAccumulatedAnnualizedPercentage();
    });

    /**<fim_suffix>
    private final LazyValue<Risk.Drawdown> drawdown = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getDrawdown();
    });

    /**
     * Volatility and semi-volatility
     */
    private final LazyValue<Risk.Volatility> volatility = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getVolatility();
  <fim_middle>","
     * Max Drawdown and Max Drawdown Duration
     */","
     * Drawdown
     */"
"<fim_prefix>i-volatility
     */
    private final LazyValue<Risk.Volatility> volatility = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getVolatility();
    });

    private final LazyValue<DeltaCalculation> deltaCalculation = new LazyValue<>(
                    () -> Calculation.perform(DeltaCalculation.class, converter, security, lineItems));

    /**<fim_suffix>
    private final LazyValue<Money> delta = new LazyValue<>(() -> deltaCalculation.get().getDelta());

    /**
     * deltaPercent = delta / purchase costs + buy
     */
    private final LazyValue<Double> deltaPercent = new LazyValue<>(() -> deltaCalculation.get().getDeltaPercent());

    /**
     * market value of holdings at end of period
     */
    // in order to minimize rounding<fim_middle>","
     * delta = market value + sells + dividends - purchase costs
     */","
     * delta = delta calculation
     */"
"<fim_prefix>;
    });

    private final LazyValue<DeltaCalculation> deltaCalculation = new LazyValue<>(
                    () -> Calculation.perform(DeltaCalculation.class, converter, security, lineItems));

    /**
     * delta = market value + sells + dividends - purchase costs
     */
    private final LazyValue<Money> delta = new LazyValue<>(() -> deltaCalculation.get().getDelta());

    /**<fim_suffix>
    private final LazyValue<Double> deltaPercent = new LazyValue<>(() -> deltaCalculation.get().getDeltaPercent());

    /**
     * market value of holdings at end of period
     */
    // in order to minimize rounding error, first sum up individual values
    // and convert only then into the term currency
    private final LazyValue<Money> marketValue = new LazyValue<>(() -> this.li<fim_middle>","
     * deltaPercent = delta / purchase costs + buy
     */","
     * delta percent = delta / market value
     */"
"<fim_prefix>        return 0d;
        else
            return ((double) mv.getAmount() / (double) cost.getAmount()) - 1;
    });

    /**
     * market value - moving average cost of shares held
     */
    private final LazyValue<Money> capitalGainsOnHoldingsMovingAverage = new LazyValue<>(
                    () -> marketValue.get().subtract(costCalculation.get().movingAverageCost()));

    /**<fim_suffix>
    private final LazyValue<Double> capitalGainsOnHoldingsMovingAveragePercent = new LazyValue<>(() -> {
        var mv = marketValue.get();
        var cost = costCalculation.get().movingAverageCost();

        if (mv.getAmount() == 0L && cost.getAmount() == 0L)
            return 0d;
        else
            return ((double) mv.getAmount() / (double) cost.getAmount()) - 1;
    });

<fim_middle>","
     * {@link capitalGainsOnHoldingsMovingAverage} in percent
     */","
     * market value - moving average cost of shares held
     */"
"<fim_prefix>}
     */
    private final LazyValue<Double> irr = new LazyValue<>(
                    () -> Calculation.perform(IRRCalculation.class, converter, security, lineItems).getIRR());

    private final LazyValue<PerformanceIndex> performanceIndex = new LazyValue<>(
                    () -> PerformanceIndex.forInvestment(client, converter, security, interval, new ArrayList<>()));

    /**<fim_suffix>
    private final LazyValue<Double> twror = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getFinalAccumulatedPercentage();
    });

    /**
     * Annualized True time-weighted rate of return
     */
    private final LazyValue<Double> twrorpa = new LazyValue<>(() -> {
        var index = performanceIndex.get();
        return index.getFinalA<fim_middle>","
     * True time-weighted rate of return
     */","
     * Annualized True time-weighted rate of return
   "
"<fim_prefix>vate final LazyValue<Money> marketValue = new LazyValue<>(() -> this.lineItems.stream() //
                    .filter(data -> data instanceof CalculationLineItem.ValuationAtEnd)
                    .map(CalculationLineItem::getValue) //
                    .collect(MoneyCollectors.sum(security.getCurrencyCode())) //
                    .with(converter.at(interval.getEnd())));

    /**<fim_suffix>
    private final LazyValue<SecurityPrice> quote = new LazyValue<>(() -> security.getSecurityPrice(interval.getEnd()));

    private final LazyValue<CostCalculationResult> costCalculation = new LazyValue<>(
                    () -> Calculation.perform(CostCalculation.class, converter, security, lineItems).getResult());

    /**
     * fifo cost of shares held
     */
    private fina<fim_middle>","
     * Latest quote
     */","
     * market value of shares held
  "
"<fim_prefix>, converter, security, lineItems).getResult());

    /**
     * fifo cost of shares held
     */
    private final LazyValue<Money> fifoCost = new LazyValue<>(() -> costCalculation.get().fifoCost());

    /**
     * moving average cost of shares held
     */
    private final LazyValue<Money> movingAverageCost = new LazyValue<>(() -> costCalculation.get().movingAverageCost());

    /**<fim_suffix>
    private final LazyValue<Money> capitalGainsOnHoldings = new LazyValue<>(
                    () -> marketValue.get().subtract(costCalculation.get().fifoCost()));

    /**
     * {@link capitalGainsOnHoldings} in percent
     */
    private final LazyValue<Double> capitalGainsOnHoldingsPercent = new LazyValue<>(() -> {
        var mv = marketValue.get();
        var cost = costCalc<fim_middle>","
     * market value - fifo cost of shares held
     */","
     * capital gains on holdings
     */"
"<fim_prefix>ass LazyValue<V>
    {
        private V value;
        private final Supplier<V> computeFunction;

        public LazyValue(Supplier<V> computeFunction)
        {
            this.computeFunction = computeFunction;
        }

        public V get()
        {
            if (value == null)
                value = computeFunction.get();
            return value;
        }
    }

    /**<fim_suffix>
    private final LazyValue<Double> irr = new LazyValue<>(
                    () -> Calculation.perform(IRRCalculation.class, converter, security, lineItems).getIRR());

    private final LazyValue<PerformanceIndex> performanceIndex = new LazyValue<>(
                    () -> PerformanceIndex.forInvestment(client, converter, security, interval, new ArrayList<>()));

    /**
     * T<fim_middle>","
     * internal rate of return of security {@link #calculateIRR()}
     */","
     * The performance index.
     */"
"<fim_prefix>percent
     */
    private final LazyValue<Double> capitalGainsOnHoldingsPercent = new LazyValue<>(() -> {
        var mv = marketValue.get();
        var cost = costCalculation.get().fifoCost();

        if (mv.getAmount() == 0L && cost.getAmount() == 0L)
            return 0d;
        else
            return ((double) mv.getAmount() / (double) cost.getAmount()) - 1;
    });

    /**<fim_suffix>
    private final LazyValue<Money> capitalGainsOnHoldingsMovingAverage = new LazyValue<>(
                    () -> marketValue.get().subtract(costCalculation.get().movingAverageCost()));

    /**
     * {@link capitalGainsOnHoldingsMovingAverage} in percent
     */
    private final LazyValue<Double> capitalGainsOnHoldingsMovingAveragePercent = new LazyValue<>(() -> {
        var mv <fim_middle>","
     * market value - moving average cost of shares held
     */","
     * {@link capitalGainsOnHoldingsMovingAverage} in percent
 "
"<fim_prefix>package main.domain;

import jcolibri.cbraplications.StandardCBRApplication;
import jcolibri.cbrcore.CBRCaseBase;
import jcolibri.cbrcore.Connector;
import jcolibri.method.retrieve.NNretrieval.NNConfig;

/**<fim_suffix>
public abstract class StandardLMSRecommender implements StandardCBRApplication {

	/** */
	private static StandardLMSRecommender instance = null;
	/** */
	protected Connector connector;
	/** */
	protected CBRCaseBase caseBase;
	/** */
	protected NNConfig simConfig;

	public static StandardLMSRecommender getInstance() {
		return instance;
	}

	protected StandardLMSRecommender() {
	}

	<fim_middle>","
 * This abstract class provides the base structure of a CBR application for
 * Learning Management Systems.
 * <p>
 * Note: itÂ´s necessary to implement the static method getInstance if you
 * pretend to evaluate the inheriting recommender. Furthermore there should be
 * filled the LMSEvaluationReport to collect the necessary data for the
 * evaluation.
 * 
 * Defines the method of an standard CBR application. It is composed by:
 * <ul>
 * <li>A configuration method to set up the application.
 * <li>A preCycle that loads cases and prepares the application to run.
 * <li>The cycle method that runs a CBR step using the given query.
 * <li>A postCycle in charge of finishing the application.
 * </ul>
 * 
 * @author <a href=""mailto:mueller_pettenpohl@me.com"">Tell
 *         Mueller-Pettenpohl</a>
 * 
 * @version 1.0
 */","
 * @author <NAME>
 * @version 1.0
 * @since 1.0
 */"
"<fim_prefix>package com.orange.signsatwork.biz.persistence.service;

/*<fim_suffix>

public interface MessageByLocaleService {
    String getMessage(String id);
    String getMessage(String id, Object[] args);
}
<fim_middle>","
 * #%L
 * Signs at work
 * %%
 * Copyright (C) 2016 Orange
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-2.0.html>.
 * #L%
 */","*
 * 国际化消息服务
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package thedarkcolour.exdeorum.compat.jei;

import com.mojang.blaze3d.platform.InputConstants;
import mezz.jei.api.constants.VanillaTypes;
import mezz.jei.api.gui.builder.IRecipeLayoutBuilder;
import mezz.jei.api.gui.drawable.IDrawable;
import mezz.jei.api.gui.ingredient.IRecipeSlotsView;
import mezz.jei.api.helpers.IJeiHelpers;
import mezz.jei.api.recipe.IFocusFactory;
import mezz.j<fim_middle>","
 * Ex Deorum
 * Copyright (c) 2024 thedarkcolour
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by TheDarkColour on 1/4/2019.
 */"
"<fim_prefix>/*<fim_suffix>
 
package ru.windcorp.progressia.common.comms;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import ru.windcorp.progressia.common.comms.packets.Packet;

public abstract class CommsChannel {

	public static enum State {
		/**
		 * Client is currently establishing connection.
		 */
		CONNECTING<fim_middle>","
 * Progressia
 * Copyright (C)  2020-2021  Wind Corporation and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
	 * Sends a packet to the server.
	 * 
	 * @param packet
	 * @throws IOException
	 */"
"<fim_prefix> with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
 
package ru.windcorp.progressia.common.comms;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import ru.windcorp.progressia.common.comms.packets.Packet;

public abstract class CommsChannel {

	public static enum State {
		/**<fim_suffix>
		CONNECTING,

		/**
		 * Client is ready to receive and send packets.
		 */
		CONNECTED,

		/**
		 * Client is being disconnected.
		 */
		DISCONNECTING,

		/**
		 * Communication is not possible. The client may have been disconnected
		 * after connecting or may have never connected.
		 */
		DISCONNECTED
	}

	private State state = State.CONNECTING;

	private final Collection<CommsLi<fim_middle>","
		 * Client is currently establishing connection.
		 */","
		 * Client is connecting to the server.
		"
"<fim_prefix>ge ru.windcorp.progressia.common.comms;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import ru.windcorp.progressia.common.comms.packets.Packet;

public abstract class CommsChannel {

	public static enum State {
		/**
		 * Client is currently establishing connection.
		 */
		CONNECTING,

		/**<fim_suffix>
		CONNECTED,

		/**
		 * Client is being disconnected.
		 */
		DISCONNECTING,

		/**
		 * Communication is not possible. The client may have been disconnected
		 * after connecting or may have never connected.
		 */
		DISCONNECTED
	}

	private State state = State.CONNECTING;

	private final Collection<CommsListener> listeners = Collections.synchronizedCollection(new ArrayList<>());
	
<fim_middle>","
		 * Client is ready to receive and send packets.
		 */","
		 * Client is connected.
		 */"
"<fim_prefix>l.Collections;
import java.util.List;

import ru.windcorp.progressia.common.comms.packets.Packet;

public abstract class CommsChannel {

	public static enum State {
		/**
		 * Client is currently establishing connection.
		 */
		CONNECTING,

		/**
		 * Client is ready to receive and send packets.
		 */
		CONNECTED,

		/**
		 * Client is being disconnected.
		 */
		DISCONNECTING,

		/**<fim_suffix>
		DISCONNECTED
	}

	private State state = State.CONNECTING;

	private final Collection<CommsListener> listeners = Collections.synchronizedCollection(new ArrayList<>());
	
	private final List<Packet> pendingPackets = Collections.synchronizedList(new ArrayList<>());

	protected abstract void doSendPacket(Packet packet) throws IOException;

	private synchronized void sendPacket(
		Packet<fim_middle>","
		 * Communication is not possible. The client may have been disconnected
		 * after connecting or may have never connected.
		 */","
		 * Client is disconnected.
		 */"
"<fim_prefix>java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import ru.windcorp.progressia.common.comms.packets.Packet;

public abstract class CommsChannel {

	public static enum State {
		/**
		 * Client is currently establishing connection.
		 */
		CONNECTING,

		/**
		 * Client is ready to receive and send packets.
		 */
		CONNECTED,

		/**<fim_suffix>
		DISCONNECTING,

		/**
		 * Communication is not possible. The client may have been disconnected
		 * after connecting or may have never connected.
		 */
		DISCONNECTED
	}

	private State state = State.CONNECTING;

	private final Collection<CommsListener> listeners = Collections.synchronizedCollection(new ArrayList<>());
	
	private final List<Packet> pendingPackets = Collections.sync<fim_middle>","
		 * Client is being disconnected.
		 */","
		 * Client is currently disconnecting.
		"
"<fim_prefix>/*<fim_suffix>

package org.objectweb.jac.aspects.user;

import gnu.regexp.RE;
import gnu.regexp.REException;
import org.objectweb.jac.core.ACManager;
import org.objectweb.jac.core.rtti.MemberItem;
import org.objectweb.jac.core.rtti.MetaItem;
import org.objectweb.jac.util.Log;
import org.objectweb.jac.core.rtti.AbstractMethodItem;

/**
 * Rules for profiles : allow/deny reading, allow/deny writing, <fim_middle>","
  Copyright (C) 2002 Laurent Martelli <laurent@aopsys.com>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */","*
 * @author <NAME>
 */"
"<fim_prefix>ession() {
        return resourceExpression;
    }

    /**
     * Returns a regular expression object for the resource expression.
     */
    protected RE getRegexp() {
        if (regexp==null) 
            try { 
                regexp = new RE(resourceExpression==null?"""":resourceExpression);
            } catch (REException e) {
            }
        return regexp;
    }

    /**<fim_suffix>
    public boolean match(MetaItem item) {
        String resourceDescr;
        if (item instanceof AbstractMethodItem) {         
            AbstractMethodItem method = (AbstractMethodItem)item;
            resourceDescr = method.getParent().getName()+
                "".""+method.getFullName();
        } else if (item instanceof MemberItem) {         
            resourceDescr = ((Me<fim_middle>","
     * Tells if a <code>MetaItem</code> matches the rule.
     *
     * @param item the MetaItem
     */","
     * Returns a regular expression object for the resource expression.
     */"
"<fim_prefix>ectweb.jac.util.Log;
import org.objectweb.jac.core.rtti.AbstractMethodItem;

/**
 * Rules for profiles : allow/deny reading, allow/deny writing, etc ...
 *
 * @see Profile
 * @see UserAC
 */

public class Rule {
    public static final boolean ALLOW = true;
    public static final boolean DENY = false;

    boolean allow;
    String resourceExpression;
    transient RE regexp;

    /**<fim_suffix>
    public Rule(boolean allow, String resourceExpression) {
        this.allow = allow;
        this.resourceExpression = resourceExpression;
        try {
            this.regexp = new RE(resourceExpression);
        } catch (REException e) {
            throw new RuntimeException(""Caught regular expression exception: ""+e);
        }
    }

    /**
     * Get rule mode (allow or deny<fim_middle>","
     * @param allow if <code>true</code> : allowing rule, if
     * <code>false</code> : denying rule
     * @param resourceExpression regular expression indicating which
     * fields or methods this rule aplies to.
     */","
     * Constructor.
     * @param allow true if rule is allowed, false if rule is denied
     * @param resourceExpression regular expression to match resource name"
"<fim_prefix>allow or deny).
     *
     * @return the rule's mode.
     */
    public boolean getAllow() {
        return allow;
    }

    /**
     * Set rule mode (allow or deny).
     *
     * @param allow mode (<code>true</code> for allow,
     * <code>false</code> for deny).
     */
    public void setAllow(boolean allow) {
        this.allow = allow;
        invalidateCache();
    }

    /**<fim_suffix>
    public void setResourceExpression(String resourceExpression) {
        this.resourceExpression = resourceExpression;
        invalidateCache();
    }

    public String getResourceExpression() {
        return resourceExpression;
    }

    /**
     * Returns a regular expression object for the resource expression.
     */
    protected RE getRegexp() {
        if (regexp==null) 
<fim_middle>","
     * Set regular expression indicating which fields to apply rule for.
     *
     * @param resourceExpression the regular expression.
     */","
     * Set rule mode (allow or deny).
     *
     * @param allow mode (<code>true</code> for allow,
  "
"<fim_prefix>* Set regular expression indicating which fields to apply rule for.
     *
     * @param resourceExpression the regular expression.
     */
    public void setResourceExpression(String resourceExpression) {
        this.resourceExpression = resourceExpression;
        invalidateCache();
    }

    public String getResourceExpression() {
        return resourceExpression;
    }

    /**<fim_suffix>
    protected RE getRegexp() {
        if (regexp==null) 
            try { 
                regexp = new RE(resourceExpression==null?"""":resourceExpression);
            } catch (REException e) {
            }
        return regexp;
    }

    /**
     * Tells if a <code>MetaItem</code> matches the rule.
     *
     * @param item the MetaItem
     */
    public boolean match(MetaItem <fim_middle>","
     * Returns a regular expression object for the resource expression.
     */","
     * Set regular expression indicating which fields to apply rule for.
    "
"<fim_prefix>!result && (item instanceof AbstractMethodItem)) {
            resourceDescr = ((MemberItem)item).getParent().getName()+
                "".""+item.getName();
            result = getRegexp().isMatch(resourceDescr);
        }
        Log.trace(""profile.rule"",resourceExpression+
                  (result?"" matches "":"" does not match "")+resourceDescr);
        return result;
    }

    /**<fim_suffix>
    protected void invalidateCache() {
        UserAC ac = (UserAC)ACManager.getACM().getAC(""user"");
        if (ac!=null)
            ac.invalidateCache();
    }
}
<fim_middle>","
     * Invalidates the UserAC.controlAttribute's cache.
     *
     * <p>It merely calls invalidateCache() on UserAC.</p>
     *
     * @see UserAC#controlAttribute(Object,MetaItem,String,Object)
     * @see UserAC#invalidateCache()
     */","
     * Invalidates the cache of the user access control manager.
     */"
"<fim_prefix>on = resourceExpression;
        try {
            this.regexp = new RE(resourceExpression);
        } catch (REException e) {
            throw new RuntimeException(""Caught regular expression exception: ""+e);
        }
    }

    /**
     * Get rule mode (allow or deny).
     *
     * @return the rule's mode.
     */
    public boolean getAllow() {
        return allow;
    }

    /**<fim_suffix>
    public void setAllow(boolean allow) {
        this.allow = allow;
        invalidateCache();
    }

    /**
     * Set regular expression indicating which fields to apply rule for.
     *
     * @param resourceExpression the regular expression.
     */
    public void setResourceExpression(String resourceExpression) {
        this.resourceExpression = resourceExpression;
        i<fim_middle>","
     * Set rule mode (allow or deny).
     *
     * @param allow mode (<code>true</code> for allow,
     * <code>false</code> for deny).
     */","
     * Set rule mode (allow or deny).
     *
     * @param allow the rule's mode.
     */"
"<fim_prefix>methods this rule aplies to.
     */
    public Rule(boolean allow, String resourceExpression) {
        this.allow = allow;
        this.resourceExpression = resourceExpression;
        try {
            this.regexp = new RE(resourceExpression);
        } catch (REException e) {
            throw new RuntimeException(""Caught regular expression exception: ""+e);
        }
    }

    /**<fim_suffix>
    public boolean getAllow() {
        return allow;
    }

    /**
     * Set rule mode (allow or deny).
     *
     * @param allow mode (<code>true</code> for allow,
     * <code>false</code> for deny).
     */
    public void setAllow(boolean allow) {
        this.allow = allow;
        invalidateCache();
    }

    /**
     * Set regular expression indicating which fields to appl<fim_middle>","
     * Get rule mode (allow or deny).
     *
     * @return the rule's mode.
     */","
     * Get rule mode (allow or deny).
     *
     * @return mode (<code>true</code> for allow,"
"<fim_prefix>n, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA */

package org.objectweb.jac.aspects.user;

import gnu.regexp.RE;
import gnu.regexp.REException;
import org.objectweb.jac.core.ACManager;
import org.objectweb.jac.core.rtti.MemberItem;
import org.objectweb.jac.core.rtti.MetaItem;
import org.objectweb.jac.util.Log;
import org.objectweb.jac.core.rtti.AbstractMethodItem;

/**<fim_suffix>

public class Rule {
    public static final boolean ALLOW = true;
    public static final boolean DENY = false;

    boolean allow;
    String resourceExpression;
    transient RE regexp;

    /**
     * @param allow if <code>true</code> : allowing rule, if
     * <code>false</code> : denying rule
     * @param resourceExpression regular expression indicating which
     * fields or m<fim_middle>","
 * Rules for profiles : allow/deny reading, allow/deny writing, etc...
 *
 * @see Profile
 * @see UserAC
 */","
 * @author <NAME>
 * @version $Id: Rule.java,v 1.1 2005/10/05 22:14:00 ts"
"<fim_prefix>/*<fim_suffix>

package com.logistimo.services.datastore;

import java.util.List;

/**
 * Created by charan on 29/09/14.
 */
public class EntityMetadata {

  public List<String> columns;

  public String preparedStatement;

  public EntityMetadata(List<String> columns, String preparedStatement) {
    this.columns = columns;
    this.preparedStatement = preparedStatement;
  }

  public List<String> g<fim_middle>","
 * Copyright Â© 2017 Logistimo.
 *
 * This file is part of Logistimo.
 *
 * Logistimo software is a mobile & web platform for supply chain management and remote temperature monitoring in
 * low-resource settings, made available under the terms of the GNU Affero General Public License (AGPL).
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General
 * Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * You can be released from the requirements of the license by purchasing a commercial license. To know more about
 * the commercial license, please contact us at opensource@logistimo.com
 */","*
 * Created by charan on 29/09/14.
 */"
"<fim_prefix> a copy of the GNU Affero General Public License along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * You can be released from the requirements of the license by purchasing a commercial license. To know more about
 * the commercial license, please contact us at opensource@logistimo.com
 */

package com.logistimo.services.datastore;

import java.util.List;

/**<fim_suffix>
public class EntityMetadata {

  public List<String> columns;

  public String preparedStatement;

  public EntityMetadata(List<String> columns, String preparedStatement) {
    this.columns = columns;
    this.preparedStatement = preparedStatement;
  }

  public List<String> getColumns() {
    return columns;
  }

  public void setColumns(List<String> columns) {
    this.columns = col<fim_middle>","
 * Created by charan on 29/09/14.
 */","
 * @author <NAME>
 * @since 1.0."
"<fim_prefix>PI key of the organisation to which the roles belong to. 
	 * @return A {@link List} of {@link Role}s which are associated with the passed 
	 * 			API key.
	 */
	public List<Role> getRoles(String apiKey) {
		Query query = em.createQuery(""select r from Role r where r.belongsTo.apiKey=:apiKey"", Role.class);
		query.setParameter(""apiKey"", apiKey);

		return query.getResultList();
	}

	/**<fim_suffix>
	public Role getRole(int id, String apiKey) {
		Query query = em.createQuery(""select r from Role r where r.belongsTo.apiKey=:apiKey and r.id = :id"", Role.class);
		List list = QueryUtils.configureQuery(query, id, apiKey);
		if (list.isEmpty()) {
			return null;
		}
		return ((Role) list.get(0));
	}

	/**
	 * Gets all roles with the passed ids which match the also passed API key.
	 * 
<fim_middle>","
	 * Gets a role by its id and API key.
	 * 
	 * @param id
	 * 			The id of the requested role.
	 * @param apiKey
	 * 			The API key of the organisation to which the role belongs to. 
	 * @return The {@link Role} which is associated with the passed id and API key.
	 */","
	 * Gets a {@link Role} with the passed id which matches the also passed API key.
	 * 
	 * @param id The id of the {@link Role} to get.
	 * @param apiKey The API key of the organisation to which the roles belong to. 
	 * @return A {@link Role} which is associated with the passed API key and id.
"
"<fim_prefix> {@link List} of {@link Role}s which are associated with the passed 
	 * 			API key.
	 */
	public List<Role> getRoles(List<Integer> ids, String apiKey) {
		Query query = em.createQuery(""select r from Role r where r.belongsTo.apiKey=:apiKey and r.id in (:ids)"", Role.class);
		query.setParameter(""apiKey"", apiKey);
		query.setParameter(""ids"", ids);
		return query.getResultList();
	}

	/**<fim_suffix>
	public Role deleteRole(int roleId, String apiKey) {
		Role role = getRole(roleId, apiKey);

		if (role != null) {
			em.remove(role);
		}

		return role;
	}
}
<fim_middle>","
	 * Removes a role from the data base.
	 * 		 
	 * @param roleId
	 * 			The id of the role which should be deleted.
	 * @param apiKey
	 * 			The API key of the organisation to which the role belongs to. 
	 * @return The {@link Role} that is associated with the passed id and API key.
	 */","
	 * Deletes a {@link Role} from the database.
	 * 
	 * @param roleId The ID of the {@link Role} to delete.
	 * @param apiKey The API key of the user who is deleting the {@link Role}.
	 * @return The deleted {@link Role}.
	 */"
"<fim_prefix> @return The {@link Role} which is associated with the passed id and API key.
	 */
	public Role getRole(int id, String apiKey) {
		Query query = em.createQuery(""select r from Role r where r.belongsTo.apiKey=:apiKey and r.id = :id"", Role.class);
		List list = QueryUtils.configureQuery(query, id, apiKey);
		if (list.isEmpty()) {
			return null;
		}
		return ((Role) list.get(0));
	}

	/**<fim_suffix>
	public List<Role> getRoles(List<Integer> ids, String apiKey) {
		Query query = em.createQuery(""select r from Role r where r.belongsTo.apiKey=:apiKey and r.id in (:ids)"", Role.class);
		query.setParameter(""apiKey"", apiKey);
		query.setParameter(""ids"", ids);
		return query.getResultList();
	}

	/**
	 * Removes a role from the data base.
	 * 		 
	 * @param roleId
	 * 			The id of the ro<fim_middle>","
	 * Gets all roles with the passed ids which match the also passed API key.
	 * 
	 * @param ids
	 *			 A comma separated list of role ids.
	 * @param apiKey
	 * 			The API key of the organisation to which the roles belong to. 
	 * @return A {@link List} of {@link Role}s which are associated with the passed 
	 * 			API key.
	 */","
	 * Returns a list of roles which are associated with the passed ids and API key.
	 * 
	 * @param ids
	 * 			The ids of the roles which should be returned.
	 * @param apiKey
	 * 			The API key of the user which should be used to filter the roles.
	 * @return A list of {@link Role}s which are associated with the passed ids and API key.
	 */"
"<fim_prefix>uery;

@Named
@Stateless
public class RoleDAO {

	@PersistenceContext(unitName = PersistenceUnit.PROJECT)
	private EntityManager em;

	/**
	 * Stores a new role in the data base.
	 * 
	 * @param role
	 * 			The role which should be stored in the data base.
	 * @return The generated id of the role. 
	 */
	public int insert(Role role) {
		em.persist(role);
		return role.getId();
	}

	/**<fim_suffix>
	public List<Role> getRoles(String apiKey) {
		Query query = em.createQuery(""select r from Role r where r.belongsTo.apiKey=:apiKey"", Role.class);
		query.setParameter(""apiKey"", apiKey);

		return query.getResultList();
	}

	/**
	 * Gets a role by its id and API key.
	 * 
	 * @param id
	 * 			The id of the requested role.
	 * @param apiKey
	 * 			The API key of the organisation to whic<fim_middle>","
	 * Gets all roles which are associated with the passed API key.
	 * 
	 * @param apiKey
	 * 			The API key of the organisation to which the roles belong to. 
	 * @return A {@link List} of {@link Role}s which are associated with the passed 
	 * 			API key.
	 */","
	 * Gets all roles for a given API key.
	 * 
	 * @param apiKey
	 * 			The API key of the organisation to whiches the roles should be
	 * 			retrieved.
	 * @return A list of all roles for the given API key.
	 */"
"<fim_prefix> info.interactivesystems.gamificationengine.entities.Role;

import java.util.List;

import javax.ejb.Stateless;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

@Named
@Stateless
public class RoleDAO {

	@PersistenceContext(unitName = PersistenceUnit.PROJECT)
	private EntityManager em;

	/**<fim_suffix>
	public int insert(Role role) {
		em.persist(role);
		return role.getId();
	}

	/**
	 * Gets all roles which are associated with the passed API key.
	 * 
	 * @param apiKey
	 * 			The API key of the organisation to which the roles belong to. 
	 * @return A {@link List} of {@link Role}s which are associated with the passed 
	 * 			API key.
	 */
	public List<Role> getRoles(String apiKey)<fim_middle>","
	 * Stores a new role in the data base.
	 * 
	 * @param role
	 * 			The role which should be stored in the data base.
	 * @return The generated id of the role. 
	 */","
	 * Inserts a new role into the database.
	 * 
	 * @param role
	 * 			The role to be inserted.
	 * @return The ID of the inserted role.
	 */"
"<fim_prefix>/*<fim_suffix>

package org.workcraft.testing.dom;

import java.util.LinkedList;

import org.junit.Test;
import org.workcraft.dependencymanager.advanced.core.GlobalCache;
import org.workcraft.dom.Node;
import org.workcraft.dom.visual.DependentNode;
import org.workcraft.exceptions.InvalidConnectionException;
import org.workcraft.plugins.petri.Place;
import org.workcraft.plugins.stg.HistoryPreservingS<fim_middle>","
*
* Copyright 2008,2009 Newcastle University
*
* This file is part of Workcraft.
* 
* Workcraft is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* Workcraft is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with Workcraft.  If not, see <http://www.gnu.org/licenses/>.
*
*/","*
 * Tests for {@link DependentNode}.
 *
 * @author <NAME>
 *
 */"
"<fim_prefix>nt, factory);
       init(factory);
    }

    private void init(ModelClassFactory factory) {
       try {
                                  this.add(ORL_O36_PATIENT.class, false, false, false);
       } catch(HL7Exception e) {
          log.error(""Unexpected error creating ORL_O36_RESPONSE - this is probably a bug in the source code generator."", e);
       }
    }

    /**<fim_suffix>
    public String getVersion() {
       return ""2.5.1"";
    }



    /**
     * Returns
     * PATIENT (a Group object) - creates it if necessary
     */
    public ORL_O36_PATIENT getPATIENT() { 
       ORL_O36_PATIENT retVal = getTyped(""PATIENT"", ORL_O36_PATIENT.class);
       return retVal;
    }




}

<fim_middle>"," 
     * Returns ""2.5.1""
     */","
     * Returns the version of the HL7 schema that this class implements
 "
"<fim_prefix>/*<fim_suffix>


package org.petermac.hl7.model.v251.group;

import org.petermac.hl7.model.v251.segment.*;

import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.parser.ModelClassFactory;
import ca.uhn.hl7v2.model.*;

/**
 * <p>Represents a ORL_O36_RESPONSE group structure (a Group object).
 * A Group is an ordered collection of message segments that can repeat together or be optionally<fim_middle>","
 * This class is an auto-generated source file for a HAPI
 * HL7 v2.x standard structure class.
 *
 * For more information, visit: http://hl7api.sourceforge.net/
 * 
 * The contents of this file are subject to the Mozilla Public License Version 1.1 
 * (the ""License""); you may not use this file except in compliance with the License. 
 * You may obtain a copy of the License at http://www.mozilla.org/MPL/ 
 * Software distributed under the License is distributed on an ""AS IS"" basis, 
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for the 
 * specific language governing rights and limitations under the License. 
 * 
 * The Original Code is ""[file_name]"".  Description: 
 * ""[one_line_description]"" 
 * 
 * The Initial Developer of the Original Code is University Health Network. Copyright (C) 
 * 2012.  All Rights Reserved. 
 * 
 * Contributor(s): ______________________________________. 
 * 
 * Alternatively, the contents of this file may be used under the terms of the 
 * GNU General Public License (the  ""GPL""), in which case the provisions of the GPL are 
 * applicable instead of those above.  If you wish to allow use of your version of this 
 * file only under the terms of the GPL and not to allow others to use your version 
 * of this file under the MPL, indicate your decision by deleting  the provisions above 
 * and replace  them with the notice and other provisions required by the GPL License.  
 * If you do not delete the provisions above, a recipient may use your version of 
 * this file under either the MPL or the GPL. 
 * 
 */","*
 * <p>Represents a ORL_O36_RESPONSE group structure (a Group object).
 * A Group is an ordered collection of message segments that can repeat together or be optionally grouped.
 * </p>
 */"
"<fim_prefix> A Group is an ordered collection of message segments that can repeat together or be optionally in/excluded together.
 * This Group contains the following elements:  
 * </p>
 * <ul>
                         * <li>1: ORL_O36_PATIENT (a Group object) <b>optional  </b></li>
 * </ul>
 */
//@SuppressWarnings(""unused"")
public class ORL_O36_RESPONSE extends AbstractGroup {

    /**<fim_suffix>
    public ORL_O36_RESPONSE(Group parent, ModelClassFactory factory) {
       super(parent, factory);
       init(factory);
    }

    private void init(ModelClassFactory factory) {
       try {
                                  this.add(ORL_O36_PATIENT.class, false, false, false);
       } catch(HL7Exception e) {
          log.error(""Unexpected error creating ORL_O36_RESPON<fim_middle>"," 
     * Creates a new ORL_O36_RESPONSE group
     */","
     * Constructs an ORL_O36_RESPONSE.
     */"
"<fim_prefix>                                 this.add(ORL_O36_PATIENT.class, false, false, false);
       } catch(HL7Exception e) {
          log.error(""Unexpected error creating ORL_O36_RESPONSE - this is probably a bug in the source code generator."", e);
       }
    }

    /** 
     * Returns ""2.5.1""
     */
    public String getVersion() {
       return ""2.5.1"";
    }



    /**<fim_suffix>
    public ORL_O36_PATIENT getPATIENT() { 
       ORL_O36_PATIENT retVal = getTyped(""PATIENT"", ORL_O36_PATIENT.class);
       return retVal;
    }




}

<fim_middle>","
     * Returns
     * PATIENT (a Group object) - creates it if necessary
     */"," 
     * Creates a ORL_O36_PATIENT
     */"
"<fim_prefix>quired by the GPL License.  
 * If you do not delete the provisions above, a recipient may use your version of 
 * this file under either the MPL or the GPL. 
 * 
 */


package org.petermac.hl7.model.v251.group;

import org.petermac.hl7.model.v251.segment.*;

import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.parser.ModelClassFactory;
import ca.uhn.hl7v2.model.*;

/**<fim_suffix>
//@SuppressWarnings(""unused"")
public class ORL_O36_RESPONSE extends AbstractGroup {

    /** 
     * Creates a new ORL_O36_RESPONSE group
     */
    public ORL_O36_RESPONSE(Group parent, ModelClassFactory factory) {
       super(parent, factory);
       init(factory);
    }

    private void init(ModelClassFactory factory) {
       try {
                                <fim_middle>","
 * <p>Represents a ORL_O36_RESPONSE group structure (a Group object).
 * A Group is an ordered collection of message segments that can repeat together or be optionally in/excluded together.
 * This Group contains the following elements:  
 * </p>
 * <ul>
                         * <li>1: ORL_O36_PATIENT (a Group object) <b>optional  </b></li>
 * </ul>
 */","
 * ORL_O36_RESPONSE.java
 * 
 * <p>A group of segments which together describe the response to an ORL_O36_REQUEST message.
 * 
 * <p>The following fields are defined in this group:
 * <ul>
 * <li>ORL_O36_RESPONSE.1 - ORL_O36_RESPONSE.1
 * <li>ORL_O36_RESPONSE.2 - ORL_O36_RESPONSE.2
 * <li>ORL_O36_RESPONSE.3 - OR"
"<fim_prefix>/*<fim_suffix>

package se.ams.dcatprocessor.converter;

import org.eclipse.rdf4j.model.vocabulary.*;
import org.json.simple.JSONObject;
import se.ams.dcatprocessor.models.*;
import se.ams.dcatprocessor.rdf.namespace.SCHEMA;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;


@SuppressWarnings(""OptionalUsedAsFieldOrParameterType"")
public class Con<fim_middle>","
 * This file is part of dcat-ap-se-processor.
 *
 * dcat-ap-se-processor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * dcat-ap-se-processor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with dcat-ap-se-processor.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 2017-04-11.
 */"
"<fim_prefix>

import org.eclipse.rdf4j.model.vocabulary.*;
import org.json.simple.JSONObject;
import se.ams.dcatprocessor.models.*;
import se.ams.dcatprocessor.rdf.namespace.SCHEMA;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;


@SuppressWarnings(""OptionalUsedAsFieldOrParameterType"")
public class ConverterDataSet extends Converter {

    /*<fim_suffix>
    @Override
    void processToDcat(JSONObject subConvert, JSONObject file, Optional<String> subCat, Optional<DataClass> preData, Optional<DataClass> preDist) throws Exception {
        DataSet dataSet = new DataSet();
        Distribution distribution = new Distribution();
        Organization organizationLocal = new Organization();
        DataClass dataClassLocal = new DataClass()<fim_middle>", Process the spec to find elements for dcat-ap-se and add them to an Object to return */,"*
     *
     * @param subConvert
     *"
"<fim_prefix>               if (subCat.get().equals(DCAT.DATASET.getLocalName())) {
                    createSubset(file, key.toString(), annotationName, Optional.of(dataSet), Optional.empty(), isMandatory);
                } else {
                    createSubset(file, key.toString(), annotationName, Optional.empty(), Optional.empty(), isMandatory);
                }
            }
            /*<fim_suffix>
            else {
                boolean hasLanguages = false;
                if (subCat.isPresent()) {
                    if (subCat.get().equals(DCAT.DATASET.getLocalName())) {
                        hasLanguages = loopLanguage(file, annotationName, subCat, Optional.of(dataSet), key.toString());
                    } else if (ConverterHelpClass.isNestedLanguageObjects(subCat.ge<fim_middle>", Checks for language strings to add them correctly */,"*
       "
"<fim_prefix>/*<fim_suffix>

package kr.syeyoung.dungeonsguide.launcher.auth.token;

import kr.syeyoung.dungeonsguide.launcher.auth.DgAuthUtil;
import org.json.JSONObject;

import java.time.Instant;

public class DGAuthToken implements AuthToken {
    private String token;
    private JSONObject parsed;

    public DGAuthToken(String token) {
        this.token = token;
        this.parsed = DgAuthUtil.getJwtPay<fim_middle>","
 * Dungeons Guide - The most intelligent Hypixel Skyblock Dungeons Mod
 * Copyright (C) 2022  cyoung06 (syeyoung)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by HunJin on 2017-01-05.
 */"
"<fim_prefix>/*<fim_suffix>

package cn.taketoday.framework.test.mock.mockito;

import org.junit.AfterClass;
import org.junit.Rule;
import org.junit.Test;

import cn.taketoday.test.annotation.Repeat;
import cn.taketoday.test.context.junit4.rules.InfraMethodRule;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Tests for {@link MockBean} and {@link Repeat}.
 *
 * @author Andy Wilkinson
 * @see <<fim_middle>","
 * Original Author -> Harry Yang (taketoday@foxmail.com) https://taketoday.cn
 * Copyright Â© TODAY & 2017 - 2022 All Rights Reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/]
 */","*
 * Tests for {@link MockBean} and {@link Repeat}.
 *
 * @author Andy Wilkinson
 * @see <a href=""mailto:andy@taketoday.cn"">andy@taketoday.cn</a>
 */"
"<fim_prefix>ublic License
 * along with this program.  If not, see [http://www.gnu.org/licenses/]
 */

package cn.taketoday.framework.test.mock.mockito;

import org.junit.AfterClass;
import org.junit.Rule;
import org.junit.Test;

import cn.taketoday.test.annotation.Repeat;
import cn.taketoday.test.context.junit4.rules.InfraMethodRule;

import static org.assertj.core.api.Assertions.assertThat;

/**<fim_suffix>
public class MockBeanWithInfraMethodRuleRepeatJUnit4IntegrationTests {

  @Rule
  public final InfraMethodRule InfraMethodRule = new InfraMethodRule();

  @MockBean
  private FirstService first;

  private static int invocations;

  @AfterClass
  public static void afterClass() {
    assertThat(invocations).isEqualTo(2);
  }

  @Test
  @Repeat(2)
  public void repeatedTest() {
    inv<fim_middle>","
 * Tests for {@link MockBean} and {@link Repeat}.
 *
 * @author Andy Wilkinson
 * @see <a href=""https://github.com/spring-projects/spring-boot/issues/27693"">gh-27693</a>
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.epam.wilma.webapp.config.servlet.stub.upload;

/*<fim_suffix>

import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.fileupload.FileItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * Class for parsing multipart files and sending them to processing mechanism.
 * @author Tamas_Bihari<fim_middle>","==========================================================================
Copyright since 2013, EPAM Systems

This file is part of Wilma.

Wilma is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Wilma is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Wilma.  If not, see <http://www.gnu.org/licenses/>.
===========================================================================*/","*
 * The class for parsing multipart files and sending them to processing mechanism.
 * @author Tamas_Bihari
 *
 */"
"<fim_prefix>eProcessor multiPartFileProcessor;

    /**
     * Creates a new {@link MultiPartFileParser} instance with parameter.
     * @param multiPartFileProcessor processes the parsed multipart files
     */
    @Autowired
    public MultiPartFileParser(final MultiPartFileProcessor multiPartFileProcessor) {
        this.multiPartFileProcessor = multiPartFileProcessor;
    }

    /**<fim_suffix>
    public String parseMultiPartFiles(final List<FileItem> fields) throws IOException {
        StringBuilder msg = new StringBuilder();
        Iterator<FileItem> it = fields.iterator();
        if (!fields.isEmpty() && it.hasNext()) {
            while (it.hasNext()) {
                FileItem fileItem = it.next();
                if (!fileItem.isFormField()) {
             <fim_middle>","
     * Parses a list of multipart files and sends them to {@link MultiPartFileProcessor}.
     * @param fields a list of multipart files that will be processed
     * @return with the processing status message or ""No file uploaded"" when the list is empty
     * @throws IOException was thrown file parsing failed
     */","
     * Parses the multipart files.
     * @param fields the fields
     * @return the string
     * @throws IOException Signals that an I/O exception has occurred.
     */"
"<fim_prefix>mmons.fileupload.FileItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * Class for parsing multipart files and sending them to processing mechanism.
 * @author Tamas_Bihari
 *
 */
@Component
public class MultiPartFileParser {

    private final MultiPartFileProcessor multiPartFileProcessor;

    /**<fim_suffix>
    @Autowired
    public MultiPartFileParser(final MultiPartFileProcessor multiPartFileProcessor) {
        this.multiPartFileProcessor = multiPartFileProcessor;
    }

    /**
     * Parses a list of multipart files and sends them to {@link MultiPartFileProcessor}.
     * @param fields a list of multipart files that will be processed
     * @return with the processing statu<fim_middle>","
     * Creates a new {@link MultiPartFileParser} instance with parameter.
     * @param multiPartFileProcessor processes the parsed multipart files
     */","
     * Constructor.
     * @param multiPartFileProcessor the processor that will process the files
     */"
"<fim_prefix>://www.gnu.org/licenses/>.
===========================================================================*/

import java.io.IOException;
import java.io.InputStream;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.fileupload.FileItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**<fim_suffix>
@Component
public class MultiPartFileParser {

    private final MultiPartFileProcessor multiPartFileProcessor;

    /**
     * Creates a new {@link MultiPartFileParser} instance with parameter.
     * @param multiPartFileProcessor processes the parsed multipart files
     */
    @Autowired
    public MultiPartFileParser(final MultiPartFileProcessor multiPartFileProcessor) <fim_middle>","
 * Class for parsing multipart files and sending them to processing mechanism.
 * @author Tamas_Bihari
 *
 */","
 * Parses the multipart files.
 * 
 * @author <NAME>
 */"
"<fim_prefix>package hr.fer.zemris.parallelmachinesimulator.pramprocessor;

import hr.fer.zemris.parallelmachinesimulator.exception.MemoryViolation;
import hr.fer.zemris.parallelmachinesimulator.exception.SyntaxException;
import hr.fer.zemris.parallelmachinesimulator.model.MemoryModel;

/**<fim_suffix>
public interface PRAMProcessor {
    public void assign(String line, int calculatedIndentation, PRAMProcessor parent) throws SyntaxException;

    public void execute() throws SyntaxException, MemoryViolation;

    public void push(PRAMProcessor pramProcessor, int calculatedIndentation, String line) throws SyntaxException;

    public int getIndentation();

    public MemoryModel getM<fim_middle>","
 * Created by antivo
 */","
 * Interface for PRAM processor."
"<fim_prefix>
package org.das2.graph;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import org.das2.components.propertyeditor.Enumeration;

/**<fim_suffix>
public enum LegendPosition implements Enumeration {
    NW, 
    NE, // corner of plot
    SW,
    SE,
    OutsideNE,
    OutsideSE;

    @Override
    public Icon getListIcon() {
        BufferedImage im= new BufferedImage(16,16,BufferedImage.TYPE_INT_RGB);
        Graphics2D g= im.createGraphics();
        g.setColor(Color.WHITE);
        g.fillRect(0,0,16,16);
        g.setColor(Co<fim_middle>","
 * enumeration of legend positions
 * @author jbf
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package tc.oc.pgm.regions;

import org.bukkit.util.Vector;

import javax.annotation.Nullable;

public class MirroredRegion extends TransformedRegion {
    // Reflection plane equation is: v Â· normal = offset
    private final @Inspect Vector normal; // unit normal
    private final @Inspect double offset; // parameter of the plane equation

    /**<fim_suffix>
    public MirroredRegion(Region region, Vector origin, Vector normal) {
        super(region);
        this.normal = new Vector(normal).normalize();
        this.offset = this.normal.dot(origin);
    }

    @Override
    protected Vector transform(Vector point) {
        // FYI, reflection is 2x the projection of the point on the normal
        final Vector reflection = new Vector(no<fim_middle>","
     * @param region The region that will be mirrored
     * @param origin A point on the reflection plane
     * @param normal The normal of the reflection plane
     */","
     * Creates a new mirrored region.
     *
     * @param region the region to mirror
     * @param origin the origin of the mirrored region
    "
"<fim_prefix>/*<fim_suffix>
package cz.cvut.kbss.termit.service.repository;

import cz.cvut.kbss.jopa.model.MultilingualString;
import cz.cvut.kbss.termit.dto.Snapshot;
import cz.cvut.kbss.termit.dto.TermInfo;
import cz.cvut.kbss.termit.dto.assignment.TermOccurrences;
import cz.cvut.kbss.termit.dto.listing.TermDto;
import cz.cvut.kbss.termit.exception.AssetRemovalException;
import cz.cvut.kbss.termit.exception.U<fim_middle>","
 * TermIt
 * Copyright (C) 2023 Czech Technical University in Prague
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix> part of the result. Optional
     * @return Matching root terms
     * @see #findAllRootsIncludingImported(Vocabulary, Pageable, Collection)
     */
    @Transactional(readOnly = true)
    public List<TermDto> findAllRoots(Pageable pageSpec,
                                      Collection<URI> includeTerms) {
        return termDao.findAllRoots(pageSpec, includeTerms);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermDto> findAllRootsIncludingImported(Vocabulary vocabulary, Pageable pageSpec,
                                                       Collection<URI> includeTerms) {
        return termDao.findAllRootsIncludingImports(vocabulary, pageSpec, includeTerms);
    }

    /**
     * Finds all terms which match the specified search string <fim_middle>","
     * Finds all root terms (terms without parent term) in the specified vocabulary or any of its imported
     * vocabularies.
     * <p>
     * Basically, this does a transitive closure over the vocabulary import relationship, starting at the specified
     * vocabulary, and returns all parent-less terms.
     * <p>
     * Terms with a label in the instance language are prepended.
     *
     * @param vocabulary   Base vocabulary for the vocabulary import closure
     * @param pageSpec     Page specifying result number and position
     * @param includeTerms Identifiers of terms which should be a part of the result. Optional
     * @return Matching root terms
     * @see #findAllRoots(Vocabulary, Pageable, Collection)
     */","
     * Finds all terms which match the specified search string.
     *  Added missing import  package org.openlmis.core.service;

import org.openlmis.core.domain.Vocabulary;
import org.openlmis.core.domain.Term;
import org.openlmis.core.repository.TermDao;
import org.openlmis.core.repository.mapper.TermMapper;
import org.openlmis.core.service.dto.TermDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.net.URI;
import java.util.Collection;
import java.util.List;

@Service
public class Term"
"<fim_prefix>aryService.getReference(vocabularyIri);
        instance.setGlossary(vocabulary.getGlossary().getUri());
        instance.addParentTerm(parentTerm);
        instance.splitExternalAndInternalParents();
        if (!instance.hasParentInSameVocabulary()) {
            addTermAsRootToGlossary(instance, vocabularyIri);
        }

        termDao.persist(instance, vocabulary);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermDto> findAll(Vocabulary vocabulary) {
        return termDao.findAll(vocabulary);
    }

    /**
     * Gets all terms from a vocabulary, regardless of their position in the term hierarchy.
     * <p>
     * This returns the full versions of all terms (complete metadata) contained in a vocabulary's glossary and thus its
     * pe<fim_middle>","
     * Gets all terms from a vocabulary, regardless of their position in the term hierarchy.
     * <p>
     * This returns all terms contained in a vocabulary's glossary.
     *
     * @param vocabulary Vocabulary whose terms should be returned. A reference is sufficient
     * @return List of term DTOs ordered by label
     * @see #findAllFull(Vocabulary)
     */","
     * Gets all terms from a vocabulary, regardless of their position in the term hierarchy.
     * <p>
     * This returns the full versions of all terms (complete metadata) contained in a vocabulary's glossary and thus its
     * pedigree.
     *  Fixing NPE in TermServiceImpl.findAll  package org.openlmis.core.service;

import org.openlmis.core.domain."
"<fim_prefix>s contained in a vocabulary's glossary.
     *
     * @param vocabulary Vocabulary whose terms should be returned. A reference is sufficient
     * @return List of term DTOs ordered by label
     * @see #findAllFull(Vocabulary)
     */
    @Transactional(readOnly = true)
    public List<TermDto> findAll(Vocabulary vocabulary) {
        return termDao.findAll(vocabulary);
    }

    /**<fim_suffix>
    public List<Term> findAllFull(Vocabulary vocabulary) {
        return termDao.findAllFull(vocabulary).stream().map(this::postLoad).collect(toList());
    }

    /**
     * Gets all terms from the specified vocabulary and its imports (transitive), regardless of their position in the
     * term hierarchy.
     * <p>
     * This returns all terms contained in the vocabulary glossari<fim_middle>","
     * Gets all terms from a vocabulary, regardless of their position in the term hierarchy.
     * <p>
     * This returns the full versions of all terms (complete metadata) contained in a vocabulary's glossary and thus its
     * performance may be worse. If complete metadata are not required, use {@link #findAll(Vocabulary)}.
     *
     * @param vocabulary Vocabulary whose terms should be returned
     * @return List of full terms ordered by label
     * @see #findAll(Vocabulary)
     */","
     * Gets all terms from the specified vocabulary and its imports (transitive), regardless of their position in the
     * term hierarchy.
     * <p>
     * This returns all terms contained in the vocabulary glossari.
     *  Fixing a bug in the findAllFull method  package org.tdar.core.service.resource;

import static java.util.stream.Collectors.toList;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.apache.commons.collections"
"<fim_prefix>ed search string in the specified vocabulary.
     *
     * @param searchString Search string
     * @param vocabulary   Vocabulary whose terms should be returned
     * @return Matching terms
     */
    @Transactional(readOnly = true)
    public List<TermDto> findAll(String searchString, Vocabulary vocabulary) {
        return termDao.findAll(searchString, vocabulary);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermDto> findAll(String searchString) {
        return termDao.findAll(searchString);
    }

    /**
     * Finds all terms which match the specified search string in the specified vocabulary and any vocabularies it
     * (transitively) imports.
     *
     * @param searchString Search string
     * @param vocabulary   Vocabulary wh<fim_middle>","
     * Gets all terms from a vocabulary, with label matching the searchString
     *
     * @param searchString String to search by
     * @return List of terms ordered by label
     */","
     * Finds all terms which match the specified search string in the specified vocabulary and any vocabularies it
     * (transitively) imports.
     *
     * @param searchString Search string
    "
"<fim_prefix>anguage to check the existence in, optional. If not specified, any language is accepted
     * @return Whether term with {@code label} already exists in vocabulary
     */
    @Transactional(readOnly = true)
    public boolean existsInVocabulary(String label, Vocabulary vocabulary, String language) {
        return termDao.existsInVocabulary(label, vocabulary, language);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public Optional<URI> findIdentifierByLabel(String label, Vocabulary vocabulary, String language) {
        return termDao.findIdentifierByLabel(label, vocabulary, language);
    }

    /**
     * Retrieves aggregated information about the specified Term's occurrences in Resources and other Terms
     * definitions.
     *
     * @param instance <fim_middle>","
     * Gets the identifier of a term with the specified label in a vocabulary with the specified URI.
     * <p>
     * Note that this method uses comparison ignoring case, so that two labels differing just in character case are
     * considered same here.
     *
     * @param label      Label to search by
     * @param vocabulary Vocabulary in which terms will be searched
     * @param language   Language tag of the label, optional. If not specified, any language is accepted
     * @return Identifier of matching term wrapped in an {@code Optional}, empty {@code Optional} if there is no such
     * term
     */","
     * Retrieves the identifier of the Term with the specified {@code label} in the specified {@code vocabulary}
     * in the specified {@code language}.
     *
     * @param label     The label of the Term to retrieve the identifier for
     * @param vocabulary The vocabulary to check the existence in, optional. If not specified, any vocabulary is accepted
     * @param language  The language to check the existence in, optional. If not specified, any language is accepted
     * @return The identifier of the Term with the specified {@code label} in the specified {@code vocabulary}
     * in the specified {@code language}
     */"
"<fim_prefix> language is accepted
     * @return Identifier of matching term wrapped in an {@code Optional}, empty {@code Optional} if there is no such
     * term
     */
    @Transactional(readOnly = true)
    public Optional<URI> findIdentifierByLabel(String label, Vocabulary vocabulary, String language) {
        return termDao.findIdentifierByLabel(label, vocabulary, language);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermOccurrences> getOccurrenceInfo(Term instance) {
        return termOccurrenceDao.getOccurrenceInfo(instance);
    }

    /**
     * Gets definitionally related terms of the specified term.
     *
     * @param instance Term to search from
     * @return List of definitionally related terms of the specified term
     */
    @Trans<fim_middle>","
     * Retrieves aggregated information about the specified Term's occurrences in Resources and other Terms
     * definitions.
     *
     * @param instance Term whose occurrence data should be retrieved
     * @return Aggregated Term occurrence data
     */","
     * Gets the occurrence information of the specified term.
     *
     * @param instance Term to search from
     * @return List of occurrence information of the specified term
     */"
"<fim_prefix>ecified Term's occurrences in Resources and other Terms
     * definitions.
     *
     * @param instance Term whose occurrence data should be retrieved
     * @return Aggregated Term occurrence data
     */
    @Transactional(readOnly = true)
    public List<TermOccurrences> getOccurrenceInfo(Term instance) {
        return termOccurrenceDao.getOccurrenceInfo(instance);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermOccurrence> getDefinitionallyRelatedTargeting(Term instance) {
        return termOccurrenceDao.findAllTargeting(instance);
    }

    /**
     * Gets definitionally related terms of the specified term.
     *
     * @param instance Term to search from
     * @return List of definitionally related terms of the specified term
    <fim_middle>","
     * Gets definitionally related terms of the specified term.
     *
     * @param instance Term to search from
     * @return List of definitionally related terms of the specified term
     */","
     * Gets definitionally related terms of the specified term.
     *
     * @param instance Term to search from
     * @return List of definitionally related terms of the specified term
     */"
"<fim_prefix> * This returns all terms contained in the vocabulary glossaries.
     *
     * @param vocabulary Base vocabulary for the vocabulary import closure
     * @return List of terms ordered by label
     */
    @Transactional(readOnly = true)
    public List<TermDto> findAllIncludingImported(Vocabulary vocabulary) {
        return termDao.findAllIncludingImported(vocabulary);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermDto> findAllRoots(Vocabulary vocabulary, Pageable pageSpec,
                                      Collection<URI> includeTerms) {
        return termDao.findAllRoots(vocabulary, pageSpec, includeTerms);
    }

    /**
     * Finds all root terms (terms without parent term).
     * <p>
     * Terms with a label in the instance lan<fim_middle>","
     * Finds all root terms (terms without parent term) in the specified vocabulary.
     * <p>
     * Terms with a label in the instance language are prepended.
     *
     * @param vocabulary   Vocabulary whose terms should be returned
     * @param pageSpec     Page specifying result number and position
     * @param includeTerms Identifiers of terms which should be a part of the result. Optional
     * @return Matching root terms
     * @see #findAllRootsIncludingImported(Vocabulary, Pageable, Collection)
     */","
     * This returns all terms contained in the vocabulary glossaries.
     *
     * @param vocabulary Base vocabulary for the vocabulary import closure
     * @return List of terms ordered by label
     */"
"<fim_prefix>  * @see #findAllRoots(Vocabulary, Pageable, Collection)
     */
    @Transactional(readOnly = true)
    public List<TermDto> findAllRootsIncludingImported(Vocabulary vocabulary, Pageable pageSpec,
                                                       Collection<URI> includeTerms) {
        return termDao.findAllRootsIncludingImports(vocabulary, pageSpec, includeTerms);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermDto> findAll(String searchString, Vocabulary vocabulary) {
        return termDao.findAll(searchString, vocabulary);
    }

    /**
     * Gets all terms from a vocabulary, with label matching the searchString
     *
     * @param searchString String to search by
     * @return List of terms ordered by label
     */
    @Transact<fim_middle>","
     * Finds all terms which match the specified search string in the specified vocabulary.
     *
     * @param searchString Search string
     * @param vocabulary   Vocabulary whose terms should be returned
     * @return Matching terms
     */","
     * Gets all terms from a vocabulary, with label matching the searchString
     *
     * @param searchString String to search by
     * @return List of terms ordered by label
     */"
"<fim_prefix>     * Gets definitionally related terms of the specified term.
     *
     * @param instance Term to search from
     * @return List of definitionally related terms of the specified term
     */
    @Transactional(readOnly = true)
    public List<TermOccurrence> getDefinitionallyRelatedOf(Term instance) {
        return termOccurrenceDao.findAllDefinitionalOf(instance);
    }

    /**<fim_suffix>
    @Override
    protected void preRemove(@Nonnull Term instance) {
        super.preRemove(instance);
        final List<TermOccurrences> ai = getOccurrenceInfo(instance);
        if (!ai.isEmpty()) {
            throw new AssetRemovalException(
                    ""Cannot delete the term. It is used for annotating resources: "" +
                            ai.stream().map(TermOccur<fim_middle>","
     * Checks that a term can be removed.
     * <p>
     * A term can be removed if:
     * <ul>
     *     <li>It does not have any children</li>
     *     <li>It does not occur in any resource and is not assigned to any resource</li>
     *     <li>Is not related to any other term via SKOS mapping properties</li>
     * </ul>
     *
     * @param instance The instance to be removed, not {@code null}
     * @throws AssetRemovalException If the specified term cannot be removed
     */","
     * Gets definitionally related terms of the specified term.
     *
     * @param instance Term to search from
     * @return List of definitionally related terms of the specified term
     */"
"<fim_prefix>ring.join("","", properties));
            }
        }
    }

    @Override
    protected void postRemove(@Nonnull Term instance) {
        super.postRemove(instance);
        if (!instance.hasParentInSameVocabulary()) {
            final Vocabulary v = vocabularyService.findRequired(instance.getVocabulary());
            v.getGlossary().removeRootTerm(instance);
        }
    }

    /**<fim_suffix>
    @Transactional
    public void forceRemove(@Nonnull Term instance) {
        super.preRemove(instance);
        termDao.remove(instance);
        postRemove(instance);
    }

    @Override
    public List<Snapshot> findSnapshots(Term asset) {
        return termDao.findSnapshots(asset);
    }

    @Override
    public Optional<Term> findVersionValidAt(Term asset, Instant at) {
   <fim_middle>","
     * Forcefully removes the specified term instance.
     * <p>
     * Extreme caution should be exercised when using this method as it does not perform any checks before removing the
     * specified instance.
     *
     * @param instance Term to remove
     */","
     * Removes the given term from the database.
     *
     * @param instance the term to remove
     */"
"<fim_prefix>   * Gets definitionally related terms of the specified term.
     *
     * @param instance Term to search from
     * @return List of definitionally related terms of the specified term
     */
    @Transactional(readOnly = true)
    public List<TermOccurrence> getDefinitionallyRelatedTargeting(Term instance) {
        return termOccurrenceDao.findAllTargeting(instance);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermOccurrence> getDefinitionallyRelatedOf(Term instance) {
        return termOccurrenceDao.findAllDefinitionalOf(instance);
    }

    /**
     * Checks that a term can be removed.
     * <p>
     * A term can be removed if:
     * <ul>
     *     <li>It does not have any children</li>
     *     <li>It does not occur in any resour<fim_middle>","
     * Gets definitionally related terms of the specified term.
     *
     * @param instance Term to search from
     * @return List of definitionally related terms of the specified term
     */","
     * Gets definitionally related terms of the specified term.
     *
     * @param instance Term to search from
     * @return List of definitionally related terms of the specified term
     */"
"<fim_prefix>a are not required, use {@link #findAll(Vocabulary)}.
     *
     * @param vocabulary Vocabulary whose terms should be returned
     * @return List of full terms ordered by label
     * @see #findAll(Vocabulary)
     */
    public List<Term> findAllFull(Vocabulary vocabulary) {
        return termDao.findAllFull(vocabulary).stream().map(this::postLoad).collect(toList());
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermDto> findAllIncludingImported(Vocabulary vocabulary) {
        return termDao.findAllIncludingImported(vocabulary);
    }

    /**
     * Finds all root terms (terms without parent term) in the specified vocabulary.
     * <p>
     * Terms with a label in the instance language are prepended.
     *
     * @param vocabulary   Voca<fim_middle>","
     * Gets all terms from the specified vocabulary and its imports (transitive), regardless of their position in the
     * term hierarchy.
     * <p>
     * This returns all terms contained in the vocabulary glossaries.
     *
     * @param vocabulary Base vocabulary for the vocabulary import closure
     * @return List of terms ordered by label
     */","
     * Finds all root terms (terms without parent term) in the specified vocabulary.
     * <p>
     * Terms with a label in the instance language are prepended.
     *
     * @param vocabulary   Vocabulairy whose terms should be returned  Added findAllIncludingImported method to TermService  package org.devgateway.toolkit.persistence.service.category;

import org"
"<fim_prefix>findAll(searchString, vocabulary);
    }

    /**
     * Gets all terms from a vocabulary, with label matching the searchString
     *
     * @param searchString String to search by
     * @return List of terms ordered by label
     */
    @Transactional(readOnly = true)
    public List<TermDto> findAll(String searchString) {
        return termDao.findAll(searchString);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermDto> findAllIncludingImported(String searchString, Vocabulary vocabulary) {
        return termDao.findAllIncludingImported(searchString, vocabulary);
    }

    /**
     * Checks whether a term with the specified label exists in a vocabulary with the specified URI.
     *
     * @param label      Label to check
     * @param voc<fim_middle>","
     * Finds all terms which match the specified search string in the specified vocabulary and any vocabularies it
     * (transitively) imports.
     *
     * @param searchString Search string
     * @param vocabulary   Vocabulary whose terms should be returned
     * @return Matching terms
     */","
     * Gets all terms from a vocabulary, with label matching the searchString
     *
     * @param searchString String to search by
     * @param vocabulary   Vocabulary to search in
     * @return List of terms ordered by label
     */"
"<fim_prefix>* @return Matching root terms
     * @see #findAllRootsIncludingImported(Vocabulary, Pageable, Collection)
     */
    @Transactional(readOnly = true)
    public List<TermDto> findAllRoots(Vocabulary vocabulary, Pageable pageSpec,
                                      Collection<URI> includeTerms) {
        return termDao.findAllRoots(vocabulary, pageSpec, includeTerms);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public List<TermDto> findAllRoots(Pageable pageSpec,
                                      Collection<URI> includeTerms) {
        return termDao.findAllRoots(pageSpec, includeTerms);
    }

    /**
     * Finds all root terms (terms without parent term) in the specified vocabulary or any of its imported
     * vocabularies.
     * <p>
     * Ba<fim_middle>","
     * Finds all root terms (terms without parent term).
     * <p>
     * Terms with a label in the instance language are prepended.
     *
     * @param pageSpec     Page specifying result number and position
     * @param includeTerms Identifiers of terms which should be a part of the result. Optional
     * @return Matching root terms
     * @see #findAllRootsIncludingImported(Vocabulary, Pageable, Collection)
     */","
     * Finds all root terms (terms without parent term) in the specified vocabulary or any of its imported
     * vocabularies.
     * <p>
     * Bakes in the given page specification.  Fix javadoc  package org.tdar.core.service.resource;

import java.net.URI;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org"
"<fim_prefix>y) imports.
     *
     * @param searchString Search string
     * @param vocabulary   Vocabulary whose terms should be returned
     * @return Matching terms
     */
    @Transactional(readOnly = true)
    public List<TermDto> findAllIncludingImported(String searchString, Vocabulary vocabulary) {
        return termDao.findAllIncludingImported(searchString, vocabulary);
    }

    /**<fim_suffix>
    @Transactional(readOnly = true)
    public boolean existsInVocabulary(String label, Vocabulary vocabulary, String language) {
        return termDao.existsInVocabulary(label, vocabulary, language);
    }

    /**
     * Gets the identifier of a term with the specified label in a vocabulary with the specified URI.
     * <p>
     * Note that this method uses comparison ignoring cas<fim_middle>","
     * Checks whether a term with the specified label exists in a vocabulary with the specified URI.
     *
     * @param label      Label to check
     * @param vocabulary Vocabulary in which terms will be searched
     * @param language   Language to check the existence in, optional. If not specified, any language is accepted
     * @return Whether term with {@code label} already exists in vocabulary
     */","
     * Returns the number of terms in the specified vocabulary.
     *
     * @param vocabulary Vocabulary whose terms should be counted
     * @return Number of terms
     */"
"<fim_prefix>/*<fim_suffix>
package uk.me.parabola.mkgmap.reader.osm.xml;

import uk.me.parabola.log.Logger;
import uk.me.parabola.mkgmap.general.LevelInfo;
import uk.me.parabola.mkgmap.general.LoadableMapDataSource;
import uk.me.parabola.mkgmap.reader.MapperBasedMapDataSource;
import uk.me.parabola.mkgmap.reader.osm.Style;

/**
 * Base class for OSM map sources.  It exists so that more than
 * one version of th<fim_middle>","
 * Copyright (C) 2007 Steve Ratcliffe
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 2 as
 *  published by the Free Software Foundation.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 * 
 * Author: Steve Ratcliffe
 * Create date: 22-Sep-2007
 */","*
 * Created by parabola on 10/04/15.
 */"
"<fim_prefix>eader.osm.Style;

/**
 * Base class for OSM map sources.  It exists so that more than
 * one version of the api can be supported at a time.
 *
 * @author Steve Ratcliffe
 */
public abstract class OsmMapDataSource extends MapperBasedMapDataSource
		implements LoadableMapDataSource
{
	private static final Logger log = Logger.getLogger(OsmMapDataSource.class);

	private Style style;

	/**<fim_suffix>
	public LevelInfo[] mapLevels() {

		// First try command line, then style, then our default.
		String levelSpec = getConfig().getProperty(""levels"");
		log.debug(""levels"", levelSpec, "", "", ((levelSpec!=null)?levelSpec.length():""""));
		if (levelSpec == null || levelSpec.length() < 2) {
			if (style != null) {
				levelSpec = style.getOption(""levels"");
				log.debug(""getting levels from<fim_middle>","
	 * Get the maps levels to be used for the current map.  This can be
	 * specified in a number of ways in order:
	 * <ol>
	 * <li>On the command line with the --levels flag.
	 * The format is a comma (or space) separated list of level/resolution
	 * pairs.  Eg --levels=0:24,1:22,2:20
	 * If the flag is given without an argument then the command line override
	 * is turned off for maps following that option.
	 *
	 * <li>In the style options file.  This works just like the command line
	 * option, but it applies whenever the given style is used and not overriden
	 * on the command line.
	 *
	 * <li>A default setting.
	 * </ol>
	 *
	 * <p>I'd advise that new styles specify their own set of levels.
	 *
	 * @return An array of level information, basically a [level,resolution]
	 * pair.
	 */","
	 * @param config
	 */"
"<fim_prefix> for more details.
 * 
 * 
 * Author: Steve Ratcliffe
 * Create date: 22-Sep-2007
 */
package uk.me.parabola.mkgmap.reader.osm.xml;

import uk.me.parabola.log.Logger;
import uk.me.parabola.mkgmap.general.LevelInfo;
import uk.me.parabola.mkgmap.general.LoadableMapDataSource;
import uk.me.parabola.mkgmap.reader.MapperBasedMapDataSource;
import uk.me.parabola.mkgmap.reader.osm.Style;

/**<fim_suffix>
public abstract class OsmMapDataSource extends MapperBasedMapDataSource
		implements LoadableMapDataSource
{
	private static final Logger log = Logger.getLogger(OsmMapDataSource.class);

	private Style style;

	/**
	 * Get the maps levels to be used for the current map.  This can be
	 * specified in a number of ways in order:
	 * <ol>
	 * <li>On the command line with the --levels flag<fim_middle>","
 * Base class for OSM map sources.  It exists so that more than
 * one version of the api can be supported at a time.
 *
 * @author Steve Ratcliffe
 */","
 * Abstract class for OSM map data sources.
 * 
 * @author Steve Ratcliffe
 * @version $Id$
 * @since 1.0
 * 
 * @see uk."
"<fim_prefix>g.debug(""levels"", levelSpec, "", "", ((levelSpec!=null)?levelSpec.length():""""));
		if (levelSpec == null || levelSpec.length() < 2) {
			if (style != null) {
				levelSpec = style.getOption(""levels"");
				log.debug(""getting levels from style:"", levelSpec);
			}
		}

		if (levelSpec == null)
			levelSpec = LevelInfo.DEFAULT_LEVELS;

		return LevelInfo.createFromString(levelSpec);
	}

	/**<fim_suffix>
	public String[] copyrightMessages() {
		return new String[] {
				""OpenStreetMap.org contributors"",
				""See: http://wiki.openstreetmap.org/index.php/Attribution""
		};
	}

	protected void setStyle(Style style) {
		this.style = style;
	}
}
<fim_middle>","
	 * There are no copyright messages in the OSM files themselves.  So we
	 * include a fixed set of strings on the assumption that.osm files
	 * are probably going to have the OSM copyright statements.
	 *
	 * @return A list of copyright messages as a String array.
	 */","
	 * Returns the copyright messages.
	 * @return copyright messages
	 */"
"<fim_prefix>a_haskell_plugin.HaskellElementTypes.*;
import net.alexanderkiel.idea_haskell_plugin.parser.Rule;
import static net.alexanderkiel.idea_haskell_plugin.parser.basic.Qualified.*;
import static net.alexanderkiel.idea_haskell_plugin.parser.basic.Symbol.parseDotSym;
import static net.alexanderkiel.idea_haskell_plugin.parser.helper.Parsing.parse;
import org.jetbrains.annotations.NotNull;

/**<fim_suffix>
public class Identifier {

    public static boolean parseTypeVar(@NotNull PsiBuilder builder) {
        return parse(builder, TYPE_VAR, VAR_ID);
    }

    public static final Rule typeVar = new Rule() {
        public boolean apply(@NotNull PsiBuilder builder) {
            return parseTypeVar(builder);
        }
    };

    public static boolean parseTypeCon(@NotNull PsiBuilder bui<fim_middle>","
 * @author Alexander Kiel
 * @version $Id$
 */","
 * @author <NAME>
 */"
"<fim_prefix>// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: MPL-2.0

/*<fim_suffix>

package it.bz.opendatahub.alpinebits.validation.schema.common.inventory;

import it.bz.opendatahub.alpinebits.validation.ErrorMessage;
import it.bz.opendatahub.alpinebits.validation.Names;
import it.bz.opendatahub.alpinebits.validation.NullValidationException;
import it.bz.opendatahub.alpinebits.validation.SimpleValidationPath;
import it.bz.opendatahub.alpinebits.validation.Validatio<fim_middle>","
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */","*
 *
 * @author digital
 */"
"<fim_prefix>bz.opendatahub.alpinebits.validation.NullValidationException;
import it.bz.opendatahub.alpinebits.validation.SimpleValidationPath;
import it.bz.opendatahub.alpinebits.validation.ValidationException;
import it.bz.opendatahub.alpinebits.validation.ValidationPath;
import it.bz.opendatahub.alpinebits.xml.schema.ota.OTAHotelDescriptiveContentNotifRQ;
import org.testng.annotations.Test;

/**<fim_suffix>
public abstract class AbstractOTAHotelDescriptiveContentNotifRQValidatorTest {

    protected static final ValidationPath VALIDATION_PATH = SimpleValidationPath.fromPath(Names.OTA_HOTEL_DESCRIPTIVE_CONTENT_NOTIF_RQ);

    @Test
    public void testValidate_ShouldThrow_WhenOTAHotelDescriptiveContentNotifRQIsNull() {
        this.validateAndAssert(
                null,
                <fim_middle>","
 * Abstract tests for {@link OTAHotelDescriptiveContentNotifRQ} validator.
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package io.cocolabs.pz.zdoc.compile.test;

import org.jetbrains.annotations.TestOnly;

@TestOnly
@SuppressWarnings(""JavaLangClash"")
public class Integer {
}
<fim_middle>","
 * ZomboidDoc - Lua library compiler for Project Zomboid
 * Copyright (C) 2020-2021 Matthew Cain
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package com.annahid.libs.artenus.internal.core;

import com.annahid.libs.artenus.Artenus;
import com.annahid.libs.artenus.R;
import com.annahid.libs.artenus.core.Scene;
import com.annahid.libs.artenus.core.Stage;
import com.annahid.libs.artenus.core.StageManager;
import com.annahid.libs.artenus.graphics.sprites.ImageSprite;
import com.annahid.libs.artenus.graphics.TextureManager;

im<fim_middle>","
 *  This file is part of the Artenus 2D Framework.
 *  Copyright (C) 2015  Hessan Feghhi
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Foobar is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by anna on 3/25/2017.
 */"
"<fim_prefix>sents the splash screen that is displayed before the global loading screen. It splashes a
 * logo of the framework on the screen. It is recommended that you do not suppress this scene.
 *
 * @author Hessan Feghhi
 */
final class IntroScene extends Scene {
    /**
     * Indicates whether the intro scene has already been displayed.
     */
    static boolean introShown = false;

    /**<fim_suffix>
    private static WeakReference<Scene> instance = null;

    /**
     * Holds the white intensity of the screen (used for the logo animation).
     */
    private float whiteness = 0;

    /**
     * Used to avoid creating multiple instances of the game.
     */
    private boolean gameRun = false;

    /**
     * Holds the logo.
     */
    private ImageSprite annahid = null;

    /<fim_middle>","
     * Holds the singleton instance.
     */","
     * The instance of the intro scene.
   "
"<fim_prefix>ork on the screen. It is recommended that you do not suppress this scene.
 *
 * @author Hessan Feghhi
 */
final class IntroScene extends Scene {
    /**
     * Indicates whether the intro scene has already been displayed.
     */
    static boolean introShown = false;

    /**
     * Holds the singleton instance.
     */
    private static WeakReference<Scene> instance = null;

    /**<fim_suffix>
    private float whiteness = 0;

    /**
     * Used to avoid creating multiple instances of the game.
     */
    private boolean gameRun = false;

    /**
     * Holds the logo.
     */
    private ImageSprite annahid = null;

    /**
     * Indicates whether the intro should be displayed. The scene gracefully hands over to the
     * game without showing the intro if this value is<fim_middle>","
     * Holds the white intensity of the screen (used for the logo animation).
     */","
     * Holds the background.
     */"
"<fim_prefix>ites.ImageSprite;
import com.annahid.libs.artenus.graphics.TextureManager;

import java.lang.ref.WeakReference;

/**
 * Represents the splash screen that is displayed before the global loading screen. It splashes a
 * logo of the framework on the screen. It is recommended that you do not suppress this scene.
 *
 * @author Hessan Feghhi
 */
final class IntroScene extends Scene {
    /**<fim_suffix>
    static boolean introShown = false;

    /**
     * Holds the singleton instance.
     */
    private static WeakReference<Scene> instance = null;

    /**
     * Holds the white intensity of the screen (used for the logo animation).
     */
    private float whiteness = 0;

    /**
     * Used to avoid creating multiple instances of the game.
     */
    private boolean gameRun = <fim_middle>","
     * Indicates whether the intro scene has already been displayed.
     */","
     * The logo image sprite.
     */"
"<fim_prefix> extends Scene {
    /**
     * Indicates whether the intro scene has already been displayed.
     */
    static boolean introShown = false;

    /**
     * Holds the singleton instance.
     */
    private static WeakReference<Scene> instance = null;

    /**
     * Holds the white intensity of the screen (used for the logo animation).
     */
    private float whiteness = 0;

    /**<fim_suffix>
    private boolean gameRun = false;

    /**
     * Holds the logo.
     */
    private ImageSprite annahid = null;

    /**
     * Indicates whether the intro should be displayed. The scene gracefully hands over to the
     * game without showing the intro if this value is {@code false}.
     */
    private final boolean showIntro;

    /**
     * Holds the timestamp for when the in<fim_middle>","
     * Used to avoid creating multiple instances of the game.
     */","
     * Indicates whether the game is running."
"<fim_prefix>  private ImageSprite annahid = null;

    /**
     * Indicates whether the intro should be displayed. The scene gracefully hands over to the
     * game without showing the intro if this value is {@code false}.
     */
    private final boolean showIntro;

    /**
     * Holds the timestamp for when the intro scene started to display.
     */
    private final long startTime;

    /**<fim_suffix>
    private IntroScene(Stage parentStage) {
        super(parentStage);
        startTime = System.currentTimeMillis();
        showIntro = !Artenus.shouldHideIntro();
    }

    /**
     * Gets the singleton instance of the intro scene.
     *
     * @param stage Parent stage
     * @return The instance
     */
    public static Scene getInstance(Stage stage) {
        if (instance =<fim_middle>","
     * Prevents external instantiation.
     *
     * @param parentStage Parent stage
     */","
     * The singleton instance of the intro scene.
     */"
"<fim_prefix>s the timestamp for when the intro scene started to display.
     */
    private final long startTime;

    /**
     * Prevents external instantiation.
     *
     * @param parentStage Parent stage
     */
    private IntroScene(Stage parentStage) {
        super(parentStage);
        startTime = System.currentTimeMillis();
        showIntro = !Artenus.shouldHideIntro();
    }

    /**<fim_suffix>
    public static Scene getInstance(Stage stage) {
        if (instance == null || instance.get() == null || instance.get().getStage() != stage) {
            instance = new WeakReference<Scene>(new IntroScene(stage));
        }
        return instance.get();
    }

    @Override
    public final void advance(float elapsedTime) {
        super.advance(elapsedTime);
        final long <fim_middle>","
     * Gets the singleton instance of the intro scene.
     *
     * @param stage Parent stage
     * @return The instance
     */","
     * Returns the singleton instance of this scene.
     *
     * @return The singleton instance of this scene.
     */"
"<fim_prefix>        runGame(stage);
                } else {
                    final float scale = annahid.getScale().x + 0.075f * elapsedTime;
                    annahid.setScale(scale, scale);
                }
            }
        } else {
            runGame(stage);
        }
    }

    @Override
    public void onLocalLoad() {
        TextureManager.addLocal(R.raw.annahid);
    }

    /**<fim_suffix>
    private void runGame(Stage stage) {
        if (!gameRun) {
            remove(annahid);
            introShown = true;

            final StageManager manager = stage.getManager();

            if (manager == null) {
                throw new IllegalStateException(""No stage manager is specified."");
            }
            manager.onLoadStage(stage);
            ((StageImpl) sta<fim_middle>","
     * Requests to run the game after the splash screen, if it has not already run.
     *
     * @param stage Parent stage
     */","
     * Runs the game.
     *
     * @param stage the stage.
     */"
"<fim_prefix>lean introShown = false;

    /**
     * Holds the singleton instance.
     */
    private static WeakReference<Scene> instance = null;

    /**
     * Holds the white intensity of the screen (used for the logo animation).
     */
    private float whiteness = 0;

    /**
     * Used to avoid creating multiple instances of the game.
     */
    private boolean gameRun = false;

    /**<fim_suffix>
    private ImageSprite annahid = null;

    /**
     * Indicates whether the intro should be displayed. The scene gracefully hands over to the
     * game without showing the intro if this value is {@code false}.
     */
    private final boolean showIntro;

    /**
     * Holds the timestamp for when the intro scene started to display.
     */
    private final long startTime;

    <fim_middle>","
     * Holds the logo.
     */","
     * Holds the image sprite of the annahid."
"<fim_prefix>ernal.core;

import com.annahid.libs.artenus.Artenus;
import com.annahid.libs.artenus.R;
import com.annahid.libs.artenus.core.Scene;
import com.annahid.libs.artenus.core.Stage;
import com.annahid.libs.artenus.core.StageManager;
import com.annahid.libs.artenus.graphics.sprites.ImageSprite;
import com.annahid.libs.artenus.graphics.TextureManager;

import java.lang.ref.WeakReference;

/**<fim_suffix>
final class IntroScene extends Scene {
    /**
     * Indicates whether the intro scene has already been displayed.
     */
    static boolean introShown = false;

    /**
     * Holds the singleton instance.
     */
    private static WeakReference<Scene> instance = null;

    /**
     * Holds the white intensity of the screen (used for the logo animation).
     */
    private float <fim_middle>","
 * Represents the splash screen that is displayed before the global loading screen. It splashes a
 * logo of the framework on the screen. It is recommended that you do not suppress this scene.
 *
 * @author Hessan Feghhi
 */","
 * The intro scene.
 *
 * @author <NAME>
 */"
"<fim_prefix>   private static WeakReference<Scene> instance = null;

    /**
     * Holds the white intensity of the screen (used for the logo animation).
     */
    private float whiteness = 0;

    /**
     * Used to avoid creating multiple instances of the game.
     */
    private boolean gameRun = false;

    /**
     * Holds the logo.
     */
    private ImageSprite annahid = null;

    /**<fim_suffix>
    private final boolean showIntro;

    /**
     * Holds the timestamp for when the intro scene started to display.
     */
    private final long startTime;

    /**
     * Prevents external instantiation.
     *
     * @param parentStage Parent stage
     */
    private IntroScene(Stage parentStage) {
        super(parentStage);
        startTime = System.currentTimeMillis();
    <fim_middle>","
     * Indicates whether the intro should be displayed. The scene gracefully hands over to the
     * game without showing the intro if this value is {@code false}.
     */","
     * Holds the logo animation.
     */"
"<fim_prefix>ing multiple instances of the game.
     */
    private boolean gameRun = false;

    /**
     * Holds the logo.
     */
    private ImageSprite annahid = null;

    /**
     * Indicates whether the intro should be displayed. The scene gracefully hands over to the
     * game without showing the intro if this value is {@code false}.
     */
    private final boolean showIntro;

    /**<fim_suffix>
    private final long startTime;

    /**
     * Prevents external instantiation.
     *
     * @param parentStage Parent stage
     */
    private IntroScene(Stage parentStage) {
        super(parentStage);
        startTime = System.currentTimeMillis();
        showIntro = !Artenus.shouldHideIntro();
    }

    /**
     * Gets the singleton instance of the intro scene.
     *
     <fim_middle>","
     * Holds the timestamp for when the intro scene started to display.
     */","
     * The time when the intro started."
"<fim_prefix>/*<fim_suffix>
package io.github.retrooper.packetevents.utils.attributesnapshot;

import io.github.retrooper.packetevents.packetwrappers.NMSPacket;
import io.github.retrooper.packetevents.packetwrappers.WrappedPacket;
import io.github.retrooper.packetevents.utils.enums.EnumUtil;
import io.github.retrooper.packetevents.utils.nms.NMSUtils;
import io.github.retrooper.packetevents.utils.reflection.Refle<fim_middle>","
 * This file is part of packetevents - https://github.com/retrooper/packetevents
 * Copyright (C) 2022 retrooper and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */","*
 * @author Retrooper
 */"
"<fim_prefix>/*<fim_suffix>

package org.cafienne.cmmn.actorapi.event.plan.eventlistener;

import org.cafienne.cmmn.instance.TimerEvent;
import org.cafienne.infrastructure.serialization.Manifest;
import org.cafienne.json.ValueMap;

@Manifest
public class TimerTerminated extends TimerCleared {
    public TimerTerminated(TimerEvent timerEvent) {
        super(timerEvent);
    }

    public TimerTerminated(ValueMap<fim_middle>","
 * Copyright (C) 2014  Batav B.V.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>package de.uni_hannover.se.pdfzensor.config;

import org.apache.commons.lang3.EnumUtils;
import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.Nullable;

/**<fim_suffix>
public enum Mode {
	ALL, MARKED, UNMARKED;
	
	/**
	 * Converts a String into a Mode if it was valid.
	 *
	 * @param sMode The mode as a String.
	 * @return A mode with the same name as the given String or null if the String was invalid.
	 */
	@Nullable
	@Contract(pure = true)
	static Mode stringToMode(@Nullable final String sMode) {
		return EnumUtils.getEnumIgnoreCase(Mode.class, sMo<fim_middle>","
 * A mode specifying how the PDF-file should be censored. {@link #MARKED} to censor only segments marked beforehand with
 * a different software, {@link #UNMARKED} to censor everything but segments marked beforehand with a different software
 * or {@link #ALL} to censor everything regardless of whether or not it has been marked before.
 */","
 * The mode of the PDFZensor.
 * 
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix>A mode specifying how the PDF-file should be censored. {@link #MARKED} to censor only segments marked beforehand with
 * a different software, {@link #UNMARKED} to censor everything but segments marked beforehand with a different software
 * or {@link #ALL} to censor everything regardless of whether or not it has been marked before.
 */
public enum Mode {
	ALL, MARKED, UNMARKED;
	
	/**<fim_suffix>
	@Nullable
	@Contract(pure = true)
	static Mode stringToMode(@Nullable final String sMode) {
		return EnumUtils.getEnumIgnoreCase(Mode.class, sMode);
	}
}<fim_middle>","
	 * Converts a String into a Mode if it was valid.
	 *
	 * @param sMode The mode as a String.
	 * @return A mode with the same name as the given String or null if the String was invalid.
	 */","
	 * Converts a {@link Mode} to a string.
	 * 
	 * @param mode The mode to convert.
	 * @return The string representation of the mode.
	 */"
"<fim_prefix>/**<fim_suffix>
package sporemodder.file.bitmaps;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

import sporemodder.file.filestructures.FileStream;
import sporemodder.file.filestructures.FixedMemoryStream;
import sporemodder.file.filestructures.StreamReader;
import sporemodder.file.filestructures.StreamWriter;
import javafx.scene.image.Image;
import javafx.sc<fim_middle>","**************************************************************************
* Copyright (C) 2019 Eric Mor
*
* This file is part of SporeModder FX.
*
* SporeModder FX is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
****************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>port javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableCellRenderer;

import net.combase.desktopcrm.data.CrmManager;
import net.combase.desktopcrm.domain.Case;



public class CaseTablePanel extends JPanel
{
	/**
	 * 
	 */
	private static final long serialVersionUID = -6149463410211475900L;

	private JTable table;


	/**<fim_suffix>
	public CaseTablePanel()
	{
		setLayout(new BorderLayout(0, 0));

		final CaseTableModel model = new CaseTableModel(new ArrayList<Case>());

		table = new JTable(model);

		// enable button clicks
		table.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e)
			{
				int column = table.getColumnModel().getColumnIndexAtX(e.getX());
				int row = e<fim_middle>","
	 * Create the panel.
	 */","
	 * Create the panel.
	 */"
"<fim_prefix>/*<fim_suffix>
package com.smartitengineering.version.api.dao;

import com.smartitengineering.version.api.Commit;

/**
 * Its the main interface through which all CRUD opertation to the RCS will be
 * made. Service providers will mainly implement this and provide access to
 * users.
 * @author imyousuf
 */
public interface VersionControlWriteDao {

    /**
     * It will store the resources referred<fim_middle>","
 * This is a common dao with basic CRUD operations and is not limited to any 
 * persistent layer implementation
 * 
 * Copyright (C) 2008  Imran M Yousuf (imyousuf@smartitengineering.com)
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */","*
 * Its the main interface through which all CRUD opertation to the RCS will be
 * made. Service providers will mainly implement this and provide access to
 * users.
 * @author imyousuf
 */"
"<fim_prefix> the GNU
 * Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package com.smartitengineering.version.api.dao;

import com.smartitengineering.version.api.Commit;

/**<fim_suffix>
public interface VersionControlWriteDao {

    /**
     * It will store the resources referred in the 'commit' with other
     * informations provided.
     * @param commit Commit to store (create or update)
     * @param callback Callback handler for this write operation
     */
    public void store(final Commit commit,
                      final WriterCallback callback);
}
<fim_middle>","
 * Its the main interface through which all CRUD opertation to the RCS will be
 * made. Service providers will mainly implement this and provide access to
 * users.
 * @author imyousuf
 */","
 * Interface for writing operations on the Version Control system.
 *
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>Fifth Floor, Boston, MA  02110-1301  USA
 */
package com.smartitengineering.version.api.dao;

import com.smartitengineering.version.api.Commit;

/**
 * Its the main interface through which all CRUD opertation to the RCS will be
 * made. Service providers will mainly implement this and provide access to
 * users.
 * @author imyousuf
 */
public interface VersionControlWriteDao {

    /**<fim_suffix>
    public void store(final Commit commit,
                      final WriterCallback callback);
}
<fim_middle>","
     * It will store the resources referred in the 'commit' with other
     * informations provided.
     * @param commit Commit to store (create or update)
     * @param callback Callback handler for this write operation
     */","
     * Store the commit in the RCS.
     * @param commit
     * @param callback
     */"
"<fim_prefix>/**<fim_suffix>
package org.python.pydev.shared_ui.editor;

import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.graphics.Color;

public interface IVerticalIndentGuidePreferencesProvider {

    public boolean getShowIndentGuide();

    public int getTabWidth();

    public void dispose();

    public Color getColor(StyledText styledText);

    public int getTransparency(); //0-255
}
<fim_middle>","
 * Copyright (c) 2014 by Brainwy Software LTDA. All Rights Reserved.
 * Licensed under the terms of the Eclipse Public License (EPL).
 * Please see the license.txt included with this distribution for details.
 * Any modifications to this file must keep this entire header intact.
 */","
 * 
 * @author Fabio
 * 
 */"
"<fim_prefix>/*<fim_suffix>
/*
 * Created on 21 avr. 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package nacaLib.varEx;

/**
 * @author U930DI
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class NameManager
{	
<fim_middle>","
 * NacaRT - Naca RunTime for Java Transcoded Cobol programs.
 *
 * Copyright (c) 2005, 2006, 2007, 2008 Publicitas SA.
 * Licensed under LGPL (LGPL-LICENSE.txt) license.
 */","*
 * @author U930DI
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */"
"<fim_prefix>/*
 * NacaRT - Naca RunTime for Java Transcoded Cobol programs.
 *
 * Copyright (c) 2005, 2006, 2007, 2008 Publicitas SA.
 * Licensed under LGPL (LGPL-LICENSE.txt) license.
 */
/*
 * Created on 21 avr. 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package nacaLib.varEx;

/**<fim_suffix>
public class NameManager
{	
	static public String getUnprefixedName(String csName)
	{
		int nPosSep = csName.indexOf('.');
		if(nPosSep != -1)
			csName = csName.substring(nPosSep+1);
		
		nPosSep = csName.indexOf('$');
		if(nPosSep != -1)
			csName = csName.substring(0, nPosSep);		// 1st name that follows the dot (File$X.Y$Z$T -> returns Y)
		
		return csName;
	}
	
	s<fim_middle>","
 * @author U930DI
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*
 * NacaRT - Naca RunTime for Java Transcoded Cobol programs.
 *
 * Copyright (c) 2005, 2006, 2007, 2008 Publicitas SA.
 * Licensed under LGPL (LGPL-LICENSE.txt) license.
 */
/*<fim_suffix>
package nacaLib.varEx;

/**
 * @author U930DI
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class NameManager
{	
	static public String getUnprefixedName(String csName)
	{
		int nPosSep = csName.indexOf('.');
		if(nPosSep != -1)
			csName = csName.substring(nPosSep+1);
		
<fim_middle>","
 * Created on 21 avr. 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */","*
 * @author U930DI
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */"
"<fim_prefix>/*<fim_suffix>
package dev.galasa.framework.api.authentication.internal.routes;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.coreos.dex.api.DexOuterClass.Client;

import dev.galasa.framework.api.authentication.internal.DexClient;
import dev.galasa.framework.api.authenticat<fim_middle>","
 * Copyright contributors to the Galasa project
 *
 * SPDX-License-Identifier: EPL-2.0
 */","*
 * @author <NAME>
 */"
"<fim_prefix>i.common.ServletErrorMessage.*;

public class AuthClientsRoute extends BaseRoute {

    private DexGrpcClient dexGrpcClient;

    private static final String PATH_PATTERN = ""\\/clients\\/?"";

    public AuthClientsRoute(ResponseBuilder responseBuilder, DexGrpcClient dexGrpcClient) {
        super(responseBuilder, PATH_PATTERN);
        this.dexGrpcClient = dexGrpcClient;
    }

    /**<fim_suffix>
    @Override
    public HttpServletResponse handlePostRequest(String pathInfo, QueryParameters queryParameters,
            HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, FrameworkException {

        logger.info(""handlePostRequest() entered"");

        Client newDexClient = dexGrpcClient.createClient(AuthCallbackRoute.getExternalAuthC<fim_middle>","
     * Sending a POST request to /auth/clients creates a new Dex client and returns
     * the details of this new client.
     */","
     * Handles GET requests.
     *
     * @param pathInfo
     * @param queryParameters
     *"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.smarthome.magic.binding.internal.automation.modules;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.smarthome.automation.AnnotatedActions;
import org.eclipse.smarthome.automation.annotation.ActionInput;
import org.eclipse.smarthome.automation.annotation.ActionOutput;
import org.eclipse.smarthome.automation.annotation.ActionScope;
import org.ec<fim_middle>","
 * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>rt org.eclipse.smarthome.automation.annotation.RuleAction;
import org.eclipse.smarthome.config.core.ConfigurableService;
import org.osgi.framework.Constants;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Modified;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**<fim_suffix>
@Component(configurationPid = ""org.eclipse.smarthome.automation.action.magicSingleActionService"", property = {
        Constants.SERVICE_PID + ""=org.eclipse.smarthome.automation.action.magicSingleActionService"",
        ConfigurableService.SERVICE_PROPERTY_DESCRIPTION_URI + ""=automationAction:magicSingleAction"",
        ConfigurableService.SERVICE_PROPERTY_LABEL + ""=Magic Single Actio<fim_middle>","
 * {@link AnnotatedActions} for one action module with a configuration
 *
 * @author Stefan Triller - initial contribution
 *
 */","
 * A service that executes a single action.
 */"
"<fim_prefix>/*<fim_suffix>

package net.minecraft.client.gui.screen;

import java.util.List;

import com.mojang.blaze3d.matrix.MatrixStack;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;
import org.apache.logging.log4j.Logger;

import net.minecraft.client.gui.widget.button.Button;
import net.minecraft.client.multiplayer.ServerData;
import net.minecraft.client.mul<fim_middle>","
 * Minecraft Forge, Patchwork Project
 * Copyright (c) 2016-2020, 2019-2020
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation version 2.1
 * of the License.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */","*
 * @author <NAME>
 */"
"<fim_prefix>package ch.mitoco.model;

import java.util.ArrayList;
import java.util.List;

public class ModelFunctionList {
	private List<ModelSceneList> sceneliste;
	private String exportPath;
	
	public ModelFunctionList(){
		sceneliste = new ArrayList<ModelSceneList>();
		
	}

	/**<fim_suffix>
	public List<ModelSceneList> getSceneliste() {
		return sceneliste;
	}

	/**
	 * @param sceneliste the sceneliste to set
	 */
	public void setSceneliste(List<ModelSceneList> sceneliste) {
		this.sceneliste = sceneliste;
	}

	/**
	 * @param exportPath the exportPath to set
	 */
	public void setExportPath(String exportPath) {
		this.exportPath = exportPath;
	}

	/**
<fim_middle>","
	 * @return the sceneliste
	 */","
	 * @return the exportPath
	 */"
"<fim_prefix>toco.model;

import java.util.ArrayList;
import java.util.List;

public class ModelFunctionList {
	private List<ModelSceneList> sceneliste;
	private String exportPath;
	
	public ModelFunctionList(){
		sceneliste = new ArrayList<ModelSceneList>();
		
	}

	/**
	 * @return the sceneliste
	 */
	public List<ModelSceneList> getSceneliste() {
		return sceneliste;
	}

	/**<fim_suffix>
	public void setSceneliste(List<ModelSceneList> sceneliste) {
		this.sceneliste = sceneliste;
	}

	/**
	 * @param exportPath the exportPath to set
	 */
	public void setExportPath(String exportPath) {
		this.exportPath = exportPath;
	}

	/**
	 * @return the exportPath
	 */
	public String getExportPath() {
		return exportPath;
	}

}
<fim_middle>","
	 * @param sceneliste the sceneliste to set
	 */","
	 * @param sceneliste the sceneliste to set
	 */"
"<fim_prefix>ing exportPath;
	
	public ModelFunctionList(){
		sceneliste = new ArrayList<ModelSceneList>();
		
	}

	/**
	 * @return the sceneliste
	 */
	public List<ModelSceneList> getSceneliste() {
		return sceneliste;
	}

	/**
	 * @param sceneliste the sceneliste to set
	 */
	public void setSceneliste(List<ModelSceneList> sceneliste) {
		this.sceneliste = sceneliste;
	}

	/**<fim_suffix>
	public void setExportPath(String exportPath) {
		this.exportPath = exportPath;
	}

	/**
	 * @return the exportPath
	 */
	public String getExportPath() {
		return exportPath;
	}

}
<fim_middle>","
	 * @param exportPath the exportPath to set
	 */","
	 * @param sceneliste the sceneliste to add
	 */"
"<fim_prefix>/*<fim_suffix>

package com.uptosmth.chronos.infra.activity;

import static com.uptosmth.chronos.db.Tables.*;

import java.sql.Connection;
import java.sql.SQLException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Optional;
import java.util.UUID;

import javax.sql.DataSource;

import org.jooq.*;
import org.jooq.impl.DSL;

import com.uptosmth<fim_middle>","
 * Copyright (C) 2021 Viacheslav Tykhanovskyi
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * @author <NAME> (<EMAIL>)
 *
 */"
"<fim_prefix>/*<fim_suffix>
package io.inugami.core.alertings.senders.sse;

import io.inugami.api.alertings.AlertingResult;
import io.inugami.api.alertings.AlertsSender;
import io.inugami.api.alertings.AlertsSenderException;
import io.inugami.api.loggers.Loggers;
import io.inugami.api.models.data.basic.JsonObject;
import io.inugami.api.models.data.basic.JsonObjects;
import io.inugami.api.models.data.basic.String<fim_middle>"," --------------------------------------------------------------------
 *  Inugami
 * --------------------------------------------------------------------
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 12/12/2016.
 */"
"<fim_prefix>.inugami.api.models.events.SimpleEvent;
import io.inugami.api.providers.task.ProviderFutureResult;
import io.inugami.api.providers.task.ProviderFutureResultBuilder;
import io.inugami.api.tools.NamedComponent;
import io.inugami.core.services.sse.SseService;

import javax.enterprise.inject.Default;
import javax.inject.Named;
import java.util.List;
import java.util.stream.Collectors;

/**<fim_suffix>
@SuppressWarnings({""java:S2629""})
@Named
@Default
public class SseAlertSender implements AlertsSender, NamedComponent {

    // =========================================================================
    // ATTRIBUTES
    // =========================================================================
    private static final String ALERTS = ""alert"";

    private static final String ALE<fim_middle>","
 * SseAlertingSender
 *
 * @author patrickguillerm
 * @since 20 janv. 2018
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package com.volmit.iris.util.matter.slices;

import com.volmit.iris.util.data.Varint;
import com.volmit.iris.util.data.palette.Palette;
import com.volmit.iris.util.matter.Sliced;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;

@Sliced
public class IntMatter extends RawMatter<Integer> {
    public IntMatter() {
        this(1, 1, 1);
    <fim_middle>","
 * Iris is a World Generator for Minecraft Bukkit Servers
 * Copyright (c) 2022 Arcane Arts (Volmit Software)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","
 * Copyright (C) 2014 Volition, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>/*<fim_suffix>
package inetsoft.report.filter.style;

import inetsoft.report.TableLens;
import inetsoft.report.filter.GroupedTable;

import java.awt.*;

/**
 * DropTable style displays summary cells in drop-table cells.
 *
 * @version 5.1, 9/20/2003
 * @author InetSoft Technology Corp
 */
public class DropTable extends GroupStyle {
   /**
    * Create an empty style. The setTable() method must be ca<fim_middle>","
 * This file is part of StyleBI.
 * Copyright (C) 2024  InetSoft Technology
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * DropTable style displays summary cells in drop-table cells.
 *
 * @version 5.1, 9/20/2003
 * @author InetSoft Technology Corp
 */"
"<fim_prefix>* @param r row number.
       * @param c column number.
       * @return ruling flag.
       */
      @Override
      public int getRowBorder(int r, int c) {
         return (r < 0 ||
            gtable.isSummaryRow(r) &&
            (r == lastRow() || gtable.isSummaryRow(r + 1)) &&
            !gtable.isSummaryCol(c)) ?
            NO_BORDER :
            THIN_LINE;
      }

      /**<fim_suffix>
      @Override
      public int getColBorder(int r, int c) {
         return (r == 0 ||
            gtable.isSummaryRow(r) && !gtable.isSummaryCol(c) &&
            !gtable.isSummaryCol(c + 1)) ?
            NO_BORDER :
            THIN_LINE;
      }

      /**
       * Return the per cell alignment.
       * @param r row number.
       * @param c column number.
       * @return cell<fim_middle>","
       * Return the style for right border of the specified row. The flag
       * must be one of the style options defined in the StyleConstants
       * class. If the column number is -1, it's checking the outside ruling
       * on the left.
       * @param r row number.
       * @param c column number.
       * @return ruling flag.
       */","
       * Return the per cell alignment.
       * @param r row number.
       * @param c column number.
       * @return cell alignment.
       */"
"<fim_prefix>the specified table.
    * @param table table lens.
    */
   public DropTable(GroupedTable table) {
      super(table);
   }

   /**
    * Create a style to decorate the table.
    * @return a style lens.
    */
   @Override
   protected TableLens createStyle(TableLens tbl) {
      return new Style();
   }

   /**
    * Style lens.
    */
   class Style extends Transparent {
      /**<fim_suffix>
      @Override
      public Color getRowBorderColor(int r, int c) {
         return Color.black;
      }

      /**
       * Return the color for drawing the column border lines.
       * @param r row number.
       * @param c column number.
       * @return ruling color.
       */
      @Override
      public Color getColBorderColor(int r, int c) {
         return Color.black;
     <fim_middle>","
       * Return the color for drawing the row border lines.
       * @param r row number.
       * @param c column number.
       * @return ruling color.
       */","
       * Create a style to decorate the table.
       */"
"<fim_prefix>or InetSoft Technology Corp
 */
public class DropTable extends GroupStyle {
   /**
    * Create an empty style. The setTable() method must be called before
    * it can be used.
    */
   public DropTable() {
   }

   /**
    * Create a style to decorate the specified table.
    * @param table table lens.
    */
   public DropTable(GroupedTable table) {
      super(table);
   }

   /**<fim_suffix>
   @Override
   protected TableLens createStyle(TableLens tbl) {
      return new Style();
   }

   /**
    * Style lens.
    */
   class Style extends Transparent {
      /**
       * Return the color for drawing the row border lines.
       * @param r row number.
       * @param c column number.
       * @return ruling color.
       */
      @Override
      public Color getRowBorder<fim_middle>","
    * Create a style to decorate the table.
    * @return a style lens.
    */","
    * Set the table to decorate.
    * @param table table lens.
    */"
"<fim_prefix>ort inetsoft.report.filter.GroupedTable;

import java.awt.*;

/**
 * DropTable style displays summary cells in drop-table cells.
 *
 * @version 5.1, 9/20/2003
 * @author InetSoft Technology Corp
 */
public class DropTable extends GroupStyle {
   /**
    * Create an empty style. The setTable() method must be called before
    * it can be used.
    */
   public DropTable() {
   }

   /**<fim_suffix>
   public DropTable(GroupedTable table) {
      super(table);
   }

   /**
    * Create a style to decorate the table.
    * @return a style lens.
    */
   @Override
   protected TableLens createStyle(TableLens tbl) {
      return new Style();
   }

   /**
    * Style lens.
    */
   class Style extends Transparent {
      /**
       * Return the color for drawing the row border line<fim_middle>","
    * Create a style to decorate the specified table.
    * @param table table lens.
    */","
    * Create a style to decorate the table.
    * @param table the table to decorate.
   "
"<fim_prefix>FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package inetsoft.report.filter.style;

import inetsoft.report.TableLens;
import inetsoft.report.filter.GroupedTable;

import java.awt.*;

/**<fim_suffix>
public class DropTable extends GroupStyle {
   /**
    * Create an empty style. The setTable() method must be called before
    * it can be used.
    */
   public DropTable() {
   }

   /**
    * Create a style to decorate the specified table.
    * @param table table lens.
    */
   public DropTable(GroupedTable table) {
      super(table);
   }

   /**
    * Create a style to decora<fim_middle>","
 * DropTable style displays summary cells in drop-table cells.
 *
 * @version 5.1, 9/20/2003
 * @author InetSoft Technology Corp
 */","
 * DropTable is a style that drops the table.
 *
 * @author <NAME>
 * @version $Id: DropTable.java,v 1.1 2004/"
"<fim_prefix>   return new Style();
   }

   /**
    * Style lens.
    */
   class Style extends Transparent {
      /**
       * Return the color for drawing the row border lines.
       * @param r row number.
       * @param c column number.
       * @return ruling color.
       */
      @Override
      public Color getRowBorderColor(int r, int c) {
         return Color.black;
      }

      /**<fim_suffix>
      @Override
      public Color getColBorderColor(int r, int c) {
         return Color.black;
      }

      /**
       * Return the style for bottom border of the specified cell. The flag
       * must be one of the style options defined in the StyleConstants
       * class. If the row number is -1, it's checking the outside ruling
       * on the top.
       * @param r row numbe<fim_middle>","
       * Return the color for drawing the column border lines.
       * @param r row number.
       * @param c column number.
       * @return ruling color.
       */","
       * Return the color for drawing the column border lines.
       * @param r row number.
       * @param c column number.
       * @return ruling color.
       */"
"<fim_prefix>
       * on the left.
       * @param r row number.
       * @param c column number.
       * @return ruling flag.
       */
      @Override
      public int getColBorder(int r, int c) {
         return (r == 0 ||
            gtable.isSummaryRow(r) && !gtable.isSummaryCol(c) &&
            !gtable.isSummaryCol(c + 1)) ?
            NO_BORDER :
            THIN_LINE;
      }

      /**<fim_suffix>
      @Override
      public int getAlignment(int r, int c) {
         return (H_LEFT | V_CENTER);
      }

      /**
       * Return the per cell font. Return null to use default font.
       * @param r row number.
       * @param c column number.
       * @return font for the specified cell.
       */
      @Override
      public Font getFont(int r, int c) {
         Font font = tab<fim_middle>","
       * Return the per cell alignment.
       * @param r row number.
       * @param c column number.
       * @return cell alignment.
       */","
       * Return the per cell alignment.
       * @param r row number.
       * @param c column number.
       * @return alignment for the specified cell.
    "
"<fim_prefix>ummaryCol(c) &&
            !gtable.isSummaryCol(c + 1)) ?
            NO_BORDER :
            THIN_LINE;
      }

      /**
       * Return the per cell alignment.
       * @param r row number.
       * @param c column number.
       * @return cell alignment.
       */
      @Override
      public int getAlignment(int r, int c) {
         return (H_LEFT | V_CENTER);
      }

      /**<fim_suffix>
      @Override
      public Font getFont(int r, int c) {
         Font font = table.getFont(r, c);

         if(r == 0 && isFormatFirstRow() || gtable.isSummaryRow(r)) {
            return createFont(font, Font.BOLD);
         }

         return font;
      }
   }
}

<fim_middle>","
       * Return the per cell font. Return null to use default font.
       * @param r row number.
       * @param c column number.
       * @return font for the specified cell.
       */","
       * Return the per cell font.
       * @param r row number.
       * @param c column number.
       * @return cell font.
       */"
"<fim_prefix>his program.  If not, see <https://www.gnu.org/licenses/>.
 */
package inetsoft.report.filter.style;

import inetsoft.report.TableLens;
import inetsoft.report.filter.GroupedTable;

import java.awt.*;

/**
 * DropTable style displays summary cells in drop-table cells.
 *
 * @version 5.1, 9/20/2003
 * @author InetSoft Technology Corp
 */
public class DropTable extends GroupStyle {
   /**<fim_suffix>
   public DropTable() {
   }

   /**
    * Create a style to decorate the specified table.
    * @param table table lens.
    */
   public DropTable(GroupedTable table) {
      super(table);
   }

   /**
    * Create a style to decorate the table.
    * @return a style lens.
    */
   @Override
   protected TableLens createStyle(TableLens tbl) {
      return new Style();
   }

   /**
<fim_middle>","
    * Create an empty style. The setTable() method must be called before
    * it can be used.
    */","
    * Style class.
    */"
"<fim_prefix>ide
      public Color getRowBorderColor(int r, int c) {
         return Color.black;
      }

      /**
       * Return the color for drawing the column border lines.
       * @param r row number.
       * @param c column number.
       * @return ruling color.
       */
      @Override
      public Color getColBorderColor(int r, int c) {
         return Color.black;
      }

      /**<fim_suffix>
      @Override
      public int getRowBorder(int r, int c) {
         return (r < 0 ||
            gtable.isSummaryRow(r) &&
            (r == lastRow() || gtable.isSummaryRow(r + 1)) &&
            !gtable.isSummaryCol(c)) ?
            NO_BORDER :
            THIN_LINE;
      }

      /**
       * Return the style for right border of the specified row. The flag
       * must be one<fim_middle>","
       * Return the style for bottom border of the specified cell. The flag
       * must be one of the style options defined in the StyleConstants
       * class. If the row number is -1, it's checking the outside ruling
       * on the top.
       * @param r row number.
       * @param c column number.
       * @return ruling flag.
       */","
       * Return the style for left border of the specified row. The flag
       * must be one of the following:  Fixed bug in summary row border.  /*
 * Copyright (c) 2006-2007 <NAME>, <NAME>, <NAME>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish"
"<fim_prefix>package org.netbeans.modules.thymeleafcodecompletion;

import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.StyledDocument;
import org.openide.util.Exceptions;

/**<fim_suffix>
public class CompletionUtils {

    /**
     * Gets index of first not space/tab element in line where caret is or caret
     * position if non found before its location
     *
     * @param doc edited document
     * @param caretOffset current caret position
     * @return Integer index of first space or offset passed in if none before
     * it
     * @throws BadLocationException
  <fim_middle>","
 * Helper methods for auto completion
 *
 * @author Artur Wi≈õniewski
 *
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>LocationException ex) {
                throw (BadLocationException) new BadLocationException(
                        ""calling getText("" + start + "", "" + (start + 1)
                        + "") on doc of length: "" + doc.getLength(), start
                ).initCause(ex);
            }
            start++;
        }
        return start > caretOffset ? failsafe : start;
    }

    /**<fim_suffix>
    static int getIndexOfLastSpace(char[] line) {
        int i = line.length;
        while (--i > -1) {
            final char c = line[i];
            if (Character.isWhitespace(c)) {
                return i;
            }
        }
        return -1;
    }

    /**
     * Gets index of the end of attribute
     *
     * @param line array of chars from begin of attribute to end of<fim_middle>","
     * Returns index of last white char in line
     *
     * @param line array of chars
     * @return int index or -1 if not found
     */","
     * Gets index of the end of attribute
     *
     * @param line array of chars from begin of attribute to end of line
     * @return index of the end of attribute
"
"<fim_prefix> last white char in line
     *
     * @param line array of chars
     * @return int index or -1 if not found
     */
    static int getIndexOfLastSpace(char[] line) {
        int i = line.length;
        while (--i > -1) {
            final char c = line[i];
            if (Character.isWhitespace(c)) {
                return i;
            }
        }
        return -1;
    }

    /**<fim_suffix>
    static int getIndexOfAttributesEnd(char[] line) {
        for (int i = 0; i < line.length; i++) {
            final char c = line[i];
            if (Character.isWhitespace(c) || c == '""' || c == '>') {
                return i;
            }
        }
        return -1;
    }

    /**
     * Checks if caret is inside tag and returns tags name
     *
     * @param doc edited docum<fim_middle>","
     * Gets index of the end of attribute
     *
     * @param line array of chars from begin of attribute to end of line
     * @return index of end of attribute or -1 if something went wrong
     */","
     * Checks if caret is inside tag and returns tags name
     *
     * @param doc edited documnet
     * @param caret caret position  Fix #5  package com.vladsch.idea.multimark"
"<fim_prefix>package org.netbeans.modules.thymeleafcodecompletion;

import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import javax.swing.text.StyledDocument;
import org.openide.util.Exceptions;

/**
 * Helper methods for auto completion
 *
 * @author Artur Wi≈õniewski
 *
 */
public class CompletionUtils {

    /**<fim_suffix>
    static int getRowFirstNonWhite(StyledDocument doc, int caretOffset)
            throws BadLocationException {
        Element lineElement = doc.getParagraphElement(caretOffset);//line start&stop offsets

        int start = lineElement.getStartOffset();
        int failsafe = start;
        while (start + 1 < lineElement.getEndOffset()) {
            try {
                if (doc.<fim_middle>","
     * Gets index of first not space/tab element in line where caret is or caret
     * position if non found before its location
     *
     * @param doc edited document
     * @param caretOffset current caret position
     * @return Integer index of first space or offset passed in if none before
     * it
     * @throws BadLocationException
     */","
     * Returns the offset of the first non-white character in the line
     *
     * @param doc
     * @param caretOffset
     * @return
     * @throws BadLocationException
     */"
"<fim_prefix>c.getText(caretOffset - 1, 1);
            if (chars.equals("">"")) {
                break;
            } else if (chars.equals("" "")) {
                lastWhiteSpace = caretOffset;
            } else if (chars.equals(""<"")) {
                return doc.getText(caretOffset, lastWhiteSpace - caretOffset);
            }
            caretOffset--;
        }
        return """";
    }

    /**<fim_suffix>
    static boolean insideAttribute(StyledDocument doc, int caretOffset) {
        boolean insideQuotes = false;
        while (caretOffset > 0) {
            try {
                String chars = doc.getText(caretOffset - 1, 1);
                if (chars.equals(""<"") || chars.equals(""\"""") && insideQuotes) {
                    return false;
                } else if (chars.equals(""\"""") <fim_middle>","
     * Checks if caret position is inside attributes quotes
     *
     * @param doc edited document
     * @param caretOffset current caret location offset
     * @return true if caret inside attribute
     */","
     * Returns the text of the element that is currently selected in the editor.
     *
     * @param doc the document
     * @param caretOffset the caret offset
     * @return the text of the element that"
"<fim_prefix>ute to end of line
     * @return index of end of attribute or -1 if something went wrong
     */
    static int getIndexOfAttributesEnd(char[] line) {
        for (int i = 0; i < line.length; i++) {
            final char c = line[i];
            if (Character.isWhitespace(c) || c == '""' || c == '>') {
                return i;
            }
        }
        return -1;
    }

    /**<fim_suffix>
    static String getCurrentTagName(StyledDocument doc, int caretOffset) throws BadLocationException {
        int lastWhiteSpace = caretOffset;
        while (caretOffset > 0) {
            String chars = doc.getText(caretOffset - 1, 1);
            if (chars.equals("">"")) {
                break;
            } else if (chars.equals("" "")) {
                lastWhiteSpace = caretOffset<fim_middle>","
     * Checks if caret is inside tag and returns tags name
     *
     * @param doc edited document
     * @param caretOffset current caret location offset
     * @return String tag name or empty if not inside tag
     * @throws BadLocationException
     */","
     * Returns the index of the first character of the next tag.
     *
     * @param line                                                "
"<fim_prefix>/*<fim_suffix>
package org.nabucco.framework.mda.template.java.extract;

import java.util.List;

import org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
import org.eclipse.jdt.internal.compiler.ast.ImportReference;
import org.nabucco.framework.mda.template.java.JavaTemplateException;

/**
 * Interface for import reference (imports or package definitions) manipulation operations.
 * <fim_middle>","
 * Copyright 2012 PRODYNA AG
 *
 * Licensed under the Eclipse Public License (EPL), Version 1.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.opensource.org/licenses/eclipse-1.0.php or
 * http://www.nabucco.org/License.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * Interface for import reference (imports or package definitions) manipulation operations.
 * 
 * @author <NAME>
 */"
"<fim_prefix>ration}.
     * 
     * @see ImportReference
     * 
     * @param compilationUnitDeclaration
     *            the compilation unit to extract.
     * 
     * @return the current package
     * 
     * @throws JavaTemplateException
     */
    ImportReference extractCurrentPackage(CompilationUnitDeclaration compilationUnitDeclaration)
            throws JavaTemplateException;

    /**<fim_suffix>
    List<ImportReference> extractImports(CompilationUnitDeclaration compilationUnitDeclaration)
            throws JavaTemplateException;
}
<fim_middle>","
     * Extracts and copies the import references of a {@link CompilationUnitDeclaration}.
     * 
     * @see ImportReference
     * 
     * @param compilationUnitDeclaration
     *            the compilation unit to extract.
     * 
     * @return a list of {@link ImportReference}
     * 
     * @throws JavaTemplateException
     */","
     * Extracts the imports from the given compilation unit.
     * 
     * @param compilationUnitDeclaration
     *            the compilation unit to extract.
     * 
     * @return the imports
     * 
     * @throws JavaTemplateException
     */"
"<fim_prefix>icense for the specific language governing permissions and
 * limitations under the License.
 */
package org.nabucco.framework.mda.template.java.extract;

import java.util.List;

import org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration;
import org.eclipse.jdt.internal.compiler.ast.ImportReference;
import org.nabucco.framework.mda.template.java.JavaTemplateException;

/**<fim_suffix>
public interface JavaAstImportReferenceExtractor {

    /**
     * Extracts and copies the current package of a {@link CompilationUnitDeclaration}.
     * 
     * @see ImportReference
     * 
     * @param compilationUnitDeclaration
     *            the compilation unit to extract.
     * 
     * @return the current package
     * 
     * @throws JavaTemplateException
     */
    Imp<fim_middle>","
 * Interface for import reference (imports or package definitions) manipulation operations.
 * 
 * @author Nicolas Moser, PRODYNA AG
 */","
 * Interface for extracting the current package of a {@link CompilationUnitDeclaration}.
 * 
 * @author <NAME>
 * 
 * @see ImportReference"
"<fim_prefix>.jdt.internal.compiler.ast.CompilationUnitDeclaration;
import org.eclipse.jdt.internal.compiler.ast.ImportReference;
import org.nabucco.framework.mda.template.java.JavaTemplateException;

/**
 * Interface for import reference (imports or package definitions) manipulation operations.
 * 
 * @author Nicolas Moser, PRODYNA AG
 */
public interface JavaAstImportReferenceExtractor {

    /**<fim_suffix>
    ImportReference extractCurrentPackage(CompilationUnitDeclaration compilationUnitDeclaration)
            throws JavaTemplateException;

    /**
     * Extracts and copies the import references of a {@link CompilationUnitDeclaration}.
     * 
     * @see ImportReference
     * 
     * @param compilationUnitDeclaration
     *            the compilation unit to extract.
     * 
     <fim_middle>","
     * Extracts and copies the current package of a {@link CompilationUnitDeclaration}.
     * 
     * @see ImportReference
     * 
     * @param compilationUnitDeclaration
     *            the compilation unit to extract.
     * 
     * @return the current package
     * 
     * @throws JavaTemplateException
     */","
     * Extracts and copies the import references of a {@link CompilationUnitDeclaration}.
     * 
     * @see ImportReference
     * 
     * @param compilationUnitDeclaration
     *            the compilation unit to extract.
     * 
      * @return the import reference.  Added javadoc.  package org.nabucco.framework.mda.template."
"<fim_prefix>/*<fim_suffix>
package org.nabucco.framework.base.impl.component.adapter.registry;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.management.StandardMBean;

import org.nabucco.common.extension.ExtensionException;
import org.nabucco.framework.base.facade.dat<fim_middle>","
 * Copyright 2012 PRODYNA AG
 *
 * Licensed under the Eclipse Public License (EPL), Version 1.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.opensource.org/licenses/eclipse-1.0.php or
 * http://www.nabucco.org/License.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>tarting new adapter registry timer!"");
            TimerService.getInstance().schedule(new AdapterRegistryTimer());
        } catch (TimerLookupException te) {
            logger.error(te, ""Cannot start adapter registry timer, timer service is not deployed."");
        } catch (Exception e) {
            logger.error(e, ""Error starting adapter registry timer."");
        }
    }

    /**<fim_suffix>
    private String getAdapterInterface(String extensionName) {

        try {
            AdapterManagementExtension extension = (AdapterManagementExtension) NabuccoSystem.getExtensionResolver()
                    .resolveExtension(ExtensionPointType.ORG_NABUCCO_MANAGEMENT_ADAPTER, extensionName);

            if (extension == null || extension.getAdapterInterface() == null) {
      <fim_middle>","
     * Resolve the JNDI names of a given adapter name.
     * 
     * @param extensionName
     *            the name of the org.nabucco.management.adapter extension
     * 
     * @return the configured adapter names
     */","
     * Stops the adapter registry timer.
     */"
"<fim_prefix> AdapterRegistry
 * 
 * @author Nicolas Moser, PRODYNA AG
 */
public class AdapterRegistryMBean extends StandardMBean implements AdapterRegistry {

    private Map<String, Set<AdapterRegistryEntry>> adapterMap = new HashMap<String, Set<AdapterRegistryEntry>>();

    private static NabuccoLogger logger = NabuccoLoggingFactory.getInstance().getLogger(AdapterRegistryMBean.class);

    /**<fim_suffix>
    AdapterRegistryMBean() {
        super(AdapterRegistry.class, false);
    }

    @Override
    public void register(String adapterName, String jndiName) {
        if (adapterName == null) {
            throw new IllegalArgumentException(""Cannot register adapter [null] in registry."");
        }

        String adapterInterface = this.getAdapterInterface(adapterName);

        if (a<fim_middle>","
     * Creates a new {@link AdapterRegistryMBean} instance.
     */","
     * Creates a new AdapterRegistryMBean.
     */"
"<fim_prefix>ce = extension.getAdapterInterface();
            if (adapterInterface.getValue() != null && adapterInterface.getValue().getValue() != null) {
                return adapterInterface.getValue().getValue();
            }

        } catch (ExtensionException ee) {
            logger.error(ee, ""Cannot resolve configured adapter JNDI names."");
        }

        return null;
    }

    /**<fim_suffix>
    private List<String> getJndiNames(String name) {

        try {
            AdapterManagementExtension extension = (AdapterManagementExtension) NabuccoSystem.getExtensionResolver()
                    .resolveExtension(ExtensionPointType.ORG_NABUCCO_MANAGEMENT_ADAPTER, name);

            if (extension == null) {
                logger.error(""Cannot resolve configured adapter JNDI<fim_middle>","
     * Resolve the JNDI names of a given adapter name.
     * 
     * @param name
     *            the name of the adapter
     * 
     * @return the configured jndi names
     */","
     * @param name
     * @return
     */"
"<fim_prefix>co.framework.base.facade.datatype.extension.schema.management.AdapterManagementExtension;
import org.nabucco.framework.base.facade.datatype.logger.NabuccoLogger;
import org.nabucco.framework.base.facade.datatype.logger.NabuccoLoggingFactory;
import org.nabucco.framework.base.impl.service.timer.TimerLookupException;
import org.nabucco.framework.base.impl.service.timer.TimerService;

/**<fim_suffix>
public class AdapterRegistryMBean extends StandardMBean implements AdapterRegistry {

    private Map<String, Set<AdapterRegistryEntry>> adapterMap = new HashMap<String, Set<AdapterRegistryEntry>>();

    private static NabuccoLogger logger = NabuccoLoggingFactory.getInstance().getLogger(AdapterRegistryMBean.class);

    /**
     * Creates a new {@link AdapterRegistryMBean} instance.
<fim_middle>","
 * AdapterRegistry
 * 
 * @author Nicolas Moser, PRODYNA AG
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.gzw.mp.utils;

/**<fim_suffix>
public class SignUp {


}
<fim_middle>","
 * coder by 背离记 on 2015/11/10.
 */","
 * Created by gongzhengwei on 2017/9/7.
 */"
"<fim_prefix>/**<fim_suffix>

package hu.netmind.beankeeper.parser;

/**
 * A constant term has only a value.
 * @author Brautigam Robert
 * @version Revision: $Revision$
 */
public class ConstantTerm
{
   private Object value;
   private boolean id = false;

   public boolean isId()
   {
      return id;
   }

   public void setId()
   {
      this.id=true;
   }

   public ConstantTerm(Object value)
   {
      s<fim_middle>","
 * Copyright (C) 2006 NetMind Consulting Bt.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */","
 * Copyright (c) 2012, Netmind AB
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT"
"<fim_prefix>f
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package hu.netmind.beankeeper.parser;

/**<fim_suffix>
public class ConstantTerm
{
   private Object value;
   private boolean id = false;

   public boolean isId()
   {
      return id;
   }

   public void setId()
   {
      this.id=true;
   }

   public ConstantTerm(Object value)
   {
      setValue(value);
   }

   public Object getValue()
   {
      return value;
   }
   public void setValue(Object value)
   {
      this.value=value;<fim_middle>","
 * A constant term has only a value.
 * @author Brautigam Robert
 * @version Revision: $Revision$
 */","
 * A constant term.
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package net.luxvacuos.lightengine.client.ui;

import net.luxvacuos.lightengine.client.rendering.glfw.Window;

public interface IComponent {
	
	public void init(Window window);
	
	public void render(Window window);
	
	public void update(float delta, Window window);
	
	public void alwaysUpdate(float delta, Window window);
	
	public void dispose(Window window);

}
<fim_middle>","
 * This file is part of Light Engine
 * 
 * Copyright (C) 2016-2019 Lux Vacuos
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */","
 * Copyright (c) 2017 <NAME>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN"
"<fim_prefix>/*<fim_suffix>

package com.awesheet.messages;

public abstract class CreateChartMessage extends UIMessage {
    protected String title;
    protected String xaxis;
    protected String yaxis;

    protected CreateChartMessage(int type) {
        super(type);
    }

    public String getTitle() {
        return title;
    }

    public String getXaxis() {
        return xaxis;
   <fim_middle>","
 * AweSheet - Simple Open-Source Spreadsheet Editor
 * Copyright (c) 2015 - 2016, Orfeas - Ioannis Zafeiris, Nikolaos Fylakis
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>package defpackage;

import androidx.databinding.ViewDataBinding;
import defpackage.lj;
import java.util.ArrayList;
import java.util.Iterator;

/*<fim_suffix>
public final class kj<T, CT> extends j41<T, CT> {
    public final ViewDataBinding i0;
    public final lj j0;
    public ArrayList k0;

    public kj(ViewDataBinding viewDataBinding, lj ljVar) {
        super(viewDataBinding.T);
        this.i0 = viewDataBinding;
        this.j0 = ljVar;
    }

    @Override // defpackage.j41
    public final void B(T t, CT ct) {
        int i = this<fim_middle>", renamed from: kj  reason: default package */, renamed from: kj reason: default package */
"<fim_prefix>/**<fim_suffix>
package org.eclipse.epsilon.evl.emf.validation;

import java.util.HashMap;

import org.eclipse.core.resources.IMarker;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;
import org.eclipse.gmf.runtime.notation.View;
import org.e<fim_middle>","*****************************************************************************
 * Copyright (c) 2008 The University of York.
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * Contributors:
 *     Dimitrios Kolovos - initial API and implementation
 ******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>port com.aukocharlie.recorder4j.source.spec.block.AbstractBlockSpec;
import com.aukocharlie.recorder4j.source.spec.expression.Expression;
import com.aukocharlie.recorder4j.source.spec.expression.AbstractExpressionSpec;
import com.aukocharlie.recorder4j.source.spec.expression.MethodInvocationExpressionSpec;
import com.sun.source.tree.ExpressionStatementTree;

import java.util.List;

/**<fim_suffix>
public class ExpressionStatementSpec extends AbstractStatementSpec {

    AbstractExpressionSpec expression;

    public ExpressionStatementSpec(ExpressionStatementTree node, CompilationUnitSpec compilationUnitSpec) {
        this.expression = AbstractExpressionSpec.toSpecificExpression(node.getExpression(), compilationUnitSpec);
    }

    @Override
    public Expression nextExpressi<fim_middle>","
 * @author auko
 */","
 * @author <NAME>
"
"<fim_prefix>/*<fim_suffix>

package com.caucho.message.tourmaline;

import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.util.Map;

import com.caucho.message.MessageEncoder;
import com.caucho.message.MessageException;
import com.caucho.message.MessagePropertiesFactory;
import com.caucho.message.broker.BrokerSender;
import com.caucho.message.broker.EnvironmentMessageBroker;
i<fim_middle>","
 * Copyright (c) 1998-2012 Caucho Technology -- all rights reserved
 *
 * This file is part of Resin(R) Open Source
 *
 * Each copy or derived work must preserve the copyright notice and this
 * notice unmodified.
 *
 * Resin Open Source is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Resin Open Source is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty
 * of NON-INFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Resin Open Source; if not, write to the
 *
 *   Free Software Foundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Scott Ferguson
 */","*
 * @author <NAME>
 */"
"<fim_prefix>actory;
import com.caucho.message.broker.BrokerSender;
import com.caucho.message.broker.EnvironmentMessageBroker;
import com.caucho.message.common.AbstractMessageSender;
import com.caucho.remote.websocket.WebSocketClient;
import com.caucho.util.IoUtil;
import com.caucho.util.L10N;
import com.caucho.vfs.TempOutputStream;
import com.caucho.vfs.Vfs;
import com.caucho.vfs.WriteStream;

/**<fim_suffix>
public class NautilusClientSender<T> extends AbstractMessageSender<T> {
  private static final L10N L = new L10N(NautilusClientSender.class);
  
  private final String _address;
  private final String _queue;
  private final MessageEncoder<T> _encoder;
  
  private BrokerSender _publisher;
  private long _lastMessageId;
  
  private NautilusClientSenderEndpoint<T> _endpoint;
  
  priv<fim_middle>","
 * local connection to the message store
 */","
 * A Nautilus client sender.
"
"<fim_prefix>ac.standrews.cs.sos.experiments.ExperimentConfiguration;
import uk.ac.standrews.cs.sos.experiments.ExperimentUnit;
import uk.ac.standrews.cs.sos.experiments.exceptions.ExperimentException;
import uk.ac.standrews.cs.sos.instrument.InstrumentFactory;
import uk.ac.standrews.cs.sos.instrument.StatsTYPE;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

/**<fim_suffix>
public class Experiment_Failure_3 extends Experiment_Failure implements Experiment {

    public Experiment_Failure_3(ExperimentConfiguration experimentConfiguration, String outputFilename) throws ExperimentException {
        super(experimentConfiguration, outputFilename);

        List<ExperimentUnit> units = new LinkedList<>();
        for(int i = 0; i < experiment.getSetup().getIt<fim_middle>","
 * Simulate failure by making remote nodes unresponsive to REST calls (except a special one that is needed to wake the node up again)
 *
 *
 * @author Simone I. Conte ""sic2@st-andrews.ac.uk""
 */","
 * @author <NAME> ""<EMAIL>""
 */"
"<fim_prefix>/**<fim_suffix>
package org.openhab.binding.netatmo.internal.handler.channelhelper;

import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;
import static org.openhab.binding.netatmo.internal.utils.ChannelTypeUtils.toQuantityType;

import java.util.Set;

import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;
import org.openhab.binding.net<fim_middle>","
 * Copyright (c) 2010-2023 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>tic org.openhab.binding.netatmo.internal.utils.ChannelTypeUtils.toQuantityType;

import java.util.Set;

import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;
import org.openhab.binding.netatmo.internal.api.data.NetatmoConstants.MeasureClass;
import org.openhab.binding.netatmo.internal.api.dto.Dashboard;
import org.openhab.core.types.State;

/**<fim_suffix>
@NonNullByDefault
public class RainChannelHelper extends ChannelHelper {

    public RainChannelHelper(Set<String> providedGroups) {
        super(providedGroups);
    }

    @Override
    protected @Nullable State internalGetDashboard(String channelId, Dashboard dashboard) {
        switch (channelId) {
            case CHANNEL_VALUE:
                return toQuantityType(dashboard.g<fim_middle>","
 * The {@link RainChannelHelper} handles specific channels of modules measuring rain
 *
 * @author GaÃ«l L'hopital - Initial contribution
 *
 */","
 * Helper class for the rain channel.
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package com.neopragma.legacy.round9;<fim_middle>","
 * Base version of Java code to illustrate various aspects of ""clean code.""
 * 
 * The Job Applicant application is coded in a single Java class file. There are various
 * code smells that suggest possible improvements in the design of the code.
 * 
 * @author neopragma
 * @version 1.0.0
 * @since 1.7
 */","
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>/**<fim_suffix>
package uk.ac.babraham.SeqMonk.Vistory;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Date;

import javax.swing.BorderFactory;
import javax.swing.JPanel;

import uk.ac.babraham.SeqMonk.Displays.Vistory.VistoryBlockButtons;;

public abstract class VistoryBlock extends JPanel implements Mouse<fim_middle>","
 * Copyright Copyright 2018- 21 Simon Andrews
 *
 *    This file is part of SeqMonk.
 *
 *    SeqMonk is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    SeqMonk is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with SeqMonk; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */","
 * 
 * @author <NAME> [email: <EMAIL>]
 * @version 1.0, Jan 4, 2014
 */"
"<fim_prefix>package org.pharmgkb.pharmcat.haplotype.model;

import java.util.SortedSet;
import java.util.TreeSet;
import javax.annotation.Nonnull;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import org.apache.commons.lang3.ObjectUtils;
import org.pharmgkb.pharmcat.definition.model.NamedAllele;


/**<fim_suffix>
public class HaplotypeMatch implements Comparable<HaplotypeMatch> {
  @Expose
  @SerializedName(""name"")
  private String m_name;
  private NamedAllele m_haplotype;
  @Expose
  @SerializedName(""sequences"")
  private SortedSet<String> m_sequences = new TreeSet<>();


  public HaplotypeMatch(@Nonnull NamedAllele haplotype) {
    m_haplotype = haplotype;
    m_name = m_haplotype.getName()<fim_middle>","
 * This represents a haplotype and the sequences that matched it.
 *
 * @author Mark Woon
 */","
 * A match between a haplotype and a sequence.
 */"
"<fim_prefix>vel.block.entity.BlockEntityTicker;
import net.minecraft.world.level.block.entity.TickingBlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.rudahee.metallics_arts.modules.logic.server.server_events.on_world_tick.AllomaticTick;
import net.rudahee.metallics_arts.setup.registries.ModBlocksRegister;
import net.rudahee.metallics_arts.utils.CapabilityUtils;

/**<fim_suffix>
public class BendalloyAllomanticHelper {

    /**
     * This method applies more ticks on the mobs (making them move faster or attack more often).
     *
     * @param player to whom the effect will be applied.
     * @param level in which the player is located (world).
     * @param enhanced if player is burning Duralumin or the player was hit with Nicrosil.
     * @param lerasium i<fim_middle>","
 * Helper class that contains the methods to use the allomantic Bendalloy
 *
 * @author SteelCode Team
 * @since 1.5.1
 *
 * @see AllomaticTick
 */","
 * This class is used to apply more ticks on the mobs (making them move faster or attack more often).
 *
 * @author <NAME>
 */"
"<fim_prefix>es.logic.server.server_events.on_world_tick.AllomaticTick;
import net.rudahee.metallics_arts.setup.registries.ModBlocksRegister;
import net.rudahee.metallics_arts.utils.CapabilityUtils;

/**
 * Helper class that contains the methods to use the allomantic Bendalloy
 *
 * @author SteelCode Team
 * @since 1.5.1
 *
 * @see AllomaticTick
 */
public class BendalloyAllomanticHelper {

    /**<fim_suffix>
    public static void BendalloyMobEffects(Player player, Level level, boolean enhanced, boolean lerasium, boolean compounding) {

        int radius = CapabilityUtils.getRadius(enhanced, lerasium, compounding);

        BlockPos negative = new BlockPos(player.blockPosition()).offset(- radius, - radius, - radius);
        BlockPos positive = new BlockPos(player.blockPosition()).offset<fim_middle>","
     * This method applies more ticks on the mobs (making them move faster or attack more often).
     *
     * @param player to whom the effect will be applied.
     * @param level in which the player is located (world).
     * @param enhanced if player is burning Duralumin or the player was hit with Nicrosil.
     * @param lerasium if the player is burning Lerasium.
     */","
     * Method that handles the Allomantic Tick event
     *
     * @param player                                                                                        "
"<fim_prefix>                block.randomTick((ServerLevel) level, blockPos, level.random);
                }

                else if (tileEntity instanceof TickingBlockEntity) {
                    BlockEntityTicker ticker = block.getTicker(level, tileEntity.getType());
                    ticker.tick(level, blockPos, block, tileEntity);

                }
            }
        });
    }

    /**<fim_suffix>
    public static void AddAiSteeps(Player player, boolean enhanced) {

        if (enhanced) {
            player.addEffect(new MobEffectInstance(MobEffects.DIG_SPEED, 40, 3, true, false));
            player.aiStep();
            player.aiStep();
            player.aiStep();
        } else {
            player.addEffect(new MobEffectInstance(MobEffects.DIG_SPEED, 40, 1, false, false)<fim_middle>","
     * Adds a digging speed effect to the player and performs AI steps based on the enhanced flag.
     * If enhanced is true, performs 3 AI steps; otherwise, performs 1 AI step.
     *
     * @param player the Player to whom the effect and AI steps are applied
     * @param enhanced the boolean flag representing whether the AI steps should be enhanced
     */","
     * Adds the AI steeps to the player
     *
     * @param player                                                                      "
"<fim_prefix>/*<fim_suffix>

package it.zs0bye.bettersecurity.bukkit.listeners;

import it.zs0bye.bettersecurity.bukkit.BetterSecurityBukkit;
import it.zs0bye.bettersecurity.bukkit.warnings.Warnings;
import it.zs0bye.bettersecurity.bukkit.executors.SendExecutors;
import it.zs0bye.bettersecurity.bukkit.files.enums.Config;
import it.zs0bye.bettersecurity.bukkit.warnings.enums.TypeWarning;
import org.bukkit.entity.<fim_middle>","
 * Security plugin for your server - https://github.com/KyotoResources/BetterSecurity
 * Copyright (C) 2023 KyotoResources
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by Zeros on 15/01/2018.
 */"
"<fim_prefix>/*<fim_suffix>
package org.lifecompanion.ui.common.pane.specific.styleedit;

import javafx.beans.value.ChangeListener;
import javafx.collections.FXCollections;
import javafx.scene.Node;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import org.lifecompanion.model.api.style.ShapeStyle;
import org.lifecompanion.ui.common.pane.specific.cell.ShapeStyleListCell;
import org.lifec<fim_middle>","
 * LifeCompanion AAC and its sub projects
 *
 * Copyright (C) 2014 to 2019 Mathieu THEBAUD
 * Copyright (C) 2020 to 2021 CMRRF KERPAPE (Lorient, France)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package io.kamax.hboxd.hypervisor.vbox6_0.setting.video;

import io.kamax.hbox.constant.MachineAttribute;
import io.kamax.hbox.hypervisor.vbox.settings.video.Accelerate2dVideoSetting;
import io.kamax.hboxd.hypervisor.vbox6_0.setting._MachineSettingAction;
import io.kamax.tools.setting.BooleanSetting;
import io.kamax.tools.setting._Setting;
import org.virtualbox_6_0.IMachine;
import o<fim_middle>","
 * Hyperbox - Virtual Infrastructure Manager
 * Copyright (C) 2018 Kamax Sarl
 *
 * https://apps.kamax.io/hyperbox
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author kamax
 * @since 1.0.0
 */"
"<fim_prefix>package org.harmony_analyser.jharmonyanalyser.plugins;

import org.harmony_analyser.jharmonyanalyser.services.*;
import org.harmony_analyser.application.visualizations.VisualizationData;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>

@SuppressWarnings(""SameParameterValue"")

public abstract class LineChartPlugin extends AnalysisPlugin {
	public VisualizationData getDataFromOutput(String inputWavFile) throws IOException, AudioAnalyser.OutputNotReady, AudioAnalyser.ParseOutputError, AudioAnalyser.IncorrectInputException, AudioAnalyser.OutputAlreadyExists {
		VisualizationData data = super.prepareVisualizationData();<fim_middle>","
 * Abstract class for plugins that support line chart visualization
 */","
 * Created by aalokr on 12/12/"
"<fim_prefix>IOException, AudioAnalyser.OutputNotReady, AudioAnalyser.ParseOutputError, AudioAnalyser.IncorrectInputException, AudioAnalyser.OutputAlreadyExists {
		VisualizationData data = super.prepareVisualizationData();
		List<Float> timestamps = new ArrayList<>();
		List<Float> values = new ArrayList<>();
		List<String> linesList = readOutputFile(inputWavFile);

		float timestamp, value;

		/*<fim_suffix>
		try {
			for (String line : linesList) {
				timestamp = AudioAnalysisHelper.getTimestampFromLine(line);
				value = Float.parseFloat(AudioAnalysisHelper.getLabelFromLine(line));
				timestamps.add(timestamp);
				values.add(value);
			}
		} catch (NumberFormatException e) {
			throw new AudioAnalyser.ParseOutputError(""Output did not have the required fields"");
		}
		data.setTimesta<fim_middle>", Plugin-specific parsing of the result */,"*
		 * Parse the output file"
"<fim_prefix>/**<fim_suffix>

package cider.common.network.client;

import java.util.Date;

import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.MessageListener;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.util.StringUtils;

/**
 * 
 * Handle incoming messages on user chats.
 * 
 * @author Andrew
 * 
 */

public class ClientPrivateChatMessageListener implements Message<fim_middle>","
 *  CIDER - Collaborative Integrated Development EnviRonment
    Copyright (C) 2011  Andrew Moss
                        Lawrence Watkiss
                        Jonathan Bannister
                        Alex Sheppard
                        Miles Taylor
                        Ashley Woodman

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * 
 * Handle incoming messages on user chats.
 * 
 * @author Andrew
 * 
 */"
"<fim_prefix>  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package cider.common.network.client;

import java.util.Date;

import org.jivesoftware.smack.Chat;
import org.jivesoftware.smack.MessageListener;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.util.StringUtils;

/**<fim_suffix>

public class ClientPrivateChatMessageListener implements MessageListener
{

    private static final boolean DEBUG = true;

    private Client client;

    public ClientPrivateChatMessageListener(Client caller)
    {
        client = caller;
    }

    @Override
    public void processMessage(Chat chat, Message message)
    {
        String body = message.getBody();
        if (body <fim_middle>","
 * 
 * Handle incoming messages on user chats.
 * 
 * @author Andrew
 * 
 */","
 *
 * @author <a href=""mailto:<EMAIL>""><NAME></a>
 * @version"
"<fim_prefix>/*<fim_suffix>

package portablejim.veinminer.configuration;

/**
 * The types of tools that Veinminer knows about.
 */

public enum ToolType {
    AXE,
    HOE,
    PICKAXE,
    SHEARS,
    SHOVEL
}
<fim_middle>"," This file is part of VeinMiner.
 *
 *    VeinMiner is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Lesser General Public License as
 *    published by the Free Software Foundation, either version 3 of
 *     the License, or (at your option) any later version.
 *
 *    VeinMiner is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with VeinMiner.
 *    If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 12/12/2016.
 */"
"<fim_prefix> WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with VeinMiner.
 *    If not, see <http://www.gnu.org/licenses/>.
 */

package portablejim.veinminer.configuration;

/**<fim_suffix>

public enum ToolType {
    AXE,
    HOE,
    PICKAXE,
    SHEARS,
    SHOVEL
}
<fim_middle>","
 * The types of tools that Veinminer knows about.
 */","
 * @author <NAME>
 */"
"<fim_prefix>lic abstract class XmlWriterReaderTest
  extends TestCase
{
  public XmlWriterReaderTest()
  {
    super();
  }

  public XmlWriterReaderTest(String name)
  {
    super(name);
  }

  /**
   * Returns the XmlReader to be tested.
   */
  public abstract XmlReader createXmlReader();

  /**
   * Returns the XmlWriter to be tested.
   */
  public abstract XmlWriter createXmlWriter();

  /**<fim_suffix>
  public abstract List<URL> getExampleFiles();

  public final void testWritingReading()
    throws Exception
  {
    XmlReader reader = createXmlReader();
    XmlWriter writer = createXmlWriter();
    for (URL url : getExampleFiles()) {
      InputStream is = url.openStream();
      Term term;
      try {
        term = reader.read(is);
      } finally {
        is.close();
      }
 <fim_middle>","
   * Returns a list of file names that are used to perform the check.
   */","
   * Returns the example files to be tested.
   */"
"<fim_prefix>port java.util.List;

import junit.framework.*;

import net.sourceforge.czt.base.ast.Term;

/**
 * <p>A JUnit test case for testing XmlReader and XmlWriter objects.</p>
 *
 * @author Petra Malik
 */
public abstract class XmlWriterReaderTest
  extends TestCase
{
  public XmlWriterReaderTest()
  {
    super();
  }

  public XmlWriterReaderTest(String name)
  {
    super(name);
  }

  /**<fim_suffix>
  public abstract XmlReader createXmlReader();

  /**
   * Returns the XmlWriter to be tested.
   */
  public abstract XmlWriter createXmlWriter();

  /**
   * Returns a list of file names that are used to perform the check.
   */
  public abstract List<URL> getExampleFiles();

  public final void testWritingReading()
    throws Exception
  {
    XmlReader reader = createXmlReader();
<fim_middle>","
   * Returns the XmlReader to be tested.
   */","
   * Returns the XmlReader to be tested.
   */"
"<fim_prefix>/*<fim_suffix>

package net.sourceforge.czt.base.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.util.List;

import junit.framework.*;

import net.sourceforge.czt.base.ast.Term;

/**
 * <p>A JUnit test case for testing XmlReader and XmlWriter objects.</p>
 *
 * @author Petra Malik
 */
public abstract class XmlWriterReaderTest
<fim_middle>","
  Copyright 2004, 2006 Mark Utting
  This file is part of the czt project.

  The czt project contains free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  The czt project is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with czt; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/","
 * Copyright (c) 2008-2009, Petra Malik
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Heng Yuan nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software"
"<fim_prefix>>A JUnit test case for testing XmlReader and XmlWriter objects.</p>
 *
 * @author Petra Malik
 */
public abstract class XmlWriterReaderTest
  extends TestCase
{
  public XmlWriterReaderTest()
  {
    super();
  }

  public XmlWriterReaderTest(String name)
  {
    super(name);
  }

  /**
   * Returns the XmlReader to be tested.
   */
  public abstract XmlReader createXmlReader();

  /**<fim_suffix>
  public abstract XmlWriter createXmlWriter();

  /**
   * Returns a list of file names that are used to perform the check.
   */
  public abstract List<URL> getExampleFiles();

  public final void testWritingReading()
    throws Exception
  {
    XmlReader reader = createXmlReader();
    XmlWriter writer = createXmlWriter();
    for (URL url : getExampleFiles()) {
      InputStream i<fim_middle>","
   * Returns the XmlWriter to be tested.
   */","
   * Returns the XmlWriter to be tested.
   */"
"<fim_prefix>Public License
  along with czt; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

package net.sourceforge.czt.base.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URL;
import java.util.List;

import junit.framework.*;

import net.sourceforge.czt.base.ast.Term;

/**<fim_suffix>
public abstract class XmlWriterReaderTest
  extends TestCase
{
  public XmlWriterReaderTest()
  {
    super();
  }

  public XmlWriterReaderTest(String name)
  {
    super(name);
  }

  /**
   * Returns the XmlReader to be tested.
   */
  public abstract XmlReader createXmlReader();

  /**
   * Returns the XmlWriter to be tested.
   */
  public abstract XmlWriter createXmlWriter();

 <fim_middle>","
 * <p>A JUnit test case for testing XmlReader and XmlWriter objects.</p>
 *
 * @author Petra Malik
 */","
 * Abstract base class for XmlReader and XmlWriter tests.
 *
 * @author <NAME> (<EMAIL>)
 * @version $Id$
 * @since"
"<fim_prefix>/*<fim_suffix>

package org.mythtv.android.data.net;

import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;

import org.mythtv.android.data.entity.LiveStreamInfoEntity;
import org.mythtv.android.data.entity.mapper.BooleanJsonMapper;
import org.mythtv.android.data.entity.mapper.LiveStreamInfoEntityJsonMapper;
import org.mythtv.android.data.exception.Networ<fim_middle>","
 * MythtvPlayerForAndroid. An application for Android users to play MythTV Recordings and Videos
 * Copyright (c) 2016. Daniel Frey
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by Administrator on 2014/12/30.
 */"
"<fim_prefix>ythtv.android.data.entity.mapper.LiveStreamInfoEntityJsonMapper;
import org.mythtv.android.data.exception.NetworkConnectionException;
import org.mythtv.android.domain.Media;

import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URLEncoder;
import java.util.List;

import okhttp3.OkHttpClient;
import rx.Observable;
import rx.Subscriber;

/**<fim_suffix>
@SuppressWarnings( ""PMD"" )
public class ContentApiImpl extends BaseApi implements ContentApi {

    private static final String TAG = ContentApiImpl.class.getSimpleName();

    private final OkHttpClient okHttpClient;
    private final LiveStreamInfoEntityJsonMapper liveStreamInfoEntityJsonMapper;
    private final BooleanJsonMapper booleanJsonMapper;

    public ContentApiImpl( final<fim_middle>","
 *
 *
 *
 * @author dmfrey
 *
 * Created on 10/17/15.
 */","
 * Created by Administrator on 2014/6/19.
 */"
"<fim_prefix>SE.  See the
 * GNU General Public License for more details.
 */

package net.sourceforge.atunes.kernel.actions;

import java.awt.event.KeyEvent;

import javax.swing.KeyStroke;

import net.sourceforge.atunes.gui.GuiUtils;
import net.sourceforge.atunes.model.IOSManager;
import net.sourceforge.atunes.model.IPlayerHandler;
import net.sourceforge.atunes.utils.I18nUtils;

/**<fim_suffix>
public class StopCurrentAudioObjectAction extends CustomAbstractAction {

	private static final long serialVersionUID = -1177020643937370678L;

	private IPlayerHandler playerHandler;

	private IOSManager osManager;

	/**
	 * @param osManager
	 */
	public void setOsManager(final IOSManager osManager) {
		this.osManager = osManager;
	}

	/**
	 * @param playerHandler
	 <fim_middle>","
 * Stops playback
 * 
 * @author alex
 * 
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package net.sourceforge.atunes.kernel.actions;

import java.awt.event.KeyEvent;

import javax.swing.KeyStroke;

import net.sourceforge.atunes.gui.GuiUtils;
import net.sourceforge.atunes.model.IOSManager;
import net.sourceforge.atunes.model.IPlayerHandler;
import net.sourceforge.atunes.utils.I18nUtils;

/**
 * Stops playback
 * 
 * @author alex
 * 
 */
public class <fim_middle>","
 * aTunes
 * Copyright (C) Alex Aranda, Sylvain Gaudard and contributors
 *
 * See http://www.atunes.org/wiki/index.php?title=Contributing for information about contributors
 *
 * http://www.atunes.org
 * http://sourceforge.net/projects/atunes
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */","*
 * Stops playback
 * 
 * @author alex
 * 
 */"
"<fim_prefix>= -1177020643937370678L;

	private IPlayerHandler playerHandler;

	private IOSManager osManager;

	/**
	 * @param osManager
	 */
	public void setOsManager(final IOSManager osManager) {
		this.osManager = osManager;
	}

	/**
	 * @param playerHandler
	 */
	public void setPlayerHandler(final IPlayerHandler playerHandler) {
		this.playerHandler = playerHandler;
	}

	/**<fim_suffix>
	public StopCurrentAudioObjectAction() {
		super(I18nUtils.getString(""STOP""));
	}

	@Override
	protected void initialize() {
		putValue(
				ACCELERATOR_KEY,
				KeyStroke.getKeyStroke(KeyEvent.VK_O,
						GuiUtils.getCtrlOrMetaActionEventMask(this.osManager)));
	}

	@Override
	protected void executeAction() {
		this.playerHandler.stopCurrentAudioObject(true);
	}
}
<fim_middle>","
	 * Default constructor
	 */","
	 * 
	 */"
"<fim_prefix>}

    /**
     * This class has the purpose of telling the corresponding scroller, which values make up
     * a single TimeTextView element.
     */
    public static abstract class Labeler {

        private final EnterFromDateToToDateActivity mDateSlider;

        public Labeler(EnterFromDateToToDateActivity dateSlider) {
            mDateSlider = dateSlider;
        }

        /**<fim_suffix>
        public TimeObject getElem(long time) {
            Calendar c = Calendar.getInstance();
            c.setTimeInMillis(time);
            return timeObjectFromCalendar(c);
        }

        /**
         * returns a new TimeTextView instance, is only called a couple of times in the
         * initialisation process
         *
         * @param context      used to create the vi<fim_middle>","
         * gets called once, when the scroller gets initialised
         *
         * @param time the time in milliseconds
         * @return the TimeObject representing ""time""
         */","
         * returns the label for the given time
         *
         * @param time         the time to be labeled
         * @return           "
"<fim_prefix>S;
        	finish();
        }
    };

    private final android.view.View.OnClickListener mCancelButtonClickListener = new android.view.View.OnClickListener() {
        public void onClick(View v) {
            finish();
        }
    };
    /**
     * Defines the interface which defines the methods of the OnDateSetListener
     */
    public interface OnDateSetListener {
        /**<fim_suffix>
        public void onDateSet(EnterFromDateToToDateActivity view, Calendar selectedDate);
    }

    /**
     * This class has the purpose of telling the corresponding scroller, which values make up
     * a single TimeTextView element.
     */
    public static abstract class Labeler {

        private final EnterFromDateToToDateActivity mDateSlider;

        public Labeler(EnterFrom<fim_middle>","
         * this method is called when a date was selected by the user
         *
         * @param view the caller of the methodZone
         */","
         * Called when the user has selected a date.
         *
         * @param view        The view associated with this listener.
    "
"<fim_prefix>                  mTime.getTimeInMillis()));
			}
            
		}

		public void setTimeMs(long timeMs) {
			mTime.setTimeInMillis(timeMs);
			
			monthScroller.setTime(timeMs, 0);
			dayScroller.setTime(timeMs, 0);
			timeScroller.setTime(timeMs, 0);
			
			otherScrollerData.notifyOtherScrollerDataChanged();
		}

    }
    
    public EnterFromDateToToDateActivity() {
    }


    /**<fim_suffix>
    @Override
    public void doOnCreate(Bundle savedInstanceState) {
        super.doOnCreate(savedInstanceState);

        setContentView(R.layout.enter_from_date_to_to_date_activity);

        mLayout = (ViewGroup) findViewById(R.id.dateSliderMainLayout);

        Button okButton = (Button) findViewById(R.id.date_slider_ok_button);
        okButton.setOnClickListener(mOkButtonClick<fim_middle>","
     * Set up the dialog with all the views and their listeners
     */","
     * Called when the activity is first created.
     */"
"<fim_prefix>ime.set(Calendar.MINUTE, 0);
				
				monthScroller.setTime(mTime.getTimeInMillis(), 0);
				timeScroller.setTime(mTime.getTimeInMillis(), 0);
			}
			else { //source == timeScroller
				monthScroller.setTime(mTime.getTimeInMillis(), 0);
				dayScroller.setTime(mTime.getTimeInMillis(), 0);
			}
			
			otherScrollerData.notifyOtherScrollerDataChanged();
			updateFromToText();
		}

		/**<fim_suffix>
		private void notifyOtherScrollerDataChanged() {
			if(isFrom)
			{
				monthScroller.setMaxTime(
						toScrollerData.mTime.getTimeInMillis() - MIN_TIME_PERIOD);
				dayScroller.setMaxTime(
						toScrollerData.mTime.getTimeInMillis() - MIN_TIME_PERIOD);
				timeScroller.setMaxTime(
						toScrollerData.mTime.getTimeInMillis() - MIN_TIME_PERIOD);

                mTime.setTimeInMill<fim_middle>","
		 * Notifies us that the other scroller data changed,
		 * whether from scrolling or an absolute set 
		 */","
		 * @param source
		 * @param toScrollerData
		 */"
"<fim_prefix>   * Defines the interface which defines the methods of the OnDateSetListener
     */
    public interface OnDateSetListener {
        /**
         * this method is called when a date was selected by the user
         *
         * @param view the caller of the methodZone
         */
        public void onDateSet(EnterFromDateToToDateActivity view, Calendar selectedDate);
    }

    /**<fim_suffix>
    public static abstract class Labeler {

        private final EnterFromDateToToDateActivity mDateSlider;

        public Labeler(EnterFromDateToToDateActivity dateSlider) {
            mDateSlider = dateSlider;
        }

        /**
         * gets called once, when the scroller gets initialised
         *
         * @param time the time in milliseconds
         * @return the Tim<fim_middle>","
     * This class has the purpose of telling the corresponding scroller, which values make up
     * a single TimeTextView element.
     */","
     * This class is used to label the date slider
     */"
"<fim_prefix>       * gets called once, when the scroller gets initialised
         *
         * @param time the time in milliseconds
         * @return the TimeObject representing ""time""
         */
        public TimeObject getElem(long time) {
            Calendar c = Calendar.getInstance();
            c.setTimeInMillis(time);
            return timeObjectFromCalendar(c);
        }

        /**<fim_suffix>
        public TimeView createView(Context context, boolean isCenterView) {
            return new TimeView.TimeTextView(context, isCenterView, TimeView.TEXT_SIZE_DP);
        }

        public EnterFromDateToToDateActivity getDateSlider() {
            return mDateSlider;
        }

        /**
         * This method will be called constantly, whenever new date information is require<fim_middle>","
         * returns a new TimeTextView instance, is only called a couple of times in the
         * initialisation process
         *
         * @param context      used to create the view
         * @param isCenterView is true when the view is the central view
         * @return a TimeView instance
         */","
         * gets called once, when the scroller gets initialised
         *
         * @param time the time in milliseconds
         * @return the TimeObject representing ""time""
         */"
"<fim_prefix>s true when the view is the central view
         * @return a TimeView instance
         */
        public TimeView createView(Context context, boolean isCenterView) {
            return new TimeView.TimeTextView(context, isCenterView, TimeView.TEXT_SIZE_DP);
        }

        public EnterFromDateToToDateActivity getDateSlider() {
            return mDateSlider;
        }

        /**<fim_suffix>
        public abstract TimeObject add(long time, int val);

        protected abstract TimeObject timeObjectFromCalendar(Calendar c);
    }

    /**
     * Very simple helper class that defines a time unit with a label (text) its start-
     * and end date
     */
    public static class TimeObject {
        public final CharSequence text;
        public final long startTime, endTime<fim_middle>","
         * This method will be called constantly, whenever new date information is required
         * it receives a timestamps and adds ""val"" time units to that time and returns it as
         * a TimeObject
         *
         * @param time the time in milliseconds
         * @param val  days to add
         * @return new time object
         */","
         * @return the date slider
         */"
"<fim_prefix>distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Tiny Travel Tracker.  If not, see <http://www.gnu.org/licenses/>.

*/
/*<fim_suffix>

package com.rareventure.gps2.reviewer;

import android.content.Context;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;

import com.codeslap.dateslider.DayLabeler;
impo<fim_middle>","
 * Copyright (C) 2011 Daniel Berndt - Codeus Ltd  -  DateSlider
 * 
 * Class for setting up the dialog and initializing the underlying
 * ScrollLayouts
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
/*
 * Copyright (C) 2011 Daniel Berndt - Codeus Ltd  -  DateSlider
 * 
 * Class for setting up the dialog and initializing the underlying
 * ScrollLayouts
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2<fim_middle>"," 
    Copyright 2015 Tim Engler, Rareventure LLC

    This file is part of Tiny Travel Tracker.

    Tiny Travel Tracker is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Tiny Travel Tracker is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Tiny Travel Tracker.  If not, see <http://www.gnu.org/licenses/>.

*/","
 * @author Daniel Berndt
 *
 */"
"<fim_prefix>/1000l), 
        			(int)(toScrollerData.mTime.getTimeInMillis()/1000l));
        	GTG.lastSuccessfulAction = GTGAction.SET_FROM_AND_TO_DATES;
        	finish();
        }
    };

    private final android.view.View.OnClickListener mCancelButtonClickListener = new android.view.View.OnClickListener() {
        public void onClick(View v) {
            finish();
        }
    };
    /**<fim_suffix>
    public interface OnDateSetListener {
        /**
         * this method is called when a date was selected by the user
         *
         * @param view the caller of the methodZone
         */
        public void onDateSet(EnterFromDateToToDateActivity view, Calendar selectedDate);
    }

    /**
     * This class has the purpose of telling the corresponding scroller, which value<fim_middle>","
     * Defines the interface which defines the methods of the OnDateSetListener
     */","
     * This interface has to be implemented by the activity, which wants to receive the selected date
 "
"<fim_prefix>ves a timestamps and adds ""val"" time units to that time and returns it as
         * a TimeObject
         *
         * @param time the time in milliseconds
         * @param val  days to add
         * @return new time object
         */
        public abstract TimeObject add(long time, int val);

        protected abstract TimeObject timeObjectFromCalendar(Calendar c);
    }

    /**<fim_suffix>
    public static class TimeObject {
        public final CharSequence text;
        public final long startTime, endTime;

        public TimeObject(final CharSequence text, final long startTime, final long endTime) {
            this.text = text;
            this.startTime = startTime;
            this.endTime = endTime;
        }
    }
    
	@Override
	public int getRequirements() <fim_middle>","
     * Very simple helper class that defines a time unit with a label (text) its start-
     * and end date
     */","
     * A time object that is used to display the time in a TextView
     */"
"<fim_prefix>t eu.europa.ec.itb.validation.commons.error.ValidatorException;

/**
 * Enum for the types of violation levels linked to encountered syntax issues.
 */
public enum ViolationLevel {

    /** Reported as an error in the validation report. */
    ERROR(ViolationLevel.ERROR_VALUE),
    /** Reported as a warning in the validation report. */
    WARNING(ViolationLevel.WARNING_VALUE),
    /**<fim_suffix>
    INFO(ViolationLevel.INFO_VALUE),
    /** Not included in the validation report (i.e. ignored). */
    NONE(ViolationLevel.NONE_VALUE);

    /** The String value of the error level. */
    public static final String ERROR_VALUE = ""error"";
    /** The String value of the warning level. */
    public static final String WARNING_VALUE = ""warning"";
    /** The String value of the info <fim_middle>", Reported as an information message in the validation report. */, Reported as an info in the validation report. */
"<fim_prefix>package eu.europa.ec.itb.csv.validation;

import eu.europa.ec.itb.validation.commons.error.ValidatorException;

/**
 * Enum for the types of violation levels linked to encountered syntax issues.
 */
public enum ViolationLevel {

    /**<fim_suffix>
    ERROR(ViolationLevel.ERROR_VALUE),
    /** Reported as a warning in the validation report. */
    WARNING(ViolationLevel.WARNING_VALUE),
    /** Reported as an information message in the validation report. */
    INFO(ViolationLevel.INFO_VALUE),
    /** Not included in the validation report (i.e. ignored). */
    NONE(ViolationLevel.NONE_VALUE);

    /** The String value of the er<fim_middle>", Reported as an error in the validation report. */, Reported as an error in the validation report. */
"<fim_prefix>s linked to encountered syntax issues.
 */
public enum ViolationLevel {

    /** Reported as an error in the validation report. */
    ERROR(ViolationLevel.ERROR_VALUE),
    /** Reported as a warning in the validation report. */
    WARNING(ViolationLevel.WARNING_VALUE),
    /** Reported as an information message in the validation report. */
    INFO(ViolationLevel.INFO_VALUE),
    /**<fim_suffix>
    NONE(ViolationLevel.NONE_VALUE);

    /** The String value of the error level. */
    public static final String ERROR_VALUE = ""error"";
    /** The String value of the warning level. */
    public static final String WARNING_VALUE = ""warning"";
    /** The String value of the info level. */
    public static final String INFO_VALUE = ""info"";
    /** The String value of the none lev<fim_middle>", Not included in the validation report (i.e. ignored). */, No message is reported. */
"<fim_prefix>package eu.europa.ec.itb.csv.validation;

import eu.europa.ec.itb.validation.commons.error.ValidatorException;

/**
 * Enum for the types of violation levels linked to encountered syntax issues.
 */
public enum ViolationLevel {

    /** Reported as an error in the validation report. */
    ERROR(ViolationLevel.ERROR_VALUE),
    /**<fim_suffix>
    WARNING(ViolationLevel.WARNING_VALUE),
    /** Reported as an information message in the validation report. */
    INFO(ViolationLevel.INFO_VALUE),
    /** Not included in the validation report (i.e. ignored). */
    NONE(ViolationLevel.NONE_VALUE);

    /** The String value of the error level. */
    public static final String ERROR_VALUE = ""error"";
    /** The String value of th<fim_middle>", Reported as a warning in the validation report. */, Reported as a warning in the validation report. */
"<fim_prefix>n the validation report. */
    ERROR(ViolationLevel.ERROR_VALUE),
    /** Reported as a warning in the validation report. */
    WARNING(ViolationLevel.WARNING_VALUE),
    /** Reported as an information message in the validation report. */
    INFO(ViolationLevel.INFO_VALUE),
    /** Not included in the validation report (i.e. ignored). */
    NONE(ViolationLevel.NONE_VALUE);

    /**<fim_suffix>
    public static final String ERROR_VALUE = ""error"";
    /** The String value of the warning level. */
    public static final String WARNING_VALUE = ""warning"";
    /** The String value of the info level. */
    public static final String INFO_VALUE = ""info"";
    /** The String value of the none level. */
    public static final String NONE_VALUE = ""none"";

    private final String n<fim_middle>", The String value of the error level. */, The String value of the error level. */
"<fim_prefix>e validation report. */
    WARNING(ViolationLevel.WARNING_VALUE),
    /** Reported as an information message in the validation report. */
    INFO(ViolationLevel.INFO_VALUE),
    /** Not included in the validation report (i.e. ignored). */
    NONE(ViolationLevel.NONE_VALUE);

    /** The String value of the error level. */
    public static final String ERROR_VALUE = ""error"";
    /**<fim_suffix>
    public static final String WARNING_VALUE = ""warning"";
    /** The String value of the info level. */
    public static final String INFO_VALUE = ""info"";
    /** The String value of the none level. */
    public static final String NONE_VALUE = ""none"";

    private final String name;

    /**
     * Constructor.
     *
     * @param name The level name.
     */
    ViolationLevel(S<fim_middle>", The String value of the warning level. */, The String value of the warning level. */
"<fim_prefix>e in the validation report. */
    INFO(ViolationLevel.INFO_VALUE),
    /** Not included in the validation report (i.e. ignored). */
    NONE(ViolationLevel.NONE_VALUE);

    /** The String value of the error level. */
    public static final String ERROR_VALUE = ""error"";
    /** The String value of the warning level. */
    public static final String WARNING_VALUE = ""warning"";
    /**<fim_suffix>
    public static final String INFO_VALUE = ""info"";
    /** The String value of the none level. */
    public static final String NONE_VALUE = ""none"";

    private final String name;

    /**
     * Constructor.
     *
     * @param name The level name.
     */
    ViolationLevel(String name) {
        this.name = name;
    }

    /**
     * @return The level's name.
     */
    publi<fim_middle>", The String value of the info level. */, The String value of the info level. */
"<fim_prefix>idation report (i.e. ignored). */
    NONE(ViolationLevel.NONE_VALUE);

    /** The String value of the error level. */
    public static final String ERROR_VALUE = ""error"";
    /** The String value of the warning level. */
    public static final String WARNING_VALUE = ""warning"";
    /** The String value of the info level. */
    public static final String INFO_VALUE = ""info"";
    /**<fim_suffix>
    public static final String NONE_VALUE = ""none"";

    private final String name;

    /**
     * Constructor.
     *
     * @param name The level name.
     */
    ViolationLevel(String name) {
        this.name = name;
    }

    /**
     * @return The level's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Return the enum that maps to the pr<fim_middle>", The String value of the none level. */, The String value of the none level. */
"<fim_prefix>tatic final String ERROR_VALUE = ""error"";
    /** The String value of the warning level. */
    public static final String WARNING_VALUE = ""warning"";
    /** The String value of the info level. */
    public static final String INFO_VALUE = ""info"";
    /** The String value of the none level. */
    public static final String NONE_VALUE = ""none"";

    private final String name;

    /**<fim_suffix>
    ViolationLevel(String name) {
        this.name = name;
    }

    /**
     * @return The level's name.
     */
    public String getName() {
        return name;
    }

    /**
     * Return the enum that maps to the provided violation level name.
     *
     * @param name The name.
     * @return The enum.
     * @throws IllegalArgumentException If the name is unsupported.
     <fim_middle>","
     * Constructor.
     *
     * @param name The level name.
     */","
     * Creates a new violation level.
     *
     * @param name The name.
  "
"<fim_prefix>ng"";
    /** The String value of the info level. */
    public static final String INFO_VALUE = ""info"";
    /** The String value of the none level. */
    public static final String NONE_VALUE = ""none"";

    private final String name;

    /**
     * Constructor.
     *
     * @param name The level name.
     */
    ViolationLevel(String name) {
        this.name = name;
    }

    /**<fim_suffix>
    public String getName() {
        return name;
    }

    /**
     * Return the enum that maps to the provided violation level name.
     *
     * @param name The name.
     * @return The enum.
     * @throws IllegalArgumentException If the name is unsupported.
     */
    public static ViolationLevel byName(String name) {
        if (name == null) {
            return null;
     <fim_middle>","
     * @return The level's name.
     */","
     * Return the name of the level.
     *"
"<fim_prefix>package eu.europa.ec.itb.csv.validation;

import eu.europa.ec.itb.validation.commons.error.ValidatorException;

/**<fim_suffix>
public enum ViolationLevel {

    /** Reported as an error in the validation report. */
    ERROR(ViolationLevel.ERROR_VALUE),
    /** Reported as a warning in the validation report. */
    WARNING(ViolationLevel.WARNING_VALUE),
    /** Reported as an information message in the validation report. */
    INFO(ViolationLevel.INFO_VALUE),
    /** Not included in the validation report (i.<fim_middle>","
 * Enum for the types of violation levels linked to encountered syntax issues.
 */","
 * Enumeration of the possible levels of violation.
 */"
"<fim_prefix> /** The String value of the none level. */
    public static final String NONE_VALUE = ""none"";

    private final String name;

    /**
     * Constructor.
     *
     * @param name The level name.
     */
    ViolationLevel(String name) {
        this.name = name;
    }

    /**
     * @return The level's name.
     */
    public String getName() {
        return name;
    }

    /**<fim_suffix>
    public static ViolationLevel byName(String name) {
        if (name == null) {
            return null;
        } else {
            if (ERROR.name.equals(name)) {
                return ERROR;
            } else if (WARNING.name.equals(name)) {
                return WARNING;
            } else if (INFO.name.equals(name)) {
                return INFO;
            } else if (NONE<fim_middle>","
     * Return the enum that maps to the provided violation level name.
     *
     * @param name The name.
     * @return The enum.
     * @throws IllegalArgumentException If the name is unsupported.
     */","
     * @return The level's name.
     */"
"<fim_prefix> the type of recognition variables which need to be also 
	 * attributed towards an outgoing buffer.
	 */
	public OutBuffer(int opCode, Type type) {
		super(opCode, type);
	}

	/**
	 * Constructs a new fixed output buffer.
	 * @param opCode The operation code which is used 
	 * to associate the data piece with it's handler.
	 */
	public OutBuffer(int opCode) {
		super(opCode);
	}

	/**<fim_suffix>
	public OutBuffer(ChannelBuffer buf) {
		super(buf);
	}

	/**
	 * Constructs a new raw fixed output buffer.
	 */
	public OutBuffer() {
		super(-1);
	}

	/**
	 * Writes one <code>byte</code> to the buffer.
	 * @param v The byte's value.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer write(int v) {
		buf.writeByte(v);
		return this;
	}

	/**
	 * Writes numerous<fim_middle>","
	 * Constructs a new fixed raw output buffer.
	 * @param buf A specific payload buffer to use as the internal buffer.
	 */","
	 * Constructs a new fixed output buffer.
	 * @param opCode The operation code which is used 
	 * to associate the data piece"
"<fim_prefix>is writer's instance, for chaining.
	 * @throws IllegalArgumentException should the length of
	 * <tt>v</vv> (the singleton variational argument parameter)
	 * be less than <tt>1</tt>.
	 */
	public OutBuffer writeLong(long... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		for (long i : v) writeLong(i);
				return this;
	}

	/**<fim_suffix>
	public OutBuffer writeString(String v) {
		BufferUtils.writeString(buf, v);
		return this;
	}

	/**
	 * Transfers the specified source array's data to this buffer 
	 * starting at the current writerIndex and increases the writerIndex 
	 * by the number of the transferred bytes (= length).
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeBytes(byte[] src, <fim_middle>","
	 * Writes one <code>String</code> to the buffer.
	 * @param v The string's value.
	 * @return The writer's instance, for chaining.
	 */","
	 * Transfers the specified source array's data to this buffer 
	 * starting at the current writerIndex and increases the writerIndex 
	 * by the number of the transferred bytes (= length).
	"
"<fim_prefix>e... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		buf.writeBytes(v);
		return this;
	}

	/**
	 * Writes one <code>byte</code> special type <tt>A</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeByteA(int v) {
		return write(v + 128);
	}

	/**<fim_suffix>
	public OutBuffer writeByteC(int v) {
		return write(- v);
	}

	/**
	 * Writes one <code>byte</code> special type <tt>S</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeByteS(int v) {
		return write(128 - v);
	}

	/**
	 * Writes one <code>short</code> to the buffer.
	 * @param v The short's value.
	 *<fim_middle>","
	 * Writes one <code>byte</code> special type <tt>C</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */","
	 * Writes one <code>byte</code> special type <tt>B</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */"
"<fim_prefix>Constructs a new fixed output buffer.
	 * @param opCode The operation code which is used 
	 * to associate the data piece with it's handler.
	 */
	public OutBuffer(int opCode) {
		super(opCode);
	}

	/**
	 * Constructs a new fixed raw output buffer.
	 * @param buf A specific payload buffer to use as the internal buffer.
	 */
	public OutBuffer(ChannelBuffer buf) {
		super(buf);
	}

	/**<fim_suffix>
	public OutBuffer() {
		super(-1);
	}

	/**
	 * Writes one <code>byte</code> to the buffer.
	 * @param v The byte's value.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer write(int v) {
		buf.writeByte(v);
		return this;
	}

	/**
	 * Writes numerous <code>byte</code>s to the buffer.
	 * @param v The array of bytes to write.
	 * 
	 * <p><i>Be sure the provided <fim_middle>","
	 * Constructs a new raw fixed output buffer.
	 */","
	 * Constructs a new fixed raw output buffer.
	 *"
"<fim_prefix>structs a new output buffer.
	 * @param opCode The operation code which is used 
	 * to associate the data piece with it's handler.
	 * @param type The type of packet. This marks the additions needed and 
	 * the type of recognition variables which need to be also 
	 * attributed towards an outgoing buffer.
	 */
	public OutBuffer(int opCode, Type type) {
		super(opCode, type);
	}

	/**<fim_suffix>
	public OutBuffer(int opCode) {
		super(opCode);
	}

	/**
	 * Constructs a new fixed raw output buffer.
	 * @param buf A specific payload buffer to use as the internal buffer.
	 */
	public OutBuffer(ChannelBuffer buf) {
		super(buf);
	}

	/**
	 * Constructs a new raw fixed output buffer.
	 */
	public OutBuffer() {
		super(-1);
	}

	/**
	 * Writes one <code>byte</code> to the buffer.
	<fim_middle>","
	 * Constructs a new fixed output buffer.
	 * @param opCode The operation code which is used 
	 * to associate the data piece with it's handler.
	 */","
	 * Constructs a new output buffer.
	 * @param opCode The operation code which is used 
	 * to associate the data piece with it's handler.
	 */"
"<fim_prefix>param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeByteA(int v) {
		return write(v + 128);
	}

	/**
	 * Writes one <code>byte</code> special type <tt>C</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeByteC(int v) {
		return write(- v);
	}

	/**<fim_suffix>
	public OutBuffer writeByteS(int v) {
		return write(128 - v);
	}

	/**
	 * Writes one <code>short</code> to the buffer.
	 * @param v The short's value.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeShort(int v) {
		buf.writeShort(v);
		return this;
	}

	/**
	 * Writes numerous <code>short</code>s to the buffer.
	 * @param v The array of shorts to write<fim_middle>","
	 * Writes one <code>byte</code> special type <tt>S</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */","
	 * Writes one <code>byte</code> special type <tt>S</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */"
"<fim_prefix>uffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeByteS(int v) {
		return write(128 - v);
	}

	/**
	 * Writes one <code>short</code> to the buffer.
	 * @param v The short's value.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeShort(int v) {
		buf.writeShort(v);
		return this;
	}

	/**<fim_suffix>
	public OutBuffer writeShort(int... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		for (int i : v) writeShort(i);
				return this;
	}

	/**
	 * Writes one <code>int</code> to the buffer.
	 * @param v The integer's value.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeInt(int v) {
		buf.writeInt(v<fim_middle>","
	 * Writes numerous <code>short</code>s to the buffer.
	 * @param v The array of shorts to write.
	 * 
	 * <p><i>Be sure the provided length of this variational 
	 * argument attains a value of <tt>1</tt> or greater.</i></p>
	 * 
	 * @return This writer's instance, for chaining.
	 * @throws IllegalArgumentException should the length of
	 * <tt>v</vv> (the singleton variational argument parameter)
	 * be less than <tt>1</tt>.
	 */","
	 * Writes one <code>short</code> to the buffer.
	 * @param v The value of the short.
	 * @return This writer's instance, for chaining.
	 */"
"<fim_prefix>ort(int... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		for (int i : v) writeShort(i);
				return this;
	}

	/**
	 * Writes one <code>int</code> to the buffer.
	 * @param v The integer's value.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeInt(int v) {
		buf.writeInt(v);
		return this;
	}

	/**<fim_suffix>
	public OutBuffer writeInt(int... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		for (int i : v) writeInt(i);
				return this;
	}

	/**
	 * Writes one <code>long</code> to the buffer.
	 * @param v The long's value.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeLong(long v) {
		buf.writeLong(v);
<fim_middle>","
	 * Writes numerous <code>int</code>s to the buffer.
	 * @param v The array of integers to write.
	 * 
	 * <p><i>Be sure the provided length of this variational 
	 * argument attains a value of <tt>1</tt> or greater.</i></p>
	 * 
	 * @return This writer's instance, for chaining.
	 * @throws IllegalArgumentException should the length of
	 * <tt>v</vv> (the singleton variational argument parameter)
	 * be less than <tt>1</tt>.
	 */","
	 * Writes one <code>long</code> to the buffer.
	 * @param v The long's value.
	 * @return This writer's instance, for chaining.
	 */"
"<fim_prefix> * 
	 * @return This writer's instance, for chaining.
	 * @throws IllegalArgumentException should the length of
	 * <tt>v</vv> (the singleton variational argument parameter)
	 * be less than <tt>1</tt>.
	 */
	public OutBuffer write(byte... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		buf.writeBytes(v);
		return this;
	}

	/**<fim_suffix>
	public OutBuffer writeByteA(int v) {
		return write(v + 128);
	}

	/**
	 * Writes one <code>byte</code> special type <tt>C</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeByteC(int v) {
		return write(- v);
	}

	/**
	 * Writes one <code>byte</code> special type <tt>S</tt> to the buffer.
	 * @param v<fim_middle>","
	 * Writes one <code>byte</code> special type <tt>A</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */","
	 * Writes one <code>byte</code> special type <tt>A</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */"
"<fim_prefix>.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		for (long i : v) writeLong(i);
				return this;
	}

	/**
	 * Writes one <code>String</code> to the buffer.
	 * @param v The string's value.
	 * @return The writer's instance, for chaining.
	 */
	public OutBuffer writeString(String v) {
		BufferUtils.writeString(buf, v);
		return this;
	}

	/**<fim_suffix>
	public OutBuffer writeBytes(byte[] src, int srcIndex, int length) {
		buf.writeBytes(src, srcIndex, length);
		return this;
	}

}<fim_middle>","
	 * Transfers the specified source array's data to this buffer 
	 * starting at the current writerIndex and increases the writerIndex 
	 * by the number of the transferred bytes (= length).
	 * @return This writer's instance, for chaining.
	 */","
	 * Writes a <code>byte[]</code> to the buffer.
	 * @param src The byte array.
	 * @return The writer's instance, for chaining.
	 */"
"<fim_prefix>param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeByteC(int v) {
		return write(- v);
	}

	/**
	 * Writes one <code>byte</code> special type <tt>S</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeByteS(int v) {
		return write(128 - v);
	}

	/**<fim_suffix>
	public OutBuffer writeShort(int v) {
		buf.writeShort(v);
		return this;
	}

	/**
	 * Writes numerous <code>short</code>s to the buffer.
	 * @param v The array of shorts to write.
	 * 
	 * <p><i>Be sure the provided length of this variational 
	 * argument attains a value of <tt>1</tt> or greater.</i></p>
	 * 
	 * @return This writer's instance, for chaining.
	 * @throws IllegalArgum<fim_middle>","
	 * Writes one <code>short</code> to the buffer.
	 * @param v The short's value.
	 * @return This writer's instance, for chaining.
	 */","
	 * Writes one <code>short</code> to the buffer.
	 * @param v The value of the short.
	 * @return This writer's instance, for chaining.
	"
"<fim_prefix>.nital.net.packet.Packet;
import us.nital.util.BufferUtils;

/**
 * An object which acts as a writing buffer. You can write data to 
 * the buffer which stays recording. When the writing process is done
 * you can write the <tt>OutBuffer</tt> object to the encoder for
 * shipping towards the connected client.
 * 
 * @author Thomas Nappo
 */
public class OutBuffer extends Packet {

	/**<fim_suffix>
	public OutBuffer(int opCode, Type type) {
		super(opCode, type);
	}

	/**
	 * Constructs a new fixed output buffer.
	 * @param opCode The operation code which is used 
	 * to associate the data piece with it's handler.
	 */
	public OutBuffer(int opCode) {
		super(opCode);
	}

	/**
	 * Constructs a new fixed raw output buffer.
	 * @param buf A specific payload buffer to use as the int<fim_middle>","
	 * Constructs a new output buffer.
	 * @param opCode The operation code which is used 
	 * to associate the data piece with it's handler.
	 * @param type The type of packet. This marks the additions needed and 
	 * the type of recognition variables which need to be also 
	 * attributed towards an outgoing buffer.
	 */","
	 * Constructs a new fixed output buffer.
	 * @param opCode The operation code which is used 
	 * to associate the data piece with it's handler.
	 * @param type The type of data which is being written."
"<fim_prefix>is writer's instance, for chaining.
	 * @throws IllegalArgumentException should the length of
	 * <tt>v</vv> (the singleton variational argument parameter)
	 * be less than <tt>1</tt>.
	 */
	public OutBuffer writeShort(int... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		for (int i : v) writeShort(i);
				return this;
	}

	/**<fim_suffix>
	public OutBuffer writeInt(int v) {
		buf.writeInt(v);
		return this;
	}

	/**
	 * Writes numerous <code>int</code>s to the buffer.
	 * @param v The array of integers to write.
	 * 
	 * <p><i>Be sure the provided length of this variational 
	 * argument attains a value of <tt>1</tt> or greater.</i></p>
	 * 
	 * @return This writer's instance, for chaining.
	 * @throws IllegalArgumentE<fim_middle>","
	 * Writes one <code>int</code> to the buffer.
	 * @param v The integer's value.
	 * @return This writer's instance, for chaining.
	 */","
	 * Writes a <code>short</code> to the buffer.
	 * @param v The <code>short</code> to write.
	 * 
	 * <p><i>Be"
"<fim_prefix>eInt(int... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		for (int i : v) writeInt(i);
				return this;
	}

	/**
	 * Writes one <code>long</code> to the buffer.
	 * @param v The long's value.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeLong(long v) {
		buf.writeLong(v);
		return this;
	}

	/**<fim_suffix>
	public OutBuffer writeLong(long... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		for (long i : v) writeLong(i);
				return this;
	}

	/**
	 * Writes one <code>String</code> to the buffer.
	 * @param v The string's value.
	 * @return The writer's instance, for chaining.
	 */
	public OutBuffer writeString(String v) {
		BufferU<fim_middle>","
	 * Writes numerous <code>long</code>s to the buffer.
	 * @param v The array of longs to write.
	 * 
	 * <p><i>Be sure the provided length of this variational 
	 * argument attains a value of <tt>1</tt> or greater.</i></p>
	 * 
	 * @return This writer's instance, for chaining.
	 * @throws IllegalArgumentException should the length of
	 * <tt>v</vv> (the singleton variational argument parameter)
	 * be less than <tt>1</tt>.
	 */","
	 * Writes one <code>long</code> to the buffer.
	 * @param v The long's value.
	 * @return This writer's instance, for chaining.
	 */"
"<fim_prefix>ITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package us.nital.net.io;

import org.jboss.netty.buffer.ChannelBuffer;

import us.nital.net.packet.Packet;
import us.nital.util.BufferUtils;

/**<fim_suffix>
public class OutBuffer extends Packet {

	/**
	 * Constructs a new output buffer.
	 * @param opCode The operation code which is used 
	 * to associate the data piece with it's handler.
	 * @param type The type of packet. This marks the additions needed and 
	 * the type of recognition variables which need to be also 
	 * attributed towards an outgoing buffer.
	 */
	public OutBuffer(in<fim_middle>","
 * An object which acts as a writing buffer. You can write data to 
 * the buffer which stays recording. When the writing process is done
 * you can write the <tt>OutBuffer</tt> object to the encoder for
 * shipping towards the connected client.
 * 
 * @author Thomas Nappo
 */","
 * Represents an output buffer.
 * @author <NAME>
 * @version 1.0
 * @since 1.0
 */"
"<fim_prefix>nternal buffer.
	 */
	public OutBuffer(ChannelBuffer buf) {
		super(buf);
	}

	/**
	 * Constructs a new raw fixed output buffer.
	 */
	public OutBuffer() {
		super(-1);
	}

	/**
	 * Writes one <code>byte</code> to the buffer.
	 * @param v The byte's value.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer write(int v) {
		buf.writeByte(v);
		return this;
	}

	/**<fim_suffix>
	public OutBuffer write(byte... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		buf.writeBytes(v);
		return this;
	}

	/**
	 * Writes one <code>byte</code> special type <tt>A</tt> to the buffer.
	 * @param v The value of the byte.
	 * @return This writer's instance, for chaining.
	 */
	public OutBuffer writeByteA(int v) {
		ret<fim_middle>","
	 * Writes numerous <code>byte</code>s to the buffer.
	 * @param v The array of bytes to write.
	 * 
	 * <p><i>Be sure the provided length of this variational 
	 * argument attains a value of <tt>1</tt> or greater.</i></p>
	 * 
	 * @return This writer's instance, for chaining.
	 * @throws IllegalArgumentException should the length of
	 * <tt>v</vv> (the singleton variational argument parameter)
	 * be less than <tt>1</tt>.
	 */","
	 * Writes one <code>byte</code> array to the buffer.
	 * @param v The byte array.
	 * @return This writer's instance, for chaining.
	 */"
"<fim_prefix>o associate the data piece with it's handler.
	 */
	public OutBuffer(int opCode) {
		super(opCode);
	}

	/**
	 * Constructs a new fixed raw output buffer.
	 * @param buf A specific payload buffer to use as the internal buffer.
	 */
	public OutBuffer(ChannelBuffer buf) {
		super(buf);
	}

	/**
	 * Constructs a new raw fixed output buffer.
	 */
	public OutBuffer() {
		super(-1);
	}

	/**<fim_suffix>
	public OutBuffer write(int v) {
		buf.writeByte(v);
		return this;
	}

	/**
	 * Writes numerous <code>byte</code>s to the buffer.
	 * @param v The array of bytes to write.
	 * 
	 * <p><i>Be sure the provided length of this variational 
	 * argument attains a value of <tt>1</tt> or greater.</i></p>
	 * 
	 * @return This writer's instance, for chaining.
	 * @throws IllegalArgumentExcep<fim_middle>","
	 * Writes one <code>byte</code> to the buffer.
	 * @param v The byte's value.
	 * @return This writer's instance, for chaining.
	 */","
	 * Writes a <code>byte</code> to the buffer.
	 * @param v The byte to write.
	 * 
	 * @return This writer's instance, for chaining."
"<fim_prefix>/*<fim_suffix>

package us.nital.net.io;

import org.jboss.netty.buffer.ChannelBuffer;

import us.nital.net.packet.Packet;
import us.nital.util.BufferUtils;

/**
 * An object which acts as a writing buffer. You can write data to 
 * the buffer which stays recording. When the writing process is done
 * you can write the <tt>OutBuffer</tt> object to the encoder for
 * shipping towards the connected cl<fim_middle>","
 * Nital is an effort to provide a well documented, powerful, scalable, and robust 
 * RuneScape server framework delivered open-source to all users.
 *
 *  Copyright (C) 2011 Nital Software
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * An object which acts as a writing buffer. You can write data to 
 * the buffer which stays recording. When the writing process is done
 * you can write the <tt>OutBuffer</tt> object to the encoder for
 * shipping towards the connected cleint.
 * 
 * @author Nital
 *
 */"
"<fim_prefix>n This writer's instance, for chaining.
	 * @throws IllegalArgumentException should the length of
	 * <tt>v</vv> (the singleton variational argument parameter)
	 * be less than <tt>1</tt>.
	 */
	public OutBuffer writeInt(int... v) {
		if (v.length < 1) {
			throw new IllegalArgumentException(""Must write at least one value."");
		}
		for (int i : v) writeInt(i);
				return this;
	}

	/**<fim_suffix>
	public OutBuffer writeLong(long v) {
		buf.writeLong(v);
		return this;
	}

	/**
	 * Writes numerous <code>long</code>s to the buffer.
	 * @param v The array of longs to write.
	 * 
	 * <p><i>Be sure the provided length of this variational 
	 * argument attains a value of <tt>1</tt> or greater.</i></p>
	 * 
	 * @return This writer's instance, for chaining.
	 * @throws IllegalArgument<fim_middle>","
	 * Writes one <code>long</code> to the buffer.
	 * @param v The long's value.
	 * @return This writer's instance, for chaining.
	 */","
	 * Writes a <code>long</code> to the buffer.
	 * @param v The long to write.
	 * 
	 * <p><i>Be sure the provided length"
"<fim_prefix>package jacusa.filter;

/**<fim_suffix>
public class FilterByRatio {

	private final double minRatio;
	
	public FilterByRatio(final double minRatio) {
		this.minRatio = minRatio;
	}
	
	/**
	 * Filters sites, based on count, filteredCount, and required minimal 
	 * filterRatio.
	 * 
	 * @param count				observed count
	 * @param filteredCount		count after filtering
	 * @return
	 * 
	 * Tested in @see jacusa.filter.FilterByRat<fim_middle>","
 * This filters sites, where the ratio of observed count and count after 
 * filtering(remaining count) does not meet a predefined ratio.
 * e.g.:
 * Required minRatio = 0.5, 
 * observed count = 10, 
 * after filtering filteredCount = 2 (8 have been filtered)
 * => 2 / 10 < 0.5 -> site will get filtered
 */","
 * Filters sites, based on count, filteredCount, and required minimal 
 * filterRatio.
 * 
 * @author <NAME> (https://github.com/yoo16/)
 *
 */"
"<fim_prefix>er 
 * filtering(remaining count) does not meet a predefined ratio.
 * e.g.:
 * Required minRatio = 0.5, 
 * observed count = 10, 
 * after filtering filteredCount = 2 (8 have been filtered)
 * => 2 / 10 < 0.5 -> site will get filtered
 */
public class FilterByRatio {

	private final double minRatio;
	
	public FilterByRatio(final double minRatio) {
		this.minRatio = minRatio;
	}
	
	/**<fim_suffix>
	public boolean filter(final int count, final int filteredCount) {
		return (double)filteredCount / (double)count <= minRatio;
	}

}
<fim_middle>","
	 * Filters sites, based on count, filteredCount, and required minimal 
	 * filterRatio.
	 * 
	 * @param count				observed count
	 * @param filteredCount		count after filtering
	 * @return
	 * 
	 * Tested in @see jacusa.filter.FilterByRatioTest
	 */","
	 * @param count
	 * @param filteredCount
	 * @return true if the site should be filtered
	 */"
"<fim_prefix>/*<fim_suffix>

package ca.rmen.nounours.android.handheld.compat;

import android.annotation.TargetApi;
import android.view.Display;

@TargetApi(8)
class Api8Helper {
    private Api8Helper() {
        // prevent instantiation
    }

    static int getRotation(Display display) {
        return display.getRotation();
    }
}
<fim_middle>","
 *   Copyright (c) 2009 - 2015 Carmen Alvarez
 *
 *   This file is part of Nounours for Android.
 *
 *   Nounours for Android is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Nounours for Android is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Nounours for Android.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by rmen on 10/11/15.
 */"
"<fim_prefix>/**<fim_suffix>
package com.golemgame.states;

/**
 * This class just determines how much memory various attributes of the program should be allowed, given an input 
 * maximum memory.
 * @author Sam
 *
 */
public class MemoryManager {
	public static final long MEGABYTE = 1024*1024;
	
	//Note: there are probably about 96 mB of allocated overhead for the GC, etc.
	
	public static long ge<fim_middle>","*****************************************************************************
 * Copyright 2008, 2009, 2010 Sam Bayless.
 * 
 *     This file is part of Golems.
 * 
 *     Golems is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 * 
 *     Golems is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 * 
 *     You should have received a copy of the GNU General Public License
 *     along with Golems. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/","
 * 
 */"
"<fim_prefix>    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 * 
 *     You should have received a copy of the GNU General Public License
 *     along with Golems. If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/
package com.golemgame.states;

/**<fim_suffix>
public class MemoryManager {
	public static final long MEGABYTE = 1024*1024;
	
	//Note: there are probably about 96 mB of allocated overhead for the GC, etc.
	
	public static long getMaximumMemory()
	{
		return GeneralSettings.getInstance().getMaxMemory().getValue()* MEGABYTE;
	}
	
	public static long getPhysicsMemory()
	{
		if(getMaximumMemory()/MEGABYTE<= 64)
		{
			r<fim_middle>","
 * This class just determines how much memory various attributes of the program should be allowed, given an input 
 * maximum memory.
 * @author Sam
 *
 */","
 * This class is used to manage memory usage.
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>/*<fim_suffix>
@org.eclipse.jdt.annotation.NonNullByDefault
package org.sonarlint.eclipse.ui.internal.notifications.internal;
<fim_middle>","
 * SonarLint for Eclipse
 * Copyright (C) 2015-2024 SonarSource SA
 * sonarlint@sonarsource.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>package com.realjamapps.yamusicapp.specifications.impl.sql;

import com.realjamapps.yamusicapp.database.sql.tables.TablePerformers;
import com.realjamapps.yamusicapp.specifications.ISqlSpecification;

/**<fim_suffix>

public class SqlAllPerformersByGenreSpecification implements ISqlSpecification {

    private String[] mSearch;

    public SqlAllPerformersByGenreSpecification(String[] wordsForSearch) {
            this.mSearch = wordsForSearch;
    }

    @Override
    public String toSqlQuery() {
        return getFinalQuery();
    }

    private String getSelectQuery() {
        return ""SELECT  <fim_middle>","
 * Created by affy on 04.10.16.
 */","
 * Created by <NAME> on 2018-06-12.
"
"<fim_prefix>/*<fim_suffix>

package com.github.legoatoom.connectiblechains.entity;

import com.github.legoatoom.connectiblechains.chain.ChainLink;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.fabricmc.fabric.api.tag.convention.v2.ConventionalItemTags;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.enti<fim_middle>","
 * Copyright (C) 2024 legoatoom.
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix> {
        return super.isFireImmune();
    }

    @Override
    protected void readCustomDataFromNbt(NbtCompound tag) {
    }

    @Override
    protected void writeCustomDataToNbt(NbtCompound tag) {
    }

    /**
     * Makes sure that nothing can walk through it.
     *
     * @return true
     */
    @Override
    public boolean isCollidable() {
        return true;
    }

    /**<fim_suffix>
    @Override
    public boolean handleAttack(Entity attacker) {
        if (attacker instanceof PlayerEntity playerEntity) {
            this.damage(this.getDamageSources().playerAttack(playerEntity), 0.0F);
        } else {
            playSound(getHitSound(), 0.5F, 1.0F);
        }
        return true;
    }


    /**
     * @see ChainKnotEntity#damage(DamageSource, float)
     */
<fim_middle>","
     * @see ChainKnotEntity#handleAttack(Entity)
     */","
     * Makes sure that nothing can walk through it.
     *
  "
"<fim_prefix>craft.util.Hand;
import net.minecraft.world.World;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * ChainCollisionEntity is an Entity that is invisible but has a collision.
 * It is used to create a collision for links.
 *
 * @author legoatoom, Qendolin
 */
public class ChainCollisionEntity extends Entity implements ChainLinkEntity {

    /**<fim_suffix>
    @Nullable
    private ChainLink link;

    @NotNull
    private Item linkSourceItem;


    public ChainCollisionEntity(World world, double x, double y, double z, @NotNull ChainLink link) {
        this(ModEntityTypes.CHAIN_COLLISION, world);
        this.link = link;
        this.setPosition(x, y, z);
        this.linkSourceItem = link.sourceItem;
    }

    public ChainCollisionE<fim_middle>","
     * The link that this collider is a part of.
     */","
     * The link that this entity is attached to.
     */"
"<fim_prefix> world);
    }

    @SuppressWarnings(""unused"")
    public @Nullable ChainLink getLink() {
        // Only available in the server. In the client, it is null.
        return link;
    }

    public @NotNull Item getLinkSourceItem() {
        // Always available.
        return linkSourceItem;
    }

    @Override
    public boolean canHit() {
        return !isRemoved();
    }

    /**<fim_suffix>
    @Override
    public boolean isPushable() {
        return false;
    }

    /**
     * We only allow the collision box to be rendered if a player is holding a shears type item.
     * This might be helpful when using F3+B to see the boxes of the chain.
     *
     * @param distance the camera distance from the collider.
     * @return true when it should be rendered
     */
    @<fim_middle>","
     * We don't want to be able to push the collision box of the chain.
     *
     * @return false
     */","
     * We only allow the collision box to be rendered if a player is holding a shears type item.
     * This might be helpful when using F3+B to"
"<fim_prefix>blic @NotNull Item getLinkSourceItem() {
        // Always available.
        return linkSourceItem;
    }

    @Override
    public boolean canHit() {
        return !isRemoved();
    }

    /**
     * We don't want to be able to push the collision box of the chain.
     *
     * @return false
     */
    @Override
    public boolean isPushable() {
        return false;
    }

    /**<fim_suffix>
    @Environment(EnvType.CLIENT)
    @Override
    public boolean shouldRender(double distance) {
        ClientPlayerEntity player = MinecraftClient.getInstance().player;
        if (player != null && player.isHolding(itemStack -> itemStack.isIn(ConventionalItemTags.SHEAR_TOOLS))) {
            return super.shouldRender(distance);
        } else {
            return false;
        }
<fim_middle>","
     * We only allow the collision box to be rendered if a player is holding a shears type item.
     * This might be helpful when using F3+B to see the boxes of the chain.
     *
     * @param distance the camera distance from the collider.
     * @return true when it should be rendered
     */","
     * We don't want to be able to push the collision box of the chain.
     *
     * @return false
     */"
"<fim_prefix>SHEAR_TOOLS))) {
            return super.shouldRender(distance);
        } else {
            return false;
        }
    }

    @Override
    public boolean isFireImmune() {
        return super.isFireImmune();
    }

    @Override
    protected void readCustomDataFromNbt(NbtCompound tag) {
    }

    @Override
    protected void writeCustomDataToNbt(NbtCompound tag) {
    }

    /**<fim_suffix>
    @Override
    public boolean isCollidable() {
        return true;
    }

    /**
     * @see ChainKnotEntity#handleAttack(Entity)
     */
    @Override
    public boolean handleAttack(Entity attacker) {
        if (attacker instanceof PlayerEntity playerEntity) {
            this.damage(this.getDamageSources().playerAttack(playerEntity), 0.0F);
        } else {
            playSo<fim_middle>","
     * Makes sure that nothing can walk through it.
     *
     * @return true
     */","
     * @see ChainKnotEntity#shouldRender(double)
     */"
"<fim_prefix>
    /**
     * @see ChainKnotEntity#handleAttack(Entity)
     */
    @Override
    public boolean handleAttack(Entity attacker) {
        if (attacker instanceof PlayerEntity playerEntity) {
            this.damage(this.getDamageSources().playerAttack(playerEntity), 0.0F);
        } else {
            playSound(getHitSound(), 0.5F, 1.0F);
        }
        return true;
    }


    /**<fim_suffix>
    @Override
    public boolean damage(DamageSource source, float amount) {
        ActionResult result = ChainLinkEntity.onDamageFrom(this, source, getHitSound());

        if (result.isAccepted()) {
            destroyLinks(result == ActionResult.SUCCESS);
            return true;
        }
        return false;
    }

    @Override
    public void destroyLinks(boolean mayDrop) {
 <fim_middle>","
     * @see ChainKnotEntity#damage(DamageSource, float)
     */","
     * @see ChainKnotEntity#handleFallDamage(float, float, DamageSource)
 "
"<fim_prefix>  return false;
    }

    @Override
    public void destroyLinks(boolean mayDrop) {
        if (link != null) link.destroy(mayDrop);
    }

    private SoundEvent getHitSound() {
        if (link != null) {
            return ChainLink.getSoundGroup(link.sourceItem).getHitSound();
        } else {
            return ChainLink.getSoundGroup(null).getHitSound();
        }
    }

    /**<fim_suffix>
    @Override
    public ActionResult interact(PlayerEntity player, Hand hand) {
        if (ChainLinkEntity.canDestroyWith(player.getStackInHand(hand))) {
            destroyLinks(!player.isCreative());
            return ActionResult.SUCCESS;
        }
        return ActionResult.PASS;
    }

    @Override
    protected void initDataTracker(DataTracker.Builder builder) {

    }

   <fim_middle>","
     * Interaction (attack or use) of a player and this entity.
     * Tries to destroy the link with the item in the players hand.
     *
     * @param player The player that interacted.
     * @param hand   The hand that interacted.
     * @return {@link ActionResult#SUCCESS} when the interaction was successful.
     */","
     * Called when the entity is attacked.
     */"
"<fim_prefix>      int id = Registries.ITEM.getRawId(linkSourceItem);
        return new EntitySpawnS2CPacket(this, entityTrackerEntry, id);
    }

    @Override
    public void onSpawnPacket(EntitySpawnS2CPacket packet) {
        super.onSpawnPacket(packet);
        int rawChainItemSourceId = packet.getEntityData();
        linkSourceItem = Registries.ITEM.get(rawChainItemSourceId);
    }

    /**<fim_suffix>
    @Override
    public void tick() {
        if (getWorld().isClient()) return;
        // Condition can be met when the knots were removed with commands
        // but the collider still exists
        if (link != null && link.needsBeDestroyed()) link.destroy(true);

        // Collider removes itself when the link is dead
        if (link == null || link.isDead()) {
            re<fim_middle>","
     * Destroys broken links and removes itself when there is no alive link.
     */","
     * Called when the link is destroyed
     */"
"<fim_prefix>minecraft.network.packet.s2c.play.EntitySpawnS2CPacket;
import net.minecraft.registry.Registries;
import net.minecraft.server.network.EntityTrackerEntry;
import net.minecraft.sound.SoundEvent;
import net.minecraft.util.ActionResult;
import net.minecraft.util.Hand;
import net.minecraft.world.World;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**<fim_suffix>
public class ChainCollisionEntity extends Entity implements ChainLinkEntity {

    /**
     * The link that this collider is a part of.
     */
    @Nullable
    private ChainLink link;

    @NotNull
    private Item linkSourceItem;


    public ChainCollisionEntity(World world, double x, double y, double z, @NotNull ChainLink link) {
        this(ModEntityTypes.CHAIN_COLLISION, world<fim_middle>","
 * ChainCollisionEntity is an Entity that is invisible but has a collision.
 * It is used to create a collision for links.
 *
 * @author legoatoom, Qendolin
 */","
 * A collision entity that represents a collision between a chain link and a block.
 */"
"<fim_prefix>orphia.annotations.Entity;
import emu.grasscutter.data.GameData;
import emu.grasscutter.data.excels.BargainData;
import emu.grasscutter.net.proto.BargainResultTypeOuterClass.BargainResultType;
import emu.grasscutter.net.proto.BargainSnapshotOuterClass.BargainSnapshot;
import emu.grasscutter.utils.Utils;
import lombok.*;

@Data
@Entity
@Builder
public final class BargainRecord {
    /**<fim_suffix>
    public static BargainRecord resolve(int bargainId) {
        var bargainData = GameData.getBargainDataMap().get(bargainId);
        if (bargainData == null)
            throw new RuntimeException(""No bargain data found for "" + bargainId + ""."");

        return BargainRecord.builder().bargainId(bargainId).build().determineBase(bargainData);
    }

    private int bargainId;
    pri<fim_middle>","
     * Provides an instance of a bargain record. Uses information from game resources.
     *
     * @param bargainId The ID of the bargain.
     * @return An instance of a bargain record.
     */","
     * Resolve a bargain record from a bargain snapshot.
     *
     * @param bargainSnapshot the bargain snapshot
     * @return the resolved bargain record
     */"
"<fim_prefix>ood.
            this.currentMood -= Utils.randomRange(1, 3);
            // Return a failure.
            return this.result = BargainResultType.BARGAIN_SINGLE_FAIL;
        } else {
            // Complete the bargain.
            this.setFinished(true);
            // Return a success.
            return this.result = BargainResultType.BARGAIN_COMPLETE_SUCC;
        }
    }

    /**<fim_suffix>
    public BargainSnapshot toSnapshot() {
        return BargainSnapshot.newBuilder()
                .setBargainId(this.getBargainId())
                .setCurMood(this.getCurrentMood())
                .setBALOPACHCDB(this.getExpectedPrice())
                .setIOCNPJJNHLD(this.getLowestPrice())
                .build();
    }
}
<fim_middle>","
     * @return A snapshot of this bargain record.
     */","
     * Get the bargain snapshot.
     *
   "
"<fim_prefix>price.
        var price = data.getExpectedValue();
        this.setExpectedPrice(Utils.randomRange(price.get(0), price.get(1)));
        // Set the lowest price.
        this.setLowestPrice(price.get(0));

        // Set the base mood.
        var mood = data.getRandomMood();
        this.setCurrentMood(Utils.randomRange(mood.get(0), mood.get(1)));

        return this;
    }

    /**<fim_suffix>
    public BargainResultType applyOffer(int offer) {
        if (offer < this.getLowestPrice()) {
            // Decrease the mood.
            this.currentMood -= Utils.randomRange(1, 3);
            // Return a failure.
            return this.result = BargainResultType.BARGAIN_SINGLE_FAIL;
        }

        if (offer > this.getExpectedPrice()) {
            // Complete the bargain<fim_middle>","
     * Computes an offer's validity.
     *
     * @param offer The offer to compute.
     * @return The result of the offer.
     */","
     * Applies an offer to the bargain.
     *
     * @param offer The offer to apply.
     * @return The result of the bargain.
  "
"<fim_prefix>)
            throw new RuntimeException(""No bargain data found for "" + bargainId + ""."");

        return BargainRecord.builder().bargainId(bargainId).build().determineBase(bargainData);
    }

    private int bargainId;
    private int lowestPrice;
    private int expectedPrice;

    private int currentMood;

    private boolean finished;
    private BargainResultType result;

    /**<fim_suffix>
    public BargainRecord determineBase(BargainData data) {
        // Set the expected price.
        var price = data.getExpectedValue();
        this.setExpectedPrice(Utils.randomRange(price.get(0), price.get(1)));
        // Set the lowest price.
        this.setLowestPrice(price.get(0));

        // Set the base mood.
        var mood = data.getRandomMood();
        this.setCurren<fim_middle>", Determines the price of the bargain. */,"
     * Creates a new"
"<fim_prefix>bjectOpenHashSet;
import net.minecraft.resources.ResourceLocation;
import org.jetbrains.annotations.Nullable;

import java.util.Objects;

public final class OptionIdentifier<T> {
    private final String modId;
    private final String path;
    private final Class<T> clz;

    private static final ObjectOpenHashSet<OptionIdentifier<?>> IDENTIFIERS = new ObjectOpenHashSet<>();

    /**<fim_suffix>
    public static final OptionIdentifier<Void> EMPTY = create("""", """", Void.class);

    private OptionIdentifier(String modId, String path, Class<T> clz) {
        this.modId = modId;
        this.path = path;
        this.clz = clz;
    }

    public String getModId() {
        return this.modId;
    }

    public String getPath() {
        return this.path;
    }

    public Class<T<fim_middle>","
     * Constant {@link OptionIdentifier} that may be used to avoid returning null values.
     */","
     * Creates a new option identifier.
     *
     * @param modId"
"<fim_prefix>package org.weight2fit.infrastructure;

import com.garmin.fit.*;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;
import org.weight2fit.domain.FitFields;

import java.io.InputStream;
import java.util.*;

/**<fim_suffix>
public class WeightScaleInputStreamMatcher extends TypeSafeMatcher<InputStream> {

    private static final Map<Integer, FitFields> mapping = new HashMap<Integer, FitFields>();

    // see static initializer in com.garmin.fit.WeightScaleMesg class
    static {
        mapping.put(Fit.FIELD_NUM_TIMESTAMP, FitFields.TIMESTAMP);
        mapping.put(0, FitFields.WEIGHT);
        mapping.p<fim_middle>","
 * @author Andriy Kryvtsun
 */","
 * Created by <NAME> on 8/12/17."
"<fim_prefix> num) {
        FitFields field = mapping.get(num);
        return field != null && fields.remove(field);
    }

    @Override
    public void describeTo(Description description) {
        description
                .appendText(""valid Weight Message format with "")
                .appendValueList("" "", "", "", "" "", fields)
                .appendText(""FIT message fields"");
    }

    /**<fim_suffix>
    private class WeightScaleStreamValidator implements MesgListener {

        private int fieldIdCount = 0;
        private boolean weightScaleMesgsPresent = false;
        private boolean areOnlyAllowedMesgNums = true;

        private boolean weightFieldsPresent = false;

        @Override
        public void onMesg(Mesg mesg) {
            switch (mesg.getNum()) {
               <fim_middle>","
     * @see 'D00001309 FIT File Types Description Rev 1.6.pdf', chapter '7 Weight File'
     */","
     * A validator for a WeightScaleStream.
     */"
"<fim_prefix>/*<fim_suffix>

package org.telegram.tl.L57;

import org.telegram.mtproto.ProtocolBuffer;
import org.telegram.tl.TLObject;
import org.telegram.tl.TLVector;
import org.telegram.tl.APIContext;
import org.telegram.tl.L57.*;

public class UserStatusOffline extends org.telegram.tl.TLUserStatus {

    public static final int ID = 0x8c703f;

    public int was_online;

    public UserStatusOffline() {
    <fim_middle>","
 *     This file is part of Telegram Server
 *     Copyright (C) 2015  Aykut Alparslan KOÃ‡
 *
 *     Telegram Server is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Telegram Server is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Abstraction level for the following constructors:
 * <ul>
 * <li>{@link org.telegram.tl.schemas.user.TLUserStatusOffline}: userStatusOffline#8c703f</li>
 * <li>{@link org.telegram.tl.schemas.user.TLUserStatusOffline#8c703f(boolean)}: userStatusOffline#8c703f</li>
 * </ul>
 *
 * @author <NAME> <EMAIL>
 * @see <a href=""http://github.com/badoualy/kotlogram"">http://github.com/badoualy/kotlogram</a>
 */"
"<fim_prefix>/*<fim_suffix>
package com.stableapps.okexbookmapadapter.okex.model;

/**
 *
 * @author aris
 */
public abstract class Message {
}
<fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","*
 *
 * @author aris
 */"
"<fim_prefix>/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stableapps.okexbookmapadapter.okex.model;

/**<fim_suffix>
public abstract class Message {
}
<fim_middle>","
 *
 * @author aris
 */","
 *
 * @author <NAME>
"
"<fim_prefix>/**<fim_suffix>
package org.diqube.connection;

import org.diqube.thrift.base.thrift.RNodeAddress;

/**
 * Listener that is informed as soon as someone found that a specific cluster node died or is alive.
 * 
 * <p>
 * THis listener publicizes detailed information, that means it might publicize the same information multiple times.
 * Implementations should de-duplicate if needed.
 *
 * @author Bastia<fim_middle>","
 * diqube: Distributed Query Base.
 *
 * Copyright (C) 2015 Bastian Gloeckle
 *
 * This file is part of diqube.
 *
 * diqube is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>ied or is alive.
 * 
 * <p>
 * THis listener publicizes detailed information, that means it might publicize the same information multiple times.
 * Implementations should de-duplicate if needed.
 *
 * @author Bastian Gloeckle
 */
public interface ClusterNodeStatusDetailListener {
  /**
   * A specific node in the cluster died.
   */
  public void nodeDied(RNodeAddress nodeAddr);

  /**<fim_suffix>
  public void nodeAlive(RNodeAddress nodeAddr) throws InterruptedException;
}
<fim_middle>","
   * A specific node in the cluster is alive.
   */","
   * A specific node in the cluster is alive.
   */"
"<fim_prefix> the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.diqube.connection;

import org.diqube.thrift.base.thrift.RNodeAddress;

/**<fim_suffix>
public interface ClusterNodeStatusDetailListener {
  /**
   * A specific node in the cluster died.
   */
  public void nodeDied(RNodeAddress nodeAddr);

  /**
   * A specific node in the cluster is alive.
   */
  public void nodeAlive(RNodeAddress nodeAddr) throws InterruptedException;
}
<fim_middle>","
 * Listener that is informed as soon as someone found that a specific cluster node died or is alive.
 * 
 * <p>
 * THis listener publicizes detailed information, that means it might publicize the same information multiple times.
 * Implementations should de-duplicate if needed.
 *
 * @author Bastian Gloeckle
 */","
 * A listener for cluster node status changes.
 *
 * @author <NAME>
 */"
"<fim_prefix>NodeAddress;

/**
 * Listener that is informed as soon as someone found that a specific cluster node died or is alive.
 * 
 * <p>
 * THis listener publicizes detailed information, that means it might publicize the same information multiple times.
 * Implementations should de-duplicate if needed.
 *
 * @author Bastian Gloeckle
 */
public interface ClusterNodeStatusDetailListener {
  /**<fim_suffix>
  public void nodeDied(RNodeAddress nodeAddr);

  /**
   * A specific node in the cluster is alive.
   */
  public void nodeAlive(RNodeAddress nodeAddr) throws InterruptedException;
}
<fim_middle>","
   * A specific node in the cluster died.
   */","
   * A specific node in the cluster is dead.
  "
"<fim_prefix>ionmodel.Project;
import de.sep2011.funckit.view.View;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

import java.awt.event.ActionEvent;

/**
 * Listener object for actions that indicate a open property dialog event.
 */
public class DeleteProjectActionListener extends AbstractAction {

    private static final long serialVersionUID = 2670979073899255329L;

    /**<fim_suffix>
    private final Controller controller;

    /**
     * View object.
     */
    private final View view;

    private final Project project;

    /**
     * Constructor that expects the current {@link Controller} and {@link View}
     * reference.
     * 
     * @param controller
     *            Application controller object, should not be null
     * @param project
     * @param <fim_middle>","
     * Current mediating controller object.
     */","
     * Controller object.
     */"
"<fim_prefix>ate a open property dialog event.
 */
public class DeleteProjectActionListener extends AbstractAction {

    private static final long serialVersionUID = 2670979073899255329L;

    /**
     * Current mediating controller object.
     */
    private final Controller controller;

    /**
     * View object.
     */
    private final View view;

    private final Project project;

    /**<fim_suffix>
    public DeleteProjectActionListener(View view, Controller controller,
            Project project) {
        this.controller = controller;
        this.view = view;
        this.project = project;
    }

    /**
     * Trigger method to delete the current project.
     * 
     * @param event
     *            Additional event information.
     */
    @Override
    public void actio<fim_middle>","
     * Constructor that expects the current {@link Controller} and {@link View}
     * reference.
     * 
     * @param controller
     *            Application controller object, should not be null
     * @param project
     * @param view
     *            associated View object, should not be null
     */","
     * Constructor.
     * 
     * @param view
     *            View object.
     * @param controller
     *            Current mediating controller object.
     * @param project
     *            Current project.
     */"
"<fim_prefix>oject) {
        this.controller = controller;
        this.view = view;
        this.project = project;
    }

    /**
     * Trigger method to delete the current project.
     * 
     * @param event
     *            Additional event information.
     */
    @Override
    public void actionPerformed(ActionEvent event) {
        deleteProject(project, view, controller);
    }

    /**<fim_suffix>
    public static void deleteProject(Project selectedProject, View view,
            Controller controller) {

        if (selectedProject.isModified()) {
            int choice = view.askForSaveUnsavedProjects();
            if (choice == JOptionPane.YES_OPTION) {
                if (!SaveFileActionListener.saveProject(selectedProject, view)) {
                    return;
           <fim_middle>","
     * Method to delete a given project with help of view and controller.
     * 
     * @param selectedProject
     *            Project to delete.
     * @param view
     *            Current applications view master object.
     * @param controller
     *            Current applications controller delegator.
     */","
     * Delete the current project.
     * 
     * @param selectedProject
     *            The project to delete.
     * @param view
     *            The view to use.
     * @param controller
     *            The controller to use.
     */"
"<fim_prefix>/*<fim_suffix>

package de.sep2011.funckit.controller.listener.project;

import de.sep2011.funckit.controller.Controller;
import de.sep2011.funckit.model.sessionmodel.Project;
import de.sep2011.funckit.view.View;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

import java.awt.event.ActionEvent;

/**
 * Listener object for actions that indicate a open property dialog event.
 */
pu<fim_middle>","
 * funCKit - functional Circuit Kit
 * Copyright (C) 2013  Lukas Elsner <open@mindrunner.de>
 * Copyright (C) 2013  Peter Dahlberg <catdog2@tuxzone.org>
 * Copyright (C) 2013  Julian Stier <mail@julian-stier.de>
 * Copyright (C) 2013  Sebastian Vetter <mail@b4sti.eu>
 * Copyright (C) 2013  Thomas Poxrucker <poxrucker_t@web.de>
 * Copyright (C) 2013  Alexander Treml <alex.treml@directbox.com>
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Listener object for actions that indicate a open property dialog event.
 */"
"<fim_prefix>cense
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.sep2011.funckit.controller.listener.project;

import de.sep2011.funckit.controller.Controller;
import de.sep2011.funckit.model.sessionmodel.Project;
import de.sep2011.funckit.view.View;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

import java.awt.event.ActionEvent;

/**<fim_suffix>
public class DeleteProjectActionListener extends AbstractAction {

    private static final long serialVersionUID = 2670979073899255329L;

    /**
     * Current mediating controller object.
     */
    private final Controller controller;

    /**
     * View object.
     */
    private final View view;

    private final Project project;

    /**
     * Constructor that expects the <fim_middle>","
 * Listener object for actions that indicate a open property dialog event.
 */","
 * Listener for the delete project action.
 *
 * @author <"
"<fim_prefix> *            Application controller object, should not be null
     * @param project
     * @param view
     *            associated View object, should not be null
     */
    public DeleteProjectActionListener(View view, Controller controller,
            Project project) {
        this.controller = controller;
        this.view = view;
        this.project = project;
    }

    /**<fim_suffix>
    @Override
    public void actionPerformed(ActionEvent event) {
        deleteProject(project, view, controller);
    }

    /**
     * Method to delete a given project with help of view and controller.
     * 
     * @param selectedProject
     *            Project to delete.
     * @param view
     *            Current applications view master object.
     * @param controller
   <fim_middle>","
     * Trigger method to delete the current project.
     * 
     * @param event
     *            Additional event information.
     */","
     * Method to delete a given project with help of view and controller.
     * 
     * @param selectedProject
     *            Project to delete."
"<fim_prefix>.swing.JOptionPane;

import java.awt.event.ActionEvent;

/**
 * Listener object for actions that indicate a open property dialog event.
 */
public class DeleteProjectActionListener extends AbstractAction {

    private static final long serialVersionUID = 2670979073899255329L;

    /**
     * Current mediating controller object.
     */
    private final Controller controller;

    /**<fim_suffix>
    private final View view;

    private final Project project;

    /**
     * Constructor that expects the current {@link Controller} and {@link View}
     * reference.
     * 
     * @param controller
     *            Application controller object, should not be null
     * @param project
     * @param view
     *            associated View object, should not be null
     */
    <fim_middle>","
     * View object.
     */",
"<fim_prefix>/*<fim_suffix>
package net.rocrail.androc.widgets;

import net.rocrail.androc.objects.Item;
import net.rocrail.androc.objects.StageBlock;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Paint.Style;
import android.util.AttributeSet;
import android.view.GestureDetector<fim_middle>","
 Rocrail - Model Railroad Software

 Copyright (C) 2002-2010 - Rob Versluis <r.j.versluis@rocrail.net>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 2
 of the License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/","*
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package org.mulgara.store.stringpool;

// Java 2 standard packages
import java.nio.ByteBuffer;


/**
 * @created 2004-07-04
 *
 * @author <a href=""http://staff.pisoftware.com/david"">David Makepeace</a>
 *
 * @version $Revision: 1.1 $
 *
 * @modified $Date: 2005/02/20 10:26:19 $ by $Author: newmana $
 *
 * @maintenanceAuthor $Author: newmana $
 *
 * @copyright &copy;2001-2003
 *   <a <fim_middle>","
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the ""License""); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an ""AS IS""
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 *
 * The Original Code is the Kowari Metadata Store.
 *
 * The Initial Developer of the Original Code is Plugged In Software Pty
 * Ltd (http://www.pisoftware.com, mailto:info@pisoftware.com). Portions
 * created by Plugged In Software Pty Ltd are Copyright (C) 2001,2002
 * Plugged In Software Pty Ltd. All Rights Reserved.
 *
 * Contributor(s): N/A.
 *
 * [NOTE: The text of this Exhibit A may differ slightly from the text
 * of the notices in the Source Code files of the Original Code. You
 * should use the text of this Exhibit A rather than the text found in the
 * Original Code Source Code for Your Modifications.]
 *
 */","*
 * Copyright (c) 2001-2003, <NAME>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  o Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 *  o Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 *  o Neither the name of <NAME> nor the names of any other contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION)"
"<fim_prefix>Makepeace</a>
 *
 * @version $Revision: 1.1 $
 *
 * @modified $Date: 2005/02/20 10:26:19 $ by $Author: newmana $
 *
 * @maintenanceAuthor $Author: newmana $
 *
 * @copyright &copy;2001-2003
 *   <a href=""http://www.pisoftware.com/"">Plugged In Software Pty Ltd</a>
 *
 * @licence <a href=""{@docRoot}/../../LICENCE"">Mozilla Public License v1.1</a>
 */
public interface SPComparator {

  /**<fim_suffix>
  public int comparePrefix(ByteBuffer d1, ByteBuffer d2, int d2Size);

  public int compare(ByteBuffer d1, int subtypeId1, ByteBuffer d2, int subtypeId2);

}
<fim_middle>","
   * Gives the comparator an opportunity to return an ordering where only the
   * prefix of the binary representation of one or both SPObjects is available.
   * If the comparator does not support this method or if an ordering can not
   * be determined from the available data then zero (0) should be returned.
   */","
   * Compare two data buffers.
   *
   * @param d1 the first data buffer
   * @param d2 the second data buffer
   * @param d2Size the size of the second data buffer
   * @return a negative integer, zero, or a positive integer as the first
   *"
"<fim_prefix>): N/A.
 *
 * [NOTE: The text of this Exhibit A may differ slightly from the text
 * of the notices in the Source Code files of the Original Code. You
 * should use the text of this Exhibit A rather than the text found in the
 * Original Code Source Code for Your Modifications.]
 *
 */

package org.mulgara.store.stringpool;

// Java 2 standard packages
import java.nio.ByteBuffer;


/**<fim_suffix>
public interface SPComparator {

  /**
   * Gives the comparator an opportunity to return an ordering where only the
   * prefix of the binary representation of one or both SPObjects is available.
   * If the comparator does not support this method or if an ordering can not
   * be determined from the available data then zero (0) should be returned.
   */
  public int comparePrefix(By<fim_middle>","
 * @created 2004-07-04
 *
 * @author <a href=""http://staff.pisoftware.com/david"">David Makepeace</a>
 *
 * @version $Revision: 1.1 $
 *
 * @modified $Date: 2005/02/20 10:26:19 $ by $Author: newmana $
 *
 * @maintenanceAuthor $Author: newmana $
 *
 * @copyright &copy;2001-2003
 *   <a href=""http://www.pisoftware.com/"">Plugged In Software Pty Ltd</a>
 *
 * @licence <a href=""{@docRoot}/../../LICENCE"">Mozilla Public License v1.1</a>
 */","
 * This interface is used to compare two SPObjects.
 *
 * @author <NAME>
 * @version $Revision: 1.1 $ $Date: 2003/01/14 01:24:32 $
 * @since 1.0
 */"
"<fim_prefix> from the current generation (0).
 */
public final class ArrayValueHistory<E> {

    private final ArrayDeque<E> generations;
    private final int limit;
    private int age = -1;

    public ArrayValueHistory(int limit) {
        this.generations = new ArrayDeque<E>();
        this.limit = limit;
    }

    public ArrayValueHistory() {
        this (Integer.MAX_VALUE);
    }

    /**<fim_suffix>
    public void addNew(E newValue) {
//        if (generations.size() > 0) {
//            if (newValue.equals(generations.getFirst())) {
//                if (age >= 0) {
//                    age++;
//                }
//            } else {
//                age = 0;
//            }
//        }
        generations.addFirst(newValue);
        if (generations.size() > limit) {
      <fim_middle>","
     * Adds a new value, which becomes the current generation.
     * The generation of all previously recorded values increases by 1.
     */","
     * Adds a new value to the history.
     *
     * @param newValue the new value to add.
    "
"<fim_prefix>   if (newValue.equals(generations.getFirst())) {
//                if (age >= 0) {
//                    age++;
//                }
//            } else {
//                age = 0;
//            }
//        }
        generations.addFirst(newValue);
        if (generations.size() > limit) {
            generations.removeLast();
        }
        this.age = currentAge();
    }

    /**<fim_suffix>
    public void updateCurrent(E newValue) {
        if (generations.size() > 0) {
            if (!newValue.equals(generations.getFirst())) {
                generations.pop();
                addNew(newValue);
            }
        } else {
            throw ProgramError.unexpected(""attempt to update empty history"");
        }
    }

    /**
     * Gets the historical value at some g<fim_middle>","
     * Replaces the current value in the history.
     *
     * @param newValue value which becomes current
     * @throws ProgramError if no values have been recorded.
     */","
     * Gets the historical value at some g.
     *  Fix bug in history  package org.clafer.ir;

import java.util.LinkedList;
import java.util.List;

/**
"
"<fim_prefix>or if no values have been recorded.
     */
    public void updateCurrent(E newValue) {
        if (generations.size() > 0) {
            if (!newValue.equals(generations.getFirst())) {
                generations.pop();
                addNew(newValue);
            }
        } else {
            throw ProgramError.unexpected(""attempt to update empty history"");
        }
    }

    /**<fim_suffix>
    public E value(int generation) {
        if (generation == 0 && generations.size() > 0) {
            return generations.getFirst();
        }
        final Iterator<E> iterator = generations.iterator();
        int index = 0;
        while (iterator.hasNext()) {
            if (index == generation) {
                return iterator.next();
            }
            index++;
     <fim_middle>","
     * Gets the historical value at some generation, 0 is current.
     *
     * @return The value at a specified generation.
     * @throws ProgramError if the index is out of range of the current history
     */","
     * Returns the value of the specified generation.
     *
     * @param generation the generation to return the value of.
     * @return the value of the specified generation.
     * @throws IndexOutOfBoundsException if the specified generation"
"<fim_prefix>ns.size() > 0) {
            return generations.getFirst();
        }
        final Iterator<E> iterator = generations.iterator();
        int index = 0;
        while (iterator.hasNext()) {
            if (index == generation) {
                return iterator.next();
            }
            index++;
        }
        throw ProgramError.unexpected(""exceeded history"");
    }

    /**<fim_suffix>
    public int currentValueAge() {
        return age;
    }

    /**
     * @return the maximum number of generations that can be recorded.
     */
    public int getLimit() {
        return limit;
    }

    /**
     * @return the number of generations recorded; initially 0.
     */
    public int size() {
        return generations.size();
    }

    /**
     * @return iteration of<fim_middle>","
     * @return the age, in generations, of the current value, since recording began.
     * 0 if different from immediate predecessor; -1 if no different value ever recorded
     * Comparison uses {@linkplain Object#equals(Object) equals}.
     */","
     * @return the current value of the history.
     */"
"<fim_prefix>     throw ProgramError.unexpected(""exceeded history"");
    }

    /**
     * @return the age, in generations, of the current value, since recording began.
     * 0 if different from immediate predecessor; -1 if no different value ever recorded
     * Comparison uses {@linkplain Object#equals(Object) equals}.
     */
    public int currentValueAge() {
        return age;
    }

    /**<fim_suffix>
    public int getLimit() {
        return limit;
    }

    /**
     * @return the number of generations recorded; initially 0.
     */
    public int size() {
        return generations.size();
    }

    /**
     * @return iteration of the values recorded in the history, starting with the current
     * generation and proceeding backward in time.
     */
    public Iterator<E> gene<fim_middle>","
     * @return the maximum number of generations that can be recorded.
     */","
     * @return the number of generations to keep in the history.
     */"
"<fim_prefix>ding began.
     * 0 if different from immediate predecessor; -1 if no different value ever recorded
     * Comparison uses {@linkplain Object#equals(Object) equals}.
     */
    public int currentValueAge() {
        return age;
    }

    /**
     * @return the maximum number of generations that can be recorded.
     */
    public int getLimit() {
        return limit;
    }

    /**<fim_suffix>
    public int size() {
        return generations.size();
    }

    /**
     * @return iteration of the values recorded in the history, starting with the current
     * generation and proceeding backward in time.
     */
    public Iterator<E> generations() {
        return generations.iterator();
    }

    /**
     * Computes the age of the current generation, defined to be the nu<fim_middle>","
     * @return the number of generations recorded; initially 0.
     */","
     * @return the number of generations recorded.
     */"
"<fim_prefix>als(Object) equals}.
     */
    public int currentValueAge() {
        return age;
    }

    /**
     * @return the maximum number of generations that can be recorded.
     */
    public int getLimit() {
        return limit;
    }

    /**
     * @return the number of generations recorded; initially 0.
     */
    public int size() {
        return generations.size();
    }

    /**<fim_suffix>
    public Iterator<E> generations() {
        return generations.iterator();
    }

    /**
     * Computes the age of the current generation, defined to be the number of
     * preceding values that are equal, or -1 if no different value exists.
     */
    private int currentAge() {
        assert generations.size() > 0;
        final Iterator<E> iterator = generations.iterator();
<fim_middle>","
     * @return iteration of the values recorded in the history, starting with the current
     * generation and proceeding backward in time.
     */","
     * @return an iterator over the generations.
     */"
"<fim_prefix>
     * @return the number of generations recorded; initially 0.
     */
    public int size() {
        return generations.size();
    }

    /**
     * @return iteration of the values recorded in the history, starting with the current
     * generation and proceeding backward in time.
     */
    public Iterator<E> generations() {
        return generations.iterator();
    }

    /**<fim_suffix>
    private int currentAge() {
        assert generations.size() > 0;
        final Iterator<E> iterator = generations.iterator();
        E currentValue = iterator.next();
        int duplicates = 0;
        while (iterator.hasNext()) {
            if (iterator.next().equals(currentValue)) {
                duplicates++;
            } else {
                return duplicates;
       <fim_middle>","
     * Computes the age of the current generation, defined to be the number of
     * preceding values that are equal, or -1 if no different value exists.
     */","
     * @return the number of duplicates in the history.
     */"
"<fim_prefix>/*<fim_suffix>
package com.sun.max.util;

import java.util.*;

import com.sun.max.program.*;

/**
 * An array-based recording of the history of a value, with
 * time expressed as the number of generations back from the current generation (0).
 */
public final class ArrayValueHistory<E> {

    private final ArrayDeque<E> generations;
    private final int limit;
    private int age = -1;

    public <fim_middle>","
 * Copyright (c) 2009, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */","*
 * An array-based recording of the history of a value, with
 * time expressed as the number of generations back from the current generation (0).
 */"
"<fim_prefix>2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.sun.max.util;

import java.util.*;

import com.sun.max.program.*;

/**<fim_suffix>
public final class ArrayValueHistory<E> {

    private final ArrayDeque<E> generations;
    private final int limit;
    private int age = -1;

    public ArrayValueHistory(int limit) {
        this.generations = new ArrayDeque<E>();
        this.limit = limit;
    }

    public ArrayValueHistory() {
        this (Integer.MAX_VALUE);
    }

    /**
     * Adds a new value, which becom<fim_middle>","
 * An array-based recording of the history of a value, with
 * time expressed as the number of generations back from the current generation (0).
 */","
 * A history of values, which is used to keep track of the values of
 * array elements.  The history is implemented as a stack of arrays,
"
"<fim_prefix>/*<fim_suffix>

package net.solarnetwork.central.user.event.domain;

import java.time.Instant;
import java.util.UUID;
import net.solarnetwork.central.user.dao.UserNodeRelatedEntity;
import net.solarnetwork.dao.BasicUuidEntity;

/**
 * The combination of a {@link UserNodeEventHookConfiguration} and a
 * {@link UserNodeEventTask}.
 * 
 * @author matt
 * @version 1.1
 */
public class UserNodeEvent exte<fim_middle>"," ==================================================================
 * UserNodeEvent.java - 8/06/2020 4:23:50 pm
 * 
 * Copyright 2020 SolarNetwork.net Dev Team
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License as 
 * published by the Free Software Foundation; either version 2 of 
 * the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
 * 02111-1307 USA
 * ==================================================================
 */","*
	 * The unique identifier of the event.
	 */"
"<fim_prefix>!= null ? task.getNodeId() : null);
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append(""UserNodeEvent{"");
		builder.append(getId());
		builder.append(""}"");
		return builder.toString();
	}

	/**
	 * Get the configuration.
	 * 
	 * @return the config
	 */
	public UserNodeEventHookConfiguration getConfig() {
		return config;
	}

	/**<fim_suffix>
	public void setConfig(UserNodeEventHookConfiguration config) {
		this.config = config;
	}

	/**
	 * Get the task.
	 * 
	 * @return the task
	 */
	public UserNodeEventTask getTask() {
		return task;
	}

	/**
	 * Set the task.
	 * 
	 * @param task
	 *        the task to set
	 */
	public void setTask(UserNodeEventTask task) {
		this.task = task;
	}

}
<fim_middle>","
	 * Set the configuration.
	 * 
	 * @param config
	 *        the config to set
	 */","
	 * Set the configuration.
	 * 
	 * @param config
	 *        the config to set
	 */"
"<fim_prefix>tId());
		builder.append(""}"");
		return builder.toString();
	}

	/**
	 * Get the configuration.
	 * 
	 * @return the config
	 */
	public UserNodeEventHookConfiguration getConfig() {
		return config;
	}

	/**
	 * Set the configuration.
	 * 
	 * @param config
	 *        the config to set
	 */
	public void setConfig(UserNodeEventHookConfiguration config) {
		this.config = config;
	}

	/**<fim_suffix>
	public UserNodeEventTask getTask() {
		return task;
	}

	/**
	 * Set the task.
	 * 
	 * @param task
	 *        the task to set
	 */
	public void setTask(UserNodeEventTask task) {
		this.task = task;
	}

}
<fim_middle>","
	 * Get the task.
	 * 
	 * @return the task
	 */","
	 * Get the task.
	 * 
	 * @return the task
	 */"
"<fim_prefix>n the config
	 */
	public UserNodeEventHookConfiguration getConfig() {
		return config;
	}

	/**
	 * Set the configuration.
	 * 
	 * @param config
	 *        the config to set
	 */
	public void setConfig(UserNodeEventHookConfiguration config) {
		this.config = config;
	}

	/**
	 * Get the task.
	 * 
	 * @return the task
	 */
	public UserNodeEventTask getTask() {
		return task;
	}

	/**<fim_suffix>
	public void setTask(UserNodeEventTask task) {
		this.task = task;
	}

}
<fim_middle>","
	 * Set the task.
	 * 
	 * @param task
	 *        the task to set
	 */","
	 * Set the task.
	 * 
	 * @param task
	 *        the task to set"
"<fim_prefix>the Free Software 
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
 * 02111-1307 USA
 * ==================================================================
 */

package net.solarnetwork.central.user.event.domain;

import java.time.Instant;
import java.util.UUID;
import net.solarnetwork.central.user.dao.UserNodeRelatedEntity;
import net.solarnetwork.dao.BasicUuidEntity;

/**<fim_suffix>
public class UserNodeEvent extends BasicUuidEntity implements UserNodeRelatedEntity<UUID> {

	private static final long serialVersionUID = -7055529796513860954L;

	private UserNodeEventHookConfiguration config;
	private UserNodeEventTask task;

	public UserNodeEvent(UUID id, Instant created) {
		super(id, created);
	}

	@Override
	public Long getUserId() {
		return (task != null ? tas<fim_middle>","
 * The combination of a {@link UserNodeEventHookConfiguration} and a
 * {@link UserNodeEventTask}.
 * 
 * @author matt
 * @version 1.1
 */","
 * A user node event.
 * 
 * @author matt
 * @version 1.0
 */"
"<fim_prefix>ide
	public Long getUserId() {
		return (task != null ? task.getUserId() : null);
	}

	@Override
	public Long getNodeId() {
		return (task != null ? task.getNodeId() : null);
	}

	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append(""UserNodeEvent{"");
		builder.append(getId());
		builder.append(""}"");
		return builder.toString();
	}

	/**<fim_suffix>
	public UserNodeEventHookConfiguration getConfig() {
		return config;
	}

	/**
	 * Set the configuration.
	 * 
	 * @param config
	 *        the config to set
	 */
	public void setConfig(UserNodeEventHookConfiguration config) {
		this.config = config;
	}

	/**
	 * Get the task.
	 * 
	 * @return the task
	 */
	public UserNodeEventTask getTask() {
		return task;
	}

	/**
	 * Set the task<fim_middle>","
	 * Get the configuration.
	 * 
	 * @return the config
	 */","
	 * Get the configuration.
	 * 
	 * @return the config
	 */"
"<fim_prefix>etTargetAccountId() {
		return targetAccountId;
	}

	/**
	 * @return The Message enqueue date
	 */
	public LocalDateTime getEnqueueDate() {
		return enqueueDate;
	}

	/**
	 * @return The Message human-readable subject
	 */
	public String getSubject() {
		return subject;
	}

	/**
	 * @return The Message human-readable message
	 */
	public String getMessage() {
		return message;
	}

	/**<fim_suffix>
	public Map<String, String> getParameters() {
		return parameters;
	}
}
<fim_middle>","
	 * @return The Message parameters, for machine use. The contents of the map
	 *         will depend on the message code
	 */","
	 * @return The Message parameters
	 */"
"<fim_prefix>package com.discoverydns.dnsapiclient.command.message;

import java.net.URI;
import java.util.Map;

import org.joda.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonRootName;

/**<fim_suffix>
@JsonRootName(""message"")
public class MessageRecord {
	@JsonProperty(""@uri"")
	private URI uri;
	@JsonProperty(""id"")
	private String id;
	@JsonProperty(""messageCode"")
	private String messageCode;
	@JsonProperty(""targetAccountId"")
	private String targetAccountId;
	@JsonProperty(""enqueueDate"")
	private LocalDateTime enqueueDate;
	@JsonProperty(""subject"")
	private String subject;
	@JsonPr<fim_middle>","
 * A Message is a notification from the DNSAPI server, for the targeted sponsor
 * Account's Users, offering information about changes performed by the server
 * on a related object in the system.
 * 
 * @author Arnaud Dumont
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>private String id;
	@JsonProperty(""messageCode"")
	private String messageCode;
	@JsonProperty(""targetAccountId"")
	private String targetAccountId;
	@JsonProperty(""enqueueDate"")
	private LocalDateTime enqueueDate;
	@JsonProperty(""subject"")
	private String subject;
	@JsonProperty(""message"")
	private String message;
	@JsonProperty(""parameters"")
	private Map<String, String> parameters;

	/**<fim_suffix>
	public URI getUri() {
		return uri;
	}

	/**
	 * @return The Message UUID
	 */
	public String getId() {
		return id;
	}

	/**
	 * @return The Message code
	 */
	public String getMessageCode() {
		return messageCode;
	}

	/**
	 * @return The UUID of the Account whom this Message is for
	 */
	public String getTargetAccountId() {
		return targetAccountId;
	}

	/**
	 * @return The Messag<fim_middle>","
	 * @return The URI representing the Message on the DNSAPI server
	 */","
	 * @return The URI of the Message
	 */"
"<fim_prefix>enqueueDate;
	@JsonProperty(""subject"")
	private String subject;
	@JsonProperty(""message"")
	private String message;
	@JsonProperty(""parameters"")
	private Map<String, String> parameters;

	/**
	 * @return The URI representing the Message on the DNSAPI server
	 */
	public URI getUri() {
		return uri;
	}

	/**
	 * @return The Message UUID
	 */
	public String getId() {
		return id;
	}

	/**<fim_suffix>
	public String getMessageCode() {
		return messageCode;
	}

	/**
	 * @return The UUID of the Account whom this Message is for
	 */
	public String getTargetAccountId() {
		return targetAccountId;
	}

	/**
	 * @return The Message enqueue date
	 */
	public LocalDateTime getEnqueueDate() {
		return enqueueDate;
	}

	/**
	 * @return The Message human-readable subject
	 */
	public String ge<fim_middle>","
	 * @return The Message code
	 */","
	 * @return The Message code
	 */"
"<fim_prefix>String message;
	@JsonProperty(""parameters"")
	private Map<String, String> parameters;

	/**
	 * @return The URI representing the Message on the DNSAPI server
	 */
	public URI getUri() {
		return uri;
	}

	/**
	 * @return The Message UUID
	 */
	public String getId() {
		return id;
	}

	/**
	 * @return The Message code
	 */
	public String getMessageCode() {
		return messageCode;
	}

	/**<fim_suffix>
	public String getTargetAccountId() {
		return targetAccountId;
	}

	/**
	 * @return The Message enqueue date
	 */
	public LocalDateTime getEnqueueDate() {
		return enqueueDate;
	}

	/**
	 * @return The Message human-readable subject
	 */
	public String getSubject() {
		return subject;
	}

	/**
	 * @return The Message human-readable message
	 */
	public String getMessage() {
		return <fim_middle>","
	 * @return The UUID of the Account whom this Message is for
	 */","
	 * @return The Message human-readable subject
	 */"
"<fim_prefix>ate String targetAccountId;
	@JsonProperty(""enqueueDate"")
	private LocalDateTime enqueueDate;
	@JsonProperty(""subject"")
	private String subject;
	@JsonProperty(""message"")
	private String message;
	@JsonProperty(""parameters"")
	private Map<String, String> parameters;

	/**
	 * @return The URI representing the Message on the DNSAPI server
	 */
	public URI getUri() {
		return uri;
	}

	/**<fim_suffix>
	public String getId() {
		return id;
	}

	/**
	 * @return The Message code
	 */
	public String getMessageCode() {
		return messageCode;
	}

	/**
	 * @return The UUID of the Account whom this Message is for
	 */
	public String getTargetAccountId() {
		return targetAccountId;
	}

	/**
	 * @return The Message enqueue date
	 */
	public LocalDateTime getEnqueueDate() {
		return enqueueDat<fim_middle>","
	 * @return The Message UUID
	 */","
	 * @return The Message ID
	 */"
"<fim_prefix> the DNSAPI server
	 */
	public URI getUri() {
		return uri;
	}

	/**
	 * @return The Message UUID
	 */
	public String getId() {
		return id;
	}

	/**
	 * @return The Message code
	 */
	public String getMessageCode() {
		return messageCode;
	}

	/**
	 * @return The UUID of the Account whom this Message is for
	 */
	public String getTargetAccountId() {
		return targetAccountId;
	}

	/**<fim_suffix>
	public LocalDateTime getEnqueueDate() {
		return enqueueDate;
	}

	/**
	 * @return The Message human-readable subject
	 */
	public String getSubject() {
		return subject;
	}

	/**
	 * @return The Message human-readable message
	 */
	public String getMessage() {
		return message;
	}

	/**
	 * @return The Message parameters, for machine use. The contents of the map
	 *         will dep<fim_middle>","
	 * @return The Message enqueue date
	 */","
	 * @return The UUID of the Account whom this"
"<fim_prefix>turn messageCode;
	}

	/**
	 * @return The UUID of the Account whom this Message is for
	 */
	public String getTargetAccountId() {
		return targetAccountId;
	}

	/**
	 * @return The Message enqueue date
	 */
	public LocalDateTime getEnqueueDate() {
		return enqueueDate;
	}

	/**
	 * @return The Message human-readable subject
	 */
	public String getSubject() {
		return subject;
	}

	/**<fim_suffix>
	public String getMessage() {
		return message;
	}

	/**
	 * @return The Message parameters, for machine use. The contents of the map
	 *         will depend on the message code
	 */
	public Map<String, String> getParameters() {
		return parameters;
	}
}
<fim_middle>","
	 * @return The Message human-readable message
	 */","
	 * @return The Message body
	 */"
"<fim_prefix>ring getId() {
		return id;
	}

	/**
	 * @return The Message code
	 */
	public String getMessageCode() {
		return messageCode;
	}

	/**
	 * @return The UUID of the Account whom this Message is for
	 */
	public String getTargetAccountId() {
		return targetAccountId;
	}

	/**
	 * @return The Message enqueue date
	 */
	public LocalDateTime getEnqueueDate() {
		return enqueueDate;
	}

	/**<fim_suffix>
	public String getSubject() {
		return subject;
	}

	/**
	 * @return The Message human-readable message
	 */
	public String getMessage() {
		return message;
	}

	/**
	 * @return The Message parameters, for machine use. The contents of the map
	 *         will depend on the message code
	 */
	public Map<String, String> getParameters() {
		return parameters;
	}
}
<fim_middle>","
	 * @return The Message human-readable subject
	 */","
	 * @return The Message subject
	 */"
"<fim_prefix>public class Solution {
    /**<fim_suffix>
    public int getColumn(int[][] arr) {
        // Write your code here
        int pos = arr.length;
        
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[0].length; j++) {
                if (arr[i][j] == 1) {
                    if (pos > j) {
                        pos = j;
                    }
                    break;
                }
  <fim_middle>","
     * @param arr: The 2-dimension array
     * @return: Return the column the leftmost one is located
     */","
     * @param arr: a 2D integer array
     * @return: an integer
     */"
"<fim_prefix>ttp://www.gnu.org/licenses/>.
 *
 * Please contact lda@genome.tugraz.at if you need additional information or 
 * have any questions.
 */

package at.tugraz.genome.lda.export.vos;

import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.Vector;

import at.tugraz.genome.lda.vos.ExportOptionsVO;
import at.tugraz.genome.maspectras.utils.Calculator;

/**<fim_suffix>

public class SummaryVO
{
  /** a unique identifier that must be different between the detected FeatureVOs*/
  private Integer id_;
  /** a unique identifier for this species*/
  private String speciesId_;
  /** ids referring to FeatureVOs that belong to this summary*/
  private Vector<Integer> featureRefs_;
  /** structural information of this SummaryVO; if none present, th<fim_middle>","
 * class containing cumulative information across the various aspects
 * @author Juergen Hartler
 *
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>is null*/
  private String molecularId_;
  /** the chemical formula of the neutral molecule*/
  private String chemFormula_;
  /** the theoretical mass of this object*/
  private Double neutralMass_;
  /** sorted (by abundance) vector of modifications/adducts*/
  private Vector<String> mods_;
  /** a reliability score specific to mzTab*/
  private int mzTabReliability_;
  /**<fim_suffix>
  private Hashtable<String,Double> areas_;
  /** the mean area for each selected group (heat map); key: group name; value: mean area*/
  private LinkedHashMap<String,Double> groupMeans_;
  /** the coefficient of variation of each selected group (heat map); key: group name; value: coefficient of variation*/
  private LinkedHashMap<String,Double> groupCoeffVar_;
  /** the retentio<fim_middle>", the totally detected values/areas for the experiments; key: experiment name; value: area*/, the area of the selected group (heat map); key: group name; value: area*/
"<fim_prefix>oretical mass of this object*/
  private Double neutralMass_;
  /** sorted (by abundance) vector of modifications/adducts*/
  private Vector<String> mods_;
  /** a reliability score specific to mzTab*/
  private int mzTabReliability_;
  /** the totally detected values/areas for the experiments; key: experiment name; value: area*/
  private Hashtable<String,Double> areas_;
  /**<fim_suffix>
  private LinkedHashMap<String,Double> groupMeans_;
  /** the coefficient of variation of each selected group (heat map); key: group name; value: coefficient of variation*/
  private LinkedHashMap<String,Double> groupCoeffVar_;
  /** the retention times of the highest peaks of every modification; first key modification; second key: experiment*/
  private Hashtable<String,Hashtabl<fim_middle>", the mean area for each selected group (heat map); key: group name; value: mean area*/, the total intensity of the experiment; key: experiment name; value: intensity*/
"<fim_prefix>Mods,
        expsOfGroup);
  }

  
  /**
   * 
   * @return the unique identifier for this summary
   */
  public Integer getId()
  {
    return id_;
  }

  
  /**
   * sets the unique identifier (in cases where sorting is required)
   * @param id the he unique identifier for this summary
   */
  public void setId(Integer id)
  {
    this.id_ = id;
  }


  /**<fim_suffix>
  public String getSpeciesId()
  {
    return speciesId_;
  }

  
  /**
   * 
   * @return ids referring to FeatureVOs that belong to this summary
   */
  public Vector<Integer> getFeatureRefs()
  {
    return featureRefs_;
  }

  
  /**
   * 
   * @return structural information of this SummaryVO; if none present, this value is null
   */
  public String getMolecu<fim_middle>","
   * 
   * @return a unique identifier for this species
   */","
   * 
   * @return the name of the summary
   */"
"<fim_prefix>0 is returned
   * @param groupName the name of the group
   * @return the coefficient of variation of a certain experiment group; if there is no detection, 0 is returned
   */
  public Double getCoeffVar(String groupName){
    Double stdev = Double.NaN;
    if (groupCoeffVar_.containsKey(groupName))
      stdev = groupCoeffVar_.get(groupName);
    return stdev;
  }
  
  /**<fim_suffix>
  public double calculateDeviationValue(ExportOptionsVO expOptions, Vector<String> expsOfGroup){
    double sdValue = Double.NaN;
    if (expOptions!=null&&expOptions.getExportType()!=ExportOptionsVO.EXPORT_NO_DEVIATION){
      Vector<Double> areasOfGroup = new Vector<Double>();
      double area;
      for (String exp : expsOfGroup){
        area = getArea(exp);
        if (a<fim_middle>","
   * calculates a deviation; the expOptions specifies which deviation value has to be calculated 
   * @param expOptions value object specifying the type of deviation value
   * @param expsOfGroup the names of the experiments belonging to this sample group
   * @return the calculated deviation value
   */","
   * Returns the coefficient of variation of a certain experiment group; if there is no detection, 0 is returned
   * @param groupName the name of the group
   * @return the coefficient of variation of a certain experiment group; if there is no detection, 0 is returned
   */"
"<fim_prefix>/*<fim_suffix>

package at.tugraz.genome.lda.export.vos;

import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.Vector;

import at.tugraz.genome.lda.vos.ExportOptionsVO;
import at.tugraz.genome.maspectras.utils.Calculator;

/**
 * class containing cumulative information across the various aspects
 * @author Juergen Hartler
 *
 */

public class SummaryVO
{
  <fim_middle>"," 
 * This file is part of Lipid Data Analyzer
 * Lipid Data Analyzer - Automated annotation of lipid species and their molecular structures in high-throughput data from tandem mass spectrometry
 * Copyright (c) 2018 Juergen Hartler, Andreas Ziegl, Gerhard G. Thallinger 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER. 
 *  
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * by the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details. 
 *  
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * Please contact lda@genome.tugraz.at if you need additional information or 
 * have any questions.
 */","*
 * class containing cumulative information across the various aspects
 * @author Juergen Hartler
 *
 */"
"<fim_prefix>r_;
  /** the retention times of the highest peaks of every modification; first key modification; second key: experiment*/
  private Hashtable<String,Hashtable<String,Double>> rtsOfMods_;
  /** the reliability of the evidence of every modification; first key modification; second key: experiment*/
  private Hashtable<String,Hashtable<String,Short>> evidenceReliabilityOfMods_;
  /**<fim_suffix>
  private Hashtable<String,Hashtable<String,Double>> groupRts_;
  /** the standard deviations for the retention times of each selected group (heat map); first key: modification; key: group name; value: mean area*/  
  private Hashtable<String,Hashtable<String,Double>> groupRtStdevs_;
  
  /** there is no ms2 evidence found for the hit*/
  public final static short EVIDENCE_MS1_O<fim_middle>", the mean retention time for each selected group (heat map); first key: modification; key: group name; value: mean area*/, the retention times of each selected group (heat map); first key modification; key: group name; value: mean area*/
"<fim_prefix>value: area*/
  private Hashtable<String,Double> areas_;
  /** the mean area for each selected group (heat map); key: group name; value: mean area*/
  private LinkedHashMap<String,Double> groupMeans_;
  /** the coefficient of variation of each selected group (heat map); key: group name; value: coefficient of variation*/
  private LinkedHashMap<String,Double> groupCoeffVar_;
  /**<fim_suffix>
  private Hashtable<String,Hashtable<String,Double>> rtsOfMods_;
  /** the reliability of the evidence of every modification; first key modification; second key: experiment*/
  private Hashtable<String,Hashtable<String,Short>> evidenceReliabilityOfMods_;
  /** the mean retention time for each selected group (heat map); first key: modification; key: group name; value: mean area*/
<fim_middle>", the retention times of the highest peaks of every modification; first key modification; second key: experiment*/, the retention time of each selected group (heat map); key: group name; value: retention time
"<fim_prefix>htable<String,Hashtable<String,Double>> groupRts_;
  /** the standard deviations for the retention times of each selected group (heat map); first key: modification; key: group name; value: mean area*/  
  private Hashtable<String,Hashtable<String,Double>> groupRtStdevs_;
  
  /** there is no ms2 evidence found for the hit*/
  public final static short EVIDENCE_MS1_ONLY = 0;
  /**<fim_suffix>
  public final static short EVIDENCE_MS2_UNAMBIGUOUS = 1;
  /** ms2 is found, but there is an overlap with an isobar from another species, but the two hits can be separated*/ 
  public final static short EVIDENCE_MS2_SPLIT = 2;
  /** ms2 is found, but there is an overlap with an isobar from another species, and the two hits cannot be separated*/
  public final static short EVIDEN<fim_middle>", ms2 found and no overlap*/," ms2 is found, but there"
"<fim_prefix>
import at.tugraz.genome.maspectras.utils.Calculator;

/**
 * class containing cumulative information across the various aspects
 * @author Juergen Hartler
 *
 */

public class SummaryVO
{
  /** a unique identifier that must be different between the detected FeatureVOs*/
  private Integer id_;
  /** a unique identifier for this species*/
  private String speciesId_;
  /**<fim_suffix>
  private Vector<Integer> featureRefs_;
  /** structural information of this SummaryVO; if none present, this value is null*/
  private String molecularId_;
  /** the chemical formula of the neutral molecule*/
  private String chemFormula_;
  /** the theoretical mass of this object*/
  private Double neutralMass_;
  /** sorted (by abundance) vector of modifications/adducts*/
<fim_middle>", ids referring to FeatureVOs that belong to this summary*/, the name of the species*/
"<fim_prefix>blic void setId(Integer id)
  {
    this.id_ = id;
  }


  /**
   * 
   * @return a unique identifier for this species
   */
  public String getSpeciesId()
  {
    return speciesId_;
  }

  
  /**
   * 
   * @return ids referring to FeatureVOs that belong to this summary
   */
  public Vector<Integer> getFeatureRefs()
  {
    return featureRefs_;
  }

  
  /**<fim_suffix>
  public String getMolecularId()
  {
    return molecularId_;
  }
  
  
  /**
   * 
   * @return the chemical formula of the neutral molecule
   */
  public String getChemFormula()
  {
    return chemFormula_;
  }

  
  /**
   * 
   * @return the theoretical mass of this object
   */
  public Double getNeutralMass()
  {
    return neutralMass_;
  }

  
  /**<fim_middle>","
   * 
   * @return structural information of this SummaryVO; if none present, this value is null
   */","
   * 
   * @return the molecular formula of the neutral molecule
   */"
"<fim_prefix>   return featureRefs_;
  }

  
  /**
   * 
   * @return structural information of this SummaryVO; if none present, this value is null
   */
  public String getMolecularId()
  {
    return molecularId_;
  }
  
  
  /**
   * 
   * @return the chemical formula of the neutral molecule
   */
  public String getChemFormula()
  {
    return chemFormula_;
  }

  
  /**<fim_suffix>
  public Double getNeutralMass()
  {
    return neutralMass_;
  }

  
  /**
   * 
   * @return sorted (by abundance) vector of modifications/adducts
   */
  public Vector<String> getModifications()
  {
    return mods_;
  }
  
  
  /**
   * 
   * @return a reliability score specific to mzTab
   */
  public int getMzTabReliability()
  {
    return mzTabReliabilit<fim_middle>","
   * 
   * @return the theoretical mass of this object
   */","
   * 
   * @return the neutral mass of the neutral molecule
  "
"<fim_prefix>h selected group (heat map); first key: modification; key: group name; value: mean area*/
  private Hashtable<String,Hashtable<String,Double>> groupRts_;
  /** the standard deviations for the retention times of each selected group (heat map); first key: modification; key: group name; value: mean area*/  
  private Hashtable<String,Hashtable<String,Double>> groupRtStdevs_;
  
  /**<fim_suffix>
  public final static short EVIDENCE_MS1_ONLY = 0;
  /** ms2 found and no overlap*/
  public final static short EVIDENCE_MS2_UNAMBIGUOUS = 1;
  /** ms2 is found, but there is an overlap with an isobar from another species, but the two hits can be separated*/ 
  public final static short EVIDENCE_MS2_SPLIT = 2;
  /** ms2 is found, but there is an overlap with an isobar from anoth<fim_middle>", there is no ms2 evidence found for the hit*/, the retention times of each selected group (heat map);
"<fim_prefix>
package at.tugraz.genome.lda.export.vos;

import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.Vector;

import at.tugraz.genome.lda.vos.ExportOptionsVO;
import at.tugraz.genome.maspectras.utils.Calculator;

/**
 * class containing cumulative information across the various aspects
 * @author Juergen Hartler
 *
 */

public class SummaryVO
{
  /**<fim_suffix>
  private Integer id_;
  /** a unique identifier for this species*/
  private String speciesId_;
  /** ids referring to FeatureVOs that belong to this summary*/
  private Vector<Integer> featureRefs_;
  /** structural information of this SummaryVO; if none present, this value is null*/
  private String molecularId_;
  /** the chemical formula of the neutral molecule*/
  priva<fim_middle>", a unique identifier that must be different between the detected FeatureVOs*/, the id of the SummaryVO*/
"<fim_prefix>Stdevs_;
  
  /** there is no ms2 evidence found for the hit*/
  public final static short EVIDENCE_MS1_ONLY = 0;
  /** ms2 found and no overlap*/
  public final static short EVIDENCE_MS2_UNAMBIGUOUS = 1;
  /** ms2 is found, but there is an overlap with an isobar from another species, but the two hits can be separated*/ 
  public final static short EVIDENCE_MS2_SPLIT = 2;
  /**<fim_suffix>
  public final static short EVIDENCE_MS2_NO_SPLIT_POSSIBLE = 3;
  
  /**
   * constructor for creating cumulative class containing information across the various aspects
   * @param id a unique identifier that must be different between the detected SummaryVOs
   * @param speciesId a unique identifier for this species
   * @param molecularId structural information of this Summar<fim_middle>"," ms2 is found, but there is an overlap with an isobar from another species, and the two hits cannot be separated*/"," ms2 is found, but there is an overlap with an isobar from another species, and the two hits cannot be separated*/"
"<fim_prefix>Double> areas,
      Hashtable<String,Hashtable<String,Double>> rtsOfMods, Hashtable<String,Hashtable<String,Short>> evidenceReliabilityOfMods,
      LinkedHashMap<String,Vector<String>> expsOfGroup)
  {
    this(null,speciesId,molecularId,featureRefs,chemFormula,neutralMass,rt,mods,mzTabReliability,areas,rtsOfMods,evidenceReliabilityOfMods,
        expsOfGroup);
  }

  
  /**<fim_suffix>
  public Integer getId()
  {
    return id_;
  }

  
  /**
   * sets the unique identifier (in cases where sorting is required)
   * @param id the he unique identifier for this summary
   */
  public void setId(Integer id)
  {
    this.id_ = id;
  }


  /**
   * 
   * @return a unique identifier for this species
   */
  public String getSpeciesId()
  {
    retur<fim_middle>","
   * 
   * @return the unique identifier for this summary
   */","
   * 
   * @param id the unique identifier for this summary
  "
"<fim_prefix>
  public String getMolecularId()
  {
    return molecularId_;
  }
  
  
  /**
   * 
   * @return the chemical formula of the neutral molecule
   */
  public String getChemFormula()
  {
    return chemFormula_;
  }

  
  /**
   * 
   * @return the theoretical mass of this object
   */
  public Double getNeutralMass()
  {
    return neutralMass_;
  }

  
  /**<fim_suffix>
  public Vector<String> getModifications()
  {
    return mods_;
  }
  
  
  /**
   * 
   * @return a reliability score specific to mzTab
   */
  public int getMzTabReliability()
  {
    return mzTabReliability_;
  }

  
  /**
   * returns the intensity value of a certain experiment; if there is no detection, 0 is returned
   * @param exp the experiment name
   * @<fim_middle>","
   * 
   * @return sorted (by abundance) vector of modifications/adducts
   */","
   * 
   * @return the modifications of this object
   */"
"<fim_prefix>
   * returns the intensity value of a certain experiment; if there is no detection, 0 is returned
   * @param exp the experiment name
   * @return the intensity value of a certain experiment; if there is no detection, 0 is returned
   */
  public Double getArea(String exp){
    if (areas_.containsKey(exp))
      return areas_.get(exp);
    else
      return 0d;
  }
  
  /**<fim_suffix>
  public short getEvidenceReliabilty(String exp){
    short reliability = EVIDENCE_MS1_ONLY;
    for (Hashtable<String,Short> relies : evidenceReliabilityOfMods_.values()){
      if (!relies.containsKey(exp))
        continue;
      // returns the corresponding reliability, where MS2 evidence, and more uncertain MS2 evidence is preceding
      if (relies.get(exp)>reliability)
<fim_middle>","
   * returns the reliability of this identified area - for details see ""EVIDENCE_"" specifications in this object
   * @param exp
   * @return
   */","
   * returns the intensity value of a certain experiment; if there is no detection, 0 is returned
   * @param exp the experiment name
   * @return the intensity value"
"<fim_prefix>cross the various aspects
 * @author Juergen Hartler
 *
 */

public class SummaryVO
{
  /** a unique identifier that must be different between the detected FeatureVOs*/
  private Integer id_;
  /** a unique identifier for this species*/
  private String speciesId_;
  /** ids referring to FeatureVOs that belong to this summary*/
  private Vector<Integer> featureRefs_;
  /**<fim_suffix>
  private String molecularId_;
  /** the chemical formula of the neutral molecule*/
  private String chemFormula_;
  /** the theoretical mass of this object*/
  private Double neutralMass_;
  /** sorted (by abundance) vector of modifications/adducts*/
  private Vector<String> mods_;
  /** a reliability score specific to mzTab*/
  private int mzTabReliability_;
  /** the tota<fim_middle>"," structural information of this SummaryVO; if none present, this value is null*/", the molecular formula of the neutral molecule*/
"<fim_prefix>/** the reliability of the evidence of every modification; first key modification; second key: experiment*/
  private Hashtable<String,Hashtable<String,Short>> evidenceReliabilityOfMods_;
  /** the mean retention time for each selected group (heat map); first key: modification; key: group name; value: mean area*/
  private Hashtable<String,Hashtable<String,Double>> groupRts_;
  /**<fim_suffix>  
  private Hashtable<String,Hashtable<String,Double>> groupRtStdevs_;
  
  /** there is no ms2 evidence found for the hit*/
  public final static short EVIDENCE_MS1_ONLY = 0;
  /** ms2 found and no overlap*/
  public final static short EVIDENCE_MS2_UNAMBIGUOUS = 1;
  /** ms2 is found, but there is an overlap with an isobar from another species, but the two hits can be separate<fim_middle>", the standard deviations for the retention times of each selected group (heat map); first key: modification; key: group name; value: mean area*/, the standard deviation of retention time for each selected group (heat map); first key: modification; key: group name; value: standard deviation*/
"<fim_prefix>ention times of each selected group (heat map); first key: modification; key: group name; value: mean area*/  
  private Hashtable<String,Hashtable<String,Double>> groupRtStdevs_;
  
  /** there is no ms2 evidence found for the hit*/
  public final static short EVIDENCE_MS1_ONLY = 0;
  /** ms2 found and no overlap*/
  public final static short EVIDENCE_MS2_UNAMBIGUOUS = 1;
  /**<fim_suffix> 
  public final static short EVIDENCE_MS2_SPLIT = 2;
  /** ms2 is found, but there is an overlap with an isobar from another species, and the two hits cannot be separated*/
  public final static short EVIDENCE_MS2_NO_SPLIT_POSSIBLE = 3;
  
  /**
   * constructor for creating cumulative class containing information across the various aspects
   * @param id a unique identifier th<fim_middle>"," ms2 is found, but there is an overlap with an isobar from another species, but the two hits can be separated*/", ms2 found and an overlap*/
"<fim_prefix>ring> mods_;
  /** a reliability score specific to mzTab*/
  private int mzTabReliability_;
  /** the totally detected values/areas for the experiments; key: experiment name; value: area*/
  private Hashtable<String,Double> areas_;
  /** the mean area for each selected group (heat map); key: group name; value: mean area*/
  private LinkedHashMap<String,Double> groupMeans_;
  /**<fim_suffix>
  private LinkedHashMap<String,Double> groupCoeffVar_;
  /** the retention times of the highest peaks of every modification; first key modification; second key: experiment*/
  private Hashtable<String,Hashtable<String,Double>> rtsOfMods_;
  /** the reliability of the evidence of every modification; first key modification; second key: experiment*/
  private Hashtable<String,Hashta<fim_middle>", the coefficient of variation of each selected group (heat map); key: group name; value: coefficient of variation*/, the coefficient of variation of the area for each selected group (heat map); key: group name; value: coefficient
"<fim_prefix>periment
   * @param mod the adduct name
   * @param exp the experiment name
   * @return the retention time of a certain modification of an experiment
   */
  public Double getRetentionTime(String mod, String exp){
    if (rtsOfMods_.containsKey(mod) && rtsOfMods_.get(mod).containsKey(exp))
      return rtsOfMods_.get(mod).get(exp);
    else
      return null;
  }
  
  /**<fim_suffix>
  public Double getMeanRetentionTime(String mod, String group){
    if (groupRts_.containsKey(mod) && groupRts_.get(mod).containsKey(group))
      return groupRts_.get(mod).get(group);
    else
      return null;
  }

  /**
   * returns the standard deviation of the retention time of a certain modification of a sample group
   * @param mod the adduct name
   * @param group <fim_middle>","
   * returns the mean retention time of a certain modification of a sample group
   * @param mod the adduct name
   * @param group the sample group
   * @return mean retention time of a certain modification of a sample group
   */","
   * returns the mean retention time of a certain modification of a sample group
   * @param mod the adduct name
   * @param group  the sample group name
   * @return the mean retention time of a certain modification of a sample group
"
"<fim_prefix>* a unique identifier for this species*/
  private String speciesId_;
  /** ids referring to FeatureVOs that belong to this summary*/
  private Vector<Integer> featureRefs_;
  /** structural information of this SummaryVO; if none present, this value is null*/
  private String molecularId_;
  /** the chemical formula of the neutral molecule*/
  private String chemFormula_;
  /**<fim_suffix>
  private Double neutralMass_;
  /** sorted (by abundance) vector of modifications/adducts*/
  private Vector<String> mods_;
  /** a reliability score specific to mzTab*/
  private int mzTabReliability_;
  /** the totally detected values/areas for the experiments; key: experiment name; value: area*/
  private Hashtable<String,Double> areas_;
  /** the mean area for each select<fim_middle>", the theoretical mass of this object*/, the neutral mass of the neutral molecule
"<fim_prefix>S2_UNAMBIGUOUS = 1;
  /** ms2 is found, but there is an overlap with an isobar from another species, but the two hits can be separated*/ 
  public final static short EVIDENCE_MS2_SPLIT = 2;
  /** ms2 is found, but there is an overlap with an isobar from another species, and the two hits cannot be separated*/
  public final static short EVIDENCE_MS2_NO_SPLIT_POSSIBLE = 3;
  
  /**<fim_suffix>
  public SummaryVO(Integer id, String speciesId, String molecularId, Vector<Integer> featureRefs, String chemFormula,
      Double neutralMass, Float rt, Vector<String> mods, int mzTabReliability, Hashtable<String,Double> areas,
      Hashtable<String,Hashtable<String,Double>> rtsOfMods, Hashtable<String,Hashtable<String,Short>> evidenceReliabilityOfMods,
      LinkedHashMap<Strin<fim_middle>","
   * constructor for creating cumulative class containing information across the various aspects
   * @param id a unique identifier that must be different between the detected SummaryVOs
   * @param speciesId a unique identifier for this species
   * @param molecularId structural information of this SummaryVO; if none present, this value is null
   * @param featureRefs ids referring to FeatureVOs that belong to this summary
   * @param chemFormula the chemical formula of the neutral molecule
   * @param neutralMass the theoretical mass of this object
   * @param rt the retention time of the strongest detection peak across all experiments
   * @param mods sorted (by abundance) vector of modifications/adducts
   * @param mzTabReliability a reliability score specific to mzTab
   * @param areas the mean area for each selected group (heat map); key: group name; value: mean area
   * @param rtsOfMods retention times of the highest peaks of every modification; first key modification; second key: experiment
   * @param evidenceReliabilityOfMods what kind of evidence supports this area value; first key modification; second key: experiment
   * @param expsOfGroup key: group name; value: experiments belonging to this group
   */"," ms2 is found, but there is an overlap with an isobar from another species, and the two hits cannot be separated*/"
"<fim_prefix>lityOfMods,
      LinkedHashMap<String,Vector<String>> expsOfGroup)
  {
    this(null,speciesId,molecularId,featureRefs,chemFormula,neutralMass,rt,mods,mzTabReliability,areas,rtsOfMods,evidenceReliabilityOfMods,
        expsOfGroup);
  }

  
  /**
   * 
   * @return the unique identifier for this summary
   */
  public Integer getId()
  {
    return id_;
  }

  
  /**<fim_suffix>
  public void setId(Integer id)
  {
    this.id_ = id;
  }


  /**
   * 
   * @return a unique identifier for this species
   */
  public String getSpeciesId()
  {
    return speciesId_;
  }

  
  /**
   * 
   * @return ids referring to FeatureVOs that belong to this summary
   */
  public Vector<Integer> getFeatureRefs()
  {
    return featureRefs_;
  }

  <fim_middle>","
   * sets the unique identifier (in cases where sorting is required)
   * @param id the he unique identifier for this summary
   */","
   * 
   * @param id
   */"
"<fim_prefix>mport java.util.Vector;

import at.tugraz.genome.lda.vos.ExportOptionsVO;
import at.tugraz.genome.maspectras.utils.Calculator;

/**
 * class containing cumulative information across the various aspects
 * @author Juergen Hartler
 *
 */

public class SummaryVO
{
  /** a unique identifier that must be different between the detected FeatureVOs*/
  private Integer id_;
  /**<fim_suffix>
  private String speciesId_;
  /** ids referring to FeatureVOs that belong to this summary*/
  private Vector<Integer> featureRefs_;
  /** structural information of this SummaryVO; if none present, this value is null*/
  private String molecularId_;
  /** the chemical formula of the neutral molecule*/
  private String chemFormula_;
  /** the theoretical mass of this object*/
<fim_middle>", a unique identifier for this species*/, the species id of the organism that
"<fim_prefix>
    return id_;
  }

  
  /**
   * sets the unique identifier (in cases where sorting is required)
   * @param id the he unique identifier for this summary
   */
  public void setId(Integer id)
  {
    this.id_ = id;
  }


  /**
   * 
   * @return a unique identifier for this species
   */
  public String getSpeciesId()
  {
    return speciesId_;
  }

  
  /**<fim_suffix>
  public Vector<Integer> getFeatureRefs()
  {
    return featureRefs_;
  }

  
  /**
   * 
   * @return structural information of this SummaryVO; if none present, this value is null
   */
  public String getMolecularId()
  {
    return molecularId_;
  }
  
  
  /**
   * 
   * @return the chemical formula of the neutral molecule
   */
  public String getChemFormula<fim_middle>","
   * 
   * @return ids referring to FeatureVOs that belong to this summary
   */","
   * sets the unique identifier (in cases where sorting is required)
   * @param speciesId"
"<fim_prefix>d_;
  }

  
  /**
   * 
   * @return ids referring to FeatureVOs that belong to this summary
   */
  public Vector<Integer> getFeatureRefs()
  {
    return featureRefs_;
  }

  
  /**
   * 
   * @return structural information of this SummaryVO; if none present, this value is null
   */
  public String getMolecularId()
  {
    return molecularId_;
  }
  
  
  /**<fim_suffix>
  public String getChemFormula()
  {
    return chemFormula_;
  }

  
  /**
   * 
   * @return the theoretical mass of this object
   */
  public Double getNeutralMass()
  {
    return neutralMass_;
  }

  
  /**
   * 
   * @return sorted (by abundance) vector of modifications/adducts
   */
  public Vector<String> getModifications()
  {
    return mods_;
  }
 <fim_middle>","
   * 
   * @return the chemical formula of the neutral molecule
   */","
   * 
   * @return the chemical formula of this object
   */"
"<fim_prefix>NeutralMass()
  {
    return neutralMass_;
  }

  
  /**
   * 
   * @return sorted (by abundance) vector of modifications/adducts
   */
  public Vector<String> getModifications()
  {
    return mods_;
  }
  
  
  /**
   * 
   * @return a reliability score specific to mzTab
   */
  public int getMzTabReliability()
  {
    return mzTabReliability_;
  }

  
  /**<fim_suffix>
  public Double getArea(String exp){
    if (areas_.containsKey(exp))
      return areas_.get(exp);
    else
      return 0d;
  }
  
  /**
   * returns the reliability of this identified area - for details see ""EVIDENCE_"" specifications in this object
   * @param exp
   * @return
   */
  public short getEvidenceReliabilty(String exp){
    short reliability = EVIDENCE_MS1<fim_middle>","
   * returns the intensity value of a certain experiment; if there is no detection, 0 is returned
   * @param exp the experiment name
   * @return the intensity value of a certain experiment; if there is no detection, 0 is returned
   */","
   * 
   * @return a reliability score specific to mzIdentML
   */"
"<fim_prefix>up
   * @param mod the adduct name
   * @param group the sample group
   * @return mean retention time of a certain modification of a sample group
   */
  public Double getMeanRetentionTime(String mod, String group){
    if (groupRts_.containsKey(mod) && groupRts_.get(mod).containsKey(group))
      return groupRts_.get(mod).get(group);
    else
      return null;
  }

  /**<fim_suffix>
  public Double getStdevRetentionTime(String mod, String group){
    if (groupRtStdevs_.containsKey(mod) && groupRtStdevs_.get(mod).containsKey(group))
      return groupRtStdevs_.get(mod).get(group);
    else
      return null;
  }
  
  
}
<fim_middle>","
   * returns the standard deviation of the retention time of a certain modification of a sample group
   * @param mod the adduct name
   * @param group the sample group
   * @return standard deviation of a certain modification of a sample group
   */","
   * Returns the standard deviation of retention time of a certain modification of a sample group
   * @param mod the adduct name
   * @param group the sample group
   * @return standard deviation of retention time of a certain modification of a sample group
 "
"<fim_prefix> ids referring to FeatureVOs that belong to this summary*/
  private Vector<Integer> featureRefs_;
  /** structural information of this SummaryVO; if none present, this value is null*/
  private String molecularId_;
  /** the chemical formula of the neutral molecule*/
  private String chemFormula_;
  /** the theoretical mass of this object*/
  private Double neutralMass_;
  /**<fim_suffix>
  private Vector<String> mods_;
  /** a reliability score specific to mzTab*/
  private int mzTabReliability_;
  /** the totally detected values/areas for the experiments; key: experiment name; value: area*/
  private Hashtable<String,Double> areas_;
  /** the mean area for each selected group (heat map); key: group name; value: mean area*/
  private LinkedHashMap<String,Double<fim_middle>", sorted (by abundance) vector of modifications/adducts*/, the number of experiments that have been used to calculate this object*/
"<fim_prefix>s_;
  /** structural information of this SummaryVO; if none present, this value is null*/
  private String molecularId_;
  /** the chemical formula of the neutral molecule*/
  private String chemFormula_;
  /** the theoretical mass of this object*/
  private Double neutralMass_;
  /** sorted (by abundance) vector of modifications/adducts*/
  private Vector<String> mods_;
  /**<fim_suffix>
  private int mzTabReliability_;
  /** the totally detected values/areas for the experiments; key: experiment name; value: area*/
  private Hashtable<String,Double> areas_;
  /** the mean area for each selected group (heat map); key: group name; value: mean area*/
  private LinkedHashMap<String,Double> groupMeans_;
  /** the coefficient of variation of each selected group (heat <fim_middle>", a reliability score specific to mzTab*/, the number of experiments that have been used
"<fim_prefix>ble> groupMeans_;
  /** the coefficient of variation of each selected group (heat map); key: group name; value: coefficient of variation*/
  private LinkedHashMap<String,Double> groupCoeffVar_;
  /** the retention times of the highest peaks of every modification; first key modification; second key: experiment*/
  private Hashtable<String,Hashtable<String,Double>> rtsOfMods_;
  /**<fim_suffix>
  private Hashtable<String,Hashtable<String,Short>> evidenceReliabilityOfMods_;
  /** the mean retention time for each selected group (heat map); first key: modification; key: group name; value: mean area*/
  private Hashtable<String,Hashtable<String,Double>> groupRts_;
  /** the standard deviations for the retention times of each selected group (heat map); first key: modification<fim_middle>", the reliability of the evidence of every modification; first key modification; second key: experiment*/, the evidence reliability of each selected group (heat map); key: modification; value: evidence
"<fim_prefix>ble<String,Double>());
          }
          doubleArray = new double[rtsOfGroup.size()];
          for (int i=0; i!=rtsOfGroup.size(); i++) doubleArray[i] = rtsOfGroup.get(i);  
          groupRts_.get(mod).put(groupName, Calculator.mean(doubleArray));
          groupRtStdevs_.get(mod).put(groupName, Calculator.stddeviation(rtsOfGroup));
        }
      }
    }
  }
  
  /**<fim_suffix>
  public SummaryVO(String speciesId, String molecularId, Vector<Integer> featureRefs, String chemFormula,
      Double neutralMass, Float rt, Vector<String> mods, int mzTabReliability, Hashtable<String,Double> areas,
      Hashtable<String,Hashtable<String,Double>> rtsOfMods, Hashtable<String,Hashtable<String,Short>> evidenceReliabilityOfMods,
      LinkedHashMap<String,Vector<Str<fim_middle>","
   * constructor for creating cumulative class containing information across the various aspects
   * @param speciesId a unique identifier for this species
   * @param molecularId structural information of this SummaryVO; if none present, this value is null
   * @param featureRefs ids referring to FeatureVOs that belong to this summary
   * @param chemFormula the chemical formula of the neutral molecule
   * @param neutralMass the theoretical mass of this object
   * @param rt the retention time of the strongest detection peak across all experiments
   * @param mods sorted (by abundance) vector of modifications/adducts
   * @param mzTabReliability a reliability score specific to mzTab
   * @param areas the mean area for each selected group (heat map); key: group name; value: mean area
   * @param rtsOfMods retention times of the highest peaks of every modification; first key modification; second key: experiment
   * @param evidenceReliabilityOfMods what kind of evidence supports this area value; first key modification; second key: experiment
   * @param expsOfGroup key: group name; value: experiments belonging to this group
   */","
   * @return the groupRts_
   */"
"<fim_prefix>tring getChemFormula()
  {
    return chemFormula_;
  }

  
  /**
   * 
   * @return the theoretical mass of this object
   */
  public Double getNeutralMass()
  {
    return neutralMass_;
  }

  
  /**
   * 
   * @return sorted (by abundance) vector of modifications/adducts
   */
  public Vector<String> getModifications()
  {
    return mods_;
  }
  
  
  /**<fim_suffix>
  public int getMzTabReliability()
  {
    return mzTabReliability_;
  }

  
  /**
   * returns the intensity value of a certain experiment; if there is no detection, 0 is returned
   * @param exp the experiment name
   * @return the intensity value of a certain experiment; if there is no detection, 0 is returned
   */
  public Double getArea(String exp){
    if (areas_.c<fim_middle>","
   * 
   * @return a reliability score specific to mzTab
   */","
   * 
   * @return the mzTabReliability of this object
  "
"<fim_prefix> returned
   * @param groupName the name of the group
   * @return the mean intensity value of a certain experiment group; if there is no detection, 0 is returned
   */
  public Double getMeanArea(String groupName){
    Double area = 0d;
    if (groupMeans_!=null && groupMeans_.containsKey(groupName))
      area = groupMeans_.get(groupName);
    return area;
  }
  
  
  /**<fim_suffix>
  public Double getCoeffVar(String groupName){
    Double stdev = Double.NaN;
    if (groupCoeffVar_.containsKey(groupName))
      stdev = groupCoeffVar_.get(groupName);
    return stdev;
  }
  
  /**
   * calculates a deviation; the expOptions specifies which deviation value has to be calculated 
   * @param expOptions value object specifying the type of deviation value
  <fim_middle>","
   * returns the coefficient of variation of a certain experiment group; if there is no detection, 0 is returned
   * @param groupName the name of the group
   * @return the coefficient of variation of a certain experiment group; if there is no detection, 0 is returned
   */","
   * returns the standard deviation of the intensity values of a certain experiment group
   * @param groupName the name of the group
   * @return the standard deviation of the intensity values of a certain experiment group; if there is no detection, 0 is returned
   */"
"<fim_prefix>ptions.getExportType() == ExportOptionsVO.EXPORT_SD_DEV_AND_ERROR)
        sdValue = sdValue*Double.parseDouble(expOptions.getSdValue());
      if (expOptions.getExportType() == ExportOptionsVO.EXPORT_SD_ERROR || expOptions.getExportType() == ExportOptionsVO.EXPORT_SD_DEV_AND_ERROR)
        sdValue = sdValue/Math.sqrt(areasOfGroup.size());
    }
    return sdValue;
  }
  
  /**<fim_suffix>
  public Double getRetentionTime(String mod, String exp){
    if (rtsOfMods_.containsKey(mod) && rtsOfMods_.get(mod).containsKey(exp))
      return rtsOfMods_.get(mod).get(exp);
    else
      return null;
  }
  
  /**
   * returns the mean retention time of a certain modification of a sample group
   * @param mod the adduct name
   * @param group the sample group
   * @re<fim_middle>","
   * returns the retention time of a certain modification of an experiment
   * @param mod the adduct name
   * @param exp the experiment name
   * @return the retention time of a certain modification of an experiment
   */","
   * returns the retention time of a certain modification of a sample group
   * @param mod the adduct name
   * @param group the sample group
   * @reutrn the retention time  fixed bug in retention time"
"<fim_prefix>MS1_ONLY;
    for (Hashtable<String,Short> relies : evidenceReliabilityOfMods_.values()){
      if (!relies.containsKey(exp))
        continue;
      // returns the corresponding reliability, where MS2 evidence, and more uncertain MS2 evidence is preceding
      if (relies.get(exp)>reliability)
        reliability = relies.get(exp);
    }
    return reliability;
  }
  
  /**<fim_suffix>
  public Double getMeanArea(String groupName){
    Double area = 0d;
    if (groupMeans_!=null && groupMeans_.containsKey(groupName))
      area = groupMeans_.get(groupName);
    return area;
  }
  
  
  /**
   * returns the coefficient of variation of a certain experiment group; if there is no detection, 0 is returned
   * @param groupName the name of the group
   * @retu<fim_middle>","
   * returns the mean intensity value of a certain experiment group; if there is no detection, 0 is returned
   * @param groupName the name of the group
   * @return the mean intensity value of a certain experiment group; if there is no detection, 0 is returned
   */","
   * returns the mean area of a certain experiment group; if there is no detection, 0 is returned
   * @param groupName the name of the group
   * @retu the mean area
   */"
"<fim_prefix>that must be different between the detected FeatureVOs*/
  private Integer id_;
  /** a unique identifier for this species*/
  private String speciesId_;
  /** ids referring to FeatureVOs that belong to this summary*/
  private Vector<Integer> featureRefs_;
  /** structural information of this SummaryVO; if none present, this value is null*/
  private String molecularId_;
  /**<fim_suffix>
  private String chemFormula_;
  /** the theoretical mass of this object*/
  private Double neutralMass_;
  /** sorted (by abundance) vector of modifications/adducts*/
  private Vector<String> mods_;
  /** a reliability score specific to mzTab*/
  private int mzTabReliability_;
  /** the totally detected values/areas for the experiments; key: experiment name; value: area*/
  <fim_middle>", the chemical formula of the neutral molecule*/, the chemical formula of this object
"<fim_prefix>/*<fim_suffix>
package net.anwiba.tools.definition.schema.json.gramma.element;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class JObject implements IJNode {

  private final Map<String, JField> values = new HashMap<>();
  private final List<String> names = new ArrayList<>();
  private final Map<String, JA<fim_middle>","
 * #%L
 * anwiba commons tools
 * %%
 * Copyright (C) 2007 - 2016 Andreas Bartels
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */","*
 * Created by anwiba on 5/8/17.
 */"
"<fim_prefix>/*<fim_suffix>
package com.b3dgs.lionengine;

import static com.b3dgs.lionengine.UtilAssert.assertEquals;
import static com.b3dgs.lionengine.UtilAssert.assertThrows;

import org.junit.jupiter.api.Test;

/**
 * Test {@link Origin}.
 */
final class OriginTest
{
    /**
     * Test the enum.
     * 
     * @throws Exception If error.
     */
    @Test
    void testEnum() throws Excep<fim_middle>","
 * Copyright (C) 2013-2024 Byron 3D Games Studio (www.b3dgs.com) Pierre-Alexandre (contact@b3dgs.com)
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */","*
 * OriginTest.java
 *
 * @author <NAME>
 */"
"<fim_prefix>ed a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
package com.b3dgs.lionengine;

import static com.b3dgs.lionengine.UtilAssert.assertEquals;
import static com.b3dgs.lionengine.UtilAssert.assertThrows;

import org.junit.jupiter.api.Test;

/**
 * Test {@link Origin}.
 */
final class OriginTest
{
    /**<fim_suffix>
    @Test
    void testEnum() throws Exception
    {
        UtilTests.testEnum(Origin.class);
    }

    /**
     * Test the origin enum switch.
     */
    @SuppressWarnings(""incomplete-switch"")
    @Test
    void testEnumSwitch()
    {
        for (final Origin origin : Origin.values())
        {
            switch (origin)
            {
                case TOP_L<fim_middle>","
     * Test the enum.
     * 
     * @throws Exception If error.
     */","
     * Test the origin constructor.
     */"
"<fim_prefix>l Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */
package com.b3dgs.lionengine;

import static com.b3dgs.lionengine.UtilAssert.assertEquals;
import static com.b3dgs.lionengine.UtilAssert.assertThrows;

import org.junit.jupiter.api.Test;

/**<fim_suffix>
final class OriginTest
{
    /**
     * Test the enum.
     * 
     * @throws Exception If error.
     */
    @Test
    void testEnum() throws Exception
    {
        UtilTests.testEnum(Origin.class);
    }

    /**
     * Test the origin enum switch.
     */
    @SuppressWarnings(""incomplete-switch"")
    @Test
    void testEnumSwitch()
    {
        for (final Or<fim_middle>","
 * Test {@link Origin}.
 */","
 * Origin test."
"<fim_prefix>0));
                    break;
                case MIDDLE:
                    assertEquals(2.0, origin.getX(3.0, 2.0));
                    assertEquals(2.0, origin.getY(3.0, 2.0));

                    assertEquals(3.0, origin.getX(3.0, 0.0));
                    assertEquals(3.0, origin.getY(3.0, 0.0));
                    break;
            }
        }
    }

    /**<fim_suffix>
    @Test
    void testEnumFail()
    {
        final Origin fail = Origin.values()[6];

        assertThrows(() -> assertEquals(-1.0, fail.getX(0.0, 0.0)), LionEngineException.ERROR_UNKNOWN_ENUM + fail);
        assertThrows(() -> assertEquals(-1.0, fail.getY(0.0, 0.0)), LionEngineException.ERROR_UNKNOWN_ENUM + fail);
    }
}
<fim_middle>","
     * Test the origin enum fail.
     */","
     * Test the enum.
     */"
"<fim_prefix>ilAssert.assertEquals;
import static com.b3dgs.lionengine.UtilAssert.assertThrows;

import org.junit.jupiter.api.Test;

/**
 * Test {@link Origin}.
 */
final class OriginTest
{
    /**
     * Test the enum.
     * 
     * @throws Exception If error.
     */
    @Test
    void testEnum() throws Exception
    {
        UtilTests.testEnum(Origin.class);
    }

    /**<fim_suffix>
    @SuppressWarnings(""incomplete-switch"")
    @Test
    void testEnumSwitch()
    {
        for (final Origin origin : Origin.values())
        {
            switch (origin)
            {
                case TOP_LEFT:
                    assertEquals(3.0, origin.getX(3.0, 2.0));
                    assertEquals(3.0, origin.getY(3.0, 2.0));

                    assertEqu<fim_middle>","
     * Test the origin enum switch.
     */","
     * Test the enum.
     * 
 "
"<fim_prefix>package ru.ecom.jboss.system;

import java.net.MalformedURLException;

import org.jboss.system.JBossRMIClassLoader;

public class RMIClassLoaderBubldeEntryFix extends JBossRMIClassLoader {
	// Constructors --------------------------------------------------

	/**<fim_suffix>
	public RMIClassLoaderBubldeEntryFix() {
		super() ;
	}

	/**
	 * Just delegate
	 */
	@Override
	public Class loadClass(String codebase, String name, ClassLoader ignored)
			throws MalformedURLException, ClassNotFoundException {

		// System.out.println(""codebame = ""+codebase+"", name=""+name) ;

		if (codebase != null && codebase.startsWith(""bundleentry://"")) {
			return Thread.current<fim_middle>","
	 * Required constructor
	 */","
	 * Just delegate
	 */"
"<fim_prefix>package ru.ecom.jboss.system;

import java.net.MalformedURLException;

import org.jboss.system.JBossRMIClassLoader;

public class RMIClassLoaderBubldeEntryFix extends JBossRMIClassLoader {
	// Constructors --------------------------------------------------

	/**
	 * Required constructor
	 */
	public RMIClassLoaderBubldeEntryFix() {
		super() ;
	}

	/**<fim_suffix>
	@Override
	public Class loadClass(String codebase, String name, ClassLoader ignored)
			throws MalformedURLException, ClassNotFoundException {

		// System.out.println(""codebame = ""+codebase+"", name=""+name) ;

		if (codebase != null && codebase.startsWith(""bundleentry://"")) {
			return Thread.currentThread().getContextClassLoader().loadClass(
					name);
		} else {
			return super.lo<fim_middle>","
	 * Just delegate
	 */","
	 * Required constructor
	 *"
"<fim_prefix>/*<fim_suffix>
package fr.iamacat.optimizationsandtweaks.utils.apache.commons.math3.transform;

/**
 * This enumeration defines the type of transform which is to be computed.
 *
 * @since 3.0
 */
public enum TransformType {
    /** The type to be specified for forward transforms. */
    FORWARD,

    /** The type to be specified for inverse transforms. */
    INVERSE;
}
<fim_middle>","
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * This enumeration defines the type of transform which is to be computed.
 *
 * @since 3.0
 */"
"<fim_prefix>RRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.iamacat.optimizationsandtweaks.utils.apache.commons.math3.transform;

/**
 * This enumeration defines the type of transform which is to be computed.
 *
 * @since 3.0
 */
public enum TransformType {
    /**<fim_suffix>
    FORWARD,

    /** The type to be specified for inverse transforms. */
    INVERSE;
}
<fim_middle>", The type to be specified for forward transforms. */, The type to be specified for forward transforms. */
"<fim_prefix>License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.iamacat.optimizationsandtweaks.utils.apache.commons.math3.transform;

/**
 * This enumeration defines the type of transform which is to be computed.
 *
 * @since 3.0
 */
public enum TransformType {
    /** The type to be specified for forward transforms. */
    FORWARD,

    /**<fim_suffix>
    INVERSE;
}
<fim_middle>", The type to be specified for inverse transforms. */, The type to be specified for inverse transforms. */
"<fim_prefix> applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package fr.iamacat.optimizationsandtweaks.utils.apache.commons.math3.transform;

/**<fim_suffix>
public enum TransformType {
    /** The type to be specified for forward transforms. */
    FORWARD,

    /** The type to be specified for inverse transforms. */
    INVERSE;
}
<fim_middle>","
 * This enumeration defines the type of transform which is to be computed.
 *
 * @since 3.0
 */","
 * Enumerates the types of transforms.
 *
 * @version $Id$
 * @since 3.0
"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.epp.internal.mpc.core.transport.httpclient;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

import org.apache.hc.client5.http.ClientProtocolException;
import org.apache.hc.client5.http.auth.AuthScope;
import org.apache.hc.client5.http.auth.Credentials;
import org.apache.hc.client5.http.auth.CredentialsStore;
import org.apache.<fim_middle>","*****************************************************************************
 * Copyright (c) 2010, 2018 The Eclipse Foundation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     The Eclipse Foundation - initial API and implementation
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>, context, builder);
		} catch (URISyntaxException e) {
			throw new IOException(e);
		}
	}

	private static ClassicHttpRequest setConfig(ClassicHttpRequest request, RequestConfig config) {
		if (request instanceof HttpUriRequestBase) {
			((HttpUriRequestBase) request).setConfig(config);
		} else {
			// could not set the config, here
			request = ClassicRequestBuilder.copy(request)/*<fim_suffix>.build();
		}
		return request;
	}

	public ClassicHttpRequest configureRequest(ClassicHttpRequest request) {
		if (client instanceof Configurable && ((Configurable) client).getConfig() != null) {
			return setConfig(request, ((Configurable) client).getConfig());
		}
		return request;
	}

	public HttpResponse configureAndExecute(HttpUriRequest request)
			throws ClientProtocolException<fim_middle>",.setConfig(config)*/,"/
					."
"<fim_prefix>/**<fim_suffix>
package org.eclipse.epsilon.eol.debug;

import org.eclipse.epsilon.common.module.ModuleElement;
import org.eclipse.epsilon.eol.execute.control.ExecutionController;

public interface IEolDebugger extends ExecutionController {

	BreakpointResult verifyBreakpoint(BreakpointRequest request);

	void setTarget(IEpsilonDebugTarget target);

	IEpsilonDebugTarget getTarget();

	void step();

	<fim_middle>","*******************************************************************
 * Copyright (c) 2024 The University of York.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 **********************************************************************/","
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>/*<fim_suffix>

package org.crossmobile.build;

import com.panayotis.appenh.EnhancerManager;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.crossmobile.bridge.system.BaseUtils;
import org.crossmobile.utils.Log;
import org.crossmobile.utils.UIUtils;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
im<fim_middle>","
 * (c) 2023 by Panayotis Katsaloulis
 *
 * SPDX-License-Identifier: AGPL-3.0-only
 */","*
 * Created by <NAME> on 02/12/14.
 */"
"<fim_prefix>/**<fim_suffix>
package com.powsybl.iidm.network.impl;

import com.powsybl.iidm.network.*;

import java.util.*;
import java.util.function.BiFunction;

/**
 * @author Olivier Perrin {@literal <olivier.perrin at rte-france.com>}
 */
class OverloadManagementSystemAdderImpl extends AbstractIdentifiableAdder<OverloadManagementSystemAdderImpl>
        implements OverloadManagementSystemAdder {

    abstrac<fim_middle>","
 * Copyright (c) 2023, RTE (http://www.rte-france.com)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * SPDX-License-Identifier: MPL-2.0
 */","
 * @author Olivier Perrin {@literal <olivier.perrin at rte-france.com>}
 */"
"<fim_prefix>ce.com)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * SPDX-License-Identifier: MPL-2.0
 */
package com.powsybl.iidm.network.impl;

import com.powsybl.iidm.network.*;

import java.util.*;
import java.util.function.BiFunction;

/**<fim_suffix>
class OverloadManagementSystemAdderImpl extends AbstractIdentifiableAdder<OverloadManagementSystemAdderImpl>
        implements OverloadManagementSystemAdder {

    abstract class AbstractTrippingAdderImpl<I extends TrippingAdder<I>> implements Validable, TrippingAdder<I> {
        protected String key = null;
        protected String name = null;
        protected double currentLimit<fim_middle>","
 * @author Olivier Perrin {@literal <olivier.perrin at rte-france.com>}
 */","
 * Implementation of {@link OverloadManagementSystemAdder}.
 *
 * @author <NAME>
 */"
"<fim_prefix>
import com.recalot.common.communication.Item;
import com.recalot.common.communication.RecommendationResult;
import com.recalot.common.communication.RecommendedItem;
import com.recalot.common.exceptions.BaseException;
import com.recalot.common.context.ContextProvider;
import com.recalot.common.interfaces.model.rec.Recommender;
import flexjson.JSONDeserializer;

import java.util.*;

/**<fim_suffix>
public class MostPopularRecommender extends Recommender {

    private RecommendationResult result;

    @Override
    public void train() throws BaseException {

        Map<String, Integer> count = new LinkedHashMap<>();

        for (Interaction interaction : getDataSet().getInteractions()) {
            if (interaction.getType().toLowerCase().equals(""rating"")) {
                He<fim_middle>","
 * @author matthaeus.schmedding
 */","
 * Created by zhelu on 8/29/15"
"<fim_prefix>/*<fim_suffix>

package carpettisaddition.logging.loggers.tickwarp;

import net.minecraft.server.command.ServerCommandSource;
import org.jetbrains.annotations.Nullable;

public interface TickWarpInfo extends TickWarpInfoReader
{
	@Nullable ServerCommandSource getTimeAdvancer();

	// we need to store the advancer by ourselves for mc1.20.3
	void setTimeAdvancer(@Nullable ServerCommandSource timeAdvanc<fim_middle>","
 * This file is part of the Carpet TIS Addition project, licensed under the
 * GNU Lesser General Public License v3.0
 *
 * Copyright (C) 2023  Fallen_Breath and contributors
 *
 * Carpet TIS Addition is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Carpet TIS Addition is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Carpet TIS Addition.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * @author carpettis
 */"
"<fim_prefix>/*<fim_suffix>

package javax.faces.model;

public class SelectItem implements java.io.Serializable
{
  private String description;
  private boolean disabled;
  private boolean escape;
  private String label;
  private Object value;

  public SelectItem()
  {
  }

  public SelectItem(Object value)
  {
    setValue(value);
    if (value != null)
      setLabel(value.toString());
    setEscape(true);<fim_middle>","
 * Copyright (c) 1998-2012 Caucho Technology -- all rights reserved
 *
 * This file is part of Resin(R) Open Source
 *
 * Each copy or derived work must preserve the copyright notice and this
 * notice unmodified.
 *
 * Resin Open Source is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * Resin Open Source is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty
 * of NON-INFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Resin Open Source; if not, write to the
 *
 *   Free Software Foundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Scott Ferguson
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package org.nabucco.framework.generator;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;

/**
 * AllTests
 * 
 * @author Nicolas Moser, PRODYNA AG
 */
@RunWith(Suite.class)
@Suite.SuiteClasses( { org.nabucco.framework.generator.base.AllTests.class,
        org.nabucco.framework.generator.component.AllTests.class,
        org.nabucco.framework.generator.datatype.AllTe<fim_middle>","
 * Copyright 2012 PRODYNA AG
 *
 * Licensed under the Eclipse Public License (EPL), Version 1.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.opensource.org/licenses/eclipse-1.0.php or
 * http://www.nabucco.org/License.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * AllTests
 * 
 * @author Nicolas Moser, PRODYNA AG
 */"
"<fim_prefix>o in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.nabucco.framework.generator;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;

/**<fim_suffix>
@RunWith(Suite.class)
@Suite.SuiteClasses( { org.nabucco.framework.generator.base.AllTests.class,
        org.nabucco.framework.generator.component.AllTests.class,
        org.nabucco.framework.generator.datatype.AllTests.class,
        org.nabucco.framework.generator.exception.AllTests.class,
        org.nabucco.framework.generator.message.AllTests.class,
        org.nabucco.framewor<fim_middle>","
 * AllTests
 * 
 * @author Nicolas Moser, PRODYNA AG
 */","
 * @author <NAME>
 */"
"<fim_prefix> for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */
package org.alfresco.repo.security.sync;

import java.util.Collection;
import java.util.Date;

/**
 * The result of a synch
 * @author mrogers
 *
 */
public interface SynchronizeDiagnostic
{
    /**<fim_suffix>
    public boolean isActive();
    
    /**
     * get the list of users who would be synchronised
     * @return the list of users who would be synchronized
     */
    public Collection<String> getUsers();
    
    /**
     * get the list of groups who would be syncronised
     * @return the list of groups who would be synchronized
     */
    public Collection<String> <fim_middle>","
     * Is the user directory active
     * @return true if active
     */","
     * get the date the diagnostic was created
     * @return the date the diagnostic was created
"
"<fim_prefix>ty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */
package org.alfresco.repo.security.sync;

import java.util.Collection;
import java.util.Date;

/**<fim_suffix>
public interface SynchronizeDiagnostic
{
    /**
     * Is the user directory active
     * @return true if active
     */
    public boolean isActive();
    
    /**
     * get the list of users who would be synchronised
     * @return the list of users who would be synchronized
     */
    public Collection<String> getUsers();
    
    /**
     * get the list of grou<fim_middle>","
 * The result of a synch
 * @author mrogers
 *
 */","
 * Interface for synchronisation diagnostics
 * 
 * @author <NAME>
 *
"
"<fim_prefix>
 * @author mrogers
 *
 */
public interface SynchronizeDiagnostic
{
    /**
     * Is the user directory active
     * @return true if active
     */
    public boolean isActive();
    
    /**
     * get the list of users who would be synchronised
     * @return the list of users who would be synchronized
     */
    public Collection<String> getUsers();
    
    /**<fim_suffix>
    public Collection<String> getGroups();
    
    /**
     * 
     * @return Date
     */
    public Date getPersonLastSynced();
 
    /**
     * 
     * @return Date
     */
    public Date getGroupLastSynced();

}
<fim_middle>","
     * get the list of groups who would be syncronised
     * @return the list of groups who would be synchronized
     */","
     * get the list of groups who would be synchronised
     * @return the list of groups who would be synchronized
     */"
"<fim_prefix>/*<fim_suffix>
package org.alfresco.repo.security.sync;

import java.util.Collection;
import java.util.Date;

/**
 * The result of a synch
 * @author mrogers
 *
 */
public interface SynchronizeDiagnostic
{
    /**
     * Is the user directory active
     * @return true if active
     */
    public boolean isActive();
    
    /**
     * get the list of users who would be synchroni<fim_middle>","
 * #%L
 * Alfresco Repository
 * %%
 * Copyright (C) 2005 - 2016 Alfresco Software Limited
 * %%
 * This file is part of the Alfresco software. 
 * If the software was purchased under a paid Alfresco license, the terms of 
 * the paid license agreement will prevail.  Otherwise, the software is 
 * provided under the following open source license terms:
 * 
 * Alfresco is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Alfresco is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */","*
 * The result of a synch
 * @author mrogers
 *
 */"
"<fim_prefix>f not, see <http://www.gnu.org/licenses/>.
 * #L%
 */
package org.alfresco.repo.security.sync;

import java.util.Collection;
import java.util.Date;

/**
 * The result of a synch
 * @author mrogers
 *
 */
public interface SynchronizeDiagnostic
{
    /**
     * Is the user directory active
     * @return true if active
     */
    public boolean isActive();
    
    /**<fim_suffix>
    public Collection<String> getUsers();
    
    /**
     * get the list of groups who would be syncronised
     * @return the list of groups who would be synchronized
     */
    public Collection<String> getGroups();
    
    /**
     * 
     * @return Date
     */
    public Date getPersonLastSynced();
 
    /**
     * 
     * @return Date
     */
    public Da<fim_middle>","
     * get the list of users who would be synchronised
     * @return the list of users who would be synchronized
     */","
     * Is the user directory active
     * @return true if active
     */"
"<fim_prefix>/*<fim_suffix>
package org.nabucco.testautomation.engine.proxy.swing.process.reply;

/**
 * This {@link CommandReply} contains logging information from the external process, which should be
 * logged on receiver side.
 * 
 * @author Frank Ratschinski, PRODYNA AG
 */
public class LogReply extends CommandReplySupport implements CommandReply {

    private static final long serialVersionUID <fim_middle>","
* Copyright 2010 PRODYNA AG
*
* Licensed under the Eclipse Public License (EPL), Version 1.0 (the ""License"");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.opensource.org/licenses/eclipse-1.0.php or
* http://www.nabucco-source.org/nabucco-license.html
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an ""AS IS"" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/","*
 * Copyright (C) 2015 - 2017 PRODYNA AG - <a href=""http://prodyna.com"">PRODYNA AG</a>
 */"
"<fim_prefix>uired by applicable law or agreed to in writing, software
* distributed under the License is distributed on an ""AS IS"" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package org.nabucco.testautomation.engine.proxy.swing.process.reply;

/**<fim_suffix>
public class LogReply extends CommandReplySupport implements CommandReply {

    private static final long serialVersionUID = 1L;

    /**
     * Creates a {@link LogReply} instance.
     */
    public LogReply() {
        setType(CommandReplyType.LOG);
    }

    private String message;

    private Exception exception;

    private String stacktrace;

    private I<fim_middle>","
 * This {@link CommandReply} contains logging information from the external process, which should be
 * logged on receiver side.
 * 
 * @author Frank Ratschinski, PRODYNA AG
 */","
 * @author <NAME>
 */"
"<fim_prefix>oid setMessage(String message) {
        this.message = message;
    }

    /**
     * @return the exception
     */
    public Exception getException() {
        return exception;
    }

    /**
     * @param exception
     *            the exception to set
     */
    public void setException(Exception exception) {
        this.exception = exception;
    }

    /**<fim_suffix>
    public String getStacktrace() {
        return stacktrace;
    }

    /**
     * @param stacktrace
     *            the exception stacktrace to set
     */
    public void setStacktrace(String stacktrace) {
        this.stacktrace = stacktrace;
    }

    /**
     * @return the log level
     */
    public Integer getLevel() {
        return level;
    }

    <fim_middle>","
     * @return the stacktrace
     */","
     * @return the exception stacktrace
    "
"<fim_prefix>the message.
     */
    public String getMessage() {
        return message;
    }

    /**
     * @param message
     *            the message to set
     */
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * @return the exception
     */
    public Exception getException() {
        return exception;
    }

    /**<fim_suffix>
    public void setException(Exception exception) {
        this.exception = exception;
    }

    /**
     * @return the stacktrace
     */
    public String getStacktrace() {
        return stacktrace;
    }

    /**
     * @param stacktrace
     *            the exception stacktrace to set
     */
    public void setStacktrace(String stacktrace) {
        this.stac<fim_middle>","
     * @param exception
     *            the exception to set
     */","
     * @param exception
     *            the exception to set
     */"
"<fim_prefix>on exception) {
        this.exception = exception;
    }

    /**
     * @return the stacktrace
     */
    public String getStacktrace() {
        return stacktrace;
    }

    /**
     * @param stacktrace
     *            the exception stacktrace to set
     */
    public void setStacktrace(String stacktrace) {
        this.stacktrace = stacktrace;
    }

    /**<fim_suffix>
    public Integer getLevel() {
        return level;
    }

    /**
     * @param level
     *            the log level to set
     */
    public void setLevel(Integer level) {
        this.level = level;
    }

    /**
     * @return the success
     */
    public Boolean getSuccess() {
        return success;
    }

    /**
     * @param success
     *        <fim_middle>","
     * @return the log level
     */","
     * @return the level
     */"
"<fim_prefix>    */
    public void setStacktrace(String stacktrace) {
        this.stacktrace = stacktrace;
    }

    /**
     * @return the log level
     */
    public Integer getLevel() {
        return level;
    }

    /**
     * @param level
     *            the log level to set
     */
    public void setLevel(Integer level) {
        this.level = level;
    }

    /**<fim_suffix>
    public Boolean getSuccess() {
        return success;
    }

    /**
     * @param success
     *            the success to set
     */
    public void setSuccess(Boolean success) {
        this.success = success;
    }

}
<fim_middle>","
     * @return the success
     */","
     * @return the success
     */"
"<fim_prefix>bucco.testautomation.engine.proxy.swing.process.reply;

/**
 * This {@link CommandReply} contains logging information from the external process, which should be
 * logged on receiver side.
 * 
 * @author Frank Ratschinski, PRODYNA AG
 */
public class LogReply extends CommandReplySupport implements CommandReply {

    private static final long serialVersionUID = 1L;

    /**<fim_suffix>
    public LogReply() {
        setType(CommandReplyType.LOG);
    }

    private String message;

    private Exception exception;

    private String stacktrace;

    private Integer level;

    private Boolean success = true;

    /**
     * @return the message.
     */
    public String getMessage() {
        return message;
    }

    /**
     * @param mess<fim_middle>","
     * Creates a {@link LogReply} instance.
     */","
     * @param message
     *      "
"<fim_prefix>
     * @return the log level
     */
    public Integer getLevel() {
        return level;
    }

    /**
     * @param level
     *            the log level to set
     */
    public void setLevel(Integer level) {
        this.level = level;
    }

    /**
     * @return the success
     */
    public Boolean getSuccess() {
        return success;
    }

    /**<fim_suffix>
    public void setSuccess(Boolean success) {
        this.success = success;
    }

}
<fim_middle>","
     * @param success
     *            the success to set
     */","
     * @param success
     *            the success to set
     */"
"<fim_prefix>   public String getStacktrace() {
        return stacktrace;
    }

    /**
     * @param stacktrace
     *            the exception stacktrace to set
     */
    public void setStacktrace(String stacktrace) {
        this.stacktrace = stacktrace;
    }

    /**
     * @return the log level
     */
    public Integer getLevel() {
        return level;
    }

    /**<fim_suffix>
    public void setLevel(Integer level) {
        this.level = level;
    }

    /**
     * @return the success
     */
    public Boolean getSuccess() {
        return success;
    }

    /**
     * @param success
     *            the success to set
     */
    public void setSuccess(Boolean success) {
        this.success = success;
    }

}
<fim_middle>","
     * @param level
     *            the log level to set
     */","
     * @param level
     *            the log level to set
     */"
"<fim_prefix>
    public Exception getException() {
        return exception;
    }

    /**
     * @param exception
     *            the exception to set
     */
    public void setException(Exception exception) {
        this.exception = exception;
    }

    /**
     * @return the stacktrace
     */
    public String getStacktrace() {
        return stacktrace;
    }

    /**<fim_suffix>
    public void setStacktrace(String stacktrace) {
        this.stacktrace = stacktrace;
    }

    /**
     * @return the log level
     */
    public Integer getLevel() {
        return level;
    }

    /**
     * @param level
     *            the log level to set
     */
    public void setLevel(Integer level) {
        this.level = level;
    }

    /**
    <fim_middle>","
     * @param stacktrace
     *            the exception stacktrace to set
     */","
     * @param stacktrace
     *            the stacktrace to set
     */"
"<fim_prefix>private String stacktrace;

    private Integer level;

    private Boolean success = true;

    /**
     * @return the message.
     */
    public String getMessage() {
        return message;
    }

    /**
     * @param message
     *            the message to set
     */
    public void setMessage(String message) {
        this.message = message;
    }

    /**<fim_suffix>
    public Exception getException() {
        return exception;
    }

    /**
     * @param exception
     *            the exception to set
     */
    public void setException(Exception exception) {
        this.exception = exception;
    }

    /**
     * @return the stacktrace
     */
    public String getStacktrace() {
        return stacktrace;
    }

    /*<fim_middle>","
     * @return the exception
     */","
     * @return the level
     */"
"<fim_prefix>CommandReply {

    private static final long serialVersionUID = 1L;

    /**
     * Creates a {@link LogReply} instance.
     */
    public LogReply() {
        setType(CommandReplyType.LOG);
    }

    private String message;

    private Exception exception;

    private String stacktrace;

    private Integer level;

    private Boolean success = true;

    /**<fim_suffix>
    public String getMessage() {
        return message;
    }

    /**
     * @param message
     *            the message to set
     */
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * @return the exception
     */
    public Exception getException() {
        return exception;
    }

    /**
     * @param excep<fim_middle>","
     * @return the message.
     */","
     * @return the success
     */"
"<fim_prefix>} instance.
     */
    public LogReply() {
        setType(CommandReplyType.LOG);
    }

    private String message;

    private Exception exception;

    private String stacktrace;

    private Integer level;

    private Boolean success = true;

    /**
     * @return the message.
     */
    public String getMessage() {
        return message;
    }

    /**<fim_suffix>
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * @return the exception
     */
    public Exception getException() {
        return exception;
    }

    /**
     * @param exception
     *            the exception to set
     */
    public void setException(Exception exception) {
        this.exception = exception;
  <fim_middle>","
     * @param message
     *            the message to set
     */","
     * @param message
     *            the message to set
     */"
"<fim_prefix>/**<fim_suffix>
package org.camunda.bpm.modeler.ui.features.choreography;

import java.util.ArrayList;
import java.util.List;

import org.camunda.bpm.modeler.core.features.AbstractCreateFlowElementFeature;
import org.camunda.bpm.modeler.core.features.MultiUpdateFeature;
import org.camunda.bpm.modeler.core.utils.BusinessObjectUtil;
import org.camunda.bpm.modeler.ui.Images;
import org.camunda.bpm.model<fim_middle>","***************************************************************************** 
 * Copyright (c) 2011 Red Hat, Inc. 
 *  All rights reserved. 
 * This program is made available under the terms of the 
 * Eclipse Public License v1.0 which accompanies this distribution, 
 * and is available at http://www.eclipse.org/legal/epl-v10.html 
 * 
 * Contributors: 
 * Red Hat, Inc. - initial API and implementation 
 *
 * @author Innar Made
 ******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix> thisFeatures;
	}

	public static class CreateChoreographyTaskFeature extends AbstractCreateFlowElementFeature<ChoreographyTask> {

		public CreateChoreographyTaskFeature(IFeatureProvider fp) {
			super(fp, ""Choreography Task"", ""Represents interactions between two participants"");
		}

		@Override
		public String getStencilImageId() {
			return Images.IMG_16_CHOREOGRAPHY_TASK;
		}

		/*<fim_suffix>
		@Override
		public EClass getBusinessObjectClass() {
			return Bpmn2Package.eINSTANCE.getChoreographyTask();
		}
	}
}<fim_middle>"," (non-Javadoc)
		 * @see org.camunda.bpm.modeler.features.AbstractCreateFlowElementFeature#getFlowElementClass()
		 */","*
		 * @generated
		 */"
"<fim_prefix>nt is Base64 encoded, we must decode it into DER
			// format
			content = Base64.decode(content);
			log.debug(""Decoding on Base64 completed"");
			log.debug(""The signed file is in DER format"");
			read(content);
		}
	}

	/**
	 * Reads a p7m file from a file.
	 * 
	 * @throws IOException I/O error
	 */
	public void read() throws IOException {
		read(new FileInputStream(file));
	}

	/**<fim_suffix>
	public InputStream extractOriginalFileStream() throws IOException, CMSException {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		cms.getSignedContent().write(os);
		return new ByteArrayInputStream(os.toByteArray());
	}

	/**
	 * Extracts the original file content into the given file
	 * 
	 * @param outFile The file in which will contained the original file
	 *        con<fim_middle>","
	 * Extracts the original file content as stream
	 * 
	 * @return the stream representing the enclosed file
	 * 
	 * @throws CMSException in case the enclosed file cannot be extracted
	 * @throws IOException I/O error
	 */","
	 * Reads a p7m file from a stream.
	 * 
	 * @param in The stream from which the file will be read
	 * @throws IOException I/O error
	 */"
"<fim_prefix>.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.bouncycastle.cms.CMSException;
import org.bouncycastle.cms.CMSSignedData;
import org.bouncycastle.util.encoders.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**<fim_suffix>
public class P7M {

	protected static Logger log = LoggerFactory.getLogger(P7M.class);

	private File file;

	private CMSSignedData cms;

	private byte[] content;

	public P7M(File file) {
		super();
		this.file = file;
	}

	public P7M(InputStream is) throws IOException {
		super();
		read(is);
	}

	public P7M(byte[] content) {
		super();
		read(content);
	}

	public void read(byte[] <fim_middle>","
 * Use this class to read data from a.p7m file that a signed file
 * 
 * @author Matteo Caruso - LogicalDOC
 * @since 4.5
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>e file) {
		super();
		this.file = file;
	}

	public P7M(InputStream is) throws IOException {
		super();
		read(is);
	}

	public P7M(byte[] content) {
		super();
		read(content);
	}

	public void read(byte[] content) {
		this.content = content;

		try {
			this.cms = new CMSSignedData(content);
		} catch (Exception e) {
			log.error(""Error extracting file certificate"", e);
		}
	}

	/**<fim_suffix>
	public void read(InputStream is) throws IOException {
		content = IOUtil.getBytesOfStream(is);

		try {
			read(content);
		} catch (Exception e) {
			// if the content is Base64 encoded, we must decode it into DER
			// format
			content = Base64.decode(content);
			log.debug(""Decoding on Base64 completed"");
			log.debug(""The signed file is in DER format"");
			read(content);
		}
	}
<fim_middle>","
	 * Reads a p7m file from a stream. Sets the signed data with the stream as
	 * content.
	 * 
	 * @param is The inputStream
	 * 
	 * @throws IOException I/O error
	 */","
	 * Read the content of the file and extract the certificate
	 * 
	 * @param is
	 *            the input stream
	 * @throws IOException
	 */"
"<fim_prefix>lic void read(InputStream is) throws IOException {
		content = IOUtil.getBytesOfStream(is);

		try {
			read(content);
		} catch (Exception e) {
			// if the content is Base64 encoded, we must decode it into DER
			// format
			content = Base64.decode(content);
			log.debug(""Decoding on Base64 completed"");
			log.debug(""The signed file is in DER format"");
			read(content);
		}
	}

	/**<fim_suffix>
	public void read() throws IOException {
		read(new FileInputStream(file));
	}

	/**
	 * Extracts the original file content as stream
	 * 
	 * @return the stream representing the enclosed file
	 * 
	 * @throws CMSException in case the enclosed file cannot be extracted
	 * @throws IOException I/O error
	 */
	public InputStream extractOriginalFileStream() throws IOException, CMSExceptio<fim_middle>","
	 * Reads a p7m file from a file.
	 * 
	 * @throws IOException I/O error
	 */","
	 * Reads the content of the enclosed file
	 * 
	 * @param content the content of the enclosed file
	 * 
"
"<fim_prefix>eam representing the enclosed file
	 * 
	 * @throws CMSException in case the enclosed file cannot be extracted
	 * @throws IOException I/O error
	 */
	public InputStream extractOriginalFileStream() throws IOException, CMSException {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		cms.getSignedContent().write(os);
		return new ByteArrayInputStream(os.toByteArray());
	}

	/**<fim_suffix>
	public void extractOriginalFile(File outFile) throws IOException, CMSException {
		try (OutputStream os = new FileOutputStream(outFile)) {
			cms.getSignedContent().write(os);
			os.flush();
		}
	}

	public File getFile() {
		return file;
	}

	public void setFile(File file) {
		this.file = file;
	}

	public CMSSignedData getCms() {
		return cms;
	}
}
<fim_middle>","
	 * Extracts the original file content into the given file
	 * 
	 * @param outFile The file in which will contained the original file
	 *        content.
	 * @throws IOException I/O exception
	 * @throws CMSException in case the embedded file cannot be extracted
	 */","
	 * Extracts the original file from the CMS object
	 * 
	 * @param outFile the file to write the original file to"
"<fim_prefix>/**<fim_suffix>
package org.openhab.binding.wemo.internal.handler;

import static org.openhab.binding.wemo.internal.WemoBindingConstants.*;

import java.util.Collections;
import java.util.Set;

import org.eclipse.jdt.annotation.NonNullByDefault;
import org.openhab.core.config.core.Configuration;
import org.openhab.core.thing.Bridge;
import org.openhab.core.thing.ChannelUID;
import org.openhab.core.th<fim_middle>","
 * Copyright (c) 2010-2021 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>Configuration;
import org.openhab.core.thing.Bridge;
import org.openhab.core.thing.ChannelUID;
import org.openhab.core.thing.ThingStatus;
import org.openhab.core.thing.ThingStatusDetail;
import org.openhab.core.thing.ThingTypeUID;
import org.openhab.core.thing.binding.BaseBridgeHandler;
import org.openhab.core.types.Command;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**<fim_suffix>
@NonNullByDefault
public class WemoBridgeHandler extends BaseBridgeHandler {

    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.singleton(THING_TYPE_BRIDGE);

    private final Logger logger = LoggerFactory.getLogger(WemoBridgeHandler.class);

    public WemoBridgeHandler(Bridge bridge) {
        super(bridge);
        logger.debug(""Creating a WemoBridgeHan<fim_middle>","
 * {@link WemoBridgeHandler} is the handler for a wemo bridge and connects it to
 * the framework.
 *
 * @author Hans-JÃ¶rg Merk - Initial contribution
 */","
 * Handler for Wemo Bridge.
 */"
"<fim_prefix>/**<fim_suffix>
package org.verapdf.features.objects;

import org.verapdf.core.FeatureParsingException;
import org.verapdf.features.FeatureObjectType;
import org.verapdf.features.FeaturesData;
import org.verapdf.features.tools.ErrorsHelper;
import org.verapdf.features.tools.FeatureTreeNode;

import java.util.ArrayList;
import java.util.List;

/**
 * Feature object for post script part of the features<fim_middle>","
 * This file is part of veraPDF Library core, a module of the veraPDF project.
 * Copyright (c) 2015-2024, veraPDF Consortium <info@verapdf.org>
 * All rights reserved.
 *
 * veraPDF Library core is free software: you can redistribute it and/or modify
 * it under the terms of either:
 *
 * The GNU General public license GPLv3+.
 * You should have received a copy of the GNU General Public License
 * along with veraPDF Library core as the LICENSE.GPL file in the root of the source
 * tree.  If not, see http://www.gnu.org/licenses/ or
 * https://www.gnu.org/licenses/gpl-3.0.en.html.
 *
 * The Mozilla Public License MPLv2+.
 * You should have received a copy of the Mozilla Public License along with
 * veraPDF Library core as the LICENSE.MPL file in the root of the source tree.
 * If a copy of the MPL was not distributed with this file, you can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */","
 * @author <NAME>
 */"
"<fim_prefix>object"";
	private static final String POSTSCRIPT = ""postscript"";
	private static final String XOBJECT_XPATH = XOBJECT + ""[@type='"" + POSTSCRIPT + ""']"";

	/**
	 * Constructs new post script feature object.
	 *
	 * @param adapter post script adapter class represents document object
	 */
	public PostScriptFeaturesObject(PostScriptFeaturesObjectAdapter adapter) {
		super(adapter);
	}

	/**<fim_suffix>
	@Override
	public FeatureObjectType getType() {
		return FeatureObjectType.POSTSCRIPT_XOBJECT;
	}

	/**
	 * Reports all features from the object into the collection
	 *
	 * @return FeatureTreeNode class which represents a root node of the
	 * constructed collection tree
	 * @throws FeatureParsingException occurs when wrong features tree node constructs
	 */
	@Override
	public Feature<fim_middle>","
	 * @return POSTSCRIPT_XOBJECT instance of the FeatureObjectType enumeration
	 */","
	 * Returns the type of the object
	 *
	 * @return FeatureObjectType"
"<fim_prefix>u can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
package org.verapdf.features.objects;

import org.verapdf.core.FeatureParsingException;
import org.verapdf.features.FeatureObjectType;
import org.verapdf.features.FeaturesData;
import org.verapdf.features.tools.ErrorsHelper;
import org.verapdf.features.tools.FeatureTreeNode;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class PostScriptFeaturesObject extends FeaturesObject {

	private static final String XOBJECT = ""xobject"";
	private static final String POSTSCRIPT = ""postscript"";
	private static final String XOBJECT_XPATH = XOBJECT + ""[@type='"" + POSTSCRIPT + ""']"";

	/**
	 * Constructs new post script feature object.
	 *
	 * @param adapter post script adapter class represents document object
	<fim_middle>","
 * Feature object for post script part of the features report
 *
 * @author Maksim Bezrukov
 */","
 * PostScript features object.
 *"
"<fim_prefix>;
import java.util.List;

/**
 * Feature object for post script part of the features report
 *
 * @author Maksim Bezrukov
 */
public class PostScriptFeaturesObject extends FeaturesObject {

	private static final String XOBJECT = ""xobject"";
	private static final String POSTSCRIPT = ""postscript"";
	private static final String XOBJECT_XPATH = XOBJECT + ""[@type='"" + POSTSCRIPT + ""']"";

	/**<fim_suffix>
	public PostScriptFeaturesObject(PostScriptFeaturesObjectAdapter adapter) {
		super(adapter);
	}

	/**
	 * @return POSTSCRIPT_XOBJECT instance of the FeatureObjectType enumeration
	 */
	@Override
	public FeatureObjectType getType() {
		return FeatureObjectType.POSTSCRIPT_XOBJECT;
	}

	/**
	 * Reports all features from the object into the collection
	 *
	 * @return FeatureTreeNode clas<fim_middle>","
	 * Constructs new post script feature object.
	 *
	 * @param adapter post script adapter class represents document object
	 */","
	 * Creates a new PostScriptFeaturesObject
	 *
	 * @param adapter PostScriptFeaturesObjectAdapter object
	 */"
"<fim_prefix>t feature object.
	 *
	 * @param adapter post script adapter class represents document object
	 */
	public PostScriptFeaturesObject(PostScriptFeaturesObjectAdapter adapter) {
		super(adapter);
	}

	/**
	 * @return POSTSCRIPT_XOBJECT instance of the FeatureObjectType enumeration
	 */
	@Override
	public FeatureObjectType getType() {
		return FeatureObjectType.POSTSCRIPT_XOBJECT;
	}

	/**<fim_suffix>
	@Override
	public FeatureTreeNode collectFeatures() throws FeatureParsingException {
		PostScriptFeaturesObjectAdapter psAdapter = (PostScriptFeaturesObjectAdapter) this.adapter;
		FeatureTreeNode root = FeatureTreeNode.createRootNode(""xobject"");
		root.setAttribute(""type"", POSTSCRIPT);
		String id = psAdapter.getID();
		if (id != null) {
			root.setAttribute(""id"", id);
		}
		return <fim_middle>","
	 * Reports all features from the object into the collection
	 *
	 * @return FeatureTreeNode class which represents a root node of the
	 * constructed collection tree
	 * @throws FeatureParsingException occurs when wrong features tree node constructs
	 */","
	 * @return the name of the PostScript feature
	 */"
"<fim_prefix>/*<fim_suffix>
package io.meeds.gamification.storage;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import org.exoplatform.<fim_middle>","
 * This file is part of the Meeds project (https://meeds.io/).
 * Copyright (C) 2020 - 2023 Meeds Association
 * contact@meeds.io
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.epsilon.evl.emf.validation;

import org.eclipse.core.resources.IMarker;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.domain.EditingDomain;

public interface IEvlMarkerResolver {
	
	public boolean canResolve(IMarker marker);
	
	public EObject resolve(IMarker marker);
	
	public String getAbsoluteElementId(IMarker marker);
	
	public<fim_middle>","*****************************************************************************
 * Copyright (c) 2008 The University of York.
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * Contributors:
 *     Dimitrios Kolovos - initial API and implementation
 ******************************************************************************/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package org.eigenbase.enki.trans.codegen;

import java.io.*;
import java.util.*;

import javax.jmi.model.*;

import org.eigenbase.enki.codegen.*;
import org.eigenbase.enki.codegen.MofInitHandler.*;
import org.eigenbase.enki.jmi.impl.*;
import org.eigenbase.enki.mdr.*;
import org.eigenbase.enki.trans.*;
import org.eigenbase.enki.util.*;
import org.eigenbase.enki.util.StringUtil.*;

/**<fim_middle>","
// $Id$
// Enki generates and implements the JMI and MDR APIs for MOF metamodels.
// Copyright (C) 2008 The Eigenbase Project
// Copyright (C) 2008 SQLstream, Inc.
// Copyright (C) 2008 Dynamo BI Corporation
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/","*
 * Generates Java code for a {@link MdrTrans}.
 *
 * @author <NAME>
 * @version $Id$
 */"
"<fim_prefix>ly transient repository implementation.
 * 
 * @author Stephan Zuercher
 */
public class TransientHandler 
    extends TransientImplementationHandler
    implements SubordinateHandler
{
    /** Reference to {@link MetamodelInitializer}. */
    private static final JavaClassReference METAMODEL_INITIALIZER_CLASS =
        new JavaClassReference(MetamodelInitializer.class, true);

    /**<fim_suffix>
    private static final JavaClassReference TRANSIENT_REPOS_CLASS =
        new JavaClassReference(TransientMDRepository.class, false);
    
    /** Reference to {@link TransientMDRepository}. */
    private static final JavaClassReference INTERNAL_MDR_ERROR =
        new JavaClassReference(InternalMdrError.class, false);
    
    /** Reference to {@link TransientRefObject}. */
    pr<fim_middle>", Reference to {@link TransientMDRepository}. */, Reference to {@link TransientMDRepository}. */
"<fim_prefix>nbase.enki.trans.*;
import org.eigenbase.enki.util.*;
import org.eigenbase.enki.util.StringUtil.*;

/**
 * TransientHandler extends {@link TransientImplementationHandler} to support
 * a completely transient repository implementation.
 * 
 * @author Stephan Zuercher
 */
public class TransientHandler 
    extends TransientImplementationHandler
    implements SubordinateHandler
{
    /**<fim_suffix>
    private static final JavaClassReference METAMODEL_INITIALIZER_CLASS =
        new JavaClassReference(MetamodelInitializer.class, true);

    /** Reference to {@link TransientMDRepository}. */
    private static final JavaClassReference TRANSIENT_REPOS_CLASS =
        new JavaClassReference(TransientMDRepository.class, false);
    
    /** Reference to {@link TransientMDRepository}<fim_middle>", Reference to {@link MetamodelInitializer}. */, Reference to {@link MetamodelInitializer}. */
"<fim_prefix>
package org.eigenbase.enki.trans.codegen;

import java.io.*;
import java.util.*;

import javax.jmi.model.*;

import org.eigenbase.enki.codegen.*;
import org.eigenbase.enki.codegen.MofInitHandler.*;
import org.eigenbase.enki.jmi.impl.*;
import org.eigenbase.enki.mdr.*;
import org.eigenbase.enki.trans.*;
import org.eigenbase.enki.util.*;
import org.eigenbase.enki.util.StringUtil.*;

/**<fim_suffix>
public class TransientHandler 
    extends TransientImplementationHandler
    implements SubordinateHandler
{
    /** Reference to {@link MetamodelInitializer}. */
    private static final JavaClassReference METAMODEL_INITIALIZER_CLASS =
        new JavaClassReference(MetamodelInitializer.class, true);

    /** Reference to {@link TransientMDRepository}. */
    private static final Ja<fim_middle>","
 * TransientHandler extends {@link TransientImplementationHandler} to support
 * a completely transient repository implementation.
 * 
 * @author Stephan Zuercher
 */","
 * Transient implementation handler.
 *
 * @author <NAME>
 * @version $Id$
 */"
"<fim_prefix> /** Reference to {@link TransientMDRepository}. */
    private static final JavaClassReference TRANSIENT_REPOS_CLASS =
        new JavaClassReference(TransientMDRepository.class, false);
    
    /** Reference to {@link TransientMDRepository}. */
    private static final JavaClassReference INTERNAL_MDR_ERROR =
        new JavaClassReference(InternalMdrError.class, false);
    
    /**<fim_suffix>
    private static final JavaClassReference TRANSIENT_REF_OBJECT =
        new JavaClassReference(TransientRefObject.class, false);
    
    /** Reference to {@link OwnedCollection}. */
    private static final JavaClassReference OWNED_COLLECTION =
        new JavaClassReference(OwnedCollection.class, false);
    
    /** Reference to {@link OwnedList}. */
    private static final Jav<fim_middle>", Reference to {@link TransientRefObject}. */, Reference to {@link TransientRefObject}. */
"<fim_prefix>false);
    
    /** Reference to {@link TransientRefObject}. */
    private static final JavaClassReference TRANSIENT_REF_OBJECT =
        new JavaClassReference(TransientRefObject.class, false);
    
    /** Reference to {@link OwnedCollection}. */
    private static final JavaClassReference OWNED_COLLECTION =
        new JavaClassReference(OwnedCollection.class, false);
    
    /**<fim_suffix>
    private static final JavaClassReference OWNED_LIST =
        new JavaClassReference(OwnedList.class, false);
    
    private static final String OWNER_FIELD = ""_owner"";
    private static final String ANNOTATION_FIELD = ""_annotation"";
    
    private File metaInfEnkiDir;

    private String topLevelPackage;
    
    private String extentName;

    private String initializerName;<fim_middle>", Reference to {@link OwnedList}. */, Reference to {@link OwnedList}. */
"<fim_prefix>   
    /** Reference to {@link TransientMDRepository}. */
    private static final JavaClassReference INTERNAL_MDR_ERROR =
        new JavaClassReference(InternalMdrError.class, false);
    
    /** Reference to {@link TransientRefObject}. */
    private static final JavaClassReference TRANSIENT_REF_OBJECT =
        new JavaClassReference(TransientRefObject.class, false);
    
    /**<fim_suffix>
    private static final JavaClassReference OWNED_COLLECTION =
        new JavaClassReference(OwnedCollection.class, false);
    
    /** Reference to {@link OwnedList}. */
    private static final JavaClassReference OWNED_LIST =
        new JavaClassReference(OwnedList.class, false);
    
    private static final String OWNER_FIELD = ""_owner"";
    private static final String ANNOTATI<fim_middle>", Reference to {@link OwnedCollection}. */, Reference to {@link OwnedCollection}. */
"<fim_prefix>ference to {@link MetamodelInitializer}. */
    private static final JavaClassReference METAMODEL_INITIALIZER_CLASS =
        new JavaClassReference(MetamodelInitializer.class, true);

    /** Reference to {@link TransientMDRepository}. */
    private static final JavaClassReference TRANSIENT_REPOS_CLASS =
        new JavaClassReference(TransientMDRepository.class, false);
    
    /**<fim_suffix>
    private static final JavaClassReference INTERNAL_MDR_ERROR =
        new JavaClassReference(InternalMdrError.class, false);
    
    /** Reference to {@link TransientRefObject}. */
    private static final JavaClassReference TRANSIENT_REF_OBJECT =
        new JavaClassReference(TransientRefObject.class, false);
    
    /** Reference to {@link OwnedCollection}. */
    private stat<fim_middle>", Reference to {@link TransientMDRepository}. */, Reference to {@link InternalMdrError}. */
"<fim_prefix>package cn.devifish.cloud.upms.server.cache;

import cn.devifish.cloud.common.redis.BaseCache;
import cn.devifish.cloud.upms.common.entity.Dictionary;
import org.springframework.stereotype.Repository;

/**<fim_suffix>
@Repository
public class DictionaryCache extends BaseCache<Dictionary, Long> {
}
<fim_middle>","
 * DictionaryCache
 * 字典缓存
 *
 * @author Devifish
 * @date 2020/8/1 16:52
 */","
 * DictionaryCache
 *
 * @author Devifish
 */"
"<fim_prefix>/*<fim_suffix>
package xades4j.production;

import xades4j.properties.DataObjectDesc;

import java.util.Collection;
import java.util.LinkedHashSet;

/**
 * Represents a {@code ds:Manifest} that will be enveloped in a {@code ds:Object} contained in the signature. The
 * {@code ds:Manifest} will be covered by a {@code ds:Reference} so that it is actually included in the signature.
 * The library handl<fim_middle>","
 * XAdES4j - A Java library for generation and verification of XAdES signatures.
 * Copyright (C) 2021 Luis Goncalves.
 *
 * XAdES4j is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or any later version.
 *
 * XAdES4j is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with XAdES4j. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Represents a {@code ds:Manifest} that will be enveloped in a {@code ds:Object} contained in the signature. The
 * {@code ds:Manifest} will be covered by a {@code ds:Reference} so that it is actually included in the signature.
 * The library handles the creation of the {@code ds:Manifest} and the {@code ds:Reference} for you.
 *
 * @author <NAME>
 */"
"<fim_prefix> FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with XAdES4j. If not, see <http://www.gnu.org/licenses/>.
 */
package xades4j.production;

import xades4j.properties.DataObjectDesc;

import java.util.Collection;
import java.util.LinkedHashSet;

/**<fim_suffix>
public final class EnvelopedManifest extends DataObjectDesc
{
    private final Collection<DataObjectDesc> dataObjs;

    public EnvelopedManifest()
    {
        this.dataObjs = new LinkedHashSet<>(2);
    }

    /**
     * Adds a new child signed data object to the current instance.
     * @param object the signed data object
     * @return the current instance
     */
    public En<fim_middle>","
 * Represents a {@code ds:Manifest} that will be enveloped in a {@code ds:Object} contained in the signature. The
 * {@code ds:Manifest} will be covered by a {@code ds:Reference} so that it is actually included in the signature.
 * The library handles the generation of the digests for the references contained in the manifest.
 *
 * @see DataObjectDesc
 * @see DataObjectReference
 *
 * @author Lu√≠s
 */","
 * A class representing the enveloped manifest.
 *
 * @author <NAME>
 * @since 1.2.0
 */"
"<fim_prefix> library handles the generation of the digests for the references contained in the manifest.
 *
 * @see DataObjectDesc
 * @see DataObjectReference
 *
 * @author Lu√≠s
 */
public final class EnvelopedManifest extends DataObjectDesc
{
    private final Collection<DataObjectDesc> dataObjs;

    public EnvelopedManifest()
    {
        this.dataObjs = new LinkedHashSet<>(2);
    }

    /**<fim_suffix>
    public EnvelopedManifest withSignedDataObject(DataObjectDesc object)
    {
        if (null == object)
        {
            throw new NullPointerException(""Signed object description cannot be null"");
        }

        if (!this.dataObjs.add(object))
        {
            throw new IllegalStateException(""Data object description was already added"");
        }
        return this;
<fim_middle>","
     * Adds a new child signed data object to the current instance.
     * @param object the signed data object
     * @return the current instance
     */","
     * Adds a data object to the manifest.
     *
     * @param object the data object to add
     * @return this manifest
   "
"<fim_prefix>/**<fim_suffix>
package de.fau.cs.osr.hddiff.utils;

public class WordSubstringJudge
		implements
			SubstringJudgeInterface<String>
{
	private final int minWordCount;
	
	private final int minLength;
	
	// =========================================================================
	
	public WordSubstringJudge(int minStrLength, int minWordCount)
	{
		if ((minWordCount < 2) || (minStrLength < 3))
			thro<fim_middle>","
 * Copyright 2011 The Open Source Research Group,
 *                University of Erlangen-NÃ¼rnberg
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix> dk.dbc.dataio.jobstore.types.MarcRecordInfo;
import dk.dbc.marc.binding.MarcRecord;
import dk.dbc.marc.reader.MarcReaderException;
import dk.dbc.marc.reader.MarcXchangeV1Reader;
import dk.dbc.marc.writer.MarcXchangeV1Writer;
import jakarta.persistence.EntityManager;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**<fim_suffix>
public class VolumeIncludeParents extends JobItemReorderer {
    public VolumeIncludeParents(int jobId, EntityManager entityManager) {
        super(jobId, entityManager);
    }

    @Override
    DataPartitionerResult getReorderedItem() {
        DataPartitionerResult partitionerResult = DataPartitionerResult.EMPTY;

        final ReorderedItemEntity reorderedItemEntity = getNextItem<fim_middle>","
 * The responsibility of this class is to ensure that volume records are
 * returned with their parents and possibly grandparents.
 * <p>
 * This class assumes it is called in a transactional context with regards to
 * the given entity manager.
 * <p>
 * This class is not thread safe.
 */","
 * Reorders the items in a volume to include the parents of the items.
 */"
"<fim_prefix> scratchpad. */
        switch (recordInfo.getType()) {
            case VOLUME:
                return SortOrder.VOLUME_DELETE;
            case SECTION:
                return SortOrder.SECTION_DELETE;
            default:
                return SortOrder.HEAD_DELETE;
        }
    }

    @Override
    public Boolean addCollectionWrapper() {
        return Boolean.TRUE;
    }

    /*<fim_suffix>
    private DataPartitionerResult resolveParents(ReorderedItemEntity volume) {
        final List<ChunkItem> collection = new ArrayList<>(3);
        collection.add(volume.getChunkItem());
        final ReorderedItemEntity parent = getParent(volume).orElse(null);
        if (parent != null) {
            collection.add(parent.getChunkItem());
            if (parent.getRecordInfo().isS<fim_middle>"," Resolves the given item into a result also including any
       parents found in the scratchpad. */","*
     * {@inheritDoc}
     */"
"<fim_prefix>artitionerResult partitionerResult = DataPartitionerResult.EMPTY;

        final ReorderedItemEntity reorderedItemEntity = getNextItemFromDatabase().orElse(null);
        if (reorderedItemEntity != null) {
            if (reorderedItemEntity.getChunkItem().getStatus() == ChunkItem.Status.SUCCESS
                    && reorderedItemEntity.getRecordInfo().isVolume()) {
                /*<fim_suffix>
                partitionerResult = resolveParents(reorderedItemEntity);
            } else {
                partitionerResult = new DataPartitionerResult(reorderedItemEntity.getChunkItem(),
                        reorderedItemEntity.getRecordInfo(), reorderedItemEntity.getPositionInDatafile());
            }
            entityManager.remove(reorderedItemEntity);
            numberO<fim_middle>"," If the next item returned from the scratchpad is a volume
                   also include any parent records found in the scratchpad
                   in the result. */","*
                 * If the item is a volume, we need to resolve the parents.
                 */"
"<fim_prefix>t(reorderedItemEntity.getChunkItem(),
                        reorderedItemEntity.getRecordInfo(), reorderedItemEntity.getPositionInDatafile());
            }
            entityManager.remove(reorderedItemEntity);
            numberOfItems--;
        }

        return partitionerResult;
    }

    @Override
    SortOrder getReorderedItemSortOrder(MarcRecordInfo recordInfo) {
        /*<fim_suffix>
        switch (recordInfo.getType()) {
            case VOLUME:
                return SortOrder.VOLUME_DELETE;
            case SECTION:
                return SortOrder.SECTION_DELETE;
            default:
                return SortOrder.HEAD_DELETE;
        }
    }

    @Override
    public Boolean addCollectionWrapper() {
        return Boolean.TRUE;
    }

    /* Resolves the g<fim_middle>"," Ensure that all volumes are processed before
           section and head records are removed from the
           scratchpad. */","*
         * The order of the items in the partition is determined by the order of the items in the record.
         *"
"<fim_prefix>();
    private final SystemWorld world;
    private final CommandSender executor;
    private boolean value;

    public WorldToggleFireEvent(CommandSender executor, SystemWorld world, boolean value) {
        this.executor = executor;
        this.world = world;
        this.value = value;
    }

    public static HandlerList getHandlerList() {
        return handlers;
    }

    /**<fim_suffix>
    public boolean getValue() {
        return value;
    }

    /**
     * @param val if fire should be enabled or disabled
     */
    public void setValue(boolean val) {
        value = val;
    }

    /**
     * @return world get world
     */
    public SystemWorld getWorld() {
        return world;
    }

    /**
     * @return get executor who toggles fire
     */
    public Co<fim_middle>","
     * @return if fire now gets enabled or disabled
     */","
     * @return get handler list
     */"
"<fim_prefix>ggleFireEvent(CommandSender executor, SystemWorld world, boolean value) {
        this.executor = executor;
        this.world = world;
        this.value = value;
    }

    public static HandlerList getHandlerList() {
        return handlers;
    }

    /**
     * @return if fire now gets enabled or disabled
     */
    public boolean getValue() {
        return value;
    }

    /**<fim_suffix>
    public void setValue(boolean val) {
        value = val;
    }

    /**
     * @return world get world
     */
    public SystemWorld getWorld() {
        return world;
    }

    /**
     * @return get executor who toggles fire
     */
    public CommandSender getExecutor() {
        return executor;
    }

    @Override
    public final HandlerList getHandlers() {
        return<fim_middle>","
     * @param val if fire should be enabled or disabled
     */","
     * @param val if fire now gets enabled or disabled
     */"
"<fim_prefix>    this.value = value;
    }

    public static HandlerList getHandlerList() {
        return handlers;
    }

    /**
     * @return if fire now gets enabled or disabled
     */
    public boolean getValue() {
        return value;
    }

    /**
     * @param val if fire should be enabled or disabled
     */
    public void setValue(boolean val) {
        value = val;
    }

    /**<fim_suffix>
    public SystemWorld getWorld() {
        return world;
    }

    /**
     * @return get executor who toggles fire
     */
    public CommandSender getExecutor() {
        return executor;
    }

    @Override
    public final HandlerList getHandlers() {
        return handlers;
    }
}
<fim_middle>","
     * @return world get world
     */","
     * @return world where fire is being toggled
 "
"<fim_prefix>package de.butzlabben.world.event;

import de.butzlabben.world.wrapper.SystemWorld;
import org.bukkit.command.CommandSender;
import org.bukkit.event.HandlerList;

/**<fim_suffix>
public class WorldToggleFireEvent extends WorldEvent {

    public final static HandlerList handlers = new HandlerList();
    private final SystemWorld world;
    private final CommandSender executor;
    private boolean value;

    public WorldToggleFireEvent(CommandSender executor, SystemWorld world, boolean value) {
        this.executor = executor;
        this.world = world;
    <fim_middle>","
 * @author Butzlabben
 * @since 09.05.2018
 */","
 * Created by <NAME> on 02.05.2018.
 */"
"<fim_prefix>    /**
     * @return if fire now gets enabled or disabled
     */
    public boolean getValue() {
        return value;
    }

    /**
     * @param val if fire should be enabled or disabled
     */
    public void setValue(boolean val) {
        value = val;
    }

    /**
     * @return world get world
     */
    public SystemWorld getWorld() {
        return world;
    }

    /**<fim_suffix>
    public CommandSender getExecutor() {
        return executor;
    }

    @Override
    public final HandlerList getHandlers() {
        return handlers;
    }
}
<fim_middle>","
     * @return get executor who toggles fire
     */","
     * @param world world to set
     */"
"<fim_prefix>www.gnu.org/licenses/>.
 */

package aeminium.runtime.implementations.implicitworkstealing.task;

public enum ImplicitTaskState {
	UNSCHEDULED, /* Task created by the Runtime, but not scheduled for execution. */
	WAITING_FOR_DEPENDENCIES,/* Task cannot be executed because it depends on uncompleted tasks. */
	WAITING_IN_QUEUE,
	RUNNING, /* Task is executing. */
	WAITING_FOR_CHILDREN, /*<fim_suffix>
	COMPLETED /* Task has been completed. */
}
<fim_middle>"," Task has finished its body, but some children tasks are still not complete. */", Task is waiting for its children to finish. */
"<fim_prefix>e details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package aeminium.runtime.implementations.implicitworkstealing.task;

public enum ImplicitTaskState {
	UNSCHEDULED, /* Task created by the Runtime, but not scheduled for execution. */
	WAITING_FOR_DEPENDENCIES,/*<fim_suffix>
	WAITING_IN_QUEUE,
	RUNNING, /* Task is executing. */
	WAITING_FOR_CHILDREN, /* Task has finished its body, but some children tasks are still not complete. */
	COMPLETED /* Task has been completed. */
}
<fim_middle>", Task cannot be executed because it depends on uncompleted tasks. */, Task is waiting for dependencies to be completed. */
"<fim_prefix>NTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package aeminium.runtime.implementations.implicitworkstealing.task;

public enum ImplicitTaskState {
	UNSCHEDULED, /*<fim_suffix>
	WAITING_FOR_DEPENDENCIES,/* Task cannot be executed because it depends on uncompleted tasks. */
	WAITING_IN_QUEUE,
	RUNNING, /* Task is executing. */
	WAITING_FOR_CHILDREN, /* Task has finished its body, but some children tasks are still not complete. */
	COMPLETED /* Task has been completed. */
}
<fim_middle>"," Task created by the Runtime, but not scheduled for execution. */", Task is not scheduled to be executed. */
"<fim_prefix>laid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */

package aeminium.runtime.implementations.implicitworkstealing.task;

public enum ImplicitTaskState {
	UNSCHEDULED, /* Task created by the Runtime, but not scheduled for execution. */
	WAITING_FOR_DEPENDENCIES,/* Task cannot be executed because it depends on uncompleted tasks. */
	WAITING_IN_QUEUE,
	RUNNING, /*<fim_suffix>
	WAITING_FOR_CHILDREN, /* Task has finished its body, but some children tasks are still not complete. */
	COMPLETED /* Task has been completed. */
}
<fim_middle>", Task is executing. */, Task is currently executing.
"<fim_prefix>/**<fim_suffix>

package aeminium.runtime.implementations.implicitworkstealing.task;

public enum ImplicitTaskState {
	UNSCHEDULED, /* Task created by the Runtime, but not scheduled for execution. */
	WAITING_FOR_DEPENDENCIES,/* Task cannot be executed because it depends on uncompleted tasks. */
	WAITING_IN_QUEUE,
	RUNNING, /* Task is executing. */
	WAITING_FOR_CHILDREN, /* Task has finished its body<fim_middle>","
 * Copyright (c) 2010-11 The AEminium Project (see AUTHORS file)
 * 
 * This file is part of Plaid Programming Language.
 *
 * Plaid Programming Language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 *  Plaid Programming Language is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Plaid Programming Language.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>sk;

public enum ImplicitTaskState {
	UNSCHEDULED, /* Task created by the Runtime, but not scheduled for execution. */
	WAITING_FOR_DEPENDENCIES,/* Task cannot be executed because it depends on uncompleted tasks. */
	WAITING_IN_QUEUE,
	RUNNING, /* Task is executing. */
	WAITING_FOR_CHILDREN, /* Task has finished its body, but some children tasks are still not complete. */
	COMPLETED /*<fim_suffix>
}
<fim_middle>", Task has been completed. */, Task has finished its body and
"<fim_prefix>/*<fim_suffix>
package org.namelessrom.devicecontrol.actions.fs;

import android.text.TextUtils;

import org.namelessrom.devicecontrol.actions.ActionProcessor;
import org.namelessrom.devicecontrol.actions.BaseAction;
import org.namelessrom.devicecontrol.hardware.IoUtils;
import org.namelessrom.devicecontrol.models.BootupConfig;
import org.namelessrom.devicecontrol.modules.bootup.BootupItem;
import o<fim_middle>","
 *  Copyright (C) 2013 - 2014 Alexander ""Evisceration"" Martinz
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */","*
 * Created by <NAME> on 2017/5/31.
 */"
"<fim_prefix>package javax.slee.profile.query;

import java.io.Serializable;

/**<fim_suffix>
public abstract class QueryExpression implements Serializable {
    /**
     * Get a string representation for this query expression.
     * @return a string representation for this query expression.
     */
    public final String toString() {
        StringBuffer buf = new StringBuffer();
        toString(buf);
        return buf.toString();
    }


    // protected

    /**
     * <fim_middle>","
 * The <code>QueryExpression</code> class is the base class for all dynamic query
 * expressions.
 */","
 * A query expression.
 *
 * @author <NAME>
 */"
"<fim_prefix>ons.
 */
public abstract class QueryExpression implements Serializable {
    /**
     * Get a string representation for this query expression.
     * @return a string representation for this query expression.
     */
    public final String toString() {
        StringBuffer buf = new StringBuffer();
        toString(buf);
        return buf.toString();
    }


    // protected

    /**<fim_suffix>
    protected abstract void toString(StringBuffer buf);
}
<fim_middle>","
     * Get a string representation for this query expression.
     * @param buf a string buffer the string representation should be appended to.
     */","
     * Append a string representation of this query expression to the given buffer.
     * @param buf the buffer to append to.
     */"
"<fim_prefix>package javax.slee.profile.query;

import java.io.Serializable;

/**
 * The <code>QueryExpression</code> class is the base class for all dynamic query
 * expressions.
 */
public abstract class QueryExpression implements Serializable {
    /**<fim_suffix>
    public final String toString() {
        StringBuffer buf = new StringBuffer();
        toString(buf);
        return buf.toString();
    }


    // protected

    /**
     * Get a string representation for this query expression.
     * @param buf a string buffer the string representation should be appended to.
     */
    protected abstract void toString(StringBuffer buf);
}
<fim_middle>","
     * Get a string representation for this query expression.
     * @return a string representation for this query expression.
     */","
     * The <code>toString</code> method returns a string representation of this
     * query expression.
     * @"
"<fim_prefix>package org.b612foundation.adam.datamodel;

/**<fim_suffix>
public class PropagationConfigurationFactory {

  private static final PropagatorConfiguration ALL_MAJOR_BODIES_CONFIG =
      new PropagatorConfiguration()
          .setSun(PropagatorConfiguration.PlanetGravityMode.POINT_MASS)
          .setMercury(PropagatorConfiguration.PlanetGravityMode.POINT_MASS)
          .setVenus(PropagatorConfiguration.PlanetGravityMode.POINT_MASS)
        <fim_middle>", Factory class which produces common configurations for the propagators. */,"
 * Created by <NAME> on 5/12/17"
"<fim_prefix>/*<fim_suffix>

package de.rwth_aachen.afu.dapnet.legacy.transmitter_service.config;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

/**
 * This class provides factory methods for property readers.
 * 
 * @author Philipp Thiel
 */
public final class PropertyReaderFactory {

	private PropertyReaderFactory() {
	}

	/**
	 * Creates a new property reader from a<fim_middle>","
 * DAPNET Legacy Transmitter Service
 * Copyright (C) 2021 Philipp Thiel
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * This class provides factory methods for property readers.
 * 
 * @author Philipp Thiel
 */"
"<fim_prefix> see <https://www.gnu.org/licenses/>.
 */

package de.rwth_aachen.afu.dapnet.legacy.transmitter_service.config;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

/**
 * This class provides factory methods for property readers.
 * 
 * @author Philipp Thiel
 */
public final class PropertyReaderFactory {

	private PropertyReaderFactory() {
	}

	/**<fim_suffix>
	public static PropertyReader fromFile(String configFile) throws IOException {
		Properties props = new Properties();
		try (FileInputStream in = new FileInputStream(configFile)) {
			props.load(in);
		}

		return new PropertyReaderImpl(props);
	}

}
<fim_middle>","
	 * Creates a new property reader from a properties file.
	 * 
	 * @param configFile Configuration file to load
	 * @throws IOException if the configuration file could not be loaded.
	 */","
	 * Creates a new property reader from the given properties file.
	 * 
	 * @param configFile
	 *            The properties file to read.
"
"<fim_prefix>TICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package de.rwth_aachen.afu.dapnet.legacy.transmitter_service.config;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

/**<fim_suffix>
public final class PropertyReaderFactory {

	private PropertyReaderFactory() {
	}

	/**
	 * Creates a new property reader from a properties file.
	 * 
	 * @param configFile Configuration file to load
	 * @throws IOException if the configuration file could not be loaded.
	 */
	public static PropertyReader fromFile(String configFile) throws IOException {
		Properties props = new Propert<fim_middle>","
 * This class provides factory methods for property readers.
 * 
 * @author Philipp Thiel
 */","
 * Factory for creating property readers.
 * 
 * @author <NAME>
 */"
"<fim_prefix>package xyz.wagyourtail.jsmacros.client.api.classes.inventory;

import net.minecraft.client.gui.screen.ingame.HandledScreen;

/**<fim_suffix>
@SuppressWarnings(""unused"")
public class ContainerInventory<T extends HandledScreen<?>> extends Inventory<T> {

    public ContainerInventory(T inventory) {
        super(inventory);
    }

    /**
     * @return the first free slot in this container.
     * @since 1.8.4
     */
    public int findFreeContainerSlot() {
        return findFreeSlot(""container"");
    }

    @Override
   <fim_middle>","
 * @author Etheradon
 * @since 1.8.4
 */","
 * @author Wagyourtail
 * @version 1.0
 * @since"
"<fim_prefix>package xyz.wagyourtail.jsmacros.client.api.classes.inventory;

import net.minecraft.client.gui.screen.ingame.HandledScreen;

/**
 * @author Etheradon
 * @since 1.8.4
 */
@SuppressWarnings(""unused"")
public class ContainerInventory<T extends HandledScreen<?>> extends Inventory<T> {

    public ContainerInventory(T inventory) {
        super(inventory);
    }

    /**<fim_suffix>
    public int findFreeContainerSlot() {
        return findFreeSlot(""container"");
    }

    @Override
    public String toString() {
        return String.format(""ContainerInventory:{}"");
    }

}
<fim_middle>","
     * @return the first free slot in this container.
     * @since 1.8.4
     */","
     * Finds a free slot in the inventory.
     *
     * @return The slot number.
  "
"<fim_prefix>/*<fim_suffix>

package org.jpc.emulator.execution.opcodes.vm;

import org.jpc.emulator.execution.*;
import org.jpc.emulator.execution.decoder.*;
import org.jpc.emulator.processor.*;
import org.jpc.emulator.processor.fpu64.*;
import static org.jpc.emulator.processor.Processor.*;

public class faddp_ST5_ST1 extends Executable
{

    public faddp_ST5_ST1(int blockStart, int eip, int prefices, Peekable<fim_middle>","
    JPC: An x86 PC Hardware Emulator for a pure Java Virtual Machine

    Copyright (C) 2012-2013 Ian Preston

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 2 as published by
    the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
    Details (including contact information) can be found at: 

    jpc.sourceforge.net
    or the developer website
    sourceforge.net/projects/jpc/

    End of licence header
*/","*
 * @author sergioc
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.tycho.test.util;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.eclipse.equinox.internal.p2.metadata.ArtifactKey;
import org.eclipse.equinox.internal.p2.metadata.ProvidedCapability;
import org.eclipse.equinox.p2.metadata.IArtifactKey;
import org.eclipse.equinox.p2.metadata.IInstallableUnit;
import org.eclipse.equinox.p2.me<fim_middle>","*****************************************************************************
 * Copyright (c) 2010, 2019 SAP SE and others.
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     SAP SE - initial API and implementation
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package test;

import java.util.concurrent.TimeUnit;
import java.util.concurrent.ThreadLocalRandom;
import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.infra.Blackhole;

@State(Scope.Thread)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
public class BenchmarkThreadLocalRandom {

    private ThreadLocalRandom random;

    @Setup(Level.Trial)
    public void doSetup() {
        random<fim_middle>","
 * DSI utilities
 *
 * Copyright (C) 2022 Sebastiano Vigna
 *
 * This program and the accompanying materials are made available under the
 * terms of the GNU Lesser General Public License v2.1 or later,
 * which is available at
 * http://www.gnu.org/licenses/old-licenses/lgpl-2.1-standalone.html,
 * or the Apache Software License 2.0, which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * SPDX-License-Identifier: LGPL-2.1-or-later OR Apache-2.0
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package org.mozilla.gecko;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.IBinder;
import android.util.Log;

/**
 * Client for posting notifications through the NotificationService.
 */
public class ServiceNotificationClient extends NotificationClient {
    private stati<fim_middle>"," -*- Mode: Java; c-basic-offset: 4; tab-width: 4; indent-tabs-mode: nil; -*-
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */","*
     * The service connection.
     */"
"<fim_prefix>rms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package org.mozilla.gecko;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.IBinder;
import android.util.Log;

/**<fim_suffix>
public class ServiceNotificationClient extends NotificationClient {
    private static final String LOGTAG = ""GeckoServiceNotificationClient"";

    private final ServiceConnection mConnection = new NotificationServiceConnection();
    private boolean mBound;
    private final Context mContext;

    public ServiceNotificationClient(Context context) {
        mContext = context;
    }

<fim_middle>","
 * Client for posting notifications through the NotificationService.
 */","
 * A notification client that connects to Gecko's notification service."
"<fim_prefix>package com.xenoage.zong.renderer.canvas;

/**<fim_suffix>
public enum CanvasDecoration {
	/** Just show the result like on a printed page. */
	None,
	/** Show more details, like text selections or borders around empty frames. */
	Interactive;
}
<fim_middle>","
 * Additional decoration of the rendering.
 * 
 * @author Andreas Wenger
 */","
 * Defines the decoration of a canvas.
 * 
 * @author <NAME>
 */"
"<fim_prefix>package com.xenoage.zong.renderer.canvas;

/**
 * Additional decoration of the rendering.
 * 
 * @author Andreas Wenger
 */
public enum CanvasDecoration {
	/**<fim_suffix>
	None,
	/** Show more details, like text selections or borders around empty frames. */
	Interactive;
}
<fim_middle>", Just show the result like on a printed page. */, No decoration. */
"<fim_prefix>package com.xenoage.zong.renderer.canvas;

/**
 * Additional decoration of the rendering.
 * 
 * @author Andreas Wenger
 */
public enum CanvasDecoration {
	/** Just show the result like on a printed page. */
	None,
	/**<fim_suffix>
	Interactive;
}
<fim_middle>"," Show more details, like text selections or borders around empty frames. */", Show the result in a window. */
"<fim_prefix>/**<fim_suffix>
package org.eclipse.chemclipse.model.core;

import java.util.TreeMap;

public class Peak_1_Test extends AbstractPeakTestCase {

	private IPeak peak = createPeak();

	public void test1() {

		assertNotNull(peak);
	}

	public void test2() {

		/*
		 * 0.9992192 - strictModel: true
		 * 1.0 - strictModel: false
		 */
		assertEquals(0.9992192f, peak.getPeakModel().getTailing());
	}

	priv<fim_middle>","*****************************************************************************
 * Copyright (c) 2024 Lablicate GmbH.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 * Philip Wenig - initial API and implementation
 *******************************************************************************/","
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>ontributors:
 * Philip Wenig - initial API and implementation
 *******************************************************************************/
package org.eclipse.chemclipse.model.core;

import java.util.TreeMap;

public class Peak_1_Test extends AbstractPeakTestCase {

	private IPeak peak = createPeak();

	public void test1() {

		assertNotNull(peak);
	}

	public void test2() {

		/*<fim_suffix>
		assertEquals(0.9992192f, peak.getPeakModel().getTailing());
	}

	private IPeak createPeak() {

		float totalSignal = 239;
		float startBackgroundAbundance = 0;
		float stopBackgroundAbundance = 0;
		//
		TreeMap<Integer, Float> retentionTimeIntensityMap = new TreeMap<>();
		retentionTimeIntensityMap.put(3032172, 0.0f);
		retentionTimeIntensityMap.put(3033595, 118.0f);
		retentionTim<fim_middle>","
		 * 0.9992192 - strictModel: true
		 * 1.0 - strictModel: false
		 */","*
		 * PeakModel peakModel = peak.getPeakModel();
		 * 
		 * assertEquals(0.9992"
"<fim_prefix> public TextDocumentSaveEvent(TextDocument document, String text)
    {
        this.document = Objects.requireNonNull(document);
        this.text = text;
    }

    /**
     * Returns the document that was saved.
     *
     * @return the document that was saved (never <code>null</code>)
     */
    public final TextDocument getDocument()
    {
        return document;
    }

    /**<fim_suffix>
    public final String getText()
    {
        return text;
    }
}
<fim_middle>","
     * Returns the document content when saved.
     *
     * @return the document content when saved
     */","
     * Returns the text that was saved.
     *
     * @return the text that was saved (never <code>null"
"<fim_prefix>ent document;
    private final String text;

    /**
     * Constructor.
     *
     * @param document the document that was saved (not <code>null</code>)
     * @param text the document content when saved
     */
    public TextDocumentSaveEvent(TextDocument document, String text)
    {
        this.document = Objects.requireNonNull(document);
        this.text = text;
    }

    /**<fim_suffix>
    public final TextDocument getDocument()
    {
        return document;
    }

    /**
     * Returns the document content when saved.
     *
     * @return the document content when saved
     */
    public final String getText()
    {
        return text;
    }
}
<fim_middle>","
     * Returns the document that was saved.
     *
     * @return the document that was saved (never <code>null</code>)
     */","
     * Returns the document that was saved.
     *
     * @return the document that was saved
     */"
"<fim_prefix> Contributors:
 *     Vladimir Piskarev (1C) - initial API and implementation
 *******************************************************************************/
package org.lxtk;

import java.util.Objects;

/**
 * An event describing a save of a {@link TextDocument}.
 */
public class TextDocumentSaveEvent
{
    private final TextDocument document;
    private final String text;

    /**<fim_suffix>
    public TextDocumentSaveEvent(TextDocument document, String text)
    {
        this.document = Objects.requireNonNull(document);
        this.text = text;
    }

    /**
     * Returns the document that was saved.
     *
     * @return the document that was saved (never <code>null</code>)
     */
    public final TextDocument getDocument()
    {
        return document;
    }

   <fim_middle>","
     * Constructor.
     *
     * @param document the document that was saved (not <code>null</code>)
     * @param text the document content when saved
     */","
     * Creates a new event.
     *
     * @param document the document that was saved
     * @param text the text of the document
     */"
"<fim_prefix>/**<fim_suffix>
package org.lxtk;

import java.util.Objects;

/**
 * An event describing a save of a {@link TextDocument}.
 */
public class TextDocumentSaveEvent
{
    private final TextDocument document;
    private final String text;

    /**
     * Constructor.
     *
     * @param document the document that was saved (not <code>null</code>)
     * @param text the document content when saved
     <fim_middle>","*****************************************************************************
 * Copyright (c) 2020 1C-Soft LLC.
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Vladimir Piskarev (1C) - initial API and implementation
 *******************************************************************************/","
 * An event describing a save of a {@link TextDocument}.
 */"
"<fim_prefix>re made available under
 * the terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Vladimir Piskarev (1C) - initial API and implementation
 *******************************************************************************/
package org.lxtk;

import java.util.Objects;

/**<fim_suffix>
public class TextDocumentSaveEvent
{
    private final TextDocument document;
    private final String text;

    /**
     * Constructor.
     *
     * @param document the document that was saved (not <code>null</code>)
     * @param text the document content when saved
     */
    public TextDocumentSaveEvent(TextDocument document, String text)
    {
        this.document = Objects.r<fim_middle>","
 * An event describing a save of a {@link TextDocument}.
 */","
 * Event that is fired when a document is saved.
 *
 *"
"<fim_prefix>/*<fim_suffix>

package org.protocoder.appApi;

import android.content.Context;
import android.content.SharedPreferences;
import android.preference.PreferenceManager;


public class Settings {

    private final SharedPreferences mSharedPrefs;

    public Settings(Context context) {
        mSharedPrefs = PreferenceManager.getDefaultSharedPreferences(context);
    }


    //---------------- save / l<fim_middle>","
* Part of Protocoder http://www.protocoder.org
* A prototyping platform for Android devices
*
* Copyright (C) 2013 Victor Diaz Barrales victormdb@gmail.com
*
* Protocoder is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Protocoder is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with Protocoder. If not, see <http://www.gnu.org/licenses/>.
*/","*
 * Created by victor on 10/10/15.
 */"
"<fim_prefix>/*<fim_suffix>

package neembuu.uploader.api.accounts;

/**
 *
 * @author Shashank
 */
public interface EnableHostCallback {
    void setEnabled(boolean f);
    void setSelected(boolean f);
}
<fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */"
"<fim_prefix>/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package neembuu.uploader.api.accounts;

/**<fim_suffix>
public interface EnableHostCallback {
    void setEnabled(boolean f);
    void setSelected(boolean f);
}
<fim_middle>","
 *
 * @author Shashank
 */","
 *
 * @author <NAME> (<EMAIL"
"<fim_prefix>f the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an ""AS IS"" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

/**<fim_suffix>
@NonNullByDefault
public class SmsDeliveryPdu extends Pdu {
    // can only create via the factory
    SmsDeliveryPdu() {
    }

    // ==================================================
    // TIMESTAMP
    // ==================================================
    private @Nullable Calendar timestamp;

    public void setTimestamp(Calendar timestamp) {
        this.timestamp = timest<fim_middle>","
 * Extracted from SMSLib
 */","
 * 
 */"
"<fim_prefix>/*<fim_suffix>

package com.shatteredpixel.shatteredpixeldungeon.android;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.view.ViewConfiguration;

import com.badlogic.gdx.Files;
import com.badlogic.<fim_middle>","
 * Pixel Dungeon
 * Copyright (C) 2012-2015 Oleg Dolya
 *
 * Shattered Pixel Dungeon
 * Copyright (C) 2014-2024 Evan Debenham
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * Created by <NAME> on 10/25/2016.
 */"
"<fim_prefix>rg.modelio.vcore.smkernel.mapi.MObject;

public class StorageResource_AssociationEndCommand extends DefaultModuleCommandHandler {
    @Override
    public boolean accept(List<MObject> selected_element, IModule module) {
        if(selected_element.size() > 0 && selected_element.get(0) instanceof ModelElement){
            ModelElement element = (ModelElement)selected_element.get(0); /*<fim_suffix> if (element instanceof Enumeration) { return false; }
            
         if(element instanceof Classifier){       return true;    }  
         if(element instanceof TemplateParameter){       return true;    }  
        }
        return false;
    }

    @Override
    public void actionPerformed(List<MObject> selected_element, IModule module) {
        try(ITransaction tr = MARTEMod<fim_middle>", Audit constraints adding */, selected element */
"<fim_prefix>/**<fim_suffix>
package com.rapidminer.tools.belt.expression.internal.function.text;

import java.util.concurrent.Callable;

import com.rapidminer.tools.belt.expression.ExpressionContext;
import com.rapidminer.tools.belt.expression.ExpressionEvaluator;
import com.rapidminer.tools.belt.expression.ExpressionExceptionWrapper;
import com.rapidminer.tools.belt.expression.ExpressionType;
import com.rapidmi<fim_middle>","
 * Copyright (C) 2001-2021 by RapidMiner and the contributors
 *
 * Complete list of developers available at our web site:
 *
 * http://rapidminer.com
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see http://www.gnu.org/licenses/.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>nEvaluatorFactory;
import com.rapidminer.tools.belt.expression.internal.function.AbstractFunction;


/**
 * Abstract class for a {@link com.rapidminer.tools.belt.expression.Function} that has two String arguments and returns
 * a boolean argument.
 *
 * @author David Arnu
 * @since 9.11
 */
public abstract class Abstract2StringInputBooleanOutputFunction extends AbstractFunction {

	/**<fim_suffix>
	public Abstract2StringInputBooleanOutputFunction(String i18n) {
		super(i18n, 2, ExpressionType.BOOLEAN);
	}

	@Override
	public ExpressionEvaluator compute(Callable<Void> stopChecker, ExpressionContext context,
									   ExpressionEvaluator... inputEvaluators) {
		if (inputEvaluators.length != 2) {
			throw new FunctionInputExceptionWrapper(""expression_parser.function_wrong_input""<fim_middle>","
	 * Constructs an AbstractFunction with {@link FunctionDescription} generated from the arguments
	 * and the function name generated from the description.
	 *
	 * @param i18n
	 *            the key for the {@link FunctionDescription}. The functionName is read from
	 *            ""gui.dialog.function.i18nKey.name"", the helpTextName from "".help"", the groupName
	 *            from "".group"", the description from "".description"" and the function with
	 *            parameters from "".parameters"". If "".parameters"" is not present, the "".name"" is
	 *            taken for the function with parameters.
	 */","
	 * Constructor.
	 *
	 * @param i18n the i18n
	 */"
"<fim_prefix>FunctionInputExceptionWrapper(""expression_parser.function_wrong_input"", getFunctionName(), 2,
					inputEvaluators.length);
		}

		getResultType(inputEvaluators);

		ExpressionEvaluator left = inputEvaluators[0];
		ExpressionEvaluator right = inputEvaluators[1];

		return ExpressionEvaluatorFactory.ofBoolean(makeBooleanCallable(left, right), isResultConstant(inputEvaluators));
	}

	/**<fim_suffix>
	protected Callable<Boolean> makeBooleanCallable(ExpressionEvaluator left, ExpressionEvaluator right) {
		final Callable<String> funcLeft = left.getStringFunction();
		final Callable<String> funcRight = right.getStringFunction();
		try {

			final String valueLeft = left.isConstant() ? funcLeft.call() : """";
			final String valueRight = right.isConstant() ? funcRight.call() : """";

			i<fim_middle>","
	 * Builds a Boolean callable from left and right using {@link #compute(String, String)}, where
	 * constant child results are evaluated.
	 *
	 * @param left
	 *            the left input
	 * @param right
	 *            the right input
	 * @return the resulting callable<Boolean>
	 */","
	 * @param inputEvaluators
	 * @return
	 */"
"<fim_prefix>ype;
import com.rapidminer.tools.belt.expression.FatalExpressionExceptionWrapper;
import com.rapidminer.tools.belt.expression.FunctionDescription;
import com.rapidminer.tools.belt.expression.FunctionInputExceptionWrapper;
import com.rapidminer.tools.belt.expression.internal.ExpressionEvaluatorFactory;
import com.rapidminer.tools.belt.expression.internal.function.AbstractFunction;


/**<fim_suffix>
public abstract class Abstract2StringInputBooleanOutputFunction extends AbstractFunction {

	/**
	 * Constructs an AbstractFunction with {@link FunctionDescription} generated from the arguments
	 * and the function name generated from the description.
	 *
	 * @param i18n
	 *            the key for the {@link FunctionDescription}. The functionName is read from
	 *            ""gui.dialo<fim_middle>","
 * Abstract class for a {@link com.rapidminer.tools.belt.expression.Function} that has two String arguments and returns
 * a boolean argument.
 *
 * @author David Arnu
 * @since 9.11
 */","
 * Abstract class for functions that take two arguments and return a string.
 *
 * @author <NAME>
 *
 */"
"<fim_prefix>eft.isConstant()) {
				return () -> compute(valueLeft, funcRight.call());

			} else if (right.isConstant()) {
				return () -> compute(funcLeft.call(), valueRight);

			} else {
				return () -> compute(funcLeft.call(), funcRight.call());
			}
		} catch (ExpressionExceptionWrapper e) {
			throw e;
		} catch (Exception e) {
			throw new FatalExpressionExceptionWrapper(e);
		}
	}

	/**<fim_suffix>
	protected abstract Boolean compute(String value1, String value2);

	@Override
	protected ExpressionType computeType(ExpressionType... inputTypes) {
		ExpressionType left = inputTypes[0];
		ExpressionType right = inputTypes[1];
		if (left == ExpressionType.STRING && right == ExpressionType.STRING) {
			return ExpressionType.BOOLEAN;
		} else {
			throw new FunctionInputExceptionWrappe<fim_middle>","
	 * Computes the result for two input String values.
	 *
	 * @param value1
	 * @param value2
	 * @return the result of the computation.
	 */","
	 * Computes the result of the function.
	 * 
	 * @param value1
	 *            the first value
	 * @param value"
"<fim_prefix>sfer> transfers = Maps.newMultiMap();

    private final Map<Type, Transfer> transferFunctions = Maps.newHybridMap();

    private enum Kind {
        VAR_TO_ARRAY, VAR_TO_FIELD, ARRAY_TO_VAR, FIELD_TO_VAR
    }

    private record TransferInfo(Kind kind, Var var, TaintTransfer transfer) {
    }

    private final MultiMap<Var, TransferInfo> transferInfos = Maps.newMultiMap();

    /**<fim_suffix>
    private final MultiMap<JMethod, Invoke> callSiteTransfers = Maps.newMultiMap();

    /**
     * Whether enable taint back propagation to handle aliases about
     * tainted mutable objects, e.g., char[].
     */
    private final boolean enableBackPropagate = true;

    /**
     * Cache statements generated for back propagation.
     */
    private final Map<Var, List<Stmt>> backP<fim_middle>","
     * Map from a method to {@link Invoke} statements in the method
     * which matches any transfer method.
     * This map matters only when call-site mode is enabled.
     */","
     * Cache statements generated for field reads.
     */"
"<fim_prefix>ascal.taie.ir.stmt.StoreField;
import pascal.taie.language.classes.JField;
import pascal.taie.language.classes.JMethod;
import pascal.taie.language.type.Type;
import pascal.taie.util.AnalysisException;
import pascal.taie.util.collection.Maps;
import pascal.taie.util.collection.MultiMap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**<fim_suffix>
class TransferHandler extends OnFlyHandler {

    private static final Logger logger = LogManager.getLogger(TransferHandler.class);

    private final Context emptyContext;

    /**
     * Map from method (which causes taint transfer) to set of relevant
     * {@link TaintTransfer}.
     */
    private final MultiMap<JMethod, TaintTransfer> transfers = Maps.newMultiMap();

    private<fim_middle>","
 * Handles taint transfers in taint analysis.
 */","
 * Handler for the transfer of taint.
 */"
"<fim_prefix>tion.Maps;
import pascal.taie.util.collection.MultiMap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Handles taint transfers in taint analysis.
 */
class TransferHandler extends OnFlyHandler {

    private static final Logger logger = LogManager.getLogger(TransferHandler.class);

    private final Context emptyContext;

    /**<fim_suffix>
    private final MultiMap<JMethod, TaintTransfer> transfers = Maps.newMultiMap();

    private final Map<Type, Transfer> transferFunctions = Maps.newHybridMap();

    private enum Kind {
        VAR_TO_ARRAY, VAR_TO_FIELD, ARRAY_TO_VAR, FIELD_TO_VAR
    }

    private record TransferInfo(Kind kind, Var var, TaintTransfer transfer) {
    }

    private final MultiMap<Var, TransferInfo<fim_middle>","
     * Map from method (which causes taint transfer) to set of relevant
     * {@link TaintTransfer}.
     */","
     * Creates a new transfer handler.
     *
     * @param emptyContext the empty context
     */"
"<fim_prefix>d, Invoke> callSiteTransfers = Maps.newMultiMap();

    /**
     * Whether enable taint back propagation to handle aliases about
     * tainted mutable objects, e.g., char[].
     */
    private final boolean enableBackPropagate = true;

    /**
     * Cache statements generated for back propagation.
     */
    private final Map<Var, List<Stmt>> backPropStmts = Maps.newMap();

    /**<fim_suffix>
    private int counter = 0;

    TransferHandler(HandlerContext context) {
        super(context);
        emptyContext = solver.getContextSelector().getEmptyContext();
        context.config().transfers()
                .forEach(t -> this.transfers.put(t.method(), t));
    }

    private void processTransfer(Context context, Invoke callSite, TaintTransfer transfer) {
        IndexR<fim_middle>","
     * Counter for generating temporary variables.
     */","
     * Cache statements generated for back propagation.
    "
"<fim_prefix>    * which matches any transfer method.
     * This map matters only when call-site mode is enabled.
     */
    private final MultiMap<JMethod, Invoke> callSiteTransfers = Maps.newMultiMap();

    /**
     * Whether enable taint back propagation to handle aliases about
     * tainted mutable objects, e.g., char[].
     */
    private final boolean enableBackPropagate = true;

    /**<fim_suffix>
    private final Map<Var, List<Stmt>> backPropStmts = Maps.newMap();

    /**
     * Counter for generating temporary variables.
     */
    private int counter = 0;

    TransferHandler(HandlerContext context) {
        super(context);
        emptyContext = solver.getContextSelector().getEmptyContext();
        context.config().transfers()
                .forEach(t -> this.transfe<fim_middle>","
     * Cache statements generated for back propagation.
     */","
     * Map from a variable to a list of statements that back propagate
"
"<fim_prefix>/*<fim_suffix>

package pascal.taie.analysis.pta.plugin.taint;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import pascal.taie.analysis.graph.callgraph.CallKind;
import pascal.taie.analysis.graph.callgraph.Edge;
import pascal.taie.analysis.pta.core.cs.context.Context;
import pascal.taie.analysis.pta.core.cs.element.CSCallSite;
import pascal.taie.analysis.pta.c<fim_middle>","
 * Tai-e: A Static Analysis Framework for Java
 *
 * Copyright (C) 2022 Tian Tan <tiantan@nju.edu.cn>
 * Copyright (C) 2022 Yue Li <yueli@nju.edu.cn>
 *
 * This file is part of Tai-e.
 *
 * Tai-e is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * Tai-e is distributed in the hope that it will be useful,but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
 * Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Tai-e. If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by Thomas on 10/11/2016.
 */"
"<fim_prefix>ansfer transfer) {
    }

    private final MultiMap<Var, TransferInfo> transferInfos = Maps.newMultiMap();

    /**
     * Map from a method to {@link Invoke} statements in the method
     * which matches any transfer method.
     * This map matters only when call-site mode is enabled.
     */
    private final MultiMap<JMethod, Invoke> callSiteTransfers = Maps.newMultiMap();

    /**<fim_suffix>
    private final boolean enableBackPropagate = true;

    /**
     * Cache statements generated for back propagation.
     */
    private final Map<Var, List<Stmt>> backPropStmts = Maps.newMap();

    /**
     * Counter for generating temporary variables.
     */
    private int counter = 0;

    TransferHandler(HandlerContext context) {
        super(context);
        emptyContext =<fim_middle>","
     * Whether enable taint back propagation to handle aliases about
     * tainted mutable objects, e.g., char[].
     */","
     * Map from a method to {@link Invoke} statements in the method
     * which matches any transfer method.
     * This map matters"
"<fim_prefix>/*<fim_suffix>

package de.minestar.mercurypuzzle.commands;

import org.bukkit.entity.Player;

import com.bukkit.gemo.utils.ChatUtils;

import de.minestar.mercurypuzzle.Core.MercuryPuzzleCore;
import de.minestar.mercurypuzzle.Manager.PlayerManager;
import de.minestar.minestarlibrary.commands.AbstractCommand;
import de.minestar.minestarlibrary.utils.PlayerUtils;

public class cmdUndo ext<fim_middle>","
 * Copyright (C) 2011-2012 GeMo
 * 
 * This file is part of FalseBook and FalseBookChat.
 * 
 * FalseBookChat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3 of the License.
 * 
 * FalseBookChat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with FalseBookChat.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author Minestar
 *
 */"
"<fim_prefix>ibuted in the hope that it will be useful, but WITHOUT ANY 
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
   PARTICULAR PURPOSE.  See the GNU General Public License for more details. */

package artofillusion.raytracer;

import artofillusion.material.*;
import artofillusion.math.*;
import artofillusion.object.*;
import artofillusion.texture.*;

/**<fim_suffix>

public class RTSphere extends RTObject
{
  Sphere theSphere;
  double r, r2, cx, cy, cz, param[];
  boolean bumpMapped;
  Mat4 toLocal, fromLocal;
  
  public static final double TOL = 1e-12;

  public RTSphere(Sphere sphere, Mat4 fromLocal, Mat4 toLocal, double param[])
  {
    theSphere = sphere;
    this.param = param;
    cx = fromLocal.m14/fromLocal.m44;
    cy = fromLocal.m24/f<fim_middle>"," RTSphere represents a sphere to be raytraced.  It is defined by specifying a Sphere 
    object, and the transformations to and from local coordinates.  It must be a true 
    sphere, not an ellipsoid.  That is, all of its radii must be equal. */","
  A sphere in the world.
  
  @author <NAME>"
"<fim_prefix>ed)
      this.fromLocal = fromLocal;
    this.toLocal = toLocal;
  }

  /** Get the TextureMapping for this object. */
  
  public final TextureMapping getTextureMapping()
  {
    return theSphere.getTextureMapping();
  }

  /** Get the MaterialMapping for this object. */
  
  public final MaterialMapping getMaterialMapping()
  {
    return theSphere.getMaterialMapping();
  }  

  /**<fim_suffix>

  public SurfaceIntersection checkIntersection(Ray r)
  {
    Vec3 orig = r.getOrigin(), dir = r.getDirection();
    Vec3 v1 = r.tempVec1, v2 = r.tempVec2;
    double b, c, d, root, t, t2 = 0.0;
    int numIntersections;

    v1.set(cx-orig.x, cy-orig.y, cz-orig.z);
    b = dir.x*v1.x + dir.y*v1.y + dir.z*v1.z;
    c = v1.x*v1.x + v1.y*v1.y + v1.z*v1.z - r2;
    if (c > TOL)
      {
<fim_middle>", Determine whether the given ray intersects this sphere. */, Get the Sphere for this object. */
"<fim_prefix>NTERSECTION;  // Ray points away from center of sphere.
        d = b*b - c;
        if (d < 0.0)
          return SurfaceIntersection.NO_INTERSECTION;
        numIntersections = 1;
        t = b + Math.sqrt(d);
      }
    v1.set(orig.x+t*dir.x, orig.y+t*dir.y, orig.z+t*dir.z);
    projectPoint(v1);
    return new SphereIntersection(this, numIntersections, v1, v2, t, t2);
  }
  
  /**<fim_suffix>
  
  private void projectPoint(Vec3 pos)
  {
    double dx = pos.x-cx, dy = pos.y-cy, dz = pos.z-cz;
    double scale = r/Math.sqrt(dx*dx+dy*dy+dz*dz);
    pos.set(cx+dx*scale, cy+dy*scale, cz+dz*scale);
  }

  /** Get a bounding box for this sphere. */
  
  public BoundingBox getBounds()
  {
    return new BoundingBox(cx-r, cx+r, cy-r, cy+r, cz-r, cz+r);
  }

  /** Determine whether <fim_middle>"," Given a point, project it onto the surface of the sphere.  This is necessary to
      prevent roundoff error. */", Project a point onto the sphere. */
"<fim_prefix>section(this, numIntersections, v1, v2, t, t2);
  }
  
  /** Given a point, project it onto the surface of the sphere.  This is necessary to
      prevent roundoff error. */
  
  private void projectPoint(Vec3 pos)
  {
    double dx = pos.x-cx, dy = pos.y-cy, dz = pos.z-cz;
    double scale = r/Math.sqrt(dx*dx+dy*dy+dz*dz);
    pos.set(cx+dx*scale, cy+dy*scale, cz+dz*scale);
  }

  /**<fim_suffix>
  
  public BoundingBox getBounds()
  {
    return new BoundingBox(cx-r, cx+r, cy-r, cy+r, cz-r, cz+r);
  }

  /** Determine whether any part of the surface of the sphere lies within a bounding box. */

  public boolean intersectsBox(BoundingBox bb)
  {
    Vec3 c = new Vec3(cx, cy, cz);

    // Find the nearest point of the box to the sphere.

    if (cx < bb.minx)
      c.x = bb.min<fim_middle>", Get a bounding box for this sphere. */," Given a point, project it onto the surface"
"<fim_prefix>le param[])
  {
    theSphere = sphere;
    this.param = param;
    cx = fromLocal.m14/fromLocal.m44;
    cy = fromLocal.m24/fromLocal.m44;
    cz = fromLocal.m34/fromLocal.m44;
    r = sphere.getRadii().x;
    r2 = r*r;
    bumpMapped = sphere.getTexture().hasComponent(Texture.BUMP_COMPONENT);
    if (bumpMapped)
      this.fromLocal = fromLocal;
    this.toLocal = toLocal;
  }

  /**<fim_suffix>
  
  public final TextureMapping getTextureMapping()
  {
    return theSphere.getTextureMapping();
  }

  /** Get the MaterialMapping for this object. */
  
  public final MaterialMapping getMaterialMapping()
  {
    return theSphere.getMaterialMapping();
  }  

  /** Determine whether the given ray intersects this sphere. */

  public SurfaceIntersection checkIntersection(Ray r)
  {
<fim_middle>", Get the TextureMapping for this object. */, Get the Sphere that this object is mapping.
"<fim_prefix> roundoff error. */
  
  private void projectPoint(Vec3 pos)
  {
    double dx = pos.x-cx, dy = pos.y-cy, dz = pos.z-cz;
    double scale = r/Math.sqrt(dx*dx+dy*dy+dz*dz);
    pos.set(cx+dx*scale, cy+dy*scale, cz+dz*scale);
  }

  /** Get a bounding box for this sphere. */
  
  public BoundingBox getBounds()
  {
    return new BoundingBox(cx-r, cx+r, cy-r, cy+r, cz-r, cz+r);
  }

  /**<fim_suffix>

  public boolean intersectsBox(BoundingBox bb)
  {
    Vec3 c = new Vec3(cx, cy, cz);

    // Find the nearest point of the box to the sphere.

    if (cx < bb.minx)
      c.x = bb.minx;
    else if (cx > bb.maxx)
      c.x = bb.maxx;
    if (cy < bb.miny)
      c.y = bb.miny;
    else if (cy > bb.maxy)
      c.y = bb.maxy;
    if (cz < bb.minz)
      c.z = bb.minz;
    else if (cz ><fim_middle>", Determine whether any part of the surface of the sphere lies within a bounding box. */, Test whether this sphere intersects a box. */
"<fim_prefix>() > r2)
      return true;
    c.set(bb.maxx-cx, bb.maxy-cy, bb.minz-cz);
    if (c.length2() > r2)
      return true;
    c.set(bb.maxx-cx, bb.maxy-cy, bb.maxz-cz);
    if (c.length2() > r2)
      return true;
    return false;
  }
  
  /** Get the transformation from world coordinates to the object's local coordinates. */
  
  public Mat4 toLocal()
  {
    return toLocal;
  }

  /**<fim_suffix>

  private static class SphereIntersection implements SurfaceIntersection
  {
    private RTSphere sphere;
    private int numIntersections;
    private double dist1, dist2, r1x, r1y, r1z, r2x, r2y, r2z;
    private boolean trueNormValid;
    private Vec3 trueNorm, pos;

    public SphereIntersection(RTSphere sphere, int numIntersections, Vec3 point1, Vec3 point2, double dist1, double<fim_middle>","
   * Inner class representing an intersection with an RTSphere.
   */", Get the transformation from object's local coordinates to world coordinates. */
"<fim_prefix>  pos.set(r2x, r2y, r2z);
      if (map instanceof UniformMapping)
        map.getTransparency(pos, trans, angle, size, time, sphere.param);
      else
      {
        sphere.toLocal.transform(pos);
        map.getTransparency(pos, trans, angle, size, time, sphere.param);
      }
    }

    public void trueNormal(Vec3 n)
    {
      calcTrueNorm();
      n.set(trueNorm);
    }

    /**<fim_suffix>

    private final void calcTrueNorm()
    {
      if (trueNormValid)
        return;
      trueNormValid = true;
      trueNorm.set(r1x-sphere.cx, r1y-sphere.cy, r1z-sphere.cz);
      trueNorm.normalize();
    }
  }
}<fim_middle>", Calculate the true normal of the point of intersection. */,"
     * Returns the true normal of"
"<fim_prefix>/*<fim_suffix>

package artofillusion.raytracer;

import artofillusion.material.*;
import artofillusion.math.*;
import artofillusion.object.*;
import artofillusion.texture.*;

/** RTSphere represents a sphere to be raytraced.  It is defined by specifying a Sphere 
    object, and the transformations to and from local coordinates.  It must be a true 
    sphere, not an ellipsoid.  That is, all of its<fim_middle>"," Copyright (C) 1999-2013 by Peter Eastman

   This program is free software; you can redistribute it and/or modify it under the
   terms of the GNU General Public License as published by the Free Software
   Foundation; either version 2 of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful, but WITHOUT ANY 
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
   PARTICULAR PURPOSE.  See the GNU General Public License for more details. */","*
 * RTSphere represents a sphere to be raytraced.  It is defined by specifying a Sphere 
 * object, and the transformations to and from local coordinates.  It must be a true 
 * sphere, not an ellipsoid.  That is, all of its surface normals are aligned with the   Fixed a typo in the javadoc.  /*
 * RTSphere.java
 *
 * Created on November 20, 2003, 10:59 AM
 */"
"<fim_prefix>Local.m34/fromLocal.m44;
    r = sphere.getRadii().x;
    r2 = r*r;
    bumpMapped = sphere.getTexture().hasComponent(Texture.BUMP_COMPONENT);
    if (bumpMapped)
      this.fromLocal = fromLocal;
    this.toLocal = toLocal;
  }

  /** Get the TextureMapping for this object. */
  
  public final TextureMapping getTextureMapping()
  {
    return theSphere.getTextureMapping();
  }

  /**<fim_suffix>
  
  public final MaterialMapping getMaterialMapping()
  {
    return theSphere.getMaterialMapping();
  }  

  /** Determine whether the given ray intersects this sphere. */

  public SurfaceIntersection checkIntersection(Ray r)
  {
    Vec3 orig = r.getOrigin(), dir = r.getDirection();
    Vec3 v1 = r.tempVec1, v2 = r.tempVec2;
    double b, c, d, root, t, t2 = 0.0;
    int numInters<fim_middle>", Get the MaterialMapping for this object. */, Get the MaterialMapping for this object. */
"<fim_prefix>bb.maxx-cx, bb.miny-cy, bb.minz-cz);
    if (c.length2() > r2)
      return true;
    c.set(bb.maxx-cx, bb.miny-cy, bb.maxz-cz);
    if (c.length2() > r2)
      return true;
    c.set(bb.maxx-cx, bb.maxy-cy, bb.minz-cz);
    if (c.length2() > r2)
      return true;
    c.set(bb.maxx-cx, bb.maxy-cy, bb.maxz-cz);
    if (c.length2() > r2)
      return true;
    return false;
  }
  
  /**<fim_suffix>
  
  public Mat4 toLocal()
  {
    return toLocal;
  }

  /**
   * Inner class representing an intersection with an RTSphere.
   */

  private static class SphereIntersection implements SurfaceIntersection
  {
    private RTSphere sphere;
    private int numIntersections;
    private double dist1, dist2, r1x, r1y, r1z, r2x, r2y, r2z;
    private boolean trueNormValid;
    private Vec3<fim_middle>", Get the transformation from world coordinates to the object's local coordinates. */,"
   * Returns the intersection point of the ray with the sphere"
"<fim_prefix>/*<fim_suffix>

package utils.access;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.bson.BasicBSONObject;

import models.MidataId;
import models.enums.APSSecurityLevel;
import scala.NotImplementedError;
import utils.auth.EncryptionNotSupportedException;
import utils.exceptions.AppException;
import utils.except<fim_middle>","
 * This file is part of the Open MIDATA Server.
 *
 * The Open MIDATA Server is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * The Open MIDATA Server is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Open MIDATA Server.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>va.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.bson.BasicBSONObject;

import models.MidataId;
import models.enums.APSSecurityLevel;
import scala.NotImplementedError;
import utils.auth.EncryptionNotSupportedException;
import utils.exceptions.AppException;
import utils.exceptions.InternalServerException;

/**<fim_suffix>
public class Feature_InMemoryQuery extends APS {
	
	private List<DBRecord> contents;
	private MidataId me = new MidataId();
	private MidataId storedOwner;
	
	public Feature_InMemoryQuery(List<DBRecord> contents) {
		this.contents = contents;
	}
	
	public Feature_InMemoryQuery(MidataId storedOwner, List<DBRecord> contents) {
		this.storedOwner = storedOwner;
		this.contents = contents;<fim_middle>","
 * query a preselected list of records in memory
 *
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package org.entando.entando.plugins.jacms.aps.system.services;

import com.agiletec.aps.system.services.user.UserDetails;
import com.agiletec.plugins.jacms.aps.system.services.content.model.Content;
import com.agiletec.plugins.jacms.aps.system.services.content.model.ContentDto;
import com.agiletec.plugins.jacms.aps.system.services.content.model.attribute.ContentStatusState;
import org<fim_middle>","
 * Copyright 2018-Present Entando Inc. (http://www.entando.com) All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */","*
 * @author <NAME> (<EMAIL>)
 * @since 1.0.0
 */"
"<fim_prefix><ComponentUsageEntity> usageDetails = contentTypeService.getComponentUsageDetails(restListRequest.getFilters()[0].getValue(), restListRequest);

                    ContentTypeAssertionHelper.assertUsageDetails(usageDetails,
                            utilizers[i],
                            totalItems,
                            pageList.get(i));
                });
    }


    /**<fim_suffix>
    private void mockPagedMetadata(ContentDto[] utilizers, int currPage, int lastPage, int pageSize, int totalSize) {

        try {
            PageSearchRequest pageSearchRequest = new PageSearchRequest(PageMockHelper.PAGE_CODE);
            pageSearchRequest.setPageSize(pageSize);

            List<ComponentUsageEntity> componentUsageEntityList = Arrays.stream(utilizers)
          <fim_middle>","
     * init mock for a multipaged request
     */","
     * Mock paged metadata.
     *
  "
"<fim_prefix>/*<fim_suffix>

package catrenet.settings;

/**
 * arrow notation
 * Daniel Huson, 7.2019
 */
public enum ArrowNotation {
    UsesEquals(""=>""), UsesMinus(""->"");

    private final String label;

    ArrowNotation(String label) {
        this.label = label;
    }

    public String getLabel() {
        return label;
    }

    public static ArrowNotation valueOfLabel(String label) {
        if (UsesE<fim_middle>","
 *  ArrowNotation.java Copyright (C) 2024 Daniel H. Huson
 *
 *  (Some files contain contributions from other authors, who are then mentioned separately.)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * arrow notation
 * Daniel Huson, 7.2019
 */"
"<fim_prefix>hat it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package catrenet.settings;

/**<fim_suffix>
public enum ArrowNotation {
    UsesEquals(""=>""), UsesMinus(""->"");

    private final String label;

    ArrowNotation(String label) {
        this.label = label;
    }

    public String getLabel() {
        return label;
    }

    public static ArrowNotation valueOfLabel(String label) {
        if (UsesEquals.getLabel().equalsIgnoreCase(label))
            return UsesEquals;
      <fim_middle>","
 * arrow notation
 * Daniel Huson, 7.2019
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package io.xeres.app.xrs.service.chat;

import io.xeres.app.database.model.chat.ChatBacklog;
import io.xeres.app.database.model.chat.ChatRoomBacklog;
import io.xeres.app.database.model.location.Location;
import io.xeres.app.database.repository.ChatBacklogRepository;
import io.xeres.app.database.repository.ChatRoomBacklogRepository;
import io.xeres.app.database.repository.ChatRoomRepo<fim_middle>","
 * Copyright (c) 2024 by David Gerber - https://zapek.com
 *
 * This file is part of Xeres.
 *
 * Xeres is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Xeres is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Xeres.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 * https://whysobusy.com
 * ***
 * Created on 07/04/2020
 */"
"<fim_prefix>/**<fim_suffix>

package qa.qcri.aidr.trainer.pybossa.service.impl;<fim_middle>","
 * Implementations of services offered by aidr-trainer-pybossa.
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package VASSAL.configure;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JP<fim_middle>","
 * $Id$
 *
 * Copyright (c) 2003 by Rodney Kinney
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License (LGPL) as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, copies are available
 * at http://www.opensource.org.
 */","*
 * A button that displays an image.
 * 
 * @author <NAME>
 * @version $Id: ImageButton.java,v 1.2 2004/11/03 19:51:00 cxh Exp $
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.jpt.jpa.core.context.orm;

import org.eclipse.emf.common.util.EList;
import org.eclipse.jpt.common.utility.iterable.ListIterable;
import org.eclipse.jpt.jpa.core.context.AttributeOverrideContainer;
import org.eclipse.jpt.jpa.core.context.SpecifiedOverride;
import org.eclipse.jpt.jpa.core.context.VirtualOverride;
import org.eclipse.jpt.jpa.core.resource.orm.XmlAttri<fim_middle>","*****************************************************************************
 * Copyright (c) 2009, 2013 Oracle. All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0, which accompanies this distribution
 * and is available at https://www.eclipse.org/legal/epl-2.0/.
 * 
 * Contributors:
 *     Oracle - initial API and implementation
 ******************************************************************************/","
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Attribute Override Container</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link org.eclipse.jpt.jpa.core.context.orm.AttributeOverrideContainer#getSpecified"
"<fim_prefix>ly before reaching
 * stability. It is available at this early stage to solicit feedback from
 * pioneering adopters on the understanding that any code that uses this API
 * will almost certainly be broken (repeatedly) as the API evolves.
 * 
 * @version 3.3
 * @since 2.3
 */
public interface OrmAttributeOverrideContainer
	extends AttributeOverrideContainer, OrmOverrideContainer
{
	/**<fim_suffix>
	void initializeFrom(OrmAttributeOverrideContainer oldContainer);

	// covariant overrides
	ListIterable<OrmSpecifiedAttributeOverride> getSpecifiedOverrides();
	OrmSpecifiedAttributeOverride getSpecifiedOverride(int index);
	OrmSpecifiedAttributeOverride getSpecifiedOverrideNamed(String name);
	ListIterable<OrmVirtualAttributeOverride> getVirtualOverrides();
	OrmVirtualAttributeOverr<fim_middle>","
	 * Called when converting an embedded mapping to an
	 * embedded ID mapping (and vice-versa);
	 * to preserve any specified attribute overrides.
	 * <p>
	 * <strong>NB:</strong>
	 * There is no corresponding method on the Java container because
	 * Java mapping conversions simply change the mapping annotation and
	 * leave the [sibling] attribute override annotations in place;
	 * while <code>orm.xml</code> mapping conversions must move
	 * the [nested] attribute override XML elements to the new mapping
	 * XML element.
	 * <p>
	 * <strong>NB:</strong>
	 * There is no corresponding method on the association override container
	 * because embedded ID mappings do not have <em>association</em> overrides;
	 * so there is no need to convert those.
	 */","
	 * Initializes this container from the specified container.
	 * 
	 * @param oldContainer
	 *            The container to copy the data from.
	 */"
"<fim_prefix>se.jpt.jpa.core.context.orm;

import org.eclipse.emf.common.util.EList;
import org.eclipse.jpt.common.utility.iterable.ListIterable;
import org.eclipse.jpt.jpa.core.context.AttributeOverrideContainer;
import org.eclipse.jpt.jpa.core.context.SpecifiedOverride;
import org.eclipse.jpt.jpa.core.context.VirtualOverride;
import org.eclipse.jpt.jpa.core.resource.orm.XmlAttributeOverride;

/**<fim_suffix>
public interface OrmAttributeOverrideContainer
	extends AttributeOverrideContainer, OrmOverrideContainer
{
	/**
	 * Called when converting an embedded mapping to an
	 * embedded ID mapping (and vice-versa);
	 * to preserve any specified attribute overrides.
	 * <p>
	 * <strong>NB:</strong>
	 * There is no corresponding method on the Java container because
	 * Java mapping conversions <fim_middle>","
 * <code>orm.xml</code> attribute override container
 * <p>
 * Provisional API: This interface is part of an interim API that is still
 * under development and expected to change significantly before reaching
 * stability. It is available at this early stage to solicit feedback from
 * pioneering adopters on the understanding that any code that uses this API
 * will almost certainly be broken (repeatedly) as the API evolves.
 * 
 * @version 3.3
 * @since 2.3
 */","
 * An {@link OrmOverrideContainer} that also contains
 * {@link OrmAttributeOverride}s.
 * 
 * @author <NAME>
 */"
"<fim_prefix>package codes.wasabi.xclaim.debug;

import org.jetbrains.annotations.ApiStatus;

import java.lang.annotation.*;

/**<fim_suffix>
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@ApiStatus.Internal
public @interface Debuggable {
}
<fim_middle>","
 * Marks a status as Debuggable, meaning that the Debug system will look for {@link codes.wasabi.xclaim.debug.goal.DebugGoal DebugGoal}s
 * within the class.
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.github.funthomas424242.jenkinsmonitor.config;

/*<fim_suffix>

import com.github.funthomas424242.jenkinsmonitor.config.ConfigurationFluentGrammar.Created;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;

public class ConfigurationMockOneJobFailed {

    public static final String PATH_ONEJOB_FAILED_CONFIGURATION_FILE = ""src/test/resources/onejob-failed-configuration.properties"";


    private ConfigurationMockOneJobFa<fim_middle>","-
 * #%L
 * Jenkins Monitor
 * %%
 * Copyright (C) 2019 PIUG
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */","*
 * Created by funthomas424242 on 10/05/17.
 */"
"<fim_prefix>/*<fim_suffix>

package etomica.virial.GUI.components;

public class ExceptionDoNotRemoveSpecies extends Exception{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	public int indexSelectedSpecies;
	
	public ExceptionDoNotRemoveSpecies(int index){
		indexSelectedSpecies = index;
	}

	public int getIndexSelectedSpecies() {
		return indexSelectedSpecies;
	}

	public void setIndexSe<fim_middle>"," This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */","*
 * 
 */"
"<fim_prefix>/*<fim_suffix>

public class TestWStalker {
    public static void main(String[] args) {
        System.out.println(""Loading BurpImportSitemap as legacy extension..."");
        //burp.StartBurp.main(args);
    }
}<fim_middle>","
Released as open source by NCC Group Plc - http://www.nccgroup.com/

Developed by Jose Selvi, jose dot selvi at nccgroup dot com

https://github.com/nccgroup/BurpImportSitemap

Released under AGPL see LICENSE for more information
*/","*
 * Created by <NAME> on 2017-05-03.
 */"
"<fim_prefix>
package atomicedit.logging;

/**<fim_suffix>
public enum LogLevel {
    DEBUG,
    INFO,
    NOTICE,
    WARNING,
    ERROR,
    CRITICAL
    ;
    
    public boolean isLessImportantThan(LogLevel other) {
        return this.ordinal() < other.ordinal();
    }
    
    public static LogLevel of(String levelName) {
        return LogLevel.valueOf(levelName.toUpperCase());
    }
    
}
<fim_middle>","
 *
 * @author Justin Bonner
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.mikuac.shiro.dto.action.response;

import com.alibaba.fastjson2.annotation.JSONField;
import lombok.Data;

/**<fim_suffix>
@Data
public class GuildListResp {

    @JSONField(name = ""guild_id"")
    private String guildId;

    @JSONField(name = ""guild_name"")
    private String guildName;

    @JSONField(name = ""guild_display_id"")
    private Long guildDisplayId;

}
<fim_middle>","
 * <p>GuildListResp class.</p>
 *
 * @author Zero
 * @version $Id: $Id
 */","
 * @author Zero
 * @date 2020/11/17 11:17
 */"
"<fim_prefix>/*<fim_suffix>

/**
 * ExpandableList.java Created by: Nahuel Barrios: 24/03/2012, 11:00:28.
 */
package com.nbempire.android.magicannotator.util;

import java.util.List;

/**
 * Interface to work with expandable list of items where each item has a label and a list of subitems to show.
 *
 * @author Nahuel Barrios.
 * @since 1
 */
public interface ExpandableList extends List<ExpandableGroup> {

}
<fim_middle>","
 * Magic Annotator - The only thing you need to write down whatever you want.
 * Copyright (C) 2013 Nahuel Barrios <barrios.nahuel@gmail.com>.
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * ExpandableList.java Created by: Nahuel Barrios: 24/03/2012, 11:00:28.
 */"
"<fim_prefix>in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**<fim_suffix>
package com.nbempire.android.magicannotator.util;

import java.util.List;

/**
 * Interface to work with expandable list of items where each item has a label and a list of subitems to show.
 *
 * @author Nahuel Barrios.
 * @since 1
 */
public interface ExpandableList extends List<ExpandableGroup> {

}
<fim_middle>","
 * ExpandableList.java Created by: Nahuel Barrios: 24/03/2012, 11:00:28.
 */","
 * Copyright (c) 2015 Nahuel Barrios.
 * <p/>
 * Permission is hereby granted, free of charge, to"
"<fim_prefix> PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * ExpandableList.java Created by: Nahuel Barrios: 24/03/2012, 11:00:28.
 */
package com.nbempire.android.magicannotator.util;

import java.util.List;

/**<fim_suffix>
public interface ExpandableList extends List<ExpandableGroup> {

}
<fim_middle>","
 * Interface to work with expandable list of items where each item has a label and a list of subitems to show.
 *
 * @author Nahuel Barrios.
 * @since 1
 */","
 * ExpandableList
 *
 * @author Nahuel Barrios
 */"
"<fim_prefix>package org.yamcs.xtce;

import java.util.Arrays;
import java.util.List;

/**<fim_suffix>
public class SplineCalibrator implements Calibrator {
    private static final long serialVersionUID = 3L;
    SplinePoint[] points;

    public SplineCalibrator(List<SplinePoint> points) {
        if(points.size()<2) {
            throw new IllegalArgumentException(""The spline calibrator needs at least two points"");
        }
        this.points = points.toArray(new SplinePoint[0]);
<fim_middle>","
 * A calibration type where a segmented line in a raw vs calibrated plane is described using a set of points.
 * Raw values are converted to calibrated values by finding a position on the line corresponding to the raw value.
 * The algorithm triggers on the input parameter.
 *
 */","
 * A calibrator that uses a spline to calibrate a value.
 * 
 * @author nm
 *
 */"
"<fim_prefix>package com.softwaremagico.tm.character.xp;

/*<fim_suffix>

public class NotEnoughExperienceException extends Exception {
	private static final long serialVersionUID = 3107150469275906743L;

	public NotEnoughExperienceException(String string) {
		super(string);
	}

	public NotEnoughExperienceException(String string, Throwable e) {
		super(string, e);
	}
}
<fim_middle>","-
 * #%L
 * Think Machine (Rules)
 * %%
 * Copyright (C) 2017 - 2019 Softwaremagico
 * %%
 * This software is designed by Jorge Hortelano Otero. Jorge Hortelano Otero
 * <softwaremagico@gmail.com> Valencia (Spain).
 *  
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *  
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *  
 * You should have received a copy of the GNU General Public License along with
 * this program; If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>

package com.blobcity.db.requests;

import com.blobcity.db.cluster.ClusterNodesStore;
import com.blobcity.db.cluster.messaging.ClusterMessaging;
import com.blobcity.db.exceptions.ErrorCode;
import com.blobcity.db.exceptions.OperationException;
import com.blobcity.db.master.MasterExecutable;
import com.blobcity.db.master.MasterExecutorService;
import com.blobcity.db.master.MasterStore;<fim_middle>","
 * Copyright (C) 2018 BlobCity Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * Created by <NAME> on 10/10/2016.
 */"
"<fim_prefix>{

            /**
             * Creates a new request registered only on current node. The query object will contain the the requestId of
             * the new request after the operation.
             */
            requestId = requestStore.registerRequest(query);
            query.requestId(requestId);

//        logger.info(""New Request: "" + query.toJsonString());

            /*<fim_suffix>
            query.masterNodeId(ClusterNodesStore.selfId);

            return processRequest(query);

        } finally {
            requestStore.unregisterRequest(requestId);
        }
    }

    public Query newSubRequest(final String parentRequestId, final Query query) {

        String requestId = null;

        try {

            /**
             * Sets the id of the parent requ<fim_middle>", Set the masterNodeId on the query to the current node */,"*
          "
"<fim_prefix>quest(query);

        } finally {
            requestStore.unregisterRequest(requestId);
        }
    }

    public Query newSubRequest(final String parentRequestId, final Query query) {

        String requestId = null;

        try {

            /**
             * Sets the id of the parent request
             */
            query.parentRequestId(parentRequestId);

            /**<fim_suffix>
            requestId = requestStore.registerRequest(query);
            query.requestId(requestId);


            logger.info(""New Sub Request for ("" + parentRequestId + ""): "" + query.toJsonString());

            /* Set the masterNodeId on the query to the current node */
            query.masterNodeId(ClusterNodesStore.selfId);

            return processRequest(query);
        }fi<fim_middle>","
             * Creates a new request registered only on current node. The query object will contain the the requestId of
             * the new request after the operation.
             */","
             * Registers the request
             */"
"<fim_prefix>ates a new request registered only on current node. The query object will contain the the requestId of
             * the new request after the operation.
             */
            requestId = requestStore.registerRequest(query);
            query.requestId(requestId);


            logger.info(""New Sub Request for ("" + parentRequestId + ""): "" + query.toJsonString());

            /*<fim_suffix>
            query.masterNodeId(ClusterNodesStore.selfId);

            return processRequest(query);
        }finally {
            requestStore.unregisterRequest(requestId);
        }
    }

    private Query processRequest(final Query query) {
        MasterExecutable masterExecutable;

        try {
            switch (query.getQueryType()) {
//            case BULK_SELECT:
//     <fim_middle>", Set the masterNodeId on the query to the current node */,"*
          "
"<fim_prefix>tors.schema.*;
import com.blobcity.lib.database.bean.manager.interfaces.engine.RequestStore;
import com.blobcity.lib.query.Query;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

/**<fim_suffix>
@Component
public class RequestHandlingBean {

    private static final Logger logger = LoggerFactory.getLogger(RequestHandlingBean.class.getName());

    @Autowired
    private RequestStore requestStore;
    @Autowired
    private ClusterNodesStore clusterNodesStore;
    @Autowired
    private MasterStore masterStore;
    @Autowired
    private ClusterMessaging clusterMessaging;

   <fim_middle>","
 * @author sanketsarang
 */","
 * Created by <NAME> on 10/"
"<fim_prefix>sterNodeId on the query to the current node */
            query.masterNodeId(ClusterNodesStore.selfId);

            return processRequest(query);

        } finally {
            requestStore.unregisterRequest(requestId);
        }
    }

    public Query newSubRequest(final String parentRequestId, final Query query) {

        String requestId = null;

        try {

            /**<fim_suffix>
            query.parentRequestId(parentRequestId);

            /**
             * Creates a new request registered only on current node. The query object will contain the the requestId of
             * the new request after the operation.
             */
            requestId = requestStore.registerRequest(query);
            query.requestId(requestId);


            logger.info(""N<fim_middle>","
             * Sets the id of the parent request
             */","
             * Creates a new request registered only on current node. The query object will contain the the requestId of
 "
"<fim_prefix>etLogger(RequestHandlingBean.class.getName());

    @Autowired
    private RequestStore requestStore;
    @Autowired
    private ClusterNodesStore clusterNodesStore;
    @Autowired
    private MasterStore masterStore;
    @Autowired
    private ClusterMessaging clusterMessaging;

    public Query newRequest(Query query) {
        String requestId = null;

        try {

            /**<fim_suffix>
            requestId = requestStore.registerRequest(query);
            query.requestId(requestId);

//        logger.info(""New Request: "" + query.toJsonString());

            /* Set the masterNodeId on the query to the current node */
            query.masterNodeId(ClusterNodesStore.selfId);

            return processRequest(query);

        } finally {
            requestStore.un<fim_middle>","
             * Creates a new request registered only on current node. The query object will contain the the requestId of
             * the new request after the operation.
             */", Register the request */
"<fim_prefix>/*<fim_suffix>
package org.eclipse.ditto.policies.model;

import static org.assertj.core.api.Assertions.assertThat;

import org.eclipse.ditto.json.JsonPointer;
import org.junit.Before;
import org.junit.Test;

import nl.jqno.equalsverifier.EqualsVerifier;

/**
 * Unit test for {@link ImmutableResourceKey}.
 */
public final class ImmutableResourceKeyTest {

    private ImmutableResourceKey underTest;
<fim_middle>","
 * Copyright (c) 2017 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","*
 * Unit test for {@link ImmutableResourceKey}.
 */"
"<fim_prefix>erms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.ditto.policies.model;

import static org.assertj.core.api.Assertions.assertThat;

import org.eclipse.ditto.json.JsonPointer;
import org.junit.Before;
import org.junit.Test;

import nl.jqno.equalsverifier.EqualsVerifier;

/**<fim_suffix>
public final class ImmutableResourceKeyTest {

    private ImmutableResourceKey underTest;

    @Before
    public void setUp() {
        underTest = ImmutableResourceKey.newInstance(TestConstants.Policy.RESOURCE_TYPE,
                TestConstants.Policy.RESOURCE_PATH);
    }

    @Test
    public void testHashCodeAndEquals() {
        EqualsVerifier.forClass(ImmutableResourceKey.cla<fim_middle>","
 * Unit test for {@link ImmutableResourceKey}.
 */","
 * @author <a href=""mailto:<EMAIL>""> <NAME> </a"
"<fim_prefix>





//$$strtCprt
/**<fim_suffix>
//$$endCprt







package noise;

import gredit.GNode;
import gredit.GWaveForm;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.HashMap;

import meta.DataFormatException;
import meta.VersionBuffer;
import core.WaveForm;

/**
 * Node representing a waveform approximating smoke density as described in<fim_middle>","
* SndHnd
* 
* Copyright (C) 1992-2020 Thornton Green
* 
* This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
* published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
* of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with this program; if not, 
* see <http://www.gnu.org/licenses>.
* Additional permission under GNU GPL version 3 section 7
*
*/","
 * Start of class definition
 * @author <NAME>
 * @version $Revision: 1.1 $ $Date: 2005/10/26 20:04:59 $
 * @since JDK1.1
 */"
"<fim_prefix>;
import java.io.ObjectOutput;
import java.util.HashMap;

import meta.DataFormatException;
import meta.VersionBuffer;
import core.WaveForm;

/**
 * Node representing a waveform approximating smoke density as described in the book ""Texturing and Modeling"" by David S. Ebert et. al.
 * @author thorngreen
 *
 */
public class GSmokeDensity extends GWaveForm implements Externalizable {

	/**<fim_suffix>
	private GWaveForm chld;
	
	/**
	 * Constructs the node.
	 */
	public GSmokeDensity()
	{
	}

	@Override
	public WaveForm genWave(HashMap s) {
		if( s.get(this) != null )
		{
			return( (WaveForm)( s.get(this) ) );
		}
		
		s.put(this, new Integer(5));
		
		WaveForm w = chld.genWave(s);
		
		WaveForm wv = new SmokeDensityWaveForm(w);
		s.put(this, wv);
		
		return( wv );
	}
	
	/**
	 * <fim_middle>","
	 * The noise to be applied in generating the smoke density.  Typically this would be a lattice noise.
	 */","
	 * 
	 */"
"<fim_prefix>rg/licenses>.
* Additional permission under GNU GPL version 3 section 7
*
*/
//$$endCprt







package noise;

import gredit.GNode;
import gredit.GWaveForm;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.HashMap;

import meta.DataFormatException;
import meta.VersionBuffer;
import core.WaveForm;

/**<fim_suffix>
public class GSmokeDensity extends GWaveForm implements Externalizable {

	/**
	 * The noise to be applied in generating the smoke density.  Typically this would be a lattice noise.
	 */
	private GWaveForm chld;
	
	/**
	 * Constructs the node.
	 */
	public GSmokeDensity()
	{
	}

	@Override
	public WaveForm genWave(HashMap s) {
		if( s.get(this) != null )
		{
			return( (WaveForm)( s.g<fim_middle>","
 * Node representing a waveform approximating smoke density as described in the book ""Texturing and Modeling"" by David S. Ebert et. al.
 * @author thorngreen
 *
 */","
 * A node that generates a smoke density.
 * 
 * @author <NAME>
 * @version $Id: GSmokeDensity.java,v 1.1 2005/09/23 01"
"<fim_prefix>
	 */
	private GWaveForm chld;
	
	/**
	 * Constructs the node.
	 */
	public GSmokeDensity()
	{
	}

	@Override
	public WaveForm genWave(HashMap s) {
		if( s.get(this) != null )
		{
			return( (WaveForm)( s.get(this) ) );
		}
		
		s.put(this, new Integer(5));
		
		WaveForm w = chld.genWave(s);
		
		WaveForm wv = new SmokeDensityWaveForm(w);
		s.put(this, wv);
		
		return( wv );
	}
	
	/**<fim_suffix>
	public void load( GWaveForm in )
	{
		chld = in;
	}

	public Object getChldNodes() {
		return( chld );
	}

	@Override
	public String getName() {
		return( ""Noise -- Smoke Density"" );
	}

	@Override
	public boolean isAssignCompatible(GNode in) {
		return( in instanceof GWaveForm );
	}

	@Override
	public void performAssign(GNode in) {
		chld = (GWaveForm) in;

	}

	@Override
	public v<fim_middle>","
	 * Loads new values into the node.
	 * @param in The noise to be applied in generating the smoke density.  Typically this would be a lattice noise.
	 */","
	 * Loads the node.
	 * @param in
	 */"
"<fim_prefix>
/**
 * Node representing a waveform approximating smoke density as described in the book ""Texturing and Modeling"" by David S. Ebert et. al.
 * @author thorngreen
 *
 */
public class GSmokeDensity extends GWaveForm implements Externalizable {

	/**
	 * The noise to be applied in generating the smoke density.  Typically this would be a lattice noise.
	 */
	private GWaveForm chld;
	
	/**<fim_suffix>
	public GSmokeDensity()
	{
	}

	@Override
	public WaveForm genWave(HashMap s) {
		if( s.get(this) != null )
		{
			return( (WaveForm)( s.get(this) ) );
		}
		
		s.put(this, new Integer(5));
		
		WaveForm w = chld.genWave(s);
		
		WaveForm wv = new SmokeDensityWaveForm(w);
		s.put(this, wv);
		
		return( wv );
	}
	
	/**
	 * Loads new values into the node.
	 * @param in The noise to be <fim_middle>","
	 * Constructs the node.
	 */","
	 * Creates a new node representing a smoke"
"<fim_prefix>/*<fim_suffix>

package net.databinder.models.hib;

import java.io.Serializable;

import org.hibernate.Query;

/**
 * Interface for object that binds Hibernate query parameters to values.
 * @author Nathan Hamblen
 */
public interface QueryBinder extends Serializable {
	/**
	 * Set values for parameters in the query.
	 * @param query Hibernate query
	 */
	void bind(Query query);
}<fim_middle>","
 * Databinder: a simple bridge from Wicket to Hibernate
 * Copyright (C) 2006  Nathan Hamblen nathan@technically.us

 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */","
 * Copyright (C) 2009-2010 the original author or authors.
 * See the notice.md file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix> See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package net.databinder.models.hib;

import java.io.Serializable;

import org.hibernate.Query;

/**<fim_suffix>
public interface QueryBinder extends Serializable {
	/**
	 * Set values for parameters in the query.
	 * @param query Hibernate query
	 */
	void bind(Query query);
}<fim_middle>","
 * Interface for object that binds Hibernate query parameters to values.
 * @author Nathan Hamblen
 */","
 * Interface for objects that bind query parameters.
 * 
 * @author <NAME>
 */"
"<fim_prefix>is library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package net.databinder.models.hib;

import java.io.Serializable;

import org.hibernate.Query;

/**
 * Interface for object that binds Hibernate query parameters to values.
 * @author Nathan Hamblen
 */
public interface QueryBinder extends Serializable {
	/**<fim_suffix>
	void bind(Query query);
}<fim_middle>","
	 * Set values for parameters in the query.
	 * @param query Hibernate query
	 */","
	 * Binds the query parameters to the values.
	 * @param query the query to bind"
"<fim_prefix>/*<fim_suffix>
package com.moviejukebox.model.attachment;

/**
 * A volatile container for content information of an attachment.
 *
 * @author modmax
 */
public class AttachmentContent {

    private final ContentType contentType;
    private final int part;

    public AttachmentContent(ContentType contentType) {
        this(contentType, -1);
    }

    public AttachmentContent(ContentType content<fim_middle>","
 *      Copyright (c) 2004-2016 YAMJ Members
 *      https://github.com/orgs/YAMJ/people
 *
 *      This file is part of the Yet Another Movie Jukebox (YAMJ) project.
 *
 *      YAMJ is free software: you can redistribute it and/or modify
 *      it under the terms of the GNU General Public License as published by
 *      the Free Software Foundation, either version 3 of the License, or
 *      any later version.
 *
 *      YAMJ is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *      GNU General Public License for more details.
 *
 *      You should have received a copy of the GNU General Public License
 *      along with YAMJ.  If not, see <http://www.gnu.org/licenses/>.
 *
 *      Web: https://github.com/YAMJ/yamj-v2
 *
 */","*
 * A volatile container for content information of an attachment.
 *
 * @author modmax
 */"
"<fim_prefix>ied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *      GNU General Public License for more details.
 *
 *      You should have received a copy of the GNU General Public License
 *      along with YAMJ.  If not, see <http://www.gnu.org/licenses/>.
 *
 *      Web: https://github.com/YAMJ/yamj-v2
 *
 */
package com.moviejukebox.model.attachment;

/**<fim_suffix>
public class AttachmentContent {

    private final ContentType contentType;
    private final int part;

    public AttachmentContent(ContentType contentType) {
        this(contentType, -1);
    }

    public AttachmentContent(ContentType contentType, int part) {
        this.contentType = contentType;
        this.part = part;
    }

    public ContentType getContentType() {
      <fim_middle>","
 * A volatile container for content information of an attachment.
 *
 * @author modmax
 */","
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>/*<fim_suffix>
package org.akaza.openclinica.domain.xform;

import java.util.List;

import org.akaza.openclinica.domain.xform.dto.Html;
import org.akaza.openclinica.domain.xform.dto.Text;
import org.akaza.openclinica.domain.xform.dto.Translation;
import org.akaza.openclinica.domain.xform.dto.Value;

public class XformUtils {

    public static String getDefaultTranslation(Html html, Strin<fim_middle>","
 * LibreClinica is distributed under the
 * GNU Lesser General Public License (GNU LGPL).

 * For details see: https://libreclinica.org/license
 * copyright (C) 2003 - 2011 Akaza Research
 * copyright (C) 2003 - 2019 OpenClinica
 * copyright (C) 2020 - 2024 LibreClinica
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>y.NodeService;
import org.alfresco.service.cmr.security.PermissionService;
import org.alfresco.service.namespace.NamespaceService;
import org.apache.http.HttpResponse;
import org.apache.http.client.fluent.Request;
import org.apache.http.util.EntityUtils;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**<fim_suffix>
public class PathTest extends RestV1BaseTest {

    private final static Logger logger = LoggerFactory.getLogger(PathTest.class);

    private final NodeService nodeService;
    private final PermissionService permissionService;
    private final NamespaceService namespaceService;

    public PathTest() {
        // initialise the local beans
        nodeService = serviceRegistry.getN<fim_middle>","
 * Created by kenneth on 16.03.16.
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package dev.upcraft.mesh.mixin.debug.server;

import dev.upcraft.mesh.impl.debug.RegistryDumper;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.server.dedicated.MinecraftDedicatedServer;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.s<fim_middle>","
 * Mesh
 * Copyright (C) 2019-2021 UpcraftLP
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; If not, see <https://www.gnu.org/licenses>.
 */","*
 * @author UpcraftLP
 */"
"<fim_prefix>.impl.debug.RegistryDumper;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.minecraft.server.dedicated.MinecraftDedicatedServer;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

/**<fim_suffix>
@Environment(EnvType.SERVER)
@Mixin(value = MinecraftDedicatedServer.class, priority = 99999)
public class MixinMinecraftDedicatedServer {

    @Inject(method = ""setupServer"", at = @At(""HEAD""))
    private void meshInitCallback(CallbackInfoReturnable<Boolean> cir) {
        RegistryDumper.dumpRegistries();
    }
}
<fim_middle>","
 * THIS CLASS IS ONLY USED IN DEBUG MODE
 */","
 * @author <NAME>
 */"
"<fim_prefix>package eu.essi_lab.profiler.rest.handler.token;

/*<fim_suffix>

import java.util.UUID;

import javax.ws.rs.core.MediaType;

import org.json.JSONObject;

import eu.essi_lab.api.database.DatabaseWriter;
import eu.essi_lab.api.database.factory.DatabaseProviderFactory;
import eu.essi_lab.authorization.rps.GEOSSPrivateWriteRolePolicySet;
import eu.essi_lab.authorization.rps.GEOSSReadRolePolicySet;
import eu.essi_lab.authorization.rps.GEOSSWriteRolePol<fim_middle>","-
 * #%L
 * Discovery and Access Broker (DAB) Community Edition (CE)
 * %%
 * Copyright (C) 2021 - 2024 National Research Council of Italy (CNR)/Institute of Atmospheric Pollution Research (IIA)/ESSI-Lab
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */","*
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>essi_lab.messages.ValidationMessage;
import eu.essi_lab.messages.ValidationMessage.ValidationResult;
import eu.essi_lab.messages.web.KeyValueParser;
import eu.essi_lab.messages.web.WebRequest;
import eu.essi_lab.model.auth.GSUser;
import eu.essi_lab.model.auth.UserIdentifierType;
import eu.essi_lab.model.exceptions.GSException;
import eu.essi_lab.pdk.handler.DefaultRequestHandler;

/**<fim_suffix>
public class TokenGeneratorHandler extends DefaultRequestHandler {

    @Override
    public final String getStringResponse(WebRequest webRequest) throws GSException {

	if (webRequest.isOptionsRequest()) {
	    return """";
	}

	String queryString = webRequest.getQueryString();

	KeyValueParser parser = new KeyValueParser(queryString);

	String role = parser.getValue(""role"");

	return <fim_middle>","
 * @author Fabrizio
 */","
 * This class is used to generate a"
"<fim_prefix> = UUID.randomUUID().toString() + tokenPostfix;

	JSONObject object = new JSONObject();
	object.put(""token"", token);

	//
	//
	//

	GSUser user = new GSUser(token, UserIdentifierType.USER_TOKEN, role);

	DatabaseWriter writer = DatabaseProviderFactory.getDatabaseWriter(ConfigurationWrapper.getDatabaseURI());

	writer.store(user);

	//
	//
	//

	return object.toString(3);
    }

    /**<fim_suffix>
    protected String createXMLResponse(WebRequest webRequest) throws GSException {

	return null;
    }

    @Override
    public MediaType getMediaType(WebRequest webRequest) {

	if (webRequest.isOptionsRequest()) {

	    return null;
	}

	return MediaType.APPLICATION_JSON_TYPE;
    }

    @Override
    public ValidationMessage validate(WebRequest request) throws GSException {

	Vali<fim_middle>","
     * @return
     */","
     * @param webRequest
   "
"<fim_prefix>faultRequestHandler {

    @Override
    public final String getStringResponse(WebRequest webRequest) throws GSException {

	if (webRequest.isOptionsRequest()) {
	    return """";
	}

	String queryString = webRequest.getQueryString();

	KeyValueParser parser = new KeyValueParser(queryString);

	String role = parser.getValue(""role"");

	return generateTokenAndUser(role, """");
    }

    /**<fim_suffix>
    public String generateTokenAndUser(String role, String tokenPostfix) throws GSException {

	String token = UUID.randomUUID().toString() + tokenPostfix;

	JSONObject object = new JSONObject();
	object.put(""token"", token);

	//
	//
	//

	GSUser user = new GSUser(token, UserIdentifierType.USER_TOKEN, role);

	DatabaseWriter writer = DatabaseProviderFactory.getDatabaseWriter(Configura<fim_middle>","
     * @param role
     * @return
     * @throws GSException
     */","
     * Generates a token and user.
     *
     * @param role
     *"
"<fim_prefix>api.util.colour.ColourUtil;
import com.olliem5.ferox.api.util.render.font.FontUtil;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.gui.GuiScreen;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

/**<fim_suffix>

@Mixin(GuiMainMenu.class)
public final class MixinGuiMainMenu extends GuiScreen {
    @Inject(method = ""drawScreen"", at = @At(""TAIL""), cancellable = true)
    public void drawText(int mouseX, int mouseY, float partialTicks, CallbackInfo callbackInfo) {
        FontUtil.drawText(Ferox.NAME_VERSION, 2, 2, ColourUtil.getRainbow().getRGB());
    }
}
<fim_middle>","
 * @author olliem5
 */","
 * Mixin for GuiMainMenu
 */"
"<fim_prefix>package com.techjar.jfos2.client.gui;

/**<fim_suffix>
public enum GUIAlignment {
	TOP_LEFT,
	TOP_RIGHT,
	BOTTOM_LEFT,
	BOTTOM_RIGHT,
	TOP_CENTER,
	BOTTOM_CENTER,
	LEFT_CENTER,
	RIGHT_CENTER,
	CENTER
}
<fim_middle>","
 * @author Techjar
 */","
 *
 * @author Techjar"
"<fim_prefix>/*<fim_suffix>

package org.jpc.emulator.pci;

import org.jpc.emulator.motherboard.IODevice;

/**
 * A PCI device compatible <code>IORegion</code> that is mapped into the io
 * space of the emulated machine.
 * @author Chris Dennis
 */
public interface IOPortIORegion extends IODevice, IORegion
{
}
<fim_middle>","
    JPC: An x86 PC Hardware Emulator for a pure Java Virtual Machine
    Release Version 2.4

    A project from the Physics Dept, The University of Oxford

    Copyright (C) 2007-2010 The University of Oxford

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 2 as published by
    the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
    Details (including contact information) can be found at: 

    jpc.sourceforge.net
    or the developer website
    sourceforge.net/projects/jpc/

    Conceived and Developed by:
    Rhys Newman, Ian Preston, Chris Dennis

    End of licence header
*/","
 * Copyright (c) 2009 Chris Dennis.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE."
"<fim_prefix>Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
    Details (including contact information) can be found at: 

    jpc.sourceforge.net
    or the developer website
    sourceforge.net/projects/jpc/

    Conceived and Developed by:
    Rhys Newman, Ian Preston, Chris Dennis

    End of licence header
*/

package org.jpc.emulator.pci;

import org.jpc.emulator.motherboard.IODevice;

/**<fim_suffix>
public interface IOPortIORegion extends IODevice, IORegion
{
}
<fim_middle>","
 * A PCI device compatible <code>IORegion</code> that is mapped into the io
 * space of the emulated machine.
 * @author Chris Dennis
 */","
 * Represents an IO port.
 * 
 * @author Rhys Newman
 * @author Ian Preston
 * @author Chris Dennis
 */"
"<fim_prefix>mport android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.net.Uri;
import android.os.Environment;
import android.view.View;
import android.widget.Toast;

import java.io.File;
import java.io.FileOutputStream;

/**<fim_suffix>

public class Share {

    Context context;

    public Share(Context context){
        this.context= context;
    }

    public Bitmap getScreenShot(View view) {
        //Snackbar.make(view, ""Hello Snackbar"", Snackbar.LENGTH_LONG).show();
        View screenView = view.getRootView();
        screenView.setDrawingCacheEnabled(true);
        Bitmap bitmap = Bitmap.createBitmap(screenV<fim_middle>","
 * Created by Sittu Agrawal on 21-01-2017.
 */","
 * Created by <NAME> on 10/12/2017.
 */"
"<fim_prefix>/*<fim_suffix>

package com.viaversion.viarewind.legacysupport.feature;

import com.viaversion.viarewind.legacysupport.BukkitPlugin;
import com.viaversion.viarewind.legacysupport.util.NMSUtil;
import com.viaversion.viarewind.legacysupport.util.ReflectionUtil;
import com.viaversion.viaversion.api.Via;
import com.viaversion.viaversion.api.protocol.version.ProtocolVersion;
import org.bukkit.entity.Play<fim_middle>","
 * This file is part of ViaRewind-Legacy-Support - https://github.com/ViaVersion/ViaRewind-Legacy-Support
 * Copyright (C) 2018-2024 ViaVersion and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package org.uci.opus.college.web.extpoint;

/**
 * 
 * @author markus
 *
 */
public abstract class StudyPlanResultFormatterForStudents extends StudyPlanResultFormatter {

}
<fim_middle>","
 * ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 * 
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the ""License""); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an ""AS IS"" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * 
 * The Original Code is Opus-College college module code.
 * 
 * The Initial Developer of the Original Code is
 * Center for Information Services, Radboud University Nijmegen.
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 * 
 * Contributor(s):
 *   For Java files, see Javadoc @author tags.
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the ""GPL""), or
 * the GNU Lesser General Public License Version 2.1 or later (the ""LGPL""),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK *****
*/","*
 * 
 * @author markus
 *
 */"
"<fim_prefix>cate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 * 
 * ***** END LICENSE BLOCK *****
*/

package org.uci.opus.college.web.extpoint;

/**<fim_suffix>
public abstract class StudyPlanResultFormatterForStudents extends StudyPlanResultFormatter {

}
<fim_middle>","
 * 
 * @author markus
 *
 */","
 * 
 * @author <NAME>
 *
"
"<fim_prefix>Context;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import java.lang.reflect.Type;
import java.util.ArrayList;

import biz.dealnote.messenger.api.model.CommentsDto;
import biz.dealnote.messenger.api.model.PhotoSizeDto;
import biz.dealnote.messenger.api.model.VKApiPhoto;

/**<fim_suffix>
public class PhotoDtoAdapter extends AbsAdapter implements JsonDeserializer<VKApiPhoto> {

    @Override
    public VKApiPhoto deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        JsonObject root = json.getAsJsonObject();

        VKApiPhoto photo = new VKApiPhoto();
        photo.id = optInt(root, ""id"");
        photo.alb<fim_middle>","
 * Created by ruslan.kolbasa on 26.12.2016.
 * phoenix
 */","
 * Created by <NAME> on 20.10.16.
 * Copyright © 2016 <NAME>. All rights"
"<fim_prefix>/*<fim_suffix>

package org.jboss.pressgang.ccms.rest.v1.query;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jboss.pressgang.ccms.rest.v1.constants.CommonFilterConstants;
import org.jboss.pressgang.ccms.rest.v1.entities.RESTTagV1;
import org.jboss.pressgang.ccms.rest.v1.entities.contentspec.enums.RESTContentSpecTypeV1;
import org.jbo<fim_middle>","
  Copyright 2011-2014 Red Hat, Inc

  This file is part of PressGang CCMS.

  PressGang CCMS is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  PressGang CCMS is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with PressGang CCMS.  If not, see <http://www.gnu.org/licenses/>.
*/","*
 * @author <NAME>
 *
 */"
"<fim_prefix>crafterlp.jumprace.minigameserver.listener;

import com.voxcrafterlp.jumprace.api.events.ModuleFailEvent;
import com.voxcrafterlp.jumprace.api.events.PlayerReachGoalEvent;
import com.voxcrafterlp.jumprace.utils.ItemManager;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;

import java.util.HashMap;

/**<fim_suffix>

public class PlayerReachGoalListener implements Listener {

    private static final HashMap<Player, Integer> fails = new HashMap<>();

    @EventHandler
    public void onFail(ModuleFailEvent event) {
        final Player player = event.getPlayer();

        if(fails.containsKey(player))
            fails.replace(player, fails.get(player) + 1);
        else
            fails.put(pla<fim_middle>","
 * This file was created by VoxCrafter_LP!
 * Date: 11.08.2021
 * Time: 18:55
 * Project: JumpRace
 */","
 * Created by <NAME> on 2/24/2016.
 */"
"<fim_prefix>  *
     * @param userId The ID of the user to be deleted.
     */
    void deleteUser(int userId);

    /**
     * Retrieves a list of time IDs associated with a specific user.
     *
     * @param userId The ID of the user whose time IDs are to be retrieved.
     * @return A list of time IDs associated with the given user ID.
     */
    List<Integer> getTimeIds(int userId);

    /**<fim_suffix>
    long getJoinTime(int timeId, int userId);

    /**
     * Retrieves the join date for a user identified by the given userId and timeId.
     *
     * @param timeId The ID of the time record.
     * @param userId The ID of the user whose join date is being retrieved.
     * @return The formatted join date string for the specified user and timeId.
     */
    String getJoinDate(int <fim_middle>","
     * Retrieves the join time for a user identified by the given userId and timeId.
     *
     * @param timeId The ID of the time record.
     * @param userId The ID of the user whose join time is being retrieved.
     * @return The join time in milliseconds since epoch for the specified user and timeId.
     */","
     * Retrieves the join time for a user identified by the given userId and timeId.
     *
     * @param timeId The ID of the time record.
     * @param userId The ID of the user whose join time is being retrieved.
     * @return The join time for the specified user and timeId.
     */"
"<fim_prefix>*
     * Logs the join date for a user identified by the given userId.
     *
     * @param userId The ID of the user whose join date is to be recorded
     */
    int createJoinDate(int userId);

    /**
     * Deletes the user identified by the given userId from the system.
     *
     * @param userId The ID of the user to be deleted.
     */
    void deleteUser(int userId);

    /**<fim_suffix>
    List<Integer> getTimeIds(int userId);

    /**
     * Retrieves the join time for a user identified by the given userId and timeId.
     *
     * @param timeId The ID of the time record.
     * @param userId The ID of the user whose join time is being retrieved.
     * @return The join time in milliseconds since epoch for the specified user and timeId.
     */
    long getJoinTime<fim_middle>","
     * Retrieves a list of time IDs associated with a specific user.
     *
     * @param userId The ID of the user whose time IDs are to be retrieved.
     * @return A list of time IDs associated with the given user ID.
     */","
     * Retrieves the user ID for a user identified by the given username.
     *
     * @param username The username of the user whose ID is to be retrieved.
     * @return The ID of the user with the specified username.
     */"
"<fim_prefix>package de.murmelmeister.murmelapi.time;

import java.util.List;

/**
 * JoinLogger interface defines the contract for logging and managing join dates of users.
 */
public sealed interface JoinLogger permits JoinLoggerProvider {
    /**<fim_suffix>
    int createJoinDate(int userId);

    /**
     * Deletes the user identified by the given userId from the system.
     *
     * @param userId The ID of the user to be deleted.
     */
    void deleteUser(int userId);

    /**
     * Retrieves a list of time IDs associated with a specific user.
     *
     * @param userId The ID of the user whose time IDs are to be retrieved.
     *<fim_middle>","
     * Logs the join date for a user identified by the given userId.
     *
     * @param userId The ID of the user whose join date is to be recorded
     */","
     * Retrieves the join date of the user identified by the given userId.
     *
     * @param userId The ID of the user whose join date is to be retrieved.
    "
"<fim_prefix>userId);

    /**
     * Retrieves the join time for a user identified by the given userId and timeId.
     *
     * @param timeId The ID of the time record.
     * @param userId The ID of the user whose join time is being retrieved.
     * @return The join time in milliseconds since epoch for the specified user and timeId.
     */
    long getJoinTime(int timeId, int userId);

    /**<fim_suffix>
    String getJoinDate(int timeId, int userId);
}
<fim_middle>","
     * Retrieves the join date for a user identified by the given userId and timeId.
     *
     * @param timeId The ID of the time record.
     * @param userId The ID of the user whose join date is being retrieved.
     * @return The formatted join date string for the specified user and timeId.
     */","
     * Retrieves the join date for a user identified by the given userId and timeId.
     *
     * @param timeId The ID of the time record.
     * @param userId The ID of the user whose join date is being retrieved.
     * @return The join date in the format ""yyyy-MM-dd HH:mm:ss"" for"
"<fim_prefix>va.util.List;

/**
 * JoinLogger interface defines the contract for logging and managing join dates of users.
 */
public sealed interface JoinLogger permits JoinLoggerProvider {
    /**
     * Logs the join date for a user identified by the given userId.
     *
     * @param userId The ID of the user whose join date is to be recorded
     */
    int createJoinDate(int userId);

    /**<fim_suffix>
    void deleteUser(int userId);

    /**
     * Retrieves a list of time IDs associated with a specific user.
     *
     * @param userId The ID of the user whose time IDs are to be retrieved.
     * @return A list of time IDs associated with the given user ID.
     */
    List<Integer> getTimeIds(int userId);

    /**
     * Retrieves the join time for a user identified by the given<fim_middle>","
     * Deletes the user identified by the given userId from the system.
     *
     * @param userId The ID of the user to be deleted.
     */","
     * Deletes the join date for a user identified by the given userId.
     *
     * @param userId The ID of the user whose join date is to be deleted.
"
"<fim_prefix>package de.murmelmeister.murmelapi.time;

import java.util.List;

/**<fim_suffix>
public sealed interface JoinLogger permits JoinLoggerProvider {
    /**
     * Logs the join date for a user identified by the given userId.
     *
     * @param userId The ID of the user whose join date is to be recorded
     */
    int createJoinDate(int userId);

    /**
     * Deletes the user identified by the given userId from the system.
     *
     * @param userId The ID of th<fim_middle>","
 * JoinLogger interface defines the contract for logging and managing join dates of users.
 */","
 * A service that logs the join date of users.
 */"
"<fim_prefix>/*<fim_suffix>

package org.peerfact.impl.service.aggregation.gossip.messages;

import java.util.List;

import org.peerfact.api.common.Message;
import org.peerfact.impl.service.aggregation.gossip.UpdateInfo;
import org.peerfact.impl.service.aggregation.gossip.UpdateInfoNodeCount;
import org.peerfact.impl.util.Tuple;


/**
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
<fim_middle>","
 * Copyright (c) 2012-2013 Open Source Community - <http://www.peerfact.org>
 * Copyright (c) 2011-2012 University of Paderborn - UPB
 * Copyright (c) 2005-2011 KOM - Multimedia Communications Lab
 *
 * This file is part of PeerfactSim.KOM.
 * 
 * PeerfactSim.KOM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * PeerfactSim.KOM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with PeerfactSim.KOM.  If not, see <http://www.gnu.org/licenses/>.
 *
 */","*
 * @author <NAME>
 * @version 1.0, 03/22/2017
 */"
"<fim_prefix>along with PeerfactSim.KOM.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

package org.peerfact.impl.service.aggregation.gossip.messages;

import java.util.List;

import org.peerfact.api.common.Message;
import org.peerfact.impl.service.aggregation.gossip.UpdateInfo;
import org.peerfact.impl.service.aggregation.gossip.UpdateInfoNodeCount;
import org.peerfact.impl.util.Tuple;


/**<fim_suffix>
public class UpdateResponseMsg extends AbstractUpdateMsg {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5383855226790306209L;

	public UpdateResponseMsg(long epoch,
			List<Tuple<Object, UpdateInfo>> payloadInfo,
			UpdateInfoNodeCount payloadNC) {
		super(epoch, payloadInfo, payloadNC);
	}

	@Override
	public Message getPayload() {
		return this;
	}

}
<fim_middle>","
 *!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * This part of the Simulator is not maintained in the current version of
 * PeerfactSim.KOM. There is no intention of the authors to fix this
 * circumstances, since the changes needed are huge compared to overall benefit.
 * 
 * If you want it to work correctly, you are free to make the specific changes
 * and provide it to the community.
 *!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * 
 * Response message of update requests that carries the current estimations of
 * the responding node to the requesting node.
 * 
 * @author Leo Nobach <peerfact@kom.tu-darmstadt.de>
 * @version 05/06/2011
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
/*******************************************************************************
 * Copyright (c) 2013, 2016 Willink Transformations and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10<fim_middle>","
 * This file was copied and re-packaged automatically by
 *     org.xtext.example.companies.build.GenerateCS2AST
 * from 
 *    ..\..\org.eclipse.qvtd\plugins\org.eclipse.qvtd.runtime\src\org\eclipse\qvtd\runtime\internal\evaluation\LazyInvocationManager.java
 *
 * Do not edit this file. 
 */","****************************************************************************
 * Copyright (c) 2013, 2016 Willink Transformations and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:  Fix copyright  /*"
"<fim_prefix>nies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   E.D.Willink - Initial API and implementation
 *******************************************************************************/
package org.xtext.example.companies.internal.tx;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.ocl.pivot.evaluation.Executor;

/**<fim_suffix>
public class LazyInvocationManager extends AbstractInvocationManagerInternal
{
	public LazyInvocationManager(@NonNull Executor executor) {
		super(executor);
	}
}<fim_middle>","
 * InvocationManager supervises and provides thread safety for the lists of blocked and waiting invocations.
 */","
 * <!-- begin-user-doc -->
 * The <b>Lazy </b> associated with the"
"<fim_prefix>/**
 * This file was copied and re-packaged automatically by
 *     org.xtext.example.companies.build.GenerateCS2AST
 * from 
 *     ..\..\org.eclipse.qvtd\plugins\org.eclipse.qvtd.runtime\src\org\eclipse\qvtd\runtime\internal\evaluation\LazyInvocationManager.java
 *
 * Do not edit this file. 
 */
/**<fim_suffix>
package org.xtext.example.companies.internal.tx;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.ocl.pivot.evaluation.Executor;

/**
 * InvocationManager supervises and provides thread safety for the lists of blocked and waiting invocations.
 */
public class LazyInvocationManager extends AbstractInvocationManagerInternal
{
	public LazyInvocationManager(@NonNull Executor<fim_middle>","*****************************************************************************
 * Copyright (c) 2013, 2016 Willink Transformations and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   E.D.Willink - Initial API and implementation
 *******************************************************************************/","
 * Copyright (c) 2010-2011, Institute of Telematics (<NAME>, <NAME>, <NAME>, <NAME>, <NAME>), University of Luebeck
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 *
 * 	- Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * 	  disclaimer."
"<fim_prefix>/*<fim_suffix>

package com.github.smeny.jpc.emulator.execution.opcodes.rm;

import com.github.smeny.jpc.emulator.execution.*;
import com.github.smeny.jpc.emulator.execution.decoder.*;
import com.github.smeny.jpc.emulator.processor.*;
import com.github.smeny.jpc.emulator.processor.fpu64.*;
import static com.github.smeny.jpc.emulator.processor.Processor.*;

public class fsub_ST1_ST3 extends Executabl<fim_middle>","
    JPC: An x86 PC Hardware Emulator for a pure Java Virtual Machine

    Copyright (C) 2012-2013 Ian Preston

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 2 as published by
    the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
    Details (including contact information) can be found at: 

    jpc.sourceforge.net
    or the developer website
    sourceforge.net/projects/jpc/

    End of licence header
*/","*
 * Subtract ST1 from ST3.
 */"
"<fim_prefix>package javax.slee.facilities;

import javax.slee.ServiceID;
import javax.slee.UnrecognizedServiceException;
import javax.slee.resource.ReceivableService;

/**<fim_suffix>
public interface ServiceLookupFacility {
    /**
     * Get information about the event types that a service may receive.
     * <p>
     * The SLEE need only provide a resource adaptor with information about the event
     * types that the resource adaptor may fire.  Generally this is limited to the
     * resource adaptor types implemented by the resource adaptor.  However a resourc<fim_middle>","
 * The Service Lookup Facility is used by resource adaptors to obtain information about the
 * event types a service may received.  A resource adaptor may obtain an instance of the Event
 * Lookup Facility via the {@link javax.slee.resource.ResourceAdaptorContext#getServiceLookupFacility()}
 * method.
 * @since SLEE 1.1
 */","
 * Facility for looking up services.
 * <p>
 * The SLEE need only provide a facility for looking up services.  Generally this is
 * limited to the facilities implemented by the resource adaptor.  However a resource
 * adaptor may provide facilities for looking up services.
 * <p>
 * The SLEE need only provide a"
"<fim_prefix>Service;

/**
 * The Service Lookup Facility is used by resource adaptors to obtain information about the
 * event types a service may received.  A resource adaptor may obtain an instance of the Event
 * Lookup Facility via the {@link javax.slee.resource.ResourceAdaptorContext#getServiceLookupFacility()}
 * method.
 * @since SLEE 1.1
 */
public interface ServiceLookupFacility {
    /**<fim_suffix>
    public ReceivableService getReceivableService(ServiceID service)
        throws NullPointerException, UnrecognizedServiceException, FacilityException;
}
<fim_middle>","
     * Get information about the event types that a service may receive.
     * <p>
     * The SLEE need only provide a resource adaptor with information about the event
     * types that the resource adaptor may fire.  Generally this is limited to the
     * resource adaptor types implemented by the resource adaptor.  However a resource
     * adaptor may be able to fire events of any type if its deployment descriptor
     * has disabled this limitation, and in such cases the Service Lookup Facility should
     * provide the resource adaptor with information about all the event types that may
     * be received by the service.
     * <p>
     * This method is a non-transactional method.
     * @param service the service component identifier for the service.
     * @return a <code>ReceivableService</code> object that contains information about
     *        the event types that may be received by the service.
     * @throws NullPointerException if <code>service</code> is <code>null</code>.
     * @throws UnrecognizedServiceException if <code>service</code> does not identify a
     *        service installed in the SLEE.
     * @throws FacilityException if the <code>ReceivableService</code> object could not be
     *        obtained due to a system-level failure.
     */","
     * Returns the {@link ReceivableService} for the specified service.
     * @param service the service for which to obtain the {@link ReceivableService}
     * @return the {@link ReceivableService} for the specified service
     * @throws NullPointerException if the specified service is null
     * @throws UnrecognizedServiceException if the specified service is not recognized
     * @throws FacilityException if the service lookup facility encounters an error
     */"
"<fim_prefix>/*<fim_suffix>

package com.caucho.quercus.expr;

import com.caucho.quercus.Location;
import com.caucho.util.L10N;

import java.util.ArrayList;

/**
 * Represents a PHP method call expression from $this.
 */
public class ThisMethodExpr extends ObjectMethodExpr {
  private static final L10N L = new L10N(ThisMethodExpr.class);

  public ThisMethodExpr(Location location, 
                           Thi<fim_middle>","
 * Copyright (c) 1998-2011 Caucho Technology -- all rights reserved
 *
 * This file is part of Resin(R) Open Source
 *
 * Each copy or derived work must preserve the copyright notice and this
 * notice unmodified.
 *
 * Resin Open Source is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Resin Open Source is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty
 * of NON-INFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Resin Open Source; if not, write to the
 *
 *   Free Software Foundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Scott Ferguson
 */","
 * Copyright (c) 2006-2007 <NAME>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License."
"<fim_prefix>ou should have received a copy of the GNU General Public License
 * along with Resin Open Source; if not, write to the
 *
 *   Free Software Foundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Scott Ferguson
 */

package com.caucho.quercus.expr;

import com.caucho.quercus.Location;
import com.caucho.util.L10N;

import java.util.ArrayList;

/**<fim_suffix>
public class ThisMethodExpr extends ObjectMethodExpr {
  private static final L10N L = new L10N(ThisMethodExpr.class);

  public ThisMethodExpr(Location location, 
                           ThisExpr qThis,
                           String methodName, 
                           ArrayList<Expr> args)
  {
    super(location, qThis, methodName, args);
  }

  //
  // java code generatio<fim_middle>","
 * Represents a PHP method call expression from $this.
 */","
 * ThisMethodExpr.
 */"
"<fim_prefix>/*<fim_suffix>
package org.zephyrsoft.trackworktime.util;

/**
 * Represents a method how the {@link FlexibleArrayAdapter} extracts the text from an object.
 */
public interface StringExtractionMethod<T> {

	/**
	 * Extract the text from the given object.
	 */
	String extractText(T object);

}
<fim_middle>","
 * This file is part of TrackWorkTime (TWT).
 * 
 * TWT is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License 3.0 as published by
 * the Free Software Foundation.
 * 
 * TWT is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License 3.0 for more details.
 * 
 * You should have received a copy of the GNU General Public License 3.0
 * along with TWT. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Copyright (c) 2013 <NAME>
 *
 * This file is part of TrackWorkTime.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */"
"<fim_prefix>NU General Public License 3.0 for more details.
 * 
 * You should have received a copy of the GNU General Public License 3.0
 * along with TWT. If not, see <http://www.gnu.org/licenses/>.
 */
package org.zephyrsoft.trackworktime.util;

/**
 * Represents a method how the {@link FlexibleArrayAdapter} extracts the text from an object.
 */
public interface StringExtractionMethod<T> {

	/**<fim_suffix>
	String extractText(T object);

}
<fim_middle>","
	 * Extract the text from the given object.
	 */","
	 * Extracts the text from the given object.
	"
"<fim_prefix>ill be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License 3.0 for more details.
 * 
 * You should have received a copy of the GNU General Public License 3.0
 * along with TWT. If not, see <http://www.gnu.org/licenses/>.
 */
package org.zephyrsoft.trackworktime.util;

/**<fim_suffix>
public interface StringExtractionMethod<T> {

	/**
	 * Extract the text from the given object.
	 */
	String extractText(T object);

}
<fim_middle>","
 * Represents a method how the {@link FlexibleArrayAdapter} extracts the text from an object.
 */","
 * Interface for extracting text from objects.
 * 
 * @author <NAME>
 * @version"
"<fim_prefix>/*<fim_suffix>
package org.jspresso.framework.util.accessor;

import java.lang.reflect.InvocationTargetException;

/**
 * This interface is implemented by any bean value accessor on a collection
 * property.
 *
 * @author Vincent Vandenschrick
 */
public interface ICollectionAccessor extends IAccessor {

  /**
   * Adds the value to the bean property of this accessor.
   *
   * @param target
   *   <fim_middle>","
 * Copyright (c) 2005-2016 Vincent Vandenschrick. All rights reserved.
 *
 *  This file is part of the Jspresso framework.
 *
 *  Jspresso is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Jspresso is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with Jspresso.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * This interface is implemented by any bean value accessor on a collection
 * property.
 *
 * @author Vincent Vandenschrick
 */"
"<fim_prefix>al Public License
 *  along with Jspresso.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jspresso.framework.util.accessor;

import java.lang.reflect.InvocationTargetException;

/**
 * This interface is implemented by any bean value accessor on a collection
 * property.
 *
 * @author Vincent Vandenschrick
 */
public interface ICollectionAccessor extends IAccessor {

  /**<fim_suffix>
  void addToValue(Object target, Object value) throws IllegalAccessException,
      InvocationTargetException, NoSuchMethodException;

  /**
   * Removes the value from the bean property of this accessor.
   *
   * @param target
   *          the target on which to remove the value.
   * @param value
   *          the value to remove.
   * @throws IllegalAccessException
   *          <fim_middle>","
   * Adds the value to the bean property of this accessor.
   *
   * @param target
   *          the target on which to add the value.
   * @param value
   *          the value to add.
   * @throws IllegalAccessException
   *           if the underlying method throws an exception.
   * @throws InvocationTargetException
   *           if this {@code Method} object enforces Java language access
   *           control and the underlying method is inaccessible.
   * @throws NoSuchMethodException
   *           if a matching method is not found.
   */","
   * Adds the value to the bean property of this accessor.
   *
   * @param target
   *          the target on which to add the value.
   * @param value
   *          the value to add.
   * @throws IllegalAccessException
   *           if the target is not accessible.
   * @throws InvocationTargetException
   *           if the target method throws an exception.
   * @throws NoSuchMethodException
   *           if the target method does not exist.
   */"
"<fim_prefix>ranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with Jspresso.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jspresso.framework.util.accessor;

import java.lang.reflect.InvocationTargetException;

/**<fim_suffix>
public interface ICollectionAccessor extends IAccessor {

  /**
   * Adds the value to the bean property of this accessor.
   *
   * @param target
   *          the target on which to add the value.
   * @param value
   *          the value to add.
   * @throws IllegalAccessException
   *           if the underlying method throws an exception.
   * @throws InvocationTargetException
  <fim_middle>","
 * This interface is implemented by any bean value accessor on a collection
 * property.
 *
 * @author Vincent Vandenschrick
 */","
 * Interface for accessor that can add values to a collection.
 *
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix>TargetException
   *           if this {@code Method} object enforces Java language access
   *           control and the underlying method is inaccessible.
   * @throws NoSuchMethodException
   *           if a matching method is not found.
   */
  void addToValue(Object target, Object value) throws IllegalAccessException,
      InvocationTargetException, NoSuchMethodException;

  /**<fim_suffix>
  void removeFromValue(Object target, Object value)
      throws IllegalAccessException, InvocationTargetException,
      NoSuchMethodException;
}
<fim_middle>","
   * Removes the value from the bean property of this accessor.
   *
   * @param target
   *          the target on which to remove the value.
   * @param value
   *          the value to remove.
   * @throws IllegalAccessException
   *           if the underlying method throws an exception.
   * @throws InvocationTargetException
   *           if this {@code Method} object enforces Java language access
   *           control and the underlying method is inaccessible.
   * @throws NoSuchMethodException
   *           if a matching method is not found.
   */","
   * Removes the specified value from the specified target.
   * 
   * @param target
   *          the target object.
   * @param value
   *          the value to remove.
   * @throws IllegalAccessException
   *           if this {@code Method} object enforces Java language access
   *           control and the underlying method is inaccessible.
   * @throws InvocationTargetException
   *           if the underlying method throws an exception.
   * @throws NoSuchMethodException
   *           if a matching method is not found.
   */"
"<fim_prefix>/*<fim_suffix>
package com.mware.core.model.properties.types;

import com.mware.core.util.JSONUtil;
import com.mware.ge.values.storable.NoValue;
import com.mware.ge.values.storable.Value;
import com.mware.ge.values.storable.Values;
import org.json.JSONArray;

public class JsonArrayBcProperty extends BcProperty<JSONArray> {
    public JsonArrayBcProperty(String key) {
        super(key);
    }

    @<fim_middle>","
 * This file is part of the BigConnect project.
 *
 * Copyright (c) 2013-2020 MWARE SOLUTIONS SRL
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED BY
 * MWARE SOLUTIONS SRL, MWARE SOLUTIONS SRL DISCLAIMS THE WARRANTY OF
 * NON INFRINGEMENT OF THIRD PARTY RIGHTS

 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA, or download the license from the following URL:
 * https://www.gnu.org/licenses/agpl-3.0.txt
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the BigConnect software without
 * disclosing the source code of your own applications.
 *
 * These activities include: offering paid services to customers as an ASP,
 * embedding the product in a web application, shipping BigConnect with a
 * closed source product.
 */","*
 * Created by mware on 12/11/16.
 */"
"<fim_prefix>       i % LIST_WIDTH * 40 + 9, (i / LIST_WIDTH - scrollPos) * 20 + 52,
            Block.getBlockFromItem(tex.inventoryStacks[0].getItem()), blockCounts[yLevel],
            tex.inventoryStacks[0].getItemDamage(), yLevels.get(i));
        i++; // Increment i
      }
      if (tex.selectedButton != -1) {
        blockButtons[tex.selectedButton].selected = true;
      }
    }
  }

  /**<fim_suffix>
  private void scroll(int lines) {
    if (lines > 0 && scrollPos < (blockButtons.length - 1) / LIST_WIDTH
        || lines < 0 && scrollPos > 0) {
      scrollPos += lines;
    }
    setButtons();
  }

  @Override
  public void actionPerformed(GuiButton button) {
    super.actionPerformed(button);
    if (button.id == 1) {
      tex.selectedButton = -1;
      InfiniteAlloys.proxy.gfx<fim_middle>","
   * Scroll the block list the specified amount of lines. Positive is down, negative is up.
   */","
   * Scrolls the list up or down.
   * @param lines The number of lines to scroll."
"<fim_prefix>blockButtons.length - 1) / LIST_WIDTH
        || lines < 0 && scrollPos > 0) {
      scrollPos += lines;
    }
    setButtons();
  }

  @Override
  public void actionPerformed(GuiButton button) {
    super.actionPerformed(button);
    if (button.id == 1) {
      tex.selectedButton = -1;
      InfiniteAlloys.proxy.gfxHandler.xrayBlocks.clear();
      tex.startProcess();
    }
  }

  /**<fim_suffix>
  private class BlockButton {

    private final int xPos, yPos;
    private final int width, height;
    private final Block block;
    private final int blockAmount, blockMeta;

    /**
     * The yValue of block that this button represents
     */
    private final int yValue;

    private Background background;
    private boolean selected;

    private BlockButton(int xPos, int y<fim_middle>","
   * A button that represents a type of a block, its y-level, and the quantity of that block in the
   * y-level
   */","
   * A button that represents a block
   */"
"<fim_prefix>util.BlockPos;

import org.lwjgl.input.Mouse;
import org.lwjgl.opengl.GL11;

import java.awt.*;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import infinitealloys.core.InfiniteAlloys;
import infinitealloys.tile.TEEXray;
import infinitealloys.util.Funcs;
import infinitealloys.util.MachineHelper;

public final class GuiXray extends GuiElectric {

  /**<fim_suffix>
  private final int LIST_WIDTH = 4;

  /**
   * The amount of rows of {@link BlockButton BlockButtons} that fit on the scroll menu at once
   */
  private final int LIST_HEIGHT = 5;

  private final TEEXray tex;

  /**
   * The number of the first displayed line of block. Starts from 0 and goes top-down.
   */
  private int scrollPos;

  private BlockButton[] blockButtons = new BlockB<fim_middle>","
   * Thew amount of columns of {@link BlockButton BlockButtons} that fit on the scroll menu at once
   */","
   * The width of the scroll menu
   */"
"<fim_prefix>; // Scroll down
      }
    }
  }

  @Override
  public void handleMouseInput() throws IOException {
    super.handleMouseInput();
    int scrollAmt = Mouse.getEventDWheel();
    // Scroll one line up or down based on the movement, if the list is long enough to need scrolling
    if (blockButtons.length > 20) {
      scroll(scrollAmt > 0 ? -1 : scrollAmt < 0 ? 1 : 0);
    }
  }

  /**<fim_suffix>
  private void setButtons() {
    if (tex.inventoryStacks[0] == null || tee.getProcessProgress() > 0) {
      blockButtons = new BlockButton[0];
    } else {
      int[] blockCounts = new int[tee.getPos().getY()];
      List<Integer> yLevels = new LinkedList<>();

      // For each detected block
      for (BlockPos block : tex.getDetectedBlocks()) {
        // If there hasn't been a <fim_middle>","
   * Set the value of each {@link BlockButton} based on the current search results.
   */","
   * Scrolls the list by the given amount.
   *
   * @param amt The"
"<fim_prefix>st;
import java.util.List;

import infinitealloys.core.InfiniteAlloys;
import infinitealloys.tile.TEEXray;
import infinitealloys.util.Funcs;
import infinitealloys.util.MachineHelper;

public final class GuiXray extends GuiElectric {

  /**
   * Thew amount of columns of {@link BlockButton BlockButtons} that fit on the scroll menu at once
   */
  private final int LIST_WIDTH = 4;

  /**<fim_suffix>
  private final int LIST_HEIGHT = 5;

  private final TEEXray tex;

  /**
   * The number of the first displayed line of block. Starts from 0 and goes top-down.
   */
  private int scrollPos;

  private BlockButton[] blockButtons = new BlockButton[0];
  private GuiButton searchButton;

  public GuiXray(InventoryPlayer inventoryPlayer, TEEXray tileEntity) {
    super(196, 240, inventor<fim_middle>","
   * The amount of rows of {@link BlockButton BlockButtons} that fit on the scroll menu at once
   */",
"<fim_prefix>           new ItemStack(block, blockAmount, blockMeta),
                                            xPos + 19, yPos + 1, Integer.toString(blockAmount));

        GL11.glDisable(GL11.GL_LIGHTING);
      }
    }
  }

  private enum Background {
    BEDROCK(0, 5, 84, 24), STONE(6, 50, 118, 24), DIRT(51, 60, 152, 24),
    GRASS(61, 85, 186, 24), SKY(86, Short.MAX_VALUE, 220, 24);

    /**<fim_suffix>
    int start;
    /**
     * The y-value of the end of the texture's range (inclusive)
     */
    int end;
    /**
     * The texture's location and size in the texture sheet (extras.png)
     */
    Rectangle texture;

    Background(int start, int end, int u, int v) {
      this.start = start;
      this.end = end;
      texture = new Rectangle(u, v, 34, 16);
    }
  }
}
<fim_middle>","
     * The y-value of the start of the texture's range (inclusive)
     */","
     * The y-value of the start of the texture's range (inclusive)
     */"
"<fim_prefix>   xPos + 19, yPos + 1, Integer.toString(blockAmount));

        GL11.glDisable(GL11.GL_LIGHTING);
      }
    }
  }

  private enum Background {
    BEDROCK(0, 5, 84, 24), STONE(6, 50, 118, 24), DIRT(51, 60, 152, 24),
    GRASS(61, 85, 186, 24), SKY(86, Short.MAX_VALUE, 220, 24);

    /**
     * The y-value of the start of the texture's range (inclusive)
     */
    int start;
    /**<fim_suffix>
    int end;
    /**
     * The texture's location and size in the texture sheet (extras.png)
     */
    Rectangle texture;

    Background(int start, int end, int u, int v) {
      this.start = start;
      this.end = end;
      texture = new Rectangle(u, v, 34, 16);
    }
  }
}
<fim_middle>","
     * The y-value of the end of the texture's range (inclusive)
     */","
     * The y-value of the end of the texture's range (exclusive)
     */"
"<fim_prefix>NG);
      }
    }
  }

  private enum Background {
    BEDROCK(0, 5, 84, 24), STONE(6, 50, 118, 24), DIRT(51, 60, 152, 24),
    GRASS(61, 85, 186, 24), SKY(86, Short.MAX_VALUE, 220, 24);

    /**
     * The y-value of the start of the texture's range (inclusive)
     */
    int start;
    /**
     * The y-value of the end of the texture's range (inclusive)
     */
    int end;
    /**<fim_suffix>
    Rectangle texture;

    Background(int start, int end, int u, int v) {
      this.start = start;
      this.end = end;
      texture = new Rectangle(u, v, 34, 16);
    }
  }
}
<fim_middle>","
     * The texture's location and size in the texture sheet (extras.png)
     */","
     * The texture's u-value
     */"
"<fim_prefix>s.proxy.gfxHandler.xrayBlocks.clear();
      tex.startProcess();
    }
  }

  /**
   * A button that represents a type of a block, its y-level, and the quantity of that block in the
   * y-level
   */
  private class BlockButton {

    private final int xPos, yPos;
    private final int width, height;
    private final Block block;
    private final int blockAmount, blockMeta;

    /**<fim_suffix>
    private final int yValue;

    private Background background;
    private boolean selected;

    private BlockButton(int xPos, int yPos, Block block, int blockAmount, int blockMeta,
                        int yValue) {
      this.xPos = xPos;
      this.yPos = yPos;
      this.block = block;
      this.blockAmount = blockAmount;
      this.blockMeta = blockMeta;
      this.yValue<fim_middle>","
     * The yValue of block that this button represents
     */","
     * The y-value of the block button
     */"
"<fim_prefix>elper;

public final class GuiXray extends GuiElectric {

  /**
   * Thew amount of columns of {@link BlockButton BlockButtons} that fit on the scroll menu at once
   */
  private final int LIST_WIDTH = 4;

  /**
   * The amount of rows of {@link BlockButton BlockButtons} that fit on the scroll menu at once
   */
  private final int LIST_HEIGHT = 5;

  private final TEEXray tex;

  /**<fim_suffix>
  private int scrollPos;

  private BlockButton[] blockButtons = new BlockButton[0];
  private GuiButton searchButton;

  public GuiXray(InventoryPlayer inventoryPlayer, TEEXray tileEntity) {
    super(196, 240, inventoryPlayer, tileEntity);
    tex = tileEntity;
    progressBar.setLocation(54, 5);
    networkIcon = new Point(9, 6);
  }

  @Override
  @SuppressWarnings(""unchecked"")
  <fim_middle>","
   * The number of the first displayed line of block. Starts from 0 and goes top-down.
   */","
   * The current scroll position of the scroll menu
   */"
"<fim_prefix>/*<fim_suffix>
package cz.cas.lib.proarc.webapp.server.rest;

import cz.cas.lib.proarc.common.dao.BatchView;
import cz.cas.lib.proarc.webapp.shared.rest.ImportResourceApi;
import java.sql.Timestamp;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;

/**
 * Helper class to annotate {@link BatchView} properties.<fim_middle>","
 * Copyright (C) 2013 Jan Pokorsky
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>s program. If not, see <http://www.gnu.org/licenses/>.
 */
package cz.cas.lib.proarc.webapp.server.rest;

import cz.cas.lib.proarc.common.dao.BatchView;
import cz.cas.lib.proarc.webapp.shared.rest.ImportResourceApi;
import java.sql.Timestamp;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;

/**<fim_suffix>
@javax.xml.bind.annotation.XmlRootElement(name = ImportResourceApi.IMPORT_BATCH_ELEMENT)
@javax.xml.bind.annotation.XmlAccessorType(XmlAccessType.NONE)
public abstract class AnnotatedBatchView extends BatchView {

    @XmlElement(required = true, name = ImportResourceApi.IMPORT_BATCH_ID)
    @Override
    public Integer getId() {
        return super.getId();
    }

    @XmlElement(na<fim_middle>","
 * Helper class to annotate {@link BatchView} properties.
 *
 * @see JacksonProvider
 *
 * @author Jan Pokorsky
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package com.github.smeny.jpc.emulator.execution.opcodes.pm;

import com.github.smeny.jpc.emulator.execution.*;
import com.github.smeny.jpc.emulator.execution.decoder.*;
import com.github.smeny.jpc.emulator.processor.*;
import com.github.smeny.jpc.emulator.processor.fpu64.*;
import static com.github.smeny.jpc.emulator.processor.Processor.*;

public class hlt extends Executable
{
    f<fim_middle>","
    JPC: An x86 PC Hardware Emulator for a pure Java Virtual Machine

    Copyright (C) 2012-2013 Ian Preston

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 2 as published by
    the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
    Details (including contact information) can be found at: 

    jpc.sourceforge.net
    or the developer website
    sourceforge.net/projects/jpc/

    End of licence header
*/","*
 * HLT instruction.
 * 
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix>/*<fim_suffix>

package org.e2immu.analyser.model.expression;

import org.e2immu.analyser.analyser.DV;
import org.e2immu.analyser.analyser.EvaluationResult;
import org.e2immu.analyser.analyser.ForwardEvaluationInfo;
import org.e2immu.analyser.analyser.Property;
import org.e2immu.analyser.model.Identifier;
import org.e2immu.analyser.model.MultiLevel;
import org.e2immu.analyser.model.ParameterizedType<fim_middle>","
 * e2immu: a static code analyser for effective and eventual immutability
 * Copyright 2020-2021, Bart Naudts, https://www.e2immu.org
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details. You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME> (e2immu)
 */"
"<fim_prefix>lientLifecycle;
import cm.aptoide.pt.spotandshare.socket.interfaces.ProgressAccumulator;
import cm.aptoide.pt.spotandshare.socket.util.MultiProgressAccumulator;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.util.List;

import static cm.aptoide.pt.spotandshare.socket.util.FileInfoUtils.computeTotalSize;

/**<fim_suffix>

public class AptoideFileClientSocket<T> extends AptoideClientSocket {

  private final List<FileInfo> fileInfos;

  private T fileDescriptor;
  private FileClientLifecycle<T> fileClientLifecycle;

  public AptoideFileClientSocket(String host, int port, List<FileInfo> fileInfos, int timeout) {
    super(host, port, timeout);
    this.fileInfos = fileInfos;
    // TODO: 24-03-2017 neur<fim_middle>","
 * Created by neuro on 27-01-2017.
 */","
 * Created by Ivan on 10/02/16.
"
"<fim_prefix>/*<fim_suffix>
package com.abissell.cempaka.util;

import java.util.Arrays;
import java.util.EnumSet;

import com.abissell.logutil.Log;
import com.abissell.cempaka.data.CcyPair;

public enum CempakaIOUtil {
    ; // Enum singleton
    public static EnumSet<CcyPair> readCcyPairInput(String purpose) {
        Log.INFO.to(DstSet.APP_STD_OUT, """"""
                                    Enter the space-separ<fim_middle>","
 * cempaka, an algorithmic trading platform written in Java
 * Copyright (C) 2023 Andrew Bissell
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * @author abissell
 */"
"<fim_prefix>/*<fim_suffix>
package cn.jsmod2.api.event.server;

import cn.jsmod2.core.event.Event;

public class UpdateEvent extends Event implements IUpdateEvent{
}
<fim_middle>","
Jsmod2 is a java-based scpsl cn.jsmod2.server initiated by jsmod2.cn.
It needs to rely on smod2 and proxy. jsmod2 is an open source
free plugin that is released under the GNU license. Please read
the GNU open source license before using the software. To understand
the appropriateness, if infringement, will be handled in accordance
with the law, @Copyright Jsmod2 China,more can see <a href=""http://jsmod2.cn"">that<a>
 */","*
 * @author jsmod2
 * @since 2019/4/25
 */"
"<fim_prefix>/*<fim_suffix>

package pj.compiler;

/**
 * This class specifies the extension type
 * for Pyjama compiler code units
 * 
 * @author vikassingh
 * @author Xing Fan
 */
public class CompileChecker {
	
	public enum CompileOption {J2C, J2J, P2J, P2C};
	
	/*
	 * we have a singleton class, should not be
	 * instantiated
	 */
	private CompileChecker(){
		// nothing to do, cannot be instantiated
	}
	
	/*
<fim_middle>","
 * Copyright (C) 2013-2016 Parallel and Reconfigurable Computing Group, University of Auckland.
 *
 * Authors: <http://homepages.engineering.auckland.ac.nz/~parallel/ParallelIT/People.html>
 * 
 * This file is part of Pyjama, a Java implementation of OpenMP-like directive-based 
 * parallelisation compiler and its runtime routines.
 *
 * Pyjama is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Pyjama is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Pyjama. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * This class specifies the extension type
 * for Pyjama compiler code units
 * 
 * @author vikassingh
 * @author Xing Fan
 */"
"<fim_prefix>nits
 * 
 * @author vikassingh
 * @author Xing Fan
 */
public class CompileChecker {
	
	public enum CompileOption {J2C, J2J, P2J, P2C};
	
	/*
	 * we have a singleton class, should not be
	 * instantiated
	 */
	private CompileChecker(){
		// nothing to do, cannot be instantiated
	}
	
	/*
	 * The Pyjama file extension
	 */
	private final static String PYJAMA_FILE_EXTENSION = "".pj"";
	
	/*<fim_suffix>
	private final static String JAVA_FILE_EXTENSION = "".java"";
	
	public static String getPyjamaFileExtension(){
		return PYJAMA_FILE_EXTENSION;
	}
	
	public static String getJavaFileExtension(){
		return JAVA_FILE_EXTENSION;
	}
}
<fim_middle>","
	 * The Java file extension
	 */",
"<fim_prefix>*
 * You should have received a copy of the GNU Lesser General Public License
 * along with Pyjama. If not, see <http://www.gnu.org/licenses/>.
 */

package pj.compiler;

/**
 * This class specifies the extension type
 * for Pyjama compiler code units
 * 
 * @author vikassingh
 * @author Xing Fan
 */
public class CompileChecker {
	
	public enum CompileOption {J2C, J2J, P2J, P2C};
	
	/*<fim_suffix>
	private CompileChecker(){
		// nothing to do, cannot be instantiated
	}
	
	/*
	 * The Pyjama file extension
	 */
	private final static String PYJAMA_FILE_EXTENSION = "".pj"";
	
	/*
	 * The Java file extension
	 */
	private final static String JAVA_FILE_EXTENSION = "".java"";
	
	public static String getPyjamaFileExtension(){
		return PYJAMA_FILE_EXTENSION;
	}
	
	public static String getJa<fim_middle>","
	 * we have a singleton class, should not be
	 * instantiated
	 */","*
	 * Private constructor to prevent instantiation"
"<fim_prefix>/

package pj.compiler;

/**
 * This class specifies the extension type
 * for Pyjama compiler code units
 * 
 * @author vikassingh
 * @author Xing Fan
 */
public class CompileChecker {
	
	public enum CompileOption {J2C, J2J, P2J, P2C};
	
	/*
	 * we have a singleton class, should not be
	 * instantiated
	 */
	private CompileChecker(){
		// nothing to do, cannot be instantiated
	}
	
	/*<fim_suffix>
	private final static String PYJAMA_FILE_EXTENSION = "".pj"";
	
	/*
	 * The Java file extension
	 */
	private final static String JAVA_FILE_EXTENSION = "".java"";
	
	public static String getPyjamaFileExtension(){
		return PYJAMA_FILE_EXTENSION;
	}
	
	public static String getJavaFileExtension(){
		return JAVA_FILE_EXTENSION;
	}
}
<fim_middle>","
	 * The Pyjama file extension
	 */","
	 * The Pyjama file extension
	 */"
"<fim_prefix>pe that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Pyjama. If not, see <http://www.gnu.org/licenses/>.
 */

package pj.compiler;

/**<fim_suffix>
public class CompileChecker {
	
	public enum CompileOption {J2C, J2J, P2J, P2C};
	
	/*
	 * we have a singleton class, should not be
	 * instantiated
	 */
	private CompileChecker(){
		// nothing to do, cannot be instantiated
	}
	
	/*
	 * The Pyjama file extension
	 */
	private final static String PYJAMA_FILE_EXTENSION = "".pj"";
	
	/*
	 * The Java file extension
	 */
	private final stati<fim_middle>","
 * This class specifies the extension type
 * for Pyjama compiler code units
 * 
 * @author vikassingh
 * @author Xing Fan
 */","
 * This class is used to check if the given file is a Pyjama file or not.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package org.solhost.folko.uosl.libuosl.data;

import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;

final class SLDataFile {
    private ByteBuffer mappedFile;

    public SLDataFile(String path, boolean cacheFully) throws IOEx<fim_middle>","*****************************************************************************
 * Copyright (c) 2013 Folke Will <folke.will@gmail.com>
 *
 * This file is part of JPhex.
 *
 * JPhex is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JPhex is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>

package com.patternbox.eclipse.model;

import java.util.*;

/**
 * This class is a container for all properties of a design pattern role.
 *
 * @see com.patternbox.eclipse.model.ManifestXmlHandler
 *
 * @author Dirk Ehms, <a href=""http://www.patternbox.com"">www.patternbox.com</a>
 */
public class RolePropertiesContainer {

   private final List<String> fCommentItemList<fim_middle>","************************** Copyright notice ********************************

Copyright (C) 2003-2012 by Dirk Ehms, http://www.patternbox.com. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

******************************************************************************/","
 * Copyright (c) 2006, <NAME>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the <ORGANIZATION> nor the names of its contributors
 *     may be used to endorse or promote products derived from this software
 *     without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,"
"<fim_prefix>e.model.ManifestXmlHandler
 *
 * @author Dirk Ehms, <a href=""http://www.patternbox.com"">www.patternbox.com</a>
 */
public class RolePropertiesContainer {

   private final List<String> fCommentItemList = new LinkedList<String>();
   private String fName;
   private int fMinOccurence = -1;
   private int fMaxOccurence = -1;
   private String[] fDependenceList = null;

   /**<fim_suffix>
   public String getName() {
      return fName;
   }

   /**
    * @param name Name of the role
    * 
    * @uml.property name=""name""
    */
   public void setName(String name) {
      fName = name;
   }

   /**
    * @return
    * 
    * @uml.property name=""minOccurence""
    */
   public int getMinOccurence() {
      return fMinOccurence;
   }

   /**
    * <fim_middle>","
    * @return Returns name of the role
    * 
    * @uml.property name=""name""
    */","
    * @return
    * 
    * @uml.property name=""commentItemList""
    */"
"<fim_prefix>xOccurence = -1;
   private String[] fDependenceList = null;

   /**
    * @return Returns name of the role
    * 
    * @uml.property name=""name""
    */
   public String getName() {
      return fName;
   }

   /**
    * @param name Name of the role
    * 
    * @uml.property name=""name""
    */
   public void setName(String name) {
      fName = name;
   }

   /**<fim_suffix>
   public int getMinOccurence() {
      return fMinOccurence;
   }

   /**
    * @param min
    * 
    * @uml.property name=""minOccurence""
    */
   public void setMinOccurence(int min) {
      fMinOccurence = min;
   }

   /**
    * @return
    * 
    * @uml.property name=""maxOccurence""
    */
   public int getMaxOccurence() {
      return fMaxOccurence;
   }

<fim_middle>","
    * @return
    * 
    * @uml.property name=""minOccurence""
    */","
    * @return Returns the list of roles that this role depends on
    * 
    * @uml.property name"
"<fim_prefix>{

   private final List<String> fCommentItemList = new LinkedList<String>();
   private String fName;
   private int fMinOccurence = -1;
   private int fMaxOccurence = -1;
   private String[] fDependenceList = null;

   /**
    * @return Returns name of the role
    * 
    * @uml.property name=""name""
    */
   public String getName() {
      return fName;
   }

   /**<fim_suffix>
   public void setName(String name) {
      fName = name;
   }

   /**
    * @return
    * 
    * @uml.property name=""minOccurence""
    */
   public int getMinOccurence() {
      return fMinOccurence;
   }

   /**
    * @param min
    * 
    * @uml.property name=""minOccurence""
    */
   public void setMinOccurence(int min) {
      fMinOccurence = min;
   }

   /<fim_middle>","
    * @param name Name of the role
    * 
    * @uml.property name=""name""
    */","
    * @param name
    * 
    * @uml.property name=""name""
    */"
"<fim_prefix>d setMinOccurence(int min) {
      fMinOccurence = min;
   }

   /**
    * @return
    * 
    * @uml.property name=""maxOccurence""
    */
   public int getMaxOccurence() {
      return fMaxOccurence;
   }

   /**
    * @param max
    * 
    * @uml.property name=""maxOccurence""
    */
   public void setMaxOccurence(int max) {
      fMaxOccurence = max;
   }


   /**<fim_suffix>
   public String[] getDependence() {
      return fDependenceList;
   }

   /**
    * @param roleNameList Enumeration of role names
    */
   public void setDependence(String roleNameList) {

      StringTokenizer tokenizer = new StringTokenizer(roleNameList, "", "");

      fDependenceList = new String[tokenizer.countTokens()];

      for (int i=0; i<fDependenceList.lengt<fim_middle>","
    * @return Array of role names
    */","
    * @return
    * 
   "
"<fim_prefix>m roleNameList Enumeration of role names
    */
   public void setDependence(String roleNameList) {

      StringTokenizer tokenizer = new StringTokenizer(roleNameList, "", "");

      fDependenceList = new String[tokenizer.countTokens()];

      for (int i=0; i<fDependenceList.length; i++) {
         fDependenceList[i] = tokenizer.nextToken();
      }  // for

   }

   /**<fim_suffix>
   public void addCommentItem(String listItem) {
      fCommentItemList.add(listItem);
   }

   /**
    * Returns a list with a collected comment items.
    * @return Comment item list.
    * 
    * @uml.property name=""commentItemList""
    */
   public List<String> getCommentItemList() {
      return fCommentItemList;
   }

}
<fim_middle>","
    * Adds a new comment item. Comments are organized as list items!
    * @param listItem New comment item to add.
    */","
    * Adds a comment item to the list.
    * @param listItem Comment item.
    * 
    * @uml."
"<fim_prefix>   public void setName(String name) {
      fName = name;
   }

   /**
    * @return
    * 
    * @uml.property name=""minOccurence""
    */
   public int getMinOccurence() {
      return fMinOccurence;
   }

   /**
    * @param min
    * 
    * @uml.property name=""minOccurence""
    */
   public void setMinOccurence(int min) {
      fMinOccurence = min;
   }

   /**<fim_suffix>
   public int getMaxOccurence() {
      return fMaxOccurence;
   }

   /**
    * @param max
    * 
    * @uml.property name=""maxOccurence""
    */
   public void setMaxOccurence(int max) {
      fMaxOccurence = max;
   }


   /**
    * @return Array of role names
    */
   public String[] getDependence() {
      return fDependenceList;
   }

   /**
    * @param r<fim_middle>","
    * @return
    * 
    * @uml.property name=""maxOccurence""
    */","
    * @return
    * 
    * @uml.property name=""maxOccurence""
    */"
"<fim_prefix>
    */
   public String getName() {
      return fName;
   }

   /**
    * @param name Name of the role
    * 
    * @uml.property name=""name""
    */
   public void setName(String name) {
      fName = name;
   }

   /**
    * @return
    * 
    * @uml.property name=""minOccurence""
    */
   public int getMinOccurence() {
      return fMinOccurence;
   }

   /**<fim_suffix>
   public void setMinOccurence(int min) {
      fMinOccurence = min;
   }

   /**
    * @return
    * 
    * @uml.property name=""maxOccurence""
    */
   public int getMaxOccurence() {
      return fMaxOccurence;
   }

   /**
    * @param max
    * 
    * @uml.property name=""maxOccurence""
    */
   public void setMaxOccurence(int max) {
      fMaxOccurence = max;
 <fim_middle>","
    * @param min
    * 
    * @uml.property name=""minOccurence""
    */","
    * @param min
    * 
    * @uml.property name=""minOccurence""
    */"
"<fim_prefix>ublic int getMinOccurence() {
      return fMinOccurence;
   }

   /**
    * @param min
    * 
    * @uml.property name=""minOccurence""
    */
   public void setMinOccurence(int min) {
      fMinOccurence = min;
   }

   /**
    * @return
    * 
    * @uml.property name=""maxOccurence""
    */
   public int getMaxOccurence() {
      return fMaxOccurence;
   }

   /**<fim_suffix>
   public void setMaxOccurence(int max) {
      fMaxOccurence = max;
   }


   /**
    * @return Array of role names
    */
   public String[] getDependence() {
      return fDependenceList;
   }

   /**
    * @param roleNameList Enumeration of role names
    */
   public void setDependence(String roleNameList) {

      StringTokenizer tokenizer = new StringTokenizer<fim_middle>","
    * @param max
    * 
    * @uml.property name=""maxOccurence""
    */","
    * @param max
    * 
    * @uml.property name=""maxOccurence""
    */"
"<fim_prefix>OWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.

******************************************************************************/

package com.patternbox.eclipse.model;

import java.util.*;

/**<fim_suffix>
public class RolePropertiesContainer {

   private final List<String> fCommentItemList = new LinkedList<String>();
   private String fName;
   private int fMinOccurence = -1;
   private int fMaxOccurence = -1;
   private String[] fDependenceList = null;

   /**
    * @return Returns name of the role
    * 
    * @uml.property name=""name""
    */
   public String getName()<fim_middle>","
 * This class is a container for all properties of a design pattern role.
 *
 * @see com.patternbox.eclipse.model.ManifestXmlHandler
 *
 * @author Dirk Ehms, <a href=""http://www.patternbox.com"">www.patternbox.com</a>
 */","
 * @author <NAME>
 * 
 * @uml.property name=""commentItemList""
 * @uml.associationEnd multiplicity=""(0 -1)"" elementType=""java.lang.String""
 */"
"<fim_prefix>curence""
    */
   public int getMaxOccurence() {
      return fMaxOccurence;
   }

   /**
    * @param max
    * 
    * @uml.property name=""maxOccurence""
    */
   public void setMaxOccurence(int max) {
      fMaxOccurence = max;
   }


   /**
    * @return Array of role names
    */
   public String[] getDependence() {
      return fDependenceList;
   }

   /**<fim_suffix>
   public void setDependence(String roleNameList) {

      StringTokenizer tokenizer = new StringTokenizer(roleNameList, "", "");

      fDependenceList = new String[tokenizer.countTokens()];

      for (int i=0; i<fDependenceList.length; i++) {
         fDependenceList[i] = tokenizer.nextToken();
      }  // for

   }

   /**
    * Adds a new comment item. Comments are or<fim_middle>","
    * @param roleNameList Enumeration of role names
    */","
    * @param roleNameList
    * 
   "
"<fim_prefix>ntTokens()];

      for (int i=0; i<fDependenceList.length; i++) {
         fDependenceList[i] = tokenizer.nextToken();
      }  // for

   }

   /**
    * Adds a new comment item. Comments are organized as list items!
    * @param listItem New comment item to add.
    */
   public void addCommentItem(String listItem) {
      fCommentItemList.add(listItem);
   }

   /**<fim_suffix>
   public List<String> getCommentItemList() {
      return fCommentItemList;
   }

}
<fim_middle>","
    * Returns a list with a collected comment items.
    * @return Comment item list.
    * 
    * @uml.property name=""commentItemList""
    */","
    * Returns the list of comment items.
    * @return List of comment items.
    */"
"<fim_prefix>/*<fim_suffix>

package com.openmeap.admin.web.backing;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.openmeap.event.ProcessingEvent;
import com.openmeap.event.ProcessingTargets;
import com.openmeap.model.ModelManager;
import com.openmeap.model.dto.Application;
import com.openmeap.model.dto.Deployment;
import<fim_middle>","
 ###############################################################################
 #                                                                             #
 #    Copyright (C) 2011-2016 OpenMEAP, Inc.                                   #
 #    Credits to Jonathan Schang & Rob Thacher                                 #
 #                                                                             #
 #    Released under the LGPLv3                                                #
 #                                                                             #
 #    OpenMEAP is free software: you can redistribute it and/or modify         #
 #    it under the terms of the GNU Lesser General Public License as published #
 #    by the Free Software Foundation, either version 3 of the License, or     #
 #    (at your option) any later version.                                      #
 #                                                                             #
 #    OpenMEAP is distributed in the hope that it will be useful,              #
 #    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
 #    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
 #    GNU Lesser General Public License for more details.                      #
 #                                                                             #
 #    You should have received a copy of the GNU Lesser General Public License #
 #    along with OpenMEAP.  If not, see <http://www.gnu.org/licenses/>.        #
 #                                                                             #
 ###############################################################################
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package ca.rmen.nounours.android.wear;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.support.annotation.VisibleForTesting;
import android.util.Typed<fim_middle>","
 *   Copyright (c) 2015 Carmen Alvarez
 *
 *   This file is part of Nounours for Android.
 *
 *   Nounours for Android is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Nounours for Android is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Nounours for Android.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by rmen on 10/11/15.
 */"
"<fim_prefix>extWidth, textHeight) :
                    getDialNumberPositionInRect(dialNumber, viewWidth, viewHeight, textWidth, textHeight);
            paint.setColor(mDialNumberColor);
            c.drawText(dialNumberLabel,
                    dialNumberPosition.x - textWidth / 2f,
                    dialNumberPosition.y + textHeight / 2f,
                    paint);
        }
    }

    /**<fim_suffix>
    @VisibleForTesting
    static Point getDialNumberPositionInRect(int dialNumber, double screenWidth, double screenHeight, double numberWidth, double numberHeight) {
        double degrees = 90 - (dialNumber * 30);
        Point outerRimPoint = getOuterRimPointInRect(screenWidth - numberWidth, screenHeight - numberHeight, degrees);
        return new Point(outerRimPoint.x + (int) (n<fim_middle>","
     * @param dialNumber   from 1 to 12.
     * @param numberWidth  the width of the image of the dial number
     * @param numberHeight the height of the image of the dial number
     * @return the position of the center of the dial number image, relative to the upper-left corner of the rectangular screen.
     */","
     * Returns the outer rim point of the dial number in the given rect.
     *
     * @param screenWidth                                                         "
"<fim_prefix>lNumber, double screenWidth, double screenHeight, double numberWidth, double numberHeight) {
        double degrees = 90 - (dialNumber * 30);
        Point outerRimPoint = getOuterRimPointInRect(screenWidth - numberWidth, screenHeight - numberHeight, degrees);
        return new Point(outerRimPoint.x + (int) (numberWidth / 2), outerRimPoint.y + (int) (numberHeight / 2));
    }

    /**<fim_suffix>
    @VisibleForTesting
    static Point getOuterRimPointInRect(double screenWidth, double screenHeight, double degrees) {
        // deltaX and deltaY represent the horizontal and vertical distance from the point to the center point in the screen.
        // The values are always positive.

        double deltaX = Math.min(screenWidth / 2, (screenHeight / 2) / Math.abs(Math.tan(Math.t<fim_middle>","
     * @param degrees the angle of rotation about the center of the screen.  For example, for the position of the number ""3"" in an analog watchface, the angle is 0, and for the number ""2"", the angle is 30 degrees.
     * @return the coordinates of the point on the outermost location of the rectangular screen, relative to the upper-left corner of the screen.
     */","
     * Returns the point on the dial that is closest to the center of the screen.
     *
     * @param dialNumber The number of the dial.
     * @param screenWidth The width of the screen.
     * @param screenHeight The height of the screen.
     * @param numberWidth The width of the number.
    "
"<fim_prefix>double numberWidth, double numberHeight) {
        double degrees = 90 - (dialNumber * 30);
        double dialNumberSize = Math.max(numberWidth, numberHeight);
        Point outerRimPoint = getOuterRimPointInCircle(screenWidth - dialNumberSize, degrees);
        return new Point(outerRimPoint.x + (int) (dialNumberSize / 2), outerRimPoint.y + (int) (dialNumberSize / 2));
    }

    /**<fim_suffix>
    @VisibleForTesting
    static Point getOuterRimPointInCircle(double screenWidth, double degrees) {
        // the additional 0.5 is for rounding
        int x = (int) (screenWidth / 2 + (screenWidth / 2) * Math.cos(Math.toRadians(degrees)) + 0.5);
        int y = (int) (screenWidth / 2 - (screenWidth / 2) * Math.sin(Math.toRadians(degrees)) + 0.5);
        return new Point(x, y);
<fim_middle>","
     * @param degrees the angle of rotation about the center of the screen.  For example, for the position of the number ""3"" in an analog watchface, the angle is 0, and for the number ""2"", the angle is 30 degrees.
     * @return the coordinates of the point on the outermost location of the circular screen, relative to the upper-left corner of the screen.
     */","
     * Returns the point on the circle that is the outer rim of the dial.
     *
     * @param screenWidth The width of the screen.
     * @param degrees     The angle of the dial.
     * @return The point on the circle that is the outer rim of the dial.
     */"
"<fim_prefix>) {
            x = screenWidth / 2 - deltaX;
        } else {
            x = screenWidth / 2 + deltaX;
        }
        if (normalizedDegrees < 180) {
            y = screenHeight / 2 - deltaY;
        } else {
            y = screenHeight / 2 + deltaY;
        }

        // The additional 0.5 is for rounding
        return new Point((int) (x + 0.5), (int) (y + 0.5));
    }

    /**<fim_suffix>
    @VisibleForTesting
    static Point getDialNumberPositionInCircle(int dialNumber, double screenWidth, double numberWidth, double numberHeight) {
        double degrees = 90 - (dialNumber * 30);
        double dialNumberSize = Math.max(numberWidth, numberHeight);
        Point outerRimPoint = getOuterRimPointInCircle(screenWidth - dialNumberSize, degrees);
        return new Point(<fim_middle>","
     * @param dialNumber   from 1 to 12.
     * @param numberWidth  the width of the image of the dial number
     * @param numberHeight the height of the image of the dial number
     * @return the position of the center of the dial number image, relative to the upper-left corner of the circular screen.
     */","
     * Returns the point on the circle that is the outer rim of the dial.
     *
     * @param screenWidth The width of the screen.
     * @param degrees     The angle of the dial in degrees.
     * @return The point on the circle that is the outer rim of the dial.
     */"
"<fim_prefix>
import android.graphics.drawable.BitmapDrawable;
import android.support.annotation.VisibleForTesting;
import android.util.TypedValue;

import java.util.Calendar;
import java.util.Locale;

import ca.rmen.nounours.android.common.compat.ResourcesCompat;
import ca.rmen.nounours.android.common.nounours.NounoursRenderer;
import ca.rmen.nounours.android.common.settings.NounoursSettings;

/**<fim_suffix>
class NounoursWatchFaceRenderer extends NounoursRenderer {

    private static final int DIAL_NUMBER_TEXT_SIZE_SP = 18;

    private boolean mIsRound;
    private boolean mIsAmbient;
    private boolean mIsLowBitAmbient;
    private final Paint mBackgroundPaint;
    private final Bitmap mAmbientBitmap;
    private final Bitmap mLowBitAmbientBitmap;
    private final int mDialNumberCol<fim_middle>","
 * Renders nounours both in normal and ambient modes.
 */","
 * Created by rmen on 10/11/17.
"
"<fim_prefix>  */
  public Chassis getChassis() {
    return chassis;
  }

  /**
   * @return The {@link StockComponent}s in this {@link StockLoadout}.
   */
  public List<StockComponent> getComponents() {
    return components;
  }

  /**
   * @return The {@link GuidanceUpgrade} for this {@link StockLoadout}.
   */
  public GuidanceUpgrade getGuidanceType() {
    return guidanceUpgrade;
  }

  /**<fim_suffix>
  public HeatSinkUpgrade getHeatSinkType() {
    return heatSinkUpgrade;
  }

  /**
   * @return The {@link StructureUpgrade} for this {@link StockLoadout}.
   */
  public StructureUpgrade getStructureType() {
    return structureUpgrade;
  }

  @Override
  public String toString() {
    return chassis.getName()
        + "" (""
        + armourUpgrade.getName()
        + "", ""
        +<fim_middle>","
   * @return The {@link HeatSinkUpgrade} for this {@link StockLoadout}.
   */","
   * @return The {@link HeatSinkUpgrade} for this {@link StockLoadout}.
   */"
"<fim_prefix>StockComponent}. Or total armour if the component is
     *     one-sided.
     */
    public int getArmourFront() {
      return armourFront;
    }

    /**
     * @return The {@link Item} IDs that are housed in this {@link StockComponent}.
     */
    public List<Item> getItems() {
      if (items == null) {
        return new ArrayList<>();
      }
      return items;
    }

    /**<fim_suffix>
    public Location getLocation() {
      return location;
    }

    /**
     * @return The omnipod to use for this component or empty if no omnipod is specified.
     */
    public Optional<OmniPod> getOmniPod() {
      return Optional.ofNullable(omniPod);
    }

    @Override
    public String toString() {
      final StringBuilder sb = new StringBuilder();
      sb.append(location<fim_middle>","
     * @return The {@link Location} that defines this {@link StockComponent}.
     */","
     * @return The {@link Location} of this {@link StockComponent}.
     */"
"<fim_prefix> static class StockComponent {
    @XStreamAsAttribute private final ActuatorState actuatorState;
    @XStreamAsAttribute private final Integer armourBack;
    @XStreamAsAttribute private final Integer armourFront;
    @XStreamImplicit private final List<Item> items;
    @XStreamAsAttribute private final Location location;
    @XStreamAsAttribute private final OmniPod omniPod;

    /**<fim_suffix>
    public StockComponent(
        Location aPart,
        int aFront,
        int aBack,
        List<Item> aItems,
        OmniPod aOmniPod,
        ActuatorState aActuatorState) {
      location = aPart;
      armourFront = aFront;
      if (location.isTwoSided()) {
        armourBack = aBack;
      } else {
        armourBack = null;
      }
      items = Collections.unmodifiableL<fim_middle>","
     * Creates a new {@link StockComponent}.
     *
     * @param aPart The {@link Location} that this {@link StockComponent} is for.
     * @param aFront The front armour (or total armour if one-sided).
     * @param aBack The back armour (must be zero if one-sided).
     * @param aItems A {@link List} of items in the component.
     * @param aOmniPod The omnipod to use (or null if none/fixed in chassis)
     * @param aActuatorState The state of the actuators for this component, may be <code>null</code>
     *    .
     */","
     * Constructor.
     *
     * @param aPart the part
     * @param aFront the front armour
     * @param aBack the back armour
     * @param aItems the items
     * @param aOmniPod the omni pod
     * @param aActuatorState the actuator state
     */"
"<fim_prefix>/licenses/>.
 */
package org.lisoft.mwo_data.mechs;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamAsAttribute;
import com.thoughtworks.xstream.annotations.XStreamImplicit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import org.lisoft.mwo_data.equipment.*;

/**<fim_suffix>
@XStreamAlias(""StockLoadout"")
public class StockLoadout {
  /**
   * This immutable class defines a component in a stock loadout.
   *
   * @author Li Song
   */
  @XStreamAlias(""Component"")
  public static class StockComponent {
    @XStreamAsAttribute private final ActuatorState actuatorState;
    @XStreamAsAttribute private final Integer armourBack;
    @XStreamAsAttribute private <fim_middle>","
 * This immutable class defines a stock loadout pattern for a {@link Chassis}.
 *
 * @author Li Song
 */","
 * This immutable class defines a stock loadout.
 *
 * @author Li Song
 */"
"<fim_prefix>bute;
import com.thoughtworks.xstream.annotations.XStreamImplicit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import org.lisoft.mwo_data.equipment.*;

/**
 * This immutable class defines a stock loadout pattern for a {@link Chassis}.
 *
 * @author Li Song
 */
@XStreamAlias(""StockLoadout"")
public class StockLoadout {
  /**<fim_suffix>
  @XStreamAlias(""Component"")
  public static class StockComponent {
    @XStreamAsAttribute private final ActuatorState actuatorState;
    @XStreamAsAttribute private final Integer armourBack;
    @XStreamAsAttribute private final Integer armourFront;
    @XStreamImplicit private final List<Item> items;
    @XStreamAsAttribute private final Location location;
    @XStreamAsAttribute p<fim_middle>","
   * This immutable class defines a component in a stock loadout.
   *
   * @author Li Song
   */","
   * The name of the stock loadout.
   */"
"<fim_prefix>        List<Item> aItems,
        OmniPod aOmniPod,
        ActuatorState aActuatorState) {
      location = aPart;
      armourFront = aFront;
      if (location.isTwoSided()) {
        armourBack = aBack;
      } else {
        armourBack = null;
      }
      items = Collections.unmodifiableList(aItems);
      omniPod = aOmniPod;
      actuatorState = aActuatorState;
    }

    /**<fim_suffix>
    public ActuatorState getActuatorState() {
      return actuatorState;
    }

    /**
     * @return The back armour of this {@link StockComponent}. Will throw if the component is
     *     one-sided.
     */
    public int getArmourBack() {
      return armourBack;
    }

    /**
     * @return The front armour of this {@link StockComponent}. Or total armour if the component is
 <fim_middle>","
     * @return The actuator state for this {@link StockComponent} or <code>null</code> if not
     *     applicable.
     */","
     * @return The location of this {@link StockComponent}.
     */"
"<fim_prefix>uator state for this {@link StockComponent} or <code>null</code> if not
     *     applicable.
     */
    public ActuatorState getActuatorState() {
      return actuatorState;
    }

    /**
     * @return The back armour of this {@link StockComponent}. Will throw if the component is
     *     one-sided.
     */
    public int getArmourBack() {
      return armourBack;
    }

    /**<fim_suffix>
    public int getArmourFront() {
      return armourFront;
    }

    /**
     * @return The {@link Item} IDs that are housed in this {@link StockComponent}.
     */
    public List<Item> getItems() {
      if (items == null) {
        return new ArrayList<>();
      }
      return items;
    }

    /**
     * @return The {@link Location} that defines this {@link StockComponent}.
   <fim_middle>","
     * @return The front armour of this {@link StockComponent}. Or total armour if the component is
     *     one-sided.
     */","
     * @return The front armour of this {@link StockComponent}. Will throw if the component is
     *     one-sided.
     */"
"<fim_prefix>n The back armour of this {@link StockComponent}. Will throw if the component is
     *     one-sided.
     */
    public int getArmourBack() {
      return armourBack;
    }

    /**
     * @return The front armour of this {@link StockComponent}. Or total armour if the component is
     *     one-sided.
     */
    public int getArmourFront() {
      return armourFront;
    }

    /**<fim_suffix>
    public List<Item> getItems() {
      if (items == null) {
        return new ArrayList<>();
      }
      return items;
    }

    /**
     * @return The {@link Location} that defines this {@link StockComponent}.
     */
    public Location getLocation() {
      return location;
    }

    /**
     * @return The omnipod to use for this component or empty if no omnipod is specified<fim_middle>","
     * @return The {@link Item} IDs that are housed in this {@link StockComponent}.
     */","
     * @return The items that are contained in this {@link StockComponent}.
     */"
"<fim_prefix>   * @return The {@link Item} IDs that are housed in this {@link StockComponent}.
     */
    public List<Item> getItems() {
      if (items == null) {
        return new ArrayList<>();
      }
      return items;
    }

    /**
     * @return The {@link Location} that defines this {@link StockComponent}.
     */
    public Location getLocation() {
      return location;
    }

    /**<fim_suffix>
    public Optional<OmniPod> getOmniPod() {
      return Optional.ofNullable(omniPod);
    }

    @Override
    public String toString() {
      final StringBuilder sb = new StringBuilder();
      sb.append(location.shortName());

      sb.append(' ').append(armourFront);
      if (null != armourBack) {
        sb.append(""/"").append(armourBack);
      }
      if (omniPod != null) {
  <fim_middle>","
     * @return The omnipod to use for this component or empty if no omnipod is specified.
     */","
     * @return The {@link OmniPod} that is housed in this {@link StockComponent}.
     */"
"<fim_prefix>sAttribute private final ArmourUpgrade armourUpgrade;
  @XStreamAsAttribute private final Chassis chassis;
  @XStreamImplicit private final List<StockComponent> components;
  @XStreamAsAttribute private final GuidanceUpgrade guidanceUpgrade;
  @XStreamAsAttribute private final HeatSinkUpgrade heatSinkUpgrade;
  @XStreamAsAttribute private final StructureUpgrade structureUpgrade;

  /**<fim_suffix>
  public StockLoadout(
      Chassis aChassis,
      List<StockComponent> aComponents,
      ArmourUpgrade aArmour,
      StructureUpgrade aStructure,
      HeatSinkUpgrade aHeatSink,
      GuidanceUpgrade aGuidance) {
    chassis = aChassis;
    armourUpgrade = aArmour;
    structureUpgrade = aStructure;
    heatSinkUpgrade = aHeatSink;
    guidanceUpgrade = aGuidance;
    components<fim_middle>","
   * Creates a new {@link StockLoadout}
   *
   * @param aChassis The chassis that this loadout was originally for.
   * @param aComponents The list of {@link StockComponent} that make up this {@link StockLoadout}.
   * @param aArmour The armour upgrade type.
   * @param aStructure The structure upgrade type.
   * @param aHeatSink The heat sink upgrade type.
   * @param aGuidance The guidance upgrade type.
   */","
   * Constructor.
   *
   * @param aChassis the chassis
   * @param aComponents the components
   * @param aArmour the armour
   * @param aStructure the structure
   * @param aHeatSink the heat sink
   * @param aGuidance the guidance
   */"
"<fim_prefix>/*<fim_suffix>
package org.lisoft.mwo_data.mechs;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamAsAttribute;
import com.thoughtworks.xstream.annotations.XStreamImplicit;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import org.lisoft.mwo_data.equipment.*;

/**
 * This immutab<fim_middle>","
 * Li Song Mechlab - A'mech building tool for PGI's MechWarrior: Online.
 * Copyright (C) 2013-2023  Li Song
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>st<StockComponent> aComponents,
      ArmourUpgrade aArmour,
      StructureUpgrade aStructure,
      HeatSinkUpgrade aHeatSink,
      GuidanceUpgrade aGuidance) {
    chassis = aChassis;
    armourUpgrade = aArmour;
    structureUpgrade = aStructure;
    heatSinkUpgrade = aHeatSink;
    guidanceUpgrade = aGuidance;
    components = Collections.unmodifiableList(aComponents);
  }

  /**<fim_suffix>
  public ArmourUpgrade getArmourType() {
    return armourUpgrade;
  }

  /**
   * @return The {@link Chassis} for this {@link StockLoadout}.
   */
  public Chassis getChassis() {
    return chassis;
  }

  /**
   * @return The {@link StockComponent}s in this {@link StockLoadout}.
   */
  public List<StockComponent> getComponents() {
    return components;
  }

  /**
   * @return The <fim_middle>","
   * @return The {@link ArmourUpgrade} for this {@link StockLoadout}.
   */","
   * @return The {@link StructureUpgrade} for this {@link StockLoadout}.
   */"
"<fim_prefix>ockLoadout}.
   */
  public ArmourUpgrade getArmourType() {
    return armourUpgrade;
  }

  /**
   * @return The {@link Chassis} for this {@link StockLoadout}.
   */
  public Chassis getChassis() {
    return chassis;
  }

  /**
   * @return The {@link StockComponent}s in this {@link StockLoadout}.
   */
  public List<StockComponent> getComponents() {
    return components;
  }

  /**<fim_suffix>
  public GuidanceUpgrade getGuidanceType() {
    return guidanceUpgrade;
  }

  /**
   * @return The {@link HeatSinkUpgrade} for this {@link StockLoadout}.
   */
  public HeatSinkUpgrade getHeatSinkType() {
    return heatSinkUpgrade;
  }

  /**
   * @return The {@link StructureUpgrade} for this {@link StockLoadout}.
   */
  public StructureUpgrade getStructureType() {
    return stru<fim_middle>","
   * @return The {@link GuidanceUpgrade} for this {@link StockLoadout}.
   */","
   * @return The {@link GuidanceUpgrade} for this {@link StockLoadout}."
"<fim_prefix>ckComponent> getComponents() {
    return components;
  }

  /**
   * @return The {@link GuidanceUpgrade} for this {@link StockLoadout}.
   */
  public GuidanceUpgrade getGuidanceType() {
    return guidanceUpgrade;
  }

  /**
   * @return The {@link HeatSinkUpgrade} for this {@link StockLoadout}.
   */
  public HeatSinkUpgrade getHeatSinkType() {
    return heatSinkUpgrade;
  }

  /**<fim_suffix>
  public StructureUpgrade getStructureType() {
    return structureUpgrade;
  }

  @Override
  public String toString() {
    return chassis.getName()
        + "" (""
        + armourUpgrade.getName()
        + "", ""
        + structureUpgrade.getName()
        + "", ""
        + heatSinkUpgrade.getName()
        + "", ""
        + guidanceUpgrade.getName()
        + "") ""
        + componen<fim_middle>","
   * @return The {@link StructureUpgrade} for this {@link StockLoadout}.
   */","
   * @return The {@link StructureUpgrade} for this {@link StockLoadout}.
   */"
"<fim_prefix>} else {
        armourBack = null;
      }
      items = Collections.unmodifiableList(aItems);
      omniPod = aOmniPod;
      actuatorState = aActuatorState;
    }

    /**
     * @return The actuator state for this {@link StockComponent} or <code>null</code> if not
     *     applicable.
     */
    public ActuatorState getActuatorState() {
      return actuatorState;
    }

    /**<fim_suffix>
    public int getArmourBack() {
      return armourBack;
    }

    /**
     * @return The front armour of this {@link StockComponent}. Or total armour if the component is
     *     one-sided.
     */
    public int getArmourFront() {
      return armourFront;
    }

    /**
     * @return The {@link Item} IDs that are housed in this {@link StockComponent}.
     */
    public List<I<fim_middle>","
     * @return The back armour of this {@link StockComponent}. Will throw if the component is
     *     one-sided.
     */","
     * @return The omnipod of this {@link StockComponent}.
     */"
"<fim_prefix>  guidanceUpgrade = aGuidance;
    components = Collections.unmodifiableList(aComponents);
  }

  /**
   * @return The {@link ArmourUpgrade} for this {@link StockLoadout}.
   */
  public ArmourUpgrade getArmourType() {
    return armourUpgrade;
  }

  /**
   * @return The {@link Chassis} for this {@link StockLoadout}.
   */
  public Chassis getChassis() {
    return chassis;
  }

  /**<fim_suffix>
  public List<StockComponent> getComponents() {
    return components;
  }

  /**
   * @return The {@link GuidanceUpgrade} for this {@link StockLoadout}.
   */
  public GuidanceUpgrade getGuidanceType() {
    return guidanceUpgrade;
  }

  /**
   * @return The {@link HeatSinkUpgrade} for this {@link StockLoadout}.
   */
  public HeatSinkUpgrade getHeatSinkType() {
    return heatSinkU<fim_middle>","
   * @return The {@link StockComponent}s in this {@link StockLoadout}.
   */","
   * @return The {@link EngineUpgrade} for this {@link StockLoadout}.
   */"
"<fim_prefix>idance) {
    chassis = aChassis;
    armourUpgrade = aArmour;
    structureUpgrade = aStructure;
    heatSinkUpgrade = aHeatSink;
    guidanceUpgrade = aGuidance;
    components = Collections.unmodifiableList(aComponents);
  }

  /**
   * @return The {@link ArmourUpgrade} for this {@link StockLoadout}.
   */
  public ArmourUpgrade getArmourType() {
    return armourUpgrade;
  }

  /**<fim_suffix>
  public Chassis getChassis() {
    return chassis;
  }

  /**
   * @return The {@link StockComponent}s in this {@link StockLoadout}.
   */
  public List<StockComponent> getComponents() {
    return components;
  }

  /**
   * @return The {@link GuidanceUpgrade} for this {@link StockLoadout}.
   */
  public GuidanceUpgrade getGuidanceType() {
    return guidanceUpgrade;
  }

  /**
   <fim_middle>","
   * @return The {@link Chassis} for this {@link StockLoadout}.
   */","
   * @return The {@link StructureUpgrade} for this {@link StockLoadout}.
   */"
"<fim_prefix>package io.cruii.model;

import lombok.Data;
import lombok.NoArgsConstructor;

/**<fim_suffix>
@NoArgsConstructor
@Data
public class MangaSignSuccessResponse {
    private Integer code;
    private String msg;
    private Data data;

    @NoArgsConstructor
    @lombok.Data
    public static class Data {
    }
}
<fim_middle>","
 * @author cruii
 * Created on 2023/2/16
 */","
 * @author QiuHao
 */"
"<fim_prefix>package defpackage;

import android.os.IBinder;
import android.os.Parcel;

/*<fim_suffix>
public final class al2 extends i22 implements cl2 {
    public al2(IBinder iBinder) {
        super(iBinder, ""com.google.android.gms.ads.internal.mediation.client.IMediationAdapterListener"");
    }

    @Override // defpackage.cl2
    public final void E() {
        c0(A(), 15);
    }

    @Override // defpackage.cl2
    public final void F() {
        c0(A(), 20);
    }

    @Overrid<fim_middle>", renamed from: al2  reason: default package */, renamed from: al2 reason: default package */
"<fim_prefix>Test;
import org.junit.runner.RunWith;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import info.AAPSMocker;
import info.nightscout.androidaps.MainApp;
import info.nightscout.androidaps.logging.L;
import info.nightscout.androidaps.plugins.general.nsclient.NSUpload;
import info.nightscout.androidaps.utils.SP;

/**<fim_suffix>

@RunWith(PowerMockRunner.class)
@PrepareForTest({MainApp.class, SP.class, L.class, NSUpload.class})
public class MsgHistoryDoneTest {
    @Test
    public void runTest() {
        AAPSMocker.mockMainApp();
        AAPSMocker.mockApplicationContext();
        AAPSMocker.mockSP();
        AAPSMocker.mockL();
        MsgHistoryDone packet = new MsgHistoryDone();
        // nothing left <fim_middle>","
 * Created by Rumen Georgiev on 8/30/2018.
 */","
 * Created by mike on 05.06.2016.
 */"
"<fim_prefix>y.android.fantastischmemo.test.db;


import org.junit.Test;
import org.liberty.android.fantastischmemo.dao.UserDao;
import org.liberty.android.fantastischmemo.entity.User;
import org.liberty.android.fantastischmemo.test.AbstractExistingBaseDBTest;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;

/**<fim_suffix>

public class UserDaoTest  extends AbstractExistingBaseDBTest {

    @Test
    public void testAddUser() throws Exception {
        UserDao userDao = centralDbHelper.getUserDao();
        long count = userDao.countOf();
        User testUser = userDao.createOrReturn(""testUsername"");
        assertEquals(count + 1, userDao.countOf());
        assertEquals(testUser.getUsername(), ""testU<fim_middle>","
 * Created by Emily on 2018-03-03.
 */","
 * Created by shizhefei on 16/2/23"
"<fim_prefix>package edu.ksu.canvas.model;

import edu.ksu.canvas.annotation.CanvasObject;

import java.io.Serializable;
import java.util.Date;
import java.util.Map;

/**<fim_suffix>
@CanvasObject(postKey = ""enrollment_term"")
public class EnrollmentTerm extends BaseCanvasModel implements Serializable {
    private static final long serialVersionUID = 1L;

    private long id;
    private String sisTermId;
    private String name;
    private Date startAt;
    private Date endAt;
    private Date createdAt;
    private String workflowState;
    private Long grading<fim_middle>","
 * Class to represent Canvas enrollment termss.
 * See <a href=""https://canvas.instructure.com/doc/api/enrollment_terms.html"">Canvas Enrollment Terms</a> documentation.
 */","
 * Created by <NAME> on 10/7/15.
 *
 * Copyright 2015 KSU. All rights reserved.
 * This software may be modified and distributed under the terms
 * of the BSD license."
"<fim_prefix>package com.planepanic.game.model;

import java.util.Random;

import com.planepanic.game.gfx.screens.Game;

/**<fim_suffix>
public final class EntryPoint extends SimplePointOfInterest {

	public EntryPoint(Vector2d position) {
		super(position);
	}

	public Plane addPlane(Game game) {
		return Plane.randomPlane(game, new Random(), this.getPosition().clone());
	}

	@Override
	public void draw3d() {
		// Empty.
	}

	@Override
	protected boolean onClick() {
		return false;
	}

	@Override
	protected boolean ke<fim_middle>","
 * A class to represent Entry points.
 * 
 * @author Jonathan, Mantas, Thomas
 */","
 * Represents the starting point of the game.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package net.sf.rails.algorithms;

import java.util.Collection;

import net.sf.rails.game.PublicCompany;
import net.sf.rails.game.RailsRoot;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**<fim_suffix>
public class NetworkAdapter {

    protected static Logger log =
            LoggerFactory.getLogger(NetworkAdapter.class);

    private final RailsRoot root;
    
    private NetworkGraph mapGraph;
    private NetworkGraph routeGraph;
    private NetworkGraph revenueGraph;
    private NetworkMultigraph multiGraph;

    private PublicCompany company;
    private boolean addHQ;
    
  <fim_middle>","
 * This class coordinates the creation of company related graphs
 */","
 * NetworkAdapter is the base class for all network algorithms."
"<fim_prefix>/*<fim_suffix>

package org.geomajas.javascript.api.client.event;

import org.geomajas.annotation.Api;
import org.geomajas.annotation.UserImplemented;
import org.timepedia.exporter.client.Export;
import org.timepedia.exporter.client.ExportClosure;
import org.timepedia.exporter.client.Exportable;

/**
 * Handler for catching events that indicate a widget was selected.
 *
 * @author Youri Flement
 * @<fim_middle>","
 * This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
 *
 * Copyright 2008-2015 Geosparc nv, http://www.geosparc.com/, Belgium.
 *
 * The program is available in open source according to the GNU Affero
 * General Public License. All contributions in this program are covered
 * by the Geomajas Contributors License Agreement. For full licensing
 * details, see LICENSE.txt in the project root.
 */","*
 * Handler for catching events that indicate a widget was selected.
 *
 * @author Youri Flement
 * @author <NAME>
 */"
"<fim_prefix>exporter.client.Export;
import org.timepedia.exporter.client.ExportClosure;
import org.timepedia.exporter.client.Exportable;

/**
 * Handler for catching events that indicate a widget was selected.
 *
 * @author Youri Flement
 * @since 1.0.0
 */
@Export
@ExportClosure
@Api(allMethods = true)
@UserImplemented
public interface JsMarkerSelectedHandler extends JsHandler, Exportable {

	/**<fim_suffix>
	void onWidgetSelected(JsMarkerSelectedEvent jsWidgetEvent);

}
<fim_middle>","
	 * Called when a widget was selected.
	 *
	 * @param jsWidgetEvent The event.
	 */","
	 * Called when a widget was selected.
	 *
	 * @param jsWidgetEvent the event
	 */"
"<fim_prefix>ntributors License Agreement. For full licensing
 * details, see LICENSE.txt in the project root.
 */

package org.geomajas.javascript.api.client.event;

import org.geomajas.annotation.Api;
import org.geomajas.annotation.UserImplemented;
import org.timepedia.exporter.client.Export;
import org.timepedia.exporter.client.ExportClosure;
import org.timepedia.exporter.client.Exportable;

/**<fim_suffix>
@Export
@ExportClosure
@Api(allMethods = true)
@UserImplemented
public interface JsMarkerSelectedHandler extends JsHandler, Exportable {

	/**
	 * Called when a widget was selected.
	 *
	 * @param jsWidgetEvent The event.
	 */
	void onWidgetSelected(JsMarkerSelectedEvent jsWidgetEvent);

}
<fim_middle>","
 * Handler for catching events that indicate a widget was selected.
 *
 * @author Youri Flement
 * @since 1.0.0
 */","
 * Marker selected event handler.
 *
 * @author <NAME>
 */"
"<fim_prefix> users
 * list on node.
 * 
 * @author hokam.chauhan
 * 
 */
public class NodeUpTimeInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** The up time. */
	private Double upTime;
	
	/** The logged users. */
	private String loggedUsers;
	
	/** The load average1. */
	private Double loadAverage1; // Last 1 min
	
	/**<fim_suffix>
	private Double loadAverage2; // Last 5 min
	
	/** The load average3. */
	private Double loadAverage3; // Last 15 min
	
	/** The cpu usage. */
	private Double cpuUsage = 0D; // cpu usage in percent

	/**
	 * Gets the up time.
	 *
	 * @return the upTime
	 */
	public Double getUpTime() {
		return upTime;
	}

	/**
	 * Sets the up time.
	 *
	 * @param upTime the upTime to set
	 */
	public<fim_middle>", The load average2. */, The load average2. */
"<fim_prefix> getLoadAverage3() {
		return loadAverage3;
	}

	/**
	 * Sets the load average3.
	 *
	 * @param loadAverage3 the loadAverage3 to set
	 */
	public void setLoadAverage3(Double loadAverage3) {
		this.loadAverage3 = loadAverage3;
	}

	/**
	 * Sets the cpu usage.
	 *
	 * @param cpuUsage the cpuUsage to set
	 */
	public void setCpuUsage(Double cpuUsage) {
		this.cpuUsage = cpuUsage;
	}

	/**<fim_suffix>
	public Double getCpuUsage() {
		return cpuUsage;
	}
}
<fim_middle>","
	 * Gets the cpu usage.
	 *
	 * @return the cpuUsage
	 */","
	 * Gets the cpu usage.
	 *
	 * @return the cpuUsage
	 */"
"<fim_prefix>ve received a copy of the GNU Lesser General Public License 
 * along with this software; if not, write to the Free Software Foundation, 
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 ******************************************************************************/
/**
 * 
 */
package com.impetus.ankush.common.framework.config;

import java.io.Serializable;

/**<fim_suffix>
public class NodeUpTimeInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** The up time. */
	private Double upTime;
	
	/** The logged users. */
	private String loggedUsers;
	
	/** The load average1. */
	private Double loadAverage1; // Last 1 min
	
	/** The load average2. */
	private Double loadAverage2; // Last<fim_middle>","
 * It contains the information about average load, cpu usage and logged in users
 * list on node.
 * 
 * @author hokam.chauhan
 * 
 */","
 * The Class NodeUpTimeInfo.
 */"
"<fim_prefix>/
	private Double upTime;
	
	/** The logged users. */
	private String loggedUsers;
	
	/** The load average1. */
	private Double loadAverage1; // Last 1 min
	
	/** The load average2. */
	private Double loadAverage2; // Last 5 min
	
	/** The load average3. */
	private Double loadAverage3; // Last 15 min
	
	/** The cpu usage. */
	private Double cpuUsage = 0D; // cpu usage in percent

	/**<fim_suffix>
	public Double getUpTime() {
		return upTime;
	}

	/**
	 * Sets the up time.
	 *
	 * @param upTime the upTime to set
	 */
	public void setUpTime(Double upTime) {
		this.upTime = upTime;
	}

	/**
	 * Gets the logged users.
	 *
	 * @return the loggedUsers
	 */
	public String getLoggedUsers() {
		return loggedUsers;
	}

	/**
	 * Sets the logged users.
	 *
	 * @param loggedUsers the logge<fim_middle>","
	 * Gets the up time.
	 *
	 * @return the upTime
	 */","
	 * Gets the up time.
	 *
	 * @return the upTime
	 */"
"<fim_prefix>rage1(Double loadAverage1) {
		this.loadAverage1 = loadAverage1;
	}

	/**
	 * Gets the load average2.
	 *
	 * @return the loadAverage2
	 */
	public Double getLoadAverage2() {
		return loadAverage2;
	}

	/**
	 * Sets the load average2.
	 *
	 * @param loadAverage2 the loadAverage2 to set
	 */
	public void setLoadAverage2(Double loadAverage2) {
		this.loadAverage2 = loadAverage2;
	}

	/**<fim_suffix>
	public Double getLoadAverage3() {
		return loadAverage3;
	}

	/**
	 * Sets the load average3.
	 *
	 * @param loadAverage3 the loadAverage3 to set
	 */
	public void setLoadAverage3(Double loadAverage3) {
		this.loadAverage3 = loadAverage3;
	}

	/**
	 * Sets the cpu usage.
	 *
	 * @param cpuUsage the cpuUsage to set
	 */
	public void setCpuUsage(Double cpuUsage) {
		this.cpuUsage = cpu<fim_middle>","
	 * Gets the load average3.
	 *
	 * @return the loadAverage3
	 */","
	 * Gets the load average3.
	 *
	 * @return the loadAverage3
	 */"
"<fim_prefix>oggedUsers
	 */
	public String getLoggedUsers() {
		return loggedUsers;
	}

	/**
	 * Sets the logged users.
	 *
	 * @param loggedUsers the loggedUsers to set
	 */
	public void setLoggedUsers(String loggedUsers) {
		this.loggedUsers = loggedUsers;
	}

	/**
	 * Gets the load average1.
	 *
	 * @return the loadAverage1
	 */
	public Double getLoadAverage1() {
		return loadAverage1;
	}

	/**<fim_suffix>
	public void setLoadAverage1(Double loadAverage1) {
		this.loadAverage1 = loadAverage1;
	}

	/**
	 * Gets the load average2.
	 *
	 * @return the loadAverage2
	 */
	public Double getLoadAverage2() {
		return loadAverage2;
	}

	/**
	 * Sets the load average2.
	 *
	 * @param loadAverage2 the loadAverage2 to set
	 */
	public void setLoadAverage2(Double loadAverage2) {
		this.loadAverage2 <fim_middle>","
	 * Sets the load average1.
	 *
	 * @param loadAverage1 the loadAverage1 to set
	 */","
	 * Sets the load average1.
	 *
	 * @param loadAverage1 the loadAverage1 to set
	 */"
"<fim_prefix>rage2(Double loadAverage2) {
		this.loadAverage2 = loadAverage2;
	}

	/**
	 * Gets the load average3.
	 *
	 * @return the loadAverage3
	 */
	public Double getLoadAverage3() {
		return loadAverage3;
	}

	/**
	 * Sets the load average3.
	 *
	 * @param loadAverage3 the loadAverage3 to set
	 */
	public void setLoadAverage3(Double loadAverage3) {
		this.loadAverage3 = loadAverage3;
	}

	/**<fim_suffix>
	public void setCpuUsage(Double cpuUsage) {
		this.cpuUsage = cpuUsage;
	}

	/**
	 * Gets the cpu usage.
	 *
	 * @return the cpuUsage
	 */
	public Double getCpuUsage() {
		return cpuUsage;
	}
}
<fim_middle>","
	 * Sets the cpu usage.
	 *
	 * @param cpuUsage the cpuUsage to set
	 */","
	 * Gets the cpu usage.
	 *
	 * @param cpuUsage the cpuUsage to set
	 */"
"<fim_prefix>**/
/**
 * 
 */
package com.impetus.ankush.common.framework.config;

import java.io.Serializable;

/**
 * It contains the information about average load, cpu usage and logged in users
 * list on node.
 * 
 * @author hokam.chauhan
 * 
 */
public class NodeUpTimeInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/**<fim_suffix>
	private Double upTime;
	
	/** The logged users. */
	private String loggedUsers;
	
	/** The load average1. */
	private Double loadAverage1; // Last 1 min
	
	/** The load average2. */
	private Double loadAverage2; // Last 5 min
	
	/** The load average3. */
	private Double loadAverage3; // Last 15 min
	
	/** The cpu usage. */
	private Double cpuUsage = 0D; // cpu usage in percent

	/**
<fim_middle>", The up time. */, The up time. */
"<fim_prefix>on.framework.config;

import java.io.Serializable;

/**
 * It contains the information about average load, cpu usage and logged in users
 * list on node.
 * 
 * @author hokam.chauhan
 * 
 */
public class NodeUpTimeInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** The up time. */
	private Double upTime;
	
	/**<fim_suffix>
	private String loggedUsers;
	
	/** The load average1. */
	private Double loadAverage1; // Last 1 min
	
	/** The load average2. */
	private Double loadAverage2; // Last 5 min
	
	/** The load average3. */
	private Double loadAverage3; // Last 15 min
	
	/** The cpu usage. */
	private Double cpuUsage = 0D; // cpu usage in percent

	/**
	 * Gets the up time.
	 *
	 * @return the upTime
	 *<fim_middle>", The logged users. */, The logged users. */
"<fim_prefix>* It contains the information about average load, cpu usage and logged in users
 * list on node.
 * 
 * @author hokam.chauhan
 * 
 */
public class NodeUpTimeInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** The up time. */
	private Double upTime;
	
	/** The logged users. */
	private String loggedUsers;
	
	/**<fim_suffix>
	private Double loadAverage1; // Last 1 min
	
	/** The load average2. */
	private Double loadAverage2; // Last 5 min
	
	/** The load average3. */
	private Double loadAverage3; // Last 15 min
	
	/** The cpu usage. */
	private Double cpuUsage = 0D; // cpu usage in percent

	/**
	 * Gets the up time.
	 *
	 * @return the upTime
	 */
	public Double getUpTime() {
		return upTime;
	}

	/**
	<fim_middle>", The load average1. */, The load average1. */
"<fim_prefix>to set
	 */
	public void setUpTime(Double upTime) {
		this.upTime = upTime;
	}

	/**
	 * Gets the logged users.
	 *
	 * @return the loggedUsers
	 */
	public String getLoggedUsers() {
		return loggedUsers;
	}

	/**
	 * Sets the logged users.
	 *
	 * @param loggedUsers the loggedUsers to set
	 */
	public void setLoggedUsers(String loggedUsers) {
		this.loggedUsers = loggedUsers;
	}

	/**<fim_suffix>
	public Double getLoadAverage1() {
		return loadAverage1;
	}

	/**
	 * Sets the load average1.
	 *
	 * @param loadAverage1 the loadAverage1 to set
	 */
	public void setLoadAverage1(Double loadAverage1) {
		this.loadAverage1 = loadAverage1;
	}

	/**
	 * Gets the load average2.
	 *
	 * @return the loadAverage2
	 */
	public Double getLoadAverage2() {
		return loadAverage2;
	}

	/**
	 * S<fim_middle>","
	 * Gets the load average1.
	 *
	 * @return the loadAverage1
	 */","
	 * Gets the load average1.
	 *
	 * @return the loadAverage1"
"<fim_prefix> NodeUpTimeInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** The up time. */
	private Double upTime;
	
	/** The logged users. */
	private String loggedUsers;
	
	/** The load average1. */
	private Double loadAverage1; // Last 1 min
	
	/** The load average2. */
	private Double loadAverage2; // Last 5 min
	
	/**<fim_suffix>
	private Double loadAverage3; // Last 15 min
	
	/** The cpu usage. */
	private Double cpuUsage = 0D; // cpu usage in percent

	/**
	 * Gets the up time.
	 *
	 * @return the upTime
	 */
	public Double getUpTime() {
		return upTime;
	}

	/**
	 * Sets the up time.
	 *
	 * @param upTime the upTime to set
	 */
	public void setUpTime(Double upTime) {
		this.upTime = upTime;
	}

	/**
	 * Get<fim_middle>", The load average3. */, The load average3. */
"<fim_prefix>10-1301, USA.
 ******************************************************************************/
/**
 * 
 */
package com.impetus.ankush.common.framework.config;

import java.io.Serializable;

/**
 * It contains the information about average load, cpu usage and logged in users
 * list on node.
 * 
 * @author hokam.chauhan
 * 
 */
public class NodeUpTimeInfo implements Serializable {

	/**<fim_suffix>
	private static final long serialVersionUID = 1L;
	
	/** The up time. */
	private Double upTime;
	
	/** The logged users. */
	private String loggedUsers;
	
	/** The load average1. */
	private Double loadAverage1; // Last 1 min
	
	/** The load average2. */
	private Double loadAverage2; // Last 5 min
	
	/** The load average3. */
	private Double loadAverage3; // Last 15 min
	
	/** The cp<fim_middle>", The Constant serialVersionUID. */,"
	 * 
"
"<fim_prefix>gedUsers(String loggedUsers) {
		this.loggedUsers = loggedUsers;
	}

	/**
	 * Gets the load average1.
	 *
	 * @return the loadAverage1
	 */
	public Double getLoadAverage1() {
		return loadAverage1;
	}

	/**
	 * Sets the load average1.
	 *
	 * @param loadAverage1 the loadAverage1 to set
	 */
	public void setLoadAverage1(Double loadAverage1) {
		this.loadAverage1 = loadAverage1;
	}

	/**<fim_suffix>
	public Double getLoadAverage2() {
		return loadAverage2;
	}

	/**
	 * Sets the load average2.
	 *
	 * @param loadAverage2 the loadAverage2 to set
	 */
	public void setLoadAverage2(Double loadAverage2) {
		this.loadAverage2 = loadAverage2;
	}

	/**
	 * Gets the load average3.
	 *
	 * @return the loadAverage3
	 */
	public Double getLoadAverage3() {
		return loadAverage3;
	}

	/**
	 * S<fim_middle>","
	 * Gets the load average2.
	 *
	 * @return the loadAverage2
	 */","
	 * Gets the load average2.
	 *
	 * @return the loadAverage2
	 */"
"<fim_prefix>UID. */
	private static final long serialVersionUID = 1L;
	
	/** The up time. */
	private Double upTime;
	
	/** The logged users. */
	private String loggedUsers;
	
	/** The load average1. */
	private Double loadAverage1; // Last 1 min
	
	/** The load average2. */
	private Double loadAverage2; // Last 5 min
	
	/** The load average3. */
	private Double loadAverage3; // Last 15 min
	
	/**<fim_suffix>
	private Double cpuUsage = 0D; // cpu usage in percent

	/**
	 * Gets the up time.
	 *
	 * @return the upTime
	 */
	public Double getUpTime() {
		return upTime;
	}

	/**
	 * Sets the up time.
	 *
	 * @param upTime the upTime to set
	 */
	public void setUpTime(Double upTime) {
		this.upTime = upTime;
	}

	/**
	 * Gets the logged users.
	 *
	 * @return the loggedUsers
	 */
	public Strin<fim_middle>", The cpu usage. */, The load average4.
"<fim_prefix>age3. */
	private Double loadAverage3; // Last 15 min
	
	/** The cpu usage. */
	private Double cpuUsage = 0D; // cpu usage in percent

	/**
	 * Gets the up time.
	 *
	 * @return the upTime
	 */
	public Double getUpTime() {
		return upTime;
	}

	/**
	 * Sets the up time.
	 *
	 * @param upTime the upTime to set
	 */
	public void setUpTime(Double upTime) {
		this.upTime = upTime;
	}

	/**<fim_suffix>
	public String getLoggedUsers() {
		return loggedUsers;
	}

	/**
	 * Sets the logged users.
	 *
	 * @param loggedUsers the loggedUsers to set
	 */
	public void setLoggedUsers(String loggedUsers) {
		this.loggedUsers = loggedUsers;
	}

	/**
	 * Gets the load average1.
	 *
	 * @return the loadAverage1
	 */
	public Double getLoadAverage1() {
		return loadAverage1;
	}

	/**
	 * Sets the l<fim_middle>","
	 * Gets the logged users.
	 *
	 * @return the loggedUsers
	 */","
	 * Gets the load average5.
	 *
	 * @return the loadAverage5
"
"<fim_prefix>/**<fim_suffix>
/**
 * 
 */
package com.impetus.ankush.common.framework.config;

import java.io.Serializable;

/**
 * It contains the information about average load, cpu usage and logged in users
 * list on node.
 * 
 * @author hokam.chauhan
 * 
 */
public class NodeUpTimeInfo implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** Th<fim_middle>","*****************************************************************************
 * ===========================================================
 * Ankush : Big Data Cluster Management Solution
 * ===========================================================
 * 
 * (C) Copyright 2014, by Impetus Technologies
 * 
 * This is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License (LGPL v3) as
 * published by the Free Software Foundation;
 * 
 * This software is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this software; if not, write to the Free Software Foundation, 
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 ******************************************************************************/","
 * 
 */"
"<fim_prefix>2
	 */
	public Double getLoadAverage2() {
		return loadAverage2;
	}

	/**
	 * Sets the load average2.
	 *
	 * @param loadAverage2 the loadAverage2 to set
	 */
	public void setLoadAverage2(Double loadAverage2) {
		this.loadAverage2 = loadAverage2;
	}

	/**
	 * Gets the load average3.
	 *
	 * @return the loadAverage3
	 */
	public Double getLoadAverage3() {
		return loadAverage3;
	}

	/**<fim_suffix>
	public void setLoadAverage3(Double loadAverage3) {
		this.loadAverage3 = loadAverage3;
	}

	/**
	 * Sets the cpu usage.
	 *
	 * @param cpuUsage the cpuUsage to set
	 */
	public void setCpuUsage(Double cpuUsage) {
		this.cpuUsage = cpuUsage;
	}

	/**
	 * Gets the cpu usage.
	 *
	 * @return the cpuUsage
	 */
	public Double getCpuUsage() {
		return cpuUsage;
	}
}
<fim_middle>","
	 * Sets the load average3.
	 *
	 * @param loadAverage3 the loadAverage3 to set
	 */","
	 * Sets the load average3.
	 *
	 * @param loadAverage3 the loadAverage3 to set
	 */"
"<fim_prefix>cent

	/**
	 * Gets the up time.
	 *
	 * @return the upTime
	 */
	public Double getUpTime() {
		return upTime;
	}

	/**
	 * Sets the up time.
	 *
	 * @param upTime the upTime to set
	 */
	public void setUpTime(Double upTime) {
		this.upTime = upTime;
	}

	/**
	 * Gets the logged users.
	 *
	 * @return the loggedUsers
	 */
	public String getLoggedUsers() {
		return loggedUsers;
	}

	/**<fim_suffix>
	public void setLoggedUsers(String loggedUsers) {
		this.loggedUsers = loggedUsers;
	}

	/**
	 * Gets the load average1.
	 *
	 * @return the loadAverage1
	 */
	public Double getLoadAverage1() {
		return loadAverage1;
	}

	/**
	 * Sets the load average1.
	 *
	 * @param loadAverage1 the loadAverage1 to set
	 */
	public void setLoadAverage1(Double loadAverage1) {
		this.loadAverage1 = lo<fim_middle>","
	 * Sets the logged users.
	 *
	 * @param loggedUsers the loggedUsers to set
	 */","
	 * Sets the logged users.
	 *
	 * @param loggedUsers the loggedUsers to set
	 */"
"<fim_prefix>1
	 */
	public Double getLoadAverage1() {
		return loadAverage1;
	}

	/**
	 * Sets the load average1.
	 *
	 * @param loadAverage1 the loadAverage1 to set
	 */
	public void setLoadAverage1(Double loadAverage1) {
		this.loadAverage1 = loadAverage1;
	}

	/**
	 * Gets the load average2.
	 *
	 * @return the loadAverage2
	 */
	public Double getLoadAverage2() {
		return loadAverage2;
	}

	/**<fim_suffix>
	public void setLoadAverage2(Double loadAverage2) {
		this.loadAverage2 = loadAverage2;
	}

	/**
	 * Gets the load average3.
	 *
	 * @return the loadAverage3
	 */
	public Double getLoadAverage3() {
		return loadAverage3;
	}

	/**
	 * Sets the load average3.
	 *
	 * @param loadAverage3 the loadAverage3 to set
	 */
	public void setLoadAverage3(Double loadAverage3) {
		this.loadAverage3 <fim_middle>","
	 * Sets the load average2.
	 *
	 * @param loadAverage2 the loadAverage2 to set
	 */","
	 * Sets the load average2.
	 *
	 * @param loadAverage2 the loadAverage2 to set
	 */"
"<fim_prefix>*/
	private Double loadAverage1; // Last 1 min
	
	/** The load average2. */
	private Double loadAverage2; // Last 5 min
	
	/** The load average3. */
	private Double loadAverage3; // Last 15 min
	
	/** The cpu usage. */
	private Double cpuUsage = 0D; // cpu usage in percent

	/**
	 * Gets the up time.
	 *
	 * @return the upTime
	 */
	public Double getUpTime() {
		return upTime;
	}

	/**<fim_suffix>
	public void setUpTime(Double upTime) {
		this.upTime = upTime;
	}

	/**
	 * Gets the logged users.
	 *
	 * @return the loggedUsers
	 */
	public String getLoggedUsers() {
		return loggedUsers;
	}

	/**
	 * Sets the logged users.
	 *
	 * @param loggedUsers the loggedUsers to set
	 */
	public void setLoggedUsers(String loggedUsers) {
		this.loggedUsers = loggedUsers;
	}

	/**
	 * Gets t<fim_middle>","
	 * Sets the up time.
	 *
	 * @param upTime the upTime to set
	 */","
	 * Sets the up time.
	 *
	 * @param upTime the upTime to set
	 */"
"<fim_prefix>/**<fim_suffix>

package org.eclipse.gmf.examples.runtime.diagram.logic.internal.views.factories;

import java.util.List;

import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.gmf.examples.runtime.diagram.logic.internal.figures.LogicColorConstants;
import org.eclipse.gmf.examples.runtime.diagram.logic.internal.util.StringConstants;
import org.eclip<fim_middle>","****************************************************************************
 * Copyright (c) 2005, 2009 IBM Corporation and others.
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/","
 * @generated
 */"
"<fim_prefix>m.ui.view.factories.optimal.ShapeViewFactory;
import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;
import org.eclipse.gmf.runtime.notation.NotationFactory;
import org.eclipse.gmf.runtime.notation.NotationPackage;
import org.eclipse.gmf.runtime.notation.PropertiesSetStyle;
import org.eclipse.gmf.runtime.notation.ShapeStyle;
import org.eclipse.gmf.runtime.notation.View;

/**<fim_suffix>
public class LEDViewFactory extends ShapeViewFactory {

	protected void decorateView(View containerView, View view,
			IAdaptable semanticAdapter, String semanticHint, int index,
			boolean persisted) {
		super.decorateView(containerView, view, semanticAdapter, semanticHint,
				index, persisted);
		ShapeStyle style = (ShapeStyle) view.getStyle(NotationPackage.eINSTANCE
				.getShapeS<fim_middle>","
 * The LEDView Factory class 
 * @author mmostafa
 */","
 * @generated
 */"
"<fim_prefix>package net.nemezanevem.gregtech.api.capability;

import net.nemezanevem.gregtech.api.capability.impl.HeatingCoilRecipeLogic;

/**<fim_suffix>
public interface IHeatingCoil {

    /**
     *
     * @return the current temperature of the multiblock in Kelvin
     */
    int getCurrentTemperature();
}
<fim_middle>","
 * intended for use in conjunction with {@link HeatingCoilRecipeLogic}
 * use with temperature-based multiblocks
 */","
 * Interface for a multiblock that can be heated by a heating coil.
 */"
"<fim_prefix>package net.nemezanevem.gregtech.api.capability;

import net.nemezanevem.gregtech.api.capability.impl.HeatingCoilRecipeLogic;

/**
 * intended for use in conjunction with {@link HeatingCoilRecipeLogic}
 * use with temperature-based multiblocks
 */
public interface IHeatingCoil {

    /**<fim_suffix>
    int getCurrentTemperature();
}
<fim_middle>","
     *
     * @return the current temperature of the multiblock in Kelvin
     */","
     * @return the current temperature of the heating coil
     */"
"<fim_prefix>/*<fim_suffix>
package org.emonocot.persistence.dao.hibernate;

import java.util.HashMap;
import java.util.Map;

import org.emonocot.model.IdentificationKey;
import org.emonocot.model.hibernate.Fetch;
import org.emonocot.persistence.dao.IdentificationKeyDao;
import org.hibernate.FetchMode;
import org.springframework.stereotype.Repository;

/**
 * @author jk00kg
 */
@Repository
public class Identific<fim_middle>","
 * This is eMonocot, a global online biodiversity information resource.
 *
 * Copyright © 2011–2015 The Board of Trustees of the Royal Botanic Gardens, Kew and The University of Oxford
 *
 * eMonocot is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * eMonocot is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * The complete text of the GNU Affero General Public License is in the source repository as the file
 * ‘COPYING’.  It is also available from <http://www.gnu.org/licenses/>.
 */","*
 * @author jk00kg
 */"
"<fim_prefix>s also available from <http://www.gnu.org/licenses/>.
 */
package org.emonocot.persistence.dao.hibernate;

import java.util.HashMap;
import java.util.Map;

import org.emonocot.model.IdentificationKey;
import org.emonocot.model.hibernate.Fetch;
import org.emonocot.persistence.dao.IdentificationKeyDao;
import org.hibernate.FetchMode;
import org.springframework.stereotype.Repository;

/**<fim_suffix>
@Repository
public class IdentificationKeyDaoImpl extends
DaoImpl<IdentificationKey> implements IdentificationKeyDao {

	/**
	 *
	 */
	private static Map<String, Fetch[]> FETCH_PROFILES;

	static {
		FETCH_PROFILES = new HashMap<String, Fetch[]>();
		FETCH_PROFILES.put(""object-page"", new Fetch[] {
				new Fetch(""taxa"", FetchMode.SELECT),
				new Fetch(""comments"", FetchMode.SELECT),
		<fim_middle>","
 * @author jk00kg
 */","
 *
 * @author <NAME> (<"
"<fim_prefix>eclipse.debug.core.model.IValue;
import org.eclipse.debug.core.model.IVariable;
import org.eclipse.debug.internal.ui.model.elements.VariableLabelProvider;
import org.eclipse.debug.internal.ui.viewers.model.provisional.IPresentationContext;
import org.key_project.sed.core.model.ISEValue;
import org.key_project.sed.core.model.ISEVariable;
import org.key_project.util.java.StringUtil;

/**<fim_suffix>
@SuppressWarnings(""restriction"")
public class SEVariableLabelProvider extends VariableLabelProvider {
   /**
    * {@inheritDoc}
    */
   @Override
   protected String getVariableName(IVariable variable, 
                                    IPresentationContext context) throws CoreException {
      return StringUtil.toSingleLinedString(super.getVariableName(variable, context));
   }
<fim_middle>","
 * <p>
 * Extended {@link VariableLabelProvider} for {@link ISEVariable} and
 * {@link ISEValue} instances which is used to return single lined names and values.
 * </p>
 * <p>
 * Instances of this class are used if columns are shown in the variables view.
 * </p>
 * @author Martin Hentschel
 */","
 * A label provider for variables.
 * 
 * @author <NAME> (<EMAIL>)
 */"
"<fim_prefix>/**<fim_suffix>

package org.key_project.sed.ui.provider;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.debug.core.model.IValue;
import org.eclipse.debug.core.model.IVariable;
import org.eclipse.debug.internal.ui.model.elements.VariableLabelProvider;
import org.eclipse.debug.internal.ui.viewers.model.provisional.IPresentationContext;
import org.key_project.sed.core.model.ISEValue<fim_middle>","*****************************************************************************
 * Copyright (c) 2014 Karlsruhe Institute of Technology, Germany
 *                    Technical University Darmstadt, Germany
 *                    Chalmers University of Technology, Sweden
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Technical University Darmstadt - initial API and implementation and/or initial documentation
 *******************************************************************************/","
 * @author <NAME> (<EMAIL>)
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.vorto.repository.web.api.v1.dto;

import com.google.common.base.Strings;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.annotate.JsonProperty;
import org.eclipse.vorto.repository.comment.ICommentService;
import org.eclipse.vorto.repository.domain.Com<fim_middle>","
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package tryout;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

import eu.ggnet.dwoss.misc.ui.AboutController;
import eu.ggnet.dwoss.misc.ui.AboutController.In;
import eu.ggnet.dwoss.misc.ui.AboutSources;

/**
 *
 * @author oliver.guenther
 */
public clas<fim_middle>","
 * Copyright (C) 2020 GG-Net GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author oliver.guenther
 */"
"<fim_prefix>  If not, see <http://www.gnu.org/licenses/>.
 */
package tryout;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

import eu.ggnet.dwoss.misc.ui.AboutController;
import eu.ggnet.dwoss.misc.ui.AboutController.In;
import eu.ggnet.dwoss.misc.ui.AboutSources;

/**<fim_suffix>
public class AboutTryout {

    public static class AboutApplication extends Application {

        @Override
        public void start(Stage primaryStage) throws Exception {
            FXMLLoader l = new FXMLLoader(AboutController.class.getResource(""AboutView.fxml""));
            GridPane root = l.load();
            AboutController controller = l.getController();

      <fim_middle>","
 *
 * @author oliver.guenther
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package org.jpc.emulator.execution.opcodes.vm;

import org.jpc.emulator.execution.*;
import org.jpc.emulator.execution.decoder.*;
import org.jpc.emulator.processor.*;
import org.jpc.emulator.processor.fpu64.*;
import static org.jpc.emulator.processor.Processor.*;

public class add_Eb_Gb_mem extends Executable
{
    final Pointer op1;
    final int op2Index;

    public add_Eb_Gb_mem(<fim_middle>","
    JPC: An x86 PC Hardware Emulator for a pure Java Virtual Machine

    Copyright (C) 2012-2013 Ian Preston

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 2 as published by
    the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
    Details (including contact information) can be found at: 

    jpc.sourceforge.net
    or the developer website
    sourceforge.net/projects/jpc/

    End of licence header
*/","*
 * @author sergioc
 *
 */"
"<fim_prefix>/*<fim_suffix>

package com.vlaaad.dice.game.world.util;

import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.BinaryHeap;
import com.badlogic.gdx.utils.Pool;
import com.badlogic.gdx.utils.Pools;
import com.vlaaad.common.util.Grid2D;
import com.vlaaad.dice.game.objects.WorldObject;
import com.vlaaad.dice.game.world.World;

import java.util.LinkedList;
import java.util.List;

/**
 * Cre<fim_middle>","
 * Dice heroes is a turn based rpg-strategy game where characters are dice.
 * Copyright (C) 2016 Vladislav Protsenko
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by vlaaad on 11/12/14.
 */"
"<fim_prefix>/>.
 */

package com.vlaaad.dice.game.world.util;

import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.BinaryHeap;
import com.badlogic.gdx.utils.Pool;
import com.badlogic.gdx.utils.Pools;
import com.vlaaad.common.util.Grid2D;
import com.vlaaad.dice.game.objects.WorldObject;
import com.vlaaad.dice.game.world.World;

import java.util.LinkedList;
import java.util.List;

/**<fim_suffix>
public class AStar {

    public static class Node extends BinaryHeap.Node implements Pool.Poolable {

        private float f;
        public int x;
        public int y;
        private Node parent;
        private boolean closed;
        private int g;
        private boolean visited;
        private float h;

        public Node() {
            super(0);
        }

        public <fim_middle>","
 * Created 08.10.13 by vlaaad
 */","
 * A* pathfinding algorithm.
 *
 * @author"
"<fim_prefix>/*<fim_suffix>

package de.d3web.core.inference.condition;

import de.d3web.core.knowledge.terminology.QuestionDate;
import de.d3web.core.session.values.DateValue;

/**
 * Condition for date questions, where the value has to be equal to a given
 * value (DateValue). The composite pattern is used for this. This class is a
 * ""leaf"".
 * 
 * @author Sebastian Furth
 */
public class CondDateBefore exten<fim_middle>","
 * Copyright (C) 2009 Chair of Artificial Intelligence and Applied Informatics
 * Computer Science VI, University of Wuerzburg
 * 
 * This is free software; you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or (at your option) any
 * later version.
 * 
 * This software is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF
 * site: http://www.fsf.org.
 */","*
 * Condition for date questions, where the value has to be equal to a given
 * value (DateValue). The composite pattern is used for this. This class is a
 * ""leaf"".
 * 
 * @author Sebastian Furth
 */"
"<fim_prefix>core.inference.condition;

import de.d3web.core.knowledge.terminology.QuestionDate;
import de.d3web.core.session.values.DateValue;

/**
 * Condition for date questions, where the value has to be equal to a given
 * value (DateValue). The composite pattern is used for this. This class is a
 * ""leaf"".
 * 
 * @author Sebastian Furth
 */
public class CondDateBefore extends CondDate {

	/**<fim_suffix>
	public CondDateBefore(QuestionDate question, DateValue value) {
		super(question, value);
	}

	@Override
	public String toString() {
		return getQuestion().getName()
				+ "" < ""
				+ getValue();
	}

	@Override
	protected boolean compare(DateValue caseValue) {
		return caseValue.compareTo(getValue()) < 0;
	}
}
<fim_middle>","
	 * Creates a new condition, where the value of the specified date question
	 * needs to be before the specified DateValue.
	 * 
	 * @param question the specified date question
	 * @param value the specified value (DateValue)
	 */","
	 * Constructor.
	 * 
	 * @param question
	 *            the question
	 * @param value
	 *            the value
	 */"
"<fim_prefix>copy of the GNU Lesser General Public License
 * along with this software; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF
 * site: http://www.fsf.org.
 */

package de.d3web.core.inference.condition;

import de.d3web.core.knowledge.terminology.QuestionDate;
import de.d3web.core.session.values.DateValue;

/**<fim_suffix>
public class CondDateBefore extends CondDate {

	/**
	 * Creates a new condition, where the value of the specified date question
	 * needs to be before the specified DateValue.
	 * 
	 * @param question the specified date question
	 * @param value the specified value (DateValue)
	 */
	public CondDateBefore(QuestionDate question, DateValue value) {
		super(question, value);
	}

	@Overri<fim_middle>","
 * Condition for date questions, where the value has to be equal to a given
 * value (DateValue). The composite pattern is used for this. This class is a
 * ""leaf"".
 * 
 * @author Sebastian Furth
 */","
 * A condition, which checks if the value of a date question is before a
 * specified value.
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>/*<fim_suffix>

package bdmmprime.trajectories.obsevents;

import bdmmprime.parameterization.Parameterization;
import bdmmprime.trajectories.Trajectory;
import bdmmprime.trajectories.trajevents.CrossBirthEvent;
import bdmmprime.trajectories.trajevents.MigrationEvent;
import beast.base.util.Randomizer;

public class TypeChangeEvent extends ObservedEvent {

    public int childType;

    public TypeCh<fim_middle>","
 * Copyright (C) 2019-2024 Tim Vaughan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>package cn.yapeteam.yolbi.event.impl.player;

import cn.yapeteam.yolbi.event.type.CancellableEvent;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import net.minecraft.entity.Entity;

/**<fim_suffix>

@Setter
@Getter
@AllArgsConstructor
public class EventAttack extends CancellableEvent {
    private Entity targetEntity;
}
<fim_middle>","
 * @author yuxiangll
 * @package cn.yapeteam.yolbi.event.impl.player
 * don't mind
 * @date 2023/8/22 17:00
 */","
 * Created by zhangjinchun on 2018/9/6."
"<fim_prefix>
/*<fim_suffix>

package com.clinacuity.deid.outputAnnotators.resynthesis;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ThreadLocalRandom;

public class ResynthesisMap {
    private static final int[] AGE_OPTIONS = {-3, -2, -1, 1, 2, 3};
    private static final Comparator<Map.Entry<String,<fim_middle>","
# Â© Copyright 2019-2023, Clinacuity Inc. All Rights Reserved.
#
# This file is part of CliniDeID.
# CliniDeID is free software: you can redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or any later version.
# CliniDeID is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with CliniDeID.
# If not, see <https://www.gnu.org/licenses/>.
# =========================================================================   
*/","*
 * Created by dconway on 3/29/16.
 */"
"<fim_prefix>;
    private String id; //not a number in case it exceeds bounds or is alpha-numeric
    private int ageOffset;
    private int daysOffset;
    private int yearOffset;
    private int minutesOffset;
    private Map<String, String> mapping;  //all types, key should always be lowercase, new value will be in 'usual' case: proper parts capitalized

    public ResynthesisMap() {
        /*<fim_suffix>
        ageOffset = AGE_OPTIONS[ThreadLocalRandom.current().nextInt(AGE_OPTIONS.length)];
        yearOffset = ThreadLocalRandom.current().nextInt(-20, -2);
        do {
            daysOffset = ThreadLocalRandom.current().nextInt(-364, -50);
        } while (daysOffset % 7 == 0);

        minutesOffset = ThreadLocalRandom.current().nextInt(15, 120 + 1);
        if (ThreadLocalRandom.<fim_middle>","Offsets:
        Age     +- 1-3
        days    - 50-364   not 365 so month/day will always change
        years   - 1-20
        minutes +- 15-120, note that am/pm can be wrong if it isn't part of the same annotation ('in the AM' wouldn't be changed)*/","*
         * Creates a new ResynthesisMap with default values.
         */"
"<fim_prefix>package dev.latvian.mods.itemfilters.item;

import net.minecraft.nbt.CompoundTag;
import net.minecraft.world.item.ItemStack;

import java.util.Objects;

/**<fim_suffix>
public class WeakNBTFilterItem extends StrongNBTFilterItem {
	@Override
	public boolean filter(ItemStack filter, ItemStack stack) {
		if (stack.isEmpty()) {
			return false;
		}

		NBTData data = getStringValueData(filter);
		CompoundTag tag1 = data.getValue();
		CompoundTag tag2 = stack.getTag();

		if (tag1 == null || tag1.isEmpty()) {
			return true;
		} else if (tag2 == null || ta<fim_middle>","
 * @author LatvianModder
 */","
 * @author LatvianModder
 */"
"<fim_prefix>/*<fim_suffix>
package com.someguyssoftware.legacyvault.capability;

import static com.someguyssoftware.legacyvault.capability.LegacyVaultCapabilities.VAULT_BRANCH;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import net.minecraft.nbt.CompoundNBT;
import net.minecraft.nbt.IntNBT;
import net.minecraft.util.Direction;
import net.minecraftforge.common.capabilities.Cap<fim_middle>","
 * This file is part of Legacy Vault.
 * Copyright (c) 2021, Mark Gottschling (gottsch)
 * 
 * All rights reserved.
 *
 * Legacy Vault is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Legacy Vault is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Legacy Vault.  If not, see <http://www.gnu.org/licenses/lgpl>.
 */","*
 * @author <NAME> on Jan 28, 2019
 *
 */"
"<fim_prefix>VAULT_BRANCH;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import net.minecraft.nbt.CompoundNBT;
import net.minecraft.nbt.IntNBT;
import net.minecraft.util.Direction;
import net.minecraftforge.common.capabilities.Capability;
import net.minecraftforge.common.capabilities.ICapabilitySerializable;
import net.minecraftforge.common.util.LazyOptional;

/**<fim_suffix>
public class PlayerCapabilityProvider implements ICapabilitySerializable<CompoundNBT> {

	private final LazyOptional<IPlayerVaultsHandler> handler = LazyOptional
			.of(VAULT_BRANCH::getDefaultInstance);

	@Override
	public <T> LazyOptional<T> getCapability(@Nonnull Capability<T> cap, @Nullable Direction side) {
		return VAULT_BRANCH.orEmpty(cap, handler);
	}

	@Override
	<fim_middle>","
 * @author Mark Gottschling on May 12, 2021
 *
 */","
 * @author CD4017BE
 *
 */"
"<fim_prefix>package info.stasha.testosterone.jersey.junit4.integration.app.task.service;


import info.stasha.testosterone.jersey.junit4.integration.app.task.Task;
import info.stasha.testosterone.jersey.junit4.integration.app.task.dao.TaskDao;

import java.util.List;
import javax.ws.rs.core.Context;

/**<fim_suffix>
public class TaskServiceImpl implements TaskService {

    @Context
    private TaskDao taskDao;

    @Override
    public List<Task> getAllTasks() throws Exception {
        return taskDao.getAllTasks();
    }

    @Override
    public void createTask(Task task) throws Exception {
        if (task.getId() != null) {
            throw new IllegalArgumentException(""You can't create tas<fim_middle>","
 *
 * @author stasha
 */","
 *
 * @author stasha
 */"
"<fim_prefix>package evaluation.numericalinstance;

import objects.Instance;
import objects.NumericalInstance;

public class WeightedHammingNumericalInstanceSim extends NumericalInstanceSimilarity {

    protected double[] weights;

    /**<fim_suffix>
    public WeightedHammingNumericalInstanceSim (double[] weights) 
    {
        this.weights = weights;
    }


    /**
     * This method return the similarity, the similarity is (1/distance)
     * @param i1
     * @param i2
     * @return double
     */
    public double getSimilarity (Instance i1, Instance i2) 
    {
        Double data1[] = ((NumericalInstance)i1).getDataVector(<fim_middle>","
     * This is a costructor for CosineNumericalInstanceSim object
     */","
     * Constructor
     * @param weights
     */"
"<fim_prefix>   if (data1.length != data2.length)
        {
            throw new RuntimeException(""The instances must have the same number of features"");
        }
        
        double count=0;
        for(int i=0; i<data1.length; i++)
        {
            if(data1[i].equals(data2[i]))
            {
                count+=weights[i];
            }
        }
        return count;
    }

    /**<fim_suffix>
    public double getDistance (Instance i1, Instance i2) 
    {
        Double data1[] = ((NumericalInstance)i1).getDataVector();
        Double data2[] = ((NumericalInstance)i2).getDataVector();
        
        if (data1.length != data2.length)
        {
            throw new RuntimeException(""The instances must have the same number of features"");
        }
        
        double c<fim_middle>","
     * This method return the distance between two NumericalInstance, this method use the Minkowski Distance
     * when p=1 this distance is called Manhattan Distance
     * when p=2 this distance is called Euclidean Distance
     * when p=infinite this distance is called Chebyshev Distance 
     * @param i1
     * @param i2
     * @return double
     */","
     * Returns the distance between two instances.
     * @param i1 the first instance
     * @param i2 the second instance
     * @return the distance between the two instances
     */"
"<fim_prefix>ce;

import objects.Instance;
import objects.NumericalInstance;

public class WeightedHammingNumericalInstanceSim extends NumericalInstanceSimilarity {

    protected double[] weights;

    /**
     * This is a costructor for CosineNumericalInstanceSim object
     */
    public WeightedHammingNumericalInstanceSim (double[] weights) 
    {
        this.weights = weights;
    }


    /**<fim_suffix>
    public double getSimilarity (Instance i1, Instance i2) 
    {
        Double data1[] = ((NumericalInstance)i1).getDataVector();
        Double data2[] = ((NumericalInstance)i2).getDataVector();
        
        if (data1.length != data2.length)
        {
            throw new RuntimeException(""The instances must have the same number of features"");
        }
        
        double<fim_middle>","
     * This method return the similarity, the similarity is (1/distance)
     * @param i1
     * @param i2
     * @return double
     */","
     * This method returns the similarity between two instances
     */"
"<fim_prefix>kage hu.netmind.beankeeper.object;

/**
 * Represents a persistent object identifier. The identifier
 * consists of two parts, one identifies the class the object
 * belongs to, and the rest is for unique identification in
 * that class.
 * @author Brautigam Robert
 * @version CVS Revision: $Revision$
 */
public class Identifier
{
   private Long id;
   private Integer classId;

   /**<fim_suffix>
   public Identifier(Integer classId, Long partId)
   {
      this.classId=classId;
      this.id = new Long((((long)classId.intValue())<<45)+partId.longValue());
   }

   /**
    * Construct with the full identifier.
    */
   public Identifier(Long id)
   {
      this.id=id;
      this.classId = new Integer((int) (id.longValue()>>45));
   }

   /**
    * Get the class id only.
    *<fim_middle>","
    * Construct with the two parts given.
    * @param classId The class' id the object belongs to.
    * @param partId The identifier <strong>inside</strong> the class.
    */","
    * Construct with the class id and the part id.
    */"
"<fim_prefix>f
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package hu.netmind.beankeeper.object;

/**<fim_suffix>
public class Identifier
{
   private Long id;
   private Integer classId;

   /**
    * Construct with the two parts given.
    * @param classId The class' id the object belongs to.
    * @param partId The identifier <strong>inside</strong> the class.
    */
   public Identifier(Integer classId, Long partId)
   {
      this.classId=classId;
      this.id = new Long((((long)classId.int<fim_middle>","
 * Represents a persistent object identifier. The identifier
 * consists of two parts, one identifies the class the object
 * belongs to, and the rest is for unique identification in
 * that class.
 * @author Brautigam Robert
 * @version CVS Revision: $Revision$
 */","
 * A class identifier.
 * @author <NAME>
 */"
"<fim_prefix>sId=classId;
      this.id = new Long((((long)classId.intValue())<<45)+partId.longValue());
   }

   /**
    * Construct with the full identifier.
    */
   public Identifier(Long id)
   {
      this.id=id;
      this.classId = new Integer((int) (id.longValue()>>45));
   }

   /**
    * Get the class id only.
    */
   public Integer getClassId()
   {
      return classId;
   }

   /**<fim_suffix>
   public Long getId()
   {
      return id;
   }

   public String toString()
   {
      return ""Id: ""+id+"" (""+classId+"")"";
   }
}


<fim_middle>","
    * Get the full id this object represents.
    */","
    * Get the part id only.
    */"
"<fim_prefix>/**<fim_suffix>

package hu.netmind.beankeeper.object;

/**
 * Represents a persistent object identifier. The identifier
 * consists of two parts, one identifies the class the object
 * belongs to, and the rest is for unique identification in
 * that class.
 * @author Brautigam Robert
 * @version CVS Revision: $Revision$
 */
public class Identifier
{
   private Long id;
   private Integer classId;

 <fim_middle>","
 * Copyright (C) 2007 NetMind Consulting Bt.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */","
 * Represents a persistent object identifier. The identifier
 * consists of two parts, one identifies the class the object
 * belongs to, and the rest is for unique identification in
 * that class.
 * @author Brautigam Robert
 * @version CVS Revision: $Revision$
 */"
"<fim_prefix>   private Integer classId;

   /**
    * Construct with the two parts given.
    * @param classId The class' id the object belongs to.
    * @param partId The identifier <strong>inside</strong> the class.
    */
   public Identifier(Integer classId, Long partId)
   {
      this.classId=classId;
      this.id = new Long((((long)classId.intValue())<<45)+partId.longValue());
   }

   /**<fim_suffix>
   public Identifier(Long id)
   {
      this.id=id;
      this.classId = new Integer((int) (id.longValue()>>45));
   }

   /**
    * Get the class id only.
    */
   public Integer getClassId()
   {
      return classId;
   }

   /**
    * Get the full id this object represents.
    */
   public Long getId()
   {
      return id;
   }

   public String toString()
   {
      return ""I<fim_middle>","
    * Construct with the full identifier.
    */","
    * Construct with the full id given.
   "
"<fim_prefix> accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */
package org.eclipse.eclipsemonkey.utils;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

import org.osgi.framework.Bundle;

/**<fim_suffix>
public class BundleClassLoader extends ClassLoader
{
	private ArrayList _bundles;

	/**
	 * ScriptClassLoader
	 */
	public BundleClassLoader()
	{
		super(BundleClassLoader.class.getClassLoader());

		this._bundles = new ArrayList();
	}

	/**
	 * addBundle
	 *
	 * @param bundle
	 */
	public void addBundle(Bundle bundle)
	{
		if (bundle == null)
		{
			throw new IllegalArgumentException<fim_middle>","
 * @author Kevin Lindsey based on code by Patrick Mueller
 */","
 * BundleClassLoader
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.eclipsemonkey.utils;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

import org.osgi.framework.Bundle;

/**
 * @author Kevin Lindsey based on code by Patrick Mueller
 */
public class BundleClassLoader extends ClassLoader
{
	private ArrayList _bundles;

	/**
	 * ScriptClassLoader<fim_middle>","
 * Copyright (c) 2005-2006 Aptana, Inc.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */","
 * @author Kevin Lindsey based on code by Patrick Mueller
 */"
"<fim_prefix>/*<fim_suffix>
package de.df.jauswertung.test.results.dm08;

import java.io.FileNotFoundException;

import de.df.jauswertung.daten.Mannschaft;
import de.df.jauswertung.daten.MannschaftWettkampf;
import de.df.jauswertung.io.AgeGroupIOUtils;
import de.df.jauswertung.io.InputManager;
import de.df.jauswertung.io.TableFormatException;
import de.df.jauswertung.test.util.TestImportUtils;
import de.df.jausw<fim_middle>","
 * Created on 09.06.2005
 */","*
 * @author <NAME> (comment copied"
"<fim_prefix>/*<fim_suffix>

package org.projectmaxs.transport.xmpp.xmppservice;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.jivesoftware.smack.SmackException.NoResponseException;
import org.jivesoftware.smack.SmackException.NotConnectedException;
import org.jivesoftware.smack.SmackException.NotLoggedInException;
import org.jivesoftware.smac<fim_middle>","
    This file is part of Project MAXS.

    MAXS and its modules is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MAXS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MAXS.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix> {
					// Skip excluded resources
					continue;
				}
				masterJidAvailable = true;
				// we found at least one available master JID, break here
				break;
			}
		}

		if (mMasterJidAvailable == false && masterJidAvailable == true) {
			for (MasterJidListener listener : mMasterJidListeners)
				listener.masterJidAvailable();
		}

		mMasterJidAvailable = masterJidAvailable;
	}

	/**<fim_suffix>
	private void friendJid(BareJid userID) {
		if (!mRoster.contains(userID)) {
			try {
				mRoster.createItemAndRequestSubscription(userID, userID.toString(), null);
				grantSubscription(userID, mConnection);
			} catch (NotConnectedException | InterruptedException | NotLoggedInException
					| NoResponseException | XMPPErrorException e) {
				LOG.w(""Exception creating roster entry fo<fim_middle>","
	 * Subscribe and request subscription with a given JID. Essentially become a
	 * ""friend"" of the JID.
	 * 
	 * @param userID
	 */","
	 * Adds a listener to be notified when the master JID is available.
	 * 
	 * @param listener
	 *           "
"<fim_prefix>:
				grantSubscription(userID, mConnection);
				break;
			case none:
				grantSubscription(userID, mConnection);
				RosterUtil.askForSubscriptionIfRequired(mRoster, userID);
				break;
			case both:
			default:
				break;
			}
		} catch (NotLoggedInException | NotConnectedException | InterruptedException e) {
			LOG.w(""Exception handling subscription for "" + userID, e);
		}
	}

	/**<fim_suffix>
	private static void grantSubscription(BareJid jid, XMPPConnection connection)
			throws NotConnectedException, InterruptedException {
		Presence presence = connection.getStanzaFactory().buildPresenceStanza()
				.ofType(Presence.Type.subscribed)
				.to(jid)
				.build();
		connection.sendStanza(presence);
	}

	public static class MasterJidListener {
		public void masterJidAvailable(<fim_middle>","
	 * grants the given JID the subscription (e.g. viewing your online state)
	 * 
	 * @param jid
	 * @param connection
	 * @throws InterruptedException
	 * @throws NotConnectedException
	 */","
	 * Grant subscription to the given user.
	 * 
	 * @param userID
	 *            The user to grant subscription to.
	 * @param connection
	 *    "
"<fim_prefix>angeListener implements RosterListener {
	private static final Log LOG = Log.getLog();

	private final List<MasterJidListener> mMasterJidListeners = new LinkedList<MasterJidListener>();

	private Settings mSettings;
	private Roster mRoster;
	private XMPPConnection mConnection;
	private boolean mMasterJidAvailable;

	public XMPPRoster(Settings settings) {
		mSettings = settings;
	}

	/*<fim_suffix>

	@Override
	public void newConnection(XMPPConnection connection) {
		mConnection = connection;
		mRoster = Roster.getInstanceFor(connection);
		mRoster.addRosterListener(this);

		mRoster.addSubscribeListener(new SubscribeListener() {
			@Override
			public SubscribeAnswer processSubscribe(Jid from, Presence subscribeRequest) {
				Set<EntityBareJid> masterJids = mSettings.getMasterJ<fim_middle>","
	 * StateChangeListener callbacks
	 */","*
	 * Adds a listener to be"
"<fim_prefix>nswer.Approve;
					}
				}
				return SubscribeAnswer.Deny;
			}
		});
	}

	@Override
	public void connected(XMPPConnection connection) {
		Set<EntityBareJid> masterJids = mSettings.getMasterJids();
		for (EntityBareJid jid : masterJids)
			friendJid(jid);

		checkMasterJids();
	}

	@Override
	public void disconnected(XMPPConnection connection) {
		mMasterJidAvailable = false;
	}

	/*<fim_suffix>

	@Override
	public void entriesAdded(Collection<Jid> arg0) {}

	@Override
	public void entriesDeleted(Collection<Jid> arg0) {}

	@Override
	public void entriesUpdated(Collection<Jid> arg0) {}

	@Override
	public void presenceChanged(Presence presence) {
		checkMasterJids();
	}

	protected boolean isMasterJidAvailable() {
		return mMasterJidAvailable;
	}

	protected void addMasterJidL<fim_middle>","
	 * RosterListener callbacks
	 */","*
	 * Checks if the master jid"
"<fim_prefix>package it.unipr.ailab.jadescript.semantics;

import it.unipr.ailab.jadescript.semantics.helpers.SemanticsConsts;
import it.unipr.ailab.sonneteer.WriterFactory;

/**<fim_suffix>
public abstract class Semantics implements SemanticsConsts {

    public static final WriterFactory w = WriterFactory.getInstance();

    public final SemanticsModule module;


    public Semantics(SemanticsModule semanticsModule) {
        this.module = semanticsModule;
    }


}
<fim_middle>","
 * Created on 26/04/18.
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package mclachlan.diygui.util;

import java.util.*;

/**
 * A mutable tree implementation backed by a HashMap that links nodes and
 * parents.
 */
public class HashMapMutableTree<N> implements MutableTree<N>
{
	private final Map<N, N> nodeParent = new HashMap<N, N>();
	private final Set<N> nodeList = new LinkedHashSet<N>();

	/*--------------------------------------------------------<fim_middle>","
 * Copyright (c) 2014 Alan McLachlan
 *
 * This file is part of Escape From The Maze.
 *
 * Escape From The Maze is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Copyright (c) 2012-2013 <NAME>
 * Released under the MIT license:
 * http://opensource.org/licenses/MIT
 */"
"<fim_prefix>l,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package mclachlan.diygui.util;

import java.util.*;

/**<fim_suffix>
public class HashMapMutableTree<N> implements MutableTree<N>
{
	private final Map<N, N> nodeParent = new HashMap<N, N>();
	private final Set<N> nodeList = new LinkedHashSet<N>();

	/*----------------------------------------------------------------------*/
	public boolean add(N node, N parent)
	{
		boolean added = nodeList.add(node);
		if (parent != null)
		{
			nodeList.add(parent);
	<fim_middle>","
 * A mutable tree implementation backed by a HashMap that links nodes and
 * parents.
 */","
 * A tree that can be modified.
 *
 * @author <NAME>
 */"
"<fim_prefix>h uses internally a Bitwig bank.
 *
 * @param <B> The specific Bitwig bank type
 * @param <T> The specific item type of the bank item
 *
 * @author Jürgen Moßgraber
 */
public abstract class AbstractItemBankImpl<B extends Bank<?>, T extends IItem> extends AbstractItemBank<T>
{
    protected final IValueChanger valueChanger;
    protected final Optional<B>   bank;


    /**<fim_suffix>
    protected AbstractItemBankImpl (final IHost host, final IValueChanger valueChanger, final B bank, final int pageSize)
    {
        super (host, pageSize);

        this.valueChanger = valueChanger;
        this.bank = Optional.ofNullable (bank);

        if (this.bank.isEmpty ())
            return;

        bank.scrollPosition ().markInterested ();
        bank.canSc<fim_middle>","
     * Constructor.
     *
     * @param host The DAW host
     * @param valueChanger The value changer
     * @param bank The bank to encapsulate
     * @param pageSize The number of elements in a page of the bank
     */","
     * Creates a new bank.
     *
     * @param host          the host
     * @param valueChanger the value changer
     * @param bank          the bank
     * @param pageSize"
"<fim_prefix>nheritDoc} */
    @Override
    public void scrollForwards ()
    {
        if (this.bank.isPresent ())
            this.bank.get ().scrollForwards ();
    }


    /**
     * Scroll items backwards by 1 page.
     */
    protected void scrollPageBackwards ()
    {
        if (this.bank.isPresent ())
            this.bank.get ().scrollPageBackwards ();
    }


    /**<fim_suffix>
    protected void scrollPageForwards ()
    {
        if (this.bank.isPresent ())
            this.bank.get ().scrollPageForwards ();
    }


    /** {@inheritDoc} */
    @Override
    public boolean canScrollPageBackwards ()
    {
        return this.bank.isPresent () && this.bank.get ().canScrollBackwards ().get ();
    }


    /** {@inheritDoc} */
    @Override
 <fim_middle>","
     * Scroll items forwards by 1 page.
     */", {@inheritDoc} */
"<fim_prefix>et ();
    }


    /** {@inheritDoc} */
    @Override
    public void scrollBackwards ()
    {
        if (this.bank.isPresent ())
            this.bank.get ().scrollBackwards ();
    }


    /** {@inheritDoc} */
    @Override
    public void scrollForwards ()
    {
        if (this.bank.isPresent ())
            this.bank.get ().scrollForwards ();
    }


    /**<fim_suffix>
    protected void scrollPageBackwards ()
    {
        if (this.bank.isPresent ())
            this.bank.get ().scrollPageBackwards ();
    }


    /**
     * Scroll items forwards by 1 page.
     */
    protected void scrollPageForwards ()
    {
        if (this.bank.isPresent ())
            this.bank.get ().scrollPageForwards ();
    }


    /** {@inheritDoc} */<fim_middle>","
     * Scroll items backwards by 1 page.
     */", {@inheritDoc} */
"<fim_prefix>data.bank;

import java.util.Optional;

import com.bitwig.extension.controller.api.Bank;

import de.mossgrabers.bitwig.framework.daw.data.Util;
import de.mossgrabers.framework.controller.valuechanger.IValueChanger;
import de.mossgrabers.framework.daw.IHost;
import de.mossgrabers.framework.daw.data.IItem;
import de.mossgrabers.framework.daw.data.bank.AbstractItemBank;


/**<fim_suffix>
public abstract class AbstractItemBankImpl<B extends Bank<?>, T extends IItem> extends AbstractItemBank<T>
{
    protected final IValueChanger valueChanger;
    protected final Optional<B>   bank;


    /**
     * Constructor.
     *
     * @param host The DAW host
     * @param valueChanger The value changer
     * @param bank The bank to encapsulate
     * @param pageSi<fim_middle>","
 * An abstract bank which uses internally a Bitwig bank.
 *
 * @param <B> The specific Bitwig bank type
 * @param <T> The specific item type of the bank item
 *
 * @author Jürgen Moßgraber
 */","
 * Abstract implementation of an item bank.
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package de.vette.idea.neos.lang.fusion.psi.impl.ext;

import com.intellij.lang.ASTNode;
import de.vette.idea.neos.lang.fusion.psi.*;
import de.vette.idea.neos.lang.fusion.psi.impl.FusionElementImpl;
import org.jetbrains.annotations.NotNull;

public abstract class FusionCopiedPrototypeSignatureImplMixin extends FusionElementImpl implements FusionCopiedPrototypeSignature {

    public <fim_middle>","
 *  IntelliJ IDEA plugin to support the Neos CMS.
 *  Copyright (C) 2016  Christian Vette
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * This file is part of the Neos.Fusion package.
 *
 * (c) Contributors of the Neos Project - www.neos.io
 *
 * This package is Open Source Software. For the full copyright and license
 * information, please view the LICENSE file which was distributed with this
 * source code.
 */"
"<fim_prefix>/**<fim_suffix>
package org.sonatype.maven.polyglot.groovy.builder.factory;

import groovy.util.FactoryBuilderSupport;
import org.apache.maven.model.Model;
import org.sonatype.maven.polyglot.execute.ExecuteManager;
import org.sonatype.maven.polyglot.execute.ExecuteTask;
import org.sonatype.maven.polyglot.groovy.builder.ModelBuilder;

import java.util.List;
import java.util.Map;

/**
 * Builds {@link <fim_middle>","
 * Copyright (c) 2012 to original author or authors
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */","
 * @author <NAME>
 */"
"<fim_prefix>l/epl-v10.html
 */
package org.sonatype.maven.polyglot.groovy.builder.factory;

import groovy.util.FactoryBuilderSupport;
import org.apache.maven.model.Model;
import org.sonatype.maven.polyglot.execute.ExecuteManager;
import org.sonatype.maven.polyglot.execute.ExecuteTask;
import org.sonatype.maven.polyglot.groovy.builder.ModelBuilder;

import java.util.List;
import java.util.Map;

/**<fim_suffix>
public class ModelFactory extends NamedFactory {
  public ModelFactory() {
    super(""project"");
  }

  public Object newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attrs) throws InstantiationException, IllegalAccessException {
    return new Model();
  }

  @Override
  public void onNodeCompleted(FactoryBuilderSupport builder, Object parent, Object node) {
<fim_middle>","
 * Builds {@link Model} elements and handles registration of any {@link ExecuteTask}s.
 *
 * @author <a href=""mailto:jason@planet57.com"">Jason Dillon</a>
 *
 * @since 0.7
 */","
 * {@link Model} factory.
 *
 * @since 1.0
 */"
"<fim_prefix>/*<fim_suffix>

package pascal.taie.util.graph;

import pascal.taie.util.Hashes;

public abstract class AbstractEdge<N> implements Edge<N> {

    /**
     * The source node of the edge.
     */
    protected final N source;

    /**
     * The target node of the edge.
     */
    protected final N target;

    protected AbstractEdge(N source, N target) {
        this.source = source;
        this.ta<fim_middle>","
 * Tai-e: A Static Analysis Framework for Java
 *
 * Copyright (C) 2022 Tian Tan <tiantan@nju.edu.cn>
 * Copyright (C) 2022 Yue Li <yueli@nju.edu.cn>
 *
 * This file is part of Tai-e.
 *
 * Tai-e is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * Tai-e is distributed in the hope that it will be useful,but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
 * Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Tai-e. If not, see <https://www.gnu.org/licenses/>.
 */","*
 * An abstract implementation of an edge.
 *
 * @param <N> The type of the nodes.
 */"
"<fim_prefix>nse for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Tai-e. If not, see <https://www.gnu.org/licenses/>.
 */

package pascal.taie.util.graph;

import pascal.taie.util.Hashes;

public abstract class AbstractEdge<N> implements Edge<N> {

    /**
     * The source node of the edge.
     */
    protected final N source;

    /**<fim_suffix>
    protected final N target;

    protected AbstractEdge(N source, N target) {
        this.source = source;
        this.target = target;
    }

    @Override
    public N source() {
        return source;
    }

    @Override
    public N target() {
        return target;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
  <fim_middle>","
     * The target node of the edge.
     */","
     * The target node of the edge.
     */"
"<fim_prefix>Y
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
 * Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Tai-e. If not, see <https://www.gnu.org/licenses/>.
 */

package pascal.taie.util.graph;

import pascal.taie.util.Hashes;

public abstract class AbstractEdge<N> implements Edge<N> {

    /**<fim_suffix>
    protected final N source;

    /**
     * The target node of the edge.
     */
    protected final N target;

    protected AbstractEdge(N source, N target) {
        this.source = source;
        this.target = target;
    }

    @Override
    public N source() {
        return source;
    }

    @Override
    public N target() {
        return target;
    }

    @Override
    pub<fim_middle>","
     * The source node of the edge.
     */","
     * The source node of the edge.
     */"
"<fim_prefix>/*<fim_suffix>
package org.eigenbase.enki.hibernate.jmi;

import java.util.*;

import javax.jmi.reflect.*;

import org.eigenbase.enki.hibernate.storage.*;
import org.eigenbase.enki.jmi.impl.*;

/**
 * HibernateOneToManyRefAssociation extends {@link HibernateRefAssociation}
 * to provide an implementation of {@link RefAssociation} for Hibernate-based
 * one-to-many associations.
 * 
 * @author Stepha<fim_middle>","
// $Id$
// Enki generates and implements the JMI and MDR APIs for MOF metamodels.
// Copyright (C) 2007 The Eigenbase Project
// Copyright (C) 2007 SQLstream, Inc.
// Copyright (C) 2007 Dynamo BI Corporation
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/","*
 * @author Stephano Zandbergen
 */"
"<fim_prefix>-many associations.
 * 
 * @author Stephan Zuercher
 */
public abstract class HibernateOneToManyRefAssociation<E1 extends RefObject, E2 extends RefObject>
    extends HibernateRefAssociation
{
    // REVIEW: SWZ: 2008-01-22: Consider whether generic type info can be
    // pushed all the way down to RefAssociationBase, eliminating the need
    // to double-store these classes.

    /**<fim_suffix>
    private final Class<E1> end1GenericClass;

    /** Expected end 1 type. */
    private final Class<E2> end2GenericClass;

    /** If true end 1 is the single end.  If false, end 2 is the single end. */
    private final boolean end1IsParent;
    
    protected HibernateOneToManyRefAssociation(
        RefPackage container,
        String type,
        String end1Name,
        Clas<fim_middle>", Expected end 1 type. */, Expected end 1 name. */
"<fim_prefix> extends HibernateRefAssociation
{
    // REVIEW: SWZ: 2008-01-22: Consider whether generic type info can be
    // pushed all the way down to RefAssociationBase, eliminating the need
    // to double-store these classes.

    /** Expected end 1 type. */
    private final Class<E1> end1GenericClass;

    /** Expected end 1 type. */
    private final Class<E2> end2GenericClass;

    /**<fim_suffix>
    private final boolean end1IsParent;
    
    protected HibernateOneToManyRefAssociation(
        RefPackage container,
        String type,
        String end1Name,
        Class<E1> end1Class,
        Multiplicity end1Multiplicity,
        String end2Name,
        Class<E2> end2Class,
        Multiplicity end2Multiplicity)
    {
        super(
            container, 
            <fim_middle>"," If true end 1 is the single end.  If false, end 2 is the single end. */", Expected end 1 type. */
"<fim_prefix>       (HibernateAssociable)parent, 
                end1IsParent, 
                getAssociationIdentifier(), 
                cls);
        } else {
            return new CollectionProxy<EX>(
                assoc, 
                (HibernateAssociable)parent, 
                end1IsParent, 
                getAssociationIdentifier(), 
                cls);
        }
    }

    /**<fim_suffix>
    protected boolean add(E1 end1, E2 end2)
    {
        return refAddLink(end1, end2);
    }

    /**
     * Delegates to {@link #refRemoveLink(RefObject, RefObject)}.
     */
    protected boolean remove(E1 end1, E2 end2)
    {
        return refRemoveLink(end1, end2);
    }
}

// End HibernateOneToManyRefAssociation.java
<fim_middle>","
     * Delegates to {@link #refAddLink(RefObject, RefObject)}.
     */","
     * Delegates to {@link #refAddLink(RefObject, RefObject)}.
     */"
"<fim_prefix>CollectionProxy<EX>(
                assoc, 
                (HibernateAssociable)parent, 
                end1IsParent, 
                getAssociationIdentifier(), 
                cls);
        }
    }

    /**
     * Delegates to {@link #refAddLink(RefObject, RefObject)}.
     */
    protected boolean add(E1 end1, E2 end2)
    {
        return refAddLink(end1, end2);
    }

    /**<fim_suffix>
    protected boolean remove(E1 end1, E2 end2)
    {
        return refRemoveLink(end1, end2);
    }
}

// End HibernateOneToManyRefAssociation.java
<fim_middle>","
     * Delegates to {@link #refRemoveLink(RefObject, RefObject)}.
     */","
     * Delegates to {@link #refRemoveLink(RefObject, RefObject)}.
     */"
"<fim_prefix>me,
            end2Class,
            end2Multiplicity);

        assert(end1Multiplicity.isSingle() || end2Multiplicity.isSingle());
        assert(!end1Multiplicity.isSingle() || !end2Multiplicity.isSingle());
        
        this.end1GenericClass = end1Class;
        this.end2GenericClass = end2Class;
        
        this.end1IsParent = end1Multiplicity.isSingle();
    }

    /**<fim_suffix>
    protected boolean exists(E1 parent, E2 child)
    {
        return refLinkExists(parent, child);
    }

    protected <EX extends RefObject> EX getParentOf(
        RefObject child, Class<EX> cls)
    {
        if (end1IsParent) {
            assert(cls.equals(end1GenericClass));
        } else {
            assert(cls.equals(end2GenericClass));
        }
        
        Collecti<fim_middle>","
     * Delegates to {@link #refLinkExists(RefObject, RefObject)}.
     */","
     * @return the end1GenericClass
     */"
"<fim_prefix>ve received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/
package org.eigenbase.enki.hibernate.jmi;

import java.util.*;

import javax.jmi.reflect.*;

import org.eigenbase.enki.hibernate.storage.*;
import org.eigenbase.enki.jmi.impl.*;

/**<fim_suffix>
public abstract class HibernateOneToManyRefAssociation<E1 extends RefObject, E2 extends RefObject>
    extends HibernateRefAssociation
{
    // REVIEW: SWZ: 2008-01-22: Consider whether generic type info can be
    // pushed all the way down to RefAssociationBase, eliminating the need
    // to double-store these classes.

    /** Expected end 1 type. */
    private final Class<E1> en<fim_middle>","
 * HibernateOneToManyRefAssociation extends {@link HibernateRefAssociation}
 * to provide an implementation of {@link RefAssociation} for Hibernate-based
 * one-to-many associations.
 * 
 * @author Stephan Zuercher
 */","
 * Hibernate implementation of a one-to-many reference association.
 *
 * @author <NAME>
 * @version $Id$
 */"
"<fim_prefix>ibernateOneToManyRefAssociation<E1 extends RefObject, E2 extends RefObject>
    extends HibernateRefAssociation
{
    // REVIEW: SWZ: 2008-01-22: Consider whether generic type info can be
    // pushed all the way down to RefAssociationBase, eliminating the need
    // to double-store these classes.

    /** Expected end 1 type. */
    private final Class<E1> end1GenericClass;

    /**<fim_suffix>
    private final Class<E2> end2GenericClass;

    /** If true end 1 is the single end.  If false, end 2 is the single end. */
    private final boolean end1IsParent;
    
    protected HibernateOneToManyRefAssociation(
        RefPackage container,
        String type,
        String end1Name,
        Class<E1> end1Class,
        Multiplicity end1Multiplicity,
        String end2Name<fim_middle>", Expected end 1 type. */, Expected end 2 type. */
"<fim_prefix>package illarion.common.memory;

import java.util.HashMap;
import java.util.Map;

public class MemoryPools {

    protected final static Map<Class<?>,MemoryPool<?>> pools = new HashMap<>();

    protected MemoryPools() {
        //
    }

    /**<fim_suffix>
    public static <T extends Object> T get(Class<T> cls) {
        MemoryPool<T> pool = getPool(cls);
        return pool.get(cls);
    }

    /**
    * add object to memory pool again, so it can reused
     *
     * @param obj object
    */
    public static <T extends Object> void free(T obj) {
        MemoryPool<T> pool = (MemoryPool<T>) getPool(obj.getClass());
        pool.free(o<fim_middle>","
    * get reused object from memory pool
     *
     * @param cls object type (class)
     *
     * @return instance of class from memory pool
    */","
    * get memory pool for object
     *
     * @param cls object class
     * @return memory pool
    */"
"<fim_prefix>yPool<?>> pools = new HashMap<>();

    protected MemoryPools() {
        //
    }

    /**
    * get reused object from memory pool
     *
     * @param cls object type (class)
     *
     * @return instance of class from memory pool
    */
    public static <T extends Object> T get(Class<T> cls) {
        MemoryPool<T> pool = getPool(cls);
        return pool.get(cls);
    }

    /**<fim_suffix>
    public static <T extends Object> void free(T obj) {
        MemoryPool<T> pool = (MemoryPool<T>) getPool(obj.getClass());
        pool.free(obj);
    }

    protected static <T extends Object> MemoryPool<T> getPool (Class<T> cls) {
        MemoryPool<T> pool = (MemoryPool<T>) pools.get(cls);

        if (pool == null) {
            // Pool doesn't exists, because it wasn't used be<fim_middle>","
    * add object to memory pool again, so it can reused
     *
     * @param obj object
    */","
    * get reused object from memory pool
     *
     * @param cls object type (class)
     *"
"<fim_prefix>/*<fim_suffix>

package org.esa.beam.framework.datamodel;

import junit.framework.TestCase;

public class RGBChannelDefTest extends TestCase {
    public void testGamma () {
        final RGBChannelDef def = new RGBChannelDef();
        testChannelGamma(def, 0);
        testChannelGamma(def, 1);
        testChannelGamma(def, 2);
        testChannelGamma(def, 3);
    }

    private void testChannelGa<fim_middle>","
 * Copyright (C) 2010 Brockmann Consult GmbH (info@brockmann-consult.de)
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or (at your option)
 * any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see http://www.gnu.org/licenses/
 */","*
 * Copyright 2013-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>t.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Tree;

public class AddFolderLibraryItemDialog extends Dialog {

	protected Object result;
	protected static Shell shlAddPath;
	private Text textTitle;
	private Node node;
	@SuppressWarnings(""unused"")
	private FolderLibraryItem folderItem;
	private Tree tree;

	/**<fim_suffix>
	public AddFolderLibraryItemDialog(Shell parent, int style, FolderLibraryItem fi, Tree tree)
	{
		super(parent, style);
		this.folderItem = fi;
		this.node = fi.getNode();
		this.tree = tree;
	}

	/**
	 * Open the dialog.
	 * @return the result
	 */
	public Object open() {
		createContents();
		
		shlAddPath.open();
		shlAddPath.layout();
		
		Display display = getParent().getDisplay(<fim_middle>","
	 * Create the dialog.
	 * @param parent
	 * @param style
	 * @param tree 
	 */","
	 * Create the dialog.
	 * @param parent
	 * @param style
	 */"
"<fim_prefix>te Node node;
	@SuppressWarnings(""unused"")
	private FolderLibraryItem folderItem;
	private Tree tree;

	/**
	 * Create the dialog.
	 * @param parent
	 * @param style
	 * @param tree 
	 */
	public AddFolderLibraryItemDialog(Shell parent, int style, FolderLibraryItem fi, Tree tree)
	{
		super(parent, style);
		this.folderItem = fi;
		this.node = fi.getNode();
		this.tree = tree;
	}

	/**<fim_suffix>
	public Object open() {
		createContents();
		
		shlAddPath.open();
		shlAddPath.layout();
		
		Display display = getParent().getDisplay();
		
		int x = getParent().getBounds().x + (getParent().getBounds().width / 2) - (shlAddPath.getBounds().width / 2);
		int y = getParent().getBounds().y + (getParent().getBounds().height / 2) - (shlAddPath.getBounds().height / 2);
		
		shlAddPath.se<fim_middle>","
	 * Open the dialog.
	 * @return the result
	 */","
	 * Create contents of the dialog.
	 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.photran.internal.core.parser;

import java.io.PrintStream;
import java.util.Iterator;

import java.util.List;

import org.eclipse.photran.internal.core.parser.ASTListNode;
import org.eclipse.photran.internal.core.parser.ASTNode;
import org.eclipse.photran.internal.core.parser.ASTNodeWithErrorRecoverySymbols;
import org.eclipse.photran.internal.core.parser.IASTListN<fim_middle>","*****************************************************************************
 * Copyright (c) 2007 University of Illinois at Urbana-Champaign and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     UIUC - Initial API and implementation
 *******************************************************************************/","
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>/*<fim_suffix>
package org.nabucco.framework.common.authorization.ui.rcp.browser.permission;

import java.util.List;

import org.nabucco.framework.common.authorization.facade.datatype.AuthorizationPermission;
import org.nabucco.framework.common.authorization.facade.message.AuthorizationPermissionListMsg;
import org.nabucco.framework.common.authorization.ui.rcp.communication.AuthorizationComponentSer<fim_middle>","
 * Copyright 2012 PRODYNA AG
 *
 * Licensed under the Eclipse Public License (EPL), Version 1.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.opensource.org/licenses/eclipse-1.0.php or
 * http://www.nabucco.org/License.html
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * @author <NAME>
 * 
 */"
"<fim_prefix>.communication.resolve.ResolveAuthorizationDelegate;
import org.nabucco.framework.common.authorization.ui.rcp.list.permission.model.AuthorizationPermissionListViewModel;
import org.nabucco.framework.plugin.base.Activator;
import org.nabucco.framework.plugin.base.model.browser.AbstractBrowserListViewHandlerImpl;
import org.nabucco.framework.plugin.base.model.browser.BrowserElement;

/**<fim_suffix>
public class AuthorizationPermissionListViewBrowserElementHandlerImpl
        extends
        AbstractBrowserListViewHandlerImpl<AuthorizationPermission, AuthorizationPermissionListViewModel, AuthorizationPermissionListViewBrowserElement, AuthorizationPermissionEditViewBrowserElement>
        implements AuthorizationPermissionListViewBrowserElementHandler {

    @Override
    public v<fim_middle>","
 * AuthorizationPermissionListViewBrowserElementHandlerImpl.
 * 
 * @author Michael Krausse, PRODYNA AG
 */","
 * @author <NAME>
 */"
"<fim_prefix>package nl.vpro.io.prepr.rs;

/**<fim_suffix>
public class Constants {

    private Constants() {

    }
    public static final String REMOTE = ""remote"";
    public static final String USER_AGENT = ""userAgent"";
    public static final String CHANNEL = ""channel"";
    public static final String RECEIVAL = ""receival"";
    public static final String VERSION = ""version"";
    public static final String SEQUENCE = ""sequence"";
}
<fim_middle>","
 * Some constants that can be used as header keys for incoming webhooks (e.g. when passing them to JMS)
 */","
 * @author Michiel Meeuwissen
 * @since 1.0
 */"
"<fim_prefix>package com.payinekereg.treelogy.constructors;

/**<fim_suffix>
public class ListTreesConstructor {

    private int leaf        ;
    private int tree        ;
    private String treeName ;
    private String latinName;

    public int getLeaf() {
        return leaf;
    }

    public void setLeaf(int leaf) {
        this.leaf = leaf;
    }

    public int getTree() {
        return tree;
    }

    public void setTree(int tree) {
        this.t<fim_middle>","
 * Created by Emre on 3/11/2016.
 */","
 * Created by hemantkumar on 10/12/2017."
"<fim_prefix>/*<fim_suffix>
package sdmxdl.provider.ri.readers;

import lombok.NonNull;
import nbbrd.io.net.MediaType;
import nbbrd.io.xml.Xml;
import org.checkerframework.checker.nullness.qual.Nullable;
import sdmxdl.Structure;
import sdmxdl.EventListener;
import sdmxdl.Languages;
import sdmxdl.Series;
import sdmxdl.file.FileSource;
import sdmxdl.format.DataCursor;
import sdmxdl.format.ObsParser;
import sdmxdl.<fim_middle>","
 * Copyright 2017 National Bank of Belgium
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved
 * by the European Commission - subsequent versions of the EUPL (the ""Licence"");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 *
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Licence is distributed on an ""AS IS"" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and
 * limitations under the Licence.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>sdmxdl.format.xml.SdmxXmlStreams;
import sdmxdl.format.xml.XmlMediaTypes;
import sdmxdl.provider.DataRef;
import sdmxdl.provider.HasMarker;
import sdmxdl.provider.Marker;
import sdmxdl.provider.file.FileClient;
import sdmxdl.provider.file.FileInfo;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.function.Supplier;
import java.util.stream.Stream;

/**<fim_suffix>
@lombok.AllArgsConstructor
public class XmlFileClient implements FileClient {

    @lombok.NonNull
    private final FileSource source;

    @lombok.NonNull
    private final Languages languages;

    @lombok.NonNull
    private final Decoder decoder;

    @Nullable
    private final Supplier<ObsParser> obsFactory;

    private final @Nullable EventListener<? super FileSource> listene<fim_middle>","
 * @author Philippe Charles
 */","
 *
 * @author James
 */"
"<fim_prefix>/**<fim_suffix>

package org.eclipse.fordiac.ide.model.commands.internal;

import org.eclipse.core.runtime.Assert;
import org.eclipse.emf.common.util.EList;
import org.eclipse.gef.commands.Command;

public abstract class AbstractChangeListElementOrderCommand<T> extends Command {
	private final T selection;
	private final EList<T> list;
	private final int oldIndex;
	private int newIndex;

	private Abs<fim_middle>","*****************************************************************************
 * Copyright (c) 2021 Johannes Kepler University
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *   Bianca Wiesmayr, Melanie Winter
 *      - Initial implementation and/or documentation
 *******************************************************************************/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package de.huxhorn.lilith.services.clipboard;

import de.huxhorn.lilith.data.logging.ExtendedStackTraceElement;
import de.huxhorn.lilith.swing.LilithActionId;

import static de.huxhorn.lilith.services.clipboard.FormatterTools.resolveCallStack;

public class LoggingCallLocationFormatter
		extends AbstractNativeClipboardFormatter
{
	private static final long serialVersionUID = 47358915<fim_middle>","
 * Lilith - a log event viewer.
 * Copyright (C) 2007-2017 Joern Huxhorn
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 * @since 1.0.0
 */"
"<fim_prefix>/*<fim_suffix>

package org.restcomm.protocols.ss7.sccp.parameter;

import org.restcomm.protocols.ss7.indicator.AddressIndicator;

/**
 * @author baranowb
 *
 */
public interface SccpAddress extends Parameter {
    // calling party address
    int CGA_PARAMETER_CODE = 0x4;
    // called party address
    int CDA_PARAMETER_CODE = 0x3;

    boolean isTranslated();

    void setTranslated(boolean trans<fim_middle>","
 * TeleStax, Open Source Cloud Communications
 * Copyright 2011-2013, Telestax Inc and individual contributors
 * by the @authors tag.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */","*
 * @author baranowb
 *
 */"
"<fim_prefix>
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.restcomm.protocols.ss7.sccp.parameter;

import org.restcomm.protocols.ss7.indicator.AddressIndicator;

/**<fim_suffix>
public interface SccpAddress extends Parameter {
    // calling party address
    int CGA_PARAMETER_CODE = 0x4;
    // called party address
    int CDA_PARAMETER_CODE = 0x3;

    boolean isTranslated();

    void setTranslated(boolean translated);

    AddressIndicator getAddressIndicator();

    int getSignalingPointCode();

    int getSubsystemNumber();

    GlobalTitle getGlobalTit<fim_middle>","
 * @author baranowb
 *
 */","
 * SCCP address parameter.
 *
 * @"
"<fim_prefix>/*<fim_suffix>
package ee.ellytr.command.argument.provider;

import ee.ellytr.command.argument.ArgumentProvider;
import org.bukkit.command.CommandSender;

import java.util.List;

public class CharacterProvider implements ArgumentProvider<Character> {

  @Override
  public Character getMatch(String in, CommandSender sender) {
    return in.charAt(0);
  }

  @Override
  public List<String> getSuggesti<fim_middle>","
 * This file is part of EllyCommand.
 *
 * EllyCommand is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * EllyCommand is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with EllyCommand.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by EllyTr on 17/06/14.
 */"
"<fim_prefix>/*<fim_suffix>
package org.cyberiantiger.minecraft.instances.command;

import java.util.List;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.cyberiantiger.minecraft.instances.Instances;

/**
 *
 * @author antony
 */
public class Cmd extends AbstractCommand {

    public Cmd() {
        super(SenderType.PLAYER);
    }

    @Override
    <fim_middle>","
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file,"
"<fim_prefix>/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.cyberiantiger.minecraft.instances.command;

import java.util.List;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.cyberiantiger.minecraft.instances.Instances;

/**<fim_suffix>
public class Cmd extends AbstractCommand {

    public Cmd() {
        super(SenderType.PLAYER);
    }

    @Override
    public List<String> execute(Instances instances, Player player, String[] args) {
        if (args.length != 0)
            return null;

        player.setItemInHand(new ItemStack(Material.COMMAND));
        return msg();
    }
}
<fim_middle>","
 *
 * @author antony
 */","
 *
 * @author akshat666"
"<fim_prefix>/*<fim_suffix>
package es.ugr.osgiliart.primitives;

import java.util.List;

import es.ugr.osgiliart.ArtisticIndividual;
 
public interface Drawer {
	void draw(List<Primitive> list);
	void draw(ArtisticIndividual artistic );
}
<fim_middle>","
 * Drawer.java
 * 
 * Copyright (c) 2013, Pablo Garcia-Sanchez. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 * 
 * Contributors:
 * Daniel Calandria
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>COPYING.  If not, write to
// the Free Software Foundation, Inc., 51 Franklin Street,
// Fifth Floor, Boston, MA 02110-1301 USA.

// Tags: JDK1.5

package gnu.testlet.java.util.IllegalFormatConversionException.classInfo;

import gnu.testlet.TestHarness;
import gnu.testlet.Testlet;

import java.util.IllegalFormatConversionException;
import java.util.Map;
import java.util.HashMap;



/**<fim_suffix>
public class getDeclaredConstructors implements Testlet
{

    /**
     * Runs the test using the specified harness.
     *
     * @param harness  the test harness (<code>null</code> not permitted).
     */
    public void test(TestHarness harness)
    {
        // map of declared constructors which should exists
        Map<String, String> testedDeclaredConstructors = null;

        <fim_middle>","
 * Test for method java.util.IllegalFormatConversionException.getClass().getDeclaredConstructors()
 */","
 * Tests the <code>IllegalFormatConversionException.getDeclaredConstructors()</code> method.
 */"
"<fim_prefix>a.util.IllegalFormatConversionException.classInfo;

import gnu.testlet.TestHarness;
import gnu.testlet.Testlet;

import java.util.IllegalFormatConversionException;
import java.util.Map;
import java.util.HashMap;



/**
 * Test for method java.util.IllegalFormatConversionException.getClass().getDeclaredConstructors()
 */
public class getDeclaredConstructors implements Testlet
{

    /**<fim_suffix>
    public void test(TestHarness harness)
    {
        // map of declared constructors which should exists
        Map<String, String> testedDeclaredConstructors = null;

        // map of declared constructors for (Open)JDK6
        Map<String, String> testedDeclaredConstructors_jdk6 = new HashMap<String, String>();

        // map of declared constructors for (Open)JDK7
        Map<fim_middle>","
     * Runs the test using the specified harness.
     *
     * @param harness  the test harness (<code>null</code> not permitted).
     */","
     * @param harness
     */"
"<fim_prefix>ructor.getName();
            // modifiers + package + class name + parameter types
            String constructorString = declaredConstructor.toString().replaceAll("" native "", "" "");
            harness.check(testedDeclaredConstructors.containsKey(constructorString));
            harness.check(testedDeclaredConstructors.get(constructorString), constructorName);
        }
    }

    /**<fim_suffix>
    protected int getJavaVersion() {
        String javaVersionStr = System.getProperty(""java.version"");
        String[] parts = javaVersionStr.split(""\\."");
        return Integer.parseInt(parts[1]);
    }
}

<fim_middle>","
     * Returns version of Java. The input could have the following form: ""1.7.0_06""
     * and we are interested only in ""7"" in this case.
     * 
     * @return Java version
     */","
     * Returns the Java version as an integer.
     *
     * @return the Java version as an integer.
     */"
"<fim_prefix>package jbse.algo.meta;

/**<fim_suffix>
public final class Algo_JAVA_METHODHANDLENATIVES_SETCALLSITETARGETNORMAL extends Algo_JAVA_METHODHANDLENATIVES_SETCALLSITETARGET {
	public Algo_JAVA_METHODHANDLENATIVES_SETCALLSITETARGETNORMAL() {
		super(""setCallSiteTargetNormal"");
	}
}
<fim_middle>","
 * Meta-level implementation of {@link java.lang.invoke.MethodHandleNatives#setCallSiteTargetNormal(java.lang.invoke.CallSite, java.lang.invoke.MethodHandle)}.
 * 
 * @author Pietro Braione
 */","
 * Meta-level implementation of {@link Algo_JAVA_METHODHANDLENATIVES_SETCALLSITETARGET}.
 * 
 * @author <NAME>
 */"
"<fim_prefix>
package net.vleo.timel.impl.target;

/*<fim_suffix>

import lombok.val;
import net.vleo.timel.impl.intermediate.SyntaxTreeVisitor;
import net.vleo.timel.impl.intermediate.tree.*;
import net.vleo.timel.impl.target.tree.AbstractTargetTree;
import net.vleo.timel.impl.upscaler.Upscaler;
import net.vleo.timel.variable.Variable;

import java.util.stream.Collectors;

/**
 * A visitor that will adapt an {@link AbstractSyntaxTree} into a {@link<fim_middle>","-
 * #%L
 * TimEL core
 * %%
 * Copyright (C) 2015 - 2019 Andrea Leofreddi
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */","*
 * Package private.
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */

import lombok.val;
import net.vleo.timel.impl.intermediate.SyntaxTreeVisitor;
import net.vleo.timel.impl.intermediate.tree.*;
import net.vleo.timel.impl.target.tree.AbstractTargetTree;
import net.vleo.timel.impl.upscaler.Upscaler;
import net.vleo.timel.variable.Variable;

import java.util.stream.Collectors;

/**<fim_suffix>
public class TargetTreeAdapter implements SyntaxTreeVisitor<AbstractTargetTree> {
    @Override
    public AbstractTargetTree visit(Constant constant) {
        return new net.vleo.timel.impl.target.tree.Constant(
                constant,
                (Upscaler<Object>) constant.getType().getUpscaler(),
                constant.getValue()
        );
    }

    @Override
    public<fim_middle>","
 * A visitor that will adapt an {@link AbstractSyntaxTree} into a {@link AbstractTargetTree}.
 *
 * @author Andrea Leofreddi
 */","
 * Created by <NAME> on 12/12/2016.
 *
 * @author <NAME> <<EMAIL>>
 * @since 0.1.0"
"<fim_prefix>on;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Plugin;
import org.eclipse.core.runtime.Status;
import org.osgi.framework.BundleContext;

import org.eclipse.rcptt.tesla.ecl.impl.TeslaBridge;

public class TeslaImplPlugin extends Plugin {
	public static final String PLUGIN_ID = ""org.eclipse.rcptt.tesla.ecl.impl"";
	private static TeslaImplPlugin plugin;

	/**<fim_suffix>
	public TeslaImplPlugin() {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.core.runtime.Plugins#start(org.osgi.framework.BundleContext)
	 */
	@Override
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.core.runtime.Plugin#stop(org.osgi.framework.BundleContext)
	 */
	@Ov<fim_middle>","
	 * The constructor
	 */","
	 * The constructor
	 */"
"<fim_prefix>leContext context) throws Exception {
		super.start(context);
		plugin = this;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.core.runtime.Plugin#stop(org.osgi.framework.BundleContext)
	 */
	@Override
	public void stop(BundleContext context) throws Exception {
		TeslaBridge.shutdown(); // Need for test cases that use AUT restart
		plugin = null;
		super.stop(context);
	}

	/**<fim_suffix>
	public static TeslaImplPlugin getDefault() {
		return plugin;
	}

	public static IStatus err(String message) {
		return err(message, null);
	}

	public static IStatus err(String message, Throwable throwable) {
		return new Status(IStatus.ERROR, PLUGIN_ID, message, throwable);
	}

	public static void log(IStatus status) {
		getDefault().getLog().log(status);
	}

	public static CoreExc<fim_middle>","
	 * Returns the shared instance
	 * 
	 * @return the shared instance
	 */","
	 * Returns the shared instance
	 * 
	 * @return the shared instance
	 */"
"<fim_prefix>se.core.runtime.Plugin;
import org.eclipse.core.runtime.Status;
import org.osgi.framework.BundleContext;

import org.eclipse.rcptt.tesla.ecl.impl.TeslaBridge;

public class TeslaImplPlugin extends Plugin {
	public static final String PLUGIN_ID = ""org.eclipse.rcptt.tesla.ecl.impl"";
	private static TeslaImplPlugin plugin;

	/**
	 * The constructor
	 */
	public TeslaImplPlugin() {
	}

	/*<fim_suffix>
	@Override
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.core.runtime.Plugin#stop(org.osgi.framework.BundleContext)
	 */
	@Override
	public void stop(BundleContext context) throws Exception {
		TeslaBridge.shutdown(); // Need for test cases that use AUT restart
		plugin = nu<fim_middle>","
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.core.runtime.Plugins#start(org.osgi.framework.BundleContext)
	 */","*
	 * This method is called upon plug-in activation
	 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.rcptt.tesla.ecl.internal.impl;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Plugin;
import org.eclipse.core.runtime.Status;
import org.osgi.framework.BundleContext;

import org.eclipse.rcptt.tesla.ecl.impl.TeslaBridge;

public class TeslaImplPlugin extends Plugin {
	public static final Stri<fim_middle>","*****************************************************************************
 * Copyright (c) 2009, 2019 Xored Software Inc and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * Contributors:
 *     Xored Software Inc - initial API and implementation and/or initial documentation
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>LUGIN_ID = ""org.eclipse.rcptt.tesla.ecl.impl"";
	private static TeslaImplPlugin plugin;

	/**
	 * The constructor
	 */
	public TeslaImplPlugin() {
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.core.runtime.Plugins#start(org.osgi.framework.BundleContext)
	 */
	@Override
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
	}

	/*<fim_suffix>
	@Override
	public void stop(BundleContext context) throws Exception {
		TeslaBridge.shutdown(); // Need for test cases that use AUT restart
		plugin = null;
		super.stop(context);
	}

	/**
	 * Returns the shared instance
	 * 
	 * @return the shared instance
	 */
	public static TeslaImplPlugin getDefault() {
		return plugin;
	}

	public static IStatus err(String message) {
		return er<fim_middle>","
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.core.runtime.Plugin#stop(org.osgi.framework.BundleContext)
	 */","
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.core.runtime.Plugins#stop(org.osgi.framework.BundleContext)
	 */"
"<fim_prefix>/**<fim_suffix>
package codemate.Fortran;

public class Template {
    public enum Action {
        REPLACE, PREPEND, APPEND
    }

    private int type; // see rule index in FortranParser
    private Action action;
    
    public Template(int type, Action action) {
        this.type = type;
        this.action = action;
    }

    public int getType() { return type; }

    public Action getAction()<fim_middle>","*****************************************************************************
 * Copyright (c) 2013 Li Dong.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors:
 *     Li Dong - initial API and implementation
 ******************************************************************************/","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package io.olvid.engine.networkfetch.datatypes;


import io.olvid.engine.datatypes.Identity;

public interface RegisterServerPushNotificationDelegate {
    void registerServerPushNotification(Identity identity, boolean triggerAnOwnedDeviceDiscoveryWhenFinished);
}
<fim_middle>","
 *  Olvid for Android
 *  Copyright Â© 2019-2024 Olvid SAS
 *
 *  This file is part of Olvid for Android.
 *
 *  Olvid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License, version 3,
 *  as published by the Free Software Foundation.
 *
 *  Olvid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with Olvid.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by Olga on 10/10/2016.
 */"
"<fim_prefix>/*<fim_suffix>
package com.bompotis.netcheck.service.dto;

/**
 * Created by Kyriakos Bompotis on 7/9/20.
 */
public interface DtoBuilder<T> {
    T build();
}
<fim_middle>","
 * Copyright 2020 the original author or authors.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by Kyriakos Bompotis on 7/9/20.
 */"
"<fim_prefix> be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package com.bompotis.netcheck.service.dto;

/**<fim_suffix>
public interface DtoBuilder<T> {
    T build();
}
<fim_middle>","
 * Created by Kyriakos Bompotis on 7/9/20.
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package ancienttiles;

import ancienttiles.griddisplay.TileDisplay.MessageCallback;
import ancienttiles.tiles.ai.ArtificialIntelligence;
import ancienttiles.tiles.ai.MovingHostileAI;
import java.awt.Graphics;
import java.awt.Image;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JComponent;

/**
 *
 * @author krr428
 */
public class GlowGlyphTile extends ArtificialI<fim_middle>","
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */","*
 *
 * @author krr428
 */"
"<fim_prefix>te, choose Tools | Templates
 * and open the template in the editor.
 */
package ancienttiles;

import ancienttiles.griddisplay.TileDisplay.MessageCallback;
import ancienttiles.tiles.ai.ArtificialIntelligence;
import ancienttiles.tiles.ai.MovingHostileAI;
import java.awt.Graphics;
import java.awt.Image;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JComponent;

/**<fim_suffix>
public class GlowGlyphTile extends ArtificialIntelligence implements RestrictedMovementTile, CustomRenderingTile
{

    private AbstractGameManager gameManager = null;
    private String ourLayer = null;
    private Set<MessageCallback> callbacks = null;
    private TileRenderer tileRenderingService = null;


    public GlowGlyphTile(Image i)
    {
        super(i);        
    }

   <fim_middle>","
 *
 * @author krr428
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package org.xacml4j.v30.spi.pip;

/*<fim_suffix>

import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xacml4j.util.DOMUtil;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import com.google.common.base.Preconditions;
import com.google.common.base.Ticker;

public final class Content
{
	private Node content;
	private ContentResolverDescriptor d;
	private long timestamp;

	private Content(<fim_middle>","
 * #%L
 * Xacml4J Core Engine Implementation
 * %%
 * Copyright (C) 2009 - 2014 Xacml4J.org
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */","*
 * A content element.
 */"
"<fim_prefix>/*<fim_suffix>

package main;

import java.io.PrintStream;
import main.MessageManager.MessageCategories;
import main.MessageManager.MessageTypes;

/**
 *
 * @author sylvester
 */
public class CommandlineOutputManager implements MessageManager.MessageReceiver {

	private static CommandlineOutputManager instance;

	public static void initialize() {
		if (CommandlineOutputManager.instance == null) {
		<fim_middle>","
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */","*
 *
 * @author sylvester
 */"
"<fim_prefix>/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package main;

import java.io.PrintStream;
import main.MessageManager.MessageCategories;
import main.MessageManager.MessageTypes;

/**<fim_suffix>
public class CommandlineOutputManager implements MessageManager.MessageReceiver {

	private static CommandlineOutputManager instance;

	public static void initialize() {
		if (CommandlineOutputManager.instance == null) {
			CommandlineOutputManager.instance = new CommandlineOutputManager();
			MessageManager.getInstance().addReceiver(CommandlineOutputManager.instance);
			MessageManag<fim_middle>","
 *
 * @author sylvester
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package net.mtrop.doom.map.udmf.attributes;<fim_middle>","
 * Contains interfaces for common UDMF namespace attributes.
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package Hardware.Timer;



public interface TimerOutputListener {
    
    void onTimerOutputChanged(boolean newOut, boolean oldOut);
}
<fim_middle>","
 * Copyright (C) 2017 h0MER247
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package org.sonarsource.sonarlint.core.commons.progress;

import java.util.Deque;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ConcurrentLinkedDeque;

public class SonarLintCancelMonitor {

  private boolean canceled;
  private final Deque<Runnable> downstreamCancelAction = new ConcurrentLinkedDeque<>();

  public synchronized void cancel() {
    canc<fim_middle>","
 * SonarLint Core - Commons
 * Copyright (C) 2016-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */","*
 * Copyright SonarSource SA and Microsoft Corporation.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License.
 * See LICENSE.txt in the project root for license information.
 * See ACKNOWLEDGEMENTS.txt for additional notices.
 */"
"<fim_prefix>package macbury.pod.fragments.main.episodes;

import java.util.ArrayList;
import java.util.List;

import macbury.pod.adapters.EpisodesAdapter;
import macbury.pod.db.models.EnqueueEpisode;
import macbury.pod.db.models.Episode;
import macbury.pod.fragments.main.AbstractEpisodesFragment;
import macbury.pod.managers.App;

/**<fim_suffix>
public class PlaylistFragment extends AbstractEpisodesFragment {

  @Override
  public void onResume() {
    super.onResume();
    episodeAdapter.setMode(EpisodesAdapter.ActionMode.Trash);
  }

  @Override
  public List<Episode> getEpisodes() {
    ArrayList<Episode> episodes = new ArrayList<Episode>();
    for(EnqueueEpisode item : app.db.queue.pendingToPlay()) {
      episodes.add(i<fim_middle>","
 * Created by macbury on 23.09.14.
 */","
 * Created by macbury on 15.08.15.
 */"
"<fim_prefix>  @Override
    public void startSensors() {
        histogramBuilder = new HistogramBuilder(""my histo"", maxAge);

        wifiReceiver = new WifiReceiver();
        activity.registerReceiver(wifiReceiver, new IntentFilter(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION));

        wifi = (WifiManager) activity.getSystemService(activity.WIFI_SERVICE);
        wifi.startScan();
    }

    /**<fim_suffix>
    @Override
    public void stopSensors() {
        if(wifiReceiver == null){
            return;
        }
        try {
            activity.unregisterReceiver(wifiReceiver);
        } catch (IllegalArgumentException e){
            Log.e(TAG, ""The reciever was not registered or already unregistered: ""+e.getMessage());
        }
    }


    /**
     * The callback-class that will <fim_middle>","
     * Stop scanning. Don't receive scan results. That means we don't start any new scans either, because that would
     * happen in onReceive.
     * TODO: test what happens when stopSensors is called before startSensors.
     */","
     * The callback-class that will be called when the sensors are stopped.  Fixed a bug in the WifiSensor  package com.github.pwittchen.neurosky.app;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context"
"<fim_prefix>et.wifi.ScanResult;
import android.net.wifi.WifiManager;
import android.util.Log;
import de.tarent.nic.android.base.sensor.SensorCollector;
import de.tarent.nic.entities.Histogram;
import de.tarent.nic.entities.WifiScanResult;
import de.tarent.nic.tracker.wifi.HistogramBuilder;
import de.tarent.nic.tracker.wifi.HistogramConsumer;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class WifiCapturer implements SensorCollector {

    public static final String TAG =""WifiCapturer"";

    /**
     * How many scans we want to do, unless we are in ""continuous-scanning-mode"" (i.e. have not ProgressDialog):
     */
    public static final int NUMBER_SCANS = 5;

    private Activity activity;

    /**
     * The progressDialog will be used to signal the progress <fim_middle>","
 * The WifiCapturer captures wifi-histograms. It will work in the background, but it will continuously update an
 * optional ProgressDialog and will add the histogram to a HistogramConsumer. When it has collected enough scan results
 * it will dismiss the ProgressDialog.
 * The WifiCapturer has two modes:
 * - fingerprint-mode, for the offline-phase, where it does a number of scans, produces one histogram, and then stops.
 * - continuous-mode, for the online-phase, where it goes on scanning and producing histograms until it is stopped.
 * The mode is selected via the ProgressDialog-parameter. If it is null then continuous-mode is selected.
 *
 * TODO:
 * - the number of scans could be made configurable.
 * - there should be a configurable timeout, in case the scanning takes much longer than expected.
 */","
 * Created by tarent on 10.04.14.
 */"
"<fim_prefix>HistogramConsumer fingerprintHistogramConsumer;

    private HistogramConsumer trackinghistogramConsumer;

    private HistogramBuilder histogramBuilder;

    private WifiManager wifi;

    /**
     * The maximum age in milliseconds that a scanresult may have to be included in the histogram.
     * A maxAge of 0 is used to disable age-filtering.
     */
    private int maxAge;

    /**<fim_suffix>
    private WifiReceiver wifiReceiver;


    /**
     * Construct a new WifiCapturer for a specific Activity. This constructor cannot be used for tracking, only for
     * making fingerprints!
     * @param activity the Activity which will be used for Context and to run UI-stuff on.
     */
    public WifiCapturer(final Activity activity) {
        this.activity = activity;
        th<fim_middle>","
     * The WifiReceiver will receive the scanresults from the WifiManager. We register it with the activity and
     * unregister it again, when we are done.
     */","
     * The minimum age in milliseconds that a scanresult may have to be included in the histogram.
     * A minAge of 0 is used to disable age-filtering.
   "
"<fim_prefix>e in milliseconds that a scanresult may have to be included in the histogram.
     * A maxAge of 0 is used to disable age-filtering.
     */
    private int maxAge;

    /**
     * The WifiReceiver will receive the scanresults from the WifiManager. We register it with the activity and
     * unregister it again, when we are done.
     */
    private WifiReceiver wifiReceiver;


    /**<fim_suffix>
    public WifiCapturer(final Activity activity) {
        this.activity = activity;
        this.maxAge = 0;
    }

    /**
     * Construct a new WifiCapturer for a specific Activity.
     * @param activity the Activity which will be used for Context and to run UI-stuff on.
     * @param consumer the HistogramConsumer that needs the results that we generate periodically.
     * @par<fim_middle>","
     * Construct a new WifiCapturer for a specific Activity. This constructor cannot be used for tracking, only for
     * making fingerprints!
     * @param activity the Activity which will be used for Context and to run UI-stuff on.
     */","
     * Construct a new WifiCapturer for a specific Activity.
     * @param activity the Activity which will be used for Context and to run UI-stuff on.
     * @param consumer the HistogramConsumer that needs the results that we generate periodically.
    "
"<fim_prefix>iReceiver;


    /**
     * Construct a new WifiCapturer for a specific Activity. This constructor cannot be used for tracking, only for
     * making fingerprints!
     * @param activity the Activity which will be used for Context and to run UI-stuff on.
     */
    public WifiCapturer(final Activity activity) {
        this.activity = activity;
        this.maxAge = 0;
    }

    /**<fim_suffix>
    public WifiCapturer(final Activity activity, final HistogramConsumer consumer, final int maxAge) {
        this.activity = activity;
        this.trackinghistogramConsumer = consumer;
        this.maxAge = maxAge;
    }

    /**
     * Start the scanning-process. Should not be called a second time before the asynchronous scanning-process has
     * finished or has been stopped exp<fim_middle>","
     * Construct a new WifiCapturer for a specific Activity.
     * @param activity the Activity which will be used for Context and to run UI-stuff on.
     * @param consumer the HistogramConsumer that needs the results that we generate periodically.
     * @param maxAge the maximum age in milliseconds that a scanresult may have to be included in the histogram.
     *               A maxAge of 0 is used to disable age-filtering.
     */","
     * Construct a new WifiCapturer for a specific Activity. This constructor cannot be used for tracking, only for
     * making fingerprints!
     * @param activity the Activity which will be used for Context and to run UI-stuff on.
     * @param consumer the consumer which will receive the fingerprints.
     */"
"<fim_prefix>ge in milliseconds that a scanresult may have to be included in the histogram.
     *               A maxAge of 0 is used to disable age-filtering.
     */
    public WifiCapturer(final Activity activity, final HistogramConsumer consumer, final int maxAge) {
        this.activity = activity;
        this.trackinghistogramConsumer = consumer;
        this.maxAge = maxAge;
    }

    /**<fim_suffix>
    public void makeFingerprint(final  ProgressDialog progressDialog, final HistogramConsumer consumer) {
        this.progressDialog = progressDialog;
        this.fingerprintHistogramConsumer = consumer;

        startSensors();
    }

    @Override
    public void startSensors() {
        histogramBuilder = new HistogramBuilder(""my histo"", maxAge);

        wifiReceiver = new WifiR<fim_middle>","
     * Start the scanning-process. Should not be called a second time before the asynchronous scanning-process has
     * finished or has been stopped explicitly.
     *
     * @param progressDialog a ProgressDialog to which the WifiCapturer can report its progress and which it can
     *                        dismiss, when it has finished scanning.
     * @param consumer the HistogramConsumer that will be called with the collected histogram.
     * TODO: if startScan is called a second time before stopScan we might leak a WifiReceiver.
     */","
     * Starts the fingerprint capturer.
     *
     * @param progressDialog The progress dialog to show while the fingerprint is being captured.
     * @param consumer       The consumer to use for the fingerprint histogram.
     */"
"<fim_prefix>s called before startSensors.
     */
    @Override
    public void stopSensors() {
        if(wifiReceiver == null){
            return;
        }
        try {
            activity.unregisterReceiver(wifiReceiver);
        } catch (IllegalArgumentException e){
            Log.e(TAG, ""The reciever was not registered or already unregistered: ""+e.getMessage());
        }
    }


    /**<fim_suffix>
    class WifiReceiver extends BroadcastReceiver {

        /**
         * This method will be called by the Android-System when the WifiManager has completed a scan.
         *
         * @param c      ignored. We already have our parent-Activity.
         * @param intent ignored. We are only registered for one type of action and we know what to do.
         */
        @Override
    <fim_middle>","
     * The callback-class that will receive the SCAN_RESULTS_AVAILABLE_ACTION notifications. It will integrate the
     * scan results into the Capturers HistogramBuilder and will start a new scan, until the planned scan-number
     * is reached.
     */","
     * This class is used to receive the Wifi-State-Changes.
     */"
"<fim_prefix>t ProgressDialog):
     */
    public static final int NUMBER_SCANS = 5;

    private Activity activity;

    /**
     * The progressDialog will be used to signal the progress back to the UI and to count our scans.
     * If we don't have one then nobody will be informed of the progress and we won't stop scanning by ourselves.
     */
    private ProgressDialog progressDialog;

    /**<fim_suffix>
    private HistogramConsumer fingerprintHistogramConsumer;

    private HistogramConsumer trackinghistogramConsumer;

    private HistogramBuilder histogramBuilder;

    private WifiManager wifi;

    /**
     * The maximum age in milliseconds that a scanresult may have to be included in the histogram.
     * A maxAge of 0 is used to disable age-filtering.
     */
    private int max<fim_middle>","
     * We will hand the new histograms to this consumer. If we have a ProgressDialog then this will happen at the end.
     * If we don't have a ProgressDialog we are in continuous-background-scanning-mode and will produce a new histogram
     * after each scan.
     */","
     * The fingerprintConsumer will be used to send the fingerprint data to the fingerprint histogram.
     */"
"<fim_prefix>eout, in case the scanning takes much longer than expected.
 */
public class WifiCapturer implements SensorCollector {

    public static final String TAG =""WifiCapturer"";

    /**
     * How many scans we want to do, unless we are in ""continuous-scanning-mode"" (i.e. have not ProgressDialog):
     */
    public static final int NUMBER_SCANS = 5;

    private Activity activity;

    /**<fim_suffix>
    private ProgressDialog progressDialog;

    /**
     * We will hand the new histograms to this consumer. If we have a ProgressDialog then this will happen at the end.
     * If we don't have a ProgressDialog we are in continuous-background-scanning-mode and will produce a new histogram
     * after each scan.
     */
    private HistogramConsumer fingerprintHistogramConsumer;

   <fim_middle>","
     * The progressDialog will be used to signal the progress back to the UI and to count our scans.
     * If we don't have one then nobody will be informed of the progress and we won't stop scanning by ourselves.
     */","
     * We will hand the new histograms to this consumer. If we have a ProgressDialog then this will happen at the end.
     * If we don't have a ProgressDialog we are in continuous-background-scanning-mode and will produce a new histogram
"
"<fim_prefix>or already unregistered: ""+e.getMessage());
        }
    }


    /**
     * The callback-class that will receive the SCAN_RESULTS_AVAILABLE_ACTION notifications. It will integrate the
     * scan results into the Capturers HistogramBuilder and will start a new scan, until the planned scan-number
     * is reached.
     */
    class WifiReceiver extends BroadcastReceiver {

        /**<fim_suffix>
        @Override
        public void onReceive(final Context c, final Intent intent) {
            final List<ScanResult> scan = wifi.getScanResults();

            histogramBuilder.addScanResults(copyScanResults(scan));

            // Without a progressDialog we will just keep on scanning until stopScan() has turned off the callbacks to
            // this method.
            if (p<fim_middle>","
         * This method will be called by the Android-System when the WifiManager has completed a scan.
         *
         * @param c      ignored. We already have our parent-Activity.
         * @param intent ignored. We are only registered for one type of action and we know what to do.
         */","
         * The method that will be called when a new scan-result is available.
         *
         * @param c                                                            "
"<fim_prefix>       */
        private List<WifiScanResult> copyScanResults(List<ScanResult> scanResults) {
            final List<WifiScanResult> wifiScanResults = new ArrayList<WifiScanResult>();
            for (ScanResult scan : scanResults) {
                wifiScanResults.add(new WifiScanResult(scan.BSSID, scan.level));
            }
            return wifiScanResults;
        }

        /**<fim_suffix>
        private void progress() {
            final int max = progressDialog.getMax();
            final int newProgress = progressDialog.getProgress() + (max / NUMBER_SCANS);
            if (newProgress < max) {
                doAnotherIteration(newProgress);
            } else {
                finishScanning();
            }
        }

        private void finishScanning() {
     <fim_middle>","
         * Progress to the next step in fingerprint-mode: either do another scan, or finish scanning, depending on what
         * the currently recorded progress says.
         */","
         * Do another iteration of the scan.
         *
         * @param progress The new progress.
         */"
"<fim_prefix>n this will happen at the end.
     * If we don't have a ProgressDialog we are in continuous-background-scanning-mode and will produce a new histogram
     * after each scan.
     */
    private HistogramConsumer fingerprintHistogramConsumer;

    private HistogramConsumer trackinghistogramConsumer;

    private HistogramBuilder histogramBuilder;

    private WifiManager wifi;

    /**<fim_suffix>
    private int maxAge;

    /**
     * The WifiReceiver will receive the scanresults from the WifiManager. We register it with the activity and
     * unregister it again, when we are done.
     */
    private WifiReceiver wifiReceiver;


    /**
     * Construct a new WifiCapturer for a specific Activity. This constructor cannot be used for tracking, only for
     * making fingerpri<fim_middle>","
     * The maximum age in milliseconds that a scanresult may have to be included in the histogram.
     * A maxAge of 0 is used to disable age-filtering.
     */","
     * The maximum age of a fingerprint in seconds. Fingerprints older than this will be discarded."
"<fim_prefix> on scanning until stopScan() has turned off the callbacks to
            // this method.
            if (progressDialog == null) {
                final Histogram histogram = histogramBuilder.build();
                trackinghistogramConsumer.addHistogram(histogram);
                wifi.startScan();
            } else {
                progress();
            }
        }

        /**<fim_suffix>
        private List<WifiScanResult> copyScanResults(List<ScanResult> scanResults) {
            final List<WifiScanResult> wifiScanResults = new ArrayList<WifiScanResult>();
            for (ScanResult scan : scanResults) {
                wifiScanResults.add(new WifiScanResult(scan.BSSID, scan.level));
            }
            return wifiScanResults;
        }

        /**
        <fim_middle>","
         * Copy a list of android ScanResult into a list of our own WifiScanResult.
         * @param scanResults the List of scan results that the WifiManager supplied.
         * @return a List of our platform independent WifiScanResult
         */","
         * Stops the scan.
         */"
"<fim_prefix> The mode is selected via the ProgressDialog-parameter. If it is null then continuous-mode is selected.
 *
 * TODO:
 * - the number of scans could be made configurable.
 * - there should be a configurable timeout, in case the scanning takes much longer than expected.
 */
public class WifiCapturer implements SensorCollector {

    public static final String TAG =""WifiCapturer"";

    /**<fim_suffix>
    public static final int NUMBER_SCANS = 5;

    private Activity activity;

    /**
     * The progressDialog will be used to signal the progress back to the UI and to count our scans.
     * If we don't have one then nobody will be informed of the progress and we won't stop scanning by ourselves.
     */
    private ProgressDialog progressDialog;

    /**
     * We will hand the n<fim_middle>","
     * How many scans we want to do, unless we are in ""continuous-scanning-mode"" (i.e. have not ProgressDialog):
     */","
     * The progressDialog will be used to signal the progress back to the UI and to count our scans.
     * If we don't have one then nobody will"
"<fim_prefix> java.util.*;
import javax.swing.*;
import javax.swing.tree.*;

public class ETree extends JTree {
    /** Constructs a new tree with the given root. */
    public ETree(DefaultTreeModel model) {
        super(model);
    }

    /** Expands all the nodes in this tree. */
    public void expandAll() {
        expandOrCollapsePath(new TreePath(getModel().getRoot()), true);
    }

    /**<fim_suffix>
    public void collapseAll() {
        expandOrCollapsePath(new TreePath(getModel().getRoot()), false);
    }
    
    /** Expands or collapses all nodes beneath the given path represented as an array of nodes. */
    public void expandOrCollapsePath(TreeNode[] nodes, boolean expand) {
        expandOrCollapsePath(new TreePath(nodes), expand);
    }
    
    /** Expands or collapses <fim_middle>", Collapses all the nodes in this tree. */, Expands or collapses all nodes beneath the given
"<fim_prefix>Tree(DefaultTreeModel model) {
        super(model);
    }

    /** Expands all the nodes in this tree. */
    public void expandAll() {
        expandOrCollapsePath(new TreePath(getModel().getRoot()), true);
    }

    /** Collapses all the nodes in this tree. */
    public void collapseAll() {
        expandOrCollapsePath(new TreePath(getModel().getRoot()), false);
    }
    
    /**<fim_suffix>
    public void expandOrCollapsePath(TreeNode[] nodes, boolean expand) {
        expandOrCollapsePath(new TreePath(nodes), expand);
    }
    
    /** Expands or collapses all nodes beneath the given path. */
    private void expandOrCollapsePath(TreePath parent, boolean expand) {
        TreeNode node = (TreeNode) parent.getLastPathComponent();
        if (node.getChildCount() >= 0) <fim_middle>", Expands or collapses all nodes beneath the given path represented as an array of nodes. */, Expands or collapses all nodes beneath the given path. */
"<fim_prefix>Enumeration<?> e = node.children(); e.hasMoreElements(); ) {
                TreeNode n = (TreeNode) e.nextElement();
                TreePath path = parent.pathByAddingChild(n);
                expandOrCollapsePath(path, expand);
            }
        }
        if (expand) {
            expandPath(parent);
        } else {
            collapsePath(parent);
        }
    }
    
    /**<fim_suffix>
    public void selectNodesMatching(String string, boolean ensureVisible) {
        TreePath path = new TreePath(getModel().getRoot());
        selectNodesMatching(path, string.toLowerCase());
        if (ensureVisible) {
            scrollPathToVisible(getSelectionPath());
        }
    }
    
    private void selectNodesMatching(TreePath parent, String string) {
        TreeNode nod<fim_middle>","
     * Selects the nodes matching the given string. The matching is
     * a case-insensitive substring match. The selection is not cleared
     * first; you must do this yourself if it's the behavior you want.
     * 
     * If ensureVisible is true, the first selected node in the model
     * will be made visible via scrollPathToVisible.
     */","
     * Expands the given path.
     * @param path the path to expand
     */"
"<fim_prefix>nodes in this tree. */
    public void collapseAll() {
        expandOrCollapsePath(new TreePath(getModel().getRoot()), false);
    }
    
    /** Expands or collapses all nodes beneath the given path represented as an array of nodes. */
    public void expandOrCollapsePath(TreeNode[] nodes, boolean expand) {
        expandOrCollapsePath(new TreePath(nodes), expand);
    }
    
    /**<fim_suffix>
    private void expandOrCollapsePath(TreePath parent, boolean expand) {
        TreeNode node = (TreeNode) parent.getLastPathComponent();
        if (node.getChildCount() >= 0) {
            for (Enumeration<?> e = node.children(); e.hasMoreElements(); ) {
                TreeNode n = (TreeNode) e.nextElement();
                TreePath path = parent.pathByAddingChild(n);
           <fim_middle>", Expands or collapses all nodes beneath the given path. */, Expands or collapses all nodes beneath the given path. */
"<fim_prefix> for (Enumeration<?> e = node.children(); e.hasMoreElements(); ) {
                TreeNode n = (TreeNode) e.nextElement();
                TreePath path = parent.pathByAddingChild(n);
                selectNodesMatching(path, string);
            }
        }
        if (node.toString().toLowerCase().contains(string)) {
            addSelectionPath(parent);
        }
    }
    
    /**<fim_suffix>
    public void scrollPathToVisible(TreePath path) {
        if (path == null) {
            return;
        }
        makeVisible(path);
        Rectangle pathBounds = getPathBounds(path);
        if (pathBounds != null) {
            Rectangle visibleRect = getVisibleRect();
            if (getHeight() > visibleRect.height) {
                int y = pathBounds.y - visibleRect.height<fim_middle>", Scrolls the path to the middle of the scroll pane. */,"
     * Selects the node at the specified"
"<fim_prefix>
        if (pathBounds != null) {
            Rectangle visibleRect = getVisibleRect();
            if (getHeight() > visibleRect.height) {
                int y = pathBounds.y - visibleRect.height / 2;
                visibleRect.y = Math.min(Math.max(0, y), getHeight() - visibleRect.height);
                scrollRectToVisible(visibleRect);
            }
        }
    }
    
    /**<fim_suffix>
    public Dimension getPreferredScrollableViewportSize() {
        Dimension size = super.getPreferredScrollableViewportSize();
        size.width = getMinimumSize().width;
        return size;
    }
}
<fim_middle>","
     * Makes JTree's implementation less width-greedy. Left to JTree, we'll
     * grow to be wide enough to show our widest node without using a scroll
     * bar. While this is seemingly widely acceptable (ho ho), it's no good
     * in Evergreen's ""Find in Files"" dialog. If long lines match, next time you
     * open the dialog, it can be so wide it doesn't fit on the screen. Here,
     * we go for the minimum width, and assume that an ETree is never packed
     * on its own (in which case, it might end up rather narrow by default).
     */","
     * @see javax.swing.JViewport#getExtentSize()
     */"
"<fim_prefix>package e.gui;

import java.awt.*;
import java.util.*;
import javax.swing.*;
import javax.swing.tree.*;

public class ETree extends JTree {
    /**<fim_suffix>
    public ETree(DefaultTreeModel model) {
        super(model);
    }

    /** Expands all the nodes in this tree. */
    public void expandAll() {
        expandOrCollapsePath(new TreePath(getModel().getRoot()), true);
    }

    /** Collapses all the nodes in this tree. */
    public void collapseAll() {
        expandOrCollapsePath(new TreePath(getModel().getRoot()), false);
    }<fim_middle>", Constructs a new tree with the given root. */,"
     * Creates a new tree"
"<fim_prefix>package e.gui;

import java.awt.*;
import java.util.*;
import javax.swing.*;
import javax.swing.tree.*;

public class ETree extends JTree {
    /** Constructs a new tree with the given root. */
    public ETree(DefaultTreeModel model) {
        super(model);
    }

    /**<fim_suffix>
    public void expandAll() {
        expandOrCollapsePath(new TreePath(getModel().getRoot()), true);
    }

    /** Collapses all the nodes in this tree. */
    public void collapseAll() {
        expandOrCollapsePath(new TreePath(getModel().getRoot()), false);
    }
    
    /** Expands or collapses all nodes beneath the given path represented as an array of nodes. */
    public voi<fim_middle>", Expands all the nodes in this tree. */, Expands or collapses all nodes beneath the given
"<fim_prefix>or receiving discovery events.
 * <p>
 * A class that is interested in processing discovery events fired synchronously by a {@link DiscoveryService} has to
 * implement this interface.
 *
 * @author Michael Grammling - Initial Contribution.
 * @author Andre Fuechsel - Added removeOlderThings
 *
 * @see DiscoveryService
 */
@NonNullByDefault
public interface DiscoveryListener {

    /**<fim_suffix>
    void thingDiscovered(DiscoveryService source, DiscoveryResult result);

    /**
     * Invoked synchronously when an already existing {@code Thing} has been
     * marked to be deleted by the according {@link DiscoveryService}.
     * <p>
     * <i>Hint:</i> This method could even be invoked for {@link DiscoveryResult}s, whose removal has already been
     * informed about.
     *<fim_middle>","
     * Invoked synchronously when a {@link DiscoveryResult} has been created
     * by the according {@link DiscoveryService}.
     * <p>
     * <i>Hint:</i> This method could even be invoked for {@link DiscoveryResult}s, whose existence has already been
     * informed about.
     *
     * @param source the discovery service which is the source of this event (not null)
     * @param result the discovery result (not null)
     */","
     * Invoked synchronously when a new {@code Thing} has been discovered by the according {@link DiscoveryService}.
     * <p>
     * <i>Hint:</i> This method could even be invoked for {@link DiscoveryResult}s, whose addition has already been
     * informed about.
     *
     * @param source the {@link DiscoveryService} that has discovered the {@code Thing}
     * @param result the {@link DiscoveryResult} that contains the {@code Thing}
     */"
"<fim_prefix>   * <p>
     * <i>Hint:</i> This method could even be invoked for {@link DiscoveryResult}s, whose existence has already been
     * informed about.
     *
     * @param source the discovery service which is the source of this event (not null)
     * @param result the discovery result (not null)
     */
    void thingDiscovered(DiscoveryService source, DiscoveryResult result);

    /**<fim_suffix>
    void thingRemoved(DiscoveryService source, ThingUID thingUID);

    /**
     * Removes all results belonging to one of the given types that are older
     * than the given timestamp.
     *
     * @param source the discovery service which is the source of this event (not
     *            null)
     * @param timestamp timestamp, all <b>older</b> results will be removed
     * @par<fim_middle>","
     * Invoked synchronously when an already existing {@code Thing} has been
     * marked to be deleted by the according {@link DiscoveryService}.
     * <p>
     * <i>Hint:</i> This method could even be invoked for {@link DiscoveryResult}s, whose removal has already been
     * informed about.
     *
     * @param source the discovery service which is the source of this event (not null)
     * @param thingUID the Thing UID to be removed (not null)
     */","
     * Removes the given result from the discovery service.
     *
     * @param source the discovery service which is the source of this event (not
     *            null)
     * @param result the discovery result (not null)
     */"
"<fim_prefix>    * @deprecated use {@link #removeOlderResults(DiscoveryService, long, Collection, ThingUID)} instead
     */
    @Deprecated
    @Nullable
    default Collection<ThingUID> removeOlderResults(DiscoveryService source, long timestamp,
            @Nullable Collection<ThingTypeUID> thingTypeUIDs) {
        return removeOlderResults(source, timestamp, thingTypeUIDs, null);
    }

    /**<fim_suffix>
    @Nullable
    Collection<ThingUID> removeOlderResults(DiscoveryService source, long timestamp,
            @Nullable Collection<ThingTypeUID> thingTypeUIDs, @Nullable ThingUID bridgeUID);

}
<fim_middle>","
     * Removes all results belonging to one of the given types that are older
     * than the given timestamp.
     *
     * @param source the discovery service which is the source of this event (not
     *            null)
     * @param timestamp timestamp, all <b>older</b> results will be removed
     * @param thingTypeUIDs collection of {@code ThingType}s, only results of these
     *            {@code ThingType}s will be removed; if {@code null} then
     *            {@link DiscoveryService#getSupportedThingTypes()} will be used
     *            instead
     * @param bridgeUID if not {@code null} only results of that bridge are being removed
     * @return collection of thing UIDs of all removed things
     */","
     * Remove older results from the discovery service.
     *
     * @param source                                                                                                                                                                                                                               "
"<fim_prefix>/**<fim_suffix>
package org.eclipse.smarthome.config.discovery;

import java.util.Collection;

import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.smarthome.core.thing.ThingTypeUID;
import org.eclipse.smarthome.core.thing.ThingUID;

/**
 * The {@link DiscoveryListener} interface for receiving discovery events.
 * <p>
 * A class that is in<fim_middle>","
 * Copyright (c) 2014,2019 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","
 * The {@link DiscoveryListener} interface for receiving discovery events.
 * <p>
 * A class that is in charge of receiving discovery events.  Remove unused import  /*
 * Copyright 2015-2016 <NAME> (<EMAIL>)
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may"
"<fim_prefix>which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.smarthome.config.discovery;

import java.util.Collection;

import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.smarthome.core.thing.ThingTypeUID;
import org.eclipse.smarthome.core.thing.ThingUID;

/**<fim_suffix>
@NonNullByDefault
public interface DiscoveryListener {

    /**
     * Invoked synchronously when a {@link DiscoveryResult} has been created
     * by the according {@link DiscoveryService}.
     * <p>
     * <i>Hint:</i> This method could even be invoked for {@link DiscoveryResult}s, whose existence has already been
     * informed about.
     *
     * @param source the discovery ser<fim_middle>","
 * The {@link DiscoveryListener} interface for receiving discovery events.
 * <p>
 * A class that is interested in processing discovery events fired synchronously by a {@link DiscoveryService} has to
 * implement this interface.
 *
 * @author Michael Grammling - Initial Contribution.
 * @author Andre Fuechsel - Added removeOlderThings
 *
 * @see DiscoveryService
 */","
 * Interface for listening to {@link DiscoveryResult}s.
 *
 * @author <NAME>
 *"
"<fim_prefix>    * <p>
     * <i>Hint:</i> This method could even be invoked for {@link DiscoveryResult}s, whose removal has already been
     * informed about.
     *
     * @param source the discovery service which is the source of this event (not null)
     * @param thingUID the Thing UID to be removed (not null)
     */
    void thingRemoved(DiscoveryService source, ThingUID thingUID);

    /**<fim_suffix>
    @Deprecated
    @Nullable
    default Collection<ThingUID> removeOlderResults(DiscoveryService source, long timestamp,
            @Nullable Collection<ThingTypeUID> thingTypeUIDs) {
        return removeOlderResults(source, timestamp, thingTypeUIDs, null);
    }

    /**
     * Removes all results belonging to one of the given types that are older
     * than the given timestamp.<fim_middle>","
     * Removes all results belonging to one of the given types that are older
     * than the given timestamp.
     *
     * @param source the discovery service which is the source of this event (not
     *            null)
     * @param timestamp timestamp, all <b>older</b> results will be removed
     * @param thingTypeUIDs collection of {@code ThingType}s, only results of these
     *            {@code ThingType}s will be removed; if {@code null} then
     *            {@link DiscoveryService#getSupportedThingTypes()} will be used
     *            instead
     * @return collection of thing UIDs of all removed things
     * @deprecated use {@link #removeOlderResults(DiscoveryService, long, Collection, ThingUID)} instead
     */","
     * Removes all results belonging to one of the given types that are older
     * than the given timestamp.
     *  Remove deprecated method  /*
 * Copyright 2016-2018 <NAME> (jagrosh) & <NAME> (TheMonitorLizard)
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>/*<fim_suffix>
package zowe.client.sdk.rest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import zowe.client.sdk.core.ZosConnection;
import zowe.client.sdk.rest.type.ZosmfRequestType;

/**
 * Zowe request factory that generates the desire CRUD operation
 *
 * @author Frank Giordano
 * @version 2.0
 */
public final class ZosmfRequestFactory {

    private static final Logger LOG = Logger<fim_middle>","
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright Contributors to the Zowe Project.
 */","*
 * Zowe request factory that generates the desire CRUD operation
 *
 * @author Frank Giordano
 * @version 2.0
 */"
"<fim_prefix> v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright Contributors to the Zowe Project.
 */
package zowe.client.sdk.rest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import zowe.client.sdk.core.ZosConnection;
import zowe.client.sdk.rest.type.ZosmfRequestType;

/**<fim_suffix>
public final class ZosmfRequestFactory {

    private static final Logger LOG = LoggerFactory.getLogger(ZosmfRequestFactory.class);

    /**
     * Private constructor defined to avoid instantiation of class
     */
    private ZosmfRequestFactory() {
        throw new IllegalStateException(""Factory class"");
    }

    /**
     * Assign the request to the Http verb type request object<fim_middle>","
 * Zowe request factory that generates the desire CRUD operation
 *
 * @author Frank Giordano
 * @version 2.0
 */","
 * Factory class for creating ZosmfRequest objects
 *
 * @author <NAME>
 *
 */"
"<fim_prefix>r;
import org.slf4j.LoggerFactory;
import zowe.client.sdk.core.ZosConnection;
import zowe.client.sdk.rest.type.ZosmfRequestType;

/**
 * Zowe request factory that generates the desire CRUD operation
 *
 * @author Frank Giordano
 * @version 2.0
 */
public final class ZosmfRequestFactory {

    private static final Logger LOG = LoggerFactory.getLogger(ZosmfRequestFactory.class);

    /**<fim_suffix>
    private ZosmfRequestFactory() {
        throw new IllegalStateException(""Factory class"");
    }

    /**
     * Assign the request to the Http verb type request object
     *
     * @param connection connection information, see ZosConnection object
     * @param type       request http type, see ZosmfRequestType object
     * @return ZosmfRequest abstract object of ZosmfRequestTyp<fim_middle>","
     * Private constructor defined to avoid instantiation of class
     */","
     * Private constructor
     */"
"<fim_prefix>CRUD operation
 *
 * @author Frank Giordano
 * @version 2.0
 */
public final class ZosmfRequestFactory {

    private static final Logger LOG = LoggerFactory.getLogger(ZosmfRequestFactory.class);

    /**
     * Private constructor defined to avoid instantiation of class
     */
    private ZosmfRequestFactory() {
        throw new IllegalStateException(""Factory class"");
    }

    /**<fim_suffix>
    public static ZosmfRequest buildRequest(final ZosConnection connection, final ZosmfRequestType type) {
        LOG.debug(type.name());
        ZosmfRequest request;
        switch (type) {
            case GET_JSON:
                request = new GetJsonZosmfRequest(connection);
                break;
            case PUT_JSON:
                request = new PutJsonZosmfRequest(conn<fim_middle>","
     * Assign the request to the Http verb type request object
     *
     * @param connection connection information, see ZosConnection object
     * @param type       request http type, see ZosmfRequestType object
     * @return ZosmfRequest abstract object of ZosmfRequestType value
     * @author Frank Giordano
     */","
     * Builds a ZosmfRequest object based on the type of request
     *
     * @param connection the connection to use
     * @param type       the type of request
     * @return the ZosmfRequest object
     */"
"<fim_prefix>/*<fim_suffix>
package me.val_mobile.tan;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.Event;
import org.bukkit.event.HandlerList;

import java.util.UUID;

public class TemperatureChangeEvent extends Event {

    private static final HandlerList handlers = new HandlerList();
    private final UUID id;
    private final double oldTemp;
    private double newTemp<fim_middle>","
    Copyright (C) 2024  Val_Mobile

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 12/12/2016.
 */"
"<fim_prefix>/*<fim_suffix>

package com.jsmartframework.web.json;

import java.util.ArrayList;
import java.util.List;

public final class Async {

    private String id;

    private String path;

    private Boolean credentials;

    private String start;

    private List<AsyncEvent> events = new ArrayList<AsyncEvent>(3);

    public String getId() {
        return id;
    }

    public void setId(String id) <fim_middle>","
 * JSmart Framework - Java Web Development Framework
 * Copyright (c) 2015, Jeferson Albino da Silva, All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
*/","*
 * 
 */"
"<fim_prefix>package com.seibel.distanthorizons.common.wrappers.level;

import com.seibel.distanthorizons.common.wrappers.world.ClientLevelWrapper;
import com.seibel.distanthorizons.core.level.IServerKeyedClientLevel;
import net.minecraft.client.multiplayer.ClientLevel;

public class ServerKeyedClientLevel extends ClientLevelWrapper implements IServerKeyedClientLevel
{
	/**<fim_suffix>
	private final String serverLevelKey;
	
	public ServerKeyedClientLevel(ClientLevel level, String serverLevelKey)
	{
		super(level);
		this.serverLevelKey = serverLevelKey;
	}
	
	@Override
	public String getServerLevelKey() { return this.serverLevelKey; }
	
}
<fim_middle>", A unique identifier (generally the level's name) for differentiating multiverse levels */,"
	 * The key of the server level this client level is connected to.
	"
"<fim_prefix>// ------------------------------------------------
// OPCoach Training Projects
// © OPCoach 2009     http://www.opcoach.com
// ------------------------------------------------ 

package com.opcoach.message;


/**<fim_suffix>
public interface RecipientFactory
{


	/**
	 * Create a recipient from its unique ID (usually its login).
	 * 
	 * @param id  the login user id.
	 * @return the corresponding recipient.
	 */
	public Recipient createRecipient(String id);

	

}
<fim_middle>","
 * Create a default recipient. Hide the implementation outside of OSGi module. 
 * 
 */","
 * Factory for creating recipients.
 * 
 * @author <NAME>
 */"
"<fim_prefix>// ------------------------------------------------
// OPCoach Training Projects
// © OPCoach 2009     http://www.opcoach.com
// ------------------------------------------------ 

package com.opcoach.message;


/**
 * Create a default recipient. Hide the implementation outside of OSGi module. 
 * 
 */
public interface RecipientFactory
{


	/**<fim_suffix>
	public Recipient createRecipient(String id);

	

}
<fim_middle>","
	 * Create a recipient from its unique ID (usually its login).
	 * 
	 * @param id  the login user id.
	 * @return the corresponding recipient.
	 */","
	 * Create a recipient.
	 * 
	 * @param id
	 *            The recipient id.
	 * @return The recipient."
"<fim_prefix>package jene.vectornodes;

import java.util.List;

import jene.Node;
import jene.Pixel;


/**<fim_suffix>
 
 public class ExpNodeFactory extends Node1ArgFactory<double[]> {
	
	public static final ExpNodeFactory INSTANCE = new ExpNodeFactory();
	private ExpNodeFactory() {}
	
	@Override
	protected Class<double[]> arg1Type() {
		return double[].class;
	}

	public ExpNode newInstance(List<Node<Pixel, ?>> children) {
		return new ExpNode(children);
	}

}
<fim_middle>","
 *  
 * @author James Stout
 *
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package org.gitools.ui.core.actions.dynamicactions;

import org.gitools.heatmap.header.HeatmapHeader;

public interface IHeatmapHeaderAction extends IDynamicAction<HeatmapHeader> {
}
<fim_middle>","
 * #%L
 * gitools-ui-app
 * %%
 * Copyright (C) 2013 Universitat Pompeu Fabra - Biomedical Genomics group
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */","*
 * Created by jorge on 11/04/17.
 */"
"<fim_prefix>package org.iraiders.robot2019.robot;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

/**<fim_suffix>
public class RobotMap {
  // Config
  public static final boolean SEPERATE_TRACKING_OPTIONS = true;
  public static final int MAX_MOTOR_FREE_AMPS = 80;
  public static final int MAX_MOTOR_STALL_AMPS = 40;
  public static final double DEADBAND = 0.04;

  // Motors
  public static final int frontLeftTalonPort = 1;
  public static final int backLeftTalonPort = 2;
  public static final in<fim_middle>","
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */","
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */"
"<fim_prefix>/*<fim_suffix>
package org.exist.xquery.modules.cache;

import org.apache.log4j.Logger;
import org.exist.dom.QName;
import org.exist.xquery.Cardinality;
import org.exist.xquery.FunctionSignature;
import org.exist.xquery.XPathException;
import org.exist.xquery.XQueryContext;
import org.exist.xquery.value.FunctionParameterSequenceType;
import org.exist.xquery.value.Item;
import org.exist.xq<fim_middle>","
 *  eXist Open Source Native XML Database
 *  Copyright (C) 2001-09 The eXist Project
 *  http://exist-db.org
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * $Id$
 */","
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>
import org.exist.xquery.FunctionSignature;
import org.exist.xquery.XPathException;
import org.exist.xquery.XQueryContext;
import org.exist.xquery.value.FunctionParameterSequenceType;
import org.exist.xquery.value.Item;
import org.exist.xquery.value.Sequence;
import org.exist.xquery.value.SequenceType;
import org.exist.xquery.value.Type;
import org.xml.sax.SAXException;

/**<fim_suffix>
public class GetFunction extends CacheBasicFunction {

    private final static Logger logger = Logger.getLogger(GetFunction.class);

    public final static FunctionSignature signatures[] = { 
		new FunctionSignature(
				new QName(""get"", CacheModule.NAMESPACE_URI, CacheModule.PREFIX),
				""Get data from identified global cache by key"",
				new SequenceType[] { 
					new Fu<fim_middle>","
 * Global cache module. Get function
 * 
 * @author Evgeny Gazdovsky <gazdovsky@gmail.com>
 * @version 1.0
 */","
 * 
 * @author <NAME>
 */"
"<fim_prefix>d.util.JsonReader;
import java.util.regex.Matcher;

/* renamed from: fb3  reason: default package */
public final class fb3 implements wy4, bz1, dx2, e74, wg3, yb0, v64 {
    public final /* synthetic */ int P;
    public Object Q;

    public /* synthetic */ fb3(int i, Object obj) {
        this.P = i;
        this.Q = obj;
    }

    @Override // defpackage.dx2, defpackage.e74
    /*<fim_suffix>
    public final void mo1a() {
        switch (this.P) {
            case 2:
                vz3.k(""Rejecting reference for JS Engine."");
                ((jj2) this.Q).c();
                return;
            default:
                synchronized (((b74) this.Q)) {
                }
                return;
        }
    }

    /*  JADX ERROR: Type inference failed with exception
    <fim_middle>", renamed from: a */, JADX WARNING:
"<fim_prefix>     hr4 hr4Var = (hr4) this.Q;
        if (yv0Var.j()) {
            hr4Var.cancel(false);
        } else if (yv0Var.l()) {
            hr4Var.h(yv0Var.i());
        } else {
            Exception h = yv0Var.h();
            if (h == null) {
                throw new IllegalStateException();
            }
            hr4Var.i(h);
        }
    }

    @Override // defpackage.wg3
    /*<fim_suffix>
    public final void mo0e(Object obj) {
        switch (this.P) {
            case 6:
                el4 el4Var = (el4) this.Q;
                ((pl4) obj).h((ml4) el4Var.P, el4Var.Q);
                return;
            default:
                jo5 jo5Var = (jo5) obj;
                return;
        }
    }

    @Override // defpackage.wy4
    public final void f(Object obj) {
    <fim_middle>", renamed from: e */,* @deprecated */
"<fim_prefix>efpackage.dx2, defpackage.e74
    /* renamed from: a */
    public final void mo1a() {
        switch (this.P) {
            case 2:
                vz3.k(""Rejecting reference for JS Engine."");
                ((jj2) this.Q).c();
                return;
            default:
                synchronized (((b74) this.Q)) {
                }
                return;
        }
    }

    /*<fim_suffix>
    @Override // defpackage.bz1
    public final void b(byte[] r171, byte[] r172) {
        /*
            Method dump skipped, instructions count: 2746
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException(""Method not decompiled: defpackage.fb3.b(byte[], byte[]):void"");
    }

    @Override // defpackag<fim_middle>","  JADX ERROR: Type inference failed with exception
        jadx.core.utils.exceptions.JadxOverflowException: Type update terminated with stack overflow, arg: (r0v111?? I:??[int, boolean])
        	at jadx.core.utils.ErrorsCounter.addError(ErrorsCounter.java:56)
        	at jadx.core.utils.ErrorsCounter.error(ErrorsCounter.java:30)
        	at jadx.core.dex.attributes.nodes.NotificationAttrNode.addError(NotificationAttrNode.java:18)
        	at jadx.core.dex.visitors.typeinference.TypeInferenceVisitor.visit(TypeInferenceVisitor.java:114)
        */", renamed from: a */
"<fim_prefix>package defpackage;

import android.util.JsonReader;
import java.util.regex.Matcher;

/* renamed from: fb3  reason: default package */
public final class fb3 implements wy4, bz1, dx2, e74, wg3, yb0, v64 {
    public final /*<fim_suffix> int P;
    public Object Q;

    public /* synthetic */ fb3(int i, Object obj) {
        this.P = i;
        this.Q = obj;
    }

    @Override // defpackage.dx2, defpackage.e74
    /* renamed from: a */
    public final void mo1a() {
        switch (this.P) {
            case 2:
                vz3.k(""Rejecting reference for JS Engine."");
                ((jj2) this.Q).c();
         <fim_middle>", synthetic */, synthetic */
"<fim_prefix>package defpackage;

import android.util.JsonReader;
import java.util.regex.Matcher;

/* renamed from: fb3  reason: default package */
public final class fb3 implements wy4, bz1, dx2, e74, wg3, yb0, v64 {
    public final /* synthetic */ int P;
    public Object Q;

    public /*<fim_suffix> fb3(int i, Object obj) {
        this.P = i;
        this.Q = obj;
    }

    @Override // defpackage.dx2, defpackage.e74
    /* renamed from: a */
    public final void mo1a() {
        switch (this.P) {
            case 2:
                vz3.k(""Rejecting reference for JS Engine."");
                ((jj2) this.Q).c();
                return;
            default:
                sync<fim_middle>", synthetic */, synthetic */
"<fim_prefix>)
        	at jadx.core.utils.ErrorsCounter.error(ErrorsCounter.java:30)
        	at jadx.core.dex.attributes.nodes.NotificationAttrNode.addError(NotificationAttrNode.java:18)
        	at jadx.core.dex.visitors.typeinference.TypeInferenceVisitor.visit(TypeInferenceVisitor.java:114)
        */
    @Override // defpackage.bz1
    public final void b(byte[] r171, byte[] r172) {
        /*<fim_suffix>
        throw new UnsupportedOperationException(""Method not decompiled: defpackage.fb3.b(byte[], byte[]):void"");
    }

    @Override // defpackage.yb0
    public final void c(yv0 yv0Var) {
        hr4 hr4Var = (hr4) this.Q;
        if (yv0Var.j()) {
            hr4Var.cancel(false);
        } else if (yv0Var.l()) {
            hr4Var.h(yv0Var.i());
        } else {
            Except<fim_middle>","
            Method dump skipped, instructions count: 2746
            To view this dump change 'Code comments level' option to 'DEBUG'
        */","
            r171 = this;
            r172 = r171.a;
            r171 = r171.b;"
"<fim_prefix>                   c = 1;
                }
                c = 65535;
            }
            if (c == 0) {
                jsonReader.nextInt();
            } else if (c != 1) {
                jsonReader.skipValue();
            } else {
                str = jsonReader.nextString();
            }
        }
        jsonReader.endObject();
        this.Q = str;
    }

    public /*<fim_suffix> fb3(fz1 fz1Var) {
        this.P = 1;
        this.Q = fz1Var;
    }

    public fb3(jj2 jj2Var) {
        this.P = 2;
        this.Q = jj2Var;
    }

    public /* synthetic */ fb3(io5 io5Var) {
        this.P = 8;
        this.Q = io5Var;
    }
}<fim_middle>", synthetic */, synthetic */
"<fim_prefix>package defpackage;

import android.util.JsonReader;
import java.util.regex.Matcher;

/*<fim_suffix>
public final class fb3 implements wy4, bz1, dx2, e74, wg3, yb0, v64 {
    public final /* synthetic */ int P;
    public Object Q;

    public /* synthetic */ fb3(int i, Object obj) {
        this.P = i;
        this.Q = obj;
    }

    @Override // defpackage.dx2, defpackage.e74
    /* renamed from: a */
    public final void mo1a() {
        switch (this.P) {
            case 2:
   <fim_middle>", renamed from: fb3  reason: default package */, renamed from: fb3 reason: default package */
"<fim_prefix>) {
                jsonReader.skipValue();
            } else {
                str = jsonReader.nextString();
            }
        }
        jsonReader.endObject();
        this.Q = str;
    }

    public /* synthetic */ fb3(fz1 fz1Var) {
        this.P = 1;
        this.Q = fz1Var;
    }

    public fb3(jj2 jj2Var) {
        this.P = 2;
        this.Q = jj2Var;
    }

    public /*<fim_suffix> fb3(io5 io5Var) {
        this.P = 8;
        this.Q = io5Var;
    }
}<fim_middle>", synthetic */, synthetic */
"<fim_prefix>peertrust.config.Configurable;
import org.peertrust.config.Vocabulary;
import org.peertrust.demo.peertrust_com_asp.PTComASPMessageListener;
import org.peertrust.demo.peertrust_com_asp.PTCommunicationASP;
import org.peertrust.demo.resourcemanagement.StringWrapper;
import org.peertrust.exception.ConfigurationException;

import org.peertrust.net.Peer;
import org.xml.sax.SAXException;

/**<fim_suffix>
public class CredentialDistributionServer 
						implements 	PTComASPMessageListener,
									Configurable
{

	/**
	 *a store of credentials 
	 */
	private CredentialStore credentialStore;
	
	/**
	 * Provides generic comunication on top of the peertrust comunication
	 */
	private PTCommunicationASP communicationASP;
	
	/** 
	 * Path of the xml setup file
	 */
	private StringWrapper s<fim_middle>","
 * Provide The server side mechanisms to to distribute credentials.
 * A credential store is used to hold the credntials.
 * A PTCommunicationASP is used to receive requests and to send the credential to the requester.
 *  
 * @author Patrice Congo (token77)
 *
 */","
 * This class is the server side of the credential distribution protocol.
 * It is responsible for distributing credentials to the clients.
 * 
 * @author <NAME> (<EMAIL>)
 *
 */"
"<fim_prefix>ialDistributionServer 
						implements 	PTComASPMessageListener,
									Configurable
{

	/**
	 *a store of credentials 
	 */
	private CredentialStore credentialStore;
	
	/**
	 * Provides generic comunication on top of the peertrust comunication
	 */
	private PTCommunicationASP communicationASP;
	
	/** 
	 * Path of the xml setup file
	 */
	private StringWrapper setupFilePath;
		
	/**<fim_suffix>
	public CredentialDistributionServer(){
		credentialStore= new CredentialStore();
	}
	/**
	 * Implemented to received the CredentialRequest and 
	 * send back the requested credential.
	 */
	public void PTMessageReceived(
							Serializable message,
							Peer source, 
							Peer target) {
		if(message instanceof CredentialRequest){
			String credName=((CredentialRequest)message).g<fim_middle>"," 
	 * Create a virgin CredentialDistributionServer.
	 * The creation process is to complete by:
	 * <ul>
	 * 	<li/>Setting the communicationASP and setupFilePath
	 * 	<lu/>and then Calling init(). 
	 * </ul>
	 */","
	 * Constructor
	 */"
"<fim_prefix>redential store is used to hold the credntials.
 * A PTCommunicationASP is used to receive requests and to send the credential to the requester.
 *  
 * @author Patrice Congo (token77)
 *
 */
public class CredentialDistributionServer 
						implements 	PTComASPMessageListener,
									Configurable
{

	/**
	 *a store of credentials 
	 */
	private CredentialStore credentialStore;
	
	/**<fim_suffix>
	private PTCommunicationASP communicationASP;
	
	/** 
	 * Path of the xml setup file
	 */
	private StringWrapper setupFilePath;
		
	/** 
	 * Create a virgin CredentialDistributionServer.
	 * The creation process is to complete by:
	 * <ul>
	 * 	<li/>Setting the communicationASP and setupFilePath
	 * 	<lu/>and then Calling init(). 
	 * </ul>
	 */
	public CredentialDistributionServer(){<fim_middle>","
	 * Provides generic comunication on top of the peertrust comunication
	 */"," 
	 * The communicationASP used to receive requests and to send the credential to the requester."
"<fim_prefix> the requester.
 *  
 * @author Patrice Congo (token77)
 *
 */
public class CredentialDistributionServer 
						implements 	PTComASPMessageListener,
									Configurable
{

	/**
	 *a store of credentials 
	 */
	private CredentialStore credentialStore;
	
	/**
	 * Provides generic comunication on top of the peertrust comunication
	 */
	private PTCommunicationASP communicationASP;
	
	/**<fim_suffix>
	private StringWrapper setupFilePath;
		
	/** 
	 * Create a virgin CredentialDistributionServer.
	 * The creation process is to complete by:
	 * <ul>
	 * 	<li/>Setting the communicationASP and setupFilePath
	 * 	<lu/>and then Calling init(). 
	 * </ul>
	 */
	public CredentialDistributionServer(){
		credentialStore= new CredentialStore();
	}
	/**
	 * Implemented to received the Credent<fim_middle>"," 
	 * Path of the xml setup file
	 */","
	 * The path to the setup file."
"<fim_prefix>			String credName=((CredentialRequest)message).getName();
			String value=credentialStore.getCredentialValue(credName,source);
			CredentialResponse credResp=
				new CredentialResponse(credName,value);
			//System.out.println(""Sending credential:\n""+credResp);
			//swap target and source since we have now the server view
			communicationASP.send(credResp,target,source);
		}
	}
	
	/**<fim_suffix>
	public void setup(
				String credentialStoreXmlFile, 
				TrustClient trustClient) throws NullPointerException, SAXException, IOException, ParserConfigurationException{
		if(credentialStoreXmlFile==null){
			throw new NullPointerException(""Parameter credentialStoreXmlFile must not be null"");
		}
		
		if(trustClient==null){
			throw new NullPointerException(""Parameter trustClient mus<fim_middle>","
	 * Setups this credential distribution server.
	 * 
	 * @param 	credentialStoreXmlFile -- the path of the xml file containing the
	 * 			credentials specifications
	 * 
	 * @param 	trustClient -- the trust client which net client will be used 
	 * 			to send back the answer and which EventListener whill be used 
	 * 			to receive the requests.
	 *  
	 * @throws NullPointerException
	 * @throws SAXException
	 * @throws IOException
	 * @throws ParserConfigurationException
	 */","
	 * Setup the communication ASP.
	 * @param credentialStoreXmlFile the file containing the credential store
	 * @param trustClient the trust client
	 * @throws NullPointerException if any parameter is null
	 * @throws SAXException if the credential store XML file is not well-formed
	 * @throws IOException if an I/O error occurs
	 * @throws ParserConfigurationException if the credential store XML file is not well-formed
	 */"
"<fim_prefix>ow new NullPointerException(
					""Parameter credentialStoreXmlFile must not be null"");
		}
	
		if(communicationASP==null){
			throw new Error(""PTCommunicationASP must not be null"");
		}
		
		credentialStore.setup(credentialStoreXmlFile);
		System.out.println(""CredentialStore:""+credentialStore);
		communicationASP.registerPTComASPMessageListener(this,CredentialRequest.class);
	}
	
	/**<fim_suffix>
	public CredentialStore getCredentialStore() {
		return credentialStore;
	}
	
	
	
	/**
	 * @return Returns the communicationASP.
	 */
	public PTCommunicationASP getCommunicationASP() {
		return communicationASP;
	}
	/**
	 * @param communicationASP The communicationASP to set.
	 */
	public void setCommunicationASP(PTCommunicationASP communicationASP) {
		this.communicationASP = communi<fim_middle>","
	 * @return Returns the credentialStore.
	 */","
	 * @return Returns the credentialStore.
	 */"
"<fim_prefix>new Error(""PTCommunicationASP must not be null"");
		}
		
		credentialStore.setup(credentialStoreXmlFile);
		System.out.println(""CredentialStore:""+credentialStore);
		communicationASP.registerPTComASPMessageListener(this,CredentialRequest.class);
	}
	
	/**
	 * @return Returns the credentialStore.
	 */
	public CredentialStore getCredentialStore() {
		return credentialStore;
	}
	
	
	
	/**<fim_suffix>
	public PTCommunicationASP getCommunicationASP() {
		return communicationASP;
	}
	/**
	 * @param communicationASP The communicationASP to set.
	 */
	public void setCommunicationASP(PTCommunicationASP communicationASP) {
		this.communicationASP = communicationASP;
	}
	
	
	
	
	
	/**
	 * @return Returns the setupFilePath.
	 */
	public StringWrapper getSetupFilePath() {
		return setupFile<fim_middle>","
	 * @return Returns the communicationASP.
	 */","
	 * @param credentialStore The credentialStore to set."
"<fim_prefix>ntialStore:""+credentialStore);
		communicationASP.registerPTComASPMessageListener(this,CredentialRequest.class);
	}
	
	/**
	 * @return Returns the credentialStore.
	 */
	public CredentialStore getCredentialStore() {
		return credentialStore;
	}
	
	
	
	/**
	 * @return Returns the communicationASP.
	 */
	public PTCommunicationASP getCommunicationASP() {
		return communicationASP;
	}
	/**<fim_suffix>
	public void setCommunicationASP(PTCommunicationASP communicationASP) {
		this.communicationASP = communicationASP;
	}
	
	
	
	
	
	/**
	 * @return Returns the setupFilePath.
	 */
	public StringWrapper getSetupFilePath() {
		return setupFilePath;
	}
	
	
	/**
	 * @param setupFilePath The setupFilePath to set.
	 */
	public void setSetupFilePath(StringWrapper setupFilePath) {
		this.setupF<fim_middle>","
	 * @param communicationASP The communicationASP to set.
	 */","
	 * @param communicationASP The communicationASP to set.
	 */"
"<fim_prefix>CredentialStore() {
		return credentialStore;
	}
	
	
	
	/**
	 * @return Returns the communicationASP.
	 */
	public PTCommunicationASP getCommunicationASP() {
		return communicationASP;
	}
	/**
	 * @param communicationASP The communicationASP to set.
	 */
	public void setCommunicationASP(PTCommunicationASP communicationASP) {
		this.communicationASP = communicationASP;
	}
	
	
	
	
	
	/**<fim_suffix>
	public StringWrapper getSetupFilePath() {
		return setupFilePath;
	}
	
	
	/**
	 * @param setupFilePath The setupFilePath to set.
	 */
	public void setSetupFilePath(StringWrapper setupFilePath) {
		this.setupFilePath = setupFilePath;
	}
	
	
	/**
	 * @see org.peertrust.config.Configurable#init()
	 */
	public void init() throws ConfigurationException {
		if(communicationASP==null){
			t<fim_middle>","
	 * @return Returns the setupFilePath.
	 */","
	 * @return Returns the setupFilePath.
	 */"
"<fim_prefix>icationASP getCommunicationASP() {
		return communicationASP;
	}
	/**
	 * @param communicationASP The communicationASP to set.
	 */
	public void setCommunicationASP(PTCommunicationASP communicationASP) {
		this.communicationASP = communicationASP;
	}
	
	
	
	
	
	/**
	 * @return Returns the setupFilePath.
	 */
	public StringWrapper getSetupFilePath() {
		return setupFilePath;
	}
	
	
	/**<fim_suffix>
	public void setSetupFilePath(StringWrapper setupFilePath) {
		this.setupFilePath = setupFilePath;
	}
	
	
	/**
	 * @see org.peertrust.config.Configurable#init()
	 */
	public void init() throws ConfigurationException {
		if(communicationASP==null){
			throw  new ConfigurationException(
						""communicationASP not set at""+this.getClass());
		}
		
		if(setupFilePath==null){
			throw  new<fim_middle>","
	 * @param setupFilePath The setupFilePath to set.
	 */","
	 * @param setupFilePath The setupFilePath to set.
	 */"
"<fim_prefix>CommunicationASP communicationASP) {
		this.communicationASP = communicationASP;
	}
	
	
	
	
	
	/**
	 * @return Returns the setupFilePath.
	 */
	public StringWrapper getSetupFilePath() {
		return setupFilePath;
	}
	
	
	/**
	 * @param setupFilePath The setupFilePath to set.
	 */
	public void setSetupFilePath(StringWrapper setupFilePath) {
		this.setupFilePath = setupFilePath;
	}
	
	
	/**<fim_suffix>
	public void init() throws ConfigurationException {
		if(communicationASP==null){
			throw  new ConfigurationException(
						""communicationASP not set at""+this.getClass());
		}
		
		if(setupFilePath==null){
			throw  new ConfigurationException(
					""setupFilePath not set at""+this.getClass());
		}
		
		try {
			setup();
		} catch (NullPointerException e) {
			throw new ConfigurationE<fim_middle>","
	 * @see org.peertrust.config.Configurable#init()
	 */","
	 * @return Returns the setup.
	 */"
"<fim_prefix>;

/**
 * Provide The server side mechanisms to to distribute credentials.
 * A credential store is used to hold the credntials.
 * A PTCommunicationASP is used to receive requests and to send the credential to the requester.
 *  
 * @author Patrice Congo (token77)
 *
 */
public class CredentialDistributionServer 
						implements 	PTComASPMessageListener,
									Configurable
{

	/**<fim_suffix>
	private CredentialStore credentialStore;
	
	/**
	 * Provides generic comunication on top of the peertrust comunication
	 */
	private PTCommunicationASP communicationASP;
	
	/** 
	 * Path of the xml setup file
	 */
	private StringWrapper setupFilePath;
		
	/** 
	 * Create a virgin CredentialDistributionServer.
	 * The creation process is to complete by:
	 * <ul>
	 * 	<li/>Setting the <fim_middle>","
	 *a store of credentials 
	 */"," 
	 * Path of the xml setup file
"
"<fim_prefix>/** 
	 * Path of the xml setup file
	 */
	private StringWrapper setupFilePath;
		
	/** 
	 * Create a virgin CredentialDistributionServer.
	 * The creation process is to complete by:
	 * <ul>
	 * 	<li/>Setting the communicationASP and setupFilePath
	 * 	<lu/>and then Calling init(). 
	 * </ul>
	 */
	public CredentialDistributionServer(){
		credentialStore= new CredentialStore();
	}
	/**<fim_suffix>
	public void PTMessageReceived(
							Serializable message,
							Peer source, 
							Peer target) {
		if(message instanceof CredentialRequest){
			String credName=((CredentialRequest)message).getName();
			String value=credentialStore.getCredentialValue(credName,source);
			CredentialResponse credResp=
				new CredentialResponse(credName,value);
			//System.out.println(""Sending cr<fim_middle>","
	 * Implemented to received the CredentialRequest and 
	 * send back the requested credential.
	 */"," 
	 * Initialize the CredentialDistributionServer.
	 * <ul>
	 * 	<li"
"<fim_prefix>/**<fim_suffix>
package com.databasepreservation.modules.siard.out.output;

import java.util.Map;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.databasepreservation.Constants;
import com.databasepreservation.model.data.Row;
import com.databasepreservation.model.exception.ModuleException;
import com.databasepres<fim_middle>","
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE file at the root of the source
 * tree and available online at
 *
 * https://github.com/keeps/db-preservation-toolkit
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>tainer;
import com.databasepreservation.modules.siard.common.SIARDValidator;
import com.databasepreservation.modules.siard.constants.SIARDConstants;
import com.databasepreservation.modules.siard.out.content.ContentExportStrategy;
import com.databasepreservation.modules.siard.out.metadata.MetadataExportStrategy;
import com.databasepreservation.modules.siard.out.write.WriteStrategy;

/**<fim_suffix>
public class SIARDExportDefault implements DatabaseFilterModule {
  private DatabaseFilterModule exportModule;

  private final SIARDArchiveContainer mainContainer;
  private final WriteStrategy writeStrategy;
  private final MetadataExportStrategy metadataStrategy;
  private final ContentExportStrategy contentStrategy;

  private DatabaseStructure dbStructure;
  private SchemaStructu<fim_middle>","
 * @author Bruno Ferreira <bferreira@keep.pt>
 */","
 * @author <NAME>
 */"
"<fim_prefix>ems should be
   * reported. This reporter should be provided only once for the export module
   * instance.
   *
   * @param reporter
   *          The initialized reporter instance.
   */
  @Override
  public void setOnceReporter(Reporter reporter) {
    this.reporter = reporter;
    contentStrategy.setOnceReporter(reporter);
    metadataStrategy.setOnceReporter(reporter);
  }

  /**<fim_suffix>
  @Override
  public DatabaseFilterModule migrateDatabaseTo(DatabaseFilterModule databaseExportModule) throws ModuleException {
    this.exportModule = databaseExportModule;
    return this;
  }

  @Override
  public ModuleException normalizeException(Exception exception, String contextMessage) {
    return DefaultExceptionNormalizer.getInstance().normalizeException(exception, context<fim_middle>","
   * Import the database model.
   *
   * @param databaseExportModule
   *          The database model handler to be called when importing the database.
   * @return Return itself, to allow chaining multiple getDatabase methods
   * @throws ModuleException
   *           generic module exception
   */","
   * {@inheritDoc}
   */"
"<fim_prefix>writeStrategy);
      validator.setReporter(reporter);
      validator.validateSIARD();
    }

    this.exportModule.finishDatabase();
  }

  @Override
  public void updateModuleConfiguration(String moduleName, Map<String, String> properties,
    Map<String, String> remoteProperties) {
    this.exportModule.updateModuleConfiguration(moduleName, properties, remoteProperties);
  }

  /**<fim_suffix>
  @Override
  public void setOnceReporter(Reporter reporter) {
    this.reporter = reporter;
    contentStrategy.setOnceReporter(reporter);
    metadataStrategy.setOnceReporter(reporter);
  }

  /**
   * Import the database model.
   *
   * @param databaseExportModule
   *          The database model handler to be called when importing the database.
   * @return Return itself, to allo<fim_middle>","
   * Provide a reporter through which potential conversion problems should be
   * reported. This reporter should be provided only once for the export module
   * instance.
   *
   * @param reporter
   *          The initialized reporter instance.
   */","
   * Set the reporter.
   *
   * @param reporter
   *          The reporter to be set.
   */"
"<fim_prefix>/*<fim_suffix>

package ch.ethz.seb.sebserver.gui.service.examconfig.impl.rules;

import org.apache.commons.lang3.BooleanUtils;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import ch.ethz.seb.sebserver.gbl.model.sebconfig.ConfigurationAttribute;
import ch.ethz.seb.sebserver.gbl.model.sebconfig.ConfigurationValue;
import ch.ethz.seb.seb<fim_middle>","
 * Copyright (c) 2021 ETH ZÃ¼rich, IT Services
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package org.cafienne.cmmn.actorapi.event.team.deprecated.member;

import com.fasterxml.jackson.core.JsonGenerator;
import org.cafienne.cmmn.actorapi.event.team.deprecated.DeprecatedCaseTeamEvent;
import org.cafienne.infrastructure.serialization.Fields;
import org.cafienne.json.ValueMap;

import java.io.IOException;

/**
 * Basic event allowing listeners that are interested only in ca<fim_middle>","
 * Copyright (C) 2014  Batav B.V.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>th this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.cafienne.cmmn.actorapi.event.team.deprecated.member;

import com.fasterxml.jackson.core.JsonGenerator;
import org.cafienne.cmmn.actorapi.event.team.deprecated.DeprecatedCaseTeamEvent;
import org.cafienne.infrastructure.serialization.Fields;
import org.cafienne.json.ValueMap;

import java.io.IOException;

/**<fim_suffix>
public abstract class CaseTeamRoleEvent extends DeprecatedCaseTeamEvent {
    private final String roleName;

    /**
     * Returns true if the role name is blank
     * @return
     */
    public boolean isMemberItself() {
        return roleName.isBlank();
    }

    protected CaseTeamRoleEvent(ValueMap json) {
        super(json);
        this.roleName = json.readString(Fields.rol<fim_middle>","
 * Basic event allowing listeners that are interested only in case team member role events to do initial filtering.
 */","
 * Created by moelle on 11.03.17.
 */"
"<fim_prefix>DeprecatedCaseTeamEvent;
import org.cafienne.infrastructure.serialization.Fields;
import org.cafienne.json.ValueMap;

import java.io.IOException;

/**
 * Basic event allowing listeners that are interested only in case team member role events to do initial filtering.
 */
public abstract class CaseTeamRoleEvent extends DeprecatedCaseTeamEvent {
    private final String roleName;

    /**<fim_suffix>
    public boolean isMemberItself() {
        return roleName.isBlank();
    }

    protected CaseTeamRoleEvent(ValueMap json) {
        super(json);
        this.roleName = json.readString(Fields.role);
    }

    public String roleName() {
        return roleName;
    }

    @Override
    public void write(JsonGenerator generator) throws IOException {
        super.write(generator);<fim_middle>","
     * Returns true if the role name is blank
     * @return
     */","
     * @return true if the event is about a member of the team itself.
     */"
"<fim_prefix>/**<fim_suffix>
package com.saltosion.gladiator.input;

public interface InputReceiver {

	/**
	 * @return Returns if the keypress was handled.
	 */
	public boolean pressed();

	/**
	 * @return Returns if the key's release was handled.
	 */
	public boolean released();

}
<fim_middle>","
 * GladiatorBrawler is a 2D swordfighting game.
 * Copyright (C) 2015 Jeasonfire/Allexit
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>NY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.saltosion.gladiator.input;

public interface InputReceiver {

	/**<fim_suffix>
	public boolean pressed();

	/**
	 * @return Returns if the key's release was handled.
	 */
	public boolean released();

}
<fim_middle>","
	 * @return Returns if the keypress was handled.
	 */","
	 * @return Returns if the key's press was handled.
	"
"<fim_prefix>ARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.saltosion.gladiator.input;

public interface InputReceiver {

	/**
	 * @return Returns if the keypress was handled.
	 */
	public boolean pressed();

	/**<fim_suffix>
	public boolean released();

}
<fim_middle>","
	 * @return Returns if the key's release was handled.
	 */","
	 * @return Returns if the key was released.
	 */"
"<fim_prefix>te with cursor position and button press information.
 * 
 * @author Eric Perron
 *
 */
public class MouseState
{
	int _x, _y;
	public int _scrollWheelValue;
	ButtonState _leftButton;
	ButtonState _rightButton;
	ButtonState _middleButton;
	ButtonState _xButton1;
	ButtonState _xButton2;

	// Note: Added this since it is provided by default for struct in C#
	public MouseState() {}
	
	/**<fim_suffix>
	public MouseState(
			int x,
			int y,
			int scrollWheel,
			ButtonState leftButton,
			ButtonState middleButton,
			ButtonState rightButton,
			ButtonState xButton1,
			ButtonState xButton2)
	{
		_x = x;
		_y = y;
		_scrollWheelValue = scrollWheel;
		_leftButton = leftButton;
		_middleButton = middleButton;
		_rightButton = rightButton;
		_xButton1 = xButton1;
		_xButton2 = xButton<fim_middle>","
	 * Initializes a new instance of the MouseState.
	 * 
	 * <p>
	 * Normally {@link Mouse#getState()} should be used to get mouse current state. The constructor
	 * is provided for simulating mouse input.
	 * 
	 * @param x
	 *        Horizontal position of the mouse.
	 * @param y
	 *        Vertical position of the mouse.
	 * @param scrollWheel
	 *        Mouse scroll wheel's value.
	 * @param leftButton
	 *        Left mouse button's state.
	 * @param middleButton
	 *        Middle mouse button's state.
	 * @param rightButton
	 *        Right mouse button's state.
	 * @param xButton1
	 *        XBUTTON1's state.
	 * @param xButton2
	 *        XBUTTON2's state.
	 */","
	 * Creates a new MouseState object.
	 * 
	 * @param x The x coordinate of the mouse.
	 * @param y The y coordinate of the mouse.
	 * @param scrollWheel The scroll wheel value.
	 * @param leftButton The state of the left mouse button.
	 * @param middleButton The state of the middle mouse button.
	 * @param rightButton The state of the right mouse button.
	 * @param xButton1 The state of the first extra mouse button.
	 * @param xButton2 The state of the second extra mouse button.
	 */"
"<fim_prefix>start.
	 */
	public int getScrollWheelValue()
	{
		return _scrollWheelValue;
	}

	public void setScrollWheelValue(int value)
	{
		_scrollWheelValue = value;
	}

	/**
	 * Gets the state of the XButton1.
	 * 
	 * @return The state of the XButton1.
	 */
	public ButtonState getXButton1()
	{
		return _xButton1;
	}

	public void setXButton1(ButtonState value)
	{
		_xButton1 = value;
	}

	/**<fim_suffix>
	public ButtonState getXButton2()
	{
		return _xButton2;
	}

	public void setXButton2(ButtonState value)
	{
		_xButton2 = value;
	}
}
<fim_middle>","
	 * Gets the state of the XButton2.
	 * 
	 * @return The state of the XButton2.
	 */","
	 * Gets the state of the XButton2.
	 * 
	 * @return The state of the XButton2."
"<fim_prefix> this.equals((MouseState) obj);
	}
	
	// Helper method
	private boolean equals(MouseState other)
	{
		return this._x == other._x && //
			   this._y == other._y && //
			   this._leftButton == other._leftButton && //
			   this._middleButton == other._middleButton && //
			   this._rightButton == other._rightButton && //
			   this._scrollWheelValue == other._scrollWheelValue;
	}

	/**<fim_suffix>
	public boolean notEquals(Object obj)
	{
		return !this.equals(obj);
	}

	/**
	 * Gets the hash code for MouseState instance.
	 * 
	 * @return Hash code of the object.
	 */
	@Override
	public int hashCode()
	{
		// TODO: Need to do check hash method
		return super.hashCode();	// base.GetHashCode();
	}

	/**
	 * Gets the horizontal position of the cursor.
	 * 
	 * @return The horizonta<fim_middle>","
	 * Indicates whether some other object is ""not equal to"" this one.
	 * 
	 * @param obj
	 * 		  the reference object with which to compare.
	 * @return {@code false} if this object is the same as the obj argument;
     *         {@code true} otherwise.
     * @see #equals(Object)
	 */","
	 * Gets the hash code for MouseState instance.
	 * 
	 * @return Hash code of the object.
	 */"
"<fim_prefix>useState(
			int x,
			int y,
			int scrollWheel,
			ButtonState leftButton,
			ButtonState middleButton,
			ButtonState rightButton,
			ButtonState xButton1,
			ButtonState xButton2)
	{
		_x = x;
		_y = y;
		_scrollWheelValue = scrollWheel;
		_leftButton = leftButton;
		_middleButton = middleButton;
		_rightButton = rightButton;
		_xButton1 = xButton1;
		_xButton2 = xButton2;
	}

	/**<fim_suffix>
	@Override
	public boolean equals(Object obj)
	{
		if (obj == null)
		{
			return false;
		}
		if (obj.getClass() != this.getClass())
		{
			return false;
		}
		return this.equals((MouseState) obj);
	}
	
	// Helper method
	private boolean equals(MouseState other)
	{
		return this._x == other._x && //
			   this._y == other._y && //
			   this._leftButton == other._leftButton && //
			<fim_middle>","
	 * Indicates whether some other object is ""equal to"" this one.
	 * 
	 * @param obj
	 * 		  the reference object with which to compare.
	 * @return {@code true} if this object is the same as the obj argument;
     *         {@code false} otherwise.
	 */","
	 * @return the x coordinate of the mouse
	 */"
"<fim_prefix>gument;
     *         {@code true} otherwise.
     * @see #equals(Object)
	 */
	public boolean notEquals(Object obj)
	{
		return !this.equals(obj);
	}

	/**
	 * Gets the hash code for MouseState instance.
	 * 
	 * @return Hash code of the object.
	 */
	@Override
	public int hashCode()
	{
		// TODO: Need to do check hash method
		return super.hashCode();	// base.GetHashCode();
	}

	/**<fim_suffix>
	public int getX()
	{
		return _x;
	}

	public void setX(int value)
	{
		_x = value;
	}

	/**
	 * Gets the vertical position of the cursor.
	 * 
	 * @return The vertical position of the cursor.
	 */
	public int getY()
	{
		return _y;
	}

	public void setY(int value)
	{
		_y = value;
	}

	/**
	 * Gets the cursor position.
	 * 
	 * @return The cursor position.
	 */
	public Point getPosi<fim_middle>","
	 * Gets the horizontal position of the cursor.
	 * 
	 * @return The horizontal position of the cursor.
	 */","
	 * Gets the horizontal position of the cursor.
	 * 
	 * @return The horizontal position of the cursor.
	 */"
"<fim_prefix>horizontal position of the cursor.
	 * 
	 * @return The horizontal position of the cursor.
	 */
	public int getX()
	{
		return _x;
	}

	public void setX(int value)
	{
		_x = value;
	}

	/**
	 * Gets the vertical position of the cursor.
	 * 
	 * @return The vertical position of the cursor.
	 */
	public int getY()
	{
		return _y;
	}

	public void setY(int value)
	{
		_y = value;
	}

	/**<fim_suffix>
	public Point getPosition()
	{
		return new Point(_x, _y);
	}

	/**
	 * Gets the state of the left mouse button.
	 * 
	 * @return The state of the left mouse button.
	 */
	public ButtonState getLeftButton()
	{
		return _leftButton;
	}

	public void setLeftButton(ButtonState value)
	{
		_leftButton = value;
	}

	/**
	 * Gets the state of the middle mouse button.
	 * 
	 * @return The st<fim_middle>","
	 * Gets the cursor position.
	 * 
	 * @return The cursor position.
	 */","
	 * Gets the position of the cursor.
	 * 
	 * @return The position of the cursor"
"<fim_prefix>c void setX(int value)
	{
		_x = value;
	}

	/**
	 * Gets the vertical position of the cursor.
	 * 
	 * @return The vertical position of the cursor.
	 */
	public int getY()
	{
		return _y;
	}

	public void setY(int value)
	{
		_y = value;
	}

	/**
	 * Gets the cursor position.
	 * 
	 * @return The cursor position.
	 */
	public Point getPosition()
	{
		return new Point(_x, _y);
	}

	/**<fim_suffix>
	public ButtonState getLeftButton()
	{
		return _leftButton;
	}

	public void setLeftButton(ButtonState value)
	{
		_leftButton = value;
	}

	/**
	 * Gets the state of the middle mouse button.
	 * 
	 * @return The state of the middle mouse button.
	 */
	public ButtonState getMiddleButton()
	{
		return _middleButton;
	}

	public void setMiddleButton(ButtonState value)
	{
		_middleButto<fim_middle>","
	 * Gets the state of the left mouse button.
	 * 
	 * @return The state of the left mouse button.
	 */","
	 * Gets the state of the left mouse button.
	 * 
	 * @return The state of the left mouse button.
	 */"
"<fim_prefix>e.
	 * 
	 * @return Hash code of the object.
	 */
	@Override
	public int hashCode()
	{
		// TODO: Need to do check hash method
		return super.hashCode();	// base.GetHashCode();
	}

	/**
	 * Gets the horizontal position of the cursor.
	 * 
	 * @return The horizontal position of the cursor.
	 */
	public int getX()
	{
		return _x;
	}

	public void setX(int value)
	{
		_x = value;
	}

	/**<fim_suffix>
	public int getY()
	{
		return _y;
	}

	public void setY(int value)
	{
		_y = value;
	}

	/**
	 * Gets the cursor position.
	 * 
	 * @return The cursor position.
	 */
	public Point getPosition()
	{
		return new Point(_x, _y);
	}

	/**
	 * Gets the state of the left mouse button.
	 * 
	 * @return The state of the left mouse button.
	 */
	public ButtonState getLeftButton()
	{
		return _<fim_middle>","
	 * Gets the vertical position of the cursor.
	 * 
	 * @return The vertical position of the cursor.
	 */","
	 * Gets the vertical position of the cursor.
	 * 
	 * @return The vertical position of the cursor.
	 */"
"<fim_prefix> * Gets the cursor position.
	 * 
	 * @return The cursor position.
	 */
	public Point getPosition()
	{
		return new Point(_x, _y);
	}

	/**
	 * Gets the state of the left mouse button.
	 * 
	 * @return The state of the left mouse button.
	 */
	public ButtonState getLeftButton()
	{
		return _leftButton;
	}

	public void setLeftButton(ButtonState value)
	{
		_leftButton = value;
	}

	/**<fim_suffix>
	public ButtonState getMiddleButton()
	{
		return _middleButton;
	}

	public void setMiddleButton(ButtonState value)
	{
		_middleButton = value;
	}

	/**
	 * Gets the state of the right mouse button.
	 * 
	 * @return The state of the right mouse button.
	 */
	public ButtonState getRightButton()
	{
		return _rightButton;
	}

	public void setRightButton(ButtonState value)
	{
		_rightBut<fim_middle>","
	 * Gets the state of the middle mouse button.
	 * 
	 * @return The state of the middle mouse button.
	 */","
	 * Gets the state of the middle mouse button.
	 * 
	 * @return The state of the middle mouse button.
	 */"
"<fim_prefix>package jMono_Framework.input;

import jMono_Framework.Point;

// C# struct
/**<fim_suffix>
public class MouseState
{
	int _x, _y;
	public int _scrollWheelValue;
	ButtonState _leftButton;
	ButtonState _rightButton;
	ButtonState _middleButton;
	ButtonState _xButton1;
	ButtonState _xButton2;

	// Note: Added this since it is provided by default for struct in C#
	public MouseState() {}
	
	/**
	 * Initializes a new instance of the MouseState.
	 * 
	 * <p>
	 * Normally {@link Mou<fim_middle>","
 * Represents a mouse state with cursor position and button press information.
 * 
 * @author Eric Perron
 *
 */","
 * Represents the state of the mouse.
 * 
 * @author <NAME>
 * @version 1.0
 * @"
"<fim_prefix>getMiddleButton()
	{
		return _middleButton;
	}

	public void setMiddleButton(ButtonState value)
	{
		_middleButton = value;
	}

	/**
	 * Gets the state of the right mouse button.
	 * 
	 * @return The state of the right mouse button.
	 */
	public ButtonState getRightButton()
	{
		return _rightButton;
	}

	public void setRightButton(ButtonState value)
	{
		_rightButton = value;
	}

	/**<fim_suffix>
	public int getScrollWheelValue()
	{
		return _scrollWheelValue;
	}

	public void setScrollWheelValue(int value)
	{
		_scrollWheelValue = value;
	}

	/**
	 * Gets the state of the XButton1.
	 * 
	 * @return The state of the XButton1.
	 */
	public ButtonState getXButton1()
	{
		return _xButton1;
	}

	public void setXButton1(ButtonState value)
	{
		_xButton1 = value;
	}

	/**
	 * Gets t<fim_middle>","
	 * Returns the cumulative scroll wheel value since the game start.
	 * 
	 * @return The cumulative scroll wheel value since the game start.
	 */","
	 * Gets the state of the left mouse button.
	 * 
	 * @return The state of the left mouse button.
	 */"
"<fim_prefix>;
	}

	public void setRightButton(ButtonState value)
	{
		_rightButton = value;
	}

	/**
	 * Returns the cumulative scroll wheel value since the game start.
	 * 
	 * @return The cumulative scroll wheel value since the game start.
	 */
	public int getScrollWheelValue()
	{
		return _scrollWheelValue;
	}

	public void setScrollWheelValue(int value)
	{
		_scrollWheelValue = value;
	}

	/**<fim_suffix>
	public ButtonState getXButton1()
	{
		return _xButton1;
	}

	public void setXButton1(ButtonState value)
	{
		_xButton1 = value;
	}

	/**
	 * Gets the state of the XButton2.
	 * 
	 * @return The state of the XButton2.
	 */
	public ButtonState getXButton2()
	{
		return _xButton2;
	}

	public void setXButton2(ButtonState value)
	{
		_xButton2 = value;
	}
}
<fim_middle>","
	 * Gets the state of the XButton1.
	 * 
	 * @return The state of the XButton1.
	 */","
	 * Gets the state of the left mouse button.
	 * 
	 * @return The state of the left mouse button.
	 */"
"<fim_prefix>rollWheelValue;
	}

	/**
	 * Indicates whether some other object is ""not equal to"" this one.
	 * 
	 * @param obj
	 * 		  the reference object with which to compare.
	 * @return {@code false} if this object is the same as the obj argument;
     *         {@code true} otherwise.
     * @see #equals(Object)
	 */
	public boolean notEquals(Object obj)
	{
		return !this.equals(obj);
	}

	/**<fim_suffix>
	@Override
	public int hashCode()
	{
		// TODO: Need to do check hash method
		return super.hashCode();	// base.GetHashCode();
	}

	/**
	 * Gets the horizontal position of the cursor.
	 * 
	 * @return The horizontal position of the cursor.
	 */
	public int getX()
	{
		return _x;
	}

	public void setX(int value)
	{
		_x = value;
	}

	/**
	 * Gets the vertical position of the cursor.
	 <fim_middle>","
	 * Gets the hash code for MouseState instance.
	 * 
	 * @return Hash code of the object.
	 */","
	 * Indicates whether some other object is ""equal to"" this one.
	 * 
	 * @param obj
	 * 		 "
"<fim_prefix>e getLeftButton()
	{
		return _leftButton;
	}

	public void setLeftButton(ButtonState value)
	{
		_leftButton = value;
	}

	/**
	 * Gets the state of the middle mouse button.
	 * 
	 * @return The state of the middle mouse button.
	 */
	public ButtonState getMiddleButton()
	{
		return _middleButton;
	}

	public void setMiddleButton(ButtonState value)
	{
		_middleButton = value;
	}

	/**<fim_suffix>
	public ButtonState getRightButton()
	{
		return _rightButton;
	}

	public void setRightButton(ButtonState value)
	{
		_rightButton = value;
	}

	/**
	 * Returns the cumulative scroll wheel value since the game start.
	 * 
	 * @return The cumulative scroll wheel value since the game start.
	 */
	public int getScrollWheelValue()
	{
		return _scrollWheelValue;
	}

	public void setScroll<fim_middle>","
	 * Gets the state of the right mouse button.
	 * 
	 * @return The state of the right mouse button.
	 */","
	 * Gets the state of the right mouse button.
	 * 
	 * @return The state of the right mouse button.
	 */"
"<fim_prefix>/*<fim_suffix>

package at.ac.uniklu.mobile.sportal.publictransport.stw;

public class DepartureMonitorException extends Exception {

	private static final long serialVersionUID = -1968212516765287215L;

	public DepartureMonitorException() {
		super();
	}

	public DepartureMonitorException(String detailMessage, Throwable throwable) {
		super(detailMessage, throwable);
	}

	public Dep<fim_middle>","
 * Copyright (c) 2014 Mario Guggenberger <mario.guggenberger@aau.at>
 *
 * This file is part of AAU Studentenportal.
 *
 * AAU Studentenportal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AAU Studentenportal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AAU Studentenportal.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package ips.data.entities;

import javax.jdo.annotations.DatastoreIdentity;
import javax.jdo.annotations.IdGeneratorStrategy;
import javax.jdo.annotations.PersistenceCapable;

import org.simpleframework.xml.Element;
import org.simpleframework.xml.Root;

/**<fim_suffix>
@PersistenceCapable
@DatastoreIdentity(strategy = IdGeneratorStrategy.INCREMENT)
@Root
public class Fingerprint {

	@Element
	protected Position position;

	@Element(required = false)
	protected Measurement measurement;

	public Fingerprint() {
		super();
	}

	public Fingerprint(Position position, Measurement measurements) {
		super();
		this.position = position;
		this.measurement = <fim_middle>","
 * 
 * A fingerprint for doing scene analysis. Represents a measurement on a
 * position on an indoor map.
 * 
 * @author Wouter Van Rossem
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package org.jpc.emulator.execution.opcodes.vm;

import org.jpc.emulator.execution.*;
import org.jpc.emulator.execution.decoder.*;
import org.jpc.emulator.processor.*;
import org.jpc.emulator.processor.fpu64.*;
import static org.jpc.emulator.processor.Processor.*;

public class test_Ed_Gd_mem extends Executable
{
    final Pointer op1;
    final int op2Index;

    public test_Ed_Gd_me<fim_middle>","
    JPC: An x86 PC Hardware Emulator for a pure Java Virtual Machine

    Copyright (C) 2012-2013 Ian Preston

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 2 as published by
    the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
    Details (including contact information) can be found at: 

    jpc.sourceforge.net
    or the developer website
    sourceforge.net/projects/jpc/

    End of licence header
*/","*
 * @author sergioc
 */"
"<fim_prefix>package org.divinitycraft.divinityeconomy.response;

import net.milkbowl.vault.economy.EconomyResponse.ResponseType;

/**<fim_suffix>
public class EconomyTransferResponse extends Response {
    // The senders balance
    public final double senderBalance;
    // The receivers balance
    public final double receiverBalance;
    // The amount sent between the players
    public final double amountSent;

    /**
     * Constructor
     *
     * @param senderBalance   - The balance of the sender
     * @param receiverB<fim_middle>","
 * Stores the results of a transaction between two players
 */","
 * Response class for the EconomyTransfer method
 *
 *"
"<fim_prefix>lt.economy.EconomyResponse.ResponseType;

/**
 * Stores the results of a transaction between two players
 */
public class EconomyTransferResponse extends Response {
    // The senders balance
    public final double senderBalance;
    // The receivers balance
    public final double receiverBalance;
    // The amount sent between the players
    public final double amountSent;

    /**<fim_suffix>
    public EconomyTransferResponse(double senderBalance, double receiverBalance, double amountSent, ResponseType responseType, String errorMessage) {
        super(responseType, errorMessage);
        this.senderBalance = senderBalance;
        this.receiverBalance = receiverBalance;
        this.amountSent = amountSent;
    }
}
<fim_middle>","
     * Constructor
     *
     * @param senderBalance   - The balance of the sender
     * @param receiverBalance - The balance of the receiver
     * @param amountSent      - The amount sent between the players
     * @param responseType    - The type of response
     * @param errorMessage    - The error message, if any.
     */","
     * Creates a new EconomyTransferResponse
     *
     * @param senderBalance The senders balance
     * @param receiverBalance The receivers balance
     * @param amountSent The amount sent between the players
     * @param responseType The type of response
     * @param errorMessage The error message
     */"
"<fim_prefix>/*<fim_suffix>

package org.iplass.adminconsole.client.tools.ui.permissionexplorer;

import org.iplass.mtp.entity.GenericEntity;

import com.smartgwt.client.widgets.layout.VLayout;

public abstract class PermissionEditPane extends VLayout {
	public abstract GenericEntity getEditEntity();
	public abstract boolean validate();
}
<fim_middle>","
 * Copyright (C) 2015 DENTSU SOKEN INC. All Rights Reserved.
 * 
 * Unless you have purchased a commercial license,
 * the following license terms apply:
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */","*
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package org.l2j.gameserver.data.database.data;

import org.l2j.commons.database.annotation.Column;
import org.l2j.commons.database.annotation.NonUpdatable;
import org.l2j.commons.database.annotation.Table;

import java.time.LocalDateTime;

/**
 * @author JoeAlisson
 */
@Table(""bbs_favorites"")
public class CommunityFavorite {

    @NonUpdatable
    @Column(""favId"")
    private int id;
<fim_middle>","
 * Copyright Â© 2019-2020 L2JOrg
 *
 * This file is part of the L2JOrg project.
 *
 * L2JOrg is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * L2JOrg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author JoeAlisson
 */"
"<fim_prefix> * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.l2j.gameserver.data.database.data;

import org.l2j.commons.database.annotation.Column;
import org.l2j.commons.database.annotation.NonUpdatable;
import org.l2j.commons.database.annotation.Table;

import java.time.LocalDateTime;

/**<fim_suffix>
@Table(""bbs_favorites"")
public class CommunityFavorite {

    @NonUpdatable
    @Column(""favId"")
    private int id;

    private int playerId;

    @Column(""favTitle"")
    private String title;

    @Column(""favBypass"")
    private String bypass;

    @NonUpdatable
    @Column(""favAddDate"")
    private LocalDateTime date;

    public int getId() {
        return id;
    }

    public<fim_middle>","
 * @author JoeAlisson
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package org.eclipse.nebula.paperclips.core.grid;

import org.eclipse.swt.graphics.RGB;

/**
 * Instances of this interface provide background colors to be drawn behind
 * cells in a grid. This interface is used by DefaultGridLook to provide
 * pluggable cell background behavior.
 * 
 * @author Matthew Hall
 */
public interface CellBackgroundProvider {
	/**
	 * Returns the background c<fim_middle>","
 * Copyright (c) 2006 Matthew Hall and others.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *     Matthew Hall - initial API and implementation
 */","*
 * Instances of this interface provide background colors to be drawn behind
 * cells in a grid. This interface is used by DefaultGridLook to provide
 * pluggable cell background behavior.
 * 
 * @author Matthew Hall
 */"
"<fim_prefix>al API and implementation
 */
package org.eclipse.nebula.paperclips.core.grid;

import org.eclipse.swt.graphics.RGB;

/**
 * Instances of this interface provide background colors to be drawn behind
 * cells in a grid. This interface is used by DefaultGridLook to provide
 * pluggable cell background behavior.
 * 
 * @author Matthew Hall
 */
public interface CellBackgroundProvider {
	/**<fim_suffix>
	public RGB getCellBackground(int row, int column, int colspan);
}
<fim_middle>","
	 * Returns the background color to display for the given grid cell.
	 * 
	 * @param row
	 *            the row index (zero-based)
	 * @param column
	 *            the column index (zero-based). This is the grid column index,
	 *            not the cell index within the row.
	 * @param colspan
	 *            the number of grid columns that the cell occupies.
	 * @return the background color to display for the given header cell.
	 */","
	 * Returns the background color to be used for the specified cell.
	 * 
	 * @param row
	 *            the row index of the cell
	 * @param column
	 *            the column index of the cell
	 * @param colspan
	 *            the number of columns spanned by the cell
	 * @return the background color to be used for the specified cell
	 */"
"<fim_prefix>ials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *     Matthew Hall - initial API and implementation
 */
package org.eclipse.nebula.paperclips.core.grid;

import org.eclipse.swt.graphics.RGB;

/**<fim_suffix>
public interface CellBackgroundProvider {
	/**
	 * Returns the background color to display for the given grid cell.
	 * 
	 * @param row
	 *            the row index (zero-based)
	 * @param column
	 *            the column index (zero-based). This is the grid column index,
	 *            not the cell index within the row.
	 * @param colspan
	 *            the number of grid columns tha<fim_middle>","
 * Instances of this interface provide background colors to be drawn behind
 * cells in a grid. This interface is used by DefaultGridLook to provide
 * pluggable cell background behavior.
 * 
 * @author Matthew Hall
 */","
 * Provides the background color to display for a grid cell.
 * 
 * @author Matthew Hall
 * @since 1.0.0
 */"
"<fim_prefix>.pewpewproject.lasertag.networking.client.callbacks;

import de.pewpewproject.lasertag.LasertagMod;
import net.fabricmc.fabric.api.client.networking.v1.ClientPlayNetworking;
import net.fabricmc.fabric.api.networking.v1.PacketSender;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.network.ClientPlayNetworkHandler;
import net.minecraft.network.PacketByteBuf;

/**<fim_suffix>
public class SetLasertargetHitByCallback implements ClientPlayNetworking.PlayChannelHandler {

    @Override
    public void receive(MinecraftClient client, ClientPlayNetworkHandler handler, PacketByteBuf buf, PacketSender responseSender) {

        try {
            client.world.getClientLasertagManager()
                    .getLasertargetsManager()
                    .setHitBy(buf<fim_middle>","
 * Callback for the set lasertarget hit by network event
 *
 * @author Ã‰tienne Muser
 */","
 * Created by Tom on 02.09.2017.
 */"
"<fim_prefix>/**<fim_suffix>
package org.veo.adapter.presenter.api.dto.create;

import org.veo.adapter.presenter.api.dto.AbstractControlInDomainDto;

import lombok.Data;
import lombok.EqualsAndHashCode;

@EqualsAndHashCode(callSuper = true)
@Data
public class CreateControlInDomainDto extends AbstractControlInDomainDto {}
<fim_middle>","*****************************************************************************
 * verinice.veo
 * Copyright (C) 2023  Jonas Jordan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package baritone.command.defaults;

import baritone.KeepName;
import baritone.api.IBaritone;
import baritone.api.command.Command;
import baritone.api.command.argument.IArgConsumer;
import baritone.api.command.datatypes.EntityClassById;
import baritone.api.command.datatypes.IDatatypeFor;
import baritone.api.command.datatypes.NearbyPlayer;
import baritone.api.command.exception.CommandE<fim_middle>","
 * This file is part of Baritone.
 *
 * Baritone is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Baritone is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Baritone.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>ty1> <entity2> <...> - Follow certain entities (for example 'skeleton', 'horse' etc.)"",
                ""> follow players - Follow players"",
                ""> follow player <username1> <username2> <...> - Follow certain players""
        );
    }

    @KeepName
    private enum FollowGroup {
        ENTITIES(LivingEntity.class::isInstance),
        PLAYERS(Player.class::isInstance); /*<fim_suffix>
        final Predicate<Entity> filter;

        FollowGroup(Predicate<Entity> filter) {
            this.filter = filter;
        }
    }

    @KeepName
    private enum FollowList {
        ENTITY(EntityClassById.INSTANCE),
        PLAYER(NearbyPlayer.INSTANCE);

        final IDatatypeFor datatype;

        FollowList(IDatatypeFor datatype) {
            this.datatype = datatype;
 <fim_middle>",",
        FRIENDLY(entity -> entity.getAttackTarget()!= HELPER.mc.player),
        HOSTILE(FRIENDLY.filter.negate()); */","*
         * @param entity The entity to check.
         * @return Whether the entity is a player.
         */"
"<fim_prefix>/*<fim_suffix>

package com.timomcgrath.packstacker;

import net.kyori.adventure.audience.Audience;

import java.util.List;

public interface PackPlugin {
    void reloadMessages();
    void reloadPacks();
    void reloadAll();
    boolean hasPermission(Audience audience, String permission);

    default boolean hasAnyPermission(Audience audience, String... permissions) {
        for (String permiss<fim_middle>","
 * PackStacker
 * Copyright (C) 2024 Timo McGrath
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by Tim on 3/29/2021.
 */"
"<fim_prefix>/**<fim_suffix>
package org.python.pydev.shared_interactive_console.console.ui.internal;

import org.eclipse.osgi.util.NLS;

public class ScriptConsoleMessages extends NLS {

    private static final String BUNDLE_NAME = ScriptConsoleMessages.class.getName();

    public static String SaveSessionAction;

    public static String SaveSessionTooltip;

    public static String TerminateConsoleAction;

 <fim_middle>","*****************************************************************************
 * Copyright (c) 2005, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *

 *******************************************************************************/","
 * 
 */"
"<fim_prefix>/*<fim_suffix>
package ConquerSpace.common.game.city.area;

import ConquerSpace.common.GameState;
import ConquerSpace.common.save.SerializeClassName;
import java.util.HashMap;

/**
 * An area that does not generate resources, and only has resource intake.
 * @author EhWhoAmI
 */
@SerializeClassName(""consumer-area"")
public class ConsumerArea extends Area{
    /**
     * Consumed per tick
     */
    <fim_middle>","
 * Conquer Space - Conquer Space!
 * Copyright (C) 2019 EhWhoAmI
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * An area that does not generate resources, and only has resource intake.
 * @author EhWhoAmI
 */"
"<fim_prefix>  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package ConquerSpace.common.game.city.area;

import ConquerSpace.common.GameState;
import ConquerSpace.common.save.SerializeClassName;
import java.util.HashMap;

/**<fim_suffix>
@SerializeClassName(""consumer-area"")
public class ConsumerArea extends Area{
    /**
     * Consumed per tick
     */
    public HashMap<Integer, Double> consumed;
    
    ConsumerArea(GameState gameState) {
        super(gameState);
        consumed = new HashMap<>();
    }
    
    @Override
    public void accept(AreaDispatcher dispatcher) {
        dispatcher.dispatch(this);
    <fim_middle>","
 * An area that does not generate resources, and only has resource intake.
 * @author EhWhoAmI
 */","
 *
 * @author <NAME> (DaPorkchop_)
 */"
"<fim_prefix>e <https://www.gnu.org/licenses/>.
 */
package ConquerSpace.common.game.city.area;

import ConquerSpace.common.GameState;
import ConquerSpace.common.save.SerializeClassName;
import java.util.HashMap;

/**
 * An area that does not generate resources, and only has resource intake.
 * @author EhWhoAmI
 */
@SerializeClassName(""consumer-area"")
public class ConsumerArea extends Area{
    /**<fim_suffix>
    public HashMap<Integer, Double> consumed;
    
    ConsumerArea(GameState gameState) {
        super(gameState);
        consumed = new HashMap<>();
    }
    
    @Override
    public void accept(AreaDispatcher dispatcher) {
        dispatcher.dispatch(this);
    }
}
<fim_middle>","
     * Consumed per tick
     */","
     * The resources that this area consumes.
  "
"<fim_prefix>/*<fim_suffix>


package org.restcomm.protocols.ss7.tools.simulator.tests.checkimei;

import org.restcomm.protocols.ss7.tools.simulator.level3.MapProtocolVersion;

/**
 * @author mnowa
 *
 */
public interface TestCheckImeiClientManMBean {
    String getImei();

    void setImei(String imei);

    MapProtocolVersion getMapProtocolVersion();

    String getMapProtocolVersion_Value();

    void setMapP<fim_middle>","
 * TeleStax, Open Source Cloud Communications
 * Copyright 2011-2016, Telestax Inc and individual contributors
 * by the @authors tag.
 *
 * This program is free software: you can redistribute it and/or modify
 * under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * Copyright (c) 2011, SOCIETIES Consortium (WATERFORD INSTITUTE OF TECHNOLOGY (TSSG), HERIOT-WATT UNIVERSITY (HWU), SOLUTA.NET 
 * (SN), GERMAN AEROSPACE CENTRE (Deutsches Zentrum fuer Luft- und Raumfahrt e.V.) (DLR), Zavod za varnostne tehnologije
 * informacijske družbe in elektronsko poslovanje (SETCCE), INSTITUTE OF COMMUNICATION AND COMPUTER SYSTEMS (ICCS), LAKE
 * COMMUNICATIONS (LAKE), INTEL PERFORMANCE LEARNING SOLUTIONS LTD (INTEL), PORTUGAL TELECOM INOVAÇÃO, SA (PTIN), IBM Corp., 
 * INSTITUT TELECOM (ITSUD), AMITEC DIACHYTI EFY"
"<fim_prefix>TICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */


package org.restcomm.protocols.ss7.tools.simulator.tests.checkimei;

import org.restcomm.protocols.ss7.tools.simulator.level3.MapProtocolVersion;

/**<fim_suffix>
public interface TestCheckImeiClientManMBean {
    String getImei();

    void setImei(String imei);

    MapProtocolVersion getMapProtocolVersion();

    String getMapProtocolVersion_Value();

    void setMapProtocolVersion(MapProtocolVersion val);

    void putMapProtocolVersion(String val);

    CheckImeiClientAction getCheckImeiClientAction();

    String getCheckImeiClientAction_<fim_middle>","
 * @author mnowa
 *
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.ozguryazilim.raf.forms.model;

import com.ozguryazilim.raf.models.RafDocument;

/**<fim_suffix>
public class RafDocumentField extends AbstractRafObjectSelectField<RafDocument>{

    @Override
    public Class<RafDocument> getValueClass() {
        return RafDocument.class;
    }

    @Override
    public String getType() {
        return ""RafDocument"";
    }
    
}
<fim_middle>","
 *
 * @author oyas
 */","
 *
 * @author <NAME>
"
"<fim_prefix>package ggc.pump.device.insulet.data.dto;

import java.util.List;

import ggc.pump.device.insulet.data.enums.OmnipodDataType;

/**<fim_suffix>
public class UnknownRecord extends AbstractRecord
{

    public UnknownRecord()
    {
        super(false);
    }


    @Override
    public int process(List<Integer> data, int offset)
    {
        return 0;
    }


    @Override
    public void customProcess(int[] data)
    {

    }


    @Override
    public String toString()
    {
        return ""UnknownRecord {length="" + this.len<fim_middle>","
 * Created by andy on 20.05.15.
 */","
 * Class to represent an unknown record.
 *
 * @author"
"<fim_prefix>/*<fim_suffix>
package cn.taketoday.bytecode.tree.analysis;

import java.util.List;

import cn.taketoday.bytecode.ConstantDynamic;
import cn.taketoday.bytecode.Handle;
import cn.taketoday.bytecode.Opcodes;
import cn.taketoday.bytecode.Type;
import cn.taketoday.bytecode.tree.AbstractInsnNode;
import cn.taketoday.bytecode.tree.FieldInsnNode;
import cn.taketoday.bytecode.tree.IntInsnNode;
import cn.tak<fim_middle>","
 * Copyright 2017 - 2024 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see [https://www.gnu.org/licenses/]
 */","*
 * @author <NAME>
 */"
"<fim_prefix>y.bytecode.tree.LdcInsnNode;
import cn.taketoday.bytecode.tree.MethodInsnNode;
import cn.taketoday.bytecode.tree.MultiANewArrayInsnNode;
import cn.taketoday.bytecode.tree.TypeInsnNode;

/**
 * An {@link Interpreter} for {@link BasicValue} values.
 *
 * @author Eric Bruneton
 * @author Bing Ran
 */
public class BasicInterpreter extends Interpreter<BasicValue> implements Opcodes {

  /**<fim_suffix>
  public static final Type NULL_TYPE = Type.forInternalName(""null"");

  /**
   * Constructs a new {@link BasicInterpreter}.
   */
  public BasicInterpreter() { }

  @Override
  public BasicValue newValue(final Type type) {
    if (type == null) {
      return BasicValue.UNINITIALIZED_VALUE;
    }
    return switch (type.getSort()) {
      case Type.VOID -> null;
      case Type.LONG -<fim_middle>","
   * Special type used for the {@literal null} literal. This is an object reference type with
   * descriptor 'Lnull;'.
   */","
   * The {@link Type} of {@code null}.
   */"
"<fim_prefix>code.tree.AbstractInsnNode;
import cn.taketoday.bytecode.tree.FieldInsnNode;
import cn.taketoday.bytecode.tree.IntInsnNode;
import cn.taketoday.bytecode.tree.InvokeDynamicInsnNode;
import cn.taketoday.bytecode.tree.LdcInsnNode;
import cn.taketoday.bytecode.tree.MethodInsnNode;
import cn.taketoday.bytecode.tree.MultiANewArrayInsnNode;
import cn.taketoday.bytecode.tree.TypeInsnNode;

/**<fim_suffix>
public class BasicInterpreter extends Interpreter<BasicValue> implements Opcodes {

  /**
   * Special type used for the {@literal null} literal. This is an object reference type with
   * descriptor 'Lnull;'.
   */
  public static final Type NULL_TYPE = Type.forInternalName(""null"");

  /**
   * Constructs a new {@link BasicInterpreter}.
   */
  public BasicInterpreter() { }

  @Overr<fim_middle>","
 * An {@link Interpreter} for {@link BasicValue} values.
 *
 * @author Eric Bruneton
 * @author Bing Ran
 */","
 * An interpreter for the Java bytecode.
 *
 * @author <NAME>
 */"
"<fim_prefix> Interpreter} for {@link BasicValue} values.
 *
 * @author Eric Bruneton
 * @author Bing Ran
 */
public class BasicInterpreter extends Interpreter<BasicValue> implements Opcodes {

  /**
   * Special type used for the {@literal null} literal. This is an object reference type with
   * descriptor 'Lnull;'.
   */
  public static final Type NULL_TYPE = Type.forInternalName(""null"");

  /**<fim_suffix>
  public BasicInterpreter() { }

  @Override
  public BasicValue newValue(final Type type) {
    if (type == null) {
      return BasicValue.UNINITIALIZED_VALUE;
    }
    return switch (type.getSort()) {
      case Type.VOID -> null;
      case Type.LONG -> BasicValue.LONG_VALUE;
      case Type.FLOAT -> BasicValue.FLOAT_VALUE;
      case Type.DOUBLE -> BasicValue.DOUBLE_VALUE;
     <fim_middle>","
   * Constructs a new {@link BasicInterpreter}.
   */","
   * Creates a new {@link BasicInterpreter}.
   */"
"<fim_prefix>package edu.chip.carranet.auth.exception;


/**<fim_suffix>
public class PermissionException extends AuthException {

    public PermissionException(String s) {
        super(s);
    }

}
<fim_middle>","
 * This Exception will eventually cause the filter to throw a 404
 */","
 * @author <NAME>
 * @version 1.0
"
"<fim_prefix>/**<fim_suffix>
package io.mycat.mysqlclient;

import com.alibaba.druid.sql.SQLUtils;
import com.alibaba.druid.sql.ast.SQLReplaceable;
import com.alibaba.druid.sql.ast.SQLStatement;
import com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;
import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitorAdapter;
import com.google.common.collect.ImmutableList;
import io.mycat.PreparedStatement;
import<fim_middle>","
 * Copyright (C) <2022>  <chen junwen>
 * <p>
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * <p>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * <p>
 * You should have received a copy of the GNU General Public License along with this program.  If
 * not, see <http://www.gnu.org/licenses/>.
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package org.geomajas.plugin.jsapi.gwt.client.exporter.map.layer;

import org.geomajas.gwt.client.map.layer.AbstractLayer;
import org.geomajas.gwt.client.map.layer.RasterLayer;
import org.geomajas.plugin.jsapi.client.map.layer.Layer;
import org.timepedia.exporter.client.Export;
import org.timepedia.exporter.client.ExportPackage;
import org.timepedia.exporter.client.Exportable;

/**
 * <fim_middle>","
 * This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
 *
 * Copyright 2008-2015 Geosparc nv, http://www.geosparc.com/, Belgium.
 *
 * The program is available in open source according to the GNU Affero
 * General Public License. All contributions in this program are covered
 * by the Geomajas Contributors License Agreement. For full licensing
 * details, see LICENSE.txt in the project root.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>
 */
package org.geomajas.plugin.jsapi.gwt.client.exporter.map.layer;

import org.geomajas.gwt.client.map.layer.AbstractLayer;
import org.geomajas.gwt.client.map.layer.RasterLayer;
import org.geomajas.plugin.jsapi.client.map.layer.Layer;
import org.timepedia.exporter.client.Export;
import org.timepedia.exporter.client.ExportPackage;
import org.timepedia.exporter.client.Exportable;

/**<fim_suffix>
@Export(""LayerImpl"")
@ExportPackage(""org.geomajas.jsapi.map.layer"")
public class LayerImpl implements Layer, Exportable {

	protected org.geomajas.gwt.client.map.layer.Layer<?> layer;

	public LayerImpl() {
	}

	/**
	 * Create a new layer.
	 * 
	 * @param layer
	 * @since 1.0.0
	 */
	public LayerImpl(org.geomajas.gwt.client.map.layer.Layer<?> layer) {
		this.layer = layer;
	}

	/** Co<fim_middle>","
 * Definition of a layer for the JavaScript API. Used for raster layers.
 * 
 * @author Oliver May
 * @author Pieter De Graef
 */","
 * Implementation of the {@link Layer} interface.
 * 
 * @author <NAME>
 * 
 * @see Layer
 * @see AbstractLayer
 *"
"<fim_prefix>timepedia.exporter.client.Exportable;

/**
 * Definition of a layer for the JavaScript API. Used for raster layers.
 * 
 * @author Oliver May
 * @author Pieter De Graef
 */
@Export(""LayerImpl"")
@ExportPackage(""org.geomajas.jsapi.map.layer"")
public class LayerImpl implements Layer, Exportable {

	protected org.geomajas.gwt.client.map.layer.Layer<?> layer;

	public LayerImpl() {
	}

	/**<fim_suffix>
	public LayerImpl(org.geomajas.gwt.client.map.layer.Layer<?> layer) {
		this.layer = layer;
	}

	/** Completely clear all rendering of this layer and redraw. */
	public void refresh() {
		if (layer instanceof RasterLayer) {
			RasterLayer rLayer = (RasterLayer) layer;
			rLayer.setVisible(false);
			rLayer.getStore().clear();
			rLayer.setVisible(true);
		} else if (layer instanceof o<fim_middle>","
	 * Create a new layer.
	 * 
	 * @param layer
	 * @since 1.0.0
	 */","
	 * @param layer
	 *            the layer to set
	 */"
"<fim_prefix> */
@Export(""LayerImpl"")
@ExportPackage(""org.geomajas.jsapi.map.layer"")
public class LayerImpl implements Layer, Exportable {

	protected org.geomajas.gwt.client.map.layer.Layer<?> layer;

	public LayerImpl() {
	}

	/**
	 * Create a new layer.
	 * 
	 * @param layer
	 * @since 1.0.0
	 */
	public LayerImpl(org.geomajas.gwt.client.map.layer.Layer<?> layer) {
		this.layer = layer;
	}

	/**<fim_suffix>
	public void refresh() {
		if (layer instanceof RasterLayer) {
			RasterLayer rLayer = (RasterLayer) layer;
			rLayer.setVisible(false);
			rLayer.getStore().clear();
			rLayer.setVisible(true);
		} else if (layer instanceof org.geomajas.gwt.client.map.layer.VectorLayer) {
			org.geomajas.gwt.client.map.layer.VectorLayer vl = (org.geomajas.gwt.client.map.layer.VectorLayer) layer;
			v<fim_middle>", Completely clear all rendering of this layer and redraw. */,"
	 * @return the layer
	 */"
"<fim_prefix>
	 * 
	 * @return
	 */
	public String getTitle() {
		return layer.getLabel();
	}

	/**
	 * Mark this layer as selected or not. Only one layer can be selected at any given time within a map.
	 * 
	 * @param selected
	 *            The boolean value that indicates whether or not to select this layer.
	 */
	public void setSelected(boolean selected) {
		layer.setLabeled(selected);
	}

	/**<fim_suffix>
	public boolean isSelected() {
		return layer.isSelected();
	}

	/**
	 * Mark this layer as visible or invisible. This may toggle the visibility flag, but does not guarantee that the
	 * layer be visible. This is because other factors might intrude upon the layer visibility, such as the minimum and
	 * maximum scales between which a layer can be visible.
	 * 
	 * @param markedAsVisibl<fim_middle>","
	 * Is this layer currently marked as selected or not?
	 * 
	 * @return Returns true or false.
	 */","
	 * Returns true if this layer is selected, false otherwise.
	 * 
	 * @return
	 */"
"<fim_prefix>n time within a map.
	 * 
	 * @param selected
	 *            The boolean value that indicates whether or not to select this layer.
	 */
	public void setSelected(boolean selected) {
		layer.setLabeled(selected);
	}

	/**
	 * Is this layer currently marked as selected or not?
	 * 
	 * @return Returns true or false.
	 */
	public boolean isSelected() {
		return layer.isSelected();
	}

	/**<fim_suffix>
	public void setMarkedAsVisible(boolean markedAsVisible) {
		layer.setVisible(markedAsVisible);
	}

	/**
	 * Has the layer been marked as visible?
	 * 
	 * @return True or false.
	 */
	public boolean isMarkedAsVisible() {
		// TODO revisit
		return ((AbstractLayer<?>) layer).isVisible();
	}

	/**
	 * Is the layer currently showing on the map or not? In other words, can we actually loo<fim_middle>","
	 * Mark this layer as visible or invisible. This may toggle the visibility flag, but does not guarantee that the
	 * layer be visible. This is because other factors might intrude upon the layer visibility, such as the minimum and
	 * maximum scales between which a layer can be visible.
	 * 
	 * @param markedAsVisible
	 *            Should the layer be marked as visible or invisible?
	 */","
	 * Set the layer to be marked as visible or not.
	 * 
	 * @param markedAsVisible
	 *            True or false.
	 */"
"<fim_prefix>t the
	 * layer be visible. This is because other factors might intrude upon the layer visibility, such as the minimum and
	 * maximum scales between which a layer can be visible.
	 * 
	 * @param markedAsVisible
	 *            Should the layer be marked as visible or invisible?
	 */
	public void setMarkedAsVisible(boolean markedAsVisible) {
		layer.setVisible(markedAsVisible);
	}

	/**<fim_suffix>
	public boolean isMarkedAsVisible() {
		// TODO revisit
		return ((AbstractLayer<?>) layer).isVisible();
	}

	/**
	 * Is the layer currently showing on the map or not? In other words, can we actually look at the layer on the map? A
	 * layer may be marked as visible but other factors (such as scale) may intrude upon the actual visibility of a
	 * layer.<br/>
	 * This value will return<fim_middle>","
	 * Has the layer been marked as visible?
	 * 
	 * @return True or false.
	 */","
	 * Is the layer currently visible on the map or not? In other words, can we actually look at the layer on"
"<fim_prefix>erver.
	 * 
	 * @return id of the server layer
	 */
	public String getServerLayerId() {
		return layer.getServerLayerId();
	}

	/**
	 * Return the layer's title. The difference between the ID and the title, is that the ID is used behind the screens,
	 * while the title is the visible name to the user.
	 * 
	 * @return
	 */
	public String getTitle() {
		return layer.getLabel();
	}

	/**<fim_suffix>
	public void setSelected(boolean selected) {
		layer.setLabeled(selected);
	}

	/**
	 * Is this layer currently marked as selected or not?
	 * 
	 * @return Returns true or false.
	 */
	public boolean isSelected() {
		return layer.isSelected();
	}

	/**
	 * Mark this layer as visible or invisible. This may toggle the visibility flag, but does not guarantee that the
	 * layer be visible<fim_middle>","
	 * Mark this layer as selected or not. Only one layer can be selected at any given time within a map.
	 * 
	 * @param selected
	 *            The boolean value that indicates whether or not to select this layer.
	 */","
	 * Return the layer's description.
	 * 
	 * @return
	 */"
"<fim_prefix>er
	 */
	public String getId() {
		return layer.getId();
	}

	/**
	 * Return this layer's server ID. Multiple client side layer (connected with a map) can point to a single data
	 * source on the back-end. This returns the actual layer name as used on the server.
	 * 
	 * @return id of the server layer
	 */
	public String getServerLayerId() {
		return layer.getServerLayerId();
	}

	/**<fim_suffix>
	public String getTitle() {
		return layer.getLabel();
	}

	/**
	 * Mark this layer as selected or not. Only one layer can be selected at any given time within a map.
	 * 
	 * @param selected
	 *            The boolean value that indicates whether or not to select this layer.
	 */
	public void setSelected(boolean selected) {
		layer.setLabeled(selected);
	}

	/**
	 * Is this layer cur<fim_middle>","
	 * Return the layer's title. The difference between the ID and the title, is that the ID is used behind the screens,
	 * while the title is the visible name to the user.
	 * 
	 * @return
	 */","
	 * Return this layer's title.
	 * 
	 * @return title of the layer"
"<fim_prefix>.VectorLayer) {
			org.geomajas.gwt.client.map.layer.VectorLayer vl = (org.geomajas.gwt.client.map.layer.VectorLayer) layer;
			vl.setVisible(false);
			vl.clearSelectedFeatures();
			vl.getFeatureStore().clear();
			vl.setVisible(true);
		}
	}

	/**
	 * Return this layer's client ID.
	 * 
	 * @return id of the client layer
	 */
	public String getId() {
		return layer.getId();
	}

	/**<fim_suffix>
	public String getServerLayerId() {
		return layer.getServerLayerId();
	}

	/**
	 * Return the layer's title. The difference between the ID and the title, is that the ID is used behind the screens,
	 * while the title is the visible name to the user.
	 * 
	 * @return
	 */
	public String getTitle() {
		return layer.getLabel();
	}

	/**
	 * Mark this layer as selected or not. Only one l<fim_middle>","
	 * Return this layer's server ID. Multiple client side layer (connected with a map) can point to a single data
	 * source on the back-end. This returns the actual layer name as used on the server.
	 * 
	 * @return id of the server layer
	 */","
	 * Return the layer's server ID.
	 * 
	 * @return
	 */"
"<fim_prefix>tVisible(false);
			rLayer.getStore().clear();
			rLayer.setVisible(true);
		} else if (layer instanceof org.geomajas.gwt.client.map.layer.VectorLayer) {
			org.geomajas.gwt.client.map.layer.VectorLayer vl = (org.geomajas.gwt.client.map.layer.VectorLayer) layer;
			vl.setVisible(false);
			vl.clearSelectedFeatures();
			vl.getFeatureStore().clear();
			vl.setVisible(true);
		}
	}

	/**<fim_suffix>
	public String getId() {
		return layer.getId();
	}

	/**
	 * Return this layer's server ID. Multiple client side layer (connected with a map) can point to a single data
	 * source on the back-end. This returns the actual layer name as used on the server.
	 * 
	 * @return id of the server layer
	 */
	public String getServerLayerId() {
		return layer.getServerLayerId();
	}

	/**
	 * Re<fim_middle>","
	 * Return this layer's client ID.
	 * 
	 * @return id of the client layer
	 */","
	 * Return this layer's id.
	 * 
	 * @return id of the layer
	 */"
"<fim_prefix>am markedAsVisible
	 *            Should the layer be marked as visible or invisible?
	 */
	public void setMarkedAsVisible(boolean markedAsVisible) {
		layer.setVisible(markedAsVisible);
	}

	/**
	 * Has the layer been marked as visible?
	 * 
	 * @return True or false.
	 */
	public boolean isMarkedAsVisible() {
		// TODO revisit
		return ((AbstractLayer<?>) layer).isVisible();
	}

	/**<fim_suffix>
	public boolean isShowing() {
		return layer.isShowing();
	}
}<fim_middle>","
	 * Is the layer currently showing on the map or not? In other words, can we actually look at the layer on the map? A
	 * layer may be marked as visible but other factors (such as scale) may intrude upon the actual visibility of a
	 * layer.<br/>
	 * This value will return the final result of all these factors and clearly state whether or not the layer can be
	 * seen.
	 * 
	 * @return true or false.
	 */","
	 * Is the layer showing?
	 * 
	 * @return True or false.
	 */"
"<fim_prefix>package com.siival.bot.modules.api.req;

import lombok.Data;

/**<fim_suffix>
@Data
public class SearchQuestionInfoReq extends BaseReq {

    private Integer cid;
//    private Integer uid;
    private String keywords;
//    private Integer page = 0;
//    private Integer size = 10;
}
<fim_middle>","
 * @author mark acrossxwall@gmail.com
 * @version 1.0.0
 * @ClassName SearchQuestionInfoReq
 * 
 * @Date 2022-03-01 10:01
 */","
 * @author siival
 */"
"<fim_prefix>/**<fim_suffix>
package org.lunifera.runtime.web.vaadin.components.fields.search.filter;

import com.vaadin.data.Container.Filter;

public interface IFilterProperty {

	String PROP_OPTIONS = ""options"";
	String PROP_SELECTION = ""selection"";
	String PROP_FILTER_VALUE = ""value"";
	
	/**
	 * Returns the vaadin filter for the property.
	 * @return
	 */
	Filter getFilter();
	
	/**
	 * Returns the property i<fim_middle>","
 * Copyright (c) 2011 - 2015, Lunifera GmbH (Gross Enzersdorf), Loetz KG (Heidelberg)
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *         Florian Pirchner - Initial implementation
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix> Initial implementation
 */
package org.lunifera.runtime.web.vaadin.components.fields.search.filter;

import com.vaadin.data.Container.Filter;

public interface IFilterProperty {

	String PROP_OPTIONS = ""options"";
	String PROP_SELECTION = ""selection"";
	String PROP_FILTER_VALUE = ""value"";
	
	/**
	 * Returns the vaadin filter for the property.
	 * @return
	 */
	Filter getFilter();
	
	/**<fim_suffix>
	Object getPropertyId();
}
<fim_middle>","
	 * Returns the property id for the search field.
	 * @return
	 */","
	 * Returns the property id.
	 * @return
	 */"
"<fim_prefix>* http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *         Florian Pirchner - Initial implementation
 */
package org.lunifera.runtime.web.vaadin.components.fields.search.filter;

import com.vaadin.data.Container.Filter;

public interface IFilterProperty {

	String PROP_OPTIONS = ""options"";
	String PROP_SELECTION = ""selection"";
	String PROP_FILTER_VALUE = ""value"";
	
	/**<fim_suffix>
	Filter getFilter();
	
	/**
	 * Returns the property id for the search field.
	 * @return
	 */
	Object getPropertyId();
}
<fim_middle>","
	 * Returns the vaadin filter for the property.
	 * @return
	 */","
	 * Returns the filter for the search field.
	 * @return
	 */"
"<fim_prefix>/**<fim_suffix>

package nl.digitalekabeltelevisie.data.mpeg.pes.video265;

import static nl.digitalekabeltelevisie.data.mpeg.pes.video.common.VideoHandler.getClockTickString;

import javax.swing.tree.DefaultMutableTreeNode;

import nl.digitalekabeltelevisie.controller.*;
import nl.digitalekabeltelevisie.data.mpeg.pes.video26x.AbstractVuiParamters;
import nl.digitalekabeltelevisie.util.BitS<fim_middle>","
 * 
 *  http://www.digitalekabeltelevisie.nl/dvb_inspector
 * 
 *  This code is Copyright 2009-2012 by Eric Berendsen (e_berendsen@digitalekabeltelevisie.nl)
 * 
 *  This file is part of DVB Inspector.
 * 
 *  DVB Inspector is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  DVB Inspector is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with DVB Inspector.  If not, see <http://www.gnu.org/licenses/>.
 * 
 *  The author requests that he be notified of any application, applet, or
 *  other binary that makes use of this code, but that's more out of curiosity
 *  than anything and is not required.
 * 
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package net.particify.arsnova.core.event;

import org.springframework.context.ApplicationEvent;

public abstract class RepositoryEvent extends ApplicationEvent {
  private final String typeName;

  public RepositoryEvent(final Object source, final String typeName) {
    super(source);
    this.typeName = typeName;
  }

  public String getTypeName() {
    return typeName;
  }
}
<fim_middle>","
 * This file is part of ARSnova Backend.
 * Copyright (C) 2012-2019 The ARSnova Team and Contributors
 *
 * ARSnova Backend is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ARSnova Backend is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>

package System;
import java.util.ArrayList;


public class CurrentProvisionallyRegisteredStudents extends PhDTable {

	public CurrentProvisionallyRegisteredStudents(ArrayList<Student> students,
			ArrayList<String> headers) {
		super(students, headers);
	}

	@Override
	public int[] getHighlighted() {
		int[] highlighting = new int[students.size()];
		for(int i = 0; i<students.size();<fim_middle>","
 *
 * Copyright (C) 2015  Michael Millward
 *
 * This file is part of PHDViewer.
 *
 * PHDViewer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PHDViewer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package org.armedbear.lisp;

public final class StandardReaderMethod extends StandardMethod
{
  public StandardReaderMethod()
  {
    super(StandardClass.STANDARD_READER_METHOD,
          StandardClass.STANDARD_READER_METHOD.getClassLayout().getLength());
  }

  // ### reader-method-slot-name
  private static final Primitive READER_METHOD_SLOT_NAME =
      new Primitive(""reader-metho<fim_middle>","
 * StandardReaderMethod.java
 *
 * Copyright (C) 2005 Peter Graves
 * $Id: StandardReaderMethod.java,v 1.3 2007/02/23 21:17:34 piso Exp $
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package org.openjdk.jcstress.infra.collectors;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Multiplexes multiple collectors.
 *
 * @author Aleksey Shipilev (aleksey.shipilev@oracle.com)
 */
public class MuxCollector implements TestResultCollector {

    private final List<TestResultCollector> collectors = new ArrayList<>();

    public MuxCollec<fim_middle>","
 * Copyright (c) 2005, 2014, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the ""Classpath"" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */","*
 * Multiplexes multiple collectors.
 *
 * @author Aleksey Shipilev (aleksey.shipilev@oracle.com)
 */"
"<fim_prefix>ree Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package org.openjdk.jcstress.infra.collectors;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**<fim_suffix>
public class MuxCollector implements TestResultCollector {

    private final List<TestResultCollector> collectors = new ArrayList<>();

    public MuxCollector(TestResultCollector[] args) {
        collectors.addAll(Arrays.asList(args));
    }

    public static TestResultCollector of(TestResultCollector... args) {
        return new MuxCollector(args);
    }

    @Override
    publi<fim_middle>","
 * Multiplexes multiple collectors.
 *
 * @author Aleksey Shipilev (aleksey.shipilev@oracle.com)
 */","
 * A collector that multiplexes the results of multiple collectors.
 */"
"<fim_prefix>sFreeCreativeResearchingEnabled() {
        return freeCreativeResearches;
    }

    public boolean isResearchFireworkEnabled() {
        return researchFireworks;
    }

    public List<MultiBlock> getMultiBlocks() {
        return multiblocks;
    }

    public SlimefunGuideImplementation getGuideLayout(SlimefunGuideLayout layout) {
        return layouts.get(layout);
    }

    /**<fim_suffix>
    public Map<EntityType, Set<ItemStack>> getMobDrops() {
        return mobDrops;
    }

    /**
     * This returns a {@link Set} of {@link ItemStack ItemStacks} which can be obtained by bartering
     * with {@link Piglin Piglins}.
     * 
     * @return A {@link Set} of bartering drops
     */
    public Set<ItemStack> getBarteringDrops() {
        return barterDrops;
    }

    <fim_middle>","
     * This returns a {@link Map} connecting the {@link EntityType} with a {@link Set}
     * of {@link ItemStack ItemStacks} which would be dropped when an {@link Entity} of that type was killed.
     * 
     * @return The {@link Map} of custom mob drops
     */","
     * This returns a {@link Set} of {@link ItemStack ItemStacks} which can be obtained by bartering
     * with {@link Piglin Piglins}.
     * 
     * @return A {@link Set} of bartering drops
     */"
"<fim_prefix> when the item is registered.
     * Normally that method is called after the {@link Server} finished starting up.
     * But in the unusual scenario if a {@link SlimefunItem} is registered after that, this is gonna cover that.
     * 
     * @return Whether auto-loading is enabled
     */
    public boolean isAutoLoadingEnabled() {
        return automaticallyLoadItems;
    }

    /**<fim_suffix>
    public boolean isBackwardsCompatible() {
        return backwardsCompatibility;
    }

    public void setBackwardsCompatible(boolean compatible) {
        backwardsCompatibility = compatible;
    }

    public void setAutoLoadingMode(boolean mode) {
        automaticallyLoadItems = mode;
    }

    public List<Category> getCategories() {
        return categories;
    }

    /**
<fim_middle>","
     * This method returns whether backwards-compatibility is enabled.
     * Backwards compatibility allows Slimefun to recognize items from older versions but comes
     * at a huge performance cost.
     * 
     * @return Whether backwards compatibility is enabled
     */","
     * Whether the plugin is backwards compatible.
     * 
     * @return Whether the plugin is backwards compatible
     */"
"<fim_prefix>(cfg.getStringList(""research-ranks""));

        backwardsCompatibility = cfg.getBoolean(""options.backwards-compatibility"");
        freeCreativeResearches = cfg.getBoolean(""researches.free-in-creative-mode"");
        researchFireworks = cfg.getBoolean(""researches.enable-fireworks"");
        logDuplicateBlockEntries = cfg.getBoolean(""options.log-duplicate-block-entries"");
    }

    /**<fim_suffix>
    public boolean isAutoLoadingEnabled() {
        return automaticallyLoadItems;
    }

    /**
     * This method returns whether backwards-compatibility is enabled.
     * Backwards compatibility allows Slimefun to recognize items from older versions but comes
     * at a huge performance cost.
     * 
     * @return Whether backwards compatibility is enabled
     */
    public bo<fim_middle>","
     * This returns whether auto-loading is enabled.
     * Auto-Loading will automatically call {@link SlimefunItem#load()} when the item is registered.
     * Normally that method is called after the {@link Server} finished starting up.
     * But in the unusual scenario if a {@link SlimefunItem} is registered after that, this is gonna cover that.
     * 
     * @return Whether auto-loading is enabled
     */","
     * This method returns whether the plugin should automatically load items.
     * 
     * @return Whether the plugin should automatically load items
     */"
"<fim_prefix>utomaticallyLoadItems = mode;
    }

    public List<Category> getCategories() {
        return categories;
    }

    /**
     * This {@link List} contains every {@link SlimefunItem}, even disabled items.
     * 
     * @return A {@link List} containing every {@link SlimefunItem}
     */
    public List<SlimefunItem> getAllSlimefunItems() {
        return slimefunItems;
    }

    /**<fim_suffix>
    public List<SlimefunItem> getEnabledSlimefunItems() {
        return enabledItems;
    }

    public List<Research> getResearches() {
        return researches;
    }

    public Set<UUID> getCurrentlyResearchingPlayers() {
        return researchingPlayers;
    }

    public List<String> getResearchRanks() {
        return researchRanks;
    }

    public void setResearchingEnabl<fim_middle>","
     * This {@link List} contains every <strong>enabled</strong> {@link SlimefunItem}.
     * 
     * @return A {@link List} containing every enabled {@link SlimefunItem}
     */","
     * This {@link List} contains every {@link SlimefunItem}, even disabled items.
     * 
     * @return A {@link List} containing every {@link SlimefunItem}
     */"
"<fim_prefix>t(layout);
    }

    /**
     * This returns a {@link Map} connecting the {@link EntityType} with a {@link Set}
     * of {@link ItemStack ItemStacks} which would be dropped when an {@link Entity} of that type was killed.
     * 
     * @return The {@link Map} of custom mob drops
     */
    public Map<EntityType, Set<ItemStack>> getMobDrops() {
        return mobDrops;
    }

    /**<fim_suffix>
    public Set<ItemStack> getBarteringDrops() {
        return barterDrops;
    }

    public Set<SlimefunItem> getRadioactiveItems() {
        return radioactive;
    }

    public Set<String> getTickerBlocks() {
        return tickers;
    }

    public Map<String, SlimefunItem> getSlimefunItemIds() {
        return slimefunIds;
    }

    public Map<String, BlockMenuPreset> getMenu<fim_middle>","
     * This returns a {@link Set} of {@link ItemStack ItemStacks} which can be obtained by bartering
     * with {@link Piglin Piglins}.
     * 
     * @return A {@link Set} of bartering drops
     */","
     * This returns a {@link Set} of {@link ItemStack ItemStacks} which would be dropped when an {@link Entity} of that type was killed.
     * 
     * @return The {@link Set} of custom barter drops
     */"
"<fim_prefix>/
    public boolean isBackwardsCompatible() {
        return backwardsCompatibility;
    }

    public void setBackwardsCompatible(boolean compatible) {
        backwardsCompatibility = compatible;
    }

    public void setAutoLoadingMode(boolean mode) {
        automaticallyLoadItems = mode;
    }

    public List<Category> getCategories() {
        return categories;
    }

    /**<fim_suffix>
    public List<SlimefunItem> getAllSlimefunItems() {
        return slimefunItems;
    }

    /**
     * This {@link List} contains every <strong>enabled</strong> {@link SlimefunItem}.
     * 
     * @return A {@link List} containing every enabled {@link SlimefunItem}
     */
    public List<SlimefunItem> getEnabledSlimefunItems() {
        return enabledItems;
    }

    public List<fim_middle>","
     * This {@link List} contains every {@link SlimefunItem}, even disabled items.
     * 
     * @return A {@link List} containing every {@link SlimefunItem}
     */","
     * This {@link List} contains every {@link SlimefunItem}.
     * 
     * @return A {@link List} containing every {@link SlimefunItem}
     */"
"<fim_prefix>funBlockHandler;
import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;
import me.mrCookieSlime.Slimefun.Objects.handlers.ItemHandler;
import me.mrCookieSlime.Slimefun.api.BlockInfoConfig;
import me.mrCookieSlime.Slimefun.api.BlockStorage;
import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
import me.mrCookieSlime.Slimefun.api.inventory.UniversalBlockMenu;

/**<fim_suffix>
public final class SlimefunRegistry {

    private final Map<String, SlimefunItem> slimefunIds = new HashMap<>();
    private final List<SlimefunItem> slimefunItems = new ArrayList<>();
    private final List<SlimefunItem> enabledItems = new ArrayList<>();

    private final List<Category> categories = new ArrayList<>();
    private final List<MultiBlock> multiblocks = new LinkedList<<fim_middle>","
 * This class houses a lot of instances of {@link Map} and {@link List} that hold
 * various mappings and collections related to {@link SlimefunItem}.
 * 
 * @author TheBusyBiscuit
 *
 */","
 * The Slimefun API.
 *
 * Contains all the methods to interact with the Slimefun API.
 *
 * @author TheBusyBiscuit
 *
 */"
"<fim_prefix>/*<fim_suffix>

package com.epicnicity322.epicpluginlib.bukkit.lang;

import com.epicnicity322.epicpluginlib.core.lang.LanguageHolder;
import com.epicnicity322.yamlhandler.Configuration;
import org.bukkit.ChatColor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.UUID;
imp<fim_middle>","
 * EpicPluginLib - Library with basic utilities for bukkit plugins.
 * Copyright (C) 2022  Christiano Rangel
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by EpicNicity on 12/8/16.
 */"
"<fim_prefix>/*<fim_suffix>
package inetsoft.web.composer.model.vs;

public class VSSortingDialogModel {
   public VSSortingPaneModel getVsSortingPaneModel() {
      if(vsSortingPaneModel == null) {
         this.vsSortingPaneModel = new VSSortingPaneModel();
      }

      return vsSortingPaneModel;
   }

   public void setVsSortingPaneModel(VSSortingPaneModel vsSortingPaneModel) {
      this.vsSortingPaneModel<fim_middle>","
 * This file is part of StyleBI.
 * Copyright (C) 2024  InetSoft Technology
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by IntelliJ IDEA.
 * User: <NAME>
 * Date: May, 2008
 * Time: 11:06:56 AM
 * To change this template use File | Settings | File Templates.
 */"
"<fim_prefix>/*<fim_suffix>
package internal;

import ec.util.various.swing.UIItem;
import java.awt.Font;
import java.util.function.Supplier;
import javax.swing.Icon;
import javax.swing.JToolBar;
import javax.swing.UIManager;

import lombok.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;

/**
 *
 * @author Philippe Charles
 */
@lombok.RequiredArgsConstructor
public enum ToolBarIcon implement<fim_middle>","
 * Copyright 2019 National Bank of Belgium
 * 
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the ""Licence"");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 * 
 * http://ec.europa.eu/idabc/eupl
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an ""AS IS"" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */","*
     *
     * @param icon
     * @param toolBar
     * @param toolBarAction
     * @param toolBarActionKey
     * @param toolBarActionTooltip
     * @param toolBarActionTooltipKey
     * @param toolBarActionTooltipSupplier
     * @param toolBarActionTooltipSupplierKey
     * @param toolBarActionTooltipSupplierSupplier
     * @param toolBarActionTooltipSupplierSupplierKey
     * @param toolBarActionTooltipSupplierSupplierSupplierKey
     * @param toolBarActionTooltipSupplierSupplier"
"<fim_prefix>he Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */
package internal;

import ec.util.various.swing.UIItem;
import java.awt.Font;
import java.util.function.Supplier;
import javax.swing.Icon;
import javax.swing.JToolBar;
import javax.swing.UIManager;

import lombok.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;

/**<fim_suffix>
@lombok.RequiredArgsConstructor
public enum ToolBarIcon implements UIItem<Icon> {

    MOVE_UP(""ToolBar.moveUpIcon""),
    MOVE_DOWN(""ToolBar.moveDownIcon""),
    MOVE_LEFT(""ToolBar.moveLeftIcon""),
    MOVE_RIGHT(""ToolBar.moveRightIcon""),
    MOVE_ALL_UP(""ToolBar.moveAllUpIcon""),
    MOVE_ALL_DOWN(""ToolBar.moveAllDownIcon""),
    MOVE_ALL_LEFT(""ToolBar.moveAllLeftIcon""),
    MOVE_ALL_RIG<fim_middle>","
 *
 * @author Philippe Charles
 */","
 *
 * @author <NAME>
 *"
"<fim_prefix>package com.logicommerce.sdk.definition.implementations;

import com.logicommerce.sdk.definition.ChannelValueDefinition;

/**<fim_suffix>
public class ChannelValueDefinitionImpl implements ChannelValueDefinition {

	private Integer id;
	
	/**
	 * <p>Constructor for ChannelValueDefinitionImpl.</p>
	 *
	 * @param id a {@link java.lang.Integer} object
	 */
	public ChannelValueDefinitionImpl(Integer id) {
		this.id = id;
	}

	/** {@inheritDoc} */
	@Override
	public Integer getId() {
		return id;
	}
	
	public static class Bu<fim_middle>","
 * <p>ChannelValueDefinitionImpl class.</p>
 *
 * @author Logicommerce
 * @since 1.0.16
 */","
 * The Class ChannelValueDefinitionImpl.
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.logicommerce.sdk.definition.implementations;

import com.logicommerce.sdk.definition.ChannelValueDefinition;

/**
 * <p>ChannelValueDefinitionImpl class.</p>
 *
 * @author Logicommerce
 * @since 1.0.16
 */
public class ChannelValueDefinitionImpl implements ChannelValueDefinition {

	private Integer id;
	
	/**<fim_suffix>
	public ChannelValueDefinitionImpl(Integer id) {
		this.id = id;
	}

	/** {@inheritDoc} */
	@Override
	public Integer getId() {
		return id;
	}
	
	public static class Builder<T> {

		private T parentBuilder;
		private Integer id;

		public Builder() {

		}

		public Builder(T parentBuilder) {
			this();
			this.parentBuilder = parentBuilder;
		}

		public Builder<T> id(Integer id) {
	<fim_middle>","
	 * <p>Constructor for ChannelValueDefinitionImpl.</p>
	 *
	 * @param id a {@link java.lang.Integer} object
	 */","
	 * <p>Constructor for ChannelValueDefinitionImpl.</p>
	 *
	 * @param id a {@link java.lang.Integer} object.
	"
"<fim_prefix>/*<fim_suffix>
package org.alfresco.repo.web.scripts.servlet;

import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.alfresco.error.ExceptionStackUtil;
import org.alfresco.repo.SessionUser;
import org.alfresco.repo.management.subsystems.ActivateableBean;
import org.alfresco.repo.security.authentication.AuthenticationComponent;
import org.alfresco.repo.secu<fim_middle>","
 * #%L
 * Alfresco Remote API
 * %%
 * Copyright (C) 2005 - 2016 Alfresco Software Limited
 * %%
 * This file is part of the Alfresco software. 
 * If the software was purchased under a paid Alfresco license, the terms of 
 * the paid license agreement will prevail.  Otherwise, the software is 
 * provided under the following open source license terms:
 * 
 * Alfresco is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Alfresco is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.
 * #L%
 */","*
 * @author <NAME>
 */"
"<fim_prefix> void cleanupThread(Thread workerGettingTheRemoteUser)
        {
            try
            {
                // try to clean up the thread we created, to use resources optimally
                workerGettingTheRemoteUser.interrupt();
            }
            catch (Exception e)
            {
                // we can't really handle anything here
            }
        }

        /**<fim_suffix>
        protected String getRemoteUser()
        {
            String userId = null;
            
            // If the remote user mapper is configured, we may be able to map in an externally authenticated user
            if (isRemoteUserMapperActive())
            {
                userId = remoteUserMapper.getRemoteUser(this.servletReq.getHttpServletRequest());
            }

    <fim_middle>","
         * Retrieve the remote user from servlet request header when using a secure connection.
         * The RemoteUserMapper bean must be active and configured.
         * 
         * @return remote user ID or null if not active or found
         */","
         * @return the remote user id, or null if no remote user id could be determined
         */"
"<fim_prefix>
    }

    public void setGetRemoteUserTimeoutMilliseconds(long getRemoteUserTimeoutMilliseconds)
    {
        this.getRemoteUserTimeoutMilliseconds = getRemoteUserTimeoutMilliseconds;
    }

    @Override
    public Authenticator create(WebScriptServletRequest req, WebScriptServletResponse res)
    {
        return new RemoteUserAuthenticator(req, res, this.listener);
    }

    /**<fim_suffix>
    public class RemoteUserAuthenticator extends BasicHttpAuthenticator
    {
        public RemoteUserAuthenticator(WebScriptServletRequest req, WebScriptServletResponse res, AuthenticationListener listener)
        {
            super(req, res, listener);
        }
        
        @Override
        public boolean authenticate(RequiredAuthentication required, boolean isGuest)
      <fim_middle>","
     * Remote User authenticator - adds header authentication onto Basic Auth. Stateless does not require Session.
     * 
     * @author Kevin Roast
     */","
     * 
     */"
"<fim_prefix>ts.Description.RequiredAuthentication;
import org.springframework.extensions.webscripts.WebScript;
import org.springframework.extensions.webscripts.servlet.WebScriptServletRequest;
import org.springframework.extensions.webscripts.servlet.WebScriptServletResponse;

import net.sf.acegisecurity.DisabledException;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**<fim_suffix>
public class RemoteUserAuthenticatorFactory extends BasicHttpAuthenticatorFactory
{
    private static Log logger = LogFactory.getLog(RemoteUserAuthenticatorFactory.class);
    public static final long GET_REMOTE_USER_TIMEOUT_MILLISECONDS_DEFAULT = 10000L; // 10 sec

    protected RemoteUserMapper remoteUserMapper;
    protected AuthenticationComponent authenticationComponent;

    pr<fim_middle>","
 * Authenticator to provide Remote User based Header authentication dropping back to Basic Auth otherwise. 
 * Statelessly authenticating via a secure header now does not require a Session so can be used with
 * request-level load balancers which was not previously possible.
 * <p>
 * @see web-scripts-application-context.xml and web.xml - bean id 'webscripts.authenticator.remoteuser'
 * <p>
 * This authenticator can be bound to /service and does not require /wcservice (Session) mapping.
 * 
 * @since 5.1
 * @author Kevin Roast
 */","
 * Factory for creating {@link RemoteUserAuthenticator}s.
 *
 * @author <NAME>
 */"
"<fim_prefix>og4j.Logger;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;

import io.github.mariazevedo88.o3smeasures.measures.main.WeightMethodsPerClass;
import io.github.mariazevedo88.o3smeasures.util.parsers.JavaParser;

/**<fim_suffix>
@DisplayName(""WeightMethodsPerClassTest"")
@TestInstance(Lifecycle.PER_CLASS)
public class WeightMethodsPerClassTest {
	
	private static final Logger logger = Logger.getLogger(WeightMethodsPerClassTest.class.getName());

	@Test
	@DisplayName(""Measuring WMC"")
	public void testMeasure() throws IOException{
		
		String className = ""HelloWorld.java"";
		File javaFile = new File(""./test/""+cl<fim_middle>","
 * A class test that executes WMC measure test calculation 
 * and asserts the implementation behavior or state.
 * 
 * @author Mariana Azevedo
 * @since 13/07/2014
 *
 */","
 * Class that tests the WeightMethodsPerClass class
 * 
 * @author <NAME>
 * @since 03/04/2019
 *
 */"
"<fim_prefix>/*<fim_suffix>
package org.gnome.split.core.exception;

/**
 * Define a new {@link Exception} to manage exceptions due to MD5 sums that
 * differ.
 * 
 * @author Guillaume Mazoyer
 */
public final class MD5Exception extends EngineException
{
    private static final long serialVersionUID = 1L;

    /**
     * Create an {@link Exception} with an {@link ExceptionMessage} .
     */
    public MD5Except<fim_middle>","
 * MD5Exception.java
 * 
 * Copyright (c) 2009-2013 Guillaume Mazoyer
 * 
 * This file is part of GNOME Split.
 * 
 * GNOME Split is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * GNOME Split is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNOME Split.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Copyright (c) 2013, Guillaume Mazoyer
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <organization> nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written"
"<fim_prefix>will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNOME Split.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gnome.split.core.exception;

/**<fim_suffix>
public final class MD5Exception extends EngineException
{
    private static final long serialVersionUID = 1L;

    /**
     * Create an {@link Exception} with an {@link ExceptionMessage} .
     */
    public MD5Exception() {
        super(ExceptionMessage.MD5_DIFFER, true);
    }
}
<fim_middle>","
 * Define a new {@link Exception} to manage exceptions due to MD5 sums that
 * differ.
 * 
 * @author Guillaume Mazoyer
 */","
 * Exception thrown when the MD5 of a file is different from the one
 * calculated by the engine.
 * 
 * @author <NAME>
 * @version"
"<fim_prefix> General Public License
 * along with GNOME Split.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gnome.split.core.exception;

/**
 * Define a new {@link Exception} to manage exceptions due to MD5 sums that
 * differ.
 * 
 * @author Guillaume Mazoyer
 */
public final class MD5Exception extends EngineException
{
    private static final long serialVersionUID = 1L;

    /**<fim_suffix>
    public MD5Exception() {
        super(ExceptionMessage.MD5_DIFFER, true);
    }
}
<fim_middle>","
     * Create an {@link Exception} with an {@link ExceptionMessage}.
     */","
     * Constructor.
     */"
"<fim_prefix>/*<fim_suffix>
package org.geoserver.trafimage.transform;

import java.util.HashSet;
import java.util.Iterator;


// the source lz4 is hosted at https://github.com/jpountz/lz4-java
import net.jpountz.xxhash.StreamingXXHash32;
import net.jpountz.xxhash.XXHashFactory;

import org.geoserver.trafimage.transform.util.MeasuredTime;
import org.opengis.feature.simple.SimpleFeature;

import com.vividsolution<fim_middle>"," Copyright (c) 2014 geOps - www.geops.de. All rights reserved.
 *
 * This code is licensed under the GPL 2.0 license, available at the root
 * application directory.
 */","*
 * @author <NAME>, GeoSolutions Sas.
 *
 */"
"<fim_prefix>package com.technofovea.hllib;

import com.technofovea.hllib.enums.HlOption;
import com.technofovea.hllib.methods.ManagedLibrary;

/**<fim_suffix>
public class TestRun {

    public static void main(String[] args){
        System.out.println(""Attempting to load HlLib..."");
        ManagedLibrary lib = HlLib.getLibrary();
        System.out.println(""Retrieving version..."");
        String version = lib.getString(HlOption.VERSION);
        System.out.println(""Version detected as '""+version+""'"");

    }
}
<fim_middle>","
 *
 * @author Darien Hager
 */","
 * Created by <NAME> on 12/12/"
"<fim_prefix>/*<fim_suffix>
package com.tntexplosivesltd.acceleration;

// Activity and dialog stuff
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
// App mechanics related stuff
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;

import android.hardware.Sensor;
import android.ha<fim_middle>","
	This file is part of LogAcceleration.

    LogAcceleration is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LogAcceleration is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with LogAcceleration.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 2/12/2016.
 */"
"<fim_prefix>st.LENGTH_LONG).show();
    		Toast.makeText(getApplicationContext(), delay_preference_string, Toast.LENGTH_SHORT).show();
    		Toast.makeText(getApplicationContext(), seperator_preference_string, Toast.LENGTH_SHORT).show();
    	}
    	_sensor_manager.registerListener(this, _sensor_manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_UI);
    }
    
    /**<fim_suffix>
    protected void onPause()
    {
    	super.onPause();
    	_logger.flush();
    }
    
    /**
     * @brief Gets called when app Stops.
     * @details Unregisters accelerometer as sensor, and removes the wake lock.
     */
    @Override
    protected void onStop()
    {
    	super.onStop();
    	_logger.flush();
    	_wl.release();
    	_sensor_manager.unregisterListener(this, _s<fim_middle>","
     * @brief Gets called when the app is paused.
     * @details Flushes the file writers so their contents are up to date.
     */","
     * @brief Gets called when app Pauses.
     * @details Flushes the logger.
     */"
"<fim_prefix>ger = null;
	
	// ""Constants"" 
	/**
	 * @brief Whether or not degug mode is on.
	 * @details In debug mode, a few more Toasts show up with debug info.
	 */
	static final boolean DEBUG = false;
	
	/**
	 * @brief Constant passed to the dialog creator.
	 * @details Corresponds to the ""Restart logging?"" dialog and associated yes/no actions
	 */
	static final int RESET_DIALOG = 0;
	
    /**<fim_suffix>
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        _pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
        _wl = _pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, ""LogAcceleration"");
        _sensor_manager = (SensorManager) getSystemService(SENSOR_SERVICE);
        PreferenceManager.setDefaultValues(t<fim_middle>"," 
     * @brief Called when the activity is first created.
     * @details sets up all the variables that need initialisation.
     */","
     * @brief Constant passed to the dialog creator.
     * @details Corresponds to the ""Restart logging?"" dialog and associated yes/no actions
  "
"<fim_prefix>ivate Logger _logger = new Logger();
	private PowerManager _pm = null;
	private PowerManager.WakeLock _wl = null;
	private Runnable _logging_task = null;
	private SensorManager _sensor_manager = null;
	
	// ""Constants"" 
	/**
	 * @brief Whether or not degug mode is on.
	 * @details In debug mode, a few more Toasts show up with debug info.
	 */
	static final boolean DEBUG = false;
	
	/**<fim_suffix>
	static final int RESET_DIALOG = 0;
	
    /** 
     * @brief Called when the activity is first created.
     * @details sets up all the variables that need initialisation.
     */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        _pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
        _wl = _pm.newWake<fim_middle>","
	 * @brief Constant passed to the dialog creator.
	 * @details Corresponds to the ""Restart logging?"" dialog and associated yes/no actions
	 */","
	 * @brief The number of seconds to wait before logging again.
	 */"
"<fim_prefix>te(savedInstanceState);
        _pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
        _wl = _pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, ""LogAcceleration"");
        _sensor_manager = (SensorManager) getSystemService(SENSOR_SERVICE);
        PreferenceManager.setDefaultValues(this, R.xml.preferences, false);
        setContentView(R.layout.main);
    }
    
    /**<fim_suffix>
    @Override
    protected void onResume()
    {
    	super.onResume();
    	_wl.acquire();
    	SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
    	String delay_preference_string = preferences.getString(""log_delay_pref"", ""100"");
    	String seperator_preference_string = preferences.getString(""seperator_pref"", "","");
    	_logge<fim_middle>","
     * @brief Gets called when app Resumes.
     * @details Re-registers the accelerometer as a sensor, gets the wake-lock and manages setting values from the preferences. 
     */","
     * Called when the activity is first created.
     */"
"<fim_prefix>}
    	_sensor_manager.registerListener(this, _sensor_manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_UI);
    }
    
    /**
     * @brief Gets called when the app is paused.
     * @details Flushes the file writers so their contents are up to date.
     */
    protected void onPause()
    {
    	super.onPause();
    	_logger.flush();
    }
    
    /**<fim_suffix>
    @Override
    protected void onStop()
    {
    	super.onStop();
    	_logger.flush();
    	_wl.release();
    	_sensor_manager.unregisterListener(this, _sensor_manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER));
    }
    
    /**
     * @brief Gets called when sensor value changes.
     * @details This is where the logging takes place, and the value is changed for the graphs.
<fim_middle>","
     * @brief Gets called when app Stops.
     * @details Unregisters accelerometer as sensor, and removes the wake lock.
     */","
     * @brief Gets called when the app is stopped.
     * @details Flushes the file writers so their contents are up to date.
  "
"<fim_prefix>phData.data_y.addLast(GraphData.y);
	    				if (GraphData.data_y.size() > GraphData.max_data)
	    					GraphData.data_y.poll();
	    			}
	    			
	    			synchronized(GraphData.data_z)
	    			{
	    				GraphData.data_z.addLast(GraphData.z);
	    				if (GraphData.data_z.size() > GraphData.max_data)
	    					GraphData.data_z.poll();
	    			}
	    		}
	    	}
    	}
    }

    /**<fim_suffix>
	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {}
	
	
    /**
     * @brief Called when user presses ""Menu"" key.
     * @details Inflates the options menu.
     */
	@Override
	public boolean onCreateOptionsMenu(Menu menu)
	{
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.options_menu, menu);
		return true;
	}
	
    /**
     * @brief Gets<fim_middle>","
     * @brief Empty, needed for overriding.
     */","
     * @brief Called when user presses ""Menu"" key.
  "
"<fim_prefix>}
	    			
	    			synchronized(GraphData.data_z)
	    			{
	    				GraphData.data_z.addLast(GraphData.z);
	    				if (GraphData.data_z.size() > GraphData.max_data)
	    					GraphData.data_z.poll();
	    			}
	    		}
	    	}
    	}
    }

    /**
     * @brief Empty, needed for overriding.
     */
	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {}
	
	
    /**<fim_suffix>
	@Override
	public boolean onCreateOptionsMenu(Menu menu)
	{
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.options_menu, menu);
		return true;
	}
	
    /**
     * @brief Gets called when one of the options menu items is selected.
     * @details Handles which item was pressed, and invokes actions based on that. 
     */
	@Override
	public boolean onOptionsItem<fim_middle>","
     * @brief Called when user presses ""Menu"" key.
     * @details Inflates the options menu.
     */","
     * @brief Empty, needed for overriding.
     */"
"<fim_prefix>dler.removeCallbacks(_logging_task);
						start_logging();
					}
					_paused = false;
				}
			});
	    	builder.setNegativeButton(""No"", new DialogInterface.OnClickListener()
	    	{
				public void onClick(DialogInterface dialog, int which)
				{
					_paused = false;
				}
			});
	    	dialog = builder.create();
			break;
		default:
			dialog = null;
		}
		return dialog;
	}
	
	/**<fim_suffix>
	private boolean start_logging()
	{
		_logger.set_logging(true);
		String log_message = _logger.initialize();
        Toast.makeText(getApplicationContext(), log_message, Toast.LENGTH_LONG).show();
    	_logger.log_header();
        if (_logger.is_logging())
        {
        	_time = 0;
        	return true;
        }
        return false;
	}
}<fim_middle>","
	 * @brief Starts logging acceleration values to a new file.
	 * @return Whether or not the new log opened properly. 
	 */","
	 * Starts the logging task.
	 * @return true if the logging task was started, false otherwise.
	 */"
"<fim_prefix>ationActivity extends Activity implements SensorEventListener {
	private boolean _paused = false;
	private int _time;
	private Handler _handler = new Handler();
	private Logger _logger = new Logger();
	private PowerManager _pm = null;
	private PowerManager.WakeLock _wl = null;
	private Runnable _logging_task = null;
	private SensorManager _sensor_manager = null;
	
	// ""Constants"" 
	/**<fim_suffix>
	static final boolean DEBUG = false;
	
	/**
	 * @brief Constant passed to the dialog creator.
	 * @details Corresponds to the ""Restart logging?"" dialog and associated yes/no actions
	 */
	static final int RESET_DIALOG = 0;
	
    /** 
     * @brief Called when the activity is first created.
     * @details sets up all the variables that need initialisation.
     */
    @Override
    pu<fim_middle>","
	 * @brief Whether or not degug mode is on.
	 * @details In debug mode, a few more Toasts show up with debug info.
	 */","
	 * @brief Constant passed to the dialog creator.
	 * @details Corresponds to the ""Logging paused"" dialog and associated yes/no actions
	 */"
"<fim_prefix>akeText(getApplicationContext(), ""Logging is now off."", Toast.LENGTH_SHORT).show();
			}
			else
			{
				if (start_logging())
		        	item.setTitle(R.string.logging_on);
			}
			return true;
		case R.id.settings:
			startActivity(new Intent(LogAccelerationActivity.this, PreferencesActivity.class));
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	/**<fim_suffix>
	protected Dialog onCreateDialog(int id)
	{
		Dialog dialog;
		switch(id)
		{
		case RESET_DIALOG:
	    	AlertDialog.Builder builder = new AlertDialog.Builder(this);
	    	builder.setMessage(""Restart logging to new file?"")
	    		   .setCancelable(false)
	    		   .setPositiveButton(""Yes"", new DialogInterface.OnClickListener() 
	    	{
				public void onClick(DialogInterface dialog, i<fim_middle>","
	 * @brief Handles which dialog to display.
	 * @param id The numerical ID of the dialog to show.
	 * @return A Dialog object which holds the correct dialog to display.
	 */","
	 * Creates the dialog for the reset button.
	 * @param id The id of the dialog.
	 * @return The dialog.
	 */"
"<fim_prefix>;
    }
    
    /**
     * @brief Gets called when app Stops.
     * @details Unregisters accelerometer as sensor, and removes the wake lock.
     */
    @Override
    protected void onStop()
    {
    	super.onStop();
    	_logger.flush();
    	_wl.release();
    	_sensor_manager.unregisterListener(this, _sensor_manager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER));
    }
    
    /**<fim_suffix>
    @Override
    public void onSensorChanged(SensorEvent event)
    {
    	if (!_paused)
    	{
	    	synchronized (this)
	    	{
	    		switch (event.sensor.getType())
	    		{
	    		case Sensor.TYPE_ACCELEROMETER:
	
	    			GraphData.x = event.values[0];
	    			GraphData.y = event.values[1];
	    			GraphData.z = event.values[2];
	    			
	    			if (!_logger.is_busy())
	    			{<fim_middle>","
     * @brief Gets called when sensor value changes.
     * @details This is where the logging takes place, and the value is changed for the graphs.
     */","
     * @brief Gets called when app Pauses.
     * @details Pauses the accelerometer sensor.
     */"
"<fim_prefix>sorEvent;
import android.hardware.SensorManager;
// OS stuff including power manager
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
// Preference-related stuff
import android.preference.PreferenceManager;
// View-related stuff
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.widget.Toast;

/**<fim_suffix>
public class LogAccelerationActivity extends Activity implements SensorEventListener {
	private boolean _paused = false;
	private int _time;
	private Handler _handler = new Handler();
	private Logger _logger = new Logger();
	private PowerManager _pm = null;
	private PowerManager.WakeLock _wl = null;
	private Runnable _logging_task = null;
	private SensorManager _sensor_manager = null;<fim_middle>","
 * @brief Activity class for actually logging part of app.
 * @details This is the activity automatically started when the app starts. 
 */","
 * This activity is used to log the acceleration of the device.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>overriding.
     */
	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {}
	
	
    /**
     * @brief Called when user presses ""Menu"" key.
     * @details Inflates the options menu.
     */
	@Override
	public boolean onCreateOptionsMenu(Menu menu)
	{
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.options_menu, menu);
		return true;
	}
	
    /**<fim_suffix>
	@Override
	public boolean onOptionsItemSelected(MenuItem item)
	{
		switch (item.getItemId())
		{
		case R.id.orientation:
			if (GraphData.orientation == 0)
			{
				GraphData.orientation = 1;
				item.setTitle(R.string.orientation_upright);
			}
			else
			{
				GraphData.orientation = 0;
				item.setTitle(R.string.orientation_flat);
			}
			return true;
		case R.id.mode:
			if (Gr<fim_middle>","
     * @brief Gets called when one of the options menu items is selected.
     * @details Handles which item was pressed, and invokes actions based on that. 
     */","
     * @brief Called when user selects an option from the options menu.
     * @details Changes the graph mode.
     */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.hawkbit.repository.jpa.autocleanup;

import static org.assertj.core.api.Assertions.assertThat;

import java.util.Arrays;
import java.util.concurrent.atomic.AtomicInteger;

import io.qameta.allure.Description;
import io.qameta.allure.Feature;
import io.qameta.allure.Story;
import org.eclipse.hawkbit.repository.jpa.AbstractJpaIntegrationTest;
import org.junit.jupiter<fim_middle>","
 * Copyright (c) 2018 Bosch Software Innovations GmbH and others
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */","
 * @author <NAME>
 * @since 0.0.1
 */"
"<fim_prefix>eger;

import io.qameta.allure.Description;
import io.qameta.allure.Feature;
import io.qameta.allure.Story;
import org.eclipse.hawkbit.repository.jpa.AbstractJpaIntegrationTest;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.integration.support.locks.LockRegistry;

/**<fim_suffix>
@Feature(""Component Tests - Repository"")
@Story(""Auto cleanup scheduler"")
public class AutoCleanupSchedulerTest extends AbstractJpaIntegrationTest {

    private final AtomicInteger counter = new AtomicInteger();

    @Autowired
    private LockRegistry lockRegistry;

    @BeforeEach
    public void setUp() {
        counter.set(0);
    }

    @Test
    @Description(""Verifies that all<fim_middle>","
 * Test class for {@link AutoCleanupScheduler}.
 */","
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.emf.parsley.internal.editors.util;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EContentAdapter;

/**
 * Redefines a few methods.
 *
 * @author Lorenzo Bettini - initial API and implementation
 *
 */
public class ProblemIndicationEContentAdapter extends EContentAdapter {

	@Override
	protected void setTarget(Resource target) {
<fim_middle>","*****************************************************************************
 * Copyright (c) 2015 RCP Vision (http://www.rcp-vision.com) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Lorenzo Bettini - initial API and implementation
 *******************************************************************************/","
 * Copyright (c) 2018-2019 ArSysOp
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"
"<fim_prefix>tion, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Lorenzo Bettini - initial API and implementation
 *******************************************************************************/
package org.eclipse.emf.parsley.internal.editors.util;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EContentAdapter;

/**<fim_suffix>
public class ProblemIndicationEContentAdapter extends EContentAdapter {

	@Override
	protected void setTarget(Resource target) {
		basicSetTarget(target);
	}

	@Override
	protected void unsetTarget(Resource target) {
		basicUnsetTarget(target);
	}
}
<fim_middle>","
 * Redefines a few methods.
 *
 * @author Lorenzo Bettini - initial API and implementation
 *
 */","
 * @author Lorenzo Bettini
 *
 */"
"<fim_prefix>/*<fim_suffix>

package org.gorpipe.gor.driver.bgen;

import org.gorpipe.exceptions.GorSystemException;
import org.gorpipe.gor.model.Row;

import java.io.IOException;
import java.sql.SQLException;

public class BGenWriter<T extends DataBlockFactory<? extends VariantDataBlock>> implements AutoCloseable {
    protected final BGenOutputStream os;
    protected final int refIdx;
    protected final int <fim_middle>","
 *  BEGIN_COPYRIGHT
 *
 *  Copyright (C) 2011-2013 deCODE genetics Inc.
 *  Copyright (C) 2013-2019 WuXi NextCode Inc.
 *  All Rights Reserved.
 *
 *  GORpipe is free software: you can redistribute it and/or modify
 *  it under the terms of the AFFERO GNU General Public License as published by
 *  the Free Software Foundation.
 *
 *  GORpipe is distributed ""AS-IS"" AND WITHOUT ANY WARRANTY OF ANY KIND,
 *  INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
 *  NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
 *  the AFFERO GNU General Public License for the complete license terms.
 *
 *  You should have received a copy of the AFFERO GNU General Public License
 *  along with GORpipe.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
 *
 *  END_COPYRIGHT
 */","*
 * Created by IntelliJ IDEA.
 * User: andrew
 * Date: Dec 13, 2010
 * Time: 11:04:55 AM
 * To change this template use File | Settings | File Templates.
 */"
"<fim_prefix>/**<fim_suffix>
package com.github.kaklakariada.aws.sam.config;

import org.gradle.api.NamedDomainObjectContainer;
import org.gradle.api.Project;

import groovy.lang.Closure;

public class SamConfigDsl {
	private final Project project;

	public final NamedDomainObjectContainer<Stage> stages;
	public ApiConfigDsl api;
	public String activeStage;
	public String defaultAwsRegion;
	public String defaultA<fim_middle>","
 * aws-sam-gradle - Gradle plugin for deploying AWS Serverless Application Models
 * Copyright (C) 2017 Christoph Pirkl <christoph at users.sourceforge.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","
 * Copyright (C) 2016 <NAME>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>c.edelivery.smp.data.dao.CredentialDao;
import eu.europa.ec.edelivery.smp.data.model.user.DBCredential;
import eu.europa.ec.edelivery.smp.logging.SMPLogger;
import eu.europa.ec.edelivery.smp.logging.SMPLoggerFactory;
import eu.europa.ec.edelivery.smp.utils.HttpUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import java.util.List;

/**<fim_suffix>
@Service
public class CredentialValidatorService {
    private static final SMPLogger LOG = SMPLoggerFactory.getLogger(CredentialValidatorService.class);

    private final CredentialsAlertService alertService;
    private final ConfigurationService configurationService;
    private final CredentialDao credentialDao;

    public CredentialValidatorService(ConfigurationService configur<fim_middle>","
 * Credential validator service for validating and alerting usernames password expirations, access token expirations and
 * certificate expirations.
 *
 * @author Joze Rihtarsic
 * @since 4.2
 */","
 * Service for validating credentials.
 */"
"<fim_prefix>Credential> dbUserExpiredList = credentialDao.getCertificateExpiredUsersForAlerts(
                configurationService.getAlertExpiredCertificatePeriod(),
                configurationService.getAlertExpiredCertificateInterval(),
                configurationService.getAlertCredentialsBatchSize());
        dbUserExpiredList.forEach(alertService::alertCredentialExpired);
    }

    /**<fim_suffix>
    protected boolean skipCredentialValidation() {
        if (!configurationService.isClusterEnabled()) {
            LOG.debug(""The server is not running in cluster mode. The Credential validation is not skipped!"");
            return false;
        }
        String serverHost = HttpUtils.getServerAddress();
        String targetValidationServerHost = configurationService.getTargetS<fim_middle>","
     * Method returns true if credential validation should be skipped. The validation is skipped if SMP runs in cluster
     * and node server name is not ""target"" credential validation server.
     *
     * @return true if credential validation must be skipped
     */","
     * Skip credential validation if the server is not running in cluster mode.
     *
     * @return true if the credential validation is skipped, false otherwise.
     */"
"<fim_prefix>o;

    public CredentialValidatorService(ConfigurationService configurationService,
                                      CredentialsAlertService alertService,
                                      CredentialDao credentialDao) {
        this.configurationService = configurationService;
        this.alertService = alertService;
        this.credentialDao = credentialDao;
    }

    /**<fim_suffix>
    public void validateCredentials() {
        if (skipCredentialValidation()) {
            LOG.debug(""Skip Credentials validation"");
            return;
        }
        validateCredentialsForBeforeExpireUsernames();
        validateCredentialsForExpiredUsernames();

        validateCredentialsForBeforeExpireAccessToken();
        validateCredentialsForExpiredAccessToken();

     <fim_middle>","
     * Method validates username, access tokens, and certificates.
     * If the credentials are about to expire or are expired, it generates alerts.
     */","
     * Validate credentials for before expire usernames.
     */"
"<fim_prefix>/*<fim_suffix>
package com.sun.javafx.sg.prism;

import com.sun.javafx.geom.Path2D;
import com.sun.javafx.geom.Shape;
import com.sun.javafx.sg.prism.NGShape;

public class NGPolyline
extends NGShape {
    private Path2D path = new Path2D();

    public void updatePolyline(float[] arrf) {
        this.path.reset();
        if (arrf == null || arrf.length == 0 || arrf.length % 2 != 0) {
            re<fim_middle>","
 * Decompiled with CFR 0.150.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>rt com.supermap.desktop.ui.controls.textStyle.ITextStyle;
import com.supermap.desktop.ui.controls.textStyle.ResetTextStyleUtil;
import com.supermap.desktop.ui.controls.textStyle.TextBasicPanel;
import com.supermap.desktop.ui.controls.textStyle.TextStyleChangeListener;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**<fim_suffix>
public class LabelSettingDialog extends SmDialog {
	private ITextStyle textStylePanel;
	private TextStyle textStyle;
	private SmButton okSmButton = new SmButton();
	private SmButton cancelSmButton = new SmButton();

	public LabelSettingDialog(TextStyle textStyle) {
		this.textStyle=textStyle;
		initComponents();
		removeEvents();
		registerEvents();
	}

	private void initComponents(){<fim_middle>","
 * Created By Chens on 2017/7/24 0024
 */","
 * 
 * @author huangyong
 *
 */"
"<fim_prefix>/*<fim_suffix>
package ConquerSpace.common.util;

import ConquerSpace.ConquerSpace;
import ConquerSpace.common.util.logging.CQSPLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import javax.swing.ImageIcon;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author EhWhoA<fim_middle>","
 * Conquer Space - Conquer Space!
 * Copyright (C) 2019 EhWhoAmI
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 *
 * @author EhWhoA
 */"
"<fim_prefix>u.org/licenses/>.
 */
package ConquerSpace.common.util;

import ConquerSpace.ConquerSpace;
import ConquerSpace.common.util.logging.CQSPLogger;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import javax.swing.ImageIcon;
import org.apache.logging.log4j.Logger;

/**<fim_suffix>
public class ResourceLoader {

    private static final Logger LOGGER = CQSPLogger.getLogger(ResourceLoader.class.getName());

    static final Properties prop = new Properties();

    static {
        try {
            String resource = ""/assets/assets.properties"";
            InputStream in = ResourceLoader.class.getResourceAsStream(resource);
            if (in == null) {
         <fim_middle>","
 *
 * @author EhWhoAmI
 */","
 *
 * @author <NAME> (DaPork"
"<fim_prefix>/*<fim_suffix>

package com.dwdesign.tweetings.view;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PorterDuff;
import android.graphics.PorterDuffXfermode;
impo<fim_middle>","
 *				Tweetings - Twitter client for Android
 * 
 * Copyright (C) 2012-2013 RBD Solutions Limited <apps@tweetings.net>
 * Copyright (C) 2012 Mariotaku Lee <mariotaku.lee@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 2015-02-26.
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.rcptt.ecl.perf.internal.commands;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.rcptt.ecl.core.Command;
import org.eclipse.rcptt.ecl.perf.PerfCounter;
import org.eclipse.rcptt.ecl.perf.StopTimeMeasure;
import org.eclipse.rcptt.ecl.perf.internal.EclPerfPlugin;
impor<fim_middle>","*****************************************************************************
 * Copyright (c) 2009, 2019 Xored Software Inc and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * Contributors:
 *     Xored Software Inc - initial API and implementation and/or initial documentation
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>package org.bolodev.mv.utils;

import java.io.File;
/**<fim_suffix>
public class FileNode extends File{
  
  /**
   * Eclipse UID
   */
  private static final long serialVersionUID = -2316487963811935178L;
  
  /**
   * Constructor method
   * @param aFileName the file to be held in the Node
   */
  public FileNode(String aFileName){
    super(aFileName);
  }
  
  /**
   * Overrides the default Object.toString to return the name of the file object hel<fim_middle>","
 * Class to hold a file object and string, used as Nodes on the KaufholdTreeModel, enables only the file names to be displayed on the tree and not the fullt path and name
 * @author bolodev
 * @version 0.1 initial cut<br />
 * @version 0.2 refactored to subclass java.io.File - override of toString to return the file name with no path<br />
 * @since 0.1
 */","
 * FileNode
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix> a file object and string, used as Nodes on the KaufholdTreeModel, enables only the file names to be displayed on the tree and not the fullt path and name
 * @author bolodev
 * @version 0.1 initial cut<br />
 * @version 0.2 refactored to subclass java.io.File - override of toString to return the file name with no path<br />
 * @since 0.1
 */
public class FileNode extends File{
  
  /**<fim_suffix>
  private static final long serialVersionUID = -2316487963811935178L;
  
  /**
   * Constructor method
   * @param aFileName the file to be held in the Node
   */
  public FileNode(String aFileName){
    super(aFileName);
  }
  
  /**
   * Overrides the default Object.toString to return the name of the file object held in the node
   * @return 
   */
  public String toString(){
    re<fim_middle>","
   * Eclipse UID
   */","
   * 
   */"
"<fim_prefix>isplayed on the tree and not the fullt path and name
 * @author bolodev
 * @version 0.1 initial cut<br />
 * @version 0.2 refactored to subclass java.io.File - override of toString to return the file name with no path<br />
 * @since 0.1
 */
public class FileNode extends File{
  
  /**
   * Eclipse UID
   */
  private static final long serialVersionUID = -2316487963811935178L;
  
  /**<fim_suffix>
  public FileNode(String aFileName){
    super(aFileName);
  }
  
  /**
   * Overrides the default Object.toString to return the name of the file object held in the node
   * @return 
   */
  public String toString(){
    return this.getName();
  }
 
}
<fim_middle>","
   * Constructor method
   * @param aFileName the file to be held in the Node
   */","
   * Constructor
   * @param aFileName
   */"
"<fim_prefix>e - override of toString to return the file name with no path<br />
 * @since 0.1
 */
public class FileNode extends File{
  
  /**
   * Eclipse UID
   */
  private static final long serialVersionUID = -2316487963811935178L;
  
  /**
   * Constructor method
   * @param aFileName the file to be held in the Node
   */
  public FileNode(String aFileName){
    super(aFileName);
  }
  
  /**<fim_suffix>
  public String toString(){
    return this.getName();
  }
 
}
<fim_middle>","
   * Overrides the default Object.toString to return the name of the file object held in the node
   * @return 
   */","
   * toString method
   * @return the file name"
"<fim_prefix>/*<fim_suffix>

package gnu.mail.providers.nntp;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;

import javax.mail.FetchProfile;
import javax.mail.Flags;
import javax.mail.MessagingException;
import javax.mail.internet.InternetHeaders;
import javax.mail.internet.MimeMessage;

/**
 * A JavaMail MIME message delegate for an NNTP article.
 *
 * @author <a href='m<fim_middle>","
 * NNTPMessage.java
 * Copyright(C) 2002 Chris Burdess <dog@gnu.org>
 * 
 * This file is part of GNU JavaMail, a library.
 * 
 * GNU JavaMail is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 *(at your option) any later version.
 * 
 * GNU JavaMail is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 * 
 * As a special exception, if you link this library with other files to
 * produce an executable, this library does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * This exception does not however invalidate any other reasons why the
 * executable file might be covered by the GNU General Public License.
 */","*
 * A JavaMail MIME message delegate for an NNTP article.
 *
 * @author <a href='mirek.vasko@gmail.com'>Mirek Vasko</a>
 */"
"<fim_prefix>rs(InputStream in)
    throws MessagingException, IOException
    {
      headers = new InternetHeaders(in);
    }

  void requestContent()
    throws MessagingException
    {
      FetchProfile fp = new FetchProfile();
      fp.add(FetchProfile.Item.CONTENT_INFO);
      NNTPMessage[] messages = new NNTPMessage[1];
      messages[0] = this;
      folder.fetch(messages, fp);
    }

  /*<fim_suffix>
  void updateContent(byte[] content)
    {
      this.content = content;
    }

  // -- Header retrieval --

  public String[] getHeader(String name)
    throws MessagingException
    {
      if (headers == null)
        {
          requestHeaders();
        }
      return super.getHeader(name);
    }

  public String getHeader(String name, String delimiter)
    throws MessagingExcept<fim_middle>","
   * Called by NNTPFolder
   */","*
   * Returns the content of this message.
"
"<fim_prefix>    flags.remove(Flags.Flag.SEEN);
        }
    }

  public String getMessageId()
    {
      return messageId;
    }

  void requestHeaders()
    throws MessagingException
    {
      FetchProfile fp = new FetchProfile();
      fp.add(FetchProfile.Item.ENVELOPE);
      NNTPMessage[] messages = new NNTPMessage[1];
      messages[0] = this;
      folder.fetch(messages, fp);
    }

  /*<fim_suffix>
  void updateHeaders(InputStream in)
    throws MessagingException, IOException
    {
      headers = new InternetHeaders(in);
    }

  void requestContent()
    throws MessagingException
    {
      FetchProfile fp = new FetchProfile();
      fp.add(FetchProfile.Item.CONTENT_INFO);
      NNTPMessage[] messages = new NNTPMessage[1];
      messages[0] = this;
      folder.fetch(message<fim_middle>","
   * Called by NNTPFolder
   */","*
   * @return the message's headers
 "
"<fim_prefix>why the
 * executable file might be covered by the GNU General Public License.
 */

package gnu.mail.providers.nntp;

import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;

import javax.mail.FetchProfile;
import javax.mail.Flags;
import javax.mail.MessagingException;
import javax.mail.internet.InternetHeaders;
import javax.mail.internet.MimeMessage;

/**<fim_suffix>
public final class NNTPMessage
  extends MimeMessage
{

  String messageId;
  
  NNTPMessage(NNTPFolder folder,
              int msgnum,
              String messageId)
    {
      super(folder, msgnum);
      this.messageId = messageId;
      headers = null;
      // Set SEEN state
      flags = folder.getPermanentFlags();
      if (folder.isSeen(msgnum))
        {
          flags.a<fim_middle>","
 * A JavaMail MIME message delegate for an NNTP article.
 *
 * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
 * @version 2.0
 */","
 * NNTPMessage is a MimeMessage that represents a message in a NNTP
 * folder.
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package pl.rcebula.analysis.math_log_parser;

import pl.rcebula.analysis.math_log_parser.javacc.Token;

/**
 *
 * @author robert
 */
public class MyNumberFormatException extends Error
{
    private final Token token;
    
    public MyNumberFormatException(Token t)
    {
        this.token = t;
    }

    public Token getToken()
    {
        return token;
    }
}
<fim_middle>","
 * Copyright (C) 2016 robert
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */"
"<fim_prefix>mplied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package pl.rcebula.analysis.math_log_parser;

import pl.rcebula.analysis.math_log_parser.javacc.Token;

/**<fim_suffix>
public class MyNumberFormatException extends Error
{
    private final Token token;
    
    public MyNumberFormatException(Token t)
    {
        this.token = t;
    }

    public Token getToken()
    {
        return token;
    }
}
<fim_middle>","
 *
 * @author robert
 */","
 *
 * @author <NAME> <<"
"<fim_prefix>room);
        }

        // Write out the distinct names.
        for (String name : distinctNames) {
            for (byte b : StringUtils.getBytesFromString(name)) {
                stream.write(b);
            }
            stream.write(0);
        }

        byte[] rawData = stream.toByteArray();

        return rawData;
    }

    public static class Object {
        
        /**<fim_suffix>
        public String name;

        /**
         * The room in which the object first appears in the game.
         */
        public int room;

        public Object(String name, int room) {
            this.name = name;
            this.room = room;
        }
    }
}
<fim_middle>","
         * The name of the object.
         */","
         * The name of the object.
         */"
"<fim_prefix>stinctNames) {
            for (byte b : StringUtils.getBytesFromString(name)) {
                stream.write(b);
            }
            stream.write(0);
        }

        byte[] rawData = stream.toByteArray();

        return rawData;
    }

    public static class Object {
        
        /**
         * The name of the object.
         */
        public String name;

        /**<fim_suffix>
        public int room;

        public Object(String name, int room) {
            this.name = name;
            this.room = room;
        }
    }
}
<fim_middle>","
         * The room in which the object first appears in the game.
         */","
         * The room the object is in.
         */"
"<fim_prefix>ocument[] result = new ODocument[1];
    OSQLSynchQuery<ODocument> query = new OSQLSynchQuery<ODocument>(""select * from WorkItem where ID = :ID"");
    result[0] = null;
    engine.withDB(db -> {
      List<ODocument> queryResults = db.query(query, workItemId);
      if (queryResults.size() > 0) {
        result[0] = queryResults.get(0);
      }
    });
    return result[0];
  }


  /**<fim_suffix>
  @SuppressWarnings(""unchecked"")
  public static final <T> T getField(ODocument document, String fieldname, T fallbackValue) {
    T fieldValue = (T) Optional.ofNullable(document.field(fieldname)).orElse(fallbackValue);
    return fieldValue;
  }


}
<fim_middle>","
   * Retrieves the fieldValue from a given document with a name
   * 
   * @param document - document where to query the field
   * @param fieldname - name of field to query
   * @param fallbackValue - returns this value - in case there is no field with provided field name
   * @return fieldValue (or fallbackValue if fieldValue is null)
   */","
   * Get a field from a document.
   *
   * @param document      the document
   * @param fieldname     the field name
   * @param fallbackValue the fallback value
   * @param <T>           the type of the field
   * @return the field value
 "
"<fim_prefix>ense for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright Peter Güttinger, SkriptLang team and contributors
 */
package ch.njol.util;

import java.io.Serializable;
import java.util.Map.Entry;
import java.util.Objects;

import org.jetbrains.annotations.Nullable;

/**<fim_suffix>
public class Pair<T1, T2> implements Entry<T1, T2>, Cloneable, Serializable {
	private static final long serialVersionUID = 8296563685697678334L;
	
	@Nullable
	protected T1 first;
	@Nullable
	protected T2 second;
	
	public Pair() {
		first = null;
		second = null;
	}
	
	public Pair(final @Nullable T1 first, final @Nullable T2 second) {
		this.first = first;
		this.second = second;
	}
<fim_middle>","
 * @author Peter Güttinger
 */","
 * A simple pair class.
 *
 *"
"<fim_prefix>econd;
	}
	
	public Pair(final Entry<T1, T2> e) {
		this.first = e.getKey();
		this.second = e.getValue();
	}
	
	@Nullable
	public T1 getFirst() {
		return first;
	}
	
	public void setFirst(final @Nullable T1 first) {
		this.first = first;
	}
	
	@Nullable
	public T2 getSecond() {
		return second;
	}
	
	public void setSecond(final @Nullable T2 second) {
		this.second = second;
	}
	
	/**<fim_suffix>
	@Override
	public String toString() {
		return """" + first + "","" + second;
	}
	
	/**
	 * Checks for equality with Entries to match {@link #hashCode()}
	 */
	@Override
	public final boolean equals(final @Nullable Object obj) {
		if (obj == this)
			return true;
		if (!(obj instanceof Entry))
			return false;
		final Entry<?, ?> other = (Entry<?, ?>) obj;
		final T1 first = this.first;
<fim_middle>","
	 * @return ""first,second""
	 */","
	 * Returns the hash code of the pair.
	"
"<fim_prefix>ble Object obj) {
		if (obj == this)
			return true;
		if (!(obj instanceof Entry))
			return false;
		final Entry<?, ?> other = (Entry<?, ?>) obj;
		final T1 first = this.first;
		final T2 second = this.second;
		return (first == null ? other.getKey() == null : first.equals(other.getKey())) &&
				(second == null ? other.getValue() == null : second.equals(other.getValue()));
	}
	
	/**<fim_suffix>
	@Override
	public final int hashCode() {
		return Objects.hash(first, second);
	}
	
	@Override
	@Nullable
	public T1 getKey() {
		return first;
	}
	
	@Override
	@Nullable
	public T2 getValue() {
		return second;
	}
	
	@Override
	@Nullable
	public T2 setValue(final @Nullable T2 value) {
		final T2 old = second;
		second = value;
		return old;
	}
	
	/**
	 * @return a shallow copy of th<fim_middle>","
	 * As defined by {@link Entry#hashCode()}
	 */","
	 * @return a shallow copy of th entry
	"
"<fim_prefix> by {@link Entry#hashCode()}
	 */
	@Override
	public final int hashCode() {
		return Objects.hash(first, second);
	}
	
	@Override
	@Nullable
	public T1 getKey() {
		return first;
	}
	
	@Override
	@Nullable
	public T2 getValue() {
		return second;
	}
	
	@Override
	@Nullable
	public T2 setValue(final @Nullable T2 value) {
		final T2 old = second;
		second = value;
		return old;
	}
	
	/**<fim_suffix>
	@Override
	public Pair<T1, T2> clone() {
		return new Pair<>(this);
	}
	
}
<fim_middle>","
	 * @return a shallow copy of this pair
	 */","
	 * {@inheritDoc}
	 * <p>
	"
"<fim_prefix>/**<fim_suffix>
package ch.njol.util;

import java.io.Serializable;
import java.util.Map.Entry;
import java.util.Objects;

import org.jetbrains.annotations.Nullable;

/**
 * @author Peter Güttinger
 */
public class Pair<T1, T2> implements Entry<T1, T2>, Cloneable, Serializable {
	private static final long serialVersionUID = 8296563685697678334L;
	
	@Nullable
	protected T1 first;
	@Nullable
	protected<fim_middle>","
 *   This file is part of Skript.
 *
 *  Skript is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Skript is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright Peter Güttinger, SkriptLang team and contributors
 */","
 * @author Peter Güttinger
 */"
"<fim_prefix>lable
	public T1 getFirst() {
		return first;
	}
	
	public void setFirst(final @Nullable T1 first) {
		this.first = first;
	}
	
	@Nullable
	public T2 getSecond() {
		return second;
	}
	
	public void setSecond(final @Nullable T2 second) {
		this.second = second;
	}
	
	/**
	 * @return ""first,second""
	 */
	@Override
	public String toString() {
		return """" + first + "","" + second;
	}
	
	/**<fim_suffix>
	@Override
	public final boolean equals(final @Nullable Object obj) {
		if (obj == this)
			return true;
		if (!(obj instanceof Entry))
			return false;
		final Entry<?, ?> other = (Entry<?, ?>) obj;
		final T1 first = this.first;
		final T2 second = this.second;
		return (first == null ? other.getKey() == null : first.equals(other.getKey())) &&
				(second == null ? other.getValue() <fim_middle>","
	 * Checks for equality with Entries to match {@link #hashCode()}
	 */","
	 * @return ""first==second""
	 */"
"<fim_prefix>/*<fim_suffix>
package org.n52.oxf.conversion.unit;



/**
 * Interface providing custom unit conversion capabilities.
 * Can be used e.g. for complex flight level to meter conversions.
 */
public interface CustomUnitConverter {

    NumberWithUOM convert(double doubleValue);

    String getBaseUnit();

    String getUnitString();

}
<fim_middle>","
 * ﻿Copyright (C) 2012-2017 52°North Initiative for Geospatial Open Source
 * Software GmbH
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License version 2 as published by the Free
 * Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of the
 * following licenses, the combination of the program with the linked library is
 * not considered a ""derivative work"" of the program:
 *
 *     - Apache License, version 2.0
 *     - Apache Software License, version 1.0
 *     - GNU Lesser General Public License, version 3
 *     - Mozilla Public License, versions 1.0, 1.1 and 2.0
 *     - Common Development and Distribution License (CDDL), version 1.0
 *
 * Therefore the distribution of the program linked with libraries licensed under
 * the aforementioned licenses, is permitted by the copyright holders if the
 * distribution is compliant with both the GNU General Public License version 2
 * and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */","
 * Copyright (C) 2015-2021 52°North Spatial Information Research GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>ompliant with both the GNU General Public License version 2
 * and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 */
package org.n52.oxf.conversion.unit;



/**<fim_suffix>
public interface CustomUnitConverter {

    NumberWithUOM convert(double doubleValue);

    String getBaseUnit();

    String getUnitString();

}
<fim_middle>","
 * Interface providing custom unit conversion capabilities.
 * Can be used e.g. for complex flight level to meter conversions.
 */","
 * @author <NAME>
 * 
 */"
"<fim_prefix>/**<fim_suffix>
package com.nlbhub.nlb.api.config;

import jakarta.xml.bind.annotation.*;

/**
 * @author Anton P. Kolosov
 * @version 1.0
 */
@XmlAccessorType(XmlAccessType.NONE)
@XmlRootElement(name = ""config"")
public class Config {
    @XmlAttribute(name = ""name"")
    private String m_name;
    @XmlAttribute(name = ""default"")
    private boolean m_default;
    @XmlElement(name = ""general"")
    pri<fim_middle>","
 * @(#)Config.java
 *
 * This file is part of the Non-Linear Book project.
 * Copyright (c) 2012-2017 Anton P. Kolosov
 * Authors: Anton P. Kolosov, et al.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License version 3
 * as published by the Free Software Foundation with the addition of the
 * following permission added to Section 15 as permitted in Section 7(a):
 * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED BY
 * ANTON P. KOLOSOV. ANTON P. KOLOSOV DISCLAIMS THE WARRANTY OF NON INFRINGEMENT
 * OF THIRD PARTY RIGHTS
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, see http://www.gnu.org/licenses or write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA, 02110-1301 USA.
 *
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License.
 *
 * You can be released from the requirements of the license by purchasing
 * a commercial license. Buying such a license is mandatory as soon as you
 * develop commercial activities involving the Non-Linear Book software without
 * disclosing the source code of your own applications.
 *
 * For more information, please contact Anton P. Kolosov at this
 * address: antokolos@gmail.com
 *
 * Copyright (c) 2017 Anton P. Kolosov All rights reserved.
 */","
 * @author Anton P. Kolosov
 * @version 1.0
 */"
"<fim_prefix>as you
 * develop commercial activities involving the Non-Linear Book software without
 * disclosing the source code of your own applications.
 *
 * For more information, please contact Anton P. Kolosov at this
 * address: antokolos@gmail.com
 *
 * Copyright (c) 2017 Anton P. Kolosov All rights reserved.
 */
package com.nlbhub.nlb.api.config;

import jakarta.xml.bind.annotation.*;

/**<fim_suffix>
@XmlAccessorType(XmlAccessType.NONE)
@XmlRootElement(name = ""config"")
public class Config {
    @XmlAttribute(name = ""name"")
    private String m_name;
    @XmlAttribute(name = ""default"")
    private boolean m_default;
    @XmlElement(name = ""general"")
    private General m_general;
    @XmlElement(name = ""export"")
    private Export m_export;

    public Config() {
    }

    public <fim_middle>","
 * @author Anton P. Kolosov
 * @version 1.0
 */","
 * @author Anton P. Kolosov
 */"
"<fim_prefix>/*<fim_suffix>

package net.sourceforge.czt.print.z;

import net.sourceforge.czt.parser.util.Decorword;
import net.sourceforge.czt.z.util.ZString;

public class WhereWord
  extends Decorword
{
  public WhereWord()
  {
    super(ZString.BAR);
  }
}
<fim_middle>","
  Copyright (C) 2006 Petra Malik
  This file is part of the czt project: http://czt.sourceforge.net

  The czt project contains free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  The czt project is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with czt; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/",     */
"<fim_prefix>/*<fim_suffix>
package org.opendaylight.yangtools.yang.model.api.stmt;

import com.google.common.annotations.Beta;
import java.util.Collection;
import org.eclipse.jdt.annotation.NonNull;
import org.opendaylight.yangtools.yang.model.api.meta.DeclaredStatement;

@Beta
public interface IfFeatureAwareDeclaredStatement<A> extends DeclaredStatement<A> {
    /**
     * Return attached if-feature statements<fim_middle>","
 * Copyright (c) 2018 Pantheon Technoglogies, s.r.o. and others.  All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>http://www.eclipse.org/legal/epl-v10.html
 */
package org.opendaylight.yangtools.yang.model.api.stmt;

import com.google.common.annotations.Beta;
import java.util.Collection;
import org.eclipse.jdt.annotation.NonNull;
import org.opendaylight.yangtools.yang.model.api.meta.DeclaredStatement;

@Beta
public interface IfFeatureAwareDeclaredStatement<A> extends DeclaredStatement<A> {
    /**<fim_suffix>
    default @NonNull Collection<? extends IfFeatureStatement> getIfFeatures() {
        return declaredSubstatements(IfFeatureStatement.class);
    }
}
<fim_middle>","
     * Return attached if-feature statements. Metamodel differs here between RFC6020 and RFC7950: some nodes will be
     * returning an empty collection in YANG 1.0 mode.
     *
     * @return collection of if-feature statements
     */","
     * Returns the list of if-feature statements.
     *
     * @return list of if-feature statements
     */"
"<fim_prefix>inecraft.world.entity.Mob;
import net.minecraft.world.entity.ai.behavior.Behavior;
import net.minecraft.world.entity.ai.behavior.BehaviorUtils;
import net.minecraft.world.entity.ai.behavior.EntityTracker;
import net.minecraft.world.entity.ai.memory.MemoryModuleType;
import net.minecraft.world.entity.ai.memory.MemoryStatus;
import net.minecraft.world.entity.monster.RangedAttackMob;

/**<fim_suffix>
public class MobRangeAttack<E extends Mob & RangedAttackMob, T extends LivingEntity> extends Behavior<E> {

    private final int attackIntervalMin;
    private final int attackIntervalMax;
    private final float attackRadius;

    public MobRangeAttack(int attackIntervalMin, int attackIntervalMax, float attackRadius) {
        super(ImmutableMap.of(
                MemoryModuleType.<fim_middle>","
 * @author PangTeen
 * @program Immortal
 * @data 2023/3/2 18:31
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package com.sun.interview.wizard;

import com.sun.interview.FileFilter;

import java.io.File;

class SwingFileFilter extends javax.swing.filechooser.FileFilter {
    FileFilter filter;

    SwingFileFilter(FileFilter ff) {
        if (ff == null) {
            throw new NullPointerException();
        }
        filter = ff;
    }

    static javax.swing.filechooser.FileFilter wrap(Fil<fim_middle>","
 * $Id$
 *
 * Copyright (c) 2002, 2009, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the ""Classpath"" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package org.jpos.iso.packager;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.fail;

import static org.apache.commons.lang3.JavaVersion.JAVA_10;
import static org.apache.commons.lang3.JavaVersion.JAVA_14;
<fim_middle>","
 * jPOS Project [http://jpos.org]
 * Copyright (C) 2000-2024 jPOS Software SRL
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <EMAIL>
 * @version $Id$
 * @since 2.0.0
 */"
"<fim_prefix>/*<fim_suffix>

package pl.edu.agh.icsr.janet.yytree;

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import pl.edu.agh.icsr.janet.CompilationManager;
import pl.edu.agh.icsr.janet.CompileException;
import pl.edu.agh.icsr.janet.IJavaContext;
import pl.edu.agh.icsr.janet.Janet;
import pl.edu.agh.icsr.janet.ParseException;
import pl.edu.agh.icsr.janet<fim_middle>"," This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */","*
 * @author <NAME>
 */"
"<fim_prefix>UnsupportedOperationException();
        }

        YYClass findNextClass() {
            Object o = null;
            while (i.hasNext()) {
                if ((o = i.next()) instanceof YYClass) break;
                o = null;
            }
            return (YYClass)o;
        }
    }

    public Iterator<YYClass> getDeclaredClassesIterator() {
        return new ClsItr();
    }
/*<fim_suffix>
    public int getScopeType() {
        return IScope.COMPILATION_UNIT;
    }

    public IScope getEnclosingScope() { return null; }
    public IScope getCurrentMember() { return null; }
    public YYClass getCurrentClass() { return null; }

    public boolean markedForProcessing() { return markedForProcessing; }

    public String toString() {
        return ""Compilation unit: "" + i<fim_middle>","
    public void resolveMethods() throws CompileException {
        for (Iterator i = getDeclaredClasses(); i.hasNext();) {
            ((YYClass)i.next()).resolveMethods();
        }
    }
*/","*
     * @return the scope type
     */"
"<fim_prefix>ports != null) ? imports.findSingle(sname) : null;
            if (t != null) {
                cls.reportError((cls.isInterface() ? ""interface "" : ""class "") +
                    ""name "" + sname + "" clashes with imported class "" + t);
            } else if (mgr.getClassManager().addClass(cls)) {
                super.append(cls);
            }
        }
        return this;
    }


/*<fim_suffix>

    public Map<String, IClassInfo> getSingleImportDeclarations() throws ParseException {
        Map<String, YYName> m = imports.getSingles();
        if (singles == null) {
            lock();
            singles = new HashMap<String, IClassInfo>();
            ClassManager classMgr = mgr.getClassManager();
            // exchange class names for their IClassInfo objects
           <fim_middle>","    public String toString() {
        String s = ""CompilationUnit dump: \npackage "" + package_declaration +
            ""\nimports: "" + import_declarations;
        return s;
    }
*/","*
     * Returns a map of single import declarations.
     *
     * @return a map of single import declarations.
     * @throws ParseException if the import declarations are not valid.
     */"
"<fim_prefix>SnipSerializer extends SnipDataSerializer {
  private static SnipSerializer serializer = null;

  /**
   * Get an instance of the snip serializer.
   * @return the serializer
   */
  public synchronized static SnipSerializer getInstance() {
    if (null == serializer) {
      serializer = new SnipSerializer();
    }
    return serializer;
  }

  protected SnipSerializer() {

  }

  /**<fim_suffix>
  public Element serialize(snipsnap.api.snip.Snip snip) {
    return serialize(createSnipMap(snip));
  }

  /**
   * Load snip from XML serialized file.
   * @param snipElement the XML node containing the snip
   * @return the modified snip
   */
  public Snip deserialize(Element snipElement, Snip snip) {
    Map snipMap = getElementMap(snipElement);
    return deserialize(snipMap, sn<fim_middle>","
   * Store a snip in an XML node.
   * @param snip the snip to store
   * @return the serialized snip as XML
   */","
   * Load snip from XML serialized file.
   * @param snipElement the XML node containing the snip
   * @return the modified snip
   */"
"<fim_prefix>.Labels;
import org.snipsnap.user.Permissions;

import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * A snip serializer that can store and load snips in XML format.
 *
 * @author Matthias L. Jugel
 * @version $Id$
 */
public class SnipSerializer extends SnipDataSerializer {
  private static SnipSerializer serializer = null;

  /**<fim_suffix>
  public synchronized static SnipSerializer getInstance() {
    if (null == serializer) {
      serializer = new SnipSerializer();
    }
    return serializer;
  }

  protected SnipSerializer() {

  }

  /**
   * Store a snip in an XML node.
   * @param snip the snip to store
   * @return the serialized snip as XML
   */
  public Element serialize(snipsnap.api.snip.Snip snip) {
    re<fim_middle>","
   * Get an instance of the snip serializer.
   * @return the serializer
   */","
   * Get the singleton instance of this serializer.
   * @return the singleton instance
   */"
"<fim_prefix>age org.snipsnap.snip.storage;

import org.dom4j.Element;
import org.radeox.util.logging.Logger;
import org.snipsnap.snip.Links;
import snipsnap.api.snip.Snip;
import org.snipsnap.snip.attachment.Attachments;
import snipsnap.api.label.Labels;
import org.snipsnap.user.Permissions;

import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**<fim_suffix>
public class SnipSerializer extends SnipDataSerializer {
  private static SnipSerializer serializer = null;

  /**
   * Get an instance of the snip serializer.
   * @return the serializer
   */
  public synchronized static SnipSerializer getInstance() {
    if (null == serializer) {
      serializer = new SnipSerializer();
    }
    return serializer;
  }

  protected SnipSerializer()<fim_middle>","
 * A snip serializer that can store and load snips in XML format.
 *
 * @author Matthias L. Jugel
 * @version $Id$
 */","
 * Serializes snips to XML.
 *
 * @author patrick
 * @since 0.1
 */"
"<fim_prefix>/*<fim_suffix>
package org.snipsnap.snip.storage;

import org.dom4j.Element;
import org.radeox.util.logging.Logger;
import org.snipsnap.snip.Links;
import snipsnap.api.snip.Snip;
import org.snipsnap.snip.attachment.Attachments;
import snipsnap.api.label.Labels;
import org.snipsnap.user.Permissions;

import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;<fim_middle>","
 * This file is part of ""SnipSnap Wiki/Weblog"".
 *
 * Copyright (c) 2002,2003 Fraunhofer Gesellschaft
 * Fraunhofer Institut for Computer Architecture and Software Technology
 * All Rights Reserved.
 *
 * Please visit http://snipsnap.org/ for updates and contact.
 *
 * --LICENSE NOTICE--
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * --LICENSE NOTICE--
 */","*
 * Created by sumanthn
 */"
"<fim_prefix>tInstance() {
    if (null == serializer) {
      serializer = new SnipSerializer();
    }
    return serializer;
  }

  protected SnipSerializer() {

  }

  /**
   * Store a snip in an XML node.
   * @param snip the snip to store
   * @return the serialized snip as XML
   */
  public Element serialize(snipsnap.api.snip.Snip snip) {
    return serialize(createSnipMap(snip));
  }

  /**<fim_suffix>
  public Snip deserialize(Element snipElement, Snip snip) {
    Map snipMap = getElementMap(snipElement);
    return deserialize(snipMap, snip);
  }

  public Snip deserialize(Map snipMap, snipsnap.api.snip.Snip snip) {
//    System.out.println(""deserializing: ""+snipMap.get(SNIP_NAME));
    Iterator elementIt = snipMap.keySet().iterator();
    while (elementIt.hasNext()) {
      Strin<fim_middle>","
   * Load snip from XML serialized file.
   * @param snipElement the XML node containing the snip
   * @return the modified snip
   */","
   * Store a snip in an XML node.
   * @param snip the snip to store
   * @return the serialized snip as XML
   */"
"<fim_prefix>/*<fim_suffix>

package de.butzlabben.missilewars.configuration.arena;

import com.google.gson.annotations.SerializedName;
import java.util.HashMap;
import java.util.Map;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.ToString;
import org.bukkit.Location;
import org.bukkit.configuration.serialization.ConfigurationSerializable;
import org.jetbrains.annotations.NotNull;

@Getter<fim_middle>","
 * This file is part of MissileWars (https://github.com/Butzlabben/missilewars).
 * Copyright (c) 2018-2021 Daniel NÃ¤gele.
 *
 * MissileWars is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MissileWars is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MissileWars.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Represents a configuration for an arena.
 */"
"<fim_prefix>String
@AllArgsConstructor
public class AreaConfiguration implements ConfigurationSerializable {

    @SerializedName(""min_x"") private int minX;
    @SerializedName(""min_y"") private int minY;
    @SerializedName(""min_z"") private int minZ;
    @SerializedName(""max_x"") private int maxX;
    @SerializedName(""max_y"") private int maxY;
    @SerializedName(""max_z"") private int maxZ;

    /**<fim_suffix>
    public static AreaConfiguration aroundLocation(Location location, int margin) {
        return new AreaConfiguration(location.getBlockX() - margin,
                0,
                location.getBlockZ() - margin,
                location.getBlockX() + margin,
                256,
                location.getBlockZ() + margin
        );
    }

    /**
     * This method is used to<fim_middle>","
     * Creates a quadratic area around the given location with the specified margin.
     * The height will go from 0 to 256.
     *
     * @param location the location to put the area around.
     * @param margin   the distance between the border of the area and the location.
     *
     * @return an area configuration around the location
     */","
     * This method is used to create an area configuration around a location.
     *
     * @param location the location around which the area configuration is created.
     * @param margin   the margin around the location.
     * @return the area configuration.
     */"
"<fim_prefix>on around the location
     */
    public static AreaConfiguration aroundLocation(Location location, int margin) {
        return new AreaConfiguration(location.getBlockX() - margin,
                0,
                location.getBlockZ() - margin,
                location.getBlockX() + margin,
                256,
                location.getBlockZ() + margin
        );
    }

    /**<fim_suffix>
    @Override
    @NotNull
    public Map<String, Object> serialize() {
        Map<String, Object> serialized = new HashMap<>();
        serialized.put(""min_x"", minX);
        serialized.put(""min_y"", minY);
        serialized.put(""min_z"", minZ);
        serialized.put(""max_x"", maxX);
        serialized.put(""max_y"", maxY);
        serialized.put(""max_z"", maxZ);
        return serializ<fim_middle>","
     * This method is used to save the config entries in the config file.
     */","
     * Creates a new area configuration around the location
     */"
"<fim_prefix>package scott.barleydb.api.audit;

import java.io.Serializable;

/*<fim_suffix>

import scott.barleydb.api.config.EntityType;
import scott.barleydb.api.core.entity.Entity;

class AuditKey implements Serializable {

    private static final long serialVersionUID = 1L;

    private final EntityType entityType;
    private final Object entityKey;

    public AuditKey(Entity entity) {
        this.entityType = entity.getEntityType();
        this.entityKey = entity.g<fim_middle>","
 * #%L
 * BarleyDB
 * %%
 * Copyright (C) 2014 Scott Sinclair <scottysinclair@gmail.com>
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */","*
 * Created by <NAME> on 6/12/15.
 */"
"<fim_prefix>package org.projectlemon.intenseorange.model.utilities.PDU;

import java.io.InputStream;

/**<fim_suffix>
public class ConnectPDU extends PDU {
    public ConnectPDU(InputStream inputStream) {
        super();
    }

    @Override
    public byte[] toByteArray() {
        return new byte[0];
        // TODO: 2016-01-20 Implement  
    }
}
<fim_middle>","
 * Transport if a client wish to connect to a server. 
 * Created by Jenny on 2016-01-20.
 */","
 * Created by <NAME> on 2016-01-20.
 */"
"<fim_prefix>/**<fim_suffix>
package cern.c2mon.shared.daq.republisher;

import org.springframework.jms.JmsException;

/**
 * Should be implemented by a service wishing to make use
 * of the Republisher functionalities.
 * 
 * @author Mark Brightwell
 *
 * @param <T> type of event that is published
 */
public interface Publisher<T> {

  /**
   * (Re-)publish the event. The calling class should throw a runtime {@l<fim_middle>","****************************************************************************
 * Copyright (C) 2010-2016 CERN. All rights not expressly granted are reserved.
 * 
 * This file is part of the CERN Control and Monitoring Platform 'C2MON'.
 * C2MON is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the license.
 * 
 * C2MON is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with C2MON. If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/","
 * Copyright (c) 2015 CERN. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT"
"<fim_prefix>RPOSE. See the GNU Lesser General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with C2MON. If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/
package cern.c2mon.shared.daq.republisher;

import org.springframework.jms.JmsException;

/**<fim_suffix>
public interface Publisher<T> {

  /**
   * (Re-)publish the event. The calling class should throw a runtime {@link JmsException}
   * if the publication fails and should be re-attempted. Any other exception
   * thrown will result in the removal of the event from the re-publication list.
   * 
   * <p>IMPORTANT: this method should usually NOT call the Republisher publicationFailed
  <fim_middle>","
 * Should be implemented by a service wishing to make use
 * of the Republisher functionalities.
 * 
 * @author Mark Brightwell
 *
 * @param <T> type of event that is published
 */","
 * Interface for classes that publish events to a JMS queue.
 * 
 * @author <NAME>
 * 
 * @param <T>
 *          the type of the"
"<fim_prefix>*************************************************************************/
package cern.c2mon.shared.daq.republisher;

import org.springframework.jms.JmsException;

/**
 * Should be implemented by a service wishing to make use
 * of the Republisher functionalities.
 * 
 * @author Mark Brightwell
 *
 * @param <T> type of event that is published
 */
public interface Publisher<T> {

  /**<fim_suffix>
  void publish(T event);
  
}
<fim_middle>","
   * (Re-)publish the event. The calling class should throw a runtime {@link JmsException}
   * if the publication fails and should be re-attempted. Any other exception
   * thrown will result in the removal of the event from the re-publication list.
   * 
   * <p>IMPORTANT: this method should usually NOT call the Republisher publicationFailed
   * method. Rather, if the publication fails, throw an exception as described above. If
   * this publish method returns successully, the event will be removed from the re-publication
   * list!
   */","
   * Publishes the given event to the configured JMS topic.
   * 
   * @param event event to publish
   * @throws JmsException if there is a problem publishing the event
   */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.chemclipse.progress.core;

import junit.framework.TestCase;

public class InfoType_1_Test extends TestCase {

	private InfoType infoType;

	@Override
	protected void setUp() throws Exception {

		super.setUp();
	}

	@Override
	protected void tearDown() throws Exception {

		super.tearDown();
	}

	public void testInfoType_1() {

		infoType = InfoType.MESSAGE;
		asse<fim_middle>","*****************************************************************************
 * Copyright (c) 2008, 2018 Lablicate GmbH.
 * 
 * All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 * Dr. Philip Wenig - initial API and implementation
 *******************************************************************************/","
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>/*<fim_suffix>

package org.drugis.mtc.presentation.results;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.swing.table.AbstractTableModel;

import org.apache.commons.lang.StringUtils;
import org.drugis.mtc.Parameter;
import org.drugis.mtc.model.Treatment;
import org.drugis.mtc.par<fim_middle>","
 * This file is part of the GeMTC software for MTC model generation and
 * analysis. GeMTC is distributed from http://drugis.org/gemtc.
 * Copyright (C) 2009-2012 Gert van Valkenhoef.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>        }
        return null;
    }


    /**
     * Gets a data definition from the repository
     * @param name a reference name for the data definition
     * @return the referenced data definition, or null if not found
     */
    public String get(String name) {
        RepoRecord record = getRecord(name);
        return record != null ? record.getValue() : null;
    }


    /**<fim_suffix>
   public String remove(String name) {
        RepoRecord record = removeRecord(name);
        return record != null ? record.getValue() : null;
   }


    /**
     * Gets a sorted list of descriptors for all extended variable sets
     * @return A sorted list of RepoDescriptors (String pairs - name, description)
     */
    public List<RepoDescriptor> getDescriptors() {
        retur<fim_middle>","
     * Removes a data definition from the repository
     * @param name a reference name for the data definition
     * @return whether the removal was successful
     */","
     * Removes a data definition from the repository
     * @param name a reference name for the data definition
     * @return the referenced data definition, or null if not found
"
"<fim_prefix>without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
 * Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with YAWL. If not, see <http://www.gnu.org/licenses/>.
 */

package org.yawlfoundation.yawl.editor.core.repository;

import java.util.List;

/**<fim_suffix>
public class DataDefinitionRepository extends RepoMap {

    protected DataDefinitionRepository() {
        super(""dataDefinitions"");
    }

    protected DataDefinitionRepository(String baseDir) {
        super(baseDir, ""dataDefinitions"");
    }

    /**
     * Adds a data definition to the repository
     * @param name a reference name for the data definition
     * @param descripti<fim_middle>","
 * @author Michael Adams
 * @date 6/08/13
 */","
 *
 * @author <NAME>
 * @version $Id: Data"
"<fim_prefix>/*<fim_suffix>

package org.yawlfoundation.yawl.editor.core.repository;

import java.util.List;

/**
 * @author Michael Adams
 * @date 6/08/13
 */
public class DataDefinitionRepository extends RepoMap {

    protected DataDefinitionRepository() {
        super(""dataDefinitions"");
    }

    protected DataDefinitionRepository(String baseDir) {
        super(baseDir, ""dataDefinitions"");
    }

    /**<fim_middle>","
 * Copyright (c) 2004-2013 The YAWL Foundation. All rights reserved.
 * The YAWL Foundation is a collaboration of individuals and
 * organisations who are committed to improving workflow technology.
 *
 * This file is part of YAWL. YAWL is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation.
 *
 * YAWL is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
 * Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with YAWL. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author Michael Adams
 * @date 6/08/13
 */"
"<fim_prefix>ecord != null ? record.getValue() : null;
    }


    /**
     * Removes a data definition from the repository
     * @param name a reference name for the data definition
     * @return whether the removal was successful
     */
   public String remove(String name) {
        RepoRecord record = removeRecord(name);
        return record != null ? record.getValue() : null;
   }


    /**<fim_suffix>
    public List<RepoDescriptor> getDescriptors() {
        return super.getDescriptors();
    }

}
<fim_middle>","
     * Gets a sorted list of descriptors for all extended variable sets
     * @return A sorted list of RepoDescriptors (String pairs - name, description)
     */","
     * Returns a list of all data definitions in the repository
     * @return a list of all data definitions in the repository
     */"
"<fim_prefix>to store in the repository
     * @return whether the add was successful
     */
    public String add(String name, String description, String xml) {
        if (! anyAreNull(name, description, xml)) {
            RepoRecord record = addRecord(new RepoRecord(name, description, xml));
            if (record != null) return record.getName();
        }
        return null;
    }


    /**<fim_suffix>
    public String get(String name) {
        RepoRecord record = getRecord(name);
        return record != null ? record.getValue() : null;
    }


    /**
     * Removes a data definition from the repository
     * @param name a reference name for the data definition
     * @return whether the removal was successful
     */
   public String remove(String name) {
        RepoRecord re<fim_middle>","
     * Gets a data definition from the repository
     * @param name a reference name for the data definition
     * @return the referenced data definition, or null if not found
     */","
     * Retrieves a data definition from the repository
     * @param name a reference name for the data definition
     * @return the data definition, or null if not found
     */"
"<fim_prefix>

package org.yawlfoundation.yawl.editor.core.repository;

import java.util.List;

/**
 * @author Michael Adams
 * @date 6/08/13
 */
public class DataDefinitionRepository extends RepoMap {

    protected DataDefinitionRepository() {
        super(""dataDefinitions"");
    }

    protected DataDefinitionRepository(String baseDir) {
        super(baseDir, ""dataDefinitions"");
    }

    /**<fim_suffix>
    public String add(String name, String description, String xml) {
        if (! anyAreNull(name, description, xml)) {
            RepoRecord record = addRecord(new RepoRecord(name, description, xml));
            if (record != null) return record.getName();
        }
        return null;
    }


    /**
     * Gets a data definition from the repository
     * @param name a referenc<fim_middle>","
     * Adds a data definition to the repository
     * @param name a reference name for the data definition
     * @param description a description of it
     * @param xml the data definition XML to store in the repository
     * @return whether the add was successful
     */","
     * Gets a list of all data definitions
     * @return a list of all data definitions
     */"
"<fim_prefix>/**<fim_suffix>
package com.intuit.tank.dao;

/*
 * #%L
 * Data Access
 * %%
 * Copyright (C) 2011 - 2015 Intuit Inc.
 * %%
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * #L%
 */

import java.util.Date<fim_middle>","
 * Copyright 2011 Intuit Inc. All Rights Reserved
 */","
 * @author dderose
 *
 */"
"<fim_prefix>/**
 * Copyright 2011 Intuit Inc. All Rights Reserved
 */
package com.intuit.tank.dao;

/*<fim_suffix>

import java.util.Date;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.EntityManager;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;

import com.intuit.tank.project.VMInstance;
import com.intuit.tank.vm.api.enumerated.VMRegion;
import c<fim_middle>","
 * #%L
 * Data Access
 * %%
 * Copyright (C) 2011 - 2015 Intuit Inc.
 * %%
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * #L%
 */","*
 * @author dderose
 * 
 */"
"<fim_prefix>ersistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;

import com.intuit.tank.project.VMInstance;
import com.intuit.tank.vm.api.enumerated.VMRegion;
import com.intuit.tank.vm.vmManager.VMInformation;

/**
 * ProductDao
 * 
 * @author dangleton
 * 
 */
public class VMImageDao extends BaseDao<VMInstance> {

    public VMImageDao() {
        super();

    }

    /**<fim_suffix>
    @Nullable
    public VMInstance getImageByInstanceId(@Nonnull String instanceId) {
        VMInstance results;
        EntityManager em = getEntityManager();
        try {
            begin();
            CriteriaBuilder cb = em.getCriteriaBuilder();
            CriteriaQuery<VMInstance> query = cb.createQuery(entityClass);
            Root<VMInstance> root = query.from(entityClas<fim_middle>","
     * Gets the VMImage associated with the instanceID.
     * 
     * @param instanceId
     *            the instance id to find for
     * @return the VMImage or null if not found
     */","
     * @param entityClass
     */"
"<fim_prefix>  query.where(cb.equal(root.get(VMInstance.PROPERTY_INSTANCE_ID), instanceId));
            results = em.createQuery(query).getSingleResult();
            commit();
        } catch (Exception e) {
            rollback();
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            cleanup();
        }
        return results;
    }

    /**<fim_suffix>
    @Nonnull
    public VMInstance addImageFromInfo(String jobId, @Nonnull VMInformation info, @Nonnull VMRegion region) {
        // persist the VMImages to database:
        VMInstance image = VMInstance.builder()
                .amiId(info.getImageId())
                .instanceId(info.getInstanceId())
                .startTime(info.getLaunchTime() != null ? info.getLaunchTime().<fim_middle>","
     * 
     * @param info
     * @param region
     * @return
     */","
     * Add a new VMInstance to the database.
     *
     * @param instanceId the instance id
    "
"<fim_prefix>tion.Nonnull;
import jakarta.annotation.Nullable;
import jakarta.persistence.EntityManager;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;

import com.intuit.tank.project.VMInstance;
import com.intuit.tank.vm.api.enumerated.VMRegion;
import com.intuit.tank.vm.vmManager.VMInformation;

/**<fim_suffix>
public class VMImageDao extends BaseDao<VMInstance> {

    public VMImageDao() {
        super();

    }

    /**
     * Gets the VMImage associated with the instanceID.
     * 
     * @param instanceId
     *            the instance id to find for
     * @return the VMImage or null if not found
     */
    @Nullable
    public VMInstance getImageByInstanceId(@Nonnull String instanceI<fim_middle>","
 * ProductDao
 * 
 * @author dangleton
 * 
 */","
 * DAO for VMImage.
 * 
 * @author dderose"
"<fim_prefix>/*<fim_suffix>
/*
 * Created by IntelliJ IDEA.
 * User: rkinney
 * Date: Jul 20, 2002
 * Time: 3:52:36 AM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */
package VASSAL.configure;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEve<fim_middle>","
 * $Id: StringEnumConfigurer.java 3907 2008-07-28 15:08:04Z uckelman $
 *
 * Copyright (c) 2000-2003 by Rodney Kinney
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License (LGPL) as published by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, copies are available
 * at http://www.opensource.org.
 */","*
 * Created by IntelliJ IDEA.
 * User: rkinney
 * Date: Jul 20, 2002
 * Time: 3:52:36 AM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */"
"<fim_prefix>package VASSAL.configure;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.Box;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;

/**<fim_suffix>
public class StringEnumConfigurer extends Configurer {
  private String[] validValues;
  private JComboBox box;
  private Box panel;

  public StringEnumConfigurer(String key, String name, String[] validValues) {
    super(key, name);
    this.validValues = validValues;
  }

  public Component getControls() {
    if (panel == null) {
      panel = Box.createHorizontalBox();
      pane<fim_middle>","
 * A Configurer that returns a String from among a list of possible values
 */","
 * A configurer for a String that has a fixed set of valid values.
 *"
"<fim_prefix> that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, copies are available
 * at http://www.opensource.org.
 */
/*<fim_suffix>
package VASSAL.configure;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.Box;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;

/*<fim_middle>","
 * Created by IntelliJ IDEA.
 * User: rkinney
 * Date: Jul 20, 2002
 * Time: 3:52:36 AM
 * To change template for new class use
 * Code Style | Class Templates options (Tools | IDE Options).
 */","*
 * @author <NAME>
 * @since 3.0.0
 */"
"<fim_prefix>kage org.nasdanika.graph.processor;

import java.util.Collection;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.nasdanika.capability.CapabilityLoader;
import org.nasdanika.common.ProgressMonitor;
import org.nasdanika.common.PropertySource;
import org.nasdanika.common.Transformer;
import org.nasdanika.graph.Connection;
import org.nasdanika.graph.Element;

/**<fim_suffix>
public abstract class PropertySourceProcessorFactory<P,K,V> extends URIInvocableCapabilityProcessorFactory<P> {
	protected CapabilityLoader capabilityLoader;
	private K processorProperty;

	public PropertySourceProcessorFactory(K processorProperty) {
		this.processorProperty = processorProperty;
	}
	
	public PropertySourceProcessorFactory(CapabilityLoader capabilityLoader, K processor<fim_middle>","
 * If element is an instance of {@link PropertySource} then {@link URI} is retrieved from it - property value should either be a URI or a String. 
 * @param <P>
 */","
 * A factory for processors that process {@link PropertySource}s.
 * 
 * @author <NAME>
 *
 * @param <P> the type of the processor
 * @param <"
"<fim_prefix>cessorConfig config, ProgressMonitor progressMonitor) {
		return getURI(config.getElement());
	}

	protected URI getURI(Element element) {
		if (element instanceof PropertySource) {
			@SuppressWarnings(""unchecked"")
			V value = ((PropertySource<K,V>) element).getProperty(processorProperty);
			return getURI(value);
		}
		return null;
	}
	
	protected abstract URI getURI(V value);

	/**<fim_suffix>
	public <H,E> Map<Element, ProcessorInfo<P>> createProcessors(
			Collection<? extends Element> source,
			EndpointFactory<H, E> endpointFactory, 
			boolean parallel,
			ProgressMonitor progressMonitor) {
		ProcessorConfigFactory<H,E> processorConfigFactory = new ProcessorConfigFactory<H,E>() {
			
			@Override
			protected boolean isPassThrough(Connection connection) {
				if (conne<fim_middle>","
	 * Creates procssor configs and then processors.
	 * @param <H>
	 * @param <E>
	 * @param endpointFactory
	 * @param processorProperty
	 */","*
	 * Creates a map of processors for the given source.
	 * 
	 * @param source the source to create processors for
	 * @param endpointFactory the endpoint factory to use
	 * @param"
"<fim_prefix>endpointFactory.createEndpoint(connection, handler, type);
			}
			
		};
		
		Transformer<Element,ProcessorConfig> processorConfigTransformer = new Transformer<>(processorConfigFactory);		
		Map<Element, ProcessorConfig> configs = processorConfigTransformer.transform(source, parallel, progressMonitor);		
		return createProcessors(configs.values(), parallel, progressMonitor);
	}	
	
	/**<fim_suffix>
	public Map<Element, ProcessorInfo<P>> createNopEndpointProcessors(
			Collection<? extends Element> source,
			boolean parallel,
			ProgressMonitor progressMonitor) {
		
		return createProcessors(
				source,
				EndpointFactory.nopEndpointFactory(),
				parallel,
				progressMonitor);
	}
	
}
<fim_middle>","
	 * Creates processors with NOP endpoint factory
	 * @param source
	 * @param processorProperty
	 * @param parallel
	 * @param progressMonitor
	 * @return
	 */","
	 * Creates a map of processors for the given source elements.
	 * 
	 * @param source
	 * @param endpointFactory
	 * @param parallel
	 * @param progressMonitor"
"<fim_prefix>package bots;

import com.biotools.meerkat.Action;
import com.biotools.meerkat.Card;
import com.biotools.meerkat.GameInfo;
import com.biotools.meerkat.Player;
import com.biotools.meerkat.util.Preferences;

/**<fim_suffix>
public class BotLoggingDecorator implements Player {

	private Player delegate;
	private int ourSeat; // our seat for the current hand
	private GameInfo gi; // general game information
	private Preferences prefs; // the configuration options for this bot
	private StringBuffer log = new StringBuffer();
	private boolean logPlayerEvents;

	/**
	 * @param delegate
	 * @param logPlayerEven<fim_middle>","
 * A simple decorator, that writes all events into a log.<br>
 * Used for testing, if our API sends all events correctly
 * 
 */","
 * A decorator that logs the actions of the player.
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>oleCards(c1, c2, seat);
		if (logPlayerEvents) {
			log(""#holeCards: "" + c1 + c2 + "" seat:"" + seat);
		}
		this.ourSeat = seat;
	}

	/**
	 * Requests an Action from the player Called when it is the Player's turn to act.
	 */
	public Action getAction() {
		if (logPlayerEvents) {
			log(""#getAction, amountToCall"" + gi.getAmountToCall(ourSeat));
		}
		return delegate.getAction();
	}

	/**<fim_suffix>
	public Preferences getPreferences() {
		return prefs;
	}

	/**
	 * Load the current settings for this bot.
	 */
	public void init(Preferences playerPrefs) {
		if (logPlayerEvents) {
			log(""#init"");
		}
		this.prefs = playerPrefs;
		delegate.init(playerPrefs);
	}

	/**
	 * A new betting round has started.
	 */
	public void stageEvent(int stage) {
		log(""#stageEvent "" + stage + "", boa<fim_middle>","
	 * Get the current settings for this bot.
	 */","
	 * Returns the current preferences for this bot.
	 */"
"<fim_prefix>if our API sends all events correctly
 * 
 */
public class BotLoggingDecorator implements Player {

	private Player delegate;
	private int ourSeat; // our seat for the current hand
	private GameInfo gi; // general game information
	private Preferences prefs; // the configuration options for this bot
	private StringBuffer log = new StringBuffer();
	private boolean logPlayerEvents;

	/**<fim_suffix>
	public BotLoggingDecorator(Player delegate, boolean logPlayerEvents) {
		this.delegate = delegate;
		this.logPlayerEvents = logPlayerEvents;
	}

	public String getLog() {
		return log.toString();

	}

	private void log(String msg) {
		log.append(msg).append(""\n"");
	}

	/**
	 * An event called to tell us our hole cards and seat number
	 * 
	 * @param c1
	 *            your first hole <fim_middle>","
	 * @param delegate
	 * @param logPlayerEvents true, if all player events ({@link #getAction(), #holeCards(Card, Card, int)} should be logged.
	 * if false only events that a normal observer would see are logged
	 */","
	 * Construct a new bot logging decorator
	 * 
	 * @param delegate
	 *            the player to decorate
	 * @param logPlayerEvents
	 *           "
"<fim_prefix>nd seat number
	 * 
	 * @param c1
	 *            your first hole card
	 * @param c2
	 *            your second hole card
	 * @param seat
	 *            your seat number at the table
	 */
	public void holeCards(Card c1, Card c2, int seat) {
		delegate.holeCards(c1, c2, seat);
		if (logPlayerEvents) {
			log(""#holeCards: "" + c1 + c2 + "" seat:"" + seat);
		}
		this.ourSeat = seat;
	}

	/**<fim_suffix>
	public Action getAction() {
		if (logPlayerEvents) {
			log(""#getAction, amountToCall"" + gi.getAmountToCall(ourSeat));
		}
		return delegate.getAction();
	}

	/**
	 * Get the current settings for this bot.
	 */
	public Preferences getPreferences() {
		return prefs;
	}

	/**
	 * Load the current settings for this bot.
	 */
	public void init(Preferences playerPrefs) {
		if (logPlayerEv<fim_middle>","
	 * Requests an Action from the player Called when it is the Player's turn to act.
	 */","
	 * Get the action to be taken by the bot.
	 * 
	 * @return the action"
"<fim_prefix>e);
	}

	/**
	 * A showdown has occurred.
	 * 
	 * @param pos
	 *            the position of the player showing
	 * @param c1
	 *            the first hole card shown
	 * @param c2
	 *            the second hole card shown
	 */
	public void showdownEvent(int seat, Card c1, Card c2) {
		log(""#showdownEvent: "" + c1 + c2 + "" seat:"" + seat);
		delegate.showdownEvent(seat, c1, c2);
	}

	/**<fim_suffix>
	public void gameStartEvent(GameInfo gInfo) {
		log(""#gameStartEvent"");
		this.gi = gInfo;
		delegate.gameStartEvent(gInfo);
	}

	/**
	 * An event sent when all players are being dealt their hole cards
	 */
	public void dealHoleCardsEvent() {
		log(""#dealHoleCardsEvent"");
		delegate.dealHoleCardsEvent();
	}

	/**
	 * An action has been observed.
	 */
	public void actionEvent(int pos, <fim_middle>","
	 * A new game has been started.
	 * 
	 * @param gi
	 *            the game stat information
	 */","
	 * A game has started.
	 * 
	 * @param gInfo
	 *            the game info
	 */"
"<fim_prefix>lic void showdownEvent(int seat, Card c1, Card c2) {
		log(""#showdownEvent: "" + c1 + c2 + "" seat:"" + seat);
		delegate.showdownEvent(seat, c1, c2);
	}

	/**
	 * A new game has been started.
	 * 
	 * @param gi
	 *            the game stat information
	 */
	public void gameStartEvent(GameInfo gInfo) {
		log(""#gameStartEvent"");
		this.gi = gInfo;
		delegate.gameStartEvent(gInfo);
	}

	/**<fim_suffix>
	public void dealHoleCardsEvent() {
		log(""#dealHoleCardsEvent"");
		delegate.dealHoleCardsEvent();
	}

	/**
	 * An action has been observed.
	 */
	public void actionEvent(int pos, Action act) {
		log(""#actionEvent "" + pos + "" action:"" + act.getType() + "" (toCall: "" + act.getToCall() + "", amount:"" + act.getAmount() + "")"");
		delegate.actionEvent(pos, act);
	}

	/**
	 * The game info st<fim_middle>","
	 * An event sent when all players are being dealt their hole cards
	 */","
	 * A new round has been started.
	 * 
	 * @param"
"<fim_prefix>started.
	 * 
	 * @param gi
	 *            the game stat information
	 */
	public void gameStartEvent(GameInfo gInfo) {
		log(""#gameStartEvent"");
		this.gi = gInfo;
		delegate.gameStartEvent(gInfo);
	}

	/**
	 * An event sent when all players are being dealt their hole cards
	 */
	public void dealHoleCardsEvent() {
		log(""#dealHoleCardsEvent"");
		delegate.dealHoleCardsEvent();
	}

	/**<fim_suffix>
	public void actionEvent(int pos, Action act) {
		log(""#actionEvent "" + pos + "" action:"" + act.getType() + "" (toCall: "" + act.getToCall() + "", amount:"" + act.getAmount() + "")"");
		delegate.actionEvent(pos, act);
	}

	/**
	 * The game info state has been updated Called after an action event has been fully processed
	 */
	public void gameStateChanged() {
		log(""#gameStateChanged"");
		de<fim_middle>","
	 * An action has been observed.
	 */","
	 * An event sent when all players are being dealt"
"<fim_prefix>their hole cards
	 */
	public void dealHoleCardsEvent() {
		log(""#dealHoleCardsEvent"");
		delegate.dealHoleCardsEvent();
	}

	/**
	 * An action has been observed.
	 */
	public void actionEvent(int pos, Action act) {
		log(""#actionEvent "" + pos + "" action:"" + act.getType() + "" (toCall: "" + act.getToCall() + "", amount:"" + act.getAmount() + "")"");
		delegate.actionEvent(pos, act);
	}

	/**<fim_suffix>
	public void gameStateChanged() {
		log(""#gameStateChanged"");
		delegate.gameStateChanged();
	}

	/**
	 * The hand is now over.
	 */
	public void gameOverEvent() {
		log(""#gameOverEvent"");
		delegate.gameOverEvent();
	}

	/**
	 * A player at pos has won amount with the hand handName
	 */
	public void winEvent(int pos, double amount, String handName) {
		log(""#winEvent "" + pos + "",  am<fim_middle>","
	 * The game info state has been updated Called after an action event has been fully processed
	 */","
	 * The game is now in state.
	 */"
"<fim_prefix>getAmount() + "")"");
		delegate.actionEvent(pos, act);
	}

	/**
	 * The game info state has been updated Called after an action event has been fully processed
	 */
	public void gameStateChanged() {
		log(""#gameStateChanged"");
		delegate.gameStateChanged();
	}

	/**
	 * The hand is now over.
	 */
	public void gameOverEvent() {
		log(""#gameOverEvent"");
		delegate.gameOverEvent();
	}

	/**<fim_suffix>
	public void winEvent(int pos, double amount, String handName) {
		log(""#winEvent "" + pos + "",  amount "" + amount + "", hand "" + handName);
		delegate.winEvent(pos, amount, handName);
	}
}<fim_middle>","
	 * A player at pos has won amount with the hand handName
	 */","
	 * The game is over.
	 */"
"<fim_prefix>ourSeat = seat;
	}

	/**
	 * Requests an Action from the player Called when it is the Player's turn to act.
	 */
	public Action getAction() {
		if (logPlayerEvents) {
			log(""#getAction, amountToCall"" + gi.getAmountToCall(ourSeat));
		}
		return delegate.getAction();
	}

	/**
	 * Get the current settings for this bot.
	 */
	public Preferences getPreferences() {
		return prefs;
	}

	/**<fim_suffix>
	public void init(Preferences playerPrefs) {
		if (logPlayerEvents) {
			log(""#init"");
		}
		this.prefs = playerPrefs;
		delegate.init(playerPrefs);
	}

	/**
	 * A new betting round has started.
	 */
	public void stageEvent(int stage) {
		log(""#stageEvent "" + stage + "", board "" + gi.getBoard());
		delegate.stageEvent(stage);
	}

	/**
	 * A showdown has occurred.
	 * 
	 * @param pos
	 <fim_middle>","
	 * Load the current settings for this bot.
	 */","
	 * Initialize the bot with the given preferences.
	 */"
"<fim_prefix>etAmountToCall(ourSeat));
		}
		return delegate.getAction();
	}

	/**
	 * Get the current settings for this bot.
	 */
	public Preferences getPreferences() {
		return prefs;
	}

	/**
	 * Load the current settings for this bot.
	 */
	public void init(Preferences playerPrefs) {
		if (logPlayerEvents) {
			log(""#init"");
		}
		this.prefs = playerPrefs;
		delegate.init(playerPrefs);
	}

	/**<fim_suffix>
	public void stageEvent(int stage) {
		log(""#stageEvent "" + stage + "", board "" + gi.getBoard());
		delegate.stageEvent(stage);
	}

	/**
	 * A showdown has occurred.
	 * 
	 * @param pos
	 *            the position of the player showing
	 * @param c1
	 *            the first hole card shown
	 * @param c2
	 *            the second hole card shown
	 */
	public void showdownEvent(int seat,<fim_middle>","
	 * A new betting round has started.
	 */","
	 * Log a message to the console.
	 *"
"<fim_prefix>rds(Card, Card, int)} should be logged.
	 * if false only events that a normal observer would see are logged
	 */
	public BotLoggingDecorator(Player delegate, boolean logPlayerEvents) {
		this.delegate = delegate;
		this.logPlayerEvents = logPlayerEvents;
	}

	public String getLog() {
		return log.toString();

	}

	private void log(String msg) {
		log.append(msg).append(""\n"");
	}

	/**<fim_suffix>
	public void holeCards(Card c1, Card c2, int seat) {
		delegate.holeCards(c1, c2, seat);
		if (logPlayerEvents) {
			log(""#holeCards: "" + c1 + c2 + "" seat:"" + seat);
		}
		this.ourSeat = seat;
	}

	/**
	 * Requests an Action from the player Called when it is the Player's turn to act.
	 */
	public Action getAction() {
		if (logPlayerEvents) {
			log(""#getAction, amountToCall"" + gi.getA<fim_middle>","
	 * An event called to tell us our hole cards and seat number
	 * 
	 * @param c1
	 *            your first hole card
	 * @param c2
	 *            your second hole card
	 * @param seat
	 *            your seat number at the table
	 */","
	 * Requests a new game from the player. Called when the player is ready to start a new game.
	 */"
"<fim_prefix>Action act) {
		log(""#actionEvent "" + pos + "" action:"" + act.getType() + "" (toCall: "" + act.getToCall() + "", amount:"" + act.getAmount() + "")"");
		delegate.actionEvent(pos, act);
	}

	/**
	 * The game info state has been updated Called after an action event has been fully processed
	 */
	public void gameStateChanged() {
		log(""#gameStateChanged"");
		delegate.gameStateChanged();
	}

	/**<fim_suffix>
	public void gameOverEvent() {
		log(""#gameOverEvent"");
		delegate.gameOverEvent();
	}

	/**
	 * A player at pos has won amount with the hand handName
	 */
	public void winEvent(int pos, double amount, String handName) {
		log(""#winEvent "" + pos + "",  amount "" + amount + "", hand "" + handName);
		delegate.winEvent(pos, amount, handName);
	}
}<fim_middle>","
	 * The hand is now over.
	 */","
	 * The game is over
	 */"
"<fim_prefix>/**
	 * Load the current settings for this bot.
	 */
	public void init(Preferences playerPrefs) {
		if (logPlayerEvents) {
			log(""#init"");
		}
		this.prefs = playerPrefs;
		delegate.init(playerPrefs);
	}

	/**
	 * A new betting round has started.
	 */
	public void stageEvent(int stage) {
		log(""#stageEvent "" + stage + "", board "" + gi.getBoard());
		delegate.stageEvent(stage);
	}

	/**<fim_suffix>
	public void showdownEvent(int seat, Card c1, Card c2) {
		log(""#showdownEvent: "" + c1 + c2 + "" seat:"" + seat);
		delegate.showdownEvent(seat, c1, c2);
	}

	/**
	 * A new game has been started.
	 * 
	 * @param gi
	 *            the game stat information
	 */
	public void gameStartEvent(GameInfo gInfo) {
		log(""#gameStartEvent"");
		this.gi = gInfo;
		delegate.gameStartEvent(gInfo);
	}
<fim_middle>","
	 * A showdown has occurred.
	 * 
	 * @param pos
	 *            the position of the player showing
	 * @param c1
	 *            the first hole card shown
	 * @param c2
	 *            the second hole card shown
	 */","
	 * A player has bet.
	 * 
	 * @param seat
	 *            the seat number
	 * @param amount
	 *            the amount of chips bet
	 */"
"<fim_prefix>
        Objects.requireNonNull(location, ""location"");
        this.pos = pos;
        this.location = location;
    }

    public static HandlerList getHandlerList() {
        return handlers;
    }

    /**
     * The position number of the spawnpoint set.
     *
     * @return position number of the spawnpoint set.
     */
    public int getPos() {
        return pos;
    }

    /**<fim_suffix>
    public void setPos(final int pos) {
        this.pos = pos;
    }

    /**
     * The location of the spawnpoint set.
     *
     * @return location of the spawnpoint set.
     */
    public Location getLocation() {
        return location;
    }

    /**
     * Sets a new location for the spawnpoint.
     *
     * @param location New location for the spawnpoint set.
     */
    p<fim_middle>","
     * Sets a new position number for the spawnpoint.
     *
     * @param pos New position number for the spawnpoint set.
     */","
     * Sets a new position for the spawnpoint.
     *
     * @param pos New position for the spawnpoint set.
     */"
"<fim_prefix>
    public ArenaSetPositionEvent(@Nullable final CommandSender source, @NotNull final Arena arena, final int pos, @NotNull final Location location) {
        super(source, arena);
        Objects.requireNonNull(location, ""location"");
        this.pos = pos;
        this.location = location;
    }

    public static HandlerList getHandlerList() {
        return handlers;
    }

    /**<fim_suffix>
    public int getPos() {
        return pos;
    }

    /**
     * Sets a new position number for the spawnpoint.
     *
     * @param pos New position number for the spawnpoint set.
     */
    public void setPos(final int pos) {
        this.pos = pos;
    }

    /**
     * The location of the spawnpoint set.
     *
     * @return location of the spawnpoint set.
     */
    public <fim_middle>","
     * The position number of the spawnpoint set.
     *
     * @return position number of the spawnpoint set.
     */","
     * Gets the position number for the spawnpoint.
     *
     * @return position number for the spawnpoint.
     */"
"<fim_prefix>   * Sets a new position number for the spawnpoint.
     *
     * @param pos New position number for the spawnpoint set.
     */
    public void setPos(final int pos) {
        this.pos = pos;
    }

    /**
     * The location of the spawnpoint set.
     *
     * @return location of the spawnpoint set.
     */
    public Location getLocation() {
        return location;
    }

    /**<fim_suffix>
    public void setLocation(final Location location) {
        this.location = location;
    }

    @Override
    public boolean isCancelled() {
        return cancelled;
    }

    @Override
    public void setCancelled(final boolean cancelled) {
        this.cancelled = cancelled;
    }

    @Override
    public HandlerList getHandlers() {
        return handlers;
    }
}
<fim_middle>","
     * Sets a new location for the spawnpoint.
     *
     * @param location New location for the spawnpoint set.
     */","
     * Sets a new location for the spawnpoint.
     *
     * @param location New location for the spawnpoint set.
     */"
"<fim_prefix>    * The position number of the spawnpoint set.
     *
     * @return position number of the spawnpoint set.
     */
    public int getPos() {
        return pos;
    }

    /**
     * Sets a new position number for the spawnpoint.
     *
     * @param pos New position number for the spawnpoint set.
     */
    public void setPos(final int pos) {
        this.pos = pos;
    }

    /**<fim_suffix>
    public Location getLocation() {
        return location;
    }

    /**
     * Sets a new location for the spawnpoint.
     *
     * @param location New location for the spawnpoint set.
     */
    public void setLocation(final Location location) {
        this.location = location;
    }

    @Override
    public boolean isCancelled() {
        return cancelled;
    }

    @Overri<fim_middle>","
     * The location of the spawnpoint set.
     *
     * @return location of the spawnpoint set.
     */","
     * Gets the location for the spawnpoint.
     *
     * @return location for the spawnpoint set.
     */"
"<fim_prefix>meteordevelopments.duels.api.event.arena;

import com.meteordevelopments.duels.api.arena.Arena;
import org.bukkit.Location;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.event.Cancellable;
import org.bukkit.event.HandlerList;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Objects;

/**<fim_suffix>
public class ArenaSetPositionEvent extends ArenaEvent implements Cancellable {

    private static final HandlerList handlers = new HandlerList();

    private int pos;
    private Location location;
    private boolean cancelled;

    public ArenaSetPositionEvent(@Nullable final CommandSender source, @NotNull final Arena arena, final int pos, @NotNull final Location location) {
     <fim_middle>","
 * Called when a new spawnpoint is set for an {@link Arena}.
 *
 * @see Arena#setPosition(Player, int, Location)
 */","
 * @author Johnny_JayJay (https://www.github.com/JohnnyJayJay)
 */"
"<fim_prefix>/*<fim_suffix>

package com.caucho.cloud.topology;

/**
 * Selects one of the triad members, given the triad owner.
 */
public class TriadShard<X> {
  /**
   * Returns the primary server.
   */
  public X get(TriadOwner owner)
  {
    return null;
  }
  
  public X get(String key)
  {
    return get(TriadOwner.getHashOwner(key));
  }
  
  public X get(byte []hash)
  {
    return get(TriadOwner.getHa<fim_middle>","
 * Copyright (c) 1998-2012 Caucho Technology -- all rights reserved
 *
 * This file is part of Resin(R) Open Source
 *
 * Each copy or derived work must preserve the copyright notice and this
 * notice unmodified.
 *
 * Resin Open Source is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Resin Open Source is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty
 * of NON-INFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Resin Open Source; if not, write to the
 *
 *   Free Software Foundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Scott Ferguson
 */","*
 * Selects one of the triad members, given the triad owner.
 */"
"<fim_prefix>uld have received a copy of the GNU General Public License
 * along with Resin Open Source; if not, write to the
 *
 *   Free Software Foundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Scott Ferguson
 */

package com.caucho.cloud.topology;

/**
 * Selects one of the triad members, given the triad owner.
 */
public class TriadShard<X> {
  /**<fim_suffix>
  public X get(TriadOwner owner)
  {
    return null;
  }
  
  public X get(String key)
  {
    return get(TriadOwner.getHashOwner(key));
  }
  
  public X get(byte []hash)
  {
    return get(TriadOwner.getHashOwner(hash));
  }
}
<fim_middle>","
   * Returns the primary server.
   */","
   * Selects one of the triad members,"
"<fim_prefix>anty
 * of NON-INFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Resin Open Source; if not, write to the
 *
 *   Free Software Foundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Scott Ferguson
 */

package com.caucho.cloud.topology;

/**<fim_suffix>
public class TriadShard<X> {
  /**
   * Returns the primary server.
   */
  public X get(TriadOwner owner)
  {
    return null;
  }
  
  public X get(String key)
  {
    return get(TriadOwner.getHashOwner(key));
  }
  
  public X get(byte []hash)
  {
    return get(TriadOwner.getHashOwner(hash));
  }
}
<fim_middle>","
 * Selects one of the triad members, given the triad owner.
 */","
 * A shard that is a triad.
 */"
"<fim_prefix>/*<fim_suffix>
package org.eclipse.scout.rt.platform.namespace;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.stream.Collectors;

import jakarta.annotation.PostConstruct;

import org.eclipse.scout.rt.platform.ApplicationScoped;
import org.eclipse.scout.rt.platform.BEANS;
import org.eclipse.scout.rt.platform.internal.<fim_middle>","
 * Copyright (c) 2010, 2023 BSI Business Systems Integration AG
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */","*
 * @author mzi
 */"
"<fim_prefix>()).collect(Collectors.joining("", ""))));

    // If there are non-unique IDs, only keep the first namespace
    namespaces.forEach(namespace -> getNamespaces().putIfAbsent(namespace.getId(), namespace));
  }

  public static Namespaces get() {
    return BEANS.get(Namespaces.class);
  }

  protected LinkedHashMap<String, INamespace> getNamespaces() {
    return m_namespaces;
  }

  /**<fim_suffix>
  public List<INamespace> all() {
    return new ArrayList<>(getNamespaces().values());
  }

  /**
   * @return Namespace with the given id or <code>null</code> if none is found.
   */
  public INamespace byId(String id) {
    return getNamespaces().get(id);
  }
}
<fim_middle>","
   * @return All {@link INamespace} sorted by their order.
   */","
   * @return All namespaces.
   */"
"<fim_prefix>fAbsent(namespace.getId(), namespace));
  }

  public static Namespaces get() {
    return BEANS.get(Namespaces.class);
  }

  protected LinkedHashMap<String, INamespace> getNamespaces() {
    return m_namespaces;
  }

  /**
   * @return All {@link INamespace} sorted by their order.
   */
  public List<INamespace> all() {
    return new ArrayList<>(getNamespaces().values());
  }

  /**<fim_suffix>
  public INamespace byId(String id) {
    return getNamespaces().get(id);
  }
}
<fim_middle>","
   * @return Namespace with the given id or <code>null</code> if none is found.
   */","
   * @return The {@link INamespace} with the given id.
   */"
"<fim_prefix>/*<fim_suffix>

package org.openlmis.referencedata.exception;

import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
public class ExceptionDetail {
  private String title;
  private int status;
  private String detail;
  private long timeStamp;
  private String developerMessage;
}<fim_middle>","
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2017 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details. You should have received a copy of
 * the GNU Affero General Public License along with this program. If not, see
 * http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org.
 */","
 * Copyright (c) 2014, Thoughtworks Inc
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE"
"<fim_prefix>package com.autentia.tnt.manager.security;

import com.autentia.tnt.businessobject.User;
import com.autentia.tnt.util.ConfigurationUtil;
import com.autentia.tnt.util.SpringUtils;
import org.apache.commons.codec.digest.DigestUtils;

public class AuthenticationManagerDaoImpl extends AuthenticationManager {

    /**<fim_suffix>
    public AuthenticationManagerDaoImpl(ConfigurationUtil cfg, IUserRolesService userRolesService) {
        super(cfg, userRolesService);
    }

    public static AuthenticationManager getDefault() {
        return (AuthenticationManager)SpringUtils.getSpringBean(""userDetailsServiceDao"");
    }

    public boolean checkPassword(User user, String passwd) {

        return DigestUtils.<fim_middle>","
     * Constructor
     *
     * @param cfg configuration object
     * @param userRolesService delegate for getting user's roles
     */","
     * @deprecated Use {@link #AuthenticationManagerDaoImpl(ConfigurationUtil, IUserRolesService)} instead.
     */"
"<fim_prefix>package org.drools.guvnor.plugin.stubs;

import org.apache.maven.plugin.testing.stubs.MavenProjectStub;

/**<fim_suffix>
public class GuvnorPluginStub extends MavenProjectStub {

    


}
<fim_middle>","
 * Created by IntelliJ IDEA.
 * User: awaterma
 * Date: Nov 3, 2010
 * Time: 1:00:45 PM
 * To change this template use File | Settings | File Templates.
 */","
 * This class is used to test the GuvnorPluginMojo.
 * 
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package de.mfreund.gentrans.transformation.logging;

import java.io.OutputStream;
import java.util.logging.LogRecord;
import java.util.logging.StreamHandler;

/**
 * A {@link StreamHandler} that uses the {@link GenTransLogFormatter} to print logged messages to an
 * {@link OutputStream}.
 *
 * @author mfreund
 */
public class GenTransStreamHandler extends StreamHandler {

	/**
	 * Thi<fim_middle>","*****************************************************************************
 * Copyright (C) 2014-2018 Matthias Freund and others, Institute of Automation, TU Dresden
 * 
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * Contributors:
 *   Institute of Automation, TU Dresden - Initial API and implementation
 * 
 * SPDX-License-Identifier: EPL-2.0
 ******************************************************************************/","
 * A {@link StreamHandler} that uses the {@link GenTransLogFormatter} to print logged messages to an
 * {@link OutputStream}.
 *
 * @author mfreund
 */"
"<fim_prefix>/epl-2.0/
 * 
 * Contributors:
 *   Institute of Automation, TU Dresden - Initial API and implementation
 * 
 * SPDX-License-Identifier: EPL-2.0
 ******************************************************************************/
package de.mfreund.gentrans.transformation.logging;

import java.io.OutputStream;
import java.util.logging.LogRecord;
import java.util.logging.StreamHandler;

/**<fim_suffix>
public class GenTransStreamHandler extends StreamHandler {

	/**
	 * This creates an instance.
	 *
	 * @param stream
	 *            The {@link OutputStream} to which logged messages will be printed.
	 */
	public GenTransStreamHandler(OutputStream stream) {

		super(stream, GenTransLogFormatter.getInstance());
	}

	@Override
	public void publish(LogRecord record) {

		super.publish(rec<fim_middle>","
 * A {@link StreamHandler} that uses the {@link GenTransLogFormatter} to print logged messages to an
 * {@link OutputStream}.
 *
 * @author mfreund
 */","
 * This class is a {@link StreamHandler} that prints log messages to a {@link OutputStream}.
 *
 * @author <NAME>
 *
 */"
"<fim_prefix>*******/
package de.mfreund.gentrans.transformation.logging;

import java.io.OutputStream;
import java.util.logging.LogRecord;
import java.util.logging.StreamHandler;

/**
 * A {@link StreamHandler} that uses the {@link GenTransLogFormatter} to print logged messages to an
 * {@link OutputStream}.
 *
 * @author mfreund
 */
public class GenTransStreamHandler extends StreamHandler {

	/**<fim_suffix>
	public GenTransStreamHandler(OutputStream stream) {

		super(stream, GenTransLogFormatter.getInstance());
	}

	@Override
	public void publish(LogRecord record) {

		super.publish(record);

		// It seems that we need to call 'flush()' manually after a new
		// record is published. Otherwise, no messages seem to appear on the
		// console.
		//
		this.flush();
	}
}
<fim_middle>","
	 * This creates an instance.
	 *
	 * @param stream
	 *            The {@link OutputStream} to which logged messages will be printed.
	 */","
	 * Creates a new {@link GenTransStreamHandler} that uses the given {@link OutputStream} to print
	 * logged messages.
	 *
	 * @param stream
	 *       "
"<fim_prefix>package com.lunagameserve.ggj2015.client;

import com.lunagameserve.ggj2015.bombServer.Log;

/**<fim_suffix>
public class Arguments {
    private String serverIP = ""127.0.0.1"";
    private int serverPort  = 9911;
    private String gameID   = ""12345678"";

    public String getServerIP() {
        return serverIP;
    }

    public int getServerPort() {
        return serverPort;
    }

    public String getGameID() {
        return gameID;
    }

    public Arguments(String[] args) {
       <fim_middle>","
 * Created by six on 1/24/15.
 */","
 * Created by zero on 5/29/2015.
 */"
"<fim_prefix>package com.hummer.common.core.constant;

/**<fim_suffix>
public class ResourceConstants {

    public enum RESOURCE_STATUS {
        NotFixed, NotNeedFix, AlreadyFixed, Error
    }

    public final static String QUERY_ALL_RESOURCE =
            ""policies:\n"" +
            ""  - name: {resource_name}\n"" +
            ""    resource: {resource_type}"";

    public final static String ResourceTypeConstants = ""TASK"";
    public final static Strin<fim_middle>","
 * @author harris
 */","
 * @author: liangzhi"
"<fim_prefix>/*<fim_suffix>
package org.craftercms.engine.util.spring.security.targeting;

import org.craftercms.engine.util.spring.security.profile.ProfileUser;
import org.craftercms.security.authentication.Authentication;

/**
 * Extension of {@link ProfileUser} used for Studio targeting
 *
 * @author joseross
 * @since 3.1.9
 */
public class TargetingUser extends ProfileUser {

    public TargetingUser(Authen<fim_middle>","
 * Copyright (C) 2007-2022 Crafter Software Corporation. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Extension of {@link ProfileUser} used for Studio targeting
 *
 * @author joseross
 * @since 3.1.9
 */"
"<fim_prefix>neral Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.craftercms.engine.util.spring.security.targeting;

import org.craftercms.engine.util.spring.security.profile.ProfileUser;
import org.craftercms.security.authentication.Authentication;

/**<fim_suffix>
public class TargetingUser extends ProfileUser {

    public TargetingUser(Authentication auth) {
        super(auth);
    }

}
<fim_middle>","
 * Extension of {@link ProfileUser} used for Studio targeting
 *
 * @author joseross
 * @since 3.1.9
 */","
 * User: <NAME>
 * Date: 5/24/12
 * Time: 11:04 AM
 */"
"<fim_prefix>/*<fim_suffix>
package fi.hacklab.mikkeli.logisim.switches;

import com.cburch.logisim.tools.AddTool;
import com.cburch.logisim.tools.Library;
import com.cburch.logisim.tools.Tool;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author Ilmo Euro <ilmo.euro@gmail.com>
 */
public class Switches extends Library {

    private final List<AddTool> tools = Arrays.asList(
            new AddToo<fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","*
 *
 * @author Ilmo Euro <ilmo.euro@gmail.com>
 */"
"<fim_prefix> this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fi.hacklab.mikkeli.logisim.switches;

import com.cburch.logisim.tools.AddTool;
import com.cburch.logisim.tools.Library;
import com.cburch.logisim.tools.Tool;
import java.util.Arrays;
import java.util.List;

/**<fim_suffix>
public class Switches extends Library {

    private final List<AddTool> tools = Arrays.asList(
            new AddTool(new SinglePoleSingleThrow()),
            new AddTool(new SinglePoleDoubleThrow1to2())
    );

    @Override
    public List<? extends Tool> getTools() {
        return tools;
    }

    @Override
    public String getDisplayName() {
        return ""Switches"";
    }
<fim_middle>","
 *
 * @author Ilmo Euro <ilmo.euro@gmail.com>
 */","
 *
 * @author Mikko
 */"
"<fim_prefix>/**<fim_suffix>

import java.util.Scanner;
class marks{
int grades;
void calculate(int g){
grades=g;
if(grades>=40 && grades<=50){//checking of grades
System.out.println(""PASS"");}
else if(grades>=51 && grades<=75){
System.out.println(""MERIT"");}
else if(grades>75){
System.out.println(""DISTINCTION"");}
else if(grades<40){
System.out.println(""FAIL"");
}
}}
class Student_marks{
public static void main(Stri<fim_middle>","program to accept 10 studentâ€™s marks in an array, arrange it into ascending order, 
convert into the following grades and print marks and grades.
using class and object**/","
 * 
 * @author <NAME>
 * @since May 1, 2019
 * @version 1.0
 *
 */"
"<fim_prefix>/**<fim_suffix>

package org.eclipse.wst.html.ui.internal.search;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.wst.sse.ui.internal.search.FindOccurrencesActionDelegate;

/**
 * Sets up FindOccurrencesActionDelegate for html find occurrences processors
 */
public class HTMLFindOccurrencesActionDelegate extends FindOccurrencesActionDelegate {
	private List fProcessors;

	prot<fim_middle>","*****************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     
 *******************************************************************************/

package org.eclipse.wst.html.ui.internal.search;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.wst.sse.ui.internal.search.FindOccurrencesActionDelegate;

/**<fim_suffix>
public class HTMLFindOccurrencesActionDelegate extends FindOccurrencesActionDelegate {
	private List fProcessors;

	protected List getProcessors() {
		if (fProcessors == null) {
			fProcessors = new ArrayList();
			HTMLFindOccurrencesProcessor htmlProcessor = new HTMLFindOccurrencesProcessor();
			fProcessors.add(htmlProcessor);
		}
		return fProcessors;
	}
}
<fim_middle>","
 * Sets up FindOccurrencesActionDelegate for html find occurrences processors
 */","
 * @author <NAME>
 * @since 3.0
"
"<fim_prefix>package engine.universe;

import ui.view.Main;

/**<fim_suffix>
public class UniverseGenerator implements Runnable
{
	public static Universe universe;
	private UniverseConstructionContext universeConstructionContext;
	public UniverseGenerator(UniverseConstructionContext universeConstructionContext)
	{
		this.universeConstructionContext = universeConstructionContext;
	}
	/**
	 * When an object implementing interface <code>Runnable</code> is used
	 <fim_middle>","
 * Created by bob on 5/7/2016.
 *
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>.universe;

import ui.view.Main;

/**
 * Created by bob on 5/7/2016.
 *
 */
public class UniverseGenerator implements Runnable
{
	public static Universe universe;
	private UniverseConstructionContext universeConstructionContext;
	public UniverseGenerator(UniverseConstructionContext universeConstructionContext)
	{
		this.universeConstructionContext = universeConstructionContext;
	}
	/**<fim_suffix>
	@Override
	public void run() {
		universe = new Universe(universeConstructionContext);
		Universe.universe = universe;
		new Main(universe).run();
	}
}
<fim_middle>","
	 * When an object implementing interface <code>Runnable</code> is used
	 * to create a thread, starting the thread causes the object's
	 * <code>run</code> method to be called in that separately executing
	 * thread.
	 * <p>
	 * The general contract of the method <code>run</code> is that it may
	 * take any action whatsoever.
	 *
	 * @see Thread#run()
	 */","
	 *
	 */"
"<fim_prefix>/*<fim_suffix>

package dev.architectury.mappingslayers.impl.mappings;

import dev.architectury.mappingslayers.api.Mappings;
import dev.architectury.mappingslayers.api.mutable.MutableTinyTree;
import dev.architectury.mappingslayers.api.transform.MappingsTransformation;
import dev.architectury.mappingslayers.api.utils.MappingsUtils;
import dev.architectury.mappingslayers.impl.serializer.TinyTreeSeria<fim_middle>","
 * This file is part of architectury.
 * Copyright (C) 2021 architectury
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */","*
 * @author <NAME>
 * @since 2.0.0
 */"
"<fim_prefix>/*<fim_suffix>

package org.harctoolbox.jgirs;

/**
 * Parameters that consist of a String.
 */
final class StringParameter extends Parameter {

    private String value;

    StringParameter(String name, String initValue, String documentation) {
        super(name, documentation);
        this.value = initValue;
    }

    @Override
    public void set(String str) {
        value = str;
    }

    <fim_middle>","
Copyright (C) 2016 Bengt Martensson.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
*/","*
 * @author <NAME>
 */"
"<fim_prefix>documentation) {
        super(name, documentation);
        this.value = initValue;
    }

    @Override
    public void set(String str) {
        value = str;
    }

    @Override
    public void set(Object object) {
        value = (String) object;
    }

    @Override
    public String get() {
        return value.matches("".*\\s.*"") ? ( ""\"""" + value + ""\"""" ) : value;
    }

    /**<fim_suffix>
    public String getValue() {
        return value;
    }
}
<fim_middle>","
     * @return the value
     */","
     * @return the value
     */"
"<fim_prefix>stributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.
*/

package org.harctoolbox.jgirs;

/**<fim_suffix>
final class StringParameter extends Parameter {

    private String value;

    StringParameter(String name, String initValue, String documentation) {
        super(name, documentation);
        this.value = initValue;
    }

    @Override
    public void set(String str) {
        value = str;
    }

    @Override
    public void set(Object object) {
        value = (String) object;
 <fim_middle>","
 * Parameters that consist of a String.
 */","
 * A parameter that is a string.
 */"
"<fim_prefix>package fr.margouill.cockpitpp.utils;

/**<fim_suffix>
public enum MiG21Bis_Devices {

    DC_BUS(1),
    AC_BUS(2),
    ENGINE_START_DEVICE(3),
    FUEL_PUMPS(4),
    FUEL_SYSTEM(5),
    ENGINE(6),
    //?(7),
    CONTROL_SYSTEM(8),
    SAU(9),
    TRIMER(10),
    SPS(11),
    ARU(12),
    AIRBRAKE(13),
    GEAR_BRAKES(14),
    GEARS(15),
    FLAPS(16),
    CHUTE(17),
    KONUS(18),
    SOPLO(19),
    OXYGENE_SYSTEM(20),
    COMPRESSED_A<fim_middle>","
 * Created by margouill on 13/09/2017.
 *
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix> 
package org.eclipse.rap.interactiondesign.tests;

import java.util.List;

import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.ActionContributionItem;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.preference.IPreferenceStore;
import org.eclipse.rap.interactiondesign.tests.impl.ConfigurableStackImpl;
import org.eclipse.rap.interactiondesi<fim_middle>","***************************************************************************** 
* Copyright (c) 2009 EclipseSource and others. All rights reserved. This
* program and the accompanying materials are made available under the terms of
* the Eclipse Public License v1.0 which accompanies this distribution, and is
* available at http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   EclipseSource - initial API and implementation
*******************************************************************************/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package dk.aau.ida8.util.groupcomparators;

import dk.aau.ida8.model.Participant;

import java.util.Comparator;

/**<fim_suffix>
public class SinclairRankingComparator implements Comparator<Participant> {

    /**
     * Compares two participants based on their Sinclair score.
     *
     * This method compares two participants based on each participant's
     * Sinclair score. The participant with the higher score comes before the
     * participant with the lower score. This results in a list sorted using
   <fim_middle>","
 * This class represents a comparator to be used to compare participants within
 * a ranking group in a Sinclair competition.
 *
 * This class implements the Comparator interface, implementing the compare
 * method to provide a custom comparison between participants within a group.
 * The comparator simply compares Sinclair scores, with the participant with
 * the higher score coming before the participant with the lower score.
 */","
 * Comparator for sorting participants based on their Sinclair score.
 *
 * This comparator compares two participants based on each participant's
 * Sinclair score. The participant with the higher score comes before the
 * participant with the lower score. This results in a list sorted using
 * this comparator.
 */"
"<fim_prefix>This class implements the Comparator interface, implementing the compare
 * method to provide a custom comparison between participants within a group.
 * The comparator simply compares Sinclair scores, with the participant with
 * the higher score coming before the participant with the lower score.
 */
public class SinclairRankingComparator implements Comparator<Participant> {

    /**<fim_suffix>
    @Override
    public int compare(Participant p1, Participant p2) {
        return (int) (p2.getSinclairScore() - p1.getSinclairScore());
    }
}
<fim_middle>","
     * Compares two participants based on their Sinclair score.
     *
     * This method compares two participants based on each participant's
     * Sinclair score. The participant with the higher score comes before the
     * participant with the lower score. This results in a list sorted using
     * this comparator being sorted by score, with the highest coming first.
     *
     * @param p1 the first participant to compare
     * @param p2 the second participant to compare
     * @return a negative value where p1 comes first, positive where
     *         p2 comes first, and zero where they are equal
     */","
     * Compares two participants based on their Sinclair score.
     *
     * @param p1 The first participant to compare.
     * @param p2 The second participant to compare.
     * @return A negative integer, zero, or a positive integer as the first
     * participant is less than, equal to, or greater than the second
     * participant, respectively.
     */"
"<fim_prefix>/*<fim_suffix>
package org.nmea.parser;

import org.nmea.sentence.MHUSentence;
import org.nmea.type.SentenceType;
import org.nmea.type.TalkerType;

/**
 * MHUParser - Humidity & dew point.
 * <p>
 * $--MHU,x.x,x.x,x.x,C*hh<CR><LF>
 *
 * @author Kimmo Tuukkanen
 */
class MHUParser extends SentenceParser implements MHUSentence {

  private static final int RELATIVE_HUMIDITY = 0;
  private static final<fim_middle>"," 
 * Copyright (C) 2019 Key Bridge
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
   * @return the relative humidity
   */"
"<fim_prefix>TABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.nmea.parser;

import org.nmea.sentence.MHUSentence;
import org.nmea.type.SentenceType;
import org.nmea.type.TalkerType;

/**<fim_suffix>
class MHUParser extends SentenceParser implements MHUSentence {

  private static final int RELATIVE_HUMIDITY = 0;
  private static final int ABSOLUTE_HUMIDITY = 1;
  private static final int DEW_POINT = 2;
  private static final int DEW_POINT_UNIT = 3;

  /**
   * Constructor for parsing MHU sentence.
   *
   * @param nmea MHU sentence String
   */
  public MHUParser(String nmea) {
 <fim_middle>","
 * MHUParser - Humidity & dew point.
 * <p>
 * $--MHU,x.x,x.x,x.x,C*hh<CR><LF>
 *
 * @author Kimmo Tuukkanen
 */","
 * @author <NAME> (RSN)
 * @version 1.0
 */"
"<fim_prefix>lkerType;

/**
 * MHUParser - Humidity & dew point.
 * <p>
 * $--MHU,x.x,x.x,x.x,C*hh<CR><LF>
 *
 * @author Kimmo Tuukkanen
 */
class MHUParser extends SentenceParser implements MHUSentence {

  private static final int RELATIVE_HUMIDITY = 0;
  private static final int ABSOLUTE_HUMIDITY = 1;
  private static final int DEW_POINT = 2;
  private static final int DEW_POINT_UNIT = 3;

  /**<fim_suffix>
  public MHUParser(String nmea) {
    super(nmea, SentenceType.MHU);
  }

  /**
   * Constructor for fresh MHU sentence.
   *
   * @param tid Talker ID to be used.
   */
  public MHUParser(TalkerType tid) {
    super(tid, SentenceType.MHU, 4);
    setDewPointUnit('C');
  }

  @Override
  public double getRelativeHumidity() {
    return getDoubleValue(RELATIVE_HUMIDITY);
  }

  @Overri<fim_middle>","
   * Constructor for parsing MHU sentence.
   *
   * @param nmea MHU sentence String
   */","
   * Constructor for MHU sentence.
   *
   * @param nmea NMEA sentence to be parsed.
 "
"<fim_prefix>ements MHUSentence {

  private static final int RELATIVE_HUMIDITY = 0;
  private static final int ABSOLUTE_HUMIDITY = 1;
  private static final int DEW_POINT = 2;
  private static final int DEW_POINT_UNIT = 3;

  /**
   * Constructor for parsing MHU sentence.
   *
   * @param nmea MHU sentence String
   */
  public MHUParser(String nmea) {
    super(nmea, SentenceType.MHU);
  }

  /**<fim_suffix>
  public MHUParser(TalkerType tid) {
    super(tid, SentenceType.MHU, 4);
    setDewPointUnit('C');
  }

  @Override
  public double getRelativeHumidity() {
    return getDoubleValue(RELATIVE_HUMIDITY);
  }

  @Override
  public double getAbsoluteHumidity() {
    return getDoubleValue(ABSOLUTE_HUMIDITY);
  }

  @Override
  public double getDewPoint() {
    return getDoubleValue(DEW_PO<fim_middle>","
   * Constructor for fresh MHU sentence.
   *
   * @param tid Talker ID to be used.
   */","
   * Constructor for building MHU sentence.
   *
   * @param tid Talker ID
   */"
"<fim_prefix>/*<fim_suffix>

package org.idea.processing.plugin.project_creation;

import com.intellij.icons.AllIcons;
import com.intellij.ide.util.projectWizard.JavaModuleBuilder;
import com.intellij.ide.util.projectWizard.ModuleWizardStep;
import com.intellij.ide.util.projectWizard.WizardContext;
import com.intellij.openapi.application.Application;
import com.intellij.openapi.application.ApplicationManager;
im<fim_middle>","
 * Copyright (c) 2017  mistodev
 *
 * This file is part of ""Processing IDEA plugin"" and is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package com.raffaeleconforti.noisefiltering.label.logic.clustering.centroid;

import com.raffaeleconforti.noisefiltering.label.logic.FilteringResult;
import com.raffaeleconforti.noisefiltering.label.logic.clustering.AbstractClustering;
import com.raffaeleconforti.noisefiltering.label.logic.clustering.SkipClusterException;
import de.lmu.ifi.dbs.elki.algorithm.clustering.ClusteringAlgo<fim_middle>","
 *  Copyright (C) 2018 Raffaele Conforti (www.raffaeleconforti.com)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>alization kMeansInitialization = kMeansInitializations[l];
            for (int d = 0; d < distanceFunctions.length; d++) {
                NumberVectorDistanceFunction distanceFunction = distanceFunctions[d];
                ClusteringAlgorithm<Clustering<PrototypeModel>> clusteringMethod = new KMeansCompare(
                        distanceFunction,
                        maxClts /*<fim_suffix>, //
                        0 /* maximum number of iterations: no limit */,
                        kMeansInitialization
                );
                try {
                    String technique = ""KMeansCompare - ("" +
                            distanceFunction.getClass().getCanonicalName().substring(distanceFunction.getClass().getCanonicalName().lastIndexOf(""."") + 1) +
        <fim_middle>", k - number of partitions */, maximum number of clusters: no
"<fim_prefix>mu.ifi.dbs.elki.algorithm.clustering.kmeans.KMeansCompare;
import de.lmu.ifi.dbs.elki.algorithm.clustering.kmeans.initialization.KMeansInitialization;
import de.lmu.ifi.dbs.elki.data.Clustering;
import de.lmu.ifi.dbs.elki.data.model.PrototypeModel;
import de.lmu.ifi.dbs.elki.distance.distancefunction.NumberVectorDistanceFunction;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class KMeansCompareFiltering<T> extends AbstractClustering<T> {

    public KMeansCompareFiltering(T[] key, double[][] data, int maxClts) {
        super(key, data, maxClts);
    }

    public List<FilteringResult<T>> getOutliers() {
        List<FilteringResult<T>> outliers = new ArrayList<>();

        for (int l = 0; l < kMeansInitializations.length; l++) {
            KMean<fim_middle>","
 * Created by Raffaele Conforti (conforti.raffaele@gmail.com) on 26/12/17.
 */","
 * Created by IntelliJ IDEA.
 * User: jan
 * Date: 11/12/11
 * Time: 11:01 AM
 *"
"<fim_prefix>          for (int d = 0; d < distanceFunctions.length; d++) {
                NumberVectorDistanceFunction distanceFunction = distanceFunctions[d];
                ClusteringAlgorithm<Clustering<PrototypeModel>> clusteringMethod = new KMeansCompare(
                        distanceFunction,
                        maxClts /* k - number of partitions */, //
                        0 /*<fim_suffix>,
                        kMeansInitialization
                );
                try {
                    String technique = ""KMeansCompare - ("" +
                            distanceFunction.getClass().getCanonicalName().substring(distanceFunction.getClass().getCanonicalName().lastIndexOf(""."") + 1) +
                            "" "" +
                            kMeansInitialization.<fim_middle>", maximum number of iterations: no limit */," max iterations */,"
"<fim_prefix>/*<fim_suffix>

package io.olvid.engine.protocol.datatypes;


import io.olvid.engine.datatypes.Identity;
import io.olvid.engine.datatypes.UID;
import io.olvid.engine.datatypes.containers.ReceptionChannelInfo;
import io.olvid.engine.datatypes.containers.SendChannelInfo;
import io.olvid.engine.protocol.databases.ReceivedMessage;

public class CoreProtocolMessage {
    private final SendChannelInfo sen<fim_middle>","
 *  Olvid for Android
 *  Copyright Â© 2019-2024 Olvid SAS
 *
 *  This file is part of Olvid for Android.
 *
 *  Olvid is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License, version 3,
 *  as published by the Free Software Foundation.
 *
 *  Olvid is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with Olvid.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 18/01/2017.
 */"
"<fim_prefix>/*<fim_suffix>

package org.smallibs.suitcase.match;

import junit.framework.TestCase;
import org.junit.Test;
import org.smallibs.suitcase.cases.core.Case4;
import org.smallibs.suitcase.cases.core.TypeCase;

import static org.smallibs.suitcase.cases.core.Cases.Constant;
import static org.smallibs.suitcase.cases.core.Cases.Var;
import static org.smallibs.suitcase.utils.Functions.function;

public cla<fim_middle>","
 * Copyright (C)2015 D. Plaindoux.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; see the file COPYING.  If not, write to
 * the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 */","*
 * Created by <NAME> on 1/12/17.
 */"
"<fim_prefix>/*<fim_suffix>
package core;

import compiler.*;
import mil.*;

class MultipleKindsSpecifiedFailure extends Failure {

  public MultipleKindsSpecifiedFailure(TypeExp t, Kind kind1, Kind kind2) {
    super(
        t.position(),
        ""Multiple kinds (""
            + kind1
            + "" and ""
            + kind2
            + "") have been specified for this type parameter"");
  }
}
<fim_middle>","
    Copyright 2018-19 Mark P Jones, Portland State University

    This file is part of mil-tools.

    mil-tools is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mil-tools is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mil-tools.  If not, see <https://www.gnu.org/licenses/>.
*/","*
 * @author <NAME>
 * @version $Id$
 */"
"<fim_prefix>/**<fim_suffix>
package dsm.oscal.model.OscalMetadata.provider;

import org.eclipse.emf.common.notify.AdapterFactory;
import dsm.oscal.model.OscalMetadata.BackMatter;

public class BackMatterItemProviderBaseCustomImpl extends BackMatterItemProvider {
	
	public BackMatterItemProviderBaseCustomImpl(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}
	
	
	/**
	   * @generated
	   */
	@Override
<fim_middle>","
 * Copyright Israel Aerospace Industries, Eclipse contributors and others 2021. All rights reserved.
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *     ELTA Ltd - initial API and implementation
 * 
 */","
 * <b>Item Provider Base Custom Impl</b>
 * 
 * @generated
 */"
"<fim_prefix>itial API and implementation
 * 
 */
package dsm.oscal.model.OscalMetadata.provider;

import org.eclipse.emf.common.notify.AdapterFactory;
import dsm.oscal.model.OscalMetadata.BackMatter;

public class BackMatterItemProviderBaseCustomImpl extends BackMatterItemProvider {
	
	public BackMatterItemProviderBaseCustomImpl(AdapterFactory adapterFactory) {
		super(adapterFactory);
	}
	
	
	/**<fim_suffix>
	@Override
	public Object getImage(Object object) {
		return overlayImage(object, getResourceLocator().getImage(""custom/ctxhelp_context_obj.png""));
	}
	
}
<fim_middle>","
	   * @generated
	   */","
	 * This adds a property descriptor"
"<fim_prefix>package com.github.liaomengge.base_common.ribbon.loadbalance;

import com.alibaba.nacos.api.naming.pojo.Instance;
import com.google.common.base.Predicate;
import com.netflix.loadbalancer.AbstractLoadBalancerRule;

/**<fim_suffix>
public abstract class AbstractPredicateRule extends AbstractLoadBalancerRule {

    public abstract Predicate<Instance> getPredicate();
}
<fim_middle>","
 * Created by liaomengge on 2020/12/30.
 */","
 * @author liaoheng
 * @version 2019-07-15 15"
"<fim_prefix>/*<fim_suffix>
package de.root1.slicknx;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import tuwien.auto.calimero.DetachEvent;
import tuwien.auto.calimero.process.ProcessEvent;
import tuwien.auto.calimero.process.ProcessListener;

/**
 *
 * @author achristian
 */
public class GeneralGroupAddressListener implements ProcessListener {

    private final Map<String, List<Gro<fim_middle>","
 * Copyright (C) 2015 Alexander Christian <alex(at)root1.de>. All rights reserved.
 * 
 * This file is part of slicKnx.
 *
 *   slicKnx is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   slicKnx is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with slicKnx.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */"
"<fim_prefix>ent.Type type = GroupAddressEvent.Type.UNDEFINED;
            switch (e.getServiceCode()) {
                case /* GROUP_READ */ 0x0:
                    type = GroupAddressEvent.Type.GROUP_READ;
                    break;
                case /* GROUP_RESPONSE */ 0x40:
                    type = GroupAddressEvent.Type.GROUP_RESPONSE;
                    break;
                case /*<fim_suffix> 0x80:
                    type = GroupAddressEvent.Type.GROUP_WRITE;
                    break;
            }

            GroupAddressEvent gae = new GroupAddressEvent(e.getSourceAddr().toString(), destination, type, e.getASDU());

            if (globalGroupAddressListener != null) {
                switch (gae.getType()) {
                    case GROUP_READ:
                      <fim_middle>", GROUP_WRITE */, GROUP_WRITE */
"<fim_prefix>You should have received a copy of the GNU General Public License
 *   along with slicKnx.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.root1.slicknx;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import tuwien.auto.calimero.DetachEvent;
import tuwien.auto.calimero.process.ProcessEvent;
import tuwien.auto.calimero.process.ProcessListener;

/**<fim_suffix>
public class GeneralGroupAddressListener implements ProcessListener {

    private final Map<String, List<GroupAddressListener>> listeners;
    private GroupAddressListener globalGroupAddressListener;

    GeneralGroupAddressListener(GroupAddressListener globalGroupAddressListener, Map<String, List<GroupAddressListener>> listeners) {
        this.listeners = listeners;
        this.gl<fim_middle>","
 *
 * @author achristian
 */","
 *
 * @author <NAME>
"
"<fim_prefix>essEvent e) {
        try {
            // convert
            String destination = e.getDestination().toString();
            GroupAddressEvent.Type type = GroupAddressEvent.Type.UNDEFINED;
            switch (e.getServiceCode()) {
                case /* GROUP_READ */ 0x0:
                    type = GroupAddressEvent.Type.GROUP_READ;
                    break;
                case /*<fim_suffix> 0x40:
                    type = GroupAddressEvent.Type.GROUP_RESPONSE;
                    break;
                case /* GROUP_WRITE */ 0x80:
                    type = GroupAddressEvent.Type.GROUP_WRITE;
                    break;
            }

            GroupAddressEvent gae = new GroupAddressEvent(e.getSourceAddr().toString(), destination, type, e.getASDU());

            if (<fim_middle>", GROUP_RESPONSE */, GROUP_RESPONSE */
"<fim_prefix>rs = listeners;
        this.globalGroupAddressListener = globalGroupAddressListener;
    }

    private void convertAndForward(ProcessEvent e) {
        try {
            // convert
            String destination = e.getDestination().toString();
            GroupAddressEvent.Type type = GroupAddressEvent.Type.UNDEFINED;
            switch (e.getServiceCode()) {
                case /*<fim_suffix> 0x0:
                    type = GroupAddressEvent.Type.GROUP_READ;
                    break;
                case /* GROUP_RESPONSE */ 0x40:
                    type = GroupAddressEvent.Type.GROUP_RESPONSE;
                    break;
                case /* GROUP_WRITE */ 0x80:
                    type = GroupAddressEvent.Type.GROUP_WRITE;
                    break;
            }

  <fim_middle>", GROUP_READ */, GROUP_WRITE */
"<fim_prefix>/*<fim_suffix>

package com.actelion.research.util.ui.scanner;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

/**
 * This class implements the communication layer between the applicati<fim_middle>","
 * Spirit, a study/biosample management tool for research.
 * Copyright (C) 2018 Idorsia Pharmaceuticals Ltd., Hegenheimermattweg 91,
 * CH-4123 Allschwil, Switzerland.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 * @author Joel Freyss
 */","*
 * This class implements the communication layer between the applicatin and the scanner.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>f not, see <http://www.gnu.org/licenses/>
 *
 * @author Joel Freyss
 */

package com.actelion.research.util.ui.scanner;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class IcChannel {
    private Socket clientSocket;
    private String ipAddress;
    private int port = 8001;
    private CmdState cmdState = CmdState.UNKNOWN;
    private List<String> response = new ArrayList<>();

    public enum CmdState {
        UNKNOWN,
        WAITING_ACK,
        PROCESSING,
        SUCCESS,
        FAIL
    }

    /**
     * Constructor that is default<fim_middle>","
 * This class implements the communication layer between the application and the Fluidx Reader
 * it is using TCP socket communication
 *
 * The response of the Reader Intellicode software essentially have a start/middle & end. The sequence is..
 *      1) ack.  Command is prefixed with ack: to acknowledge the command. E.g, ack:list acknowldges the list command
 *      2) msg: During processing,  messages are recieved with this prefix
 *      3) warning: During processing,  warning messages are recieved with this prefix
 *      4) success: Command is prefixed with sucess: when the command was successful. E.g, success:list for a successful list command
 *      5) fail: Command is prefixed with fail: when the command failed. E.g, fail:list for a failed list command
 *
 * @author Karim Mankour
 */","
 * This class is used to communicate with the IcChannel server.
 *
 * @author Joel Freyss
 */"
"<fim_prefix>N,
        WAITING_ACK,
        PROCESSING,
        SUCCESS,
        FAIL
    }

    /**
     * Constructor that is defaulted the host ip address to the localhost one
     */
    public IcChannel() {
        try {
            this.ipAddress = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
    }

    /**<fim_suffix>
    public void send(String command) {
        try {
            Thread.sleep(2000);
            cmdState = CmdState.WAITING_ACK;
            clientSocket = new Socket(ipAddress, port);
            PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

         <fim_middle>","
     * Sends Intellicode command passed as a parameter to the Intellicode driver
     * that is listening on a specific port number
     * @param command
     */","
     * Constructor that takes the host ip address as a parameter
     * @param ipAddress
     */"
"<fim_prefix>and
 *
 * @author Karim Mankour
 */
public class IcChannel {
    private Socket clientSocket;
    private String ipAddress;
    private int port = 8001;
    private CmdState cmdState = CmdState.UNKNOWN;
    private List<String> response = new ArrayList<>();

    public enum CmdState {
        UNKNOWN,
        WAITING_ACK,
        PROCESSING,
        SUCCESS,
        FAIL
    }

    /**<fim_suffix>
    public IcChannel() {
        try {
            this.ipAddress = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
    }

    /**
     * Sends Intellicode command passed as a parameter to the Intellicode driver
     * that is listening on a specific port number
     * @param command
     */
    public <fim_middle>","
     * Constructor that is defaulted the host ip address to the localhost one
     */","
     * Constructor
     */"
"<fim_prefix>/*<fim_suffix>

package com.mucommander.ui.action.impl;

import com.mucommander.conf.TcConfigurations;
import com.mucommander.conf.TcPreference;
import com.mucommander.conf.TcPreferences;
import com.mucommander.utils.text.Translator;
import com.mucommander.ui.action.AbstractActionDescriptor;
import com.mucommander.ui.action.ActionCategory;
import com.mucommander.ui.action.ActionDescriptor;<fim_middle>","
 * This file is part of muCommander, http://www.mucommander.com
 * Copyright (C) 2002-2012 Maxence Bernard
 *
 * muCommander is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * muCommander is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * @author <NAME> (www.mushdi.org)
 */"
"<fim_prefix>;
import com.mucommander.utils.text.Translator;
import com.mucommander.ui.action.AbstractActionDescriptor;
import com.mucommander.ui.action.ActionCategory;
import com.mucommander.ui.action.ActionDescriptor;
import com.mucommander.ui.action.TcAction;
import com.mucommander.ui.main.MainFrame;

import javax.swing.JPanel;
import javax.swing.KeyStroke;
import java.util.Map;

/**<fim_suffix>
public class ToggleToolBarAction extends TcAction {

    private ToggleToolBarAction(MainFrame mainFrame, Map<String, Object> properties) {
        super(mainFrame, properties);
        updateLabel(TcConfigurations.getPreferences().getVariable(TcPreference.TOOLBAR_VISIBLE, TcPreferences.DEFAULT_TOOLBAR_VISIBLE));
    }

    private void updateLabel(boolean visible) {
        <fim_middle>","
 * This action shows/hides the current MainFrame's {@link com.mucommander.ui.main.toolbar.ToolBar} depending on its
 * current visible state: if it is visible, hides it, if not shows it.
 *
 * <p>This action's label will be updated to reflect the current visible state.
 *
 * <p>Each time this action is executed, the new current visible state is stored in the configuration so that
 * new MainFrame windows will use it to determine whether the ToolBar has to be made visible or not.
 *
 * @author Maxence Bernard
 */","
 * @author <NAME> (muhammad.muaaz)
 */"
"<fim_prefix>package gov.hhs.aspr.ms.taskit.protobuf.translation.specs;

import com.google.protobuf.Int64Value;

import gov.hhs.aspr.ms.taskit.protobuf.translation.ProtobufTranslationSpec;

/**<fim_suffix>
public class LongTranslationSpec extends ProtobufTranslationSpec<Int64Value, Long> {

    @Override
    protected Long translateInputObject(Int64Value inputObject) {
        return inputObject.getValue();
    }

    @Override
    protected Int64Value translateAppObject(Long appObject) {
        return Int64Value.of(appObject);
    }

    @Override
    public Class<Long> getAppObjectCl<fim_middle>","
 * TranslationSpec that defines how to translate from any Java Long to a Protobuf
 * {@link Int64Value} type and vice versa.
 */","
 * Translation specification for Long.
 *
 * @author <NAME> <EMAIL>
 */"
"<fim_prefix>/*<fim_suffix>

package com.stoneapp.ourvlemoodle2.util;

import java.util.Calendar;

public class TimeUtils {
    public static String getTime(int time) {
        Calendar cal = Calendar.getInstance(); //create a new calendar instance
        Calendar cal_current = Calendar.getInstance();

        cal.setTimeInMillis((long)time * 1000); //set calendar date to the time of the event
        cal_curre<fim_middle>","
 * Copyright 2016 Matthew Stone and Romario Maxwell.
 *
 * This file is part of OurVLE.
 *
 * OurVLE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * OurVLE is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OurVLE.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 2017-02-10.
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.openvsx.adapter;

import org.springframework.http.ResponseEntity;
import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;

public interface IVSCodeService {

    ExtensionQueryResult extensionQuery(ExtensionQueryParam param, int defaultPageSize);

    ResponseEntity<StreamingResponseBody> browse(String namespaceName, String extensionName<fim_middle>"," ******************************************************************************
 * Copyright (c) 2022 Precies. Software and others
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * ****************************************************************************** */","
 * @author <NAME>
 * @since 2020-06-01
 */"
"<fim_prefix>/*<fim_suffix>
package org.eigenbase.enki.codegen;

import javax.jmi.model.*;

import org.eigenbase.enki.util.*;

/**
 * AssociationInfo contains commonly used information about a MOF 
 * {@link Association} and and its {@link AssociationEnd} instances.
 * 
 * @author Stephan Zuercher
 */
public interface AssociationInfo
{
    /**
     * Retrieves the {@link Association} this object describes.
     <fim_middle>","
// $Id$
// Enki generates and implements the JMI and MDR APIs for MOF metamodels.
// Copyright (C) 2007 The Eigenbase Project
// Copyright (C) 2007 SQLstream, Inc.
// Copyright (C) 2007 Dynamo BI Corporation
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/","*
 * AssociationInfo contains commonly used information about a MOF 
 * {@link Association} and and its {@link AssociationEnd} instances.
 * 
 * @author Stephan Zuercher
 */"
"<fim_prefix>link Association} as a String array.  The identifiers are
     * the end names mangled to be valid Java identifiers.
     */
    public String[] getEndIdentifiers();
    
    /**
     * Retrieves the name of the given {@link AssociationEnd} of the
     * describe {@link Association}.
     * 
     * @param end 0-based end index
     */
    public String getEndName(int end);
    
    /**<fim_suffix>
    public boolean isSingle(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * has ordered multiplicity.
     */
    public boolean isOrdered(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * is changeable.
     */
    public boolean isChangeable(int end);
    
    /**
     * T<fim_middle>","
     * Tests whether the selected end of the described {@link Association}
     * has an upper multiplicity bound of exactly 1.
     */","
     * Tests whether the selected end of the described {@link Association}
     * is a multiplicity of one.
     */"
"<fim_prefix>.
     */
    public boolean isSingle(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * has ordered multiplicity.
     */
    public boolean isOrdered(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * is changeable.
     */
    public boolean isChangeable(int end);
    
    /**<fim_suffix>
    public boolean isComposite(int end);
}

// End AssociationInfo.java
<fim_middle>","
     * Tests whether the selected end of the described {@link Association}
     * has composite aggregation semantics.
     */","
     * Tests whether the selected end of the described {@link Association}
     * is composite.
     */"
"<fim_prefix>onEnd} instances.
 * 
 * @author Stephan Zuercher
 */
public interface AssociationInfo
{
    /**
     * Retrieves the {@link Association} this object describes.
     */
    public Association getAssoc();
    
    /**
     * Retrieves the name of the association proxy interface for the described
     * {@link Association}. 
     */
    public String getAssocInterfaceName();
    
    /**<fim_suffix>
    public AssociationKindEnum getKind();
    
    /**
     * Retrieves the base name for the described {@link Association}.  The
     * base name is the association's simple name.
     */
    public String getBaseName();
    
    /**
     * Retrieves the specified {@link AssociationEnd} of the described
     * {@link Association}.
     * 
     * @param end 0-based index of the end to<fim_middle>","
     * Retrieves simplified multiplicity of the described {@link Association}. 
     */","
     * Retrieves the kind of the association.
     */"
"<fim_prefix>n, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/
package org.eigenbase.enki.codegen;

import javax.jmi.model.*;

import org.eigenbase.enki.util.*;

/**
 * AssociationInfo contains commonly used information about a MOF 
 * {@link Association} and and its {@link AssociationEnd} instances.
 * 
 * @author Stephan Zuercher
 */
public interface AssociationInfo
{
    /**<fim_suffix>
    public Association getAssoc();
    
    /**
     * Retrieves the name of the association proxy interface for the described
     * {@link Association}. 
     */
    public String getAssocInterfaceName();
    
    /**
     * Retrieves simplified multiplicity of the described {@link Association}. 
     */
    public AssociationKindEnum getKind();
    
    /**
     * Retrieves the bas<fim_middle>","
     * Retrieves the {@link Association} this object describes.
     */","
     * Retrieves the {@link Association} instance. 
     */"
"<fim_prefix>.jmi.model.*;

import org.eigenbase.enki.util.*;

/**
 * AssociationInfo contains commonly used information about a MOF 
 * {@link Association} and and its {@link AssociationEnd} instances.
 * 
 * @author Stephan Zuercher
 */
public interface AssociationInfo
{
    /**
     * Retrieves the {@link Association} this object describes.
     */
    public Association getAssoc();
    
    /**<fim_suffix>
    public String getAssocInterfaceName();
    
    /**
     * Retrieves simplified multiplicity of the described {@link Association}. 
     */
    public AssociationKindEnum getKind();
    
    /**
     * Retrieves the base name for the described {@link Association}.  The
     * base name is the association's simple name.
     */
    public String getBaseName();
    
    /**
     * R<fim_middle>","
     * Retrieves the name of the association proxy interface for the described
     * {@link Association}. 
     */","
     * Retrieves the name of the interface that is implemented by the 
     * described {@link Association}.
    "
"<fim_prefix>object describes.
     */
    public Association getAssoc();
    
    /**
     * Retrieves the name of the association proxy interface for the described
     * {@link Association}. 
     */
    public String getAssocInterfaceName();
    
    /**
     * Retrieves simplified multiplicity of the described {@link Association}. 
     */
    public AssociationKindEnum getKind();
    
    /**<fim_suffix>
    public String getBaseName();
    
    /**
     * Retrieves the specified {@link AssociationEnd} of the described
     * {@link Association}.
     * 
     * @param end 0-based index of the end to retrieve
     * @return the selected AssociationEnd
     */
    public AssociationEnd getEnd(int end);
    
    /**
     * Retrieves the name of the class instance interface for the given
<fim_middle>","
     * Retrieves the base name for the described {@link Association}.  The
     * base name is the association's simple name.
     */","
     * Retrieves the name of the base class of the described
     * {@link Association}.
     */"
"<fim_prefix> 
     */
    public String getAssocInterfaceName();
    
    /**
     * Retrieves simplified multiplicity of the described {@link Association}. 
     */
    public AssociationKindEnum getKind();
    
    /**
     * Retrieves the base name for the described {@link Association}.  The
     * base name is the association's simple name.
     */
    public String getBaseName();
    
    /**<fim_suffix>
    public AssociationEnd getEnd(int end);
    
    /**
     * Retrieves the name of the class instance interface for the given
     * end of the described {@link Association}.
     */
    public String getEndType(int end);
    
    /**
     * Retrieves the names of the class instance interfaces for both ends of 
     * the described {@link Association} as a String array.
     */
    <fim_middle>","
     * Retrieves the specified {@link AssociationEnd} of the described
     * {@link Association}.
     * 
     * @param end 0-based index of the end to retrieve
     * @return the selected AssociationEnd
     */","
     * Retrieves the name of the class instance interface for the given
     * end of the described {@link Association}.
     */"
"<fim_prefix>ciation} as a String array.
     */
    public String[] getEndTypes();
    
    /**
     * Retrieves an identifier for the given {@link AssociationEnd} of the 
     * described {@link Association}.  The identifier is the end's name 
     * mangled to be a valid Java identifier.
     * 
     * @param end 0-based end index
     */
    public String getEndIdentifier(int end);
    
    /**<fim_suffix>
    public String[] getEndIdentifiers();
    
    /**
     * Retrieves the name of the given {@link AssociationEnd} of the
     * describe {@link Association}.
     * 
     * @param end 0-based end index
     */
    public String getEndName(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * has an upper multiplicity bound of exactl<fim_middle>","
     * Retrieves identifiers for the {@link AssociationEnd ends} of the 
     * described {@link Association} as a String array.  The identifiers are
     * the end names mangled to be valid Java identifiers.
     */","
     * Retrieves an identifier for the given {@link AssociationEnd} of the 
     * described {@link Association}.  The identifier is the end's name 
     * mangled to be a valid Java identifier.
     * 
 "
"<fim_prefix>etrieves the name of the given {@link AssociationEnd} of the
     * describe {@link Association}.
     * 
     * @param end 0-based end index
     */
    public String getEndName(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * has an upper multiplicity bound of exactly 1.
     */
    public boolean isSingle(int end);
    
    /**<fim_suffix>
    public boolean isOrdered(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * is changeable.
     */
    public boolean isChangeable(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * has composite aggregation semantics.
     */
    public boolean isComposite(int end);
}

// E<fim_middle>","
     * Tests whether the selected end of the described {@link Association}
     * has ordered multiplicity.
     */","
     * Tests whether the selected end of the described {@link Association}
     * has an upper multiplicity bound of at least 1."
"<fim_prefix>getEndName(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * has an upper multiplicity bound of exactly 1.
     */
    public boolean isSingle(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * has ordered multiplicity.
     */
    public boolean isOrdered(int end);
    
    /**<fim_suffix>
    public boolean isChangeable(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * has composite aggregation semantics.
     */
    public boolean isComposite(int end);
}

// End AssociationInfo.java
<fim_middle>","
     * Tests whether the selected end of the described {@link Association}
     * is changeable.
     */","
     * Tests whether the selected end of the described {@link Association}
     * has unordered multiplicity.
    "
"<fim_prefix>ciation}.  The
     * base name is the association's simple name.
     */
    public String getBaseName();
    
    /**
     * Retrieves the specified {@link AssociationEnd} of the described
     * {@link Association}.
     * 
     * @param end 0-based index of the end to retrieve
     * @return the selected AssociationEnd
     */
    public AssociationEnd getEnd(int end);
    
    /**<fim_suffix>
    public String getEndType(int end);
    
    /**
     * Retrieves the names of the class instance interfaces for both ends of 
     * the described {@link Association} as a String array.
     */
    public String[] getEndTypes();
    
    /**
     * Retrieves an identifier for the given {@link AssociationEnd} of the 
     * described {@link Association}.  The identifier is the end'<fim_middle>","
     * Retrieves the name of the class instance interface for the given
     * end of the described {@link Association}.
     */","
     * Retrieves the name of the class instance interface for the specified 
     * {@link AssociationEnd} of the described {@link Association}.
 "
"<fim_prefix>described
     * {@link Association}.
     * 
     * @param end 0-based index of the end to retrieve
     * @return the selected AssociationEnd
     */
    public AssociationEnd getEnd(int end);
    
    /**
     * Retrieves the name of the class instance interface for the given
     * end of the described {@link Association}.
     */
    public String getEndType(int end);
    
    /**<fim_suffix>
    public String[] getEndTypes();
    
    /**
     * Retrieves an identifier for the given {@link AssociationEnd} of the 
     * described {@link Association}.  The identifier is the end's name 
     * mangled to be a valid Java identifier.
     * 
     * @param end 0-based end index
     */
    public String getEndIdentifier(int end);
    
    /**
     * Retrieves identifiers for t<fim_middle>","
     * Retrieves the names of the class instance interfaces for both ends of 
     * the described {@link Association} as a String array.
     */","
     * Retrieves the names of the class instance interfaces for the given
     * ends of the described {@link Association}.
     */"
"<fim_prefix> the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/
package org.eigenbase.enki.codegen;

import javax.jmi.model.*;

import org.eigenbase.enki.util.*;

/**<fim_suffix>
public interface AssociationInfo
{
    /**
     * Retrieves the {@link Association} this object describes.
     */
    public Association getAssoc();
    
    /**
     * Retrieves the name of the association proxy interface for the described
     * {@link Association}. 
     */
    public String getAssocInterfaceName();
    
    /**
     * Retrieves simplified multiplicity of the desc<fim_middle>","
 * AssociationInfo contains commonly used information about a MOF 
 * {@link Association} and and its {@link AssociationEnd} instances.
 * 
 * @author Stephan Zuercher
 */","
 * Information about an association.
 *
 * @author jhyde
 * @version $Id$
 * @since Mar 2, 2006
 */"
"<fim_prefix>tifier.
     * 
     * @param end 0-based end index
     */
    public String getEndIdentifier(int end);
    
    /**
     * Retrieves identifiers for the {@link AssociationEnd ends} of the 
     * described {@link Association} as a String array.  The identifiers are
     * the end names mangled to be valid Java identifiers.
     */
    public String[] getEndIdentifiers();
    
    /**<fim_suffix>
    public String getEndName(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * has an upper multiplicity bound of exactly 1.
     */
    public boolean isSingle(int end);
    
    /**
     * Tests whether the selected end of the described {@link Association}
     * has ordered multiplicity.
     */
    public boolean isOrdered(int<fim_middle>","
     * Retrieves the name of the given {@link AssociationEnd} of the
     * describe {@link Association}.
     * 
     * @param end 0-based end index
     */","
     * Retrieves the name of the selected end of the described {@link Association}.
     * 
     * @param end 0-based end index
     */"
"<fim_prefix>
    
    /**
     * Retrieves the name of the class instance interface for the given
     * end of the described {@link Association}.
     */
    public String getEndType(int end);
    
    /**
     * Retrieves the names of the class instance interfaces for both ends of 
     * the described {@link Association} as a String array.
     */
    public String[] getEndTypes();
    
    /**<fim_suffix>
    public String getEndIdentifier(int end);
    
    /**
     * Retrieves identifiers for the {@link AssociationEnd ends} of the 
     * described {@link Association} as a String array.  The identifiers are
     * the end names mangled to be valid Java identifiers.
     */
    public String[] getEndIdentifiers();
    
    /**
     * Retrieves the name of the given {@link AssociationE<fim_middle>","
     * Retrieves an identifier for the given {@link AssociationEnd} of the 
     * described {@link Association}.  The identifier is the end's name 
     * mangled to be a valid Java identifier.
     * 
     * @param end 0-based end index
     */","
     * Retrieves identifiers for the {@link AssociationEnd ends} of the 
     * described {@link Association} as a String array.  The identifiers are
     * the end names mangled to be valid Java identifiers.
     */"
"<fim_prefix>/**<fim_suffix>

package org.eclipse.gmf.runtime.diagram.ui.internal.commands;

import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.graphics.Image;

/**
 * A label provider that provides the name and image for 
 * <code>IElementType</code> objects. 
 * 
 * <fim_middle>","****************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/","
 * @generated
 */"
"<fim_prefix>al API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.diagram.ui.internal.commands;

import org.eclipse.gmf.runtime.common.ui.services.icon.IconService;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.graphics.Image;

/**<fim_suffix>
public class ElementTypeLabelProvider
	extends LabelProvider {

	/**
	 * Retrieves the image for <code>IElementType</code> objects using
	 * the <code>IconService</code>.
	 * @see org.eclipse.jface.viewers.ILabelProvider#getImage(java.lang.Object)
	 */
	public Image getImage(Object object) {
		if (object instanceof IElementType) {
			return IconService.getInstance()
				.getIcon((IEle<fim_middle>","
 * A label provider that provides the name and image for 
 * <code>IElementType</code> objects. 
 * 
 * @author cmahoney
 */","
 * A label provider for <code>IElementType</code> objects.
 * 
 * @author <NAME>
 * @author <NAME>
 */"
"<fim_prefix>untime.common.ui.services.icon.IconService;
import org.eclipse.gmf.runtime.emf.type.core.IElementType;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.graphics.Image;

/**
 * A label provider that provides the name and image for 
 * <code>IElementType</code> objects. 
 * 
 * @author cmahoney
 */
public class ElementTypeLabelProvider
	extends LabelProvider {

	/**<fim_suffix>
	public Image getImage(Object object) {
		if (object instanceof IElementType) {
			return IconService.getInstance()
				.getIcon((IElementType) object);
		}
		return null;
	}

	/**
	 * Uses <code>IElementType.getDisplayName()</code> for the text.
	 * @see org.eclipse.jface.viewers.ILabelProvider#getText(java.lang.Object)
	 */
	public String getText(Object object) {
		if (object instan<fim_middle>","
	 * Retrieves the image for <code>IElementType</code> objects using
	 * the <code>IconService</code>.
	 * @see org.eclipse.jface.viewers.ILabelProvider#getImage(java.lang.Object)
	 */","
	 * Uses <code>IElementType.getIcon()</code> for the image.
	 * @see org.eclipse.jface.viewers.ILabelProvider#getImage(java.lang.Object)
	 */"
"<fim_prefix>s LabelProvider {

	/**
	 * Retrieves the image for <code>IElementType</code> objects using
	 * the <code>IconService</code>.
	 * @see org.eclipse.jface.viewers.ILabelProvider#getImage(java.lang.Object)
	 */
	public Image getImage(Object object) {
		if (object instanceof IElementType) {
			return IconService.getInstance()
				.getIcon((IElementType) object);
		}
		return null;
	}

	/**<fim_suffix>
	public String getText(Object object) {
		if (object instanceof IElementType) {
			return ((IElementType) object).getDisplayName();
		} else {
			return object.toString();
		}
	}
}
<fim_middle>","
	 * Uses <code>IElementType.getDisplayName()</code> for the text.
	 * @see org.eclipse.jface.viewers.ILabelProvider#getText(java.lang.Object)
	 */","
	 * Retrieves the text for <code>IElementType</code> objects.
	 * @see org.eclipse.jface.viewers.ILabelProvider#getText(java.lang.Object)
	 */"
"<fim_prefix>/*<fim_suffix>
package io.lighty.netconf.device.notification;

import com.google.common.collect.ImmutableSet;
import io.lighty.netconf.device.NetconfDevice;
import io.lighty.netconf.device.NetconfDeviceBuilder;
import io.lighty.netconf.device.notification.processors.TriggerNotificationProcessor;
import java.util.Set;
import org.opendaylight.yangtools.binding.meta.YangModuleInfo;
import org.slf4j.Log<fim_middle>","
 * Copyright (c) 2020 PANTHEON.tech s.r.o. All Rights Reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at https://www.eclipse.org/legal/epl-v10.html
 */","*
 * Created by <NAME> on 18.11.15.
 */"
"<fim_prefix>/*<fim_suffix>
package org.sonarlint.intellij.util;

import java.awt.Component;
import java.awt.Graphics;
import javax.swing.Icon;

public class CompoundIcon implements Icon {
  public enum Axis {
    X_AXIS,
    Y_AXIS,
    Z_AXIS
  }

  public static final float TOP = 0.0f;
  public static final float LEFT = 0.0f;
  public static final float CENTER = 0.5f;
  public static final float BOTTOM = 1.0f<fim_middle>","
 * SonarLint for IntelliJ IDEA
 * Copyright (C) 2015-2024 SonarSource
 * sonarlint@sonarsource.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */","*
 * @author <NAME>
 */"
"<fim_prefix>package com.github.angerona.fw.example.gui;
import com.github.angerona.fw.gui.view.BeliefbaseView;

/**<fim_suffix>
public class ExampleBeliefbaseComponent extends BeliefbaseView {

	/** kill warning */
	private static final long serialVersionUID = -3672910665043834161L;


}
<fim_middle>","
 * Small ""Enhancement"" to the beliefbase component view, setting the title ""DUMMY"" ;-)
 * This class helps to test the functionality of the dynamic creation of belief base tabs and so on.
 * 
 * @author Tim Janus
 */","
 * 
 * @author angerona
 *
 */"
"<fim_prefix>kage com.github.angerona.fw.example.gui;
import com.github.angerona.fw.gui.view.BeliefbaseView;

/**
 * Small ""Enhancement"" to the beliefbase component view, setting the title ""DUMMY"" ;-)
 * This class helps to test the functionality of the dynamic creation of belief base tabs and so on.
 * 
 * @author Tim Janus
 */
public class ExampleBeliefbaseComponent extends BeliefbaseView {

	/**<fim_suffix>
	private static final long serialVersionUID = -3672910665043834161L;


}
<fim_middle>", kill warning */,
"<fim_prefix>/*<fim_suffix>
package org.emonocot.model.marshall.json;

import java.io.IOException;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import org.emonocot.model.convert.StringToPermissionConverter;
import org.springframework.core.co<fim_middle>","
 * This is eMonocot, a global online biodiversity information resource.
 *
 * Copyright © 2011–2015 The Board of Trustees of the Royal Botanic Gardens, Kew and The University of Oxford
 *
 * eMonocot is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * eMonocot is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * The complete text of the GNU Affero General Public License is in the source repository as the file
 * ‘COPYING’.  It is also available from <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>xml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import org.emonocot.model.convert.StringToPermissionConverter;
import org.springframework.core.convert.converter.Converter;
import org.springframework.security.acls.model.Permission;

/**<fim_suffix>
public class PermissionDeserializer extends JsonDeserializer<Permission> {

	/**
	 *
	 */
	private Converter<String, Permission> converter = new StringToPermissionConverter();

	@Override
	public final Permission deserialize(final JsonParser jsonParser,
			final DeserializationContext deserializationContext)
					throws IOException {
		String permission = jsonParser.getText();
		try {<fim_middle>","
 *
 * @author ben
 *
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>rg.camunda.bpm.modeler.ui.features.label;

import org.camunda.bpm.modeler.core.utils.ConnectionLabelUtil;
import org.camunda.bpm.modeler.core.utils.LabelUtil;
import org.eclipse.graphiti.features.IFeatureProvider;
import org.eclipse.graphiti.features.context.IAddContext;
import org.eclipse.graphiti.mm.pictograms.Connection;
import org.eclipse.graphiti.mm.pictograms.ContainerShape;

/**<fim_suffix>
public class AddConnectionLabelFeature extends AbstractAddLabelFeature {

	public AddConnectionLabelFeature(IFeatureProvider fp) {
		super(fp);
	}
	
	@Override
	protected void postAddHook(IAddContext context, ContainerShape newLabelShape) {
		super.postAddHook(context, newLabelShape);

		Connection connection = (Connection) LabelUtil.getNonLabelPictogramElement(newLabelShape, getDiagr<fim_middle>","
 * Special add feature for connection labels
 * 
 * @author nico.rehwaldt
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.jpt.jpa.ui.internal.details;

import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jpt.jpa.core.context.JpaContextModel;
import org.eclipse.jpt.jpa.ui.JptJpaUiImages;
import org.eclipse.jpt.jpa.ui.details.MappingUiDefinition;

public abstract class AbstractMappingUiDefinition
	implements MappingUiDefinition
{
	protected AbstractMappingUiDefinition(<fim_middle>","*****************************************************************************
 * Copyright (c) 2010, 2013 Oracle. All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0, which accompanies this distribution
 * and is available at https://www.eclipse.org/legal/epl-2.0/.
 *
 * Contributors:
 *     Oracle - initial API and implementation
 ******************************************************************************/","
 * Copyright (c) 2018-2019 <NAME>.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable"
"<fim_prefix>/*<fim_suffix>
package org.jboss.test.authentication.jaas;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.security.Principal;
import java.util.Set;

import javax.security.auth.Subject;
import javax.security.auth.callback.Callback;
import javax.security.auth.message.callback.CallerPrincipalCallback;
i<fim_middle>","
 * JBoss, Home of Professional Open Source.
 * Copyright 2008, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors. 
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */","*
 * @author <a href=""mailto:<EMAIL>""><NAME></a>
 */"
"<fim_prefix>.*;
import org.jboss.security.auth.callback.JASPICallbackHandler;
import org.jboss.security.identity.Identity;
import org.jboss.security.identity.RoleGroup;
import org.jboss.security.identity.extensions.CredentialIdentity;
import org.jboss.security.identity.plugins.SimpleRole;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

/**<fim_suffix>
public class JASPICallbackHandlerUnitTestCase
{
   private Subject subject = new Subject();
   
   private Principal principal = new SimplePrincipal( ""somePrincipal"" );
   
   private Object cred = new char[] { 't', 'e' };
   
   @BeforeClass
   public static void setup() throws Exception
   { 
      SecurityContext sc = SecurityContextFactory.createSecurityContext( ""test"" );  
      <fim_middle>","
 * SECURITY-508: JASPI callback handler
 * @author Anil.Saldhana@redhat.com
 * @since May 12, 2010
 */","
 * @author <a href=""mailto:<EMAIL>""><NAME></a>
 * @version $Revision: 1.1 $
 */"
"<fim_prefix>/*<fim_suffix>
package edu.utexas.cs.tactex.tariffoptimization;

import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;

import org.apache.commons.math3.linear.ArrayRealVector;
import org.powertac.common.Broker;
import org.powertac.common.CustomerInfo;
import org.powertac.common.TariffSpecification;

import edu.utexas.cs.tactex.interfaces.ContextManager;
import edu.utexas.cs.tact<fim_middle>","
 * TacTex - a power trading agent that competed in the Power Trading Agent Competition (Power TAC) www.powertac.org
 * Copyright (c) 2013-2016 Daniel Urieli and Peter Stone {urieli,pstone}@cs.utexas.edu               
 *
 *
 * This file is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This file is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>ons.math3.linear.ArrayRealVector;
import org.powertac.common.Broker;
import org.powertac.common.CustomerInfo;
import org.powertac.common.TariffSpecification;

import edu.utexas.cs.tactex.interfaces.ContextManager;
import edu.utexas.cs.tactex.interfaces.CostCurvesPredictor;
import edu.utexas.cs.tactex.interfaces.MarketManager;
import edu.utexas.cs.tactex.interfaces.TariffOptimizer;

/**<fim_suffix>
public class TariffOptimizerFirstTimeDifferent implements TariffOptimizer {
  
  private boolean firstTime = true;

  private TariffOptimizer tariffOptimizerFirstTime;
  private TariffOptimizer tariffOptimizerSecondToLastTime;
  

  public TariffOptimizerFirstTimeDifferent(
      // parameters for composite
      TariffOptimizer tariffOptimizerFirstTime,
      TariffOptimizer tariffOp<fim_middle>","
 * Implements a composite pattern that in the first time uses
 * tariffOptimizerFirstTime, and from then on uses
 * tariffOptimizerSecondToLastTime
 * @author urieli
 *
 */","
 * This class implements the TariffOptimizer interface. It is used to
 * optimize the tariff for the first time.
 * 
 * @author <NAME>
 * @version 0.1
 * @"
"<fim_prefix>/*<fim_suffix>

package com.shatteredpixel.shatteredpixeldungeon.windows;

import com.shatteredpixel.shatteredpixeldungeon.Assets;
import com.shatteredpixel.shatteredpixeldungeon.Badges;
import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass;
import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass;
import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
im<fim_middle>","
 * Pixel Dungeon
 * Copyright (C) 2012-2015 Oleg Dolya
 *
 * Shattered Pixel Dungeon
 * Copyright (C) 2014-2023 Evan Debenham
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * Created by <NAME> on 9/25/2018.
 */"
"<fim_prefix>entities.CommandArguments;
import thermostat.util.entities.CommandData;
import thermostat.util.enumeration.CommandType;
import thermostat.util.enumeration.DBActionType;
import thermostat.util.enumeration.EmbedType;
import thermostat.util.enumeration.MenuType;

import javax.annotation.CheckReturnValue;
import javax.annotation.Nonnull;
import java.util.Arrays;
import java.util.List;

/**<fim_suffix>
public class MonitorCommand implements Command {
    private static final Logger lgr = LoggerFactory.getLogger(MonitorCommand.class);
    private final CommandData data;

    public MonitorCommand(@Nonnull GuildMessageReceivedEvent data, @Nonnull List<String> arguments, @Nonnull String prefix) {
        this.data = new CommandData(data, arguments, prefix);

        if (this.data.param<fim_middle>","
 * Adds channels to the database provided in
 * db.properties, upon user running the
 * command.
 */","
 * @author <NAME>
 */"
"<fim_prefix>mandData(data, arguments, prefix);

        if (this.data.parameters == null) {
            ResponseDispatcher.commandFailed(
                    this,
                    Embeds.getEmbed(EmbedType.ERR_INPUT, this.data, ""Invalid switch usage.""),
                    ""Bad arguments."");
            return;
        }

        CommandDispatcher.checkPermissionsAndQueue(this);
    }

    /**<fim_suffix>
    @Override
    public void run() {
        final List<String> channels = data.parameters.get(""c"");
        final List<String> onSwitch = data.parameters.get(""-on"");
        final List<String> offSwitch = data.parameters.get(""-off"");
        final List<String> allSwitch = data.parameters.get(""-all"");

        if (offSwitch == null && onSwitch == null) {
            ResponseDispatche<fim_middle>","
     * Command form: th!monitor
     * Switches:
     * --on
     * --off
     * --all
     * -c [channels/categories]
     */","
     * {@inheritDoc}
     */"
"<fim_prefix>/**<fim_suffix>

package org.eclipse.m2e.core.internal.lifecyclemapping.discovery;

/**
 * Represents lifecycle mapping requirement, i.e.
 * <ul>
 * <li>Mapping for packaging type</li>
 * <li>lifecycleMapping extension</li>
 * <li>Mapping for maven plugin execution</li>
 * <li>projectConfigurator extension</li>
 * </ul>
 */
public interface ILifecycleMappingRequirement {

}
<fim_middle>","*****************************************************************************
 * Copyright (c) 2010 Sonatype, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *      Sonatype, Inc. - initial API and implementation
 *******************************************************************************/","
 * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
 * 
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * The contents of this file are subject to the terms of either the Universal Permissive License
 * v 1.0 as shown at http://oss.oracle.com/licenses/upl
 *
 * or the following license:
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the"
"<fim_prefix>ublic License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *      Sonatype, Inc. - initial API and implementation
 *******************************************************************************/

package org.eclipse.m2e.core.internal.lifecyclemapping.discovery;

/**<fim_suffix>
public interface ILifecycleMappingRequirement {

}
<fim_middle>","
 * Represents lifecycle mapping requirement, i.e.
 * <ul>
 * <li>Mapping for packaging type</li>
 * <li>lifecycleMapping extension</li>
 * <li>Mapping for maven plugin execution</li>
 * <li>projectConfigurator extension</li>
 * </ul>
 */","
 * A requirement for a lifecycle mapping.
 *
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package com.alexandersamtsov.wifidevicesdiscovery;

import android.content.Context;
import android.content.res.AssetManager;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOExcep<fim_middle>","
 *     Copyright (C) 2016  Alexander Samtsov
 *
 *     This file is part of Wifi Devices Discovery.
 *
 *     Wifi Devices Discovery is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Wifi Devices Discovery is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Wifi Devices Discovery.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by alexandersamtsov on 11/12/15.
 */"
"<fim_prefix>/**<fim_suffix>

package com.androguide.honamicontrol.cards;

import android.content.Context;
import android.graphics.Color;
import android.support.v7.app.ActionBarActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.widget.TextView;

import com.androguide.honamicont<fim_middle>","
 * @author Louis Teboul (Androguide)
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","
 * Created by <NAME> on 2015-10-26.
 */"
"<fim_prefix>/*<fim_suffix>
package com.tcvcog.tcvce.util;

import com.tcvcog.tcvce.entities.occupancy.OccPermitApplicationReason;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;

/**
 * Converter to convert between String representations of OccPermitApplicationReason 
 * and object types
 * @autho<fim_middle>","
 * Copyright (C) 2018 Turtle Creek Valley Council of Governments, PA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix> copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.tcvcog.tcvce.util;

import com.tcvcog.tcvce.entities.occupancy.OccPermitApplicationReason;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.convert.Converter;
import javax.faces.convert.FacesConverter;

/**<fim_suffix>
@FacesConverter(value=""occPermitApplicationReasonConverter"")
public class OccPermitApplicationReasonConverter extends EntityConverter implements Converter {
    
    @Override
    public Object getAsObject(FacesContext fc, UIComponent uic, String titleS) {
        
        if(titleS.isEmpty()) {
            return null; 
        }
        
        OccPermitApplicationReason reason = (<fim_middle>","
 * Converter to convert between String representations of OccPermitApplicationReason 
 * and object types
 * @author Dominic Pimpinella
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package com.googlecode.paradox.planner.nodes.comparable;

import com.googlecode.paradox.parser.ScannerPosition;
import com.googlecode.paradox.planner.FieldValueUtils;
import com.googlecode.paradox.planner.context.Context;
import com.googlecode.paradox.planner.nodes.FieldNode;
import com.googlecode.paradox.results.Column;
import com.googlecode.paradox.rowset.ValuesComparator;

import j<fim_middle>","
 * Copyright (c) 2009 Leonardo Alves da Costa
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
 * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any
 * later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public
 * License for more details. You should have received a copy of the GNU General Public License along with this
 * program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>parable;

import com.googlecode.paradox.parser.ScannerPosition;
import com.googlecode.paradox.planner.FieldValueUtils;
import com.googlecode.paradox.planner.context.Context;
import com.googlecode.paradox.planner.nodes.FieldNode;
import com.googlecode.paradox.results.Column;
import com.googlecode.paradox.rowset.ValuesComparator;

import java.sql.SQLException;
import java.util.List;

/**<fim_suffix>
public final class GreaterThanOrEqualsNode extends AbstractComparableNode {

    /**
     * Create a new instance.
     *
     * @param field    the first node.
     * @param last     the last node.
     * @param position the current Scanner position.
     */
    public GreaterThanOrEqualsNode(final FieldNode field, final FieldNode last, final ScannerPosition position) {
        super<fim_middle>","
 * Stores the greater than or equals node.
 *
 * @version 1.7
 * @since 1.6.0
 */","
 * A node that compares two values and returns true if the first is greater than or equals to the second.
 *
 * @author <"
"<fim_prefix>ntext;
import com.googlecode.paradox.planner.nodes.FieldNode;
import com.googlecode.paradox.results.Column;
import com.googlecode.paradox.rowset.ValuesComparator;

import java.sql.SQLException;
import java.util.List;

/**
 * Stores the greater than or equals node.
 *
 * @version 1.7
 * @since 1.6.0
 */
public final class GreaterThanOrEqualsNode extends AbstractComparableNode {

    /**<fim_suffix>
    public GreaterThanOrEqualsNode(final FieldNode field, final FieldNode last, final ScannerPosition position) {
        super("">="", field, last, position);
    }

    @Override
    public boolean evaluate(final Context context, final Object[] row, final List<Column> columnsLoaded)
            throws SQLException {
        final Object value1 = FieldValueUtils.getValue(context, row, <fim_middle>","
     * Create a new instance.
     *
     * @param field    the first node.
     * @param last     the last node.
     * @param position the current Scanner position.
     */","
     * Creates a new greater than or equals node.
     *
     * @param field the field node
     * @param last  the last node
     * @param position the scanner position
     */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.jpt.jpa.eclipselink.core;

/**
 * 
 * 
 * Provisional API: This interface is part of an interim API that is still
 * under development and expected to change significantly before reaching
 * stability. It is available at this early stage to solicit feedback from
 * pioneering adopters on the understanding that any code that uses this API
 * will almost certainly be<fim_middle>","*****************************************************************************
 * Copyright (c) 2008, 2011 Oracle. All rights reserved.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0, which accompanies this distribution
 * and is available at https://www.eclipse.org/legal/epl-2.0/.
 * 
 * Contributors:
 *     Oracle - initial API and implementation
 ******************************************************************************/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>anying materials are made available under the
 * terms of the Eclipse Public License 2.0, which accompanies this distribution
 * and is available at https://www.eclipse.org/legal/epl-2.0/.
 * 
 * Contributors:
 *     Oracle - initial API and implementation
 ******************************************************************************/
package org.eclipse.jpt.jpa.eclipselink.core;

/**<fim_suffix>
@SuppressWarnings(""nls"")
public interface EclipseLinkMappingKeys {

	String BASIC_COLLECTION_ATTRIBUTE_MAPPING_KEY = ""basicCollection"";
	String BASIC_MAP_ATTRIBUTE_MAPPING_KEY = ""basicMap"";
	String TRANSFORMATION_ATTRIBUTE_MAPPING_KEY = ""transformation"";
	String VARIABLE_ONE_TO_ONE_ATTRIBUTE_MAPPING_KEY = ""variableOneToOne"";

	//EclipseLink 2.3 mapping keys
	String STRUCTURE_ATTRIBUTE<fim_middle>","
 * 
 * 
 * Provisional API: This interface is part of an interim API that is still
 * under development and expected to change significantly before reaching
 * stability. It is available at this early stage to solicit feedback from
 * pioneering adopters on the understanding that any code that uses this API
 * will almost certainly be broken (repeatedly) as the API evolves.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package com.joliciel.talismane.lexicon;
<fim_middle>","
 * Interfaces and generic classes for handling lexicons, which are used in
 * Talismane within various tokeniser, pos-tagger and parser features and rules,
 * as well as for certain types of filters (e.g. filters which automatically
 * lowercase known words).
 */","
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>/**<fim_suffix>
package org.datacleaner.result.renderer;

import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.List;

import org.datacleaner.api.RendererBean;
import org.datacleaner.result.Crosstab;
import org.datacleaner.result.CrosstabDimension;
import org.datacleaner.result.CrosstabResult;
import org.datacleaner.result.ResultProduce<fim_middle>","
 * DataCleaner (community edition)
 * Copyright (C) 2014 Free Software Foundation, Inc.
 *
 * This copyrighted material is made available to anyone wishing to use, modify,
 * copy, or redistribute it subject to the terms and conditions of the GNU
 * Lesser General Public License, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this distribution; if not, write to:
 * Free Software Foundation, Inc.
 * 51 Franklin Street, Fifth Floor
 * Boston, MA  02110-1301  USA
 */","
 * 
 * @author <NAME> <<EMAIL>>
 * 
 */"
"<fim_prefix>/**<fim_suffix>
package cutthecrap.utils.striterators;

/**
 * Interface for access to named property values.
 * 
 * @author <a href=""mailto:thompsonbry@users.sourceforge.net"">Bryan Thompson</a>
 */
public interface IPropertySet {

    /**
     * Return the value of a named property.
     * 
     * @param name
     *            The property name.
     *            
     * @return The <fim_middle>","
   Copyright (C) SYSTAP, LLC 2006-2012.  All rights reserved.

   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/","
 * Copyright (c) 2009, <a href=""mailto:thompsonbry@users.sourceforge.net"">Bryan Thompson</a>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 * following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 * disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 * following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of
 * the IIIA-CSIC nor the names of its contributors may be used to endorse or promote products derived from this software
 * without specific prior written permission"
"<fim_prefix>CENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package cutthecrap.utils.striterators;

/**<fim_suffix>
public interface IPropertySet {

    /**
     * Return the value of a named property.
     * 
     * @param name
     *            The property name.
     *            
     * @return The property value.
     */
    Object getProperty(String name);

}
<fim_middle>","
 * Interface for access to named property values.
 * 
 * @author <a href=""mailto:thompsonbry@users.sourceforge.net"">Bryan Thompson</a>
 */","
 * Interface for objects that can be used to set and retrieve properties.
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>ONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package cutthecrap.utils.striterators;

/**
 * Interface for access to named property values.
 * 
 * @author <a href=""mailto:thompsonbry@users.sourceforge.net"">Bryan Thompson</a>
 */
public interface IPropertySet {

    /**<fim_suffix>
    Object getProperty(String name);

}
<fim_middle>","
     * Return the value of a named property.
     * 
     * @param name
     *            The property name.
     *            
     * @return The property value.
     */","
     * Returns the value of the property with the given name.
     * 
     * @param name
     *            the name of the property
     * @return the value of the property with the given name
  "
"<fim_prefix>/*<fim_suffix>

package edu.cuny.cat.valuation;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import org.apache.log4j.Logger;

import edu.cuny.cat.MyTestCase;

/**
 * @author Jinzhong Niu
 * @version $Revision: 1.5 $
 */

public class FixedValuerTest extends MyTestCase {

	static Logger logger = Logger.getLogger(FixedValuerTest.class);

	public Fixed<fim_middle>","
 * JCAT - TAC Market Design Competition Platform
 * Copyright (C) 2006-2010 Jinzhong Niu, Kai Cai
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 */","*
 * @author Jinzhong Niu
 * @version $Revision: 1.5 $
 */"
"<fim_prefix>useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 */

package edu.cuny.cat.valuation;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import org.apache.log4j.Logger;

import edu.cuny.cat.MyTestCase;

/**<fim_suffix>

public class FixedValuerTest extends MyTestCase {

	static Logger logger = Logger.getLogger(FixedValuerTest.class);

	public FixedValuerTest(final String name) {
		super(name);
	}

	public void testValuations() {
		System.out.println(""\n>>>>>>>>>\t "" + ""testValuations() \n"");

		final double value = 50;
		final double delta = 0.000001;
		final FixedValuerGenerator generator = new Fix<fim_middle>","
 * @author Jinzhong Niu
 * @version $Revision: 1.5 $
 */","
 * Unit tests for the FixedValuer class.
 * 
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package fi.helsinki.opintoni.web.rest.privateapi;

import fi.helsinki.opintoni.SpringTest;
import org.junit.Test;

import static fi.helsinki.opintoni.security.SecurityRequestPostProcessors.securityContext;
import static fi.helsinki.opintoni.security.TestSecurityContext.teacherSecurityContext;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
impor<fim_middle>","
 * This file is part of MystudiesMyteaching application.
 *
 * MystudiesMyteaching application is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MystudiesMyteaching application is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MystudiesMyteaching application.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package com.volmit.iris.util.inventorygui;

import com.volmit.iris.util.data.MaterialBlock;
import org.bukkit.Material;

@SuppressWarnings(""ClassCanBeRecord"")
public class UIStaticDecorator implements WindowDecorator {
    private final Element element;

    public UIStaticDecorator(Element element) {
        this.element = element == null ? new UIElement(""bg"").setMaterial(new Materi<fim_middle>","
 * Iris is a World Generator for Minecraft Bukkit Servers
 * Copyright (c) 2022 Arcane Arts (Volmit Software)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","
 * Copyright (C) 2014 Volition, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>reaction.tile.mechanism.TELiquifier;
import com.zerren.chainreaction.utility.CoreUtility;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.init.Items;
import net.minecraft.inventory.ICrafting;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;
import net.minecraftforge.fluids.FluidTank;

/**<fim_suffix>
public class ContainerLiquifier extends ContainerCR {

    public ContainerLiquifier(InventoryPlayer inv, TELiquifier tile) {
        super(tile);

        bindTileInventory(tile);
        bindPlayerInventory(inv, 8, 95);
    }

    private void bindTileInventory(TELiquifier te) {

        int slotIndex = 0;

        this.addSlotToContainer(new SlotLiquidContainer(te, slotIndex++, 130<fim_middle>","
 * Created by Zerren on 5/20/2016.
 */","
 * Created by Zerren on 3/29/2016.
 */"
"<fim_prefix>inal GeometryFactory factory = new GeometryFactory();

	private Polygon poly;

	private double damping = 1.0;

	int[] xpoints;

	int[] ypoints;

	double minX = Double.POSITIVE_INFINITY;

	double minY = Double.POSITIVE_INFINITY;

	double maxX = Double.NEGATIVE_INFINITY;

	double maxY = Double.NEGATIVE_INFINITY;

	private Color customColor;
	
	private List<PositionVector> vertices;

	/**<fim_suffix>
	public PolygonObstacle(List<PositionVector> vertices) {
		this(vertices, 1.0);
	}

	public PolygonObstacle(List<PositionVector> vertices, double damping) {

		if (damping > 1)
			damping = 1;
		if (damping < 0)
			damping = 0;
		this.damping = damping;
		
		rebuildPolygon(vertices);
	}
	
	/**
	 * Returns the vertices this polygon was build with. Modifications
	 * to this list won't a<fim_middle>","
	 * A Polygon that is damping the signal (no link through this obstacle is
	 * possible)
	 * 
	 * @param vertices
	 */","
	 * Creates a new polygon obstacle.
	 * 
	 * @param vertices
	 *            The vertices"
"<fim_prefix>ping the signal (no link through this obstacle is
	 * possible)
	 * 
	 * @param vertices
	 */
	public PolygonObstacle(List<PositionVector> vertices) {
		this(vertices, 1.0);
	}

	public PolygonObstacle(List<PositionVector> vertices, double damping) {

		if (damping > 1)
			damping = 1;
		if (damping < 0)
			damping = 0;
		this.damping = damping;
		
		rebuildPolygon(vertices);
	}
	
	/**<fim_suffix>
	public List<PositionVector> getVertices() {
		return Lists.newArrayList(vertices);
	}
	
	public void rebuildPolygon(List<PositionVector> vertices) {
		assert vertices.size() > 2 : ""You have to specify at least 3 Points"";

		this.vertices = vertices;
		
		this.minX = Double.POSITIVE_INFINITY;
		this.minY = Double.POSITIVE_INFINITY;
		this.maxX = Double.NEGATIVE_INFINITY;
		this.maxY =<fim_middle>","
	 * Returns the vertices this polygon was build with. Modifications
	 * to this list won't affect the obstacle. Use rebuildPolygon() to
	 * restructure the obstacle.
	 * 
	 * @return
	 */","
	 * @return the vertices
	 */"
"<fim_prefix>idsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryCollection;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LineString;
import com.vividsolutions.jts.geom.MultiLineString;
import com.vividsolutions.jts.geom.Polygon;

import de.tud.kom.p2psim.impl.topology.PositionVector;

/**<fim_suffix>
public class PolygonObstacle extends AbstractObstacle {

	private final GeometryFactory factory = new GeometryFactory();

	private Polygon poly;

	private double damping = 1.0;

	int[] xpoints;

	int[] ypoints;

	double minX = Double.POSITIVE_INFINITY;

	double minY = Double.POSITIVE_INFINITY;

	double maxX = Double.NEGATIVE_INFINITY;

	double maxY = Double.NEGATIVE_INFINITY;

	privat<fim_middle>","
 * This Obstacle is build from a list of coordinates that form a Polygon. The
 * coordinates have to be specified in clockwise direction.
 * 
 * @author Bjoern Richerzhagen
 * @version 1.0, 20.03.2012
 */","
 * Obstacle that is a polygon.
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>/*<fim_suffix>

package de.tud.kom.p2psim.impl.topology.obstacles;

import java.awt.Color;
import java.util.List;

import com.google.common.collect.Lists;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.GeometryCollection;
import com.vividsolutions.jts.geom.GeometryFactory;
import com.vividsolutions.jts.geom.LineString;
i<fim_middle>","
 * Copyright (c) 2005-2010 KOM â€“ Multimedia Communications Lab
 *
 * This file is part of PeerfactSim.KOM.
 * 
 * PeerfactSim.KOM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * PeerfactSim.KOM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with PeerfactSim.KOM.  If not, see <http://www.gnu.org/licenses/>.
 *
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix> maxX) {
				maxX = xpoints[i];
			}
			if (ypoints[i] > maxY) {
				maxY = ypoints[i];
			}

			i++;
		}
		poly = factory.createPolygon(factory.createLinearRing(coordinates),
				null);
	}

	public int[] getXPoints() {
		return this.xpoints;
	}
	
	public int[] getYPoints() {
		return this.ypoints;
	}

	@Override
	public boolean intersectsWith(PositionVector a, PositionVector b) {
		/*<fim_suffix>
		double dist = a.distanceTo(b);
		if (a.getX() + dist < minX || a.getX() - dist > maxX
				|| a.getY() + dist < minY || a.getY() - dist > maxY) {
			return false;
		}

		Coordinate[] lineCoords = new Coordinate[]{new Coordinate(a.getX(), a.getY()), new Coordinate(b.getX(), b.getY())};
		return poly.intersects(factory.createLineString(lineCoords));
	}

	@Override
	public boolean conta<fim_middle>","
		 * Adding a bit of greedy decisions, to not always use the poly-methods
		 */","*
		 * TODO: implement this
		 */"
"<fim_prefix>/*<fim_suffix>
package net.raphimc.viaproxy.plugins.events;

import net.raphimc.viaproxy.plugins.events.types.EventCancellable;
import net.raphimc.viaproxy.proxy.session.ProxyConnection;

public class ShouldVerifyOnlineModeEvent extends EventCancellable {

    private final ProxyConnection proxyConnection;

    public ShouldVerifyOnlineModeEvent(final ProxyConnection proxyConnection) {
        this.<fim_middle>","
 * This file is part of ViaProxy - https://github.com/RaphiMC/ViaProxy
 * Copyright (C) 2021-2024 RK_01/RaphiMC and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by LonelyEnvoy on 2017/7/31.
 */"
"<fim_prefix>package co.flyver.flyvercore.microcontrollers;

import ioio.lib.api.exception.ConnectionLostException;

/**<fim_suffix>
public interface MicroController {
    /**
     * Initialization Setup
     * @throws ConnectionLostException
     */
    public void setup() throws  ConnectionLostException;

    /**
     * Loops the microcontroller.
     * @throws InterruptedException
     * @throws ConnectionLostException
     */
    public void loop() throws  InterruptedException, ConnectionLostException;
    // T<fim_middle>","
 * All microcontrollers used with Flyver shall implement this interface
 * A new MicroController shall be made for each Drone type
 *
 */","
 * Created by <NAME> (flyver) on 12/10/15.
 * Email: <EMAIL>
 */"
"<fim_prefix>package co.flyver.flyvercore.microcontrollers;

import ioio.lib.api.exception.ConnectionLostException;

/**
 * All microcontrollers used with Flyver shall implement this interface
 * A new MicroController shall be made for each Drone type
 *
 */
public interface MicroController {
    /**<fim_suffix>
    public void setup() throws  ConnectionLostException;

    /**
     * Loops the microcontroller.
     * @throws InterruptedException
     * @throws ConnectionLostException
     */
    public void loop() throws  InterruptedException, ConnectionLostException;
    // TODO: Fix the excetions

}
<fim_middle>","
     * Initialization Setup
     * @throws ConnectionLostException
     */","
     * Sets up the microcontroller.
     * @throws ConnectionLostException
 "
"<fim_prefix>lers;

import ioio.lib.api.exception.ConnectionLostException;

/**
 * All microcontrollers used with Flyver shall implement this interface
 * A new MicroController shall be made for each Drone type
 *
 */
public interface MicroController {
    /**
     * Initialization Setup
     * @throws ConnectionLostException
     */
    public void setup() throws  ConnectionLostException;

    /**<fim_suffix>
    public void loop() throws  InterruptedException, ConnectionLostException;
    // TODO: Fix the excetions

}
<fim_middle>","
     * Loops the microcontroller.
     * @throws InterruptedException
     * @throws ConnectionLostException
     */","
     * Main Loop
     * @throws InterruptedException
     * @throws ConnectionLostException
     */"
"<fim_prefix>/*<fim_suffix>
package org.eclipse.ditto.things.service.enforcement.pre;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoInteractions;
import static org.mockito.Mockito.when;

import java.util.Map;
import java.util.concurrent.CompletableFuture;

import org.eclipse.ditto.base.model.headers.DittoHeaders;
imp<fim_middle>","
 * Copyright (c) 2022 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","*
 * @author <a href=""mailto:<EMAIL>""><NAME></a>
 */"
"<fim_prefix>ust be greater than zero!"");
    }

    this.revision = revision;

    if (revision != 0) {
      final int index = name.indexOf('.');

      if (index != -1) {
        this.setName(name.substring(0, index) + revision + name.substring(index));
      } else {
        this.setName(name + revision);
      }
    } else {
      this.setName(name);
    }

    return this.exists();
  }

  /**<fim_suffix>
  public boolean incrementRevision() {
    this.setRevision(revision + 1);
    return super.exists();
  }

  /**
   * Sets this to the previous revision.
   *
   * @return True if the file exists, otherwise false.
   */
  public boolean decrementRevision() {
    if (this.revision != 0) {
      this.setRevision(revision - 1);
    }

    return super.exists();
  }

  /** Sets this to th<fim_middle>","
   * Sets this to the next revision.
   *
   * @return True if the file exists, otherwise false.
   */","
   * Sets this to the next revision.
   *
   * @return True if the file exists, otherwise false.
   */"
"<fim_prefix>ame string.
   * @param revision The starting revision.
   */
  public RevisionFile(final File parent, final String child, final int revision) {
    super(parent, child);

    if (revision < 0) {
      throw new IllegalArgumentException(""Revision number must be greater than zero!"");
    }

    this.name = child;

    this.revision = revision;

    this.setRevision(revision);
  }

  /**<fim_suffix>
  public RevisionFile(final File parent, final String child) {
    super(parent, child);

    this.name = child;

    this.revision = 0;

    this.setRevision(revision);
  }

  /**
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   */
  public RevisionFile(final String parent, final String child) {
    super(parent, <fim_middle>","
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   */","
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   *"
"<fim_prefix>package net.KabOOm356.File;

import java.io.File;

/**
 * A special type of {@link ExtendedFile} that has revisions and takes care of <br>
 * renaming and pointing to other revisions of the {@link ExtendedFile}. <br>
 * <br>
 * <b>NOTE:</b> Revision 0 is the base file.
 */
public class RevisionFile extends ExtendedFile {
  /**<fim_suffix>
  private final String name;

  /** The current revision number. */
  private int revision;

  /**
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   * @param revision The starting revision.
   */
  public RevisionFile(final File parent, final String child, final int revision) {
    super(parent, child);

    if (rev<fim_middle>", The base name of the file. */, The name of the file. */
"<fim_prefix>e net.KabOOm356.File;

import java.io.File;

/**
 * A special type of {@link ExtendedFile} that has revisions and takes care of <br>
 * renaming and pointing to other revisions of the {@link ExtendedFile}. <br>
 * <br>
 * <b>NOTE:</b> Revision 0 is the base file.
 */
public class RevisionFile extends ExtendedFile {
  /** The base name of the file. */
  private final String name;

  /**<fim_suffix>
  private int revision;

  /**
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   * @param revision The starting revision.
   */
  public RevisionFile(final File parent, final String child, final int revision) {
    super(parent, child);

    if (revision < 0) {
      throw new IllegalArgumentException(""Revision numb<fim_middle>", The current revision number. */, The revision number. */
"<fim_prefix>ype of {@link ExtendedFile} that has revisions and takes care of <br>
 * renaming and pointing to other revisions of the {@link ExtendedFile}. <br>
 * <br>
 * <b>NOTE:</b> Revision 0 is the base file.
 */
public class RevisionFile extends ExtendedFile {
  /** The base name of the file. */
  private final String name;

  /** The current revision number. */
  private int revision;

  /**<fim_suffix>
  public RevisionFile(final File parent, final String child, final int revision) {
    super(parent, child);

    if (revision < 0) {
      throw new IllegalArgumentException(""Revision number must be greater than zero!"");
    }

    this.name = child;

    this.revision = revision;

    this.setRevision(revision);
  }

  /**
   * Constructor.
   *
   * @param parent The parent abstrac<fim_middle>","
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   * @param revision The starting revision.
   */","
   * Constructor.
   *
   * @param parent The parent abstrac file.
   * @param child The child name.
   * @param revision The revision number.
   */"
"<fim_prefix>   this.name = child;

    this.revision = 0;

    this.setRevision(revision);
  }

  /**
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   */
  public RevisionFile(final String parent, final String child) {
    super(parent, child);

    this.name = child;

    this.revision = 0;

    this.setRevision(0);
  }

  /**<fim_suffix>
  public RevisionFile(final String file) {
    super(file);

    this.name = file;

    this.revision = 0;

    this.setRevision(0);
  }

  /**
   * Returns the current revision number.
   *
   * @return The current revision number.
   */
  public int getRevision() {
    return revision;
  }

  /**
   * Sets the revision number.
   *
   * @param revision The revision number to place t<fim_middle>","
   * Constructor.
   *
   * @param file The name of this RevisionFile.
   */","
   * Constructor.
   *
   * @param file The file pathname.
   */"
"<fim_prefix> RevisionFile(final String parent, final String child) {
    super(parent, child);

    this.name = child;

    this.revision = 0;

    this.setRevision(0);
  }

  /**
   * Constructor.
   *
   * @param file The name of this RevisionFile.
   */
  public RevisionFile(final String file) {
    super(file);

    this.name = file;

    this.revision = 0;

    this.setRevision(0);
  }

  /**<fim_suffix>
  public int getRevision() {
    return revision;
  }

  /**
   * Sets the revision number.
   *
   * @param revision The revision number to place this to.
   * @return True if the revision exists, otherwise false.
   */
  public boolean setRevision(final int revision) {
    if (revision < 0) {
      throw new IllegalArgumentException(""Revision number must be greater than zero!"");
   <fim_middle>","
   * Returns the current revision number.
   *
   * @return The current revision number.
   */","
   * Gets the revision number.
   *
   * @return The revision number.
   */"
"<fim_prefix>
  }

  /**
   * Constructor.
   *
   * @param file The name of this RevisionFile.
   */
  public RevisionFile(final String file) {
    super(file);

    this.name = file;

    this.revision = 0;

    this.setRevision(0);
  }

  /**
   * Returns the current revision number.
   *
   * @return The current revision number.
   */
  public int getRevision() {
    return revision;
  }

  /**<fim_suffix>
  public boolean setRevision(final int revision) {
    if (revision < 0) {
      throw new IllegalArgumentException(""Revision number must be greater than zero!"");
    }

    this.revision = revision;

    if (revision != 0) {
      final int index = name.indexOf('.');

      if (index != -1) {
        this.setName(name.substring(0, index) + revision + name.substring(index));
      } e<fim_middle>","
   * Sets the revision number.
   *
   * @param revision The revision number to place this to.
   * @return True if the revision exists, otherwise false.
   */","
   * Sets the current revision number.
   *
   * @param revision The new revision number.
   * @return <code>true</code> if the revision number was set successfully,"
"<fim_prefix>ise false.
   */
  public boolean incrementRevision() {
    this.setRevision(revision + 1);
    return super.exists();
  }

  /**
   * Sets this to the previous revision.
   *
   * @return True if the file exists, otherwise false.
   */
  public boolean decrementRevision() {
    if (this.revision != 0) {
      this.setRevision(revision - 1);
    }

    return super.exists();
  }

  /**<fim_suffix>
  public void incrementToLatestRevision() {
    this.incrementToNextRevision();
    this.decrementRevision();
  }

  /** Sets this to the next available revision. */
  public void incrementToNextRevision() {
    if (this.exists()) {
      //noinspection StatementWithEmptyBody
      while (this.incrementRevision()) {}
    }
  }

  /** Sets this to the base revision. */
  public void to<fim_middle>", Sets this to the latest revision. */, Sets this to the next available revision.
"<fim_prefix>n + name.substring(index));
      } else {
        this.setName(name + revision);
      }
    } else {
      this.setName(name);
    }

    return this.exists();
  }

  /**
   * Sets this to the next revision.
   *
   * @return True if the file exists, otherwise false.
   */
  public boolean incrementRevision() {
    this.setRevision(revision + 1);
    return super.exists();
  }

  /**<fim_suffix>
  public boolean decrementRevision() {
    if (this.revision != 0) {
      this.setRevision(revision - 1);
    }

    return super.exists();
  }

  /** Sets this to the latest revision. */
  public void incrementToLatestRevision() {
    this.incrementToNextRevision();
    this.decrementRevision();
  }

  /** Sets this to the next available revision. */
  public void incrementToNextRev<fim_middle>","
   * Sets this to the previous revision.
   *
   * @return True if the file exists, otherwise false.
   */", Sets this to the previous revision. */
"<fim_prefix>se revision. */
  public void toBaseRevision() {
    this.setRevision(0);
  }

  /**
   * Returns the name of the base file.
   *
   * @return The base file name.
   */
  @Override
  public String getName() {
    return name;
  }

  /**
   * Returns the name of the file.
   *
   * @return The name of the file.
   */
  public String getFileName() {
    return super.getName();
  }

  /**<fim_suffix>
  @Override
  public String toString() {
    String str = super.toString() + '\n';
    str += ""Revision of file: "" + name;
    str += ""\nRevision Number: "" + revision;
    return str;
  }
}
<fim_middle>","
   * @see java.lang.Object#toString()
   */","
   * Returns the revision number of the file.
   *
 "
"<fim_prefix>s.incrementToNextRevision();
    this.decrementRevision();
  }

  /** Sets this to the next available revision. */
  public void incrementToNextRevision() {
    if (this.exists()) {
      //noinspection StatementWithEmptyBody
      while (this.incrementRevision()) {}
    }
  }

  /** Sets this to the base revision. */
  public void toBaseRevision() {
    this.setRevision(0);
  }

  /**<fim_suffix>
  @Override
  public String getName() {
    return name;
  }

  /**
   * Returns the name of the file.
   *
   * @return The name of the file.
   */
  public String getFileName() {
    return super.getName();
  }

  /**
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    String str = super.toString() + '\n';
    str += ""Revision of file: "" + name;
<fim_middle>","
   * Returns the name of the base file.
   *
   * @return The base file name.
   */", Sets this to the previous revision. */
"<fim_prefix> = child;

    this.revision = revision;

    this.setRevision(revision);
  }

  /**
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   */
  public RevisionFile(final File parent, final String child) {
    super(parent, child);

    this.name = child;

    this.revision = 0;

    this.setRevision(revision);
  }

  /**<fim_suffix>
  public RevisionFile(final String parent, final String child) {
    super(parent, child);

    this.name = child;

    this.revision = 0;

    this.setRevision(0);
  }

  /**
   * Constructor.
   *
   * @param file The name of this RevisionFile.
   */
  public RevisionFile(final String file) {
    super(file);

    this.name = file;

    this.revision = 0;

    this.setRevision(0);
 <fim_middle>","
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   */","
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   */"
"<fim_prefix>() {
    if (this.exists()) {
      //noinspection StatementWithEmptyBody
      while (this.incrementRevision()) {}
    }
  }

  /** Sets this to the base revision. */
  public void toBaseRevision() {
    this.setRevision(0);
  }

  /**
   * Returns the name of the base file.
   *
   * @return The base file name.
   */
  @Override
  public String getName() {
    return name;
  }

  /**<fim_suffix>
  public String getFileName() {
    return super.getName();
  }

  /**
   * @see java.lang.Object#toString()
   */
  @Override
  public String toString() {
    String str = super.toString() + '\n';
    str += ""Revision of file: "" + name;
    str += ""\nRevision Number: "" + revision;
    return str;
  }
}
<fim_middle>","
   * Returns the name of the file.
   *
   * @return The name of the file.
   */","
   * Returns the name of the base file.
   *
   * @return The base file name.
   */"
"<fim_prefix>package net.KabOOm356.File;

import java.io.File;

/**<fim_suffix>
public class RevisionFile extends ExtendedFile {
  /** The base name of the file. */
  private final String name;

  /** The current revision number. */
  private int revision;

  /**
   * Constructor.
   *
   * @param parent The parent abstract pathname.
   * @param child The child pathname string.
   * @param revision The starting revision.
   */
  public RevisionFile(final File par<fim_middle>","
 * A special type of {@link ExtendedFile} that has revisions and takes care of <br>
 * renaming and pointing to other revisions of the {@link ExtendedFile}. <br>
 * <br>
 * <b>NOTE:</b> Revision 0 is the base file.
 */","
 * A file that is a revision of another file.
 *
 * @author <NAME>
 */"
"<fim_prefix>s();
  }

  /** Sets this to the latest revision. */
  public void incrementToLatestRevision() {
    this.incrementToNextRevision();
    this.decrementRevision();
  }

  /** Sets this to the next available revision. */
  public void incrementToNextRevision() {
    if (this.exists()) {
      //noinspection StatementWithEmptyBody
      while (this.incrementRevision()) {}
    }
  }

  /**<fim_suffix>
  public void toBaseRevision() {
    this.setRevision(0);
  }

  /**
   * Returns the name of the base file.
   *
   * @return The base file name.
   */
  @Override
  public String getName() {
    return name;
  }

  /**
   * Returns the name of the file.
   *
   * @return The name of the file.
   */
  public String getFileName() {
    return super.getName();
  }

  /**
   * @see java<fim_middle>", Sets this to the base revision. */,"
   * Sets this to the"
"<fim_prefix>us revision.
   *
   * @return True if the file exists, otherwise false.
   */
  public boolean decrementRevision() {
    if (this.revision != 0) {
      this.setRevision(revision - 1);
    }

    return super.exists();
  }

  /** Sets this to the latest revision. */
  public void incrementToLatestRevision() {
    this.incrementToNextRevision();
    this.decrementRevision();
  }

  /**<fim_suffix>
  public void incrementToNextRevision() {
    if (this.exists()) {
      //noinspection StatementWithEmptyBody
      while (this.incrementRevision()) {}
    }
  }

  /** Sets this to the base revision. */
  public void toBaseRevision() {
    this.setRevision(0);
  }

  /**
   * Returns the name of the base file.
   *
   * @return The base file name.
   */
  @Override
  public String g<fim_middle>", Sets this to the next available revision. */, Sets this to the next revision. */
"<fim_prefix>derer;

import android.graphics.Bitmap;

import com.protolambda.blocktopograph.chunk.Chunk;
import com.protolambda.blocktopograph.chunk.ChunkManager;
import com.protolambda.blocktopograph.chunk.Version;
import com.protolambda.blocktopograph.chunk.terrain.TerrainChunkData;
import com.protolambda.blocktopograph.map.Dimension;


public class GrassRenderer implements MapRenderer {

    /**<fim_suffix>
    public Bitmap renderToBitmap(ChunkManager cm, Bitmap bm, Dimension dimension, int chunkX, int chunkZ, int bX, int bZ, int eX, int eZ, int pX, int pY, int pW, int pL) throws Version.VersionException {

        Chunk chunk = cm.getChunk(chunkX, chunkZ);
        Version cVersion = chunk.getVersion();

        if(cVersion == Version.ERROR) return MapType.ERROR.renderer.renderToBitmap(<fim_middle>","
     * Render a single chunk to provided bitmap (bm)
     * @param cm ChunkManager, provides chunks, which provide chunk-data
     * @param bm Bitmap to render to
     * @param dimension Mapped dimension
     * @param chunkX X chunk coordinate (x-block coord / Chunk.WIDTH)
     * @param chunkZ Z chunk coordinate (z-block coord / Chunk.LENGTH)
     * @param bX begin block X coordinate, relative to chunk edge
     * @param bZ begin block Z coordinate, relative to chunk edge
     * @param eX end block X coordinate, relative to chunk edge
     * @param eZ end block Z coordinate, relative to chunk edge
     * @param pX texture X pixel coord to start rendering to
     * @param pY texture Y pixel coord to start rendering to
     * @param pW width (X) of one block in pixels
     * @param pL length (Z) of one block in pixels
     * @return bm is returned back
     *
     * @throws Version.VersionException when the version of the chunk is unsupported.
     */","
     * Renders the chunk to a bitmap.
     * @param cm The chunk manager.
     * @param bm The bitmap to render to.
     * @param dimension The dimension to render to.
     * @param chunkX The chunk X coordinate.
     * @param chunkZ The chunk Z coordinate.
     * @param bX The block X coordinate.
     * @param bZ The block Z coordinate.
     * @param eX The end X coordinate.
     * @param eZ The end Z coordinate.
     * @param pX The parent X coordinate.
     * @param pY The parent Y coordinate.
     * @param pW The parent width.
     * @param pL The parent length.
     * @return The rendered bitmap.
     * @throws Version.VersionException If the chunk version is not supported.
     */"
"<fim_prefix>/*<fim_suffix>
package com.github.naoghuman.sbs.view.debugcomponents;

import com.github.naoghuman.sbs.gameengine.EGameLevel;
import com.github.naoghuman.lib.action.api.ActionFacade;
import com.github.naoghuman.lib.action.api.TransferData;
import com.github.naoghuman.sbs.configuration.IActionConfiguration;
import com.github.naoghuman.sbs.debug.DebugConsole;
import com.github.naoghuman.sbs.ga<fim_middle>","
 * Copyright (C) 2016 Naoghuman
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix> javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.ListCell;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.util.Callback;

/**<fim_suffix>
public class DebugComponentsPresenter implements Initializable {
    
    @FXML private Button bSimulate;
    @FXML private CheckBox cbShowHideDebugConsole;
    @FXML private ComboBox<EGameLevel> cbSimulateGameLevel;
    @FXML private ComboBox<EGameMode> cbSimulateGameMode;
    @FXML private TextArea taDebugConsole;
    @FXML private VBox vbDebugOptions;
    
    private Eve<fim_middle>","
 *
 * @author Naoghuman
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>e file,
	 * replacing all occurrences of a String with another.
	 * 
	 * @param filename the resource file
	 * @param target the String to be replaced
	 * @param replacement the String to replace target
	 * @return
	 */
	protected String printStaticHTMLReplace(String filename, String target, String replacement) {
		return printStaticHTML(filename).replace(target, replacement);
	}

	/**<fim_suffix>
	protected boolean isClientHtml(HTTPRequest request) {
		String clientType = request.getParam(""client"");
		if (clientType.compareToIgnoreCase(""html"") == 0) {
			return true;
		}
		return false;
	}

	/**
	 * Compose a String that represents a JSON Object 
	 * in the format of exchanging error codes among agents,
	 * according to the CENO Protocol specification:
	 * 
	 * @return
	 * {
	<fim_middle>","
	 * Check whether the ""client"" parameter is set to ""html"",
	 * so that we respond to requests with an HTML page
	 * rather than with a JSON Object.
	 * 
	 * @param request the request to be checked
	 * @return <code>true</code> if the client parameter is set
	 * to ""html"", <code>false</code> otherwise
	 */","
	 * Check if the request is a client HTML request.
	 * 
	 * @param request the HTTP request
	 * @return true if the request is a client HTML request, false otherwise
	 */"
"<fim_prefix> than with a JSON Object.
	 * 
	 * @param request the request to be checked
	 * @return <code>true</code> if the client parameter is set
	 * to ""html"", <code>false</code> otherwise
	 */
	protected boolean isClientHtml(HTTPRequest request) {
		String clientType = request.getParam(""client"");
		if (clientType.compareToIgnoreCase(""html"") == 0) {
			return true;
		}
		return false;
	}

	/**<fim_suffix>
	private String returnErrorJSON(CENOException cenoEx) {
		JSONObject jsonResponse = new JSONObject();
		jsonResponse.put(""errCode"", cenoEx.getErrCode().getDocCode());
		jsonResponse.put(""errMsg"", cenoEx.getMessage());
		return jsonResponse.toJSONString();
	}

	/**
	 * Compose a String response including a CENOException,
	 * to be returned to another CENO agent.
	 * 
	 * @param cenoEx <fim_middle>","
	 * Compose a String that represents a JSON Object 
	 * in the format of exchanging error codes among agents,
	 * according to the CENO Protocol specification:
	 * 
	 * @return
	 * {
	 *   ""errorCode"": [corresponding code from the errorConditions doc],
	 *   ""errMsg"": [localized informative error message]
	 * }
	 */","
	 * Compose a String response including a CENOException,
	 * to be returned to another CENO agent.
	 * 
	 * @param cenoEx  the CENOException to be returned  Fix bug in JSON response  package net.freehaven.tor.control.handlers;

import java.io.IOException;
import java.util.logging.Level;
import"
"<fim_prefix>rCode"": [corresponding code from the errorConditions doc],
	 *   ""errMsg"": [localized informative error message]
	 * }
	 */
	private String returnErrorJSON(CENOException cenoEx) {
		JSONObject jsonResponse = new JSONObject();
		jsonResponse.put(""errCode"", cenoEx.getErrCode().getDocCode());
		jsonResponse.put(""errMsg"", cenoEx.getMessage());
		return jsonResponse.toJSONString();
	}

	/**<fim_suffix>
	protected String returnError(CENOException cenoEx, boolean clientIsHtml) {
		if (clientIsHtml) {
			return cenoEx.getMessage();
		} else {
			return returnErrorJSON(cenoEx);
		}
	}

}<fim_middle>","
	 * Compose a String response including a CENOException,
	 * to be returned to another CENO agent.
	 * 
	 * @param cenoEx the CENOException to include in the response
	 * @param clientIsHtml whether the client supports HTML only
	 * @return
	 * If the client is HTML, the response will be an HTML message.
	 * Otherwise, if the client supports JSON, the format of the
	 * String adheres to the CENO Protocol specification:<br>
	 * {
	 *   ""errorCode"": [corresponding code from the errorConditions doc],
	 *   ""errMsg"": [localized informative error message]
	 * }
	 */","
	 * Returns a JSON string with the error code and error message.
	 * 
	 * @param cenoEx
	 *            the exception to be returned
	 * @param clientIsHtml
	 *            true if the client is HTML, false otherwise
	 * @return a JSON string with the error code and error message
	 */"
"<fim_prefix>br = new BufferedReader(new InputStreamReader(is));
		String line = """";
		StringBuilder htmlContent = new StringBuilder();
		try {
			while ((line = br.readLine()) != null) {
				htmlContent.append(line);
			}
		} catch (IOException e) {
			e.printStackTrace();
			return returnErrorJSON(new CENOException(CENOErrCode.LCS_HANDLER_STATIC_IO));
		}
		return htmlContent.toString();
	}

	/**<fim_suffix>
	protected String printStaticHTMLReplace(String filename, String target, String replacement) {
		return printStaticHTML(filename).replace(target, replacement);
	}

	/**
	 * Check whether the ""client"" parameter is set to ""html"",
	 * so that we respond to requests with an HTML page
	 * rather than with a JSON Object.
	 * 
	 * @param request the request to be checked
	 * @return <code>tr<fim_middle>","
	 * Returns the content of a static resource file,
	 * replacing all occurrences of a String with another.
	 * 
	 * @param filename the resource file
	 * @param target the String to be replaced
	 * @param replacement the String to replace target
	 * @return
	 */","
	 * Print the contents of a static HTML file.
	 * 
	 * @param filename the name of the file to be printed
	 * @return the contents of the file
	 */"
"<fim_prefix> plugins.CENO.Client;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import net.minidev.json.JSONObject;
import plugins.CENO.CENOErrCode;
import plugins.CENO.CENOException;
import freenet.pluginmanager.FredPluginHTTP;
import freenet.pluginmanager.PluginHTTPException;
import freenet.support.api.HTTPRequest;

/**<fim_suffix>
public abstract class AbstractCENOClientHandler implements FredPluginHTTP {

	public abstract String handleHTTPGet(HTTPRequest request) throws PluginHTTPException;
	public abstract String handleHTTPPost(HTTPRequest request) throws PluginHTTPException;

	/**
	 * Returns the content of a static resource file
	 * 
	 * @param filename static file in the resources to serve
	 * @return the <fim_middle>","
 * Abstract class for CENO Client handlers that use fred's servlet
 */","
 * Abstract class for CENO client handlers
 * 
 * @author patrick"
"<fim_prefix>HTTPException;
import freenet.support.api.HTTPRequest;

/**
 * Abstract class for CENO Client handlers that use fred's servlet
 */
public abstract class AbstractCENOClientHandler implements FredPluginHTTP {

	public abstract String handleHTTPGet(HTTPRequest request) throws PluginHTTPException;
	public abstract String handleHTTPPost(HTTPRequest request) throws PluginHTTPException;

	/**<fim_suffix>
	protected String printStaticHTML(String filename) {
		InputStream is = AbstractCENOClientHandler.class.getResourceAsStream(filename);
		if (is == null) {
			return returnErrorJSON(new CENOException(CENOErrCode.LCS_HANDLER_STATIC_NOT_FOUND));
		}
		BufferedReader br = new BufferedReader(new InputStreamReader(is));
		String line = """";
		StringBuilder htmlContent = new StringBuilder();
<fim_middle>","
	 * Returns the content of a static resource file
	 * 
	 * @param filename static file in the resources to serve
	 * @return the content of the filename, or throws a CENOException
	 * if the file does not exist or could not be read
	 */","
	 * Returns a JSON error response
	 * @param e
	 * @return
	 */"
"<fim_prefix>/**<fim_suffix>

package fr.inria.linuxtools.ctf.core.event.types;

import org.eclipse.jdt.annotation.NonNull;

import fr.inria.linuxtools.ctf.core.event.scope.IDefinitionScope;

/**
 * Simple Datatype definition is a datatype that allows the addition of
 * getIntegerValue and getStringValue to a class.
 *
 * @author Matthew Khouzam
 * @since 1.2
 */
public abstract class SimpleDatatypeDefinition ext<fim_middle>","*****************************************************************************
 * Copyright (c) 2011, 2013 Ericsson, Ecole Polytechnique de Montreal and others
 *
 * All rights reserved. This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors: Matthew Khouzam - Initial API and implementation
 *******************************************************************************/","
 * Copyright (c) 2013, Regents of the University of California
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list"
"<fim_prefix>of this definition
     * @param fieldName
     *            The name of the field matching this definition in the parent
     *            scope
     * @since 3.0
     */
    public SimpleDatatypeDefinition(@NonNull IDeclaration declaration, IDefinitionScope definitionScope,
            @NonNull String fieldName) {
        super(declaration, definitionScope, fieldName);
    }

    /**<fim_suffix>
    public Long getIntegerValue() {
        return null;
    }

    /**
     * Gets the value in string form
     *
     * @return the integer in a String, can be null
     */
    public String getStringValue() {
        return null;
    }

}
<fim_middle>","
     * Gets the value in integer form
     *
     * @return the integer in a Long, can be null
     */","
     * Gets the value in integer form
     *
     * @return the integer in a Long, can be null
     */"
"<fim_prefix>tion, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors: Matthew Khouzam - Initial API and implementation
 *******************************************************************************/

package fr.inria.linuxtools.ctf.core.event.types;

import org.eclipse.jdt.annotation.NonNull;

import fr.inria.linuxtools.ctf.core.event.scope.IDefinitionScope;

/**<fim_suffix>
public abstract class SimpleDatatypeDefinition extends Definition {

    /**
     * Create a new SimpleDatatypeDefinition
     *
     * @param declaration
     *            definition's declaration
     * @param definitionScope
     *            The scope of this definition
     * @param fieldName
     *            The name of the field matching this definition in the parent
     *   <fim_middle>","
 * Simple Datatype definition is a datatype that allows the addition of
 * getIntegerValue and getStringValue to a class.
 *
 * @author Matthew Khouzam
 * @since 1.2
 */","
 * A SimpleDatatypeDefinition is a definition of a simple datatype.
 *
 * @author Matthew Khouzam - Initial API and implementation
 *
 */"
"<fim_prefix> public SimpleDatatypeDefinition(@NonNull IDeclaration declaration, IDefinitionScope definitionScope,
            @NonNull String fieldName) {
        super(declaration, definitionScope, fieldName);
    }

    /**
     * Gets the value in integer form
     *
     * @return the integer in a Long, can be null
     */
    public Long getIntegerValue() {
        return null;
    }

    /**<fim_suffix>
    public String getStringValue() {
        return null;
    }

}
<fim_middle>","
     * Gets the value in string form
     *
     * @return the integer in a String, can be null
     */","
     * Gets the value in string form
     *
     * @return the string in a String, can be null
     */"
"<fim_prefix>ols.ctf.core.event.types;

import org.eclipse.jdt.annotation.NonNull;

import fr.inria.linuxtools.ctf.core.event.scope.IDefinitionScope;

/**
 * Simple Datatype definition is a datatype that allows the addition of
 * getIntegerValue and getStringValue to a class.
 *
 * @author Matthew Khouzam
 * @since 1.2
 */
public abstract class SimpleDatatypeDefinition extends Definition {

    /**<fim_suffix>
    public SimpleDatatypeDefinition(@NonNull IDeclaration declaration, IDefinitionScope definitionScope,
            @NonNull String fieldName) {
        super(declaration, definitionScope, fieldName);
    }

    /**
     * Gets the value in integer form
     *
     * @return the integer in a Long, can be null
     */
    public Long getIntegerValue() {
        return null;
    }

   <fim_middle>","
     * Create a new SimpleDatatypeDefinition
     *
     * @param declaration
     *            definition's declaration
     * @param definitionScope
     *            The scope of this definition
     * @param fieldName
     *            The name of the field matching this definition in the parent
     *            scope
     * @since 3.0
     */","
     * Constructor
     *
     * @param declaration     the declaration of the datatype
     * @param definitionScope the scope of the datatype
     * @param fieldName       the name of the field
     */"
"<fim_prefix>/*<fim_suffix>
package org.cubeengine.module.log.action.player.item.container;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.UUID;
import com.mongodb.BasicDBObject;
import org.cubeengine.module.core.sponge.BukkitUtils;
import org.cubeengine.module.log.Log;
import org.cubeengine.module.log.action.LogListener;
import org.spongepowered.api.world.Location;<fim_middle>","
 * This file is part of CubeEngine.
 * CubeEngine is licensed under the GNU General Public License Version 3.
 *
 * CubeEngine is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CubeEngine is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with CubeEngine.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by david on 15.02.15.
 */"
"<fim_prefix>ort org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.inventory.BrewerInventory;
import org.bukkit.inventory.FurnaceInventory;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryHolder;
import org.spongepowered.api.event.inventory.InventoryClickEvent;

import static org.bukkit.Material.*;

/**<fim_suffix>
public class ListenerContainerItem extends LogListener
{
    private final Map<UUID, Map<ItemData, Integer>> inventoryChanges = new HashMap<>();

    public ListenerContainerItem(Log module)
    {
        super(module, ItemInsert.class, ItemRemove.class);
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onInventoryClose(InventoryCloseE<fim_middle>","
 * A Listener for Player Actions with Items
 * <p>Events:
 * {@link InventoryCloseEvent}
 * {@link InventoryOpenEvent}
 * {@link InventoryClickEvent}
 * {@link InventoryDragEvent}
 * <p>All Actions:
 * {@link ItemInsert}
 * {@link ItemRemove}
 */","
 * Created by <NAME> on 2016-11-01.
 */"
"<fim_prefix>    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onInventoryOpen(InventoryOpenEvent event)
    {
        if (event.getPlayer() instanceof Player)
        {
            if (this.isActive(ItemInsert.class, event.getPlayer().getWorld())
             || this.isActive(ItemRemove.class, event.getPlayer().getWorld()))
            {
                /*<fim_suffix>
                this.inventoryChanges.put(event.getPlayer().getUniqueId(), new HashMap<ItemData, Integer>());
            }
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    public void onInventoryDrag(InventoryDragEvent event)
    {
        if (event.getWhoClicked() instanceof Player)
        {
            if (!this.inventoryChanges.cont<fim_middle>"," TODO
                ContainerType type = new ContainerType(event.getInventory().getHolder());
                if (!config.container.CONTAINER_ignore.contains(type))
                 */","
                 * If the player is in a world where the plugin is active,
                 * then we need to check if the player is in a world where
                 * the"
"<fim_prefix>/*<fim_suffix>
package org.robok.engine.feature.editor.languages.java.models;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class State {

  public int state = 0;

  public boolean hasBraces = false;

  public List<String> identifiers = null;

  public void addIdentifier(CharSequence identifier) {
    if (identifiers == null) {
      identifiers = new ArrayLis<fim_middle>","
 *    sora-editor - the awesome code editor for Android
 *    https://github.com/Rosemoe/sora-editor
 *    Copyright (C) 2020-2024  Rosemoe
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
 *     USA
 *
 *     Please contact Rosemoe by email 2073412493@qq.com if you need
 *     additional information or have any questions
 */","*
 * Created by vladi
 * Date: 19.10.15
 * Time: 17:02
 * By Tatarstan.
 */"
"<fim_prefix>/*<fim_suffix>
package com.ostrichemulators.semtool.poi.main.xlsxml;

import com.ostrichemulators.semtool.poi.main.ImportValidationException;
import com.ostrichemulators.semtool.poi.main.SheetType;
import java.util.List;
import java.util.regex.Pattern;
import org.apache.log4j.Logger;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

/**
 * An XML parser that tries to figure out a shee<fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","*
 * @author ryan
 */"
"<fim_prefix>lates
 * and open the template in the editor.
 */
package com.ostrichemulators.semtool.poi.main.xlsxml;

import com.ostrichemulators.semtool.poi.main.ImportValidationException;
import com.ostrichemulators.semtool.poi.main.SheetType;
import java.util.List;
import java.util.regex.Pattern;
import org.apache.log4j.Logger;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

/**<fim_suffix>
public class SheetTypeXmlHandler extends XlsXmlBase {

	private static final Logger log = Logger.getLogger( SheetTypeXmlHandler.class );
	private int rownum;
	private int colnum;
	private SheetType sheettype = null;
	private boolean isstring = false;
	private boolean skipping = false;

	public SheetTypeXmlHandler( List<String> sst ) {
		super( sst );
	}

	public SheetType getSheetType<fim_middle>","
 * An XML parser that tries to figure out a sheet's type
 *
 * @author ryan
 */","
 *
 * @author ryan
 */"
"<fim_prefix>/**<fim_suffix>
package com.ibm.layout;

/**
 * 1D array of primitive float.
 */
public interface FloatArray1D extends LayoutType {
	
	/**
	 * Get the number of array elements.
	 * @return the number of array elements
	 */
	public long getLength();

	/**
	 * Get an array element
	 * @param index the element index
	 * @return a layout targeting the array element
	 */
	public abstract float at(long ind<fim_middle>","*****************************************************************************
 *  Copyright (c) 2014, 2015 IBM Corporation.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/","
 * Copyright IBM Corporation 2015
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or"
"<fim_prefix>2014, 2015 IBM Corporation.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package com.ibm.layout;

/**<fim_suffix>
public interface FloatArray1D extends LayoutType {
	
	/**
	 * Get the number of array elements.
	 * @return the number of array elements
	 */
	public long getLength();

	/**
	 * Get an array element
	 * @param index the element index
	 * @return a layout targeting the array element
	 */
	public abstract float at(long index);

	/**
	 * Set an array element
	 * @param index the element <fim_middle>","
 * 1D array of primitive float.
 */","
 * A 1D array of float values
 *"
"<fim_prefix>ls
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package com.ibm.layout;

/**
 * 1D array of primitive float.
 */
public interface FloatArray1D extends LayoutType {
	
	/**<fim_suffix>
	public long getLength();

	/**
	 * Get an array element
	 * @param index the element index
	 * @return a layout targeting the array element
	 */
	public abstract float at(long index);

	/**
	 * Set an array element
	 * @param index the element index
	 * @param value new value of the array element
	 */
	public abstract void put(long index, float value);

	/**
	 * Extract a sub range o<fim_middle>","
	 * Get the number of array elements.
	 * @return the number of array elements
	 */","
	 * Get the array length
	 * @return the array length
	 */"
"<fim_prefix>om.ibm.layout;

/**
 * 1D array of primitive float.
 */
public interface FloatArray1D extends LayoutType {
	
	/**
	 * Get the number of array elements.
	 * @return the number of array elements
	 */
	public long getLength();

	/**
	 * Get an array element
	 * @param index the element index
	 * @return a layout targeting the array element
	 */
	public abstract float at(long index);

	/**<fim_suffix>
	public abstract void put(long index, float value);

	/**
	 * Extract a sub range of the array
	 * @param startIdx the starting array index
	 * @param length the number of array elements to extract
	 * @return a layout targeting a sub range of the array
	 */
	public abstract FloatArray1D range(long startIdx, long length);

	/**
	 * Get the size of the array
	 * @return the data size i<fim_middle>","
	 * Set an array element
	 * @param index the element index
	 * @param value new value of the array element
	 */","
	 * Set an array element
	 * @param index the element index
	 * @param value the value to set"
"<fim_prefix>index
	 * @param value new value of the array element
	 */
	public abstract void put(long index, float value);

	/**
	 * Extract a sub range of the array
	 * @param startIdx the starting array index
	 * @param length the number of array elements to extract
	 * @return a layout targeting a sub range of the array
	 */
	public abstract FloatArray1D range(long startIdx, long length);

	/**<fim_suffix>
	public long sizeof();
	
	@Override
	public String toString();
}
<fim_middle>","
	 * Get the size of the array
	 * @return the data size in bytes
	 */","
	 * Get the number of array elements
	 * @return the number of array elements
	 */"
"<fim_prefix>ber of array elements
	 */
	public long getLength();

	/**
	 * Get an array element
	 * @param index the element index
	 * @return a layout targeting the array element
	 */
	public abstract float at(long index);

	/**
	 * Set an array element
	 * @param index the element index
	 * @param value new value of the array element
	 */
	public abstract void put(long index, float value);

	/**<fim_suffix>
	public abstract FloatArray1D range(long startIdx, long length);

	/**
	 * Get the size of the array
	 * @return the data size in bytes
	 */
	public long sizeof();
	
	@Override
	public String toString();
}
<fim_middle>","
	 * Extract a sub range of the array
	 * @param startIdx the starting array index
	 * @param length the number of array elements to extract
	 * @return a layout targeting a sub range of the array
	 */","
	 * Get a range of array elements
	 * @param startIdx the start index
	 * @param length the number of array elements
	 * @return a layout targeting the array elements"
"<fim_prefix>, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package com.ibm.layout;

/**
 * 1D array of primitive float.
 */
public interface FloatArray1D extends LayoutType {
	
	/**
	 * Get the number of array elements.
	 * @return the number of array elements
	 */
	public long getLength();

	/**<fim_suffix>
	public abstract float at(long index);

	/**
	 * Set an array element
	 * @param index the element index
	 * @param value new value of the array element
	 */
	public abstract void put(long index, float value);

	/**
	 * Extract a sub range of the array
	 * @param startIdx the starting array index
	 * @param length the number of array elements to extract
	 * @return a layout targeting <fim_middle>","
	 * Get an array element
	 * @param index the element index
	 * @return a layout targeting the array element
	 */","
	 * Get an array element
	 * @param index the element index
	 * @return the array element
	 */"
"<fim_prefix>/*<fim_suffix>
package uk.ac.ebi.centres.graph;

import static com.google.common.collect.ArrayListMultimap.create;
import com.google.common.collect.ListMultimap;
import static java.lang.System.err;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import<fim_middle>","
 * Copyright (c) 2012. John May
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>then add the ghost c2
                getLigands(neighbour);
                Ligand<A> ghost = new TerminalLigand<>(this, descriptor, ligand.getVisited(), ligand.getAtom(), atom, ligand.getDistanceFromRoot() + 1);
                arcs.add(newArc(neighbour, ghost));
                ligandMap.put(ligand.getAtom(), ghost);
            }
        });

        return ligands;

    }

    /**<fim_suffix>
    public abstract Collection<A> getConnected(A atom);

    /**
     *
     * @param first
     * @param second
     * @return
     */
    public abstract int getOrder(A first, A second);

    /**
     *
     * @param first
     * @param second
     * @return
     */
    public abstract int getDepth(A first, A second);

    private Arc<A> newArc(Ligand<A> tail, Ligand<A> head) {
    <fim_middle>","
     *
     * @param atom
     * @return
     */","
     *
     * @param atom
     * @return
     */"
"<fim_prefix>>(this, descriptor, ligand.getVisited(), ligand.getAtom(), atom, ligand.getDistanceFromRoot() + 1);
                arcs.add(newArc(neighbour, ghost));
                ligandMap.put(ligand.getAtom(), ghost);
            }
        });

        return ligands;

    }

    /**
     *
     * @param atom
     * @return
     */
    public abstract Collection<A> getConnected(A atom);

    /**<fim_suffix>
    public abstract int getOrder(A first, A second);

    /**
     *
     * @param first
     * @param second
     * @return
     */
    public abstract int getDepth(A first, A second);

    private Arc<A> newArc(Ligand<A> tail, Ligand<A> head) {
        return new Arc<>(tail, head,
                manager.getDescriptor(tail.getAtom(), head.getAtom()),
                getDepth(tail.ge<fim_middle>","
     *
     * @param first
     * @param second
     * @return
     */","
     *
     * @param first
     * @param second
     * @return
     */"
"<fim_prefix>    }

        Queue<Ligand<A>> queue = new LinkedList<>();

        queue.addAll(root.getLigands());

        while (!queue.isEmpty()) {
            queue.addAll(queue.poll().getLigands());
        }

    }

    /**
     *
     * @param ligand
     * @return
     */
    @Override
    public List<Arc<A>> getArcs(Ligand<A> ligand) {
        return arcs.getForTail(ligand);
    }

    /**<fim_suffix>
    @Override
    public Arc<A> getParentArc(Ligand<A> ligand) {
        return arcs.getForHead(ligand);
    }

    /**
     *
     * @param ligand
     * @return
     */
    @Override
    public List<Ligand<A>> getLigands(Ligand<A> ligand) {

        List<Ligand<A>> ligands = arcs.getHeads(ligand);

        // lots of ligands being created
        if (ligandMap.size() > 10000) {
    <fim_middle>","
     *
     * @param ligand
     * @return
     */","
     *
     * @param ligand
     * @return
     */"
"<fim_prefix>eritDoc
     */
    @Override
    public void build() {

        if (root == null) {
            throw new IllegalArgumentException(""Attempting build without a root"");
        }

        Queue<Ligand<A>> queue = new LinkedList<>();

        queue.addAll(root.getLigands());

        while (!queue.isEmpty()) {
            queue.addAll(queue.poll().getLigands());
        }

    }

    /**<fim_suffix>
    @Override
    public List<Arc<A>> getArcs(Ligand<A> ligand) {
        return arcs.getForTail(ligand);
    }

    /**
     *
     * @param ligand
     * @return
     */
    @Override
    public Arc<A> getParentArc(Ligand<A> ligand) {
        return arcs.getForHead(ligand);
    }

    /**
     *
     * @param ligand
     * @return
     */
    @Override
    public List<Ligand<A>> get<fim_middle>","
     *
     * @param ligand
     * @return
     */","
     *
     * @param ligand
     * @return
     */"
"<fim_prefix>ionProvider;
import uk.ac.ebi.centres.DescriptorManager;
import uk.ac.ebi.centres.Digraph;
import uk.ac.ebi.centres.Ligand;
import uk.ac.ebi.centres.MutableDescriptor;
import uk.ac.ebi.centres.exception.WarpCoreEjection;
import uk.ac.ebi.centres.ligand.NonterminalLigand;
import uk.ac.ebi.centres.ligand.TerminalLigand;
import uk.ac.ebi.reactionblast.mechanism.ReactionMechanismTool;

/**<fim_suffix>
public abstract class AbstractDigraph<A> implements Digraph<A>,
        ConnectionProvider<A> {

    private final static ILoggingTool LOGGER
            = createLoggingTool(ReactionMechanismTool.class);
    private Ligand<A> root;
    private ArcMap arcs = new ArcMap(); // Could set expected size
    private ListMultimap<A, Ligand<A>> ligandMap = create();
    private DescriptorManag<fim_middle>","
 * A digraph with a single immutable root.
 *
 * @author John May
 * @param <A>
 */","
 * Abstract implementation of a digraph.
 *
 * @author <NAME>
 * @version $Id$
 */"
"<fim_prefix>ll().getLigands());
        }

    }

    /**
     *
     * @param ligand
     * @return
     */
    @Override
    public List<Arc<A>> getArcs(Ligand<A> ligand) {
        return arcs.getForTail(ligand);
    }

    /**
     *
     * @param ligand
     * @return
     */
    @Override
    public Arc<A> getParentArc(Ligand<A> ligand) {
        return arcs.getForHead(ligand);
    }

    /**<fim_suffix>
    @Override
    public List<Ligand<A>> getLigands(Ligand<A> ligand) {

        List<Ligand<A>> ligands = arcs.getHeads(ligand);

        // lots of ligands being created
        if (ligandMap.size() > 10000) {
            throw new WarpCoreEjection();
        }

        // ligands already determined
        if (!ligands.isEmpty()) {
            return ligands;
        }

        // <fim_middle>","
     *
     * @param ligand
     * @return
     */","
     *
     * @param ligand
     * @return
     */"
"<fim_prefix> Arc<>(tail, head,
                manager.getDescriptor(tail.getAtom(), head.getAtom()),
                getDepth(tail.getAtom(), head.getAtom()));
    }

    @Override
    public void dispose() {
        ligandMap.clear();
        arcs.tails.clear();
        arcs.heads.clear();
        root = null;
        arcs = null;
        ligandMap = null;
        manager = null;

    }

    /**<fim_suffix>
    class ArcMap {

        private final ListMultimap<Ligand<A>, Arc<A>> tails = create();
        private final Map<Ligand<A>, Arc<A>> heads = new HashMap<>();

        public void remove(Arc<A> arc) {
            //System.out.println(""\tremoving "" + arc.getTail() + "": "" + arc + "" and "" + arc.getHead() + "": "" + arc);
            tails.remove(arc.getTail(), arc);
            heads.re<fim_middle>","
     * Manages maps of ligands and thier arcs
     */","
     * @return the root of the tree
     */"
"<fim_prefix>eighbour, ghost));
                ligandMap.put(ligand.getAtom(), ghost);
            }
        });

        return ligands;

    }

    /**
     *
     * @param atom
     * @return
     */
    public abstract Collection<A> getConnected(A atom);

    /**
     *
     * @param first
     * @param second
     * @return
     */
    public abstract int getOrder(A first, A second);

    /**<fim_suffix>
    public abstract int getDepth(A first, A second);

    private Arc<A> newArc(Ligand<A> tail, Ligand<A> head) {
        return new Arc<>(tail, head,
                manager.getDescriptor(tail.getAtom(), head.getAtom()),
                getDepth(tail.getAtom(), head.getAtom()));
    }

    @Override
    public void dispose() {
        ligandMap.clear();
        arcs.tails.clear();
  <fim_middle>","
     *
     * @param first
     * @param second
     * @return
     */","
     *
     * @param first
     * @param second
     * @return
     */"
"<fim_prefix>s.BluetoothInfluences;

import net.afterday.compas.core.influences.Influence;
import net.afterday.compas.core.influences.InfluencesPack;
import net.afterday.compas.engine.influences.InflPack;
import net.afterday.compas.engine.influences.InfluenceExtractionStrategy;
import net.afterday.compas.sensors.Bluetooth.BluetoothScanResult;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>

public class BluetoothExtractionStrategy implements InfluenceExtractionStrategy<List<BluetoothScanResult>, Double>
{
    private static final String TAG = ""BluetoothExtractor"";
    private List<BluetoothScanResult> emitNext;
    private static final int CONNECTION_COOLDOWN = 3000;
    private double lastStrength;
    private long lastReceived;

    public BluetoothExtractionStrategy(<fim_middle>","
 * Created by spaka on 4/2/2018.
 */","
 * Created by wangzunhui on 15/9/22"
"<fim_prefix>/*<fim_suffix>
package com.xxmustafacooTR.kernelmanager.utils.kernel.wake;

import android.content.Context;

import com.xxmustafacooTR.kernelmanager.R;
import com.xxmustafacooTR.kernelmanager.fragments.ApplyOnBootFragment;
import com.xxmustafacooTR.kernelmanager.utils.Utils;
import com.xxmustafacooTR.kernelmanager.utils.root.Control;

import java.util.ArrayList;
import java.util.HashMap;
import java<fim_middle>","
 * Copyright (C) 2015-2016 Willi Ye <williye97@gmail.com>
 *
 * This file is part of Kernel Adiutor.
 *
 * Kernel Adiutor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Kernel Adiutor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Kernel Adiutor.  If not, see <http://www.gnu.org/licenses/>.
 *
 */","*
 * Created by mustafa on 12.12.16.
 */"
"<fim_prefix>ustafacooTR.kernelmanager.utils.kernel.wake;

import android.content.Context;

import com.xxmustafacooTR.kernelmanager.R;
import com.xxmustafacooTR.kernelmanager.fragments.ApplyOnBootFragment;
import com.xxmustafacooTR.kernelmanager.utils.Utils;
import com.xxmustafacooTR.kernelmanager.utils.root.Control;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**<fim_suffix>
public class S2s {

    private static S2s sInstance;

    public static S2s getInstance() {
        if (sInstance == null) {
            sInstance = new S2s();
        }
        return sInstance;
    }

    private static final String S2S = ""/sys/android_touch/sweep2sleep"";
    private static final String S2S_2 = ""/sys/android_touch2/sweep2sleep"";
    private static final String S2S_<fim_middle>","
 * Created by willi on 25.06.16.
 */","
 * Created by mustafa on 12/12/16.
"
"<fim_prefix>/*<fim_suffix>

/**
 * Useful generic {@code java.util.concurrent.Future} extensions.
 */
@NonNullApi
@NonNullFields
package cn.taketoday.util.concurrent;

import cn.taketoday.lang.NonNullApi;
import cn.taketoday.lang.NonNullFields;<fim_middle>","
 * Copyright 2017 - 2024 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see [https://www.gnu.org/licenses/]
 */","*
 * @author <NAME>
 */"
"<fim_prefix>ogram is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see [https://www.gnu.org/licenses/]
 */

/**<fim_suffix>
@NonNullApi
@NonNullFields
package cn.taketoday.util.concurrent;

import cn.taketoday.lang.NonNullApi;
import cn.taketoday.lang.NonNullFields;<fim_middle>","
 * Useful generic {@code java.util.concurrent.Future} extensions.
 */","
 * 线程工具类
 *
 * @author Taketoday
 */"
"<fim_prefix>
package com.elusivehawk.caelum.render.glsl;

import com.elusivehawk.caelum.render.gl.GLConst;

/**<fim_suffix>
public enum GLSLEnumShaderType
{
	VERTEX(GLConst.GL_VERTEX_SHADER),
	TESS(GLConst.GL_TESS_CONTROL_SHADER),
	EVAL(GLConst.GL_TESS_EVALUATION_SHADER),
	GEOM(GLConst.GL_GEOMETRY_SHADER),
	FRAG(GLConst.GL_FRAGMENT_SHADER),
	COMP(GLConst.GL_COMPUTE_SHADER);
	
	private final int gl;
	
	@SuppressWarnings(""unqualified-field-access"")
	GLSLEnumShaderType(int glenum)
	{
		gl = glenum;
		
	}
	
	p<fim_middle>","
 * 
 * 
 * 
 * @author Elusivehawk
 */","
 * 
 * @author Elusivehawk
 */"
"<fim_prefix>/*<fim_suffix>
package se.inera.intyg.webcert.notification_sender.mocks;

import java.time.LocalDateTime;
import se.riv.clinicalprocess.healthcond.certificate.types.v3.HsaId;

/**
 * Created by eriklupander on 2016-07-06.
 */
public class NotificationStubEntry {

    public String intygsId;
    public String handelseTyp;
    public LocalDateTime handelseTid;
    public HsaId userId;

    public Noti<fim_middle>","
 * Copyright (C) 2024 Inera AB (http://www.inera.se)
 *
 * This file is part of sklintyg (https://github.com/sklintyg).
 *
 * sklintyg is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * sklintyg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by eriklupander on 2016-07-06.
 */"
"<fim_prefix>ARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package se.inera.intyg.webcert.notification_sender.mocks;

import java.time.LocalDateTime;
import se.riv.clinicalprocess.healthcond.certificate.types.v3.HsaId;

/**<fim_suffix>
public class NotificationStubEntry {

    public String intygsId;
    public String handelseTyp;
    public LocalDateTime handelseTid;
    public HsaId userId;

    public NotificationStubEntry(String intygsId, String handelseTyp,
        LocalDateTime handelseTid, HsaId userId) {
        this.intygsId = intygsId;
        this.handelseTyp = handelseTyp;
        this.handelseTid = hand<fim_middle>","
 * Created by eriklupander on 2016-07-06.
 */","
 *
 * @author <NAME> <<EMAIL>>
 */"
"<fim_prefix>package com.mk.examples.collection.util;

import com.mk.examples.collection.list.LinkedList;
import com.mk.examples.collection.list.Node;

import java.util.Objects;

/**<fim_suffix>
public class LinkedListUtils {

    private LinkedListUtils() {

    }

    /**
     * This method is used for creating a simple abstraction layer for merging two Linked List operation
     *
     * @param firstList  which is the first Linked List
     * @param secondList which is the second Linked List
     * @param <T>        which implement Comparable to ensure that T c<fim_middle>","
 * This class holds utilities for performing Linked List operations
 */","
 * This class is used for creating a simple abstraction layer for"
"<fim_prefix>firstList, LinkedList<T> secondList) {
        LinkedList<T> linkedList = new LinkedList<>();
        Node<T> node = performMerge(firstList.getHead(), secondList.getHead());
        while (!Objects.isNull(node)) {
            T value = node.getValue();
            linkedList.insert(value);
            node = node.getNext();
        }
        return linkedList;
    }

    /**<fim_suffix>
    private static <T extends Comparable<T>> Node<T> performMerge(Node<T> firstNode, Node<T> secondNode) {
        if (Objects.isNull(firstNode)) {
            return secondNode;
        }
        if (Objects.isNull(secondNode)) {
            return firstNode;
        }
        boolean compareResult = firstNode.getValue().compareTo(secondNode.getValue()) <= 0;
        if (com<fim_middle>","
     * This method is used to perform actually recursion merging operation
     *
     * @param firstNode  this node is must be the head node of the first linked list
     * @param secondNode this node is must be the head node of the second linked list
     * @param <T>        which implement Comparable to ensure that T can be compared to perform merge operation
     * @return Node<T>   which is the head node of the new merged linked list
     */","
     * Performs the merge of two linked lists.
     *
     * @param firstList the first list
     * @param secondList the second list
     * @param <T> the type of the elements in the list
     * @return the merged list
     */"
"<fim_prefix>package com.mk.examples.collection.util;

import com.mk.examples.collection.list.LinkedList;
import com.mk.examples.collection.list.Node;

import java.util.Objects;

/**
 * This class holds utilities for performing Linked List operations
 */
public class LinkedListUtils {

    private LinkedListUtils() {

    }

    /**<fim_suffix>
    public static <T extends Comparable<T>> LinkedList<T> merge(LinkedList<T> firstList, LinkedList<T> secondList) {
        LinkedList<T> linkedList = new LinkedList<>();
        Node<T> node = performMerge(firstList.getHead(), secondList.getHead());
        while (!Objects.isNull(node)) {
            T value = node.getValue();
            linkedList.insert(value);
           <fim_middle>","
     * This method is used for creating a simple abstraction layer for merging two Linked List operation
     *
     * @param firstList  which is the first Linked List
     * @param secondList which is the second Linked List
     * @param <T>        which implement Comparable to ensure that T can be compared to perform merge operation
     * @return LinkedList<T> return the new LinkedList which is merged these two input Linked Lists
     */","
     * This method performs the merge of two linked lists
     *
     * @param firstList                                                                                            "
"<fim_prefix>/*<fim_suffix>
package jjsp.jde;

import java.net.*;
import java.io.*;
import java.util.*;

import javafx.application.*;
import javafx.geometry.*;

import javafx.scene.*;
import javafx.stage.*;
import javafx.scene.paint.*;
import javafx.scene.image.*;
import javafx.scene.layout.*;
import javafx.scene.control.*;
import javafx.scene.input.*;
import javafx.scene.shape.*;
import javafx.scene.web.*;

imp<fim_middle>","
JJSP - Java and Javascript Server Pages 
Copyright (C) 2016 Global Travel Ventures Ltd

This program is free software: you can redistribute it and/or modify 
it under the terms of the GNU General Public License as published by 
the Free Software Foundation, either version 3 of the License, or 
(at your option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
for more details.

You should have received a copy of the GNU General Public License along with 
this program. If not, see http://www.gnu.org/licenses/.
*/","*
 * @author <NAME>
 */"
"<fim_prefix>package uav.manager.check;

/**<fim_suffix>
public interface Find<T> {
    public T apply();
}
<fim_middle>","
 * @author Marcio S. Arantes
 * @see version 3.0.0
 */","
 * Created by dds on 2017/2/16.
 */"
"<fim_prefix>package builtin.time;

import builtin.BuiltinSub;
import java.util.Calendar;
import java.util.GregorianCalendar;
import gui.Heap;
import gui.MintException;
import gui.Pointer;
import gui.SmartList;

/**<fim_suffix>
public class Month extends BuiltinSub {

    @Override
    public Pointer apply(SmartList<Pointer> args) throws MintException {
        return Heap.allocateInt(new GregorianCalendar().get(Calendar.MONTH) +
                                1);
    }
    
}
<fim_middle>","
 *
 * @author Oliver Chu
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package org.ujmp.core.export.destination;

import java.io.Writer;

import org.ujmp.core.Matrix;

public abstract class AbstractMatrixWriterExportDestination extends AbstractMatrixExportDestination
		implements MatrixWriterExportDestination {

	private final Writer writer;

	public AbstractMatrixWriterExportDestination(Matrix matrix, Writer writer) {
		super(matrix);
		<fim_middle>","
 * Copyright (C) 2008-2015 by Holger Arndt
 *
 * This file is part of the Universal Java Matrix Package (UJMP).
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership and licensing.
 *
 * UJMP is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * UJMP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with UJMP; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 */","*
	 * @param writer
	 *            the writer to set
	 */"
"<fim_prefix>/*<fim_suffix>
package org.n52.io.type.count;


import org.n52.io.handler.IoHandlerFactory;
import org.n52.io.handler.IoProcessChain;
import org.n52.io.response.dataset.Data;
import org.n52.io.response.dataset.count.CountDatasetOutput;
import org.n52.io.response.dataset.count.CountValue;

public class CountIoFactory extends IoHandlerFactory<CountDatasetOutput, CountValue> {

    @Override
    public<fim_middle>","
 * Copyright (C) 2013-2022 52Â°North Spatial Information Research GmbH
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * If the program is linked with libraries which are licensed under one of
 * the following licenses, the combination of the program with the linked
 * library is not considered a ""derivative work"" of the program:
 *
 *     - Apache License, version 2.0
 *     - Apache Software License, version 1.0
 *     - GNU Lesser General Public License, version 3
 *     - Mozilla Public License, versions 1.0, 1.1 and 2.0
 *     - Common Development and Distribution License (CDDL), version 1.0
 *
 * Therefore the distribution of the program linked with libraries licensed
 * under the aforementioned licenses, is permitted by the copyright holders
 * if the distribution is compliant with both the GNU General Public License
 * version 2 and the aforementioned licenses.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 */","*
 * Copyright 2013 52°North Initiative for Geospatial Open Source Software GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>/*<fim_suffix>
package com.sonar.orchestrator.junit4;

import org.junit.ClassRule;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class OrchestratorRuleMediumTest {

  @ClassRule
  public static OrchestratorRule ORCHESTRATOR = OrchestratorRule.builderEnv()
    .setSonarVersion(""LATEST_RELEASE"")
    .build();

  @Test
  public void serverShouldBeStarted() {
    assertTrue(<fim_middle>","
 * Orchestrator - JUnit 4
 * Copyright (C) 2011-2024 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */","*
 * Copyright 2016-2017 SonarSource SA
 * <p>
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.kapua.service.authentication.credential;

import org.eclipse.kapua.KapuaException;
import org.eclipse.kapua.model.id.KapuaId;
import org.eclipse.kapua.service.user.User;
import org.eclipse.kapua.storage.KapuaUpdatableEntityRepository;
import org.eclipse.kapua.storage.TxContext;

/**
 * {@link Credential} {@link KapuaUpdatableEntityRepository} definition.
 *
 * @sin<fim_middle>","*****************************************************************************
 * Copyright (c) 2016, 2022 Eurotech and/or its affiliates and others
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Eurotech - initial API and implementation
 *******************************************************************************/","
 * @since 0.1
 */"
"<fim_prefix>Id;
import org.eclipse.kapua.service.user.User;
import org.eclipse.kapua.storage.KapuaUpdatableEntityRepository;
import org.eclipse.kapua.storage.TxContext;

/**
 * {@link Credential} {@link KapuaUpdatableEntityRepository} definition.
 *
 * @since 2.0.0
 */
public interface CredentialRepository
        extends KapuaUpdatableEntityRepository<Credential, CredentialListResult> {


    /**<fim_suffix>
    CredentialListResult findByUserId(TxContext txContext, KapuaId scopeId, KapuaId userId) throws KapuaException;
}
<fim_middle>","
     * Gets the {@link Credential}s filtered by the {@link User#getId()}.
     *
     * @param txContext The {@link TxContext}
     * @param scopeId The {@link Credential#getScopeId()}
     * @param userId The {@link User#getId()}
     * @return The {@link CredentialListResult}
     * @throws KapuaException
     * @since 2.0.0
     */","
     * Find {@link Credential} by {@link KapuaId} scope and user id.
     *
     * @param txContext                                                                                    "
"<fim_prefix>on
 *******************************************************************************/
package org.eclipse.kapua.service.authentication.credential;

import org.eclipse.kapua.KapuaException;
import org.eclipse.kapua.model.id.KapuaId;
import org.eclipse.kapua.service.user.User;
import org.eclipse.kapua.storage.KapuaUpdatableEntityRepository;
import org.eclipse.kapua.storage.TxContext;

/**<fim_suffix>
public interface CredentialRepository
        extends KapuaUpdatableEntityRepository<Credential, CredentialListResult> {


    /**
     * Gets the {@link Credential}s filtered by the {@link User#getId()}.
     *
     * @param txContext The {@link TxContext}
     * @param scopeId The {@link Credential#getScopeId()}
     * @param userId The {@link User#getId()}
     * @return The {@link<fim_middle>","
 * {@link Credential} {@link KapuaUpdatableEntityRepository} definition.
 *
 * @since 2.0.0
 */","
 * The {@link CredentialRepository} interface.
 *
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package org.dice_research.topicmodeling.utils.corpus.properties;

import org.dice_research.topicmodeling.algorithms.VocabularyContaining;
import org.dice_research.topicmodeling.utils.vocabulary.Vocabulary;


public class CorpusVocabulary extends AbstractSimpleCorpusProperty<Vocabulary> implements VocabularyContaining {

    private static final long serialVersionUID = -711560<fim_middle>","
 * This file is part of topicmodeling.datatypes.
 *
 * topicmodeling.datatypes is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * topicmodeling.datatypes is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with topicmodeling.datatypes.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * @author <NAME>
 * 
 */"
"<fim_prefix>/*<fim_suffix>
package com.jmetest.physicstut.lesson9.controller;

import com.jmetest.physicstut.lesson9.model.Item;
import com.jmex.physics.PhysicsNode;
import com.jmex.physics.StaticPhysicsNode;
import com.jmex.physics.geometry.PhysicsBox;

/**
 * Handles creation of platforms.
 * @author Irrisor
 */
class PlatformHandler implements GameLogic.ItemHandler {
    private GameLogic gameLo<fim_middle>","
 * Copyright (c) 2005-2007 jME Physics 2
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 *  * Neither the name of 'jME Physics 2' nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */","*
 * Handles creation of platforms.
 * @author Irrisor
 */"
"<fim_prefix> collision geometry
        // it is recommended that you always do this without using the visual representation, this is especially
        // useful when you want to have a server without visualization
        PhysicsBox box = itemPhysics.createBox( null );
        // set size f the box
        box.getLocalScale().set( 10, 0.5f, 10 );
        return itemPhysics;
    }
}

/*<fim_suffix>

<fim_middle>","
 * $Log$
 */","*
 * @author normen"
"<fim_prefix>CLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.jmetest.physicstut.lesson9.controller;

import com.jmetest.physicstut.lesson9.model.Item;
import com.jmex.physics.PhysicsNode;
import com.jmex.physics.StaticPhysicsNode;
import com.jmex.physics.geometry.PhysicsBox;

/**<fim_suffix>
class PlatformHandler implements GameLogic.ItemHandler {
    private GameLogic gameLogic;

    public PlatformHandler( GameLogic gameLogic ) {
        this.gameLogic = gameLogic;
    }

    public PhysicsNode createPhysicsFor( Item item ) {
        // create dynamic physics node for the item
        StaticPhysicsNode itemPhysics = gameLogic.getPhysicsSpace().createStaticNode<fim_middle>","
 * Handles creation of platforms.
 * @author Irrisor
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix> org.eclipse.swt.events.SelectionListener;

import it.albertus.routerlogger.gui.RouterLoggerGui;

public abstract class ClearSelectionListener implements SelectionListener {

	protected final RouterLoggerGui gui;

	public ClearSelectionListener(final RouterLoggerGui gui) {
		this.gui = gui;
	}

	@Override
	public final void widgetDefaultSelected(final SelectionEvent e) {/*<fim_suffix>}

}
<fim_middle>", Ignore */, Nothing to
"<fim_prefix>U General Public License
 * along with WekaDeeplearning4j.  If not, see <https://www.gnu.org/licenses/>.
 *
 * LossBinaryXENT.java
 * Copyright (C) 2017-2018 University of Waikato, Hamilton, New Zealand
 */

package weka.dl4j.lossfunctions;

import java.util.Enumeration;
import org.nd4j.shade.jackson.annotation.JsonTypeName;
import weka.core.Option;
import weka.core.OptionHandler;

/**<fim_suffix>
@JsonTypeName(""BinaryXENT"")
public class LossBinaryXENT extends LossFunction<org.nd4j.linalg.lossfunctions.impl.LossBinaryXENT>
    implements OptionHandler {

  private static final long serialVersionUID = 8156148534145717548L;

  /**
   * Returns an enumeration describing the available options.
   *
   * @return an enumeration of all the available options.
   */
  @Override
  public<fim_middle>","
 * A version of DeepLearning4j's LossBinaryXENT that implements WEKA option handling.
 *
 * @author Eibe Frank
 */","
 * Loss function for binary classification using the XENT loss function.
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package weka.dl4j.lossfunctions;

import java.util.Enumeration;
import org.nd4j.shade.jackson.annotation.JsonTypeName;
import weka.core.Option;
import weka.core.OptionHandler;

/**
 * A version of DeepLearning4j's LossBinaryXENT that implements WEKA option handling.
 *
 * @author Eibe Frank
 */
@JsonTypeName(""BinaryXENT"")
public class LossBinaryXENT extends LossFunction<org.nd4j.lina<fim_middle>","
 * WekaDeeplearning4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * WekaDeeplearning4j is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with WekaDeeplearning4j.  If not, see <https://www.gnu.org/licenses/>.
 *
 * LossBinaryXENT.java
 * Copyright (C) 2017-2018 University of Waikato, Hamilton, New Zealand
 */","*
 * @author <NAME>
 */"
"<fim_prefix>ptions.
   */
  @Override
  public Enumeration<Option> listOptions() {

    return Option.listOptionsForClass(this.getClass()).elements();
  }

  /**
   * Gets the current settings of the Classifier.
   *
   * @return an array of strings suitable for passing to setOptions
   */
  @Override
  public String[] getOptions() {

    return Option.getOptions(this, this.getClass());
  }

  /**<fim_suffix>
  public void setOptions(String[] options) throws Exception {

    Option.setOptions(options, this, this.getClass());
  }

  @Override
  public void initializeBackend() {
    backend = new org.nd4j.linalg.lossfunctions.impl.LossBinaryXENT();
  }
}
<fim_middle>","
   * Parses a given list of options.
   *
   * @param options the list of options as an array of strings
   * @throws Exception if an option is not supported
   */","
   * Sets the current settings of the Classifier.
   *
   * @param options the options to set
   * @throws Exception
   */"
"<fim_prefix>
import weka.core.OptionHandler;

/**
 * A version of DeepLearning4j's LossBinaryXENT that implements WEKA option handling.
 *
 * @author Eibe Frank
 */
@JsonTypeName(""BinaryXENT"")
public class LossBinaryXENT extends LossFunction<org.nd4j.linalg.lossfunctions.impl.LossBinaryXENT>
    implements OptionHandler {

  private static final long serialVersionUID = 8156148534145717548L;

  /**<fim_suffix>
  @Override
  public Enumeration<Option> listOptions() {

    return Option.listOptionsForClass(this.getClass()).elements();
  }

  /**
   * Gets the current settings of the Classifier.
   *
   * @return an array of strings suitable for passing to setOptions
   */
  @Override
  public String[] getOptions() {

    return Option.getOptions(this, this.getClass());
  }

  /**
   * Parses <fim_middle>","
   * Returns an enumeration describing the available options.
   *
   * @return an enumeration of all the available options.
   */","
   * Instantiates a new loss binary x ent.
   */"
"<fim_prefix>ssBinaryXENT>
    implements OptionHandler {

  private static final long serialVersionUID = 8156148534145717548L;

  /**
   * Returns an enumeration describing the available options.
   *
   * @return an enumeration of all the available options.
   */
  @Override
  public Enumeration<Option> listOptions() {

    return Option.listOptionsForClass(this.getClass()).elements();
  }

  /**<fim_suffix>
  @Override
  public String[] getOptions() {

    return Option.getOptions(this, this.getClass());
  }

  /**
   * Parses a given list of options.
   *
   * @param options the list of options as an array of strings
   * @throws Exception if an option is not supported
   */
  public void setOptions(String[] options) throws Exception {

    Option.setOptions(options, this, this.getClass<fim_middle>","
   * Gets the current settings of the Classifier.
   *
   * @return an array of strings suitable for passing to setOptions
   */","
   * Returns the list of options as an array of strings.
   *
   * @return the list of options as an array of strings
 "
"<fim_prefix>/*<fim_suffix>

package examples.chap04.features03;

import examples.chap04.features03.gui.GUIFacade;

public abstract class GameMode {

    protected GUIFacade gui;
    
    private Main parent;

    public void setParent(Main parent) {
        this.parent = parent;
    }    
    
    public void setGUI(GUIFacade gui) {
        this.gui = gui;
    }

    public void setGameMode(GameMode mode) {
   <fim_middle>","
 * Code example from the book ""Learn Design Patterns with Game Programming""
 * Copyrights Â© 2019 Philippe-Henri Gosselin. All rights reserved.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package com.monogramm.starter.utils;
<fim_middle>","
 * The main package of the starter application Utilities.
 * 
 * @author madmath03
 */","
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.kapua.integration.misc;

import org.eclipse.kapua.locator.KapuaLocator;
import org.eclipse.kapua.model.id.KapuaId;
import org.eclipse.kapua.qa.markers.junit.JUnitTests;
import org.eclipse.kapua.service.authorization.access.AccessInfoCreator;
import org.eclipse.kapua.service.authorization.access.AccessInfoFactory;
import org.eclipse.kapua.service.authorization.acces<fim_middle>","*****************************************************************************
 * Copyright (c) 2021, 2022 Eurotech and/or its affiliates and others
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Eurotech - initial API and implementation
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Callable;

import scala.concurrent.Await;
import scala.concurrent.ExecutionContext;
import scala.concurrent.duration.Duration;
import scala.concurrent.Future;

import akka.dispatch.Futures;
import akka.util.Timeout;
import static akka.dispatch.Futures.future;
import static akka.dispatch.Futures.sequence;

/**<fim_suffix>
class LocalDemoJ extends LocalScavengerAppJ {
    ScavengerFunction<Integer> f0 = new ScavengerFunction<Integer>()
    {
        // Value computation is being applied to can be accessed using ""this.value""
        // To submit a new job this.ctx.submit(...) can be used
        public Integer call() 
        {
            try
            {
                Thread.sleep(3000);
           <fim_middle>","
 * A basic example of how to create a Local Scavenger Java application.
 */","
 * A simple demo of the Scavenger class.
 */"
"<fim_prefix>/*<fim_suffix>

package viviano.cantu.novakey.core.utils.drawing.drawables;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;

import viviano.cantu.novakey.core.utils.drawing.Draw;

/**
 * Created by Viviano on 12/26/2015.
 */
public class BMPDrawable implements Drawable {

    <fim_middle>","
 * NovaKey - An alternative touchscreen input method
 * Copyright (C) 2019  Viviano Cantu
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>
 *
 * Any questions about the program or source may be directed to <strellastudios@gmail.com>
 */","*
 * Created by Viviano on 12/26/2015.
 */"
"<fim_prefix> * Any questions about the program or source may be directed to <strellastudios@gmail.com>
 */

package viviano.cantu.novakey.core.utils.drawing.drawables;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;

import viviano.cantu.novakey.core.utils.drawing.Draw;

/**<fim_suffix>
public class BMPDrawable implements Drawable {

    Bitmap bmp;


    public BMPDrawable(Resources res, int id) {
        bmp = BitmapFactory.decodeResource(res, id);
    }


    @Override
    public void draw(float x, float y, float size, Paint p, Canvas canvas) {
        Draw.bitmap(bmp, x, y, size / bmp.getWidth(), p, canvas);
    }
}
<fim_middle>","
 * Created by Viviano on 12/26/2015.
 */","
 * Created by Cantu on 10/10/2017."
"<fim_prefix>bmitting the request continues running.
            AnalysisQueueRunnable analysisQueueRunnable = new AnalysisQueueRunnable( analysisRequest );
            //Add the request to the queu
            requestQueueThreadPoolExecutor.execute(analysisQueueRunnable);
        }
        else {
            analysisRequest.addError(new Error( ErrorType.CORE_SHUTDOWN ) );
        }
    }


    /**<fim_suffix>
    public static void start() {

        running = true;
        Executors.newFixedThreadPool(MAX_CONCURRENT_ANALYSES);

    }
   
    /**
     * Shuts down the analyzer.
     */
    public static void shutDown() {

        running = false;

        List<Runnable> queue = requestQueueThreadPoolExecutor.shutdownNow();
        //Loop through the list of pending analyses.
        for ( <fim_middle>","
     *Starts up the executor and enables analysis requests to be submitted.
     */","
     * Starts the analyzer.
     */"
"<fim_prefix>t getMaxConcurrentAnalysesPerTask() {
        return MAX_CONCURRENT_ANALYSES_PER_TASK;
    }
    /**
     * Returns  the maximum number of samples allowed to be processed simultaneously per task.
     * @return maximum number of individuals processed per task.
     */
    public static int getMaxConcurrentSamplesPerTask() {
        return MAX_CONCURRENT_SAMPLES_PER_TASK;
    }

    /**<fim_suffix>
    public static int getQueueLength() {
        return analysisQueue.size();
    }

    /**
     * Submits an analysis request.
     * @param analysisRequest <code>AnalysisRequest</code> containing necessary information for the analysis.
     */
    public static void requestAnalysis( AnalysisRequest analysisRequest ) {

        if ( !running) {
            analysisRequest.addError(n<fim_middle>","
     * Returns the current length of the analysis queue.
     * @return the size of the queue
     */","
     * Returns the number of samples currently in the analysis queue.
     * @return number of samples currently in the analysis queue."
"<fim_prefix>UESTS, MAX_QUEUE_TIME, TimeUnit.MINUTES, analysisQueue);

    private static boolean running = false;

    /**
     * Returns the maximum number of analyzes allowed to be performed parallel per task.
     * @return maximum number of analyzes allowed per task.
     */
    public static int getMaxConcurrentAnalysesPerTask() {
        return MAX_CONCURRENT_ANALYSES_PER_TASK;
    }
    /**<fim_suffix>
    public static int getMaxConcurrentSamplesPerTask() {
        return MAX_CONCURRENT_SAMPLES_PER_TASK;
    }

    /**
     * Returns the current length of the analysis queue.
     * @return the size of the queue
     */
    public static int getQueueLength() {
        return analysisQueue.size();
    }

    /**
     * Submits an analysis request.
     * @param analysisRequest <code><fim_middle>","
     * Returns  the maximum number of samples allowed to be processed simultaneously per task.
     * @return maximum number of individuals processed per task.
     */","
     * Returns the maximum number of samples allowed to be performed parallel per task.
     * @return maximum number of samples allowed per task.
     */"
"<fim_prefix>
     * @return maximum number of individuals processed per task.
     */
    public static int getMaxConcurrentSamplesPerTask() {
        return MAX_CONCURRENT_SAMPLES_PER_TASK;
    }

    /**
     * Returns the current length of the analysis queue.
     * @return the size of the queue
     */
    public static int getQueueLength() {
        return analysisQueue.size();
    }

    /**<fim_suffix>
    public static void requestAnalysis( AnalysisRequest analysisRequest ) {

        if ( !running) {
            analysisRequest.addError(new Error( ErrorType.CORE_SHUTDOWN ) );
            return;
        }

        //If the queue thread pool is not shut down, add the requested analysis to the queue.
        if ( !requestQueueThreadPoolExecutor.isShutdown() ) {
            //Create <fim_middle>","
     * Submits an analysis request.
     * @param analysisRequest <code>AnalysisRequest</code> containing necessary information for the analysis.
     */","
     * Returns the current number of tasks in the analysis queue.
     * @return the number of tasks in the queue
     */"
"<fim_prefix>unnable>();

    private static final ExecutorService analysisExecutorService = Executors.newFixedThreadPool(MAX_CONCURRENT_ANALYSES);
    private static final ThreadPoolExecutor requestQueueThreadPoolExecutor = new ThreadPoolExecutor(MAX_CONCURRENT_REQUESTS, MAX_CONCURRENT_REQUESTS, MAX_QUEUE_TIME, TimeUnit.MINUTES, analysisQueue);

    private static boolean running = false;

    /**<fim_suffix>
    public static int getMaxConcurrentAnalysesPerTask() {
        return MAX_CONCURRENT_ANALYSES_PER_TASK;
    }
    /**
     * Returns  the maximum number of samples allowed to be processed simultaneously per task.
     * @return maximum number of individuals processed per task.
     */
    public static int getMaxConcurrentSamplesPerTask() {
        return MAX_CONCURRENT_SAMPLES_PER<fim_middle>","
     * Returns the maximum number of analyzes allowed to be performed parallel per task.
     * @return maximum number of analyzes allowed per task.
     */","
     * Starts the analysis engine.
     */"
"<fim_prefix>utor.execute(analysisQueueRunnable);
        }
        else {
            analysisRequest.addError(new Error( ErrorType.CORE_SHUTDOWN ) );
        }
    }


    /**
     *Starts up the executor and enables analysis requests to be submitted.
     */
    public static void start() {

        running = true;
        Executors.newFixedThreadPool(MAX_CONCURRENT_ANALYSES);

    }
   
    /**<fim_suffix>
    public static void shutDown() {

        running = false;

        List<Runnable> queue = requestQueueThreadPoolExecutor.shutdownNow();
        //Loop through the list of pending analyses.
        for ( int i = 0; i < queue.size(); i++ ) {
            AnalysisRequest analysisRequest = ((AnalysisQueueRunnable)queue.get(i)).getAnalysisRequest();
            analysisRequest.addError(<fim_middle>","
     * Shuts down the analyzer.
     */","
     *Shuts down the executor.
     */"
"<fim_prefix>package com.genomen.core;

import com.genomen.core.Error.ErrorType;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**<fim_suffix>
public class AnalysisExecutor {
    private static final int MAX_CONCURRENT_ANALYSES_PER_TASK = Configuration.getConfiguration().getMaxConcurrentAnalysesPerTask();
    private static final int MAX_CONCURRENT_SAMPLES_PER_TASK = Configuration.getConfiguration().getMaxConcurrentIndividualsPerTask();
    private static final int MAX_CONCURRENT_ANALYSES = Configuration.getConfiguration().g<fim_middle>","
 * Manages analysis queues and executes analyses
 * @author ciszek
 */","
 * Executes analyses in parallel.
 *
 * @author <NAME> <<"
"<fim_prefix>/*<fim_suffix>
package com.sa.osgi.main;

import com.sa.osgi.system.ServiceFactory;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.jetty.security.HashLoginService;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.webapp.WebAppContext;
import org.osgi.framework.BundleContext;

/**
 *
 * @author maochuanli
 */
public class JettyServerThread extends <fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */"
"<fim_prefix> choose Tools | Templates
 * and open the template in the editor.
 */
package com.sa.osgi.main;

import com.sa.osgi.system.ServiceFactory;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.eclipse.jetty.security.HashLoginService;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.webapp.WebAppContext;
import org.osgi.framework.BundleContext;

/**<fim_suffix>
public class JettyServerThread extends Thread{
    
    private BundleContext systemCtx = null;
    private Server jettyServer = null;
    
    public JettyServerThread(BundleContext ctx){
        systemCtx = ctx;
    }
    
    @Override
            public void run() {
                //1. Creating the server on port 8080
                ServiceFactory.INSTANCE.init(systemCtx);

    <fim_middle>","
 *
 * @author maochuanli
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package com.jana.android.app;

import android.content.Context;
import android.content.SharedPreferences;

import com.jana.android.core.R;
import com.jana.android.utils.DeviceInfo;
import com.jana.android.utils.Logger;

import java.util.Date;
import java.util.Locale;

/**
 * Settings is the responsible for manipulating app settings for all different
 * states
 *
 * @author IslamSamak <fim_middle>","
 * Copyright (C) 2013 OneTeam (IslamSamak : islamsamak01@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * Created by <NAME> on 10/12/2015.
 */"
"<fim_prefix>plied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.jana.android.app;

import android.content.Context;
import android.content.SharedPreferences;

import com.jana.android.core.R;
import com.jana.android.utils.DeviceInfo;
import com.jana.android.utils.Logger;

import java.util.Date;
import java.util.Locale;

/**<fim_suffix>
public abstract class AbstractSettings {

    protected static AbstractSettings sInstance;

    protected final String PREFERENCE_NAME;

    protected AbstractSettings(Context context) {
        PREFERENCE_NAME = context.getPackageName() + ""_preferences"";
    }

    protected void init(Context context) {
        Logger.v(""Settings.init()"");

        loadDefaults();
    }

    protecte<fim_middle>","
 * Settings is the responsible for manipulating app settings for all different
 * states
 *
 * @author IslamSamak : islamsamak01@gmail.com
 */","
 * Abstract class for settings.
 *
 * @author <NAME>
 */"
"<fim_prefix>  PREFERENCE_NAME = context.getPackageName() + ""_preferences"";
    }

    protected void init(Context context) {
        Logger.v(""Settings.init()"");

        loadDefaults();
    }

    protected void loadDefaults() {

        sInstance.setInitTime(sInstance.getInitTime());

        sInstance.setDeviceId(getDeviceId());

        sInstance.setLocale(sInstance.getLocale());
    }

    /*<fim_suffix>
    private SharedPreferences getSharedPreferences() {

        return AbstractApplication.getApplication()
                .getSharedPreferences(PREFERENCE_NAME, Context.MODE_PRIVATE);
    }

    public boolean contains(int id) {

        String key = AbstractApplication.getApplication().getString(id);

        return contains(key);
    }

    public boolean contains(String key) {

 <fim_middle>",-------- HELPER METHODS --------*/,"*
    "
"<fim_prefix>package tc.oc.commons.core.util;

import java.lang.invoke.MethodHandle;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.util.function.Supplier;
import javax.annotation.Nullable;
import javax.inject.Provider;

import tc.oc.commons.core.proxy.MethodHandleDispatcherBase;

/**<fim_suffix>
public abstract class MethodHandleInvoker extends MethodHandleDispatcherBase implements InvocationHandler {

    @Override
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
        return dispatch(proxy, method, args, () -> { throw new NoSuchMethodError(); });
    }

    public static MethodHandleInvoker dynamic(Provider<?> targeter) {
        ret<fim_middle>","
 * Forwards all method calls to the object returned from {@link #targetFor(Method)},
 * through a bound {@link MethodHandle}. The handle is created (through
 * reflection) and bound every time a method is called, which is inefficient
 * and defeats the purpose of using handles in the first place. Subclasses
 * implement caching at different points in the call process.
 */","
 * A method handle invoker that can be used to dynamically dispatch method calls to a target.
 *
 * @since 1.0
 */"
"<fim_prefix>/*<fim_suffix>
package org.mifos.tools;

import org.mifos.tools.config.PPIUploaderConfiguration;
import org.springframework.boot.SpringApplication;

public class PPIUploader {

    public PPIUploader() {
        super();
    }

    public static void main(String[] args) {
        SpringApplication.run(PPIUploaderConfiguration.class, args);
    }
}
<fim_middle>","
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.hadroncfy.jphp.jzend.ins;

import com.hadroncfy.jphp.jzend.VM;

/**<fim_suffix>
public class FetchClassIns implements Instruction {
    public static final int SELF = 0;
    public static final int PARENT = 1;
    public static final int STATIC = 2;

    public int type;

    private static final String[] s = {""self"",""parent"",""static""};

    public FetchClassIns(int type){
        this.type = type;
    }

    @Override
    public void exec(VM vm) {
        //TODO<fim_middle>","
 * Created by cfy on 16-9-2.
 */","
 * FetchClassIns
 *
 * @author hadroncfy"
"<fim_prefix>/*<fim_suffix>
package uk.me.parabola.mkgmap.osmstyle.eval;

/**
 * Less than.  For population speeds etc.
 * @author Steve Ratcliffe
 */
public class LTOp extends NumericOp {
	public LTOp() {
		setType(LT);
	}

	protected boolean doesCompare(int result) {
		return result < 0;
	}
}<fim_middle>","
 * Copyright (C) 2008 Steve Ratcliffe
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License version 2 as
 *  published by the Free Software Foundation.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 * 
 * Author: Steve Ratcliffe
 * Create date: 09-Nov-2008
 */","
 * Copyright (C) 2011 <NAME>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and"
"<fim_prefix>tware Foundation.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 * 
 * Author: Steve Ratcliffe
 * Create date: 09-Nov-2008
 */
package uk.me.parabola.mkgmap.osmstyle.eval;

/**<fim_suffix>
public class LTOp extends NumericOp {
	public LTOp() {
		setType(LT);
	}

	protected boolean doesCompare(int result) {
		return result < 0;
	}
}<fim_middle>","
 * Less than.  For population speeds etc.
 * @author Steve Ratcliffe
 */","
 * Less than operator.
 * 
 * @author Steve Ratcliffe
 * @version 1"
"<fim_prefix>/**<fim_suffix>
package org.mythtv.db;

import static android.provider.BaseColumns._ID;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

/**
 * @author Daniel Frey
 * 
 */
public class MythtvDatabaseManager {

	private static final String <fim_middle>","
 * This file is part of MythTV Android Frontend
 *
 * MythTV Android Frontend is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MythTV Android Frontend is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MythTV Android Frontend.  If not, see <http://www.gnu.org/licenses/>.
 *
 * This software can be found at <https://github.com/MythTV-Clients/MythTV-Android-Frontend/>
 */","
 * @author Daniel Frey
 * 
 */"
"<fim_prefix>*
 * This software can be found at <https://github.com/MythTV-Clients/MythTV-Android-Frontend/>
 */
package org.mythtv.db;

import static android.provider.BaseColumns._ID;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.util.Log;

/**<fim_suffix>
public class MythtvDatabaseManager {

	private static final String TAG = MythtvDatabaseManager.class.getSimpleName();

	private DatabaseHelper helper;
	private SQLiteDatabase db;

	/**
	 * @param context
	 */
	public MythtvDatabaseManager( final Context context ) {
		Log.v( TAG, ""initialize : enter"" );

		this.helper = new DatabaseHelper( context );

		Log.v( TAG, ""initialize : exit"" <fim_middle>","
 * @author Daniel Frey
 * 
 */","
 * DatabaseManager
 * 
 * @author <"
"<fim_prefix>/*<fim_suffix>

package net.mystipvp.holobroadcast.holograms;

import org.bukkit.Location;
import org.bukkit.entity.Player;

public abstract class Hologram {

    protected final Player viewer;
    protected final double height;
    protected Location location;

    public Hologram(Location location, Player viewer, double height) {
        this.location = location;
        this.viewer = viewer;
    <fim_middle>","
 * Copyright (c) 2020-2022.
 * This project (HoloBroadcast) and this file is part of Romain Storaï (_Rolyn) and Nathan Djian-Martin (DevKrazy). It is under GPLv3 License.
 * Some contributors may have contributed to this file.
 *
 * HoloBroadcast cannot be copied and/or distributed without the express premission of Romain Storaï (_Rolyn) and Nathan Djian-Martin (DevKrazy)
 */","*
 * Created by mystic on 11/10/15.
 */"
"<fim_prefix>ocation;
import org.bukkit.entity.Player;

public abstract class Hologram {

    protected final Player viewer;
    protected final double height;
    protected Location location;

    public Hologram(Location location, Player viewer, double height) {
        this.location = location;
        this.viewer = viewer;
        this.height = height;
    }

    /*
    GETTERS
     */

    /**<fim_suffix>
    public Location getLocation() {
        return location;
    }

    /**
     * Changes the location of the Hologram.
     *
     * @param location new Location
     */
    public void setLocation(Location location) {
        this.location = location;
        this.move(location);
    }

    /**
     * @return the height of the hologram
     */
    public double getHeight() {
      <fim_middle>","
     * @return the current location of the hologram
     */","
     * @return the viewer of the hologram
     */"
"<fim_prefix>n;
    }

    /**
     * Changes the location of the Hologram.
     *
     * @param location new Location
     */
    public void setLocation(Location location) {
        this.location = location;
        this.move(location);
    }

    /**
     * @return the height of the hologram
     */
    public double getHeight() {
        return height;
    }

    /*
    SETTERS
     */

    /**<fim_suffix>
    public Player getViewer() {
        return viewer;
    }

    /*
    METHODS
     */

    /**
     * Creates the Hologram.
     */
    public abstract void create();

    /**
     * Removes the Hologram.
     */
    public abstract void destroy();

    /**
     * Called when the Hologram is updated (every tick).
     */
    public abstract void update();

    /**
     * Moves the <fim_middle>","
     * @return the player viewing the hologram
     */","
     * Sets the height of the hologram.
     *"
"<fim_prefix>cation) {
        this.location = location;
        this.move(location);
    }

    /**
     * @return the height of the hologram
     */
    public double getHeight() {
        return height;
    }

    /*
    SETTERS
     */

    /**
     * @return the player viewing the hologram
     */
    public Player getViewer() {
        return viewer;
    }

    /*
    METHODS
     */

    /**<fim_suffix>
    public abstract void create();

    /**
     * Removes the Hologram.
     */
    public abstract void destroy();

    /**
     * Called when the Hologram is updated (every tick).
     */
    public abstract void update();

    /**
     * Moves the Hologram to a new location.
     *
     * @param newLocation the new Location
     */
    public abstract void move(Location newLocatio<fim_middle>","
     * Creates the Hologram.
     */","
     * Creates the Hologram.
     */"
"<fim_prefix>lograms;

import org.bukkit.Location;
import org.bukkit.entity.Player;

public abstract class Hologram {

    protected final Player viewer;
    protected final double height;
    protected Location location;

    public Hologram(Location location, Player viewer, double height) {
        this.location = location;
        this.viewer = viewer;
        this.height = height;
    }

    /*<fim_suffix>

    /**
     * @return the current location of the hologram
     */
    public Location getLocation() {
        return location;
    }

    /**
     * Changes the location of the Hologram.
     *
     * @param location new Location
     */
    public void setLocation(Location location) {
        this.location = location;
        this.move(location);
    }

    /**
     * @return the <fim_middle>","
    GETTERS
     */","*
     * Moves the hologram to the"
"<fim_prefix>le height;
    protected Location location;

    public Hologram(Location location, Player viewer, double height) {
        this.location = location;
        this.viewer = viewer;
        this.height = height;
    }

    /*
    GETTERS
     */

    /**
     * @return the current location of the hologram
     */
    public Location getLocation() {
        return location;
    }

    /**<fim_suffix>
    public void setLocation(Location location) {
        this.location = location;
        this.move(location);
    }

    /**
     * @return the height of the hologram
     */
    public double getHeight() {
        return height;
    }

    /*
    SETTERS
     */

    /**
     * @return the player viewing the hologram
     */
    public Player getViewer() {
        return viewer;
  <fim_middle>","
     * Changes the location of the Hologram.
     *
     * @param location new Location
     */","
     * @param location the new location of the hologram
     */"
"<fim_prefix> void setLocation(Location location) {
        this.location = location;
        this.move(location);
    }

    /**
     * @return the height of the hologram
     */
    public double getHeight() {
        return height;
    }

    /*
    SETTERS
     */

    /**
     * @return the player viewing the hologram
     */
    public Player getViewer() {
        return viewer;
    }

    /*<fim_suffix>

    /**
     * Creates the Hologram.
     */
    public abstract void create();

    /**
     * Removes the Hologram.
     */
    public abstract void destroy();

    /**
     * Called when the Hologram is updated (every tick).
     */
    public abstract void update();

    /**
     * Moves the Hologram to a new location.
     *
     * @param newLocation the new Location
     */
   <fim_middle>","
    METHODS
     */","*
     * @param viewer the"
"<fim_prefix>   /**
     * @return the height of the hologram
     */
    public double getHeight() {
        return height;
    }

    /*
    SETTERS
     */

    /**
     * @return the player viewing the hologram
     */
    public Player getViewer() {
        return viewer;
    }

    /*
    METHODS
     */

    /**
     * Creates the Hologram.
     */
    public abstract void create();

    /**<fim_suffix>
    public abstract void destroy();

    /**
     * Called when the Hologram is updated (every tick).
     */
    public abstract void update();

    /**
     * Moves the Hologram to a new location.
     *
     * @param newLocation the new Location
     */
    public abstract void move(Location newLocation);
}
<fim_middle>","
     * Removes the Hologram.
     */","
     * Destroys the Hologram.
   "
"<fim_prefix>ht() {
        return height;
    }

    /*
    SETTERS
     */

    /**
     * @return the player viewing the hologram
     */
    public Player getViewer() {
        return viewer;
    }

    /*
    METHODS
     */

    /**
     * Creates the Hologram.
     */
    public abstract void create();

    /**
     * Removes the Hologram.
     */
    public abstract void destroy();

    /**<fim_suffix>
    public abstract void update();

    /**
     * Moves the Hologram to a new location.
     *
     * @param newLocation the new Location
     */
    public abstract void move(Location newLocation);
}
<fim_middle>","
     * Called when the Hologram is updated (every tick).
     */","
     * Updates the Hologram.
     */"
"<fim_prefix>on() {
        return location;
    }

    /**
     * Changes the location of the Hologram.
     *
     * @param location new Location
     */
    public void setLocation(Location location) {
        this.location = location;
        this.move(location);
    }

    /**
     * @return the height of the hologram
     */
    public double getHeight() {
        return height;
    }

    /*<fim_suffix>

    /**
     * @return the player viewing the hologram
     */
    public Player getViewer() {
        return viewer;
    }

    /*
    METHODS
     */

    /**
     * Creates the Hologram.
     */
    public abstract void create();

    /**
     * Removes the Hologram.
     */
    public abstract void destroy();

    /**
     * Called when the Hologram is updated (every tick).
     <fim_middle>","
    SETTERS
     */","*
     * Changes the height of the Ho"
"<fim_prefix>
    GETTERS
     */

    /**
     * @return the current location of the hologram
     */
    public Location getLocation() {
        return location;
    }

    /**
     * Changes the location of the Hologram.
     *
     * @param location new Location
     */
    public void setLocation(Location location) {
        this.location = location;
        this.move(location);
    }

    /**<fim_suffix>
    public double getHeight() {
        return height;
    }

    /*
    SETTERS
     */

    /**
     * @return the player viewing the hologram
     */
    public Player getViewer() {
        return viewer;
    }

    /*
    METHODS
     */

    /**
     * Creates the Hologram.
     */
    public abstract void create();

    /**
     * Removes the Hologram.
     */
    public abstrac<fim_middle>","
     * @return the height of the hologram
     */","
     * @return the current height of the hologram
    "
"<fim_prefix>e hologram
     */
    public Player getViewer() {
        return viewer;
    }

    /*
    METHODS
     */

    /**
     * Creates the Hologram.
     */
    public abstract void create();

    /**
     * Removes the Hologram.
     */
    public abstract void destroy();

    /**
     * Called when the Hologram is updated (every tick).
     */
    public abstract void update();

    /**<fim_suffix>
    public abstract void move(Location newLocation);
}
<fim_middle>","
     * Moves the Hologram to a new location.
     *
     * @param newLocation the new Location
     */","
     * Moves the Hologram to a new location.
     *
     * @param newLocation The new location.
    "
"<fim_prefix>/*<fim_suffix>
package org.sonar.css.parser.less;

import org.junit.Test;
import org.sonar.css.parser.LexicalGrammar;
import org.sonar.plugins.css.api.tree.less.LessMixinCallTree;

import static org.fest.assertions.Assertions.assertThat;

public class LessMixinCallTreeTest extends LessTreeTest {

  public LessMixinCallTreeTest() {
    super(LexicalGrammar.LESS_MIXIN_CALL);
  }

  @Test
  public void<fim_middle>","
 * SonarQube CSS / SCSS / Less Analyzer
 * Copyright (C) 2013-2017 David RACODON
 * mailto: david.racodon@gmail.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */","*
 * Copyright (C) 2013 <NAME>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>/**<fim_suffix>
package org.openhab.binding.globalcache.internal.command;

import java.util.concurrent.LinkedBlockingQueue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.openhab.binding.globalcache.internal.GlobalCacheBindingConstants.CommandType;
import org.openhab.core.library.types.OnOffType;
import org.openhab.core.thing.Thing;
import org.slf4j.Logger;
import org.slf<fim_middle>","
 * Copyright (c) 2010-2021 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>inding.globalcache.internal.command;

import java.util.concurrent.LinkedBlockingQueue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.openhab.binding.globalcache.internal.GlobalCacheBindingConstants.CommandType;
import org.openhab.core.library.types.OnOffType;
import org.openhab.core.thing.Thing;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**<fim_suffix>
public class CommandGetstate extends AbstractCommand {

    private final Logger logger = LoggerFactory.getLogger(CommandGetstate.class);

    private OnOffType state;

    public CommandGetstate(Thing thing, LinkedBlockingQueue<RequestMessage> requestQueue, String mod, String con) {
        super(thing, requestQueue, ""getstate"", CommandType.COMMAND);
        deviceCommand = ""getstate<fim_middle>","
 * The {@link CommandGetstate} class implements the GlobalCache getstate command, which retrieves the
 * current state of the contact closure on the device.
 *
 * @author Mark Hilbush - Initial contribution
 */","
 * Command to get the state of a device.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.hadroncfy.jphp.jzend.compile;

/**<fim_suffix>
public class RegMgr {
    private int treg_ptr = 0;
    public RegMgr(){
        treg_ptr = 0;
    }
    public int requestTempReg(){
        return treg_ptr++;
    }
    public void freeTempReg(int t){
        if(t == treg_ptr - 1){
            treg_ptr--;
        }
        else
            throw new AssertionError(""unexpected reg index"");
    }
}
<fim_middle>","
 * Created by cfy on 16-8-2.
 */","
 * Created by florian on 12/12/15.
 */"
"<fim_prefix>/*<fim_suffix>
package org.example.prevo.open.adapter.dto;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.OneToOne;

import org.apache.commons.lang3.builder.ToStringBuilder;

@Entity
public class CapitalTransferInformationDTO {

    @Id
    private long id;

    @OneToOne(cascade = CascadeType.ALL)
    private AddressDTO <fim_middle>","============================================================================*
 * Copyright (c) 2018 - Prevo-System AG and others.
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License, v. 2.0 are satisfied: GNU General Public License, version 3
 * with the GNU Classpath Exception which is
 * available at https://www.gnu.org/software/classpath/license.html.
 * 
 * SPDX-License-Identifier: EPL-2.0 OR GPL-3.0 WITH Classpath-exception-2.0
 * 
 * Contributors:
 *     Prevo-System AG - initial API and implementation
 *===========================================================================*/","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package com.bigdata.ganglia;

/**
 * Decoder interface for ganglia wire format messages.
 */
public interface IGangliaMessageDecoder {

	/**
	 * Decode a Ganglia message as received from a datagram packet.
	 * 
	 * @param data
	 *            The data.
	 * @param off
	 *            The offset of the first byte to decode.
	 * @param len
	 *            The #of bytes to decode.
	 * 
	 * @<fim_middle>","
   Copyright (C) SYSTAP, LLC 2006-2012.  All rights reserved.

   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/","*
 * Decoder interface for ganglia wire format messages.
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>ache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package com.bigdata.ganglia;

/**<fim_suffix>
public interface IGangliaMessageDecoder {

	/**
	 * Decode a Ganglia message as received from a datagram packet.
	 * 
	 * @param data
	 *            The data.
	 * @param off
	 *            The offset of the first byte to decode.
	 * @param len
	 *            The #of bytes to decode.
	 * 
	 * @return The decoded record.
	 */
	IGangliaMessage decode(byte[] data, int off, int len);

}
<fim_middle>","
 * Decoder interface for ganglia wire format messages.
 */","
 * Interface for decoding Ganglia messages.
 * 
 *"
"<fim_prefix>stributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package com.bigdata.ganglia;

/**
 * Decoder interface for ganglia wire format messages.
 */
public interface IGangliaMessageDecoder {

	/**<fim_suffix>
	IGangliaMessage decode(byte[] data, int off, int len);

}
<fim_middle>","
	 * Decode a Ganglia message as received from a datagram packet.
	 * 
	 * @param data
	 *            The data.
	 * @param off
	 *            The offset of the first byte to decode.
	 * @param len
	 *            The #of bytes to decode.
	 * 
	 * @return The decoded record.
	 */","
	 * Decode a message from the given byte array.
	 * 
	 * @param data
	 *            the byte array to decode from
	 * @param off
	 *            the offset into the byte array
	 * @param len
	 *            the number of bytes to decode
	 * @return the decoded message
	 */"
"<fim_prefix>/*<fim_suffix>
package org.sikongsphere.ifc.model.schema.resource.geometry.entity;

import org.sikongsphere.ifc.common.annotation.IfcClass;
import org.sikongsphere.ifc.common.annotation.IfcDeriveParameter;
import org.sikongsphere.ifc.common.annotation.IfcParserConstructor;
import org.sikongsphere.ifc.common.enumeration.IfcLayer;
import org.sikongsphere.ifc.common.enumeration.IfcType;
import org.siko<fim_middle>","
 * Copyright 2022 SikongSphere
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of the
 * GNU General Public License version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
*/","*
 * @author <NAME>
 * @date 2019/6/28
 */"
"<fim_prefix>eParameter;
import org.sikongsphere.ifc.common.annotation.IfcParserConstructor;
import org.sikongsphere.ifc.common.enumeration.IfcLayer;
import org.sikongsphere.ifc.common.enumeration.IfcType;
import org.sikongsphere.ifc.model.IfcAbstractClass;
import org.sikongsphere.ifc.model.datatype.SET;
import org.sikongsphere.ifc.model.schema.resource.geometry.definedtypes.IfcDimensionCount;

/**<fim_suffix>
@IfcClass(layer = IfcLayer.RESOURCE, type = IfcType.ENTITY)
public class IfcCurveBoundedPlane extends IfcBoundedSurface {
    private IfcPlane basisSurface;
    private IfcCurve outerBoundary;
    private SET<IfcCurve> innerBoundaries;
    @IfcDeriveParameter
    private IfcDimensionCount dim;

    @IfcParserConstructor
    public IfcCurveBoundedPlane(
        IfcPlane basisSurface,
 <fim_middle>","
 * The curve bounded surface is a parametric surface with curved boundaries defined by one or more boundary curves.
 * @author zaiyuan
 * @date 2022/12/17 11:40
 */","
 * @author <NAME>
 * @email <EMAIL>
 */"
"<fim_prefix>/*<fim_suffix>

package examples.chap05.ai04;

import examples.chap05.ai04.gui.GUIFacade;

public abstract class GameMode {

    protected GUIFacade gui;
    
    private Main parent;

    public void setParent(Main parent) {
        this.parent = parent;
    }    
    
    public void setGUI(GUIFacade gui) {
        this.gui = gui;
    }

    public void setGameMode(GameMode mode) {
        parent.<fim_middle>","
 * Code example from the book ""Learn Design Patterns with Game Programming""
 * Copyrights Â© 2019 Philippe-Henri Gosselin. All rights reserved.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package neatlogic.framework.deploy.dto.job;

import neatlogic.framework.util.Md5Util;

/**
 * @author lvzk
 * @since 2021/7/15 11:46
 **/
public class DeployJobContentVo {
    private String hash;
    private String content;

    public DeployJobContentVo() {
    }

    public DeployJobContentVo(String content) {
        this.hash = Md5Util.encryptMD5(content);
        this.content =<fim_middle>","Copyright (C) 2024  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.*/","*
 * @author lvzk
 * @since 2021/7/15 11:46
 **/"
"<fim_prefix>without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.*/

package neatlogic.framework.deploy.dto.job;

import neatlogic.framework.util.Md5Util;

/**<fim_suffix>
public class DeployJobContentVo {
    private String hash;
    private String content;

    public DeployJobContentVo() {
    }

    public DeployJobContentVo(String content) {
        this.hash = Md5Util.encryptMD5(content);
        this.content = content;
    }

    public String getHash() {
        return hash;
    }

    public void setHash(String hash) {
        this.hash = hash;<fim_middle>","
 * @author lvzk
 * @since 2021/7/15 11:46
 **/","
 * @author <NAME>
 *
 */"
"<fim_prefix>lformedURLException ex) {
                log.error(""Downloading of page failed: invalid URL"", ex);
            } catch (FileNotFoundException ex) {
                log.error(""Downloading of page failed: local File not found"", ex);
            } catch (IOException ex) {
                log.error(""Downloading of page failed: Access error"", ex);
            }
        }
    }
    
    /**<fim_suffix>
    protected static void downloadFile(URL url, String folder, String filename) throws FileNotFoundException, IOException {
        ReadableByteChannel rbc = Channels.newChannel(url.openStream());
        FileOutputStream fos = new FileOutputStream(new File(folder, filename));
        fos.getChannel().transferFrom(rbc, 0, 1 << 24);
        fos.flush();
        fos.close();
        rbc<fim_middle>","
     * Downloads a single file to the specified folder with the specified filename
     * @param url the URL from where the file is downloaded
     * @param folder the folder where the file is stored in
     * @param filename the name the file shall have
     * @throws FileNotFoundException thrown if the root folder does not exist
     * @throws IOException thrown if the destination file is locked
     */","
     * Downloads a file from a URL to a local file.
     * @param url the URL to download from
     * @param folder the folder to download to
     * @param filename the filename to download to
     * @throws FileNotFoundException if the file could not be found
     * @throws IOException if the file could not be downloaded
     */"
"<fim_prefix>levant pages from the wot wiki and
 * make them available offline, so parsing errors do not force you to download
 * stuff again.
 * This method is highly recommended, as it may save a lot of bandwidth...
 * 
 * @author Sebastian Straub <sebastian-straub@gmx.net>
 */
public class Download {
    
    private static final Logger log = LoggerFactory.getLogger(Download.class);
    
    /**<fim_suffix>
    protected static final Crawler cr = new Crawler();
    
    public static final String folderLists = ""lists"";
    public static final String folderModules = ""modules"";
    public static final String folderTanks = ""tanks"";
    
    /**
     * Downloads all relevant wiki pages (tank overview, modules and tanks)
     * to the specified folder
     * @param downloadFolder the folder w<fim_middle>"," the crawler, used to retrieve and generate the download urls */","
     * Downloads all relevant wiki pages ("
"<fim_prefix>ivate static final Logger log = LoggerFactory.getLogger(Download.class);
    
    /** the crawler, used to retrieve and generate the download urls */
    protected static final Crawler cr = new Crawler();
    
    public static final String folderLists = ""lists"";
    public static final String folderModules = ""modules"";
    public static final String folderTanks = ""tanks"";
    
    /**<fim_suffix>
    public static void downloadAll(String downloadFolder) {
        
        System.out.println(""Downloading tank overview pages... "");
        downloadTankLists(downloadFolder + ""/"" + folderLists);
        
        System.out.println(""\nDownloading module overview pages... "");
        downloadModules(downloadFolder + ""/"" + folderModules);
        
        System.out.println(""\nDownlo<fim_middle>","
     * Downloads all relevant wiki pages (tank overview, modules and tanks)
     * to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */","
     * Downloads all tank overview pages.
     * 
     * @param downloadFolder the folder to download the tank overview pages to
     */"
"<fim_prefix>

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.nx42.wotcrawler.xml.Crawler;

/**<fim_suffix>
public class Download {
    
    private static final Logger log = LoggerFactory.getLogger(Download.class);
    
    /** the crawler, used to retrieve and generate the download urls */
    protected static final Crawler cr = new Crawler();
    
    public static final String folderLists = ""lists"";
    public static final String folderModules = ""modules"";
    public static final String<fim_middle>","
 * This class is used to download all relevant pages from the wot wiki and
 * make them available offline, so parsing errors do not force you to download
 * stuff again.
 * This method is highly recommended, as it may save a lot of bandwidth...
 * 
 * @author Sebastian Straub <sebastian-straub@gmx.net>
 */","
 * Download the files from the given urls.
 * 
 * @author <NAME> <<EMAIL>>
 */"
"<fim_prefix>nloadFolder) {
        downloadPages(downloadFolder, cr.getModuleOverviewURLs());
    }
    
    /**
     * Downloads the single tank detail pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */
    public static void downloadTanks(String downloadFolder) {
        downloadPages(downloadFolder, cr.getTankURLs());
    }
    
    /**<fim_suffix>
    public static void downloadPages(String downloadFolder, List<URL> pages) {
        for (URL page : pages) {
            String fsName = Crawler.siteToFileName(page.getPath().substring(1));
            try {
                System.out.println(String.format(""Downloading page '%s' to file '%s'"", page.getPath(), fsName));
                if(!new File(downloadFolder).exists()) {
      <fim_middle>","
     * Downloads the files / pages from the specified URLs to the specified folder
     * Converts the name so it does not contain any illegal characters such as / or \
     * @param downloadFolder the folder where the files / pages are stored
     * @param pages the files / pages, as a list of URLs
     */","
     * Downloads the single tank detail pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */"
"<fim_prefix>/*<fim_suffix>
package de.nx42.wotcrawler.util;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import de.<fim_middle>","
 * Copyright (C) 2012 Sebastian Straub <sebastian-straub@gmx.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME> <<EMAIL>>
 *
 */"
"<fim_prefix>..."");
        downloadTanks(downloadFolder + ""/"" + folderTanks);
        
    }
    
    /**
     * Downloads the tank overview pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */
    public static void downloadTankLists(String downloadFolder) {
        downloadPages(downloadFolder, cr.getTankOverviewURLs());
    }
    
    /**<fim_suffix>
    public static void downloadModules(String downloadFolder) {
        downloadPages(downloadFolder, cr.getModuleOverviewURLs());
    }
    
    /**
     * Downloads the single tank detail pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */
    public static void downloadTanks(String downloadFolder) {
        downloadPages(dow<fim_middle>","
     * Downloads the module overview pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */","
     * Downloads the module overview pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */"
"<fim_prefix> pages... "");
        downloadTankLists(downloadFolder + ""/"" + folderLists);
        
        System.out.println(""\nDownloading module overview pages... "");
        downloadModules(downloadFolder + ""/"" + folderModules);
        
        System.out.println(""\nDownloading single tank detail pages..."");
        downloadTanks(downloadFolder + ""/"" + folderTanks);
        
    }
    
    /**<fim_suffix>
    public static void downloadTankLists(String downloadFolder) {
        downloadPages(downloadFolder, cr.getTankOverviewURLs());
    }
    
    /**
     * Downloads the module overview pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */
    public static void downloadModules(String downloadFolder) {
        downloadPages(down<fim_middle>","
     * Downloads the tank overview pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */","
     * Downloads the tank overview pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */"
"<fim_prefix>lder) {
        downloadPages(downloadFolder, cr.getTankOverviewURLs());
    }
    
    /**
     * Downloads the module overview pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */
    public static void downloadModules(String downloadFolder) {
        downloadPages(downloadFolder, cr.getModuleOverviewURLs());
    }
    
    /**<fim_suffix>
    public static void downloadTanks(String downloadFolder) {
        downloadPages(downloadFolder, cr.getTankURLs());
    }
    
    /**
     * Downloads the files / pages from the specified URLs to the specified folder
     * Converts the name so it does not contain any illegal characters such as / or \
     * @param downloadFolder the folder where the files / pages are stored
     <fim_middle>","
     * Downloads the single tank detail pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */","
     * Downloads the tank overview pages to the specified folder
     * @param downloadFolder the folder where the html pages are stored
     */"
"<fim_prefix>lineComposite;
import org.eclipse.nebula.widgets.timeline.figures.detail.track.TrackFigure;
import org.eclipse.nebula.widgets.timeline.figures.detail.track.lane.LaneFigure;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

public class TimelineProgrammatic {

	protected Shell shell;

	/**<fim_suffix>
	public static void main(String[] args) {
		try {
			final TimelineProgrammatic window = new TimelineProgrammatic();
			window.open();
		} catch (final Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Open the window.
	 */
	public void open() {
		final Display display = Display.getDefault();
		createContents();
		shell.open();
		shell.layout();
		while (!shell.isDisposed()) {
	<fim_middle>","
	 * Launch the application.
	 *
	 * @param args
	 */","
	 * Launch the application.
	 * @param args
	 */"
"<fim_prefix>mmatic window = new TimelineProgrammatic();
			window.open();
		} catch (final Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Open the window.
	 */
	public void open() {
		final Display display = Display.getDefault();
		createContents();
		shell.open();
		shell.layout();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
	}

	/**<fim_suffix>
	protected void createContents() {
		shell = new Shell();
		shell.setSize(450, 300);
		shell.setText(""SWT Application"");
		shell.setLayout(new FillLayout(SWT.HORIZONTAL));

		populateControl(shell);
	}

	private void populateControl(Shell parent) {
		final TimelineComposite control = new TimelineComposite(parent, SWT.NONE);

		final ITimelineEvent event = ITimelineFactory.eINSTANCE.cr<fim_middle>","
	 * Create contents of the window.
	 */","
	 * Create contents of the window.
	 */"
"<fim_prefix>ipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

public class TimelineProgrammatic {

	protected Shell shell;

	/**
	 * Launch the application.
	 *
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			final TimelineProgrammatic window = new TimelineProgrammatic();
			window.open();
		} catch (final Exception e) {
			e.printStackTrace();
		}
	}

	/**<fim_suffix>
	public void open() {
		final Display display = Display.getDefault();
		createContents();
		shell.open();
		shell.layout();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
	}

	/**
	 * Create contents of the window.
	 */
	protected void createContents() {
		shell = new Shell();
		shell.setSize(450, 300);
		shell.setText(""SWT Applicati<fim_middle>","
	 * Open the window.
	 */","
	 * Open the window.
	 */"
"<fim_prefix>package de.kroesch.clt.internal;
import java.util.List;

import de.kroesch.clt.Command;
import de.kroesch.clt.Environment;
import de.kroesch.clt.HasArguments;

/**<fim_suffix>
public class Set implements Command, HasArguments {

	private Environment env;
	
	private List<String> args;
	
	public void run() {
		String key = args.get(0);
		String value = args.get(1);
		env.writer().printf(""%s: %s\n"", key, value);
		env.set(key, value);
	}

	public void setEnvironment(Environment env) {
		this.env = env;
	}
	
	@Override
	public String toString<fim_middle>","
 * Store a local variable into environment.
 * 
 * @author karsten
 *
 */","
 * Set a variable.
 * 
 * @author <NAME> (<EMAIL>)
 */"
"<fim_prefix>package com.staim.lightjson;

/**<fim_suffix>
@Deprecated
public interface JsonSerializable {
    /**
     * @return JSON representation of Object
     * @throws JsonException
     */
    public JsonElement toJSON() throws JsonException;
}
<fim_middle>","
 * Interface for JSON-serializable data objects.
 *
 */","
 * Interface for objects that can be serialized to JSON
 */"
"<fim_prefix>package com.staim.lightjson;

/**
 * Interface for JSON-serializable data objects.
 *
 */
@Deprecated
public interface JsonSerializable {
    /**<fim_suffix>
    public JsonElement toJSON() throws JsonException;
}
<fim_middle>","
     * @return JSON representation of Object
     * @throws JsonException
     */","
     * Serializes this object to a JSON element.
     *
     * @"
"<fim_prefix>/**<fim_suffix>

package com.xuggle.utils.sm;

import com.xuggle.utils.sm.State;

public class DoorStateAdapter extends State
{
    /** The door state adapter from which door states should be
     * derrived.  
     *
     * @param name the string name of the state.
     */

    public DoorStateAdapter(String name)
    {
      super(name);
    }

    public void open(DoorStateMachine sm)
    {
    }
<fim_middle>","*****************************************************************************
 * Copyright (c) 2008, 2010 Xuggle Inc.  All rights reserved.
 *  
 * This file is part of Xuggle-Utils.
 *
 * Xuggle-Utils is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Xuggle-Utils is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Xuggle-Utils.  If not, see <http://www.gnu.org/licenses/>.
 *******************************************************************************/","
 * @author <NAME> (aka Qudus)
 */"
"<fim_prefix>l Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Xuggle-Utils.  If not, see <http://www.gnu.org/licenses/>.
 *******************************************************************************/

package com.xuggle.utils.sm;

import com.xuggle.utils.sm.State;

public class DoorStateAdapter extends State
{
    /**<fim_suffix>

    public DoorStateAdapter(String name)
    {
      super(name);
    }

    public void open(DoorStateMachine sm)
    {
    }

    public void opened(DoorStateMachine sm)
    {
    }
    
    public void close(DoorStateMachine sm)
    {
    }

    public void closed(DoorStateMachine sm)
    {
    }
    
    public void unlock(DoorStateMachine sm, boolean hasKey)
    {
    }

    pub<fim_middle>"," The door state adapter from which door states should be
     * derrived.  
     *
     * @param name the string name of the state.
     */","
     * Constructor
     */"
"<fim_prefix>/*<fim_suffix>
package gradle4eclipse.actions;

import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import gradle4eclipse.model.TreeObject;
import gradle4eclipse.model.TreeParent;
import gradle4eclipse.view.RunCommand;
import gradle4eclipse.view.ViewContentProvider;

import org.eclipse.core.resources.IPro<fim_middle>","
Gradle4Eclipse Eclipse plugin
Copyright (C) 2013  Filip Muncan

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/","*
 * @author <NAME>
 *
 */"
"<fim_prefix>ice;

import a9.entity.article.Article;
import a9.entity.user.User;
import a9.manager.TencentCloudManager;
import a9.repository.ArticleRepository;
import a9.repository.UserRepository;
import com.tencentcloudapi.common.exception.TencentCloudSDKException;
import org.bson.types.ObjectId;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

/**<fim_suffix>
@Service
public class ArticleService {

    private final ArticleRepository articleRepository;

    private final UserRepository userRepository;

    private final TencentCloudManager tencentCloudManager;

    public ArticleService(ArticleRepository articleRepository,
                          UserRepository userRepository,
                          TencentCloudManager tencentCloudMan<fim_middle>","
 * @author tzq0301
 * @version 1.0
 */","
 * @author 海林
 */"
"<fim_prefix>package com.study.newsclient.listener;


import android.support.v7.widget.RecyclerView;

import com.yuxuan.common.adapter.recycler.absrecyclerview.ViewHolder;

/**<fim_suffix>

public interface OnChannelDragListener extends OnChannelListener {
    void onStarDrag(RecyclerView.ViewHolder baseViewHolder);

}
<fim_middle>","
 * Created by Administrator on 2017/1/5 0005.
 */","
 * Author : xiaoyu
 * Date : 2017/9/7"
"<fim_prefix>/*<fim_suffix>
package org.kew.rmf.reconciliation.ws;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import<fim_middle>","
 * Reconciliation and Matching Framework
 * Copyright © 2014 Royal Botanic Gardens, Kew
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * 
 * @author <NAME> (<EMAIL>)
 *
 */"
"<fim_prefix>ringframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

/**<fim_suffix>
@Controller
public class ConfigurationController {
	private static Logger logger = LoggerFactory.getLogger(ConfigurationController.class);

	@Autowired
	private ReconciliationService reconciliationService;

	@Autowired
	private BaseController baseController;

	private List<String> charsetNames = new ArrayList<>();

	public ConfigurationController() {
		// Initialise the list of availa<fim_middle>","
 * Administration, configuration information pages etc.
 */","
 * Controller for the configuration page.
 * 
"
"<fim_prefix>package com.lvack.MasterStats.Db.DataClasses;

import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.Data;

/**<fim_suffix>
@Data
@DynamoDBTable(tableName = ""championMastery"")
public class ChampionMasteryItem {
    @DynamoDBHashKey(attributeName = ""summonerKey"")
    private String summonerKey;
    @DynamoDBRangeKey(attributeName = ""championId"")
    private long championId;
    @DynamoDBIndexHashKey(attributeName = ""championPoints"", globalSecondaryIndexName = ""championPoints-chestGranted-index"")
  <fim_middle>","
 * ChampionMasteryItemClass for MasterStats
 *
 * @author Leon Vack
 */","
 * Created by <NAME> on 12/9/2014.
 */"
"<fim_prefix>/*<fim_suffix>
package org.sonatype.nexus.repository.search.index;

import java.util.Map;

import org.sonatype.goodies.testsupport.TestSupport;
import org.sonatype.nexus.repository.rest.SearchMapping;
import org.sonatype.nexus.repository.rest.SearchMappings;
import org.sonatype.nexus.repository.rest.api.RepositoryManagerRESTAdapter;
import org.sonatype.nexus.repository.rest.sql.SearchField;
import o<fim_middle>","
 * Sonatype Nexus (TM) Open Source Version
 * Copyright (c) 2008-present Sonatype, Inc.
 * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
 * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
 *
 * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. ""Sonatype"" and ""Sonatype Nexus"" are trademarks
 * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
 * Eclipse Foundation. All other trademarks are the property of their respective owners.
 */","*
 * @since 3.0
 */"
"<fim_prefix>/*<fim_suffix>
package se.uu.ub.cora.spider.extendedfunctionality.internal;

import static se.uu.ub.cora.spider.extendedfunctionality.ExtendedFunctionalityPosition.DELETE_AFTER;
import static se.uu.ub.cora.spider.extendedfunctionality.ExtendedFunctionalityPosition.DELETE_BEFORE;

import java.util.List;

import se.uu.ub.cora.spider.extendedfunctionality.ExtendedFunctionality;
import se.uu.ub.cora.spi<fim_middle>","
 * Copyright 2020, 2021, 2024 Uppsala University Library
 *
 * This file is part of Cora.
 *
 *     Cora is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Cora is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Cora.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package org.mobicents.protocols.ss7.map.service.lsm;

import java.io.IOException;
import java.util.ArrayList;

import org.mobicents.protocols.asn.AsnException;
import org.mobicents.protocols.asn.AsnInputStream;
import org.mobicents.protocols.asn.AsnOutputStream;
import org.mobicents.protocols.asn.Tag;
import org.mobicents.protocols.ss7.map.api.MAPException;
import org.mobicents.proto<fim_middle>","
 * TeleStax, Open Source Cloud Communications
 * Copyright 2011-2013, Telestax Inc and individual contributors
 * by the @authors tag.
 *
 * This program is free software: you can redistribute it and/or modify
 * under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * @author <NAME>
 */"
"<fim_prefix>ptionReason;
import org.mobicents.protocols.ss7.map.api.primitives.MAPPrivateExtension;
import org.mobicents.protocols.ss7.map.api.service.lsm.SLRArgExtensionContainer;
import org.mobicents.protocols.ss7.map.api.service.lsm.SLRArgPCSExtensions;
import org.mobicents.protocols.ss7.map.primitives.MAPPrivateExtensionImpl;
import org.mobicents.protocols.ss7.map.primitives.SequenceBase;

/**<fim_suffix>
public class SLRArgExtensionContainerImpl extends SequenceBase implements SLRArgExtensionContainer {

    private static final int _TAG_privateExtensionList = 0;
    private static final int _TAG_slr_Arg_PCS_Extensions = 1;

    private ArrayList<MAPPrivateExtension> privateExtensionList;
    private SLRArgPCSExtensions slrArgPcsExtensions;

    public SLRArgExtensionContainerImpl() {<fim_middle>","
 * @author amit bhayani
 * @author sergey vetyutnev
 *
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package org.openjdk.skara.bots.notify;

public class NonRetriableException extends Exception {
    private final Throwable cause;

    public NonRetriableException(Throwable cause) {
        this.cause = cause;
    }

    public Throwable cause() {
        return cause;
    }
}
<fim_middle>","
 * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>


package com.biglybt.core.global;

public interface
GlobalManagerEventListener
{
	public void
	eventOccurred(
		GlobalManagerEvent		event );
}
<fim_middle>","
 * Created on Jul 6, 2012
 * Created by Paul Gardner
 *
 * Copyright (C) Azureus Software, Inc, All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */","
 * Copyright (c) 2014 <NAME>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR"
"<fim_prefix>/*<fim_suffix>
package org.gitools.analysis.stats.test;

import com.google.common.collect.Lists;
import com.google.common.primitives.Doubles;
import org.apache.commons.math3.distribution.NormalDistribution;
import org.apache.commons.math3.exception.ConvergenceException;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.stat.StatUtils;
import org.apa<fim_middle>","
 * #%L
 * gitools-core
 * %%
 * Copyright (C) 2013 Universitat Pompeu Fabra - Biomedical Genomics group
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */","*
 * @author <NAME>
 */"
"<fim_prefix> 2 * oneTail;

        return new GroupComparisonResult(x.length + y.length, x.length, y.length, leftTail, rightTail, twoTail, mean1, mean2, U1, U2);

    }

    public static GroupComparisonResult getNullResult(int n, int n1, int n2) {
        return new GroupComparisonResult(n, n1, n2, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN);
    }

    /**<fim_suffix>
    private double[] concatenateSamples(final double[] x, final double[] y) {
        final double[] z = new double[x.length + y.length];

        System.arraycopy(x, 0, z, 0, x.length);
        System.arraycopy(y, 0, z, x.length, y.length);

        return z;
    }


    private double calculateOneTailPValue(final double Umin, final int n1, final int n2) throws ConvergenceException, <fim_middle>","
     * Concatenate the samples into one array.
     *
     * @param x first sample
     * @param y second sample
     * @return concatenated array
     */","
     * Calculates the p-value for the two-tailed test.
     *
     * @param Umin the minimum value of the U statistic
     * @param n1   the"
"<fim_prefix>s in the first x.length entries in z
         */
        for (int i = 0; i < x.length; ++i) {
            sumRankX += ranks[i];
        }

        /*
         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,
         * e.g. x, n1 is the number of observations in sample 1.
         */
        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;

        /*<fim_suffix>
        final double U2 = x.length * y.length - U1;

        final double Umin = FastMath.min(U1, U2);

        double oneTail = calculateOneTailPValue(Umin, x.length, y.length);

        boolean firstGreater = U1 > U2;

        // if U1 smaller use computed value for left tail
        double leftTail = firstGreater ? 1 - oneTail : oneTail;
        // if U2 smaller, computed value for<fim_middle>","
         * It can be shown that U1 + U2 = n1 * n2
         */","
         * U2 = n1 * (n1 + 1) - U1 where n1 is the number of observations in sample 2"
"<fim_prefix>ists.newArrayList(group2));

        if (x.length == 0 || y.length == 0) {
            getNullResult(x.length + y.length, x.length, y.length);
        }

        final double[] z = concatenateSamples(x, y);
        final double[] ranks = naturalRanking.rank(z);

        double mean1 = StatUtils.mean(x);
        double mean2 = StatUtils.mean(y);

        double sumRankX = 0;

        /*<fim_suffix>
        for (int i = 0; i < x.length; ++i) {
            sumRankX += ranks[i];
        }

        /*
         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,
         * e.g. x, n1 is the number of observations in sample 1.
         */
        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;

        /*
         * It can be shown that U1 + U2 = n1 * <fim_middle>","
         * The ranks for x is in the first x.length entries in ranks because x
         * is in the first x.length entries in z
         */","
         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,
         * e.g. x, n"
"<fim_prefix>uralRanking.rank(z);

        double mean1 = StatUtils.mean(x);
        double mean2 = StatUtils.mean(y);

        double sumRankX = 0;

        /*
         * The ranks for x is in the first x.length entries in ranks because x
         * is in the first x.length entries in z
         */
        for (int i = 0; i < x.length; ++i) {
            sumRankX += ranks[i];
        }

        /*<fim_suffix>
        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;

        /*
         * It can be shown that U1 + U2 = n1 * n2
         */
        final double U2 = x.length * y.length - U1;

        final double Umin = FastMath.min(U1, U2);

        double oneTail = calculateOneTailPValue(Umin, x.length, y.length);

        boolean firstGreater = U1 > U2;

        // if U1 small<fim_middle>","
         * U1 = R1 - (n1 * (n1 + 1)) / 2 where R1 is sum of ranks for sample 1,
         * e.g. x, n1 is the number of observations in sample 1.
         */","
         * The ranks for y is in the first y.length entries in ranks because y
         * is in the first y.length entries in z
         */"
"<fim_prefix>s(final double[] x, final double[] y) {
        final double[] z = new double[x.length + y.length];

        System.arraycopy(x, 0, z, 0, x.length);
        System.arraycopy(y, 0, z, x.length, y.length);

        return z;
    }


    private double calculateOneTailPValue(final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {

        /*<fim_suffix>
        final long n1n2prod = (long) n1 * n2;

        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
        final double EU = n1n2prod / 2.0;
        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;

        final double z = (Umin - EU) / FastMath.sqrt(VarU);

        // No try-catch or advertised exception because args are valid
        final Normal<fim_middle>"," long multiplication to avoid overflow (double not used due to efficiency
         * and to avoid precision loss)
         */","*
         * http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Algorithm
"
"<fim_prefix>package com.github.dozzatq.phoenix.tasks;

import android.support.annotation.NonNull;

import java.util.concurrent.Executor;

/**<fim_suffix>

class ProgressCompletionSource<PState> implements TaskQueueService<PState> {

    private Executor executor;
    private final Object mLock = new Object();
    private OnProgressListener<? super PState> pResultOnSuccessListener;
    private boolean keepSynced;

    ProgressCompletionSource(Executor executor, OnProgressListener<? super PState> pResultOnSuccessListener, boolean keepSyn<fim_middle>","
 * Created by Rodion Bartoshik on 10.06.2017.
 */","
 * Created by dozza on 11/12/2016.
 */"
"<fim_prefix>/*<fim_suffix>
package org.eclipse.scanning.test.event;

import org.eclipse.scanning.api.event.status.StatusBean;

public class FredStatusBean extends StatusBean {

}
<fim_middle>","-
 *******************************************************************************
 * Copyright (c) 2011, 2016 Diamond Light Source Ltd.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Matthew Gerring - initial API and implementation and/or initial documentation
 *******************************************************************************/","*
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package com.dickimawbooks.texparserlib.latex.glossaries;

import java.io.IOException;

import com.dickimawbooks.texparserlib.*;
import com.dickimawbooks.texparserlib.latex.*;

public class SetEntryCounter extends ControlSequence
{
   public SetEntryCounter()
   {
      this(""setentrycounter"");
   }

   public SetEntryCounter(String name)
   {
      super(name);
   }

   public Object <fim_middle>","
    Copyright (C) 2022 Nicola L.C. Talbot
    www.dickimaw-books.com

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/","*
 * Copyright (c) 2012 <NAME>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
"<fim_prefix>t result = (int) cairo_script_get_mode.invoke(handle());
            return ScriptMode.of(result);
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    private static final MethodHandle cairo_script_get_mode = Interop.downcallHandle(""cairo_script_get_mode"",
            FunctionDescriptor.of(ValueLayout.JAVA_INT, ValueLayout.ADDRESS));

    /**<fim_suffix>
    public void setMode(ScriptMode mode) {
        try {
            cairo_script_set_mode.invoke(handle(), mode.getValue());
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    private static final MethodHandle cairo_script_set_mode = Interop.downcallHandle(""cairo_script_set_mode"",
            FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, <fim_middle>","
     * Change the output mode of the script
     * 
     * @param mode the new mode
     * @since 1.12
     */","
     * Sets the script mode.
     *
     * @param mode the script mode
     */"
"<fim_prefix>ode mode) {
        try {
            cairo_script_set_mode.invoke(handle(), mode.getValue());
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    private static final MethodHandle cairo_script_set_mode = Interop.downcallHandle(""cairo_script_set_mode"",
            FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.JAVA_INT));

    /**<fim_suffix>
    public ScriptSurface createScriptSurface(Content content, double width, double height) {
        ScriptSurface surface;
        try {
            MemorySegment result = (MemorySegment) cairo_script_surface_create.invoke(handle(), content.getValue(), width,
                    height);
            surface = new ScriptSurface(result);
            MemoryCleaner.takeOwnership(surface.<fim_middle>","
     * Create a new surface that will emit its rendering through this script (output
     * device)
     * 
     * @param content the content of the surface
     * @param width   width in pixels
     * @param height  height in pixels
     * @return the newly created surface
     * @since 1.12
     */","
     * Creates a new script surface.
     *
     * @param content the content of the surface
     * @param width the width of the surface
     * @param height the height of the surface
     * @return the new script surface
     */"
"<fim_prefix>{
        Cairo.ensureInitialized();
    }

    /**
     * Constructor used internally to instantiate a java ScriptSurface object for a
     * native {@code cairo_device_t} instance
     * 
     * @param address the memory address of the native {@code cairo_device_t}
     *                instance
     */
    public Script(MemorySegment address) {
        super(address);
    }

    /**<fim_suffix>
    public static Script create(String filename) {
        Script script;
        try {
            try (Arena arena = Arena.ofConfined()) {
                MemorySegment filenamePtr = Interop.allocateNativeString(filename, arena);
                MemorySegment result = (MemorySegment) cairo_script_create.invoke(filenamePtr);
                script = new Script(result);
              <fim_middle>","
     * Creates a output device for emitting the script, used when creating the
     * individual surfaces.
     * 
     * @param filename the name (path) of the file to write the script to
     * @return the newly created device
     * @since 1.12
     */","
     * Creates a new {@code Script} object from a file.
     * 
     * @param filename the name of the file to load
     * @return a new {@code Script} object
     */"
"<fim_prefix>ro;

import io.github.jwharm.cairobindings.ArenaCloseAction;
import io.github.jwharm.cairobindings.Interop;
import io.github.jwharm.cairobindings.MemoryCleaner;

import java.io.OutputStream;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;

/**<fim_suffix>
public class Script extends Device {

    static {
        Cairo.ensureInitialized();
    }

    /**
     * Constructor used internally to instantiate a java ScriptSurface object for a
     * native {@code cairo_device_t} instance
     * 
     * @param address the memory address of the native {@code cairo_device_t}
     *                instance
     */
    public Script(MemorySegment<fim_middle>","
 * Output device for use with a {@link ScriptSurface}.
 * <p>
 * The script surface provides the ability to render to a native script that
 * matches the cairo drawing model. The scripts can be replayed using tools
 * under the util/cairo-script directory, or with cairo-perf-trace.
 * 
 * @see Surface
 * @see ScriptSurface
 * @see Device
 * @since 1.12
 */","
 * A ScriptSurface is a surface that can be used to render scripts.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>ript surface provides the ability to render to a native script that
 * matches the cairo drawing model. The scripts can be replayed using tools
 * under the util/cairo-script directory, or with cairo-perf-trace.
 * 
 * @see Surface
 * @see ScriptSurface
 * @see Device
 * @since 1.12
 */
public class Script extends Device {

    static {
        Cairo.ensureInitialized();
    }

    /**<fim_suffix>
    public Script(MemorySegment address) {
        super(address);
    }

    /**
     * Creates a output device for emitting the script, used when creating the
     * individual surfaces.
     * 
     * @param filename the name (path) of the file to write the script to
     * @return the newly created device
     * @since 1.12
     */
    public static Script create(String filename) <fim_middle>","
     * Constructor used internally to instantiate a java ScriptSurface object for a
     * native {@code cairo_device_t} instance
     * 
     * @param address the memory address of the native {@code cairo_device_t}
     *                instance
     */","
     * Creates a new script device.
     * 
     * @param address the address of the script device
     * @since 1.12
     */"
"<fim_prefix>status() == Status.NO_MEMORY) {
            throw new RuntimeException(script.status().toString());
        }
        return script;
    }

    private static final MethodHandle cairo_script_create_for_stream = Interop.downcallHandle(
            ""cairo_script_create_for_stream"",
            FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));

    /**<fim_suffix>
    public void from(RecordingSurface recordingSurface) {
        try {
            cairo_script_from_recording_surface.invoke(handle(),
                    recordingSurface == null ? MemorySegment.NULL : recordingSurface.handle());
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
        if (status() == Status.NO_MEMORY) {
            throw new Run<fim_middle>","
     * Converts the record operations in recordingSurface into a script.
     * 
     * @param recordingSurface the recording surface to replay
     * @since 1.12
     */","
     * Creates a new script from a recording surface.
     *
     * @param recordingSurface the recording surface
     */"
"<fim_prefix>.NO_MEMORY) {
            throw new RuntimeException(surface.status().toString());
        }
        return surface;
    }

    private static final MethodHandle cairo_script_surface_create_for_target = Interop.downcallHandle(
            ""cairo_script_surface_create_for_target"",
            FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS));

    /**<fim_suffix>
    public void writeComment(String comment) {
        try {
            try (Arena arena = Arena.ofConfined()) {
                MemorySegment commentPtr = Interop.allocateNativeString(comment, arena);
                cairo_script_write_comment.invoke(handle(), commentPtr, comment == null ? 0 : comment.length());
            }
        } catch (Throwable e) {
            throw new Run<fim_middle>","
     * Emit a string verbatim into the script.
     * 
     * @param comment the string to emit
     * @since 1.12
     */","
     * Creates a new {@link ScriptSurface} for the given target.
     *
     * @param target the target to create the surface for
     * @param width"
"<fim_prefix>untimeException(surface.status().toString());
        }
        return surface;
    }

    private static final MethodHandle cairo_script_surface_create = Interop.downcallHandle(
            ""cairo_script_surface_create"", FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS,
                    ValueLayout.JAVA_INT, ValueLayout.JAVA_DOUBLE, ValueLayout.JAVA_DOUBLE));

    /**<fim_suffix>
    public ScriptSurface createScriptSurfaceForTarget(Surface target) {
        ScriptSurface surface;
        try {
            MemorySegment result = (MemorySegment) cairo_script_surface_create_for_target.invoke(handle(),
                    target == null ? MemorySegment.NULL : target.handle());
            surface = new ScriptSurface(result);
            MemoryCleaner.takeOwnershi<fim_middle>","
     * Create a proxy surface that will render to {@code target} and record the
     * operations to this script (output device).
     * 
     * @param target a target surface to wrap
     * @return the newly created surface.
     * @since 1.12
     */","
     * Creates a new ScriptSurface for the given target.
     *
     * @param target the target surface
     * @return the new ScriptSurface
     */"
"<fim_prefix>/*<fim_suffix>

package org.freedesktop.cairo;

import io.github.jwharm.cairobindings.ArenaCloseAction;
import io.github.jwharm.cairobindings.Interop;
import io.github.jwharm.cairobindings.MemoryCleaner;

import java.io.OutputStream;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.l<fim_middle>"," cairo-java-bindings - Java language bindings for cairo
 * Copyright (C) 2023 Jan-Willem Harmannij
 *
 * SPDX-License-Identifier: LGPL-2.1-or-later
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>w new RuntimeException(e);
        }
        if (status() == Status.NO_MEMORY) {
            throw new RuntimeException(status().toString());
        }
    }

    private static final MethodHandle cairo_script_from_recording_surface = Interop.downcallHandle(
            ""cairo_script_from_recording_surface"", FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.ADDRESS));

    /**<fim_suffix>
    public ScriptMode getMode() {
        try {
            int result = (int) cairo_script_get_mode.invoke(handle());
            return ScriptMode.of(result);
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    private static final MethodHandle cairo_script_get_mode = Interop.downcallHandle(""cairo_script_get_mode"",
            FunctionDesc<fim_middle>","
     * Queries the script for its current output mode.
     * 
     * @return the current output mode of the script
     * @since 1.12
     */","
     * Returns the mode of the script.
     *
     * @return the mode of the script
     */"
"<fim_prefix>w new RuntimeException(e);
        }
        if (script.status() == Status.NO_MEMORY) {
            throw new RuntimeException(script.status().toString());
        }
        return script;
    }

    private static final MethodHandle cairo_script_create = Interop.downcallHandle(""cairo_script_create"",
            FunctionDescriptor.of(ValueLayout.ADDRESS, ValueLayout.ADDRESS));

    /**<fim_suffix>
    public static Script create(OutputStream stream) {
        Script script;
        Arena arena = Arena.ofConfined();
        try {
            MemorySegment writeFuncPtr;
            if (stream != null) {
                WriteFunc writeFunc = stream::write;
                writeFuncPtr = writeFunc.toCallback(arena);
            } else {
                writeFuncPtr = MemorySegment.<fim_middle>","
     * Creates a output device for emitting the script, used when creating the
     * individual surfaces.
     * 
     * @param stream {@link OutputStream} passed the bytes written to the script
     * @return the newly created device
     * @since 1.12
     */","
     * Creates a new script.
     *
     * @param stream the stream to write the script to
     * @return the new script
     */"
"<fim_prefix>/**<fim_suffix>
package org.edits.engines.distance;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.edits.MapList;
import org.edits.distance.algorithm.EditDistanceAlgorithm;
import org.edits.distance.algorithm.OverlapDistance;
import org.edits.engines.EvaluationResult;
import org.edits.engines.EvaluationStatistics;
import org.edits.eng<fim_middle>","
 * Edits - Edit Distance Textual Entailment Suite Copyright (C) 2011 Milen
 * Kouylekov This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 3.0 of the License,
 * or (at your option) any later version. This library is distributed in the
 * hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU Lesser General Public License for more details. You should have
 * received a copy of the GNU Lesser General Public License along with this
 * library; if not, write to the Free Software Foundation, Inc., 51 Franklin
 * Street, Fifth Floor, Boston, MA 02110-1301 USA
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>anceAlgorithm;
import org.edits.distance.algorithm.OverlapDistance;
import org.edits.engines.EvaluationResult;
import org.edits.engines.EvaluationStatistics;
import org.edits.engines.thread.ThreadTrainedEngine;
import org.edits.engines.thread.ThreadExecutor;
import org.edits.etaf.AnnotatedEntailmentPair;
import org.edits.etaf.AnnotatedText;

import com.google.common.collect.Lists;

/**<fim_suffix>
public class DistanceEntailmentEngine extends ThreadTrainedEngine {
	public static final String DEFAULT_KEY = ""DEFAULT"";
	private static final long serialVersionUID = 1L;

	private static double confidence(double threshold, double score) {
		double confidence = score - threshold;
		if (score > 1)
			return 0;
		if (threshold > 1)
			return 0;
		if (confidence == 0)
			return 0;
		if (<fim_middle>","
 * @author Milen Kouylekov
 */","
 * This class is the main class of the library."
"<fim_prefix>/**<fim_suffix>
package de.dlr.sc.virsat.model.extension.cef.interfaces.model;

// *****************************************************************
// * Import Statements
// *****************************************************************


import de.dlr.sc.virsat.model.dvlm.concepts.Concept;
import de.dlr.sc.virsat.model.dvlm.categories.CategoriesFactory;
import de.dlr.sc.virsat.model.dv<fim_middle>","*****************************************************************************
 * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/","
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>

// *****************************************************************
// * Class Declaration
// *****************************************************************

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**<fim_suffix>	
public abstract class ADataInterfaceTypesTest {
	
	protected Concept concept;
	
	@Before
	public void setUp() throws Exception {
		String conceptXmiPluginPath = ""de.dlr.sc.virsat.model.extension.cef.interfaces/concept/concept.xmi"";
		concept = de.dlr.sc.virsat.concept.unittest.util.ConceptXmiLoader.loadConceptFromPlugin(conceptXmiPluginPath);
	}

	@After
	public void tear<fim_middle>","
 * Auto Generated Abstract Generator Gap Class
 * 
 * Don't Manually modify this class
 * 
 * 
 * 
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package org.cicirello.search.operators.permutations;

import static org.junit.jupiter.api.Assertions.*;

import org.cicirello.permutations.Permutation;
import org.junit.jupiter.api.*;

/** JUnit test cases for UOBX. */
public class UOBXTests extends SharedTestCodeOrderingCrossovers {

  // Insert @Test here to activate during testing to visually inspect cross results
  public void vi<fim_middle>","
 * Chips-n-Salsa: A library of parallel self-adaptive local search algorithms.
 * Copyright (C) 2002-2023 Vincent A. Cicirello
 *
 * This file is part of Chips-n-Salsa (https://chips-n-salsa.cicirello.org/).
 *
 * Chips-n-Salsa is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Chips-n-Salsa is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * JUnit test cases for UOBX.
 */"
"<fim_prefix>
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package org.cicirello.search.operators.permutations;

import static org.junit.jupiter.api.Assertions.*;

import org.cicirello.permutations.Permutation;
import org.junit.jupiter.api.*;

/**<fim_suffix>
public class UOBXTests extends SharedTestCodeOrderingCrossovers {

  // Insert @Test here to activate during testing to visually inspect cross results
  public void visuallyInspectCrossResult() {
    visualInspection(3, new UniformOrderBasedCrossover());
  }

  @Test
  public void testUOBXIdenticalParents() {
    UniformOrderBasedCrossover uobx = new UniformOrderBasedCrossover();
    <fim_middle>", JUnit test cases for UOBX. */,"
 * Tests for {@link UniformOrderBasedCrossover}.
"
"<fim_prefix>package edu.umn.ecology.populus.visual.matrixtable;

import edu.umn.ecology.populus.core.PopPreferencesStorage;
import edu.umn.ecology.populus.visual.SpecialLineBorder;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import java.awt.*;

/**<fim_suffix>

public class MatrixTableRenderer extends DefaultTableCellRenderer {
    /**
     *
     */
    private static final long serialVersionUID = -5435376239339922955L;

    public MatrixTableRenderer() {
        super();
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
                                                   boolean isSelected,<fim_middle>","
 * <p>Title: Populus</p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2002, 2015</p>
 * <p>Company: University of Minnesota</p>
 *
 * @author unascribed
 * @version 1.0
 */","
 * @author <NAME>
 * @since 1.0
 *
 *        Copyright 2012 <NAME>
 *
 *        Licensed under the Apache License, Version 2.0 (the ""License"");
 *        you may not use this"
"<fim_prefix>Constants.CENTER);

        setValue(value);

        // ---- begin optimization to avoid painting background ----
        Color back = getBackground();
        boolean colorMatch = (back != null) && (back.equals(table.getBackground())) && table.isOpaque();
        setOpaque(!colorMatch);
        // ---- end optimization to aviod painting background ----

        return this;
    }
	/*<fim_suffix>
}<fim_middle>","
   private void writeObject(java.io.ObjectOutputStream out)
       throws java.io.IOException
   {
   }

   private void readObject(java.io.ObjectInputStream in)
       throws java.io.IOException, ClassNotFoundException
   {
   }
	 */","*
	 * @return the value
	 */"
"<fim_prefix>/**<fim_suffix>
package org.splevo.utilities.metrics.calculator.impl;<fim_middle>","
 * Implementation package for the metrics calculator interface.
 * 
 * @author Benjamin Klatt
 *
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>rld;

//Normal bubbles will only work in water >:(
public class EntityMyBubbleFX extends EntityBubbleFX
{
    public EntityMyBubbleFX(World p_i1198_1_, double p_i1198_2_, double p_i1198_4_, double p_i1198_6_, double p_i1198_8_, double p_i1198_10_, double p_i1198_12_)
    {
        super(p_i1198_1_, p_i1198_2_, p_i1198_4_, p_i1198_6_, p_i1198_8_, p_i1198_10_, p_i1198_12_);
    }
    /**<fim_suffix>
    public void onUpdate()
    {
        this.prevPosX = this.posX;
        this.prevPosY = this.posY;
        this.prevPosZ = this.posZ;
        this.moveEntity(this.motionX, this.motionY, this.motionZ);
        this.motionX *= 0.8500000238418579D;
        this.motionY *= 0.8500000238418579D;
        this.motionZ *= 0.8500000238418579D;

        if (this.particleMaxAge-- <= 0)
      <fim_middle>","
     * Called to update the entity's position/logic.
     */","
     * Called to update the entity's position/logic.
     */"
"<fim_prefix>t com.netscape.cmsutil.ldap.LDAPPostReadControl;
import com.netscape.cmsutil.ldap.LDAPUtil;

import netscape.ldap.LDAPAttribute;
import netscape.ldap.LDAPAttributeSet;
import netscape.ldap.LDAPConnection;
import netscape.ldap.LDAPConstraints;
import netscape.ldap.LDAPControl;
import netscape.ldap.LDAPEntry;
import netscape.ldap.LDAPException;
import netscape.ldap.LDAPModification;

/**<fim_suffix>
public class LDAPConfigStorage extends ConfigStorage {

    public static Logger logger = LoggerFactory.getLogger(LDAPConfigStorage.class);

    private LdapBoundConnFactory connFactory;
    private String dn;
    private String attr;
    private LDAPAttribute[] createAttrs;

    /**
     * Constructs an LDAP configuration store.
     *
     * @param connFactory Database connection fa<fim_middle>","
 * LDAPConfigStorage:
 * Extends ConfigStore with methods to load/save from/to file for
 * persistent storage. This is a configuration store agent who
 * reads data from an LDAP entry.
 *
 * @see ConfigStore
 */","
 * A configuration storage that uses LDAP.
 *
 * @author <NAME>
 */"
"<fim_prefix>e. This is a configuration store agent who
 * reads data from an LDAP entry.
 *
 * @see ConfigStore
 */
public class LDAPConfigStorage extends ConfigStorage {

    public static Logger logger = LoggerFactory.getLogger(LDAPConfigStorage.class);

    private LdapBoundConnFactory connFactory;
    private String dn;
    private String attr;
    private LDAPAttribute[] createAttrs;

    /**<fim_suffix>
    public LDAPConfigStorage(
            LdapBoundConnFactory connFactory,
            String dn,
            LDAPAttribute[] createAttrs,
            String attr) throws Exception {

        this.connFactory = connFactory;
        this.dn = dn;
        this.createAttrs = createAttrs;
        this.attr = attr;
    }

    /**
     * Commit the configuration to the database.
     *
   <fim_middle>","
     * Constructs an LDAP configuration store.
     *
     * @param connFactory Database connection factory
     * @param dn Distinguished name of record containing config store
     * @param attr Name of attribute containing config store
     * @param createAttrs Set of initial attributes if creating the entry.  Should
     *              contain cn, objectclass and possibly other attributes.
     */","
     * Create a new LDAPConfigStorage.
     *
     * @param connFactory the connection factory
     * @param dn the DN of the entry to read
     * @param createAttrs the attributes to create
     * @param attr the attribute to read
     * @throws Exception if an error occurs
     */"
"<fim_prefix>ntain cn, objectclass and possibly other attributes.
     */
    public LDAPConfigStorage(
            LdapBoundConnFactory connFactory,
            String dn,
            LDAPAttribute[] createAttrs,
            String attr) throws Exception {

        this.connFactory = connFactory;
        this.dn = dn;
        this.createAttrs = createAttrs;
        this.attr = attr;
    }

    /**<fim_suffix>
    @Override
    public void commit(ConfigStore config, boolean createBackup) throws EBaseException {
        String[] attrs = {};
        commitReturn(config, createBackup, attrs);
    }

    /**
     * This version of commit also returns the post-read entry that
     * the change resulted in.
     */
    public LDAPEntry commitReturn(ConfigStore config, boolean createBackup, String<fim_middle>","
     * Commit the configuration to the database.
     *
     * All uses of LDAPProfileStore at time of writing call with
     * createBackup=false, so the argument is ignored.
     *
     * If backup becomes necessary, the constructor should be
     * modified to take a String backupAttr, and the existing
     * content be copied to that attribute.
     *
     * @param createBackup Ignored.
     */","
     * Commit the changes to the LDAP server.
     *
     * @param config the configuration to commit
     * @param createBackup if true, a backup of the current configuration
     *                      is created before the commit.
     * @param attrs the attributes to return.
     * @throws EBaseException if there is a problem with the commit.
     */"
"<fim_prefix>return true on success, false if the entry does not exist.
     */
    private void commitModify(
            LDAPConnection conn,
            LDAPAttribute configAttr,
            LDAPConstraints cons)
            throws LDAPException {

        LDAPModification ldapMod = new LDAPModification(LDAPModification.REPLACE, configAttr);
        conn.modify(dn, ldapMod, cons);
    }

    /**<fim_suffix>
    private void commitAdd(
            LDAPConnection conn,
            LDAPAttribute configAttr,
            LDAPConstraints cons)
            throws LDAPException {

        LDAPAttributeSet attrSet = new LDAPAttributeSet(createAttrs);
        attrSet.add(configAttr);
        LDAPEntry ldapEntry = new LDAPEntry(dn, attrSet);
        conn.add(ldapEntry, cons);
    }
}
<fim_middle>","
     * Add the LDAPEntry via LDAPConnection.add.
     *
     * @param configAttr Config store attribute.
     * @return true on success, false if the entry already exists.
     */","
     * Commit the modification to the LDAP server.
     *
     * @param conn the connection to the LDAP server.
     * @param configAttr the attribute to be modified.
     * @param cons"
"<fim_prefix>      } catch (LDAPException e) {
            throw new DBException(""Unable to store "" + dn + "": "" + e, e);

        } finally {
            if (conn != null) connFactory.returnConn(conn);
        }

        LDAPPostReadControl control = (LDAPPostReadControl)
            LDAPUtil.getControl(LDAPPostReadControl.class, responseControls);

        return control.getEntry();
    }

    /**<fim_suffix>
    private void commitModify(
            LDAPConnection conn,
            LDAPAttribute configAttr,
            LDAPConstraints cons)
            throws LDAPException {

        LDAPModification ldapMod = new LDAPModification(LDAPModification.REPLACE, configAttr);
        conn.modify(dn, ldapMod, cons);
    }

    /**
     * Add the LDAPEntry via LDAPConnection.add.
     *
     * @p<fim_middle>","
     * Update the record via an LDAPModification.
     *
     * @param configAttr Config store attribute.
     * @return true on success, false if the entry does not exist.
     */","
     * Delete the LDAPEntry via LDAPConnection.delete.
     *
     * @param cons
     *            LDAPConstraints
     * @throws DBException"
"<fim_prefix>essary, the constructor should be
     * modified to take a String backupAttr, and the existing
     * content be copied to that attribute.
     *
     * @param createBackup Ignored.
     */
    @Override
    public void commit(ConfigStore config, boolean createBackup) throws EBaseException {
        String[] attrs = {};
        commitReturn(config, createBackup, attrs);
    }

    /**<fim_suffix>
    public LDAPEntry commitReturn(ConfigStore config, boolean createBackup, String[] attrs)
            throws EBaseException {
        ByteArrayOutputStream data = new ByteArrayOutputStream();

        try {
            config.store(data);
        } catch (Exception e) {
            throw new EBaseException(e);
        }

        LDAPAttribute configAttr = new LDAPAttribute(attr, dat<fim_middle>","
     * This version of commit also returns the post-read entry that
     * the change resulted in.
     */","
     * Commit the configuration to the LDAP server.
     *
     * @param config The configuration to commit.
"
"<fim_prefix>/*<fim_suffix>
package com.ostrichemulators.semtool.rdf.engine.edgemodelers;

import com.ostrichemulators.semtool.poi.main.ImportData;
import com.ostrichemulators.semtool.poi.main.ImportMetadata;
import com.ostrichemulators.semtool.poi.main.LoadingSheetData;
import com.ostrichemulators.semtool.poi.main.LoadingSheetData.LoadingNodeAndPropertyValues;
import com.ostrichemulators.semtool.rdf.engine.util<fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","*
 * @author ryan
 */"
"<fim_prefix>ol.rdf.engine.util.QaChecker;
import java.util.Map;
import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.Model;
import org.eclipse.rdf4j.model.Value;
import org.eclipse.rdf4j.model.ValueFactory;
import org.eclipse.rdf4j.repository.RepositoryConnection;
import org.eclipse.rdf4j.repository.RepositoryException;

/**
 *
 * @author ryan
 */
public interface EdgeModeler {

	/**<fim_suffix>
	public IRI addRel( LoadingNodeAndPropertyValues nap,
			Map<String, String> namespaces, LoadingSheetData sheet,
			ImportMetadata metas, RepositoryConnection rc ) throws RepositoryException;

	/**
	 * Adds a new node to the repository
	 *
	 * @param nap
	 * @param namespaces
	 * @param sheet
	 * @param metas Metadata to use when loading. This argument MUST pass the
	 * {@link Abstrac<fim_middle>","
	 * Adds a new relationship node to the repository
	 *
	 * @param nap
	 * @param namespaces
	 * @param sheet
	 * @param metas Metadata to use when loading. This argument MUST pass the
	 * {@link AbstractEdgeModeler#isValidMetadata(com.ostrichemulators.semtool.poi.main.ImportMetadata) }
	 * check
	 * @param rc
	 * @return the newly-created relationship node
	 * @throws RepositoryException
	 */","
	 * Adds a new node to the repository
	 *
	 * @param nap
	 * @param namespaces
	 * @param sheet
	 * @param metas Metadata to use when loading. This argument MUST pass the
	 * {@link AbstractableLoader}
	 * @param rc                                                 "
"<fim_prefix>geModeler#isValidMetadata(com.ostrichemulators.semtool.poi.main.ImportMetadata) }
	 * check
	 * @param rc
	 * @return the newly-created relationship node
	 * @throws RepositoryException
	 */
	public IRI addRel( LoadingNodeAndPropertyValues nap,
			Map<String, String> namespaces, LoadingSheetData sheet,
			ImportMetadata metas, RepositoryConnection rc ) throws RepositoryException;

	/**<fim_suffix>
	public IRI addNode( LoadingNodeAndPropertyValues nap,
			Map<String, String> namespaces, LoadingSheetData sheet,
			ImportMetadata metas, RepositoryConnection rc ) throws RepositoryException;

	/**
	 * Create statements for all of the properties of the instanceURI
	 *
	 * @param subject URI containing the subject instance URI
	 * @param properties Map of all properties
	 * @param nam<fim_middle>","
	 * Adds a new node to the repository
	 *
	 * @param nap
	 * @param namespaces
	 * @param sheet
	 * @param metas Metadata to use when loading. This argument MUST pass the
	 * {@link AbstractEdgeModeler#isValidMetadata(com.ostrichemulators.semtool.poi.main.ImportMetadata) }
	 * check
	 * @param rc
	 * @return the newly-create node
	 * @throws RepositoryException
	 */","
	 * Create statements for all of the properties of the instanceURI
	 *
	 * @param subject URI containing the subject instance URI
	 * @param properties Map of all properties
	 * @param namings Map of all property names  Add a method to add a node to the model  package com.ostrichemulators.jfxhacc.model;

import java.util.Map;

import org.openrdf.model.IRI;
import org.openrdf.model.Resource"
"<fim_prefix>adata(com.ostrichemulators.semtool.poi.main.ImportMetadata) }
	 * check
	 * @param rc
	 *
	 * @throws RepositoryException
	 */
	public void addProperties( IRI subject, Map<String, Value> properties,
			Map<String, String> namespaces, LoadingSheetData sheet,
			ImportMetadata metas, RepositoryConnection rc ) throws RepositoryException;

	public void setQaChecker( QaChecker qaer );

	/**<fim_suffix>
	public Model createMetamodel( ImportData alldata, Map<String, String> namespaces,
			ValueFactory vf ) throws RepositoryException;
}
<fim_middle>","
	 * Creates the metamodel for the given data using the given namespaces
	 *
	 * @param alldata the data that contains the model nodes. This
	 * {@link ImportData#getMetadata()} must pass the 
	 * {@link AbstractEdgeModeler#isValidMetadata(com.ostrichemulators.semtool.poi.main.ImportMetadata) }
	 * check
	 * @param namespaces the namespaces to use for resolving metamodel elements
	 * @param vf the value factory to use, or null
	 * @return a model containing all the mm statements
	 * @throws RepositoryException
	 */","
	 * @param alldata
	 * @param namespaces
	 * @param vf
	 * @return
	 * @throws RepositoryException"
"<fim_prefix>dingNodeAndPropertyValues;
import com.ostrichemulators.semtool.rdf.engine.util.QaChecker;
import java.util.Map;
import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.Model;
import org.eclipse.rdf4j.model.Value;
import org.eclipse.rdf4j.model.ValueFactory;
import org.eclipse.rdf4j.repository.RepositoryConnection;
import org.eclipse.rdf4j.repository.RepositoryException;

/**<fim_suffix>
public interface EdgeModeler {

	/**
	 * Adds a new relationship node to the repository
	 *
	 * @param nap
	 * @param namespaces
	 * @param sheet
	 * @param metas Metadata to use when loading. This argument MUST pass the
	 * {@link AbstractEdgeModeler#isValidMetadata(com.ostrichemulators.semtool.poi.main.ImportMetadata) }
	 * check
	 * @param rc
	 * @return the newly-created relations<fim_middle>","
 *
 * @author ryan
 */","
 *
 * @author ryan
 */"
"<fim_prefix>nk AbstractEdgeModeler#isValidMetadata(com.ostrichemulators.semtool.poi.main.ImportMetadata) }
	 * check
	 * @param rc
	 * @return the newly-create node
	 * @throws RepositoryException
	 */
	public IRI addNode( LoadingNodeAndPropertyValues nap,
			Map<String, String> namespaces, LoadingSheetData sheet,
			ImportMetadata metas, RepositoryConnection rc ) throws RepositoryException;

	/**<fim_suffix>
	public void addProperties( IRI subject, Map<String, Value> properties,
			Map<String, String> namespaces, LoadingSheetData sheet,
			ImportMetadata metas, RepositoryConnection rc ) throws RepositoryException;

	public void setQaChecker( QaChecker qaer );

	/**
	 * Creates the metamodel for the given data using the given namespaces
	 *
	 * @param alldata the data that contains the mod<fim_middle>","
	 * Create statements for all of the properties of the instanceURI
	 *
	 * @param subject URI containing the subject instance URI
	 * @param properties Map of all properties
	 * @param namespaces
	 * @param sheet
	 * @param metas Metadata to use when loading. This argument MUST pass the
	 * {@link AbstractEdgeModeler#isValidMetadata(com.ostrichemulators.semtool.poi.main.ImportMetadata) }
	 * check
	 * @param rc
	 *
	 * @throws RepositoryException
	 */","
	 * @param subject
	 * @param properties
	 * @param namespaces
	 * @param sheet
	 * @param metas
	 * @param rc
	 * @throws RepositoryException
	 */"
"<fim_prefix>/**<fim_suffix>
package de.unibi.citec.clf.bonsai;


<fim_middle>","
 * Base packages for the BonSAI (BirON Sensor Actuator Interface).
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>mods.modlauncher.Launcher;
import cpw.mods.modlauncher.api.IEnvironment;
import lombok.Getter;
import net.minecraftforge.fml.loading.progress.StartupMessageManager;
import net.neoforged.fml.loading.progress.StartupNotificationManager;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.core.Appender;

import org.polyfrost.oneconfig.loader.base.Capabilities;

/**<fim_suffix>
@Getter
public class ModLauncherCapabilities implements Capabilities {
	public static final ModLauncherCapabilities INSTANCE = new ModLauncherCapabilities();

    static final int MODLAUNCHER_VERSION;
	private final RuntimeAccess runtimeAccess = new ModLauncherRuntimeAccess();
	private final GameMetadata gameMetadata = ModLauncherGameMetadata.INSTANCE;

	@Override
    public void prov<fim_middle>","
 * @author xtrm
 * @since 1.1.0
 */","
 * @author <NAME>
 * @since 0.1.0
"
"<fim_prefix>/*<fim_suffix>


package examples.chap06.threads02.state.mutable;

import examples.chap06.threads02.state.Direction;
import examples.chap06.threads02.state.StaticElement;
import examples.chap06.threads02.state.World;
import examples.chap06.threads02.state.WorldIterator;
import java.util.NoSuchElementException;

public class MutableWorldIterator implements WorldIterator {

    private MutableWorld wo<fim_middle>","
 * Code example from the book ""Learn Design Patterns with Game Programming""
 * Copyrights Â© 2019 Philippe-Henri Gosselin. All rights reserved.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package tools.refinery.store.reasoning.refinement;

import tools.refinery.logic.AbstractValue;
import tools.refinery.store.model.Interpretation;
import tools.refinery.store.reasoning.ReasoningAdapter;
import tools.refinery.store.reasoning.representation.PartialSymbol;
import tools.refinery.store.representation.Symbol;
import tools.refinery.store.tuple.Tuple;

import java.util.Objects;<fim_middle>","
 * SPDX-FileCopyrightText: 2023-2024 The Refinery Authors <https://refinery.tools/>
 *
 * SPDX-License-Identifier: EPL-2.0
 */","*
 * A {@link ReasoningAdapter} that uses {@link PartialSymbol}s to represent
 * {@link Symbol}s.
 */"
"<fim_prefix>package com.mobius.software.telco.protocols.diameter.impl.primitives.accounting;
/*<fim_suffix>

import com.mobius.software.telco.protocols.diameter.impl.primitives.DiameterUTF8StringImpl;
import com.mobius.software.telco.protocols.diameter.primitives.accounting.PoCUserRoleIDs;

/**
*
* @author yulian oifa
*
*/
public class PoCUserRoleIDsImpl extends DiameterUTF8StringImpl implements PoCUserRoleIDs
{
	protected PoCUserRoleIDsImpl()
	{
		super();
	}

	protected PoCUserRoleIDsImpl<fim_middle>","
 * Mobius Software LTD
 * Copyright 2023, Mobius Software LTD and individual contributors
 * by the @authors tag.
 *
 * This program is free software: you can redistribute it and/or modify
 * under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
*
* @author yulian oifa
*
*/"
"<fim_prefix>fero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

import com.mobius.software.telco.protocols.diameter.impl.primitives.DiameterUTF8StringImpl;
import com.mobius.software.telco.protocols.diameter.primitives.accounting.PoCUserRoleIDs;

/**<fim_suffix>
public class PoCUserRoleIDsImpl extends DiameterUTF8StringImpl implements PoCUserRoleIDs
{
	protected PoCUserRoleIDsImpl()
	{
		super();
	}

	protected PoCUserRoleIDsImpl(Integer minLength, Integer maxLength)
	{
		super(minLength, maxLength);
	}

	public PoCUserRoleIDsImpl(String value, Integer minLength, Integer maxLength)
	{
		super(value, minLength, maxLength);
	}
}<fim_middle>","
*
* @author yulian oifa
*
*/","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package fr.quatrevieux.araknemu.game.listener.fight;

import fr.quatrevieux.araknemu.core.event.Listener;
import fr.quatrevieux.araknemu.game.fight.Fight;
import fr.quatrevieux.araknemu.game.fight.team.event.AllowSpectatorChanged;
import fr.quatrevieux.araknemu.network.game.out.info.Information;

/**
 * Notify fighters that block spectators option has been changed
 */
public final cl<fim_middle>","
 * This file is part of Araknemu.
 *
 * Araknemu is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Araknemu is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Araknemu.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Copyright (c) 2017-2021 Vincent Quatrevieux
 */","*
 * Notify fighters that block spectators option has been changed
 */"
"<fim_prefix>https://www.gnu.org/licenses/>.
 *
 * Copyright (c) 2017-2021 Vincent Quatrevieux
 */

package fr.quatrevieux.araknemu.game.listener.fight;

import fr.quatrevieux.araknemu.core.event.Listener;
import fr.quatrevieux.araknemu.game.fight.Fight;
import fr.quatrevieux.araknemu.game.fight.team.event.AllowSpectatorChanged;
import fr.quatrevieux.araknemu.network.game.out.info.Information;

/**<fim_suffix>
public final class SendBlockSpectatorsOptionChangedMessage implements Listener<AllowSpectatorChanged> {
    private final Fight fight;

    public SendBlockSpectatorsOptionChangedMessage(Fight fight) {
        this.fight = fight;
    }

    @Override
    public void on(AllowSpectatorChanged event) {
        fight.send(
            event.spectatorsAllowed()
                ? Informatio<fim_middle>","
 * Notify fighters that block spectators option has been changed
 */","
 * This listener sends the block spectators option changed message.
"
"<fim_prefix>/*<fim_suffix>
package de.communicode.communikey.repository;

import de.communicode.communikey.domain.EncryptionJob;
import de.communicode.communikey.domain.Key;
import de.communicode.communikey.domain.User;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.Se<fim_middle>","
 * This file is part of communikey.
 * Copyright (C) 2016-2018  communicode AG <communicode.de>
 *
 * communikey is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 11.07.2016.
 */"
"<fim_prefix>  /**
     * Finds all encryption job entities of the repository.
     *
     * @return a collection of found encryption job entities
     */
    @Override
    Set<EncryptionJob> findAll();

    /**
     * Finds the encryption job with the specified token
     *
     * @param token the token
     * @return the encryption job
     */
    EncryptionJob findByToken(String token);

    /**<fim_suffix>
    EncryptionJob findByUserAndKey(User user, Key key);

    /**
     * Deletes every encryption job of the specified key.
     *
     * @param key The key of which the encryption jobs should be deleted
     */
    @Transactional
    void deleteByKey(Key key);

    /**
     * Deletes the encryption job with the specified token
     *
     * @param token The token of the encryption job<fim_middle>","
     * Finds the encryption job with the specified user and token
     *
     * @param user the user for whom the job is there
     * @param key the key contained in the job
     * @return the encryption job
     */","
     * Finds the encryption job with the specified user and key
     *
     * @param user The user of the encryption job
     * @param key  The key of the encryption job
     * @return the encryption job
     */"
"<fim_prefix>pository.CrudRepository;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.Set;

/**
 * A repository for {@link EncryptionJob} entities.
 *
 * @author dvonderbey@communicode.de
 * @since 0.15.0
 */
@Repository
public interface EncryptionJobRepository extends CrudRepository<EncryptionJob, Long> {

    /**<fim_suffix>
    @Override
    Set<EncryptionJob> findAll();

    /**
     * Finds the encryption job with the specified token
     *
     * @param token the token
     * @return the encryption job
     */
    EncryptionJob findByToken(String token);

    /**
     * Finds the encryption job with the specified user and token
     *
     * @param user the user for whom the job is there
     * @param<fim_middle>","
     * Finds all encryption job entities of the repository.
     *
     * @return a collection of found encryption job entities
     */","
     * Finds all encryption jobs
     *
     * @return the encryption jobs
     */"
"<fim_prefix>k EncryptionJob} entities.
 *
 * @author dvonderbey@communicode.de
 * @since 0.15.0
 */
@Repository
public interface EncryptionJobRepository extends CrudRepository<EncryptionJob, Long> {

    /**
     * Finds all encryption job entities of the repository.
     *
     * @return a collection of found encryption job entities
     */
    @Override
    Set<EncryptionJob> findAll();

    /**<fim_suffix>
    EncryptionJob findByToken(String token);

    /**
     * Finds the encryption job with the specified user and token
     *
     * @param user the user for whom the job is there
     * @param key the key contained in the job
     * @return the encryption job
     */
    EncryptionJob findByUserAndKey(User user, Key key);

    /**
     * Deletes every encryption job of the specified<fim_middle>","
     * Finds the encryption job with the specified token
     *
     * @param token the token
     * @return the encryption job
     */","
     * Finds the encryption job with the specified token
     *
     * @param token the token for which the job is there
     * @return the encryption job"
"<fim_prefix>n the token
     * @return the encryption job
     */
    EncryptionJob findByToken(String token);

    /**
     * Finds the encryption job with the specified user and token
     *
     * @param user the user for whom the job is there
     * @param key the key contained in the job
     * @return the encryption job
     */
    EncryptionJob findByUserAndKey(User user, Key key);

    /**<fim_suffix>
    @Transactional
    void deleteByKey(Key key);

    /**
     * Deletes the encryption job with the specified token
     *
     * @param token The token of the encryption job
     */
    @Transactional
    void deleteByToken(String token);

    /**
     * Deletes all encryption job of the specified user
     *
     * @param user The user of the encryption job
     */
    @Transactio<fim_middle>","
     * Deletes every encryption job of the specified key.
     *
     * @param key The key of which the encryption jobs should be deleted
     */","
     * Deletes the encryption job with the specified key
     *
     * @param key The key of the encryption job
     */"
"<fim_prefix>ser for whom the job is there
     * @param key the key contained in the job
     * @return the encryption job
     */
    EncryptionJob findByUserAndKey(User user, Key key);

    /**
     * Deletes every encryption job of the specified key.
     *
     * @param key The key of which the encryption jobs should be deleted
     */
    @Transactional
    void deleteByKey(Key key);

    /**<fim_suffix>
    @Transactional
    void deleteByToken(String token);

    /**
     * Deletes all encryption job of the specified user
     *
     * @param user The user of the encryption job
     */
    @Transactional
    void removeAllByUser(User user);
}
<fim_middle>","
     * Deletes the encryption job with the specified token
     *
     * @param token The token of the encryption job
     */","
     * Deletes every encryption job of the specified token.
     *
     * @param token The token of which the encryption jobs should be deleted
"
"<fim_prefix>eletes every encryption job of the specified key.
     *
     * @param key The key of which the encryption jobs should be deleted
     */
    @Transactional
    void deleteByKey(Key key);

    /**
     * Deletes the encryption job with the specified token
     *
     * @param token The token of the encryption job
     */
    @Transactional
    void deleteByToken(String token);

    /**<fim_suffix>
    @Transactional
    void removeAllByUser(User user);
}
<fim_middle>","
     * Deletes all encryption job of the specified user
     *
     * @param user The user of the encryption job
     */","
     * Deletes all encryption jobs of the specified user
     *
     * @param user The user of which the encryption jobs should be deleted
 "
"<fim_prefix>e de.communicode.communikey.repository;

import de.communicode.communikey.domain.EncryptionJob;
import de.communicode.communikey.domain.Key;
import de.communicode.communikey.domain.User;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.Set;

/**<fim_suffix>
@Repository
public interface EncryptionJobRepository extends CrudRepository<EncryptionJob, Long> {

    /**
     * Finds all encryption job entities of the repository.
     *
     * @return a collection of found encryption job entities
     */
    @Override
    Set<EncryptionJob> findAll();

    /**
     * Finds the encryption job with the specified token
     *
     * @param token th<fim_middle>","
 * A repository for {@link EncryptionJob} entities.
 *
 * @author dvonderbey@communicode.de
 * @since 0.15.0
 */","
 * Repository for {@link EncryptionJob} entities.
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package org.l2j.gameserver.network.serverpackets.raidbossinfo;

import org.l2j.gameserver.network.GameClient;
import org.l2j.gameserver.network.ServerExPacketId;
import org.l2j.gameserver.network.serverpackets.ServerPacket;

import java.util.Map;

/**
 * @author Mobius
 */
public class ExRaidBossSpawnInfo extends ServerPacket {
    private final Map<Integer, Integer> _bossIds;

    pu<fim_middle>","
 * Copyright Â© 2019-2020 L2JOrg
 *
 * This file is part of the L2JOrg project.
 *
 * L2JOrg is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * L2JOrg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author Mobius
 */"
"<fim_prefix>hould have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.l2j.gameserver.network.serverpackets.raidbossinfo;

import org.l2j.gameserver.network.GameClient;
import org.l2j.gameserver.network.ServerExPacketId;
import org.l2j.gameserver.network.serverpackets.ServerPacket;

import java.util.Map;

/**<fim_suffix>
public class ExRaidBossSpawnInfo extends ServerPacket {
    private final Map<Integer, Integer> _bossIds;

    public ExRaidBossSpawnInfo(Map<Integer, Integer> bossIds) {
        _bossIds = bossIds;
    }

    @Override
    public void writeImpl(GameClient client) {
        writeId(ServerExPacketId.EX_RAID_BOSS_SPAWN_INFO);

        writeInt(_bossIds.size()); // alive count
        fo<fim_middle>","
 * @author Mobius
 */","
 * Format: (ch) d"
"<fim_prefix>package com.karriapps.tehilim.tehilimlibrary.gcm;

import android.app.job.JobParameters;
import android.app.job.JobService;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;

import com.helpshift.Core;

import static androidx.legacy.content.WakefulBroadcastReceiver.startWakefulService;

/**<fim_suffix>
public class GcmBroadcastReceiver extends JobService {

    private final static String TAG = GcmBroadcastReceiver.class.getName();

    //@Override
    public boolean onStartJob(Context context, Intent intent) {

        if(intent.getExtras().getString(""origin"").equals(""helpshift"")) {
            Core.handlePush(context, intent);
        }
        // Explicitly specify that GcmIntent<fim_middle>","
 * Created by orelsara on 24/07/14.
 */","
 * Created by eugene on 10/12/15.
 */"
"<fim_prefix>// @formatter:off
/*<fim_suffix>
// @formatter:on
package eu.matejkormuth.pexel.slave.bukkit.areas;

import org.bukkit.entity.Player;

/**
 * Player area owner.
 * 
 * @author Mato Kormuth
 * 
 */
public class PlayerAreaOwner implements AreaOwner {
    /**
     * Player who is owner.
     */
    private final Player owner;
    
    /**
     * Initializes new instance of area owner with specified player.
     * 
     <fim_middle>","
 * Pexel Project - Minecraft minigame server platform. 
 * Copyright (C) 2014 Matej Kormuth <http://www.matejkormuth.eu>
 * 
 * This file is part of Pexel.
 * 
 * Pexel is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * 
 * Pexel is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 */","*
 * Copyright (c) 2018, Mato Kormuth
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * 
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED"
"<fim_prefix>ense along with this program. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 */
// @formatter:on
package eu.matejkormuth.pexel.slave.bukkit.areas;

import org.bukkit.entity.Player;

/**
 * Player area owner.
 * 
 * @author Mato Kormuth
 * 
 */
public class PlayerAreaOwner implements AreaOwner {
    /**
     * Player who is owner.
     */
    private final Player owner;
    
    /**<fim_suffix>
    public PlayerAreaOwner(final Player player) {
        this.owner = player;
    }
    
    @Override
    public String getName() {
        return this.owner.getName();
    }
}
<fim_middle>","
     * Initializes new instance of area owner with specified player.
     * 
     * @param player
     */","
     * Creates new player area owner.
     * 
     * @param player
     *    "
"<fim_prefix>e implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License along with this program. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 */
// @formatter:on
package eu.matejkormuth.pexel.slave.bukkit.areas;

import org.bukkit.entity.Player;

/**<fim_suffix>
public class PlayerAreaOwner implements AreaOwner {
    /**
     * Player who is owner.
     */
    private final Player owner;
    
    /**
     * Initializes new instance of area owner with specified player.
     * 
     * @param player
     */
    public PlayerAreaOwner(final Player player) {
        this.owner = player;
    }
    
    @Override
    public String getName() {
      <fim_middle>","
 * Player area owner.
 * 
 * @author Mato Kormuth
 * 
 */","
 * Represents player who owns area.
 * 
 * @author <NAME> (<EMAIL>)
"
"<fim_prefix>ore details.
 * 
 * You should have received a copy of the GNU General Public License along with this program. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 */
// @formatter:on
package eu.matejkormuth.pexel.slave.bukkit.areas;

import org.bukkit.entity.Player;

/**
 * Player area owner.
 * 
 * @author Mato Kormuth
 * 
 */
public class PlayerAreaOwner implements AreaOwner {
    /**<fim_suffix>
    private final Player owner;
    
    /**
     * Initializes new instance of area owner with specified player.
     * 
     * @param player
     */
    public PlayerAreaOwner(final Player player) {
        this.owner = player;
    }
    
    @Override
    public String getName() {
        return this.owner.getName();
    }
}
<fim_middle>","
     * Player who is owner.
     */","
     * Player that owns this area.
    "
"<fim_prefix>/**
     * A Cache for all StreamActions.
     */
    private static final HashMap<String, Class<? extends IEventAction>> cachedActions = new HashMap<>();

    /**
     * Constructor should not be called, since it is a utility class that doesn't need an instance.
     */
    private CustomEventContainerCreator() {
        throw new IllegalStateException(""Utility class"");
    }

    /**<fim_suffix>
    public static void loadAll() {
        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();
        configurationBuilder.addClassLoaders(ClasspathHelper.staticClassLoader());
        Reflections reflections = new Reflections(configurationBuilder);
        Set<Class<? extends IEventAction>> classes = reflections.getSubTypesOf(IEventAction.class);

        for (Cl<fim_middle>","
     * Load all actions.
     */","
     * Loads all classes that implement the IEventAction interface"
"<fim_prefix>.publisher.Mono;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * A Utility class used to create CustomEventContainers.
 */
public class CustomEventContainerCreator {

    /**
     * A Cache for all StreamActions.
     */
    private static final HashMap<String, Class<? extends IEventAction>> cachedActions = new HashMap<>();

    /**<fim_suffix>
    private CustomEventContainerCreator() {
        throw new IllegalStateException(""Utility class"");
    }

    /**
     * Load all actions.
     */
    public static void loadAll() {
        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();
        configurationBuilder.addClassLoaders(ClasspathHelper.staticClassLoader());
        Reflections reflections = new R<fim_middle>","
     * Constructor should not be called, since it is a utility class that doesn't need an instance.
     */","
     * Private constructor.
     */"
"<fim_prefix>tAction>> classes = reflections.getSubTypesOf(IEventAction.class);

        for (Class<? extends IEventAction> aClass : classes) {
            if (aClass.isAnnotationPresent(ActionInfo.class)) {
                String actionName = aClass.getAnnotation(ActionInfo.class).name();
                cachedActions.computeIfAbsent(actionName, s -> aClass);
            }
        }
    }

    /**<fim_suffix>
    public static Class<? extends IEventAction> getAction(String action) {
        action = action.trim().toLowerCase();

        if (cachedActions.containsKey(action)) return cachedActions.get(action);

        ConfigurationBuilder configurationBuilder = new ConfigurationBuilder();
        configurationBuilder.addClassLoaders(ClasspathHelper.staticClassLoader());
        Reflections <fim_middle>","
     * Get the Class of a StreamAction.
     *
     * @param action The Name of the Action.
     * @return The Class of the Action.
     */","
     * Gets the action class for the given action name.
     *
     * @param action The action name.
     * @return The action class.
     */"
"<fim_prefix>EventTyp;
import org.reflections.Reflections;
import org.reflections.util.ClasspathHelper;
import org.reflections.util.ConfigurationBuilder;
import reactor.core.publisher.Mono;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * A Utility class used to create CustomEventContainers.
 */
public class CustomEventContainerCreator {

    /**<fim_suffix>
    private static final HashMap<String, Class<? extends IEventAction>> cachedActions = new HashMap<>();

    /**
     * Constructor should not be called, since it is a utility class that doesn't need an instance.
     */
    private CustomEventContainerCreator() {
        throw new IllegalStateException(""Utility class"");
    }

    /**
     * Load all actions.
     */
    public stat<fim_middle>","
     * A Cache for all StreamActions.
     */","
     * The Reflections instance used to load all actions.
  "
"<fim_prefix>ventAction.class);

        for (Class<? extends IEventAction> aClass : classes) {
            if (aClass.isAnnotationPresent(ActionInfo.class) && aClass.getAnnotation(ActionInfo.class).name().trim().equalsIgnoreCase(action)) {
                cachedActions.computeIfAbsent(action, s -> aClass);

                return aClass;
            }
        }

        return null;
    }

    /**<fim_suffix>
    public static Mono<List<CustomEventContainer>> getContainers(CustomEventTyp typ) {
        return SQLSession.getSqlConnector().getSqlWorker()
                .getEntityList(new CustomEventAction(), ""FROM CustomEventAction WHERE event = :typ"", Map.of(""typ"", typ.name()))
                .map(list -> list.stream().map(CustomEventContainer::new).toList());
    }

    /**
     * Get al<fim_middle>","
     * Get all CustomEventContainer.
     *
     * @param typ The typ of the CustomEventAction.
     * @return A List of CustomEventContainer.
     */","
     * Get all containers for a specific event
     *
     * @param typ The event
     * @return A list of containers
     */"
"<fim_prefix>ainer.
     */
    public static Mono<List<CustomEventContainer>> getContainers(CustomEventTyp typ) {
        return SQLSession.getSqlConnector().getSqlWorker()
                .getEntityList(new CustomEventAction(), ""FROM CustomEventAction WHERE event = :typ"", Map.of(""typ"", typ.name()))
                .map(list -> list.stream().map(CustomEventContainer::new).toList());
    }

    /**<fim_suffix>
    public static Mono<List<CustomEventContainer>> getContainers(String guildId, CustomEventTyp typ) {
        return SQLSession.getSqlConnector().getSqlWorker()
                .getEntityList(new CustomEventAction(), ""FROM CustomEventAction WHERE guildId = :guild AND event = :typ"", Map.of(""guild"", guildId, ""typ"", typ.name()))
                .map(list -> list.stream().map(CustomEvent<fim_middle>","
     * Get all CustomEventContainer.
     *
     * @param guildId The related Guild.
     * @param typ     The typ of the CustomEventAction.
     * @return A List of CustomEventContainer.
     */","
     * Gets all containers for a guild.
     *
     * @param guildId The guild id.
     * @param typ     The event type.
     * @return A list of containers.
     */"
"<fim_prefix>on;
import de.presti.ree6.sql.entities.custom.CustomEventAction;
import de.presti.ree6.sql.entities.custom.CustomEventTyp;
import org.reflections.Reflections;
import org.reflections.util.ClasspathHelper;
import org.reflections.util.ConfigurationBuilder;
import reactor.core.publisher.Mono;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**<fim_suffix>
public class CustomEventContainerCreator {

    /**
     * A Cache for all StreamActions.
     */
    private static final HashMap<String, Class<? extends IEventAction>> cachedActions = new HashMap<>();

    /**
     * Constructor should not be called, since it is a utility class that doesn't need an instance.
     */
    private CustomEventContainerCreator() {
        throw new Illeg<fim_middle>","
 * A Utility class used to create CustomEventContainers.
 */","
 * This class is used to create a custom event container.
"
"<fim_prefix>/*<fim_suffix>

/**
 * Provides all means to subscribe for topics at the MQTT broker in a protocol version agnostic manner.
 */
@org.eclipse.ditto.utils.jsr305.annotations.AllParametersAndReturnValuesAreNonnullByDefault
package org.eclipse.ditto.connectivity.service.messaging.mqtt.hivemq.message.connect;
<fim_middle>","
 * Copyright (c) 2022 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","*
 * Provides all means to subscribe for topics at the MQTT broker in a protocol version agnostic manner.
 */"
"<fim_prefix> Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */

/**<fim_suffix>
@org.eclipse.ditto.utils.jsr305.annotations.AllParametersAndReturnValuesAreNonnullByDefault
package org.eclipse.ditto.connectivity.service.messaging.mqtt.hivemq.message.connect;
<fim_middle>","
 * Provides all means to subscribe for topics at the MQTT broker in a protocol version agnostic manner.
 */","
 * This package contains the implementation of the MQTT CONNECT message.
 *
 * @see <a href="""
"<fim_prefix>/*<fim_suffix>

/**
 * Allows YSLD files to be read/written.
 *
 * @author Robert Ward (SCISYS)
 */
package com.sldeditor.extension.filesystem.file.ysld;
<fim_middle>","
 * SLD Editor - The Open Source Java SLD Editor
 *
 * Copyright (C) 2016, SCISYS UK Limited
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Allows YSLD files to be read/written.
 *
 * @author Robert Ward (SCISYS)
 */"
"<fim_prefix>gram is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**<fim_suffix>
package com.sldeditor.extension.filesystem.file.ysld;
<fim_middle>","
 * Allows YSLD files to be read/written.
 *
 * @author Robert Ward (SCISYS)
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package org.cicirello.search.evo;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.*;

/** JUnit test cases for BoltzmannStochasticUniversalSampling. */
public class BoltzmannStochasticUniversalSamplingConstantTests {

  @Test
  public void testBoltzmannStochasticUniversalSamplingConstant() {
    double[] fitnesses = {0, 1, 2, 3, 4, 5};
    PopulationF<fim_middle>","
 * Chips-n-Salsa: A library of parallel self-adaptive local search algorithms.
 * Copyright (C) 2002-2023 Vincent A. Cicirello
 *
 * This file is part of Chips-n-Salsa (https://chips-n-salsa.cicirello.org/).
 *
 * Chips-n-Salsa is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Chips-n-Salsa is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Copyright (c) 2020 Cicirello
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License."
"<fim_prefix>f
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package org.cicirello.search.evo;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.*;

/**<fim_suffix>
public class BoltzmannStochasticUniversalSamplingConstantTests {

  @Test
  public void testBoltzmannStochasticUniversalSamplingConstant() {
    double[] fitnesses = {0, 1, 2, 3, 4, 5};
    PopulationFitnessVector.Double vector = PopulationFitnessVector.Double.of(fitnesses.clone());

    BoltzmannStochasticUniversalSampling selection = new BoltzmannStochasticUniversalSampling(1.0);
  <fim_middle>", JUnit test cases for BoltzmannStochasticUniversalSampling. */,"
 * Tests for {@link BoltzmannStochasticUniversalSampling}.
 */"
"<fim_prefix>/*<fim_suffix>

package de.Keyle.MyPet.compat.v1_18_R1.entity;

import de.Keyle.MyPet.api.entity.MyPetBukkitEntity;
import de.Keyle.MyPet.api.entity.MyPetBukkitPart;
import de.Keyle.MyPet.api.util.Compat;
import org.bukkit.craftbukkit.v1_18_R1.CraftServer;
import org.bukkit.craftbukkit.v1_18_R1.entity.CraftEntity;
import org.bukkit.entity.EntityType;
import org.jetbrains.annotations.NotNull;
import <fim_middle>","
 * This file is part of MyPet
 *
 * Copyright Â© 2011-2020 Keyle
 * MyPet is licensed under the GNU Lesser General Public License.
 *
 * MyPet is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MyPet is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author Keyle
 */"
"<fim_prefix>/*<fim_suffix>

package android.hardware;

public class Sensor {

  public static final int TYPE_ROTATION_VECTOR = 11;
  public static final int TYPE_GEOMAGNETIC_ROTATION_VECTOR = 20;
  public static final int TYPE_STEP_COUNTER = 19;
}
<fim_middle>","
 * SonarQube Java
 * Copyright (C) 2012-2023 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */","*
 * @hide
 */"
"<fim_prefix>/**<fim_suffix>
package com.powsybl.commons.datasource;

import java.io.IOException;
import java.io.InputStream;
import java.util.Set;

/**
 * @author Geoffroy Jamgotchian {@literal <geoffroy.jamgotchian at rte-france.com>}
 */
public interface ReadOnlyDataSource {

    String getBaseName();

    default String getDataExtension() {
        return null;
    }

    /**
     * Check if a file exists in <fim_middle>","
 * Copyright (c) 2016, RTE (http://www.rte-france.com)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * SPDX-License-Identifier: MPL-2.0
 */","
 * @author Geoffroy Jamgotchian {@literal <geoffroy.jamgotchian at rte-france.com>}
 */"
"<fim_prefix> file (for example: iidm, xml, txt, etc.)
     * @return true if the file exists, else false
     */
    boolean exists(String suffix, String ext) throws IOException;

    /**
     * Check if a file exists in the datasource.
     * @param fileName Name of the file
     * @return true if the file exists, else false
     */
    boolean exists(String fileName) throws IOException;

    /**<fim_suffix>
    boolean isDataExtension(String ext);

    InputStream newInputStream(String suffix, String ext) throws IOException;

    InputStream newInputStream(String fileName) throws IOException;

    /**
     * Returns a set of Strings corresponding to the name of the different files in the datasource.
     * @param regex regex used to identify files in the datasource
     * @return a set o<fim_middle>","
     * Check if the provided extension is a data extension for the datasource
     * @param ext Extension to compare to the data extension of the datasource
     * @return true if the datasource data extension is null, empty or equal to {@code ext}, else false
     */","
     * Check if a file exists in the datasource.
     * @param fileName Name of the file
     * @return true if the file exists, else false
     */"
"<fim_prefix>://www.rte-france.com)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * SPDX-License-Identifier: MPL-2.0
 */
package com.powsybl.commons.datasource;

import java.io.IOException;
import java.io.InputStream;
import java.util.Set;

/**<fim_suffix>
public interface ReadOnlyDataSource {

    String getBaseName();

    default String getDataExtension() {
        return null;
    }

    /**
     * Check if a file exists in the datasource. The file name will be constructed as:
     * {@code <basename><suffix>.<ext>}
     * @param suffix Suffix to add to the basename of the datasource
     * @param ext Extension of the file (for exam<fim_middle>","
 * @author Geoffroy Jamgotchian {@literal <geoffroy.jamgotchian at rte-france.com>}
 */","
 * Interface for a datasource that can only be read.
 *
 * @author <NAME>
 */"
"<fim_prefix>DX-License-Identifier: MPL-2.0
 */
package com.powsybl.commons.datasource;

import java.io.IOException;
import java.io.InputStream;
import java.util.Set;

/**
 * @author Geoffroy Jamgotchian {@literal <geoffroy.jamgotchian at rte-france.com>}
 */
public interface ReadOnlyDataSource {

    String getBaseName();

    default String getDataExtension() {
        return null;
    }

    /**<fim_suffix>
    boolean exists(String suffix, String ext) throws IOException;

    /**
     * Check if a file exists in the datasource.
     * @param fileName Name of the file
     * @return true if the file exists, else false
     */
    boolean exists(String fileName) throws IOException;

    /**
     * Check if the provided extension is a data extension for the datasource
     * @param ext Ext<fim_middle>","
     * Check if a file exists in the datasource. The file name will be constructed as:
     * {@code <basename><suffix>.<ext>}
     * @param suffix Suffix to add to the basename of the datasource
     * @param ext Extension of the file (for example: iidm, xml, txt, etc.)
     * @return true if the file exists, else false
     */","
     * Get the list of all files in the datasource.
     * @return A set of file names
     */"
"<fim_prefix> file exists in the datasource. The file name will be constructed as:
     * {@code <basename><suffix>.<ext>}
     * @param suffix Suffix to add to the basename of the datasource
     * @param ext Extension of the file (for example: iidm, xml, txt, etc.)
     * @return true if the file exists, else false
     */
    boolean exists(String suffix, String ext) throws IOException;

    /**<fim_suffix>
    boolean exists(String fileName) throws IOException;

    /**
     * Check if the provided extension is a data extension for the datasource
     * @param ext Extension to compare to the data extension of the datasource
     * @return true if the datasource data extension is null, empty or equal to {@code ext}, else false
     */
    boolean isDataExtension(String ext);

    InputSt<fim_middle>","
     * Check if a file exists in the datasource.
     * @param fileName Name of the file
     * @return true if the file exists, else false
     */","
     * Check if the provided file name exists in the datasource. The file name will be constructed as:
     * {@code <basename><suffix>.<ext>}
     * @param fileName File"
"<fim_prefix>     * @param ext Extension to compare to the data extension of the datasource
     * @return true if the datasource data extension is null, empty or equal to {@code ext}, else false
     */
    boolean isDataExtension(String ext);

    InputStream newInputStream(String suffix, String ext) throws IOException;

    InputStream newInputStream(String fileName) throws IOException;

    /**<fim_suffix>
    Set<String> listNames(String regex) throws IOException;
}
<fim_middle>","
     * Returns a set of Strings corresponding to the name of the different files in the datasource.
     * @param regex regex used to identify files in the datasource
     * @return a set of filenames
     * @throws IOException exception thrown during file opening
     */","
     * List all the names of the files in the datasource.
     *
     * @param regex Regular expression to match the names against
     * @return A set of names
     * @throws IOException If an error occurs while listing the files
   "
"<fim_prefix>/*<fim_suffix>
package info.novatec.testit.livingdoc.reflect;

import java.lang.reflect.Field;


/**
 * This <code>Action</code> implementation reads the value of a
 * <code>class</code> public <code>Field</code>.
 */
public class FieldReader extends Message {

    private final Object target;
    private final Field field;

    public FieldReader(Object target, Field field) {
        super();

    <fim_middle>"," Copyright (c) 2006 Pyxis Technologies inc.
 * 
 * This is free software; you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This software is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF site:
 * http://www.fsf.org. */","*
 * This <code>Action</code> implementation reads the value of a
 * <code>class</code> public <code>Field</code>.
 */"
"<fim_prefix>eneral Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF site:
 * http://www.fsf.org. */
package info.novatec.testit.livingdoc.reflect;

import java.lang.reflect.Field;


/**<fim_suffix>
public class FieldReader extends Message {

    private final Object target;
    private final Field field;

    public FieldReader(Object target, Field field) {
        super();

        this.target = target;
        this.field = field;
    }

    @Override
    public Object send(String... args) throws IllegalArgumentException, IllegalAccessException {
        assertArgumentsCount(ar<fim_middle>","
 * This <code>Action</code> implementation reads the value of a
 * <code>class</code> public <code>Field</code>.
 */","
 * This class represents a message that reads a field of a given object.
 * <p>
 * <b>Example:</b>
 * <pre>"
"<fim_prefix>es to create a sum for: ACTG0/X.
    private final String inputFilename; // The input file name with path and extension.
    private final int startLine;
    private final int endLine;
    private final int columns;
    private List<int[]> totals = Collections.synchronizedList(new ArrayList<>()); // ALL access, including reading through .get(), must be in a synchronized block.

    /**<fim_suffix>
    public PedSumTask(String filename, int startLine, int endLine, int columns) {
        this.inputFilename = filename;
        this.startLine = startLine;
        this.endLine = endLine;
        this.columns = columns;
        //initTotals(); // Called in run()/start().
    }

    /**
     * Initializes and fills the totals datastructure with default data for further transformation.<fim_middle>","
     * Count and store the frequencies of bases for the assigned columns.
     * 
     * @param filename  The input file path and file name with a file extension for processing.
     * @param startLine The line for this worker to start at.
     * @param endLine    The line for this worker to finish at.
     * @param columns   The number of column pairs that this worker should sum.
     */","
     * Initializes and fills the totals datastructure with default data for further transformation.
     */"
"<fim_prefix>package com.snptools.converter.pedutilities;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

/**<fim_suffix>
public class PedSumTask implements Runnable {

    private final int COLUMNS_TO_SKIP = 6; // Number of columns in the ped line header.
    private final int NUMBER_OF_BASES = 5; // Number of bases to create a sum for: ACTG0/X.
    private final String inputFilename; // The input file name with path and extension.
    private final int startLine;
    private final int endLine;
    priv<fim_middle>","
 * The PedSumTask class is used count the frequencies of bases for a set of columns.
 * The results are retrieved through the synchronized totals datastructure after the
 * task has completed and the thread was successfully joined.
 * 
 * @author  Jeff Warner
 * @version 1.1, July 2021
 */","
 *
 * @author jmccormick
 */"
"<fim_prefix>o finish at.
     * @param columns   The number of column pairs that this worker should sum.
     */
    public PedSumTask(String filename, int startLine, int endLine, int columns) {
        this.inputFilename = filename;
        this.startLine = startLine;
        this.endLine = endLine;
        this.columns = columns;
        //initTotals(); // Called in run()/start().
    }

    /**<fim_suffix>
    private void initTotals() {
        // Populate the totals of arrays to store counts of ACTG0.
        synchronized (totals) {
            for (int i = 0; i < columns; ++i) {
                totals.add(i, new int[NUMBER_OF_BASES]);
            }
        }
    }

    @Override
    public void run() {
        try (BufferedReader reader = new BufferedReader(new FileReader(inputFilena<fim_middle>","
     * Initializes and fills the totals datastructure with default data for further transformation.
     */","
     * Initializes the totals of arrays to store counts of ACTG0.
     */"
"<fim_prefix>tem.out.println(""00, or unknown."" + columnNumber + "". "" + value);
                            break;
                    }
                } else {
                    System.out.println(""Malformed ped file, odd number of alleles."");
                    lineScanner.close();
                    return;
                }
            }
        }
        lineScanner.close();
    }

    /**<fim_suffix>
    public synchronized List<int[]> getTotals() {
        return totals;
    }

}
<fim_middle>","
     * All access to totals must be synchronized. Including reading of data through.get().
     * 
     * @return  The synchronized totals datastructure.
     */","
     * @return the totals
     */"
"<fim_prefix>);
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""There was a problem accessing the input file."");
            e.printStackTrace();
        } catch (IndexOutOfBoundsException e) {
            System.out.println(""Index does not match expectation. Possible malformed ped file."");
            e.printStackTrace();
        }

    }

    /**<fim_suffix>
    private void accumulateTotals(String line) {
        if (line == null || line.isBlank() || line.isEmpty()) {
            System.out.println(""The provided line contained no data."");
            return;
        }
        Scanner lineScanner = new Scanner(line);
        for (int j = 0; j < COLUMNS_TO_SKIP; ++j) { // Skip line header.
            if (lineScanner.hasNext()) { lineScann<fim_middle>","
     * Counts and accumulates SNP frequencies from the provided line into the
     * synchronized totals data structure.
     * 
     * @param line  The TSV line read from the file that will be tallied.
     */","
     * This method is used to read the input file and create a list of Ped objects.
     *
     * @param file The file to read.
     * @return A list of Ped objects.
     */"
"<fim_prefix>/*<fim_suffix>

package io.xeres.common.util;

import org.junit.jupiter.api.Test;

import static io.xeres.common.util.ByteUnitUtils.fromBytes;
import static org.junit.jupiter.api.Assertions.assertEquals;

class ByteUnitUtilsTest
{
	@Test
	void FromBytes_Various_Success()
	{
		assertEquals(""invalid"", fromBytes(-1));
		assertEquals(""0 bytes"", fromBytes(0));
		assertEquals(""512 bytes"", fromBytes(512));<fim_middle>","
 * Copyright (c) 2019-2023 by David Gerber - https://zapek.com
 *
 * This file is part of Xeres.
 *
 * Xeres is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Xeres is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Xeres.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Copyright (C) 2019 <NAME>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>/*<fim_suffix>

package org.yawlfoundation.yawl.editor.ui.resourcing.panel;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.yawlfoundation.yawl.editor.core.resourcing.TaskResourceSet;
import org.yawlfoundation.yawl.editor.core.resourcing.YResourceHandler;
import org.yawlfoundation.yawl.editor.ui.resourcing.ResourceDialog;
import org.yawlfoundation.yawl<fim_middle>","
 * Copyright (c) 2004-2013 The YAWL Foundation. All rights reserved.
 * The YAWL Foundation is a collaboration of individuals and
 * organisations who are committed to improving workflow technology.
 *
 * This file is part of YAWL. YAWL is free software: you can
 * redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation.
 *
 * YAWL is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General
 * Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with YAWL. If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>;
import org.yawlfoundation.yawl.editor.ui.resourcing.ResourceDialog;
import org.yawlfoundation.yawl.editor.ui.specification.SpecificationModel;
import org.yawlfoundation.yawl.elements.YAtomicTask;
import org.yawlfoundation.yawl.elements.YNet;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ItemListener;
import java.util.Set;

/**<fim_suffix>
public abstract class AbstractResourceTabContent extends JPanel {

    private final Logger _log;
    private final YNet _net;
    private final YAtomicTask _task;


    protected AbstractResourceTabContent(YNet net, YAtomicTask task) {
        super();
        _net = net;
        _task = task;
        _log = LogManager.getLogger(this.getClass());
    }


    protected YNet getNet() {<fim_middle>","
 * @author Michael Adams
 * @date 24/06/13
 */","
 * Created by dhsmit on 1/30/15.
 */"
"<fim_prefix>/*<fim_suffix>
package org.tanaguru.rules.rgaa32017;

import static org.tanaguru.entity.audit.TestSolution.NEED_MORE_INFO;
import static org.tanaguru.rules.keystore.AttributeStore.ARIA_LABELLEDBY_ATTR;
import static org.tanaguru.rules.keystore.AttributeStore.ARIA_LABEL_ATTR;
import static org.tanaguru.rules.keystore.AttributeStore.TITLE_ATTR;
import static org.tanaguru.rules.keystore.HtmlElementStor<fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>s.keystore.MarkerStore.INFORMATIVE_IMAGE_MARKER;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.tanaguru.entity.audit.ProcessResult;
import org.tanaguru.entity.audit.TestSolution;
import org.tanaguru.rules.keystore.HtmlElementStore;
import org.tanaguru.rules.keystore.RemarkMessageStore;
import org.tanaguru.rules.rgaa32017.test.Rgaa32017RuleImplementationTestCase;

/**<fim_suffix>
public class Rgaa32017Rule010311Test extends Rgaa32017RuleImplementationTestCase {

    public Rgaa32017Rule010311Test(String testName) {
        super(testName);
    }

    @Override
    protected void setUpRuleImplementationClassName() {
        setRuleImplementationClassName(""org.tanaguru.rules.rgaa32017.Rgaa32017Rule010311"");
    }

    @Override
    protected void setUpWebResourc<fim_middle>","
 *
 * @author tanaguru
 */","
 * Test case for rule 103.11.
"
"<fim_prefix>/*<fim_suffix>

package love.sola.netsupport.api.user;

import org.hibernate.exception.ConstraintViolationException;

import javax.servlet.http.HttpServletRequest;

import love.sola.netsupport.api.API;
import love.sola.netsupport.api.Error;
import love.sola.netsupport.enums.Access;
import love.sola.netsupport.enums.Attribute;
import love.sola.netsupport.enums.ISP;
import love.sola.netsupport.pojo.Us<fim_middle>","
 * This file is part of WechatTicketSystem.
 *
 * WechatTicketSystem is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * WechatTicketSystem is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with WechatTicketSystem.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author sola
 *         Created on 2018/1/24.
 *         email: <EMAIL>
 */"
"<fim_prefix>sola.netsupport.sql.TableUser;
import love.sola.netsupport.wechat.Command;

import static love.sola.netsupport.util.Checker.checkBlock;
import static love.sola.netsupport.util.Checker.checkISP;
import static love.sola.netsupport.util.Checker.checkNetAccount;
import static love.sola.netsupport.util.Checker.checkPhoneNumber;
import static love.sola.netsupport.util.Checker.checkRoom;

/**<fim_suffix>
public class ProfileModify extends API {

    public ProfileModify() {
        url = ""/profilemodify"";
        access = Access.USER;
        authorize = Command.PROFILE;
    }

    @Override
    protected Object process(HttpServletRequest req, WxSession session) throws Exception {
        User u = session.getAttribute(Attribute.USER);
        ISP isp = checkISP(req.getParameter(""isp"")<fim_middle>","
 * @author Sola {@literal <dev@sola.love>}
 */","
 * Created by time on 2017/8/23.
 * email <EMAIL>."
"<fim_prefix>/*<fim_suffix>
package org.tmatesoft.hg.util;


/**
 * Memory-friendly alternative to HashSet. With slightly worse performance than that of HashSet, uses n * sizeof(HashMap.Entry) less memory 
 * (i.e. for set of 50k elements saves more than 1 Mb of memory). Besides, elements of this set can be obtained (not only queried for presence) -  
 * the option essential for canonical mappings (aka Po<fim_middle>","
 * Copyright (c) 2011-2012 TMate Software Ltd
 *  
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * For information on how to redistribute this software under
 * the terms of a license other than GNU General Public License
 * contact TMate Software at support@hg4j.com
 */","*
 * @author <NAME>
 *         <p/>
 *         Created on 19.10.2009
 */"
"<fim_prefix>Y WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * For information on how to redistribute this software under
 * the terms of a license other than GNU General Public License
 * contact TMate Software at support@hg4j.com
 */
package org.tmatesoft.hg.util;


/**<fim_suffix>
public class DirectHashSet<T> {
	
	private Object[] table;
	private int size;
	private int threshold;

	public DirectHashSet() {
		this (16);
	}

	public DirectHashSet(int capacity) {
        int result = 2;
        while (result < capacity) {
        	result <<= 1;
        }
		table = new Object[result];
		threshold = result - (result >>> 2);
	}

	/**
	 * Add ele<fim_middle>","
 * Memory-friendly alternative to HashSet. With slightly worse performance than that of HashSet, uses n * sizeof(HashMap.Entry) less memory 
 * (i.e. for set of 50k elements saves more than 1 Mb of memory). Besides, elements of this set can be obtained (not only queried for presence) -  
 * the option essential for canonical mappings (aka Pool)
 * 
 * @author Artem Tikhomirov
 * @author TMate Software Ltd.
 */","
 * A HashSet implementation that uses a direct array.
 * 
 * @author <NAME>
 * @since 1.0
 * @param <T>
 */"
"<fim_prefix>ment
	 */
	@SuppressWarnings(""unchecked"")
	public T put(T o) {
		final int h = hash(o);
		final int mask = table.length - 1;
		int i = h & mask;
		Object t;
		while ((t = table[i]) != null) {
			if (t.equals(o)) {
				table[i] = o;
				return (T) t;
			}
			i = (i+1) & mask;
		}
		table[i] = o;
		if (++size >= threshold) {
			resize();
		}
		return null;
	}
	
	/**<fim_suffix>
	@SuppressWarnings(""unchecked"")
	public T get(T o) {
		final int h = hash(o);
		final int mask = table.length - 1;
		int i = h & mask;
		Object t;
		while ((t = table[i]) != null) {
			if (t == o || t.equals(o)) {
				return (T) t;
			}
			i = (i+1) & mask;
		}
		return null;
	}
	
	public int size() {
		return size;
	}
	
	public void clear() {
		Object[] t = table<fim_middle>","
	 * Query set for the element.
	 * @param o element, shall not be <code>null</code>
	 * @return element from the set, if present
	 */","
	 * Returns the object with the specified key.
	 * @param o the key
	 * @return the object with the specified key, or null if no such object exists"
"<fim_prefix>are Ltd.
 */
public class DirectHashSet<T> {
	
	private Object[] table;
	private int size;
	private int threshold;

	public DirectHashSet() {
		this (16);
	}

	public DirectHashSet(int capacity) {
        int result = 2;
        while (result < capacity) {
        	result <<= 1;
        }
		table = new Object[result];
		threshold = result - (result >>> 2);
	}

	/**<fim_suffix>
	@SuppressWarnings(""unchecked"")
	public T put(T o) {
		final int h = hash(o);
		final int mask = table.length - 1;
		int i = h & mask;
		Object t;
		while ((t = table[i]) != null) {
			if (t.equals(o)) {
				table[i] = o;
				return (T) t;
			}
			i = (i+1) & mask;
		}
		table[i] = o;
		if (++size >= threshold) {
			resize();
		}
		return null;
	}
	
	/**
	 * Quer<fim_middle>","
	 * Add element to the set.
	 * @param o element, shall not be <code>null</code>
	 * @return previous element from the set equal to the argument
	 */","
	 * Resize the table.
	 */"
"<fim_prefix>/*<fim_suffix>
package org.dbwiki.data.resource;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;

// FIXME #wikipages: Find a way of encoding the timestamp
//   There is currently no way of encoding the timestamp in 
//   a single URI parameter.
//
//   ResourceIdentifier implicitly assumes that an entire
//   identifier can be encoded in a single URI parameter.

/** PageId<fim_middle>"," 
    BEGIN LICENSE BLOCK
    Copyright 2010-2011, Heiko Mueller, Sam Lindley, James Cheney and
    University of Edinburgh

    This file is part of Database Wiki.

    Database Wiki is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Database Wiki is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Database Wiki.  If not, see <http://www.gnu.org/licenses/>.
    END LICENSE BLOCK
*/","*
 * @author <NAME>
 */"
"<fim_prefix>ourceIdentifier {
	/*
	 * Private Variables
	 */
	private String _title;
	private long _timestamp;
	private int _id;
	
	/*
	 * Constructors
	 */
	public PageIdentifier(String title, int id, long timestamp) {
		_title = title;
		_timestamp = timestamp;
		_id = id;
	}
	
	public PageIdentifier(String title) {
		this(title, -1, -1);		
		
	}
	
	public PageIdentifier() {
		this("""");
	}
	
	/*<fim_suffix>
	public int compareTo(ResourceIdentifier identifier) {
		return this.toURLString().compareTo(((PageIdentifier)identifier).toURLString());
	}
	
	public boolean equals(ResourceIdentifier identifier) {
		return this.toURLString().equals(((PageIdentifier)identifier).toURLString());
	}

	public boolean isRootIdentifier() {
		return (_title.length() == 0 && _timestamp == -1);
	}

	public lo<fim_middle>","
	 * Public Methods
	 */","
	 * Public Methods
	 */"
"<fim_prefix>e
//   identifier can be encoded in a single URI parameter.

/** PageIdentifier identifies a wiki page.
 * Contains a title and a timestamp for the page.
 * Also provides a name for the page that can be used in queries.
 */
public class PageIdentifier implements ResourceIdentifier {
	/*
	 * Private Variables
	 */
	private String _title;
	private long _timestamp;
	private int _id;
	
	/*<fim_suffix>
	public PageIdentifier(String title, int id, long timestamp) {
		_title = title;
		_timestamp = timestamp;
		_id = id;
	}
	
	public PageIdentifier(String title) {
		this(title, -1, -1);		
		
	}
	
	public PageIdentifier() {
		this("""");
	}
	
	/*
	 * Public Methods
	 */
	public int compareTo(ResourceIdentifier identifier) {
		return this.toURLString().compareTo(((PageIdentifier)identifie<fim_middle>","
	 * Constructors
	 */","*
	 * Constructor
	"
"<fim_prefix>LOCK
*/
package org.dbwiki.data.resource;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;

// FIXME #wikipages: Find a way of encoding the timestamp
//   There is currently no way of encoding the timestamp in 
//   a single URI parameter.
//
//   ResourceIdentifier implicitly assumes that an entire
//   identifier can be encoded in a single URI parameter.

/**<fim_suffix>
public class PageIdentifier implements ResourceIdentifier {
	/*
	 * Private Variables
	 */
	private String _title;
	private long _timestamp;
	private int _id;
	
	/*
	 * Constructors
	 */
	public PageIdentifier(String title, int id, long timestamp) {
		_title = title;
		_timestamp = timestamp;
		_id = id;
	}
	
	public PageIdentifier(String title) {
		this(title, -1, -1);		
		
	}
	
	pub<fim_middle>"," PageIdentifier identifies a wiki page.
 * Contains a title and a timestamp for the page.
 * Also provides a name for the page that can be used in queries.
 */","
 * A PageIdentifier is a ResourceIdentifier that represents a page.
 * 
 * @author <NAME>
 * @version 0.9.9
 * @since 0"
"<fim_prefix>imestamp in 
//   a single URI parameter.
//
//   ResourceIdentifier implicitly assumes that an entire
//   identifier can be encoded in a single URI parameter.

/** PageIdentifier identifies a wiki page.
 * Contains a title and a timestamp for the page.
 * Also provides a name for the page that can be used in queries.
 */
public class PageIdentifier implements ResourceIdentifier {
	/*<fim_suffix>
	private String _title;
	private long _timestamp;
	private int _id;
	
	/*
	 * Constructors
	 */
	public PageIdentifier(String title, int id, long timestamp) {
		_title = title;
		_timestamp = timestamp;
		_id = id;
	}
	
	public PageIdentifier(String title) {
		this(title, -1, -1);		
		
	}
	
	public PageIdentifier() {
		this("""");
	}
	
	/*
	 * Public Methods
	 */
	public int compareTo(R<fim_middle>","
	 * Private Variables
	 */","*
	 * Fields
	 */"
"<fim_prefix>package wtf.choco.arrows.persistence;

import org.bukkit.NamespacedKey;
import org.bukkit.persistence.PersistentDataAdapterContext;
import org.bukkit.persistence.PersistentDataType;
import org.jetbrains.annotations.NotNull;

/**<fim_suffix>
public final class PersistentDataTypeNamespacedKey implements PersistentDataType<String, NamespacedKey> {

    PersistentDataTypeNamespacedKey() { }

    @Override
    @NotNull
    @SuppressWarnings(""deprecation"")
    public NamespacedKey fromPrimitive(@NotNull String string, @NotNull PersistentDataAdapterContext context) {
        String[] split = string.split("":"");
        return sp<fim_middle>","
 * A {@link PersistentDataType} implementation for {@link NamespacedKey NamespacedKeys}.
 *
 * @author Parker Hawke - Choco
 */","
 * A {@link PersistentDataType} for {@link NamespacedKey}s.
 */"
"<fim_prefix>InventoryPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.Slot;
import net.minecraft.item.ItemStack;

import com.cyntain.Fm.tileentity.TileMixingTable;
import com.cyntain.Fm.tileentity.TileWorkTable;


public class ContainerWorkTable extends Container {

    public ContainerWorkTable(InventoryPlayer inventoryPlayer, TileWorkTable workTable) {

        /*<fim_suffix>
        for (int slotRowIndex = 0; slotRowIndex < 3; ++slotRowIndex) {
            this.addSlotToContainer(new Slot(workTable, slotRowIndex, (slotRowIndex * 5) * 4 + 8,
                    35));
        }
        for (int slotColumIndex = 0; slotColumIndex < 2; ++slotColumIndex) {
            this.addSlotToContainer(new Slot(workTable, slotColumIndex + 3, 28,
                    (slot<fim_middle>", Cog layout slots */,"*
  "
"<fim_prefix>.addSlotToContainer(new Slot(workTable, slotColumIndex + 3, 28,
                    (slotColumIndex * 5) * 8 + 15));
        }
        /* two slots above one output */
        for (int slotRowIndex = 0; slotRowIndex < 2; ++slotRowIndex) {
            this.addSlotToContainer(new Slot(workTable, slotRowIndex + 5,
                    (slotRowIndex * 5) * 4 + 89, 11));
        }
        /*<fim_suffix>
        for (int slotRowIndex = 0; slotRowIndex < 2; ++slotRowIndex) {
            this.addSlotToContainer(new Slot(workTable, slotRowIndex + 7,
                    (slotRowIndex * 5) * 10 + 93, 35));
        }

        for (int inventoryRowIndex = 0; inventoryRowIndex < 3; ++inventoryRowIndex) {
            for (int inventoryColumnIndex = 0; inventoryColumnIndex < 9; ++inventoryColum<fim_middle>", OUTPUT */, two slots
"<fim_prefix> < 3; ++slotRowIndex) {
            this.addSlotToContainer(new Slot(workTable, slotRowIndex, (slotRowIndex * 5) * 4 + 8,
                    35));
        }
        for (int slotColumIndex = 0; slotColumIndex < 2; ++slotColumIndex) {
            this.addSlotToContainer(new Slot(workTable, slotColumIndex + 3, 28,
                    (slotColumIndex * 5) * 8 + 15));
        }
        /*<fim_suffix>
        for (int slotRowIndex = 0; slotRowIndex < 2; ++slotRowIndex) {
            this.addSlotToContainer(new Slot(workTable, slotRowIndex + 5,
                    (slotRowIndex * 5) * 4 + 89, 11));
        }
        /* OUTPUT */
        for (int slotRowIndex = 0; slotRowIndex < 2; ++slotRowIndex) {
            this.addSlotToContainer(new Slot(workTable, slotRowIndex + 7,
           <fim_middle>", two slots above one output */, OUTPUT */
"<fim_prefix>/*<fim_suffix>

package pl.plajer.pinata.api;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LeashHitch;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.entity.Sheep;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.p<fim_middle>","
 * Pinata plugin - spawn pinata mob and kill it to get drops
 * Copyright (C)2018 Plajer
 *
 *  This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by Plajer
 * Copyright (c) 2019 <NAME>. All rights reserved.
 * @author Plajer
 * Created on 19.08.2019
 */"
"<fim_prefix>otion.PotionEffectType;

import pl.plajer.pinata.Main;
import pl.plajer.pinata.pinata.LivingPinata;
import pl.plajer.pinata.pinata.Pinata;
import pl.plajer.pinata.utils.Utils;
import pl.plajerlair.core.utils.XMaterial;

/**
 * Class with pinata creation methods.
 */
public class PinataFactory implements Listener {

  private static Main plugin = JavaPlugin.getPlugin(Main.class);

  /**<fim_suffix>
  public static boolean createPinata(final Location fenceLocation, final Player player, final LivingEntity entity, final Pinata pinata) {
    PinataCreateEvent pce = new PinataCreateEvent(player, entity, pinata);
    Bukkit.getPluginManager().callEvent(pce);
    if (pce.isCancelled()) {
      entity.remove();
      if (fenceLocation.getBlock().getType().equals(XMaterial.OAK_FENCE.pars<fim_middle>","
   * todo
   * Creates pinata at specified location for target player using already spawned entity, name of pinata required.
   *
   * @param fenceLocation location where to spawn pinata
   * @param player        player who will be owner of pinata
   * @param entity        entity that will be transformed to pinata
   * @param pinata        name of pinata from pinatas.yml
   * @return <b>true</b> if creation succeed, <b>false</b> if creation couldn't be completed
   */","
   * Creates a pinata at the given location.
   * @param fenceLocation location of the fence
   * @param player player who created the pinata
   * @param entity entity that will be pinata
   * @param pinata pinata to be created
   * @return true if pinata was created, false otherwise
   */"
"<fim_prefix>mport org.bukkit.entity.Sheep;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;

import pl.plajer.pinata.Main;
import pl.plajer.pinata.pinata.LivingPinata;
import pl.plajer.pinata.pinata.Pinata;
import pl.plajer.pinata.utils.Utils;
import pl.plajerlair.core.utils.XMaterial;

/**<fim_suffix>
public class PinataFactory implements Listener {

  private static Main plugin = JavaPlugin.getPlugin(Main.class);

  /**
   * todo
   * Creates pinata at specified location for target player using already spawned entity, name of pinata required.
   *
   * @param fenceLocation location where to spawn pinata
   * @param player        player who will be owner of pinata
   * @param entit<fim_middle>","
 * Class with pinata creation methods.
 */","
 * @author Plajer
 * <p>"
"<fim_prefix>tionEffectType.BLINDNESS, pinata.getBlindnessTime() * 20, 1));
      if (pinata.isFullBlindness()) {
        player.addPotionEffect(new PotionEffect(PotionEffectType.NIGHT_VISION, pinata.getBlindnessTime() * 20, 1));
      }
    }
    //Scheduler to avoid graphical glitch
    Bukkit.getScheduler().runTaskLater(plugin, () -> entity.setLeashHolder(hitch), 20);
    return true;
  }

  /**<fim_suffix>
  public static boolean createPinata(final Location fenceLocation, final LivingEntity entity, final Pinata pinata) {
    PinataCreateEvent pce = new PinataCreateEvent(entity, pinata);
    Bukkit.getPluginManager().callEvent(pce);
    if (pce.isCancelled()) {
      entity.remove();
      if (fenceLocation.getBlock().getType().equals(XMaterial.OAK_FENCE.parseMaterial())) {
        fence<fim_middle>","
   * todo
   * Creates pinata at specified location using already spawned entity, name of pinata required.
   *
   * @param fenceLocation location where to spawn pinata
   * @param entity        entity that will be transformed to pinata
   * @return <b>true</b> if creation succeed, <b>false</b> if creation couldn't be completed
   */","
   * Create a pinata at the given location.
   *
   * @param fenceLocation the fence location
   * @param entity        the entity
   * @param pinata        the pinata
   * @return true if the pinata was created
   */"
"<fim_prefix>package org.hiforce.lattice.sample.business.business_b.ext;

import org.hiforce.lattice.annotation.Realization;
import org.hiforce.lattice.sample.ability.ext.BlankOrderLinePriceExt;
import org.hiforce.lattice.sample.business.business_b.BusinessB;
import org.hiforce.lattice.sample.model.OrderLine;

/**<fim_suffix>
@Realization(codes = BusinessB.CODE)
public class BusinessBExt extends BlankOrderLinePriceExt {

    @Override
    public Long getCustomUnitPrice(OrderLine orderLine) {
        return 1000L;
    }
}
<fim_middle>","
 * @author Rocky Yu
 * @since 2022/9/22
 */","
 * Created by henry on 2017/6/1.
 */"
"<fim_prefix>package org.heigit.ohsome.oshdb.filter;

import javax.annotation.Nonnull;
import org.heigit.ohsome.oshdb.util.geometry.Geo;

/**<fim_suffix>
public class GeometryFilterRoundness extends GeometryFilter {
  /**
   * Creates a new ""roundness"" filter object.
   *
   * @param range the allowed range (inclusive) of values to pass the filter
   */
  public GeometryFilterRoundness(@Nonnull ValueRange range) {
    super(range, GeometryMetricEvaluator.fromLambda(Geo::roundness, ""geometry.roundness""));
  }
}
<fim_middle>","
 * A filter which checks the roundness of polygonal OSM feature geometries.
 *
 * <p>Uses the Polsby-Popper test score, see
 * <a href=""https://en.wikipedia.org/wiki/Polsby%E2%80%93Popper_test"">wikipedia</a> for details.</p>
 */","
 * A filter that checks if a geometry is ""round"".
 *
 * @author <NAME>
 */"
"<fim_prefix>r;

import javax.annotation.Nonnull;
import org.heigit.ohsome.oshdb.util.geometry.Geo;

/**
 * A filter which checks the roundness of polygonal OSM feature geometries.
 *
 * <p>Uses the Polsby-Popper test score, see
 * <a href=""https://en.wikipedia.org/wiki/Polsby%E2%80%93Popper_test"">wikipedia</a> for details.</p>
 */
public class GeometryFilterRoundness extends GeometryFilter {
  /**<fim_suffix>
  public GeometryFilterRoundness(@Nonnull ValueRange range) {
    super(range, GeometryMetricEvaluator.fromLambda(Geo::roundness, ""geometry.roundness""));
  }
}
<fim_middle>","
   * Creates a new ""roundness"" filter object.
   *
   * @param range the allowed range (inclusive) of values to pass the filter
   */","
   * Creates a new filter.
   *
   * @param range the range of values to filter
   */"
"<fim_prefix>rt com.fastaccess.data.dao.MarkdownModel;
import com.fastaccess.data.dao.model.Commit;
import com.fastaccess.helper.BundleConstant;
import com.fastaccess.helper.InputHelper;
import com.fastaccess.helper.RxHelper;
import com.fastaccess.provider.rest.RestProvider;
import com.fastaccess.ui.base.mvp.presenter.BasePresenter;

import java.util.ArrayList;

import io.reactivex.Observable;

/**<fim_suffix>

class CommitPagerPresenter extends BasePresenter<CommitPagerMvp.View> implements CommitPagerMvp.Presenter {
    @com.evernote.android.state.State Commit commitModel;
    @com.evernote.android.state.State String sha;
    @com.evernote.android.state.State String login;
    @com.evernote.android.state.State String repoId;
    @com.evernote.android.state.State boolean showToRepoBtn;
    <fim_middle>","
 * Created by Kosh on 10 Dec 2016, 9:23 AM
 */","
 * Created by Kosh on 28 May 2016, 11:04 AM
 */"
"<fim_prefix>ationsandtweaks.mixins.common.core.entity;

import net.minecraft.entity.monster.EntityMob;
import net.minecraft.entity.monster.EntityZombie;
import net.minecraft.world.World;

import org.spongepowered.asm.mixin.Mixin;

@Mixin(EntityZombie.class)
public class MixinEntityZombie extends EntityMob {

    public MixinEntityZombie(World p_i1738_1_) {
        super(p_i1738_1_);
    }

    /**<fim_suffix>
    protected String getLivingSound() {
        return ""mob.zombie.say"";
    }

    /**
     * Returns the sound this mob makes when it is hurt.
     */
    protected String getHurtSound() {
        return ""mob.zombie.hurt"";
    }

    /**
     * Returns the sound this mob makes on death.
     */
    protected String getDeathSound() {
        return ""mob.zombie.death"";
    }
}
<fim_middle>","
     * Returns the sound this mob makes while it's alive.
     */","
     * Returns the sound this mob makes when it is hurt.
     */"
"<fim_prefix>necraft.world.World;

import org.spongepowered.asm.mixin.Mixin;

@Mixin(EntityZombie.class)
public class MixinEntityZombie extends EntityMob {

    public MixinEntityZombie(World p_i1738_1_) {
        super(p_i1738_1_);
    }

    /**
     * Returns the sound this mob makes while it's alive.
     */
    protected String getLivingSound() {
        return ""mob.zombie.say"";
    }

    /**<fim_suffix>
    protected String getHurtSound() {
        return ""mob.zombie.hurt"";
    }

    /**
     * Returns the sound this mob makes on death.
     */
    protected String getDeathSound() {
        return ""mob.zombie.death"";
    }
}
<fim_middle>","
     * Returns the sound this mob makes when it is hurt.
     */","
     * Returns the sound this mob makes on death.
     */"
"<fim_prefix>ic MixinEntityZombie(World p_i1738_1_) {
        super(p_i1738_1_);
    }

    /**
     * Returns the sound this mob makes while it's alive.
     */
    protected String getLivingSound() {
        return ""mob.zombie.say"";
    }

    /**
     * Returns the sound this mob makes when it is hurt.
     */
    protected String getHurtSound() {
        return ""mob.zombie.hurt"";
    }

    /**<fim_suffix>
    protected String getDeathSound() {
        return ""mob.zombie.death"";
    }
}
<fim_middle>","
     * Returns the sound this mob makes on death.
     */","
     * Returns the sound this mob makes on death.
     */"
"<fim_prefix>/**<fim_suffix>

package de.tu_clausthal.in.mec.object.car.drivemodel;

import de.tu_clausthal.in.mec.object.car.CCarLayer;
import de.tu_clausthal.in.mec.object.car.ICar;


/**
 * drive interface for driving models
 */
public interface IDriveModel
{

    /**
     * updates car
     *
     * @param p_currentstep current step number
     * @param p_layer car layer
     * @param p_car car object
     */<fim_middle>","
 * @cond LICENSE
 * ######################################################################################
 * # GPL License                                                                        #
 * #                                                                                    #
 * # This file is part of the micro agent-based traffic simulation MecSim of            #
 * # Clausthal University of Technology - Mobile and Enterprise Computing               #
 * # Copyright (c) 2014-15, Philipp Kraus (philipp.kraus@tu-clausthal.de)               #
 * # This program is free software: you can redistribute it and/or modify               #
 * # it under the terms of the GNU General Public License as                            #
 * # published by the Free Software Foundation, either version 3 of the                 #
 * # License, or (at your option) any later version.                                    #
 * #                                                                                    #
 * # This program is distributed in the hope that it will be useful,                    #
 * # but WITHOUT ANY WARRANTY; without even the implied warranty of                     #
 * # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                      #
 * # GNU General Public License for more details.                                       #
 * #                                                                                    #
 * # You should have received a copy of the GNU General Public License                  #
 * # along with this program. If not, see http://www.gnu.org/licenses/                  #
 * ######################################################################################
 * @endcond
 */","
 * drive interface for driving models
 */"
"<fim_prefix>blic License                  #
 * # along with this program. If not, see http://www.gnu.org/licenses/                  #
 * ######################################################################################
 * @endcond
 */

package de.tu_clausthal.in.mec.object.car.drivemodel;

import de.tu_clausthal.in.mec.object.car.CCarLayer;
import de.tu_clausthal.in.mec.object.car.ICar;


/**<fim_suffix>
public interface IDriveModel
{

    /**
     * updates car
     *
     * @param p_currentstep current step number
     * @param p_layer car layer
     * @param p_car car object
     */
    void update( final int p_currentstep, final CCarLayer p_layer, final ICar p_car );

}
<fim_middle>","
 * drive interface for driving models
 */","
 * Interface for drive models.
 *"
"<fim_prefix>ww.gnu.org/licenses/                  #
 * ######################################################################################
 * @endcond
 */

package de.tu_clausthal.in.mec.object.car.drivemodel;

import de.tu_clausthal.in.mec.object.car.CCarLayer;
import de.tu_clausthal.in.mec.object.car.ICar;


/**
 * drive interface for driving models
 */
public interface IDriveModel
{

    /**<fim_suffix>
    void update( final int p_currentstep, final CCarLayer p_layer, final ICar p_car );

}
<fim_middle>","
     * updates car
     *
     * @param p_currentstep current step number
     * @param p_layer car layer
     * @param p_car car object
     */","
     * update the drive model
     *
     * @param p_currentstep current step
     * @param p_layer        layer
     * @param p_car "
"<fim_prefix>/*<fim_suffix>

package cn.taketoday.framework.builder;

import java.io.Serial;

import cn.taketoday.context.ApplicationContext;
import cn.taketoday.context.ApplicationContextInitializer;
import cn.taketoday.context.ApplicationEvent;
import cn.taketoday.context.ApplicationListener;
import cn.taketoday.context.ConfigurableApplicationContext;
import cn.taketoday.context.event.ContextRefreshedEvent;
im<fim_middle>","
 * Copyright 2017 - 2024 the original author or authors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see [https://www.gnu.org/licenses/]
 */","*
 * @author <NAME>
 */"
"<fim_prefix>taketoday.context.ApplicationContext;
import cn.taketoday.context.ApplicationContextInitializer;
import cn.taketoday.context.ApplicationEvent;
import cn.taketoday.context.ApplicationListener;
import cn.taketoday.context.ConfigurableApplicationContext;
import cn.taketoday.context.event.ContextRefreshedEvent;
import cn.taketoday.core.Ordered;
import cn.taketoday.core.OrderedSupport;

/**<fim_suffix>
public class ParentContextApplicationContextInitializer extends OrderedSupport implements ApplicationContextInitializer, Ordered {

  private final ApplicationContext parent;

  public ParentContextApplicationContextInitializer(ApplicationContext parent) {
    super(Ordered.HIGHEST_PRECEDENCE);
    this.parent = parent;
  }

  @Override
  public void initialize(ConfigurableApplication<fim_middle>","
 * {@link ApplicationContextInitializer} for setting the parent context. Also publishes
 * {@link ParentContextAvailableEvent} when the context is refreshed to signal to other
 * listeners that the context is available and has a parent.
 *
 * @author Dave Syer
 * @author <a href=""https://github.com/TAKETODAY"">Harry Yang</a>
 * @since 4.0
 */","
 * @author <NAME>
 */"
"<fim_prefix>public int getOrder() {
      return Ordered.HIGHEST_PRECEDENCE;
    }

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
      if (event.getApplicationContext()
              instanceof ConfigurableApplicationContext context && context == event.getSource()) {
        context.publishEvent(new ParentContextAvailableEvent(context));
      }
    }

  }

  /**<fim_suffix>
  public static class ParentContextAvailableEvent extends ApplicationEvent {

    @Serial
    private static final long serialVersionUID = 1L;

    public ParentContextAvailableEvent(ConfigurableApplicationContext applicationContext) {
      super(applicationContext);
    }

    public ConfigurableApplicationContext getApplicationContext() {
      return (ConfigurableApplicationContex<fim_middle>","
   * {@link ApplicationEvent} fired when a parent context is available.
   */","
   * Event that is published when the parent context is available.
   */"
"<fim_prefix>package iiitd.mc.timetracker.suggestor;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import iiitd.mc.timetracker.ApplicationHelper;
import iiitd.mc.timetracker.database.IDatabaseController;
import iiitd.mc.timetracker.model.Recording;

/**<fim_suffix>
public class RecentTaskSuggestor implements ITaskSuggestor {

    private IDatabaseController db;
    private static final int RECORDING_LIMIT = 5;

    public RecentTaskSuggestor() {
        db = ApplicationHelper.getDatabaseController();
    }

    @Override
    public List<SuggestedTask> getSuggestedTasks() {
        db.open();
        //TODO: use some limit to only get the last 10<fim_middle>","
 * Suggests tasks that were entered by the user previously.
 *
 * @author sebastian & gullal
 */","
 * Created by harsha on 3/7/17.
 */"
"<fim_prefix>ask> getSuggestedTasks() {
        db.open();
        //TODO: use some limit to only get the last 10 (?) recordings?
        List<Recording> recordings = db.getRecordings();
        db.close();

        List<SuggestedTask> tasks = new ArrayList<>();

        Collections.sort(recordings);

        // add unique tasks to list and update their probability (ratio of occurrences)
        /*<fim_suffix>
        int i = RECORDING_LIMIT;
        double prob = 1.0 / RECORDING_LIMIT;
        for (Recording rec : recordings) {
            if (i <= 0)
                break;

            SuggestedTask temp = new SuggestedTask(rec.getTask(), prob);
            int index = tasks.indexOf(temp);
            if (index == -1) {
                // add new task
                tasks.add(temp);
    <fim_middle>","
      How many recordings are considered.
     */",/
"<fim_prefix>package com.terraforming.ares.cards.blue;

import com.terraforming.ares.cards.CardMetadata;
import com.terraforming.ares.model.CardAction;
import com.terraforming.ares.model.Expansion;
import com.terraforming.ares.model.Tag;
import lombok.Getter;
import lombok.RequiredArgsConstructor;

import java.util.List;

/**<fim_suffix>
@RequiredArgsConstructor
@Getter
public class MatterManufactoring implements BlueCard {
    private final int id;
    private final CardMetadata cardMetadata;

    public MatterManufactoring(int id) {
        this.id = id;
        this.cardMetadata = CardMetadata.builder()
                .name(""Matter Manufactoring"")
                .description(""Action: Spend 1 MC to draw a card."")
<fim_middle>","
 * Created by oleksii.nikitin
 * Creation date 07.05.2022
 */","
 * Represents the card {@code Matter Manufactoring}. Used during game setup to
 * determine the cards in the"
"<fim_prefix>package dev.manolovn.generateparenthesis;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class GenerateParenthesis {

    /**
     * Time:  O(n2^n)
     * Space: O(n2^n)
     */
    public static List<String> generateValidParentheses(int num) {
        List<String> result = new ArrayList<>();
        rec(num, 0, 0, """", result);
        return result;
    }

    private static void rec(int N, int open, int close, String curr, List<String> result) {
        if (open <fim_middle>","
 * For a given number ‘N’, write a function to generate all combination of ‘N’ pairs of balanced parentheses
 * Example:
 * Input: N=2
 * Output: (()), ()()
 *
 * difficulty: HARD
 * topics: RECURSION + BFS + PERMUTATIONS
 */","
 * Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
 * <p>
 * For example, given n = 3, a solution set is:
 * <p>
 * [
 * ""((()))"",
 * ""(()())"",
 * ""(())()"","
"<fim_prefix>package dev.manolovn.generateparenthesis;

import java.util.ArrayList;
import java.util.List;

/**
 * For a given number ‘N’, write a function to generate all combination of ‘N’ pairs of balanced parentheses
 * Example:
 * Input: N=2
 * Output: (()), ()()
 *
 * difficulty: HARD
 * topics: RECURSION + BFS + PERMUTATIONS
 */
public class GenerateParenthesis {

    /**<fim_suffix>
    public static List<String> generateValidParentheses(int num) {
        List<String> result = new ArrayList<>();
        rec(num, 0, 0, """", result);
        return result;
    }

    private static void rec(int N, int open, int close, String curr, List<String> result) {
        if (open == N && close == N) {
            result.add(curr);
            return;
        }
        // TOD<fim_middle>","
     * Time:  O(n2^n)
     * Space: O(n2^n)
     */","
     * Time complexity: O(2^N)
     * Space complexity: O(N)
     */"
"<fim_prefix>/*<fim_suffix>
package de.opendiabetes.vault.processing.filter;

/**
 *
 * @author mswin
 */
public enum FilterType {
    // basic time
    TIME_SPAN,
    TIME_POINT,
    DATE_TIME_POINT,
    DATE_TIME_SPAN,
    CLUSTER,
    // available data
    TYPE,
    GROUP,
    // data absence
    TYPE_ABSENCE,
    // threshould
    THRESHOLD,
    // filter nothing
    NONE,
    MARKER,
    // filter using oth<fim_middle>","
 * Copyright (C) 2017 mswin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author mswin
 */"
"<fim_prefix>seful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.opendiabetes.vault.processing.filter;

/**<fim_suffix>
public enum FilterType {
    // basic time
    TIME_SPAN,
    TIME_POINT,
    DATE_TIME_POINT,
    DATE_TIME_SPAN,
    CLUSTER,
    // available data
    TYPE,
    GROUP,
    // data absence
    TYPE_ABSENCE,
    // threshould
    THRESHOLD,
    // filter nothing
    NONE,
    MARKER,
    // filter using other filters
    AND,
    OR,
    COMBINATION_FILTER,
    COUNTER,
    LOGIC,
  <fim_middle>","
 *
 * @author mswin
 */","
 *
 * @author <NAME>
"
"<fim_prefix>er.services.AudioAnalyser;
import org.harmony_analyser.jharmonyanalyser.services.AudioAnalysisHelper;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

/**<fim_suffix>

/*
 * KeyVectorsFilter
 *
 * - requires: Key detector output
 * - creates a time series of 12-dimensional boolean vectors
 */

@SuppressWarnings(""SameParameterValue"")
public class KeyVectorsFilter extends LineChartPlugin {
	public KeyVectorsFilter() {
		key = ""filters:key_vectors"";
		name = ""Key Vectors"";
		description = ""Converts Key detector output to a time series of 12-dimensiona<fim_middle>","
 * Filter to convert key output: Creates a time series of 12-dimensional boolean vectors (representing keys in time) from the Key Detector output
 */","
 * KeyVectorsFilter
 *
 * - requires: Key detector output
 * - creates a time series of 12-dimensional boolean vectors
 */"
"<fim_prefix>
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Filter to convert key output: Creates a time series of 12-dimensional boolean vectors (representing keys in time) from the Key Detector output
 */

/*<fim_suffix>

@SuppressWarnings(""SameParameterValue"")
public class KeyVectorsFilter extends LineChartPlugin {
	public KeyVectorsFilter() {
		key = ""filters:key_vectors"";
		name = ""Key Vectors"";
		description = ""Converts Key detector output to a time series of 12-dimensional boolean vectors of keys"";

		inputFileSuffixes = new ArrayList<>();
		inputFileSuffixes.add(""-key"");
		inputFileSuffixes.add(<fim_middle>","
 * KeyVectorsFilter
 *
 * - requires: Key detector output
 * - creates a time series of 12-dimensional boolean vectors
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
/*
 * $Id$ 
 */
package de.jiac.micro.internal.core;

import de.jiac.micro.core.IHandle;
import de.jiac.micro.core.ILifecycleAware;
import de.jiac.micro.core.scope.AgentScope;

/**
 * @author Marcel Patzlaff
 * @version $Revision$
 */
public abstract class AbstractNodeComponent implements ILifecycleAware {
    public void cleanup() {}
    public void initialise() {}
    public void st<fim_middle>","
 * MicroJIAC - A Lightweight Agent Framework
 * This file is part of MicroJIAC Base-Implementation.
 *
 * Copyright (c) 2007-2012 DAI-Labor, Technische Universität Berlin
 *
 * This library includes software developed at DAI-Labor, Technische
 * Universität Berlin (http://www.dai-labor.de)
 *
 * This library is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Copyright (c) 2014 Jianchao Mao
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * $Id$ 
 */
package de.jiac.micro.internal.core;

import de.jiac.micro.core.IHandle;
import de.jiac.micro.core.ILifecycleAware;
import de.jiac.micro.core.scope.AgentScope;

/**<fim_suffix>
public abstract class AbstractNodeComponent implements ILifecycleAware {
    public void cleanup() {}
    public void initialise() {}
    public void start() {}
    public void stop() {}
    
    protected IHandle getNodeHandle() {
        return null;
    }
    
    protected void addHandlesOn(AgentScope agent) {}
    protected void removeHandlesFrom(AgentScope agent) {}
}
<fim_middle>","
 * @author Marcel Patzlaff
 * @version $Revision$
 */","
 * Abstract base class for all node components.
 * 
 * @author <NAME>"
"<fim_prefix>he resource name to prep.
   * @return the prepped node name.
   * @throws StringprepException If the resource name cannot be prepped
   * with this profile.
   * @throws NullPointerException If the resource name is null.
   */
  public static String resourceprep(String input)
    throws StringprepException,
	   NullPointerException
  {
    return resourceprep(input, false);
  }

  /**<fim_suffix>
  public static String resourceprep(String input, boolean allowUnassigned)
    throws StringprepException,
	   NullPointerException
  {
    if (input == null) {
      throw new NullPointerException();
    }

    StringBuffer s = new StringBuffer(input);
    
    if (!allowUnassigned && contains(s, RFC3454.A1)) {
      throw new StringprepException(StringprepException.CONTAINS_UNASSIGN<fim_middle>","
   * Preps a resource name according to the Stringprep profile defined
   * in RFC3920.
   *
   * @param input the resource name to prep.
   * @param allowUnassigned true if the resource name may contain
   * unassigned code points.
   * @return the prepped node name.
   * @throws StringprepException If the resource name cannot be prepped
   * with this profile.
   * @throws NullPointerException If the resource name is null.
   */","
   * Prepares a node name according to the rules of the given profile.
   *
   * @param input the node name to prep.
   * @param allowUnassigned if true, allows unassigned code points.
   * @return the prepped node name.
   * @throws StringprepException If the node name cannot be prepped
   * with this profile.
   * @throws NullPointerException If the node name is null.
   */"
"<fim_prefix>
   * @param input the node name to prep.
   * @return the prepped node name.
   * @throws StringprepException If the node name cannot be prepped
   * with this profile.
   * @throws NullPointerException If the node name is null.
   */
  public static String nodeprep(String input)
    throws StringprepException,
	   NullPointerException
  {
    return nodeprep(input, false);
  }

  /**<fim_suffix>
  public static String nodeprep(String input, boolean allowUnassigned)
    throws StringprepException,
	   NullPointerException
  {
    if (input == null) {
      throw new NullPointerException();
    }

    StringBuffer s = new StringBuffer(input);

    if (!allowUnassigned && contains(s, RFC3454.A1)) {
      throw new StringprepException(StringprepException.CONTAINS_UNASSIGNED);
   <fim_middle>","
   * Preps a node name according to the Stringprep profile defined in
   * RFC3920.
   *
   * @param input the node name to prep.
   * @param allowUnassigned true if the node name may contain
   * unassigned code points.
   * @return the prepped node name.
   * @throws StringprepException If the node name cannot be prepped
   * with this profile.
   * @throws NullPointerException If the node name is null.
   */","
   * Prepares a node name according to the rules of this profile.
   *
   * @param input the node name to prep.
   * @param allowUnassigned if true, allows unassigned code points.
   * @return the prepped node name.
   * @throws StringprepException If the node name cannot be prepped
   * with this profile.
   * @throws NullPointerException If the node name is null.
   */"
"<fim_prefix>NTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301
 * USA
 */

package com.calclab.emite.base.stringprep;

/**<fim_suffix>
public class Stringprep
{
  /**
   * Preps a name according to the Stringprep profile defined in
   * RFC3491. Unassigned code points are not allowed.
   *
   * @param input the name to prep.
   * @return the prepped name.
   * @throws StringprepException If the name cannot be prepped with
   * this profile.
   * @throws NullPointerException If the name is null.
   */
  public static <fim_middle>","
 * This class offers static methods for preparing internationalized
 * strings. It supports the following stringprep profiles:
 * <ul>
 * <li>RFC3491 nameprep
 * <li>RFC3920 XMPP nodeprep and resourceprep
 * </ul>
 * Note that this implementation only supports 16-bit Unicode code
 * points.
 */","
 * Stringprep profile.
 *
 * @author <NAME>
 * @version $Revision: 1.1 $ $Date: 2004/01/22 13:26:28 $
 */"
"<fim_prefix>
 * USA
 */

package com.calclab.emite.base.stringprep;

/**
 * This class offers static methods for preparing internationalized
 * strings. It supports the following stringprep profiles:
 * <ul>
 * <li>RFC3491 nameprep
 * <li>RFC3920 XMPP nodeprep and resourceprep
 * </ul>
 * Note that this implementation only supports 16-bit Unicode code
 * points.
 */
public class Stringprep
{
  /**<fim_suffix>
  public static String nameprep(String input)
    throws StringprepException,
	   NullPointerException
  {
    return nameprep(input, false);
  }

  /**
   * Preps a name according to the Stringprep profile defined in
   * RFC3491.
   *
   * @param input the name to prep.
   * @param allowUnassigned true if the name may contain unassigned
   * code points.
   * @return the prepped nam<fim_middle>","
   * Preps a name according to the Stringprep profile defined in
   * RFC3491. Unassigned code points are not allowed.
   *
   * @param input the name to prep.
   * @return the prepped name.
   * @throws StringprepException If the name cannot be prepped with
   * this profile.
   * @throws NullPointerException If the name is null.
   */","
   * Preps a name according to the Stringprep profile defined in
   * RFC3491.
   *
   * @param input the name to prep.
   * @param allowUnassigned true if the name may contain unassigned
   * code points.
   * @return the prepped nam.
   * @throws StringprepException if the name cannot be prepped.
   */"
"<fim_prefix>new StringprepException(StringprepException.BIDI_LTRAL);
      }
    }

    return s.toString();
  }

  /**
   * Characters prohibited by RFC3920 nodeprep that aren't defined as
   * part of the RFC3454 tables.
   */
  private static final char [] RFC3920_NODEPREP_PROHIBIT = new char [] {
    '\u0022', '\u0026', '\'',     '\u002F',
    '\u003A', '\u003C', '\u003E', '\u0040'
  };

  /**<fim_suffix>
  public static String nodeprep(String input)
    throws StringprepException,
	   NullPointerException
  {
    return nodeprep(input, false);
  }

  /**
   * Preps a node name according to the Stringprep profile defined in
   * RFC3920.
   *
   * @param input the node name to prep.
   * @param allowUnassigned true if the node name may contain
   * unassigned code points.
   * @return <fim_middle>","
   * Preps a node name according to the Stringprep profile defined in
   * RFC3920. Unassigned code points are not allowed.
   *
   * @param input the node name to prep.
   * @return the prepped node name.
   * @throws StringprepException If the node name cannot be prepped
   * with this profile.
   * @throws NullPointerException If the node name is null.
   */","
   * Characters prohibited by RFC3920 nodeprep that aren't defined as
   * part of the RFC3454 tables.
   */"
"<fim_prefix>/**<fim_suffix>

package com.calclab.emite.base.stringprep;

/**
 * This class offers static methods for preparing internationalized
 * strings. It supports the following stringprep profiles:
 * <ul>
 * <li>RFC3491 nameprep
 * <li>RFC3920 XMPP nodeprep and resourceprep
 * </ul>
 * Note that this implementation only supports 16-bit Unicode code
 * points.
 */
public class Stringprep
{
  /**
   * Preps<fim_middle>","
 * Copyright (C) 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free
 * Software Foundation, Inc.
 *
 * Author: Oliver Hitz
 *
 * This file is part of GNU Libidn.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301
 * USA
 */","
 * This class offers static methods for preparing internationalized
 * strings. It supports the following stringprep profiles:
 * <ul>
 * <li>RFC3491 nameprep
 * <li>RFC3920 XMPP nodeprep and resourceprep
 * </ul>
 * Note that this implementation only supports 16-bit Unicode code
 * points.
 */"
"<fim_prefix>ction 6, requirement 2
    if (r && l) {
      throw new StringprepException(StringprepException.BIDI_BOTHRAL);
    }

    // RFC 3454, section 6, requirement 3
    if (r) {
      if (!contains(s.charAt(0), RFC3454.D1) ||
	  !contains(s.charAt(s.length()-1), RFC3454.D1)) {
	throw new StringprepException(StringprepException.BIDI_LTRAL);
      }
    }

    return s.toString();
  }

  /**<fim_suffix>
  private static final char [] RFC3920_NODEPREP_PROHIBIT = new char [] {
    '\u0022', '\u0026', '\'',     '\u002F',
    '\u003A', '\u003C', '\u003E', '\u0040'
  };

  /**
   * Preps a node name according to the Stringprep profile defined in
   * RFC3920. Unassigned code points are not allowed.
   *
   * @param input the node name to prep.
   * @return the prepped node name.
   * @thr<fim_middle>","
   * Characters prohibited by RFC3920 nodeprep that aren't defined as
   * part of the RFC3454 tables.
   */","
   * Preps a node name according to the Stringprep profile defined in
   * RFC3920. Unassigned code points are not allowed"
"<fim_prefix>re not allowed.
   *
   * @param input the name to prep.
   * @return the prepped name.
   * @throws StringprepException If the name cannot be prepped with
   * this profile.
   * @throws NullPointerException If the name is null.
   */
  public static String nameprep(String input)
    throws StringprepException,
	   NullPointerException
  {
    return nameprep(input, false);
  }

  /**<fim_suffix>
  public static String nameprep(String input, boolean allowUnassigned)
    throws StringprepException,
	   NullPointerException
  {
    if (input == null) {
      throw new NullPointerException();
    }

    StringBuffer s = new StringBuffer(input);

    if (!allowUnassigned && contains(s, RFC3454.A1)) {
      throw new StringprepException(StringprepException.CONTAINS_UNASSIGNED);
   <fim_middle>","
   * Preps a name according to the Stringprep profile defined in
   * RFC3491.
   *
   * @param input the name to prep.
   * @param allowUnassigned true if the name may contain unassigned
   * code points.
   * @return the prepped name.
   * @throws StringprepException If the name cannot be prepped with
   * this profile.
   * @throws NullPointerException If the name is null.
   */","
   * Prepares a name according to the rules of this profile.
   *
   * @param input the name to prep.
   * @param allowUnassigned if true, unassigned code points are allowed.
   * @return the prepped name.
   * @throws StringprepException If the name cannot be prepped with
   * this profile.
   * @throws NullPointerException If the name is null.
   */"
"<fim_prefix>equirement 2
    if (r && l) {
      throw new	StringprepException(StringprepException.BIDI_BOTHRAL);
    }
    
    // RFC 3454, section 6, requirement 3
    if (r) {
      if (!contains(s.charAt(0), RFC3454.D1) ||
	  !contains(s.charAt(s.length() - 1), RFC3454.D1)) {
	throw new StringprepException(StringprepException.BIDI_LTRAL);
      }
    }
    
    return s.toString();
  }

  /**<fim_suffix>
  public static String resourceprep(String input)
    throws StringprepException,
	   NullPointerException
  {
    return resourceprep(input, false);
  }

  /**
   * Preps a resource name according to the Stringprep profile defined
   * in RFC3920.
   *
   * @param input the resource name to prep.
   * @param allowUnassigned true if the resource name may contain
   * unassigned code p<fim_middle>","
   * Preps a resource name according to the Stringprep profile defined
   * in RFC3920. Unassigned code points are not allowed.
   *
   * @param input the resource name to prep.
   * @return the prepped node name.
   * @throws StringprepException If the resource name cannot be prepped
   * with this profile.
   * @throws NullPointerException If the resource name is null.
   */","
   * Preps a resource name according to the Stringprep profile defined
   * in RFC3920.
   *
   * @param input the resource name to prep.
   * @param allowUnassigned true if the resource name may contain
   * unassigned code pictographs.
   *  Fix typo in javadoc.  /*
 * Copyright (C) 2007, 2008, 2009, 2010, 2011, 2012 Apple Inc. All rights reserved"
"<fim_prefix>imension;
import net.minecraft.block.AbstractFireBlock;
import net.minecraft.world.World;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;

@Mixin(AbstractFireBlock.class)
public class AbstractFireBlockMixin {

	/**<fim_suffix>
	@Inject(method = ""isOverworldOrNether(Lnet/minecraft/world/World;)Z"",
			at = @At(value = ""RETURN""),
			cancellable = true)
	private static void uad_allowNetherPortal(World world, CallbackInfoReturnable<Boolean> cir) {
		if(!cir.getReturnValue() && world.getRegistryKey().equals(UADDimension.UAD_WORLD_KEY) && UltraAmplifiedDimension.UAD_CONFIG.allowNetherPortal) {
			cir.setReturnValu<fim_middle>","
	 * Make it so that Nether Portals can be created and activated in Ultra Amplified Dimension
	 * @author TelepathicGrunt
	 */","
	 * Allows the nether portal to be used in UltraAmplifiedDimensions.
	 *
	 * @param world The world.
	 * @"
"<fim_prefix>/**<fim_suffix>
package org.cardboardpowered.interfaces;

public interface INetworkIo {

    void acceptConnections();

}<fim_middle>","
 * Cardboard
 */","
 * Created by TheGrey"
"<fim_prefix>/*<fim_suffix>
package org.sonatype.nexus.internal.atlas.customizers;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;

import org.sonatype.goodies.common.ComponentSupport;
import org.sonatype.nexus.common.log.LogManager;
import org.sonatype.nexus.supportzip.GeneratedContentSourceSuppo<fim_middle>","
 * Sonatype Nexus (TM) Open Source Version
 * Copyright (c) 2008-present Sonatype, Inc.
 * All rights reserved. Includes the third-party code listed at http://links.sonatype.com/products/nexus/oss/attributions.
 *
 * This program and the accompanying materials are made available under the terms of the Eclipse Public License Version 1.0,
 * which accompanies this distribution and is available at http://www.eclipse.org/legal/epl-v10.html.
 *
 * Sonatype Nexus (TM) Professional Version is available from Sonatype, Inc. ""Sonatype"" and ""Sonatype Nexus"" are trademarks
 * of Sonatype, Inc. Apache Maven is a trademark of the Apache Software Foundation. M2eclipse is a trademark of the
 * Eclipse Foundation. All other trademarks are the property of their respective owners.
 */","*
 * @since 3.0
 */"
"<fim_prefix>.sonatype.nexus.supportzip.SupportBundle;
import org.sonatype.nexus.supportzip.SupportBundleCustomizer;

import org.apache.commons.io.FileUtils;

import static com.google.common.base.Preconditions.checkNotNull;
import static org.sonatype.nexus.supportzip.SupportBundle.ContentSource.Priority.LOW;
import static org.sonatype.nexus.supportzip.SupportBundle.ContentSource.Type.AUDITLOG;

/**<fim_suffix>
@Named
@Singleton
public class AuditLogCustomizer
    extends ComponentSupport
    implements SupportBundleCustomizer
{
  private final LogManager logManager;

  @Inject
  public AuditLogCustomizer(final LogManager logManager) {
    this.logManager = checkNotNull(logManager);
  }

  @Override
  public void customize(final SupportBundle supportBundle) {
    // add source for nexus.log
<fim_middle>","
 * Adds audit log files to support bundle.
 *
 * @since 3.16
 */","
 * @since 3.0
 */"
"<fim_prefix>me.player.JoinOffer;
import xyz.nucleoid.plasmid.api.game.player.JoinOfferResult;
import xyz.nucleoid.plasmid.api.game.GameActivity;
import xyz.nucleoid.plasmid.api.game.GameTexts;
import xyz.nucleoid.stimuli.event.StimulusEvent;

/**
 * Events relating to players being added and removed from a {@link GameSpace} or {@link GameActivity}.
 */
public final class GamePlayerEvents {
    /**<fim_suffix>
    public static final StimulusEvent<Add> ADD = StimulusEvent.create(Add.class, ctx -> player -> {
        try {
            for (var listener : ctx.getListeners()) {
                listener.onAddPlayer(player);
            }
        } catch (Throwable throwable) {
            ctx.handleException(throwable);
        }
    });

    /**
     * Called when a {@link ServerPlayerEntity} <fim_middle>","
     * Called when a {@link ServerPlayerEntity} is added to a {@link GameActivity}. This involves all cases where a
     * {@link ServerPlayerEntity} should be tracked by a {@link GameActivity}, and is NOT limited to a player
     * specifically joining.
     * <p>
     * This will be fired when:
     * <li>A {@link ServerPlayerEntity} intentionally joins this {@link GameSpace}</li>
     * <li>A new {@link GameActivity} is created, and all players are transferred</li>
     * <p>
     * This event will always be fired after {@link GameActivityEvents#CREATE} and before {@link GameActivityEvents#ENABLE}.
     * <p>
     * This event is invoked after the player has been added to the {@link GameSpace#getPlayers() game player set}.
     *
     * @see GamePlayerEvents#JOIN
     */","
     * Called when a {@link ServerPlayerEntity} is added to a {@link GameSpace}.
     */"
"<fim_prefix>* @see GamePlayerEvents#REMOVE
     */
    public static final StimulusEvent<Remove> LEAVE = StimulusEvent.create(Remove.class, ctx -> player -> {
        try {
            for (var listener : ctx.getListeners()) {
                listener.onRemovePlayer(player);
            }
        } catch (Throwable throwable) {
            ctx.handleException(throwable);
        }
    });

    /**<fim_suffix>
    public static final StimulusEvent<Offer> OFFER = StimulusEvent.create(Offer.class, ctx -> offer -> {
        try {
            for (var listener : ctx.getListeners()) {
                var result = listener.onOfferPlayers(offer);
                if (!(result instanceof JoinOfferResult.Pass)) {
                    return result;
                }
            }
            return of<fim_middle>","
     * Called when a group of {@link ServerPlayerEntity} tries to join this game.
     * <p>
     * Games should respond to this event in order for players to prevent players from joining or skip any further listeners.
     * {@link JoinOffer#accept()} or {@link JoinOffer#reject(Text)}.
     *
     * @see JoinOffer
     * @see JoinOfferResult
     * @see GamePlayerEvents#ACCEPT
     */","
     * Called when a player is offered a game.
     *
     * @see GamePlayerEvents#OFFER
     */"
"<fim_prefix>ar result = listener.onOfferPlayers(offer);
                if (!(result instanceof JoinOfferResult.Pass)) {
                    return result;
                }
            }
            return offer.accept();
        } catch (Throwable throwable) {
            ctx.handleException(throwable);
            return offer.reject(GameTexts.Join.unexpectedError());
        }
    });

    /**<fim_suffix>
    public static final StimulusEvent<Accept> ACCEPT = StimulusEvent.create(Accept.class, ctx -> accept -> {
        try {
            for (var listener : ctx.getListeners()) {
                var result = listener.onAcceptPlayers(accept);
                if (!(result instanceof JoinAcceptorResult.Pass)) {
                    return result;
                }
            }
        } ca<fim_middle>","
     * Called when a group of {@link ServerPlayerEntity} is accepted to join this game. This event is responsible for bringing
     * the players into the {@link GameSpace} world in the correct location.
     * <p>
     * Games must respond to this event in order for players to be able to join.
     *
     * @see JoinAcceptor
     * @see JoinAcceptorResult
     * @see GamePlayerEvents#JOIN
     */","
     * The player has accepted the offer.
     */"
"<fim_prefix>        for (var listener : ctx.getListeners()) {
                var result = listener.onAcceptPlayers(accept);
                if (!(result instanceof JoinAcceptorResult.Pass)) {
                    return result;
                }
            }
        } catch (Throwable throwable) {
            ctx.handleException(throwable);
        }
        return accept.pass();
    });

    /**<fim_suffix>
    public static final StimulusEvent<Name> DISPLAY_NAME = StimulusEvent.create(Name.class, ctx -> (player, current, vanillaText) -> {
        try {
            for (var listener : ctx.getListeners()) {
                current = listener.onDisplayNameCreation(player, current, vanillaText);
            }
            return current;
        } catch (Throwable throwable) {
            ct<fim_middle>","
     * Called when display name of {@link ServerPlayerEntity} is created.
     * Can be used to manipulate it in game.
     */","
     * Called when a player joins the server.
     *
     * @param player            "
"<fim_prefix>port xyz.nucleoid.plasmid.api.game.player.JoinAcceptor;
import xyz.nucleoid.plasmid.api.game.player.JoinAcceptorResult;
import xyz.nucleoid.plasmid.api.game.player.JoinOffer;
import xyz.nucleoid.plasmid.api.game.player.JoinOfferResult;
import xyz.nucleoid.plasmid.api.game.GameActivity;
import xyz.nucleoid.plasmid.api.game.GameTexts;
import xyz.nucleoid.stimuli.event.StimulusEvent;

/**<fim_suffix>
public final class GamePlayerEvents {
    /**
     * Called when a {@link ServerPlayerEntity} is added to a {@link GameActivity}. This involves all cases where a
     * {@link ServerPlayerEntity} should be tracked by a {@link GameActivity}, and is NOT limited to a player
     * specifically joining.
     * <p>
     * This will be fired when:
     * <li>A {@link ServerPlayerEntity} int<fim_middle>","
 * Events relating to players being added and removed from a {@link GameSpace} or {@link GameActivity}.
 */","
 * Events related to {@link ServerPlayerEntity}s in a {@link GameActivity}.
 */"
"<fim_prefix>
     *
     * @see GamePlayerEvents#JOIN
     */
    public static final StimulusEvent<Add> ADD = StimulusEvent.create(Add.class, ctx -> player -> {
        try {
            for (var listener : ctx.getListeners()) {
                listener.onAddPlayer(player);
            }
        } catch (Throwable throwable) {
            ctx.handleException(throwable);
        }
    });

    /**<fim_suffix>
    public static final StimulusEvent<Remove> REMOVE = StimulusEvent.create(Remove.class, ctx -> player -> {
        try {
            for (var listener : ctx.getListeners()) {
                listener.onRemovePlayer(player);
            }
        } catch (Throwable throwable) {
            ctx.handleException(throwable);
        }
    });

    /**
     * Called when a {@link ServerPl<fim_middle>","
     * Called when a {@link ServerPlayerEntity} is removed from a {@link GameActivity}. This involves all cases where a
     * {@link ServerPlayerEntity} should be no longer be tracked by a {@link GameActivity}, and is NOT limited to a
     * player specifically leaving the game.
     * <p>
     * This will be fired when:
     * <li>A {@link ServerPlayerEntity} intentionally leaves this {@link GameSpace}</li>
     * <li>A {@link GameSpace} is closed or {@link GameActivity} replaced</li>
     * <p>
     * This event will always be fired before {@link GameActivityEvents#DESTROY} and after {@link GameActivityEvents#DISABLE}.
     * <p>
     * This event is invoked before the player is removed from the {@link GameSpace#getPlayers() game player set}.
     *
     * @see GamePlayerEvents#LEAVE
     */","
     * Called when a {@link ServerPl3xMap} is loaded.  Add missing javadoc  package net.pl3x.map.plugin.event;

import net.pl3x.map.plugin.Pl3xMapPlugin;
import net.pl3x.map.plugin.data.PlayerData;
import net.pl3x.map.plugin.data.PlayerDataImpl;
import net.pl3x.map.plugin.data.PlayerDataManager;
import net.pl3x.map.plugin.data.PlayerDataManagerImpl;
import net.pl3x.map.plugin.data.PlayerDataStorage;
import net.pl3x.map.plugin.data.PlayerDataStorageImpl;
import net.pl3x.map.plugin.data.PlayerDataStorageType;
import net.pl3x.map.plugin.data.PlayerDataStorageTypeImpl;
import net.pl3x.map.plugin.data.PlayerDataStorageTypeRegistry;
import net.pl3x.map.plugin.data.PlayerDataStorageTypeRegistryImpl;
import net."
"<fim_prefix>s#ADD
     * @see GamePlayerEvents#OFFER
     */
    public static final StimulusEvent<Add> JOIN = StimulusEvent.create(Add.class, ctx -> player -> {
        try {
            for (var listener : ctx.getListeners()) {
                listener.onAddPlayer(player);
            }
        } catch (Throwable throwable) {
            ctx.handleException(throwable);
        }
    });

    /**<fim_suffix>
    public static final StimulusEvent<Remove> LEAVE = StimulusEvent.create(Remove.class, ctx -> player -> {
        try {
            for (var listener : ctx.getListeners()) {
                listener.onRemovePlayer(player);
            }
        } catch (Throwable throwable) {
            ctx.handleException(throwable);
        }
    });

    /**
     * Called when a group of {@link <fim_middle>","
     * Called when a {@link ServerPlayerEntity} intentionally leaves a {@link GameSpace} or leaves the server entirely.
     *
     * @see GamePlayerEvents#REMOVE
     */","
     * Called when a group of {@link Player}s leaves the game.  Fix javadoc  package com.voxelgameslib.voxelgameslib.api.event.events.game;

import com.voxelgameslib."
"<fim_prefix>* @see GamePlayerEvents#LEAVE
     */
    public static final StimulusEvent<Remove> REMOVE = StimulusEvent.create(Remove.class, ctx -> player -> {
        try {
            for (var listener : ctx.getListeners()) {
                listener.onRemovePlayer(player);
            }
        } catch (Throwable throwable) {
            ctx.handleException(throwable);
        }
    });

    /**<fim_suffix>
    public static final StimulusEvent<Add> JOIN = StimulusEvent.create(Add.class, ctx -> player -> {
        try {
            for (var listener : ctx.getListeners()) {
                listener.onAddPlayer(player);
            }
        } catch (Throwable throwable) {
            ctx.handleException(throwable);
        }
    });

    /**
     * Called when a {@link ServerPlayerEntity}<fim_middle>","
     * Called when a {@link ServerPlayerEntity} intentionally joins a {@link GameSpace}.
     *
     * @see GamePlayerEvents#ADD
     * @see GamePlayerEvents#OFFER
     */","
     * Called when a {@link ServerPlayerEntity} joins the server.  Fix javadoc  package org.loomdev.api.event.game;

import org.jetbrains.annotations.NotNull;
import org.loomdev.api.entity.player.Server"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.sirius.tests.data;

import org.eclipse.sirius.viewpoint.description.Group;

public class GroupRefreshTreeOdesign {

    private Group val;

    public GroupRefreshTreeOdesign(Group val) {
        this.val = val;
    }

    public SiriusDesign design() {
        return new SiriusDesign(val.getOwnedViewpoints().get(0));
    }

    public Group object() {
        retu<fim_middle>","*****************************************************************************
 * Copyright (c) 2011 THALES GLOBAL SERVICES.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Obeo - initial API and implementation
 *******************************************************************************/","
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */"
"<fim_prefix>/**
 *
 */
package cz.geokuk.util.gui;

import java.awt.Component;
import java.awt.Container;

import javax.swing.JComponent;

/**<fim_suffix>
public final class FComponent {
	public static void enableMouseSroll(final JComponent component) {
		component.addMouseMotionListener(new ScrollRectToVisibleListener());
		component.setAutoscrolls(true);
	}

	public static void setEnabled(final Component component, final boolean enabled) {
		component.setEnabled(enabled);
		if (component instanceof Container) {
			final Container cont<fim_middle>","
 * @author Martin Veverka
 *
 */","
 *
 * @author <NAME>
 *
"
"<fim_prefix>c.fabric.api.event.Event;
import net.fabricmc.fabric.api.event.EventFactory;
import net.minecraft.client.gui.DrawContext;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.player.PlayerEntity;
import org.joml.Vector2i;

/**
 * Event for rendering temperature overlays on status bar.
 */
@Environment(EnvType.CLIENT)
public class StatusBarOverlayRenderEvents {

    /**<fim_suffix>
    public static final Event<RenderHealthBarCallback> AFTER_HEALTH_BAR = EventFactory.createArrayBacked(
            RenderHealthBarCallback.class,
            callbacks -> (context, player, heartPositions, displayHealth, maxDisplayHeath) -> {
                for (RenderHealthBarCallback callback : callbacks) {
                    callback.render(context, player, heartPositions, disp<fim_middle>","
     * Invoked after the player health bar is drawn. Does not include information on the Absorption bar.
     * <p>
     * Integrates with Colorful Hearts and Overflowing Bars for now - but this integration will be removed in the
     * future.
     * <p>
     * Custom heart types, like Frozen Hearts, should be handled separately.
     */","
     * Called before rendering the health bar.
     */"
"<fim_prefix>yHealth The maximum number of half hearts to be displayed
         */
        void render(
                DrawContext context,
                PlayerEntity player,
                Vector2i[] heartPositions,
                int displayHealth,
                int maxDisplayHealth
        );

    }

    @FunctionalInterface
    public interface RenderMountHealthBarCallback {

        /**<fim_suffix>
        void render(
                DrawContext context,
                PlayerEntity player,
                LivingEntity mount,
                Vector2i[] mountHeartPositions,
                int displayMountHealth,
                int maxDisplayMountHealth
        );

    }

}
<fim_middle>","
         * @param context               Draw context
         * @param player                The main player
         * @param mount                 The animal the player is riding (ex: pig, horse, camel)
         * @param mountHeartPositions   The positions of the hearts. Elements may be null, indicating that a heart
         *                              should not be rendered at this index.
         * @param displayMountHealth    How many half hearts are to be displayed
         * @param maxDisplayMountHealth The maximum number of half hearts to be displayed
         */","
         * Renders the mount's health bar.
         *
         * @param context The draw context
         * @param player The player
         * @param mount The mount
         * @param mountHeartPositions The positions of the heart icons
         * @param displayMountHealth The number of hearts to display
         * @param maxDisplayMountHealth The maximum number of hearts to be displayed
         */"
"<fim_prefix>s) {
                    callback.render(
                            context,
                            player, mount,
                            mountHeartPositions,
                            displayMountHealth, maxDisplayMountHealth
                    );
                }
            }
    );

    @FunctionalInterface
    public interface RenderHealthBarCallback {

        /**<fim_suffix>
        void render(
                DrawContext context,
                PlayerEntity player,
                Vector2i[] heartPositions,
                int displayHealth,
                int maxDisplayHealth
        );

    }

    @FunctionalInterface
    public interface RenderMountHealthBarCallback {

        /**
         * @param context               Draw context
         * @par<fim_middle>","
         * Note that {@code displayHealth} and {@code maxDisplayHealth} are not always the same as health and max health. Mods that
         * override the health bar rendering like Colorful Hearts may change these values.
         *
         * @param context          DrawContext for the HUD
         * @param player           The player rendering hearts for
         * @param heartPositions   An array of heart positions on the HUD. Elements may be null, indicating that a heart
         *                         should not be rendered at this index.
         * @param displayHealth    How many half hearts are to be displayed
         * @param maxDisplayHealth The maximum number of half hearts to be displayed
         */","
         * @param context               Draw context
         * @param player                Player entity
         * @param heartPositions        Heart positions
         * @param displayHealth         Display health
         * @param maxDisplayHealth      Max display health
         */"
"<fim_prefix>package com.github.thedeathlycow.thermoo.api.client;

import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import net.fabricmc.fabric.api.event.Event;
import net.fabricmc.fabric.api.event.EventFactory;
import net.minecraft.client.gui.DrawContext;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.player.PlayerEntity;
import org.joml.Vector2i;

/**<fim_suffix>
@Environment(EnvType.CLIENT)
public class StatusBarOverlayRenderEvents {

    /**
     * Invoked after the player health bar is drawn. Does not include information on the Absorption bar.
     * <p>
     * Integrates with Colorful Hearts and Overflowing Bars for now - but this integration will be removed in the
     * future.
     * <p>
     * Custom heart types, like Frozen Hearts, sh<fim_middle>","
 * Event for rendering temperature overlays on status bar.
 */","
 * Events for rendering the player's status bar.
 */"
"<fim_prefix>ventFactory.createArrayBacked(
            RenderHealthBarCallback.class,
            callbacks -> (context, player, heartPositions, displayHealth, maxDisplayHeath) -> {
                for (RenderHealthBarCallback callback : callbacks) {
                    callback.render(context, player, heartPositions, displayHealth, maxDisplayHeath);
                }
            }
    );

    /**<fim_suffix>
    public static final Event<RenderMountHealthBarCallback> AFTER_MOUNT_HEALTH_BAR = EventFactory.createArrayBacked(
            RenderMountHealthBarCallback.class,
            callbacks -> (context, player, mount, mountHeartPositions, displayMountHealth, maxDisplayMountHealth) -> {
                for (RenderMountHealthBarCallback callback : callbacks) {
                    callback.<fim_middle>","
     * Invoked after the players mount health is drawn.
     * <p>
     * Is not integrated with Colorful Hearts or Overflowing Bars by default, however these mods do not override the mount
     * health.
     * <p>
     * Note that indexes are backwards from the regular health: index 0 is the heart on the far RIGHT of the screen.
     * Adjust half-hearts accordingly.
     */","
     * Called after the player's health bar is rendered.
     */"
"<fim_prefix>package org.bgerp.custom.java;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class CompilationResult {
    private boolean result;
    private List<CompilationMessage> errors = new ArrayList<>();
    private List<CompilationMessage> warnings = new ArrayList<>();
    private List<String> log = new ArrayList<>();

    public boolean isResult() {
        return result;
    }

    public void setResult(boolean result) {
        this.result = result;
    }

<fim_middle>","
 * Results of java compilation.
 * 
 * @author Kirill Berezin
 * @author Shamil Vakhitov
 */","
 * Created by bgerp on 2017/3/15.
 */"
"<fim_prefix>/*<fim_suffix>
package org.l2j.gameserver.network.serverpackets;

import org.l2j.gameserver.enums.InventorySlot;
import org.l2j.gameserver.network.GameClient;
import org.l2j.gameserver.network.ServerPacketId;

import java.util.EnumMap;

/**
 * @author Gnacik
 * @author JoeAlisson
 */
public class ShopPreviewInfo extends ServerPacket {
    private final EnumMap<InventorySlot, Integer> items;

    pub<fim_middle>","
 * Copyright Â© 2019-2020 L2JOrg
 *
 * This file is part of the L2JOrg project.
 *
 * L2JOrg is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * L2JOrg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Format: (ch) dddd
 */"
"<fim_prefix> more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package org.l2j.gameserver.network.serverpackets;

import org.l2j.gameserver.enums.InventorySlot;
import org.l2j.gameserver.network.GameClient;
import org.l2j.gameserver.network.ServerPacketId;

import java.util.EnumMap;

/**<fim_suffix>
public class ShopPreviewInfo extends ServerPacket {
    private final EnumMap<InventorySlot, Integer> items;

    public ShopPreviewInfo(EnumMap<InventorySlot, Integer> items) {
        this.items = items;
    }

    @Override
    public void writeImpl(GameClient client) {
        writeId(ServerPacketId.BUY_PREVIEW_INFO);

        writeInt(InventorySlot.TOTAL_SLOTS);

        var pape<fim_middle>","
 * @author Gnacik
 * @author JoeAlisson
 */","
 * Format: (ch) d
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>

import org.junit.jupiter.api.Test;

public class TestMe9 {

   private static final long WAIT_FOR_INITIALIZATION = 1000;
   
   @Test
   protected void testMethod9() {
       System.out.println(""This is tested."");
   }

}
<fim_middle>","
 * This file is part of PerAn.
 *
 * PerAn is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * PerAn is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
 * the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with PerAn.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * 
 */"
"<fim_prefix>/*<fim_suffix>

package org.geomajas.security;

import org.geomajas.annotation.Api;

/**
 * Authentication cache service.
 * <p/>
 * Used to cache authentication results.
 *
 * @author Joachim Van der Auwera
 * @since 1.6.0
 */
@Api(allMethods = true)
public interface AuthenticationCache {

	/**
	 * Get the authentication information for an authentication token. Returns null when no valid cached inf<fim_middle>","
 * This is part of Geomajas, a GIS framework, http://www.geomajas.org/.
 *
 * Copyright 2008-2016 Geosparc nv, http://www.geosparc.com/, Belgium.
 *
 * The program is available in open source according to the GNU Affero
 * General Public License. All contributions in this program are covered
 * by the Geomajas Contributors License Agreement. For full licensing
 * details, see LICENSE.txt in the project root.
 */","*
 * Authentication cache service.
 * <p/>
 * Used to cache authentication results.
 *
 * @author Joachim Van der Auwera
 * @since 1.6.0
 */"
"<fim_prefix>sparc nv, http://www.geosparc.com/, Belgium.
 *
 * The program is available in open source according to the GNU Affero
 * General Public License. All contributions in this program are covered
 * by the Geomajas Contributors License Agreement. For full licensing
 * details, see LICENSE.txt in the project root.
 */

package org.geomajas.security;

import org.geomajas.annotation.Api;

/**<fim_suffix>
@Api(allMethods = true)
public interface AuthenticationCache {

	/**
	 * Get the authentication information for an authentication token. Returns null when no valid cached information
	 * is found.
	 * <p/>
	 * This should also handle the update of the validUntil field in the {@link org.geomajas.security.Authentication}
	 * objects.
	 * <p/>
	 * When one the the authentication objects <fim_middle>","
 * Authentication cache service.
 * <p/>
 * Used to cache authentication results.
 *
 * @author Joachim Van der Auwera
 * @since 1.6.0
 */","
 * Interface for caching authentication information.
 * 
 * @author <NAME>"
"<fim_prefix>ld in the {@link org.geomajas.security.Authentication}
	 * objects.
	 * <p/>
	 * When one the the authentication objects is no longer valid, none should be returned (and data purged from cache).
	 *
	 * @param token authentication token
	 * @return authentication details for this token or null when no valid cached data found
	 */
	Authentication[] getAuthentication(String token);

	/**<fim_suffix>
	void putAuthentication(String token, Authentication[] authentications);
}
<fim_middle>","
	 * Put authentication information in the cache for a authentication token.
	 *
	 * @param token authentication token
	 * @param authentications authentication details or null (which purges the data for the token from the cache)
	 */","
	 * Store authentication details for a token.
	 * <p/>
	 * The authentication details are stored in the cache for a short period of time.
	 *
	 * @param token authentication token
	 * @param authentications"
"<fim_prefix>as Contributors License Agreement. For full licensing
 * details, see LICENSE.txt in the project root.
 */

package org.geomajas.security;

import org.geomajas.annotation.Api;

/**
 * Authentication cache service.
 * <p/>
 * Used to cache authentication results.
 *
 * @author Joachim Van der Auwera
 * @since 1.6.0
 */
@Api(allMethods = true)
public interface AuthenticationCache {

	/**<fim_suffix>
	Authentication[] getAuthentication(String token);

	/**
	 * Put authentication information in the cache for a authentication token.
	 *
	 * @param token authentication token
	 * @param authentications authentication details or null (which purges the data for the token from the cache)
	 */
	void putAuthentication(String token, Authentication[] authentications);
}
<fim_middle>","
	 * Get the authentication information for an authentication token. Returns null when no valid cached information
	 * is found.
	 * <p/>
	 * This should also handle the update of the validUntil field in the {@link org.geomajas.security.Authentication}
	 * objects.
	 * <p/>
	 * When one the the authentication objects is no longer valid, none should be returned (and data purged from cache).
	 *
	 * @param token authentication token
	 * @return authentication details for this token or null when no valid cached data found
	 */","
	 * Get authentication information from the cache for a authentication token.
	 *
	 * @param token authentication token
	 * @return authentication details or null if no authentication information is available for the token
	 */"
"<fim_prefix>/*<fim_suffix>

package com.github.tetravex_android.fragment;

import android.content.res.Resources;
import android.database.Cursor;
import android.support.v4.app.Fragment;
import android.util.Log;

import com.github.tetravex_android.R;
import com.github.tetravex_android.domain.five.FiveManager;
import com.github.tetravex_android.domain.four.FourManager;
import com.github.tetravex_android.domain.thr<fim_middle>","
 * Copyright (C) 2014 John Hunt <john.alma.hunt@gmail.com>
 *
 * This file is part of Tetravex Android.
 *
 * Tetravex Android is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Tetravex Android is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Tetravex Android.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by Tetravex on 2016/4/19.
 */"
"<fim_prefix> final static String TAG = PageFragmentFactory.class.getSimpleName();

    /**
     * Access the singleton instance of the PageFragmentFactory class
     *
     * @return the singleton instance
     */
    public static PageFragmentFactory getInstance() {
        if (instance == null) {
            instance = new PageFragmentFactory();
        }

        return instance;
    }

    /**<fim_suffix>
    public Fragment getInstructionFragment(int pageIndex) {
        HowToFragment fragment = new HowToFragment();
        fragment.setPageNumber(pageIndex + 1);
        String instructionText;

        switch (pageIndex) {
            case 0:
                instructionText = resources.getString(R.string.how_to_text_1);
                fragment.setInstructionText(instructionText);
   <fim_middle>","
     * Get a Fragment with a page of instructions
     *
     * @param pageIndex the index of the page to retrieve
     * @return the appropriate Fragment
     */","
     * Private constructor to prevent instantiation
     */"
"<fim_prefix>;
                break;
            case 2:
                instructionText = resources.getString(R.string.how_to_text_3);
                fragment.setInstructionText(instructionText);
                break;
            default:
                Log.e(TAG, ""Bad position for how to: "" + String.valueOf(pageIndex));
                break;
        }

        return fragment;
    }

    /**<fim_suffix>
    public Fragment getHiScoreFragment(int pageIndex) {
        HiScoreTableFragment hiScoreFragment = new HiScoreTableFragment();
        Cursor cursor;
        // declared here since findCursorBySelection doesn't seem to like the plain null parameter
        String[] nullStrArray = null;

        switch (pageIndex) {
            case 0:
                hiScoreFragment.setLabel(resou<fim_middle>","
     * Construct a fragment with a table of high scores based on the page number
     *
     * @param pageIndex the index of the page that will show high scores
     * @return the Fragment to display
     */","
     * Returns the fragment for the given page index.
     *
     * @param pageIndex the index of the page to return
     * @return the fragment for the given page index
     */"
"<fim_prefix>static PageFragmentFactory instance;

    @Inject
    Resources resources;

    // Database table managers, used for high score table
    @Inject
    TwoManager twoManager;
    @Inject
    ThreeManager threeManager;
    @Inject
    FourManager fourManager;
    @Inject
    FiveManager fiveManager;

    private final static String TAG = PageFragmentFactory.class.getSimpleName();

    /**<fim_suffix>
    public static PageFragmentFactory getInstance() {
        if (instance == null) {
            instance = new PageFragmentFactory();
        }

        return instance;
    }

    /**
     * Get a Fragment with a page of instructions
     *
     * @param pageIndex the index of the page to retrieve
     * @return the appropriate Fragment
     */
    public Fragment getInstructionFra<fim_middle>","
     * Access the singleton instance of the PageFragmentFactory class
     *
     * @return the singleton instance
     */","
     * Private constructor to prevent instantiation
     */"
"<fim_prefix>import android.util.Log;

import com.github.tetravex_android.R;
import com.github.tetravex_android.domain.five.FiveManager;
import com.github.tetravex_android.domain.four.FourManager;
import com.github.tetravex_android.domain.three.ThreeManager;
import com.github.tetravex_android.domain.two.Two;
import com.github.tetravex_android.domain.two.TwoManager;

import javax.inject.Inject;

/**<fim_suffix>
public class PageFragmentFactory {

    // make this class a singleton
    private static PageFragmentFactory instance;

    @Inject
    Resources resources;

    // Database table managers, used for high score table
    @Inject
    TwoManager twoManager;
    @Inject
    ThreeManager threeManager;
    @Inject
    FourManager fourManager;
    @Inject
    FiveManager fiveManager;

    p<fim_middle>","
 * Constructs Fragment objects for use in the HowToActivity and HiScoreActivity
 */","
 * Factory class for creating page fragments
 */"
"<fim_prefix>ionEngine;
import com.integralblue.commander.api.DictationResult;
import com.integralblue.commander.api.GrammarEngine;
import com.integralblue.commander.api.GrammarResult;
import com.integralblue.commander.api.JsgfParser;
import com.integralblue.commander.api.JsgfRule;
import com.integralblue.commander.api.MatchedRule;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

/**<fim_suffix>
@Slf4j
public class DictationForUnknownGrammarPlugin extends AbstractPlugin implements GrammarEngine {

	private DictationEngine dictationEngine;
	private GrammarEngine grammarEngine;
	private JsgfParser jsgfParser;

	/**
	 * Matches a {@link DictationResult} against the provided {@link JsgfRule}
	 * collection returning the resulting {@link GrammarResult}
	 *
	 * @param rules
	 * @pa<fim_middle>","
 * A {@link GrammarEngine} that will delegate to another {@link GrammarEngine},
 * then, if the result is unknown, run a {@link DictationEngine} on the result
 * audio, then inspect the resulting dictation text to see if it matches,
 * closely enough, one of the grammar rules and if so returns a
 * {@link GrammarResult} expressing the match.
 *
 * This plugin's goal is to improve grammar recognition accuracy and usefulness.
 *
 */","
 * This plugin is used to dictate a grammar for an unknown grammar.
 *
 * @author <NAME>
 */"
"<fim_prefix>ar rules and if so returns a
 * {@link GrammarResult} expressing the match.
 *
 * This plugin's goal is to improve grammar recognition accuracy and usefulness.
 *
 */
@Slf4j
public class DictationForUnknownGrammarPlugin extends AbstractPlugin implements GrammarEngine {

	private DictationEngine dictationEngine;
	private GrammarEngine grammarEngine;
	private JsgfParser jsgfParser;

	/**<fim_suffix>
	@SneakyThrows
	protected GrammarResult dictationResultToGrammarResult(final Collection<JsgfRule> rules,
			final DictationResult dictationResult) {
		final GrammarResult.GrammarResultBuilder grammarResultBuilder = GrammarResult.builder()
				.dictationResult(dictationResult);
		if (dictationResult.isUnknown()) {
			log.debug(""After dictation, still unknown"");
			return grammarResultB<fim_middle>","
	 * Matches a {@link DictationResult} against the provided {@link JsgfRule}
	 * collection returning the resulting {@link GrammarResult}
	 *
	 * @param rules
	 * @param dictationResult
	 * @return
	 */","
	 * Creates a new {@link DictationForUnknownGrammarPlugin}
	 *
	 * @param dictationEngine
	 *            the {@link DictationEngine} to use
	 * @param grammarEngine
	"
"<fim_prefix>/*<fim_suffix>

package albaum;

import java.io.PrintStream;
import java.time.Instant;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.atomic.AtomicInteger;

public class Node implements Comparable<Node>, HasKey {
	public final Map<Character, Node> childNodes = 
		new Concurr<fim_middle>","
 	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*/","*
 * A node in a trie.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>
/*<fim_suffix>
package com.versant.core.ejb.junit.ejbtest0;

import com.versant.core.ejb.junit.ejbtest0.model.*;
import com.versant.core.ejb.junit.VersantEjbTestCase;

import javax.persistence.Query;
import javax.persistence.EntityManager;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import junit.framework.Test;
import junit.framework.TestSuite;

/**
 * Tests for pr<fim_middle>","
 * Copyright (c) 1998 - 2005 Versant Corporation
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Versant Corporation - initial API and implementation
 */","*
 * Tests for prj1.
 *
 * @author <NAME>
 */"
"<fim_prefix>sistence.Query;
import javax.persistence.EntityManager;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import junit.framework.Test;
import junit.framework.TestSuite;

/**
 * Tests for primary key generation related stuff.
 */
public class TestKeyGen extends VersantEjbTestCase {
    
    public TestKeyGen(String name) {
        super(name);
    }

    /**<fim_suffix>
    public void testPersist() {
        EntityManager em = emf().getEntityManager();

        TableGen tg = new TableGen();
        tg.setName(""tg1"");
        em.getTransaction().begin();
        em.persist(tg);
        em.getTransaction().commit();
    }

}
<fim_middle>","
     * Test insert with no keygen.
     */","
     * Create the test case
    "
"<fim_prefix>plementation
 */
package com.versant.core.ejb.junit.ejbtest0;

import com.versant.core.ejb.junit.ejbtest0.model.*;
import com.versant.core.ejb.junit.VersantEjbTestCase;

import javax.persistence.Query;
import javax.persistence.EntityManager;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

import junit.framework.Test;
import junit.framework.TestSuite;

/**<fim_suffix>
public class TestKeyGen extends VersantEjbTestCase {
    
    public TestKeyGen(String name) {
        super(name);
    }

    /**
     * Test insert with no keygen.
     */
    public void testPersist() {
        EntityManager em = emf().getEntityManager();

        TableGen tg = new TableGen();
        tg.setName(""tg1"");
        em.getTransaction().begin();
        em.persist(tg);
 <fim_middle>","
 * Tests for primary key generation related stuff.
 */","
 * Test key generation.
 *
 * @author"
"<fim_prefix>/*<fim_suffix>

package org.cubeville.hawkeye.session;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.cubeville.hawkeye.command.CommandSender;
import org.cubeville.hawkeye.model.Entry;

public class SimpleSession implements Session {

	/**
	 * The owner of this session
	 */
	private CommandSender owner;

	/**
	 * Attribute store
	 */
	private final Map<String, Ob<fim_middle>","
 * HawkEye Redux
 * Copyright (C) 2012-2013 Cubeville <http://www.cubeville.org> and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * A simple session implementation
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>til.HashMap;
import java.util.List;
import java.util.Map;

import org.cubeville.hawkeye.command.CommandSender;
import org.cubeville.hawkeye.model.Entry;

public class SimpleSession implements Session {

	/**
	 * The owner of this session
	 */
	private CommandSender owner;

	/**
	 * Attribute store
	 */
	private final Map<String, Object> attributes = new HashMap<String, Object>();

	/**<fim_suffix>
	private List<Entry> results;

	protected SimpleSession(CommandSender owner) {
		this.owner = owner;
	}

	@Override
	public CommandSender getOwner() {
		return owner;
	}

	@Override
	public void sendMessage(String... message) {
		if (owner != null) owner.sendMessage(message);
	}

	@Override
	public List<Entry> getSearchResults() {
		return results;
	}

	@Override
	public void setSearc<fim_middle>","
	 * Search results
	 */","
	 * Search results
	 */"
"<fim_prefix> received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package org.cubeville.hawkeye.session;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.cubeville.hawkeye.command.CommandSender;
import org.cubeville.hawkeye.model.Entry;

public class SimpleSession implements Session {

	/**<fim_suffix>
	private CommandSender owner;

	/**
	 * Attribute store
	 */
	private final Map<String, Object> attributes = new HashMap<String, Object>();

	/**
	 * Search results
	 */
	private List<Entry> results;

	protected SimpleSession(CommandSender owner) {
		this.owner = owner;
	}

	@Override
	public CommandSender getOwner() {
		return owner;
	}

	@Override
	public void sendMessage(String... <fim_middle>","
	 * The owner of this session
	 */","
	 * Owner of this session"
"<fim_prefix>rogram. If not, see <http://www.gnu.org/licenses/>.
 */

package org.cubeville.hawkeye.session;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.cubeville.hawkeye.command.CommandSender;
import org.cubeville.hawkeye.model.Entry;

public class SimpleSession implements Session {

	/**
	 * The owner of this session
	 */
	private CommandSender owner;

	/**<fim_suffix>
	private final Map<String, Object> attributes = new HashMap<String, Object>();

	/**
	 * Search results
	 */
	private List<Entry> results;

	protected SimpleSession(CommandSender owner) {
		this.owner = owner;
	}

	@Override
	public CommandSender getOwner() {
		return owner;
	}

	@Override
	public void sendMessage(String... message) {
		if (owner != null) owner.sendMessage(message);
	<fim_middle>","
	 * Attribute store
	 */","
	 * Session attributes"
"<fim_prefix>/*<fim_suffix>
package me.enerccio.sp.serialization;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Stack;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import <fim_middle>","
 * SimplePython - embeddable python interpret in java
 * Copyright (c) Peter Vanusanik, All rights reserved.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */","*
 * @author enerccio
 */"
"<fim_prefix>    */
    int idFor(IBlockState state);

    /**
     * Gets the block state by the palette ID, if the provided ID exists.
     */
    @Nullable
    IBlockState getBlockState(int id);

    /**
     * Returns the current full mappings of IDs to values.
     * The ID is the position in the returned list.
     * @return
     */
    List<IBlockState> getMapping();

    /**<fim_suffix>
    boolean setMapping(List<IBlockState> list);

    /**
     * Overrides the mapping for the given ID.
     * @param id
     * @param state
     * @return true if the ID was found in the palette and thus possible to override
     */
    boolean overrideMapping(int id, IBlockState state);

    /**
     * Creates a copy of this palette, using the provided resize handler
  <fim_middle>","
     * Sets the current mapping of the palette.
     * This is meant for reading the palette from file.
     * @param list
     * @return true if the mapping was set successfully, false if it failed
     */","
     * Sets the full mappings of IDs to values.
     * The ID is the position in the returned list.
     * @param list
     * @return true if the list was successfully set
     */"
"<fim_prefix>package litematica.schematic.container;

import java.util.List;
import javax.annotation.Nullable;

import net.minecraft.block.state.IBlockState;

public interface ILitematicaBlockStatePalette
{
    /**
     * Returns the current number of entries in the palette
     * @return
     */
    int getPaletteSize();

    /**<fim_suffix>
    int idFor(IBlockState state);

    /**
     * Gets the block state by the palette ID, if the provided ID exists.
     */
    @Nullable
    IBlockState getBlockState(int id);

    /**
     * Returns the current full mappings of IDs to values.
     * The ID is the position in the returned list.
     * @return
     */
    List<IBlockState> getMapping();

    /**
    <fim_middle>","
     * Gets the palette id for the given block state and adds
     * the state to the palette if it doesn't exist there yet.
     */","
     * Returns the palette ID for the provided block state.
     */"
"<fim_prefix>* @return
     */
    int getPaletteSize();

    /**
     * Gets the palette id for the given block state and adds
     * the state to the palette if it doesn't exist there yet.
     */
    int idFor(IBlockState state);

    /**
     * Gets the block state by the palette ID, if the provided ID exists.
     */
    @Nullable
    IBlockState getBlockState(int id);

    /**<fim_suffix>
    List<IBlockState> getMapping();

    /**
     * Sets the current mapping of the palette.
     * This is meant for reading the palette from file.
     * @param list
     * @return true if the mapping was set successfully, false if it failed
     */
    boolean setMapping(List<IBlockState> list);

    /**
     * Overrides the mapping for the given ID.
     * @param id
<fim_middle>","
     * Returns the current full mappings of IDs to values.
     * The ID is the position in the returned list.
     * @return
     */","
     * Gets the mapping of the palette.
     */"
"<fim_prefix> @return true if the mapping was set successfully, false if it failed
     */
    boolean setMapping(List<IBlockState> list);

    /**
     * Overrides the mapping for the given ID.
     * @param id
     * @param state
     * @return true if the ID was found in the palette and thus possible to override
     */
    boolean overrideMapping(int id, IBlockState state);

    /**<fim_suffix>
    ILitematicaBlockStatePalette copy(IPaletteResizeHandler resizeHandler);
}
<fim_middle>","
     * Creates a copy of this palette, using the provided resize handler
     * @param resizeHandler
     * @return
     */","
     * Returns a copy of this palette with the given resize handler.
     * @param resizeHandler
     * @return
     */"
"<fim_prefix>he ID is the position in the returned list.
     * @return
     */
    List<IBlockState> getMapping();

    /**
     * Sets the current mapping of the palette.
     * This is meant for reading the palette from file.
     * @param list
     * @return true if the mapping was set successfully, false if it failed
     */
    boolean setMapping(List<IBlockState> list);

    /**<fim_suffix>
    boolean overrideMapping(int id, IBlockState state);

    /**
     * Creates a copy of this palette, using the provided resize handler
     * @param resizeHandler
     * @return
     */
    ILitematicaBlockStatePalette copy(IPaletteResizeHandler resizeHandler);
}
<fim_middle>","
     * Overrides the mapping for the given ID.
     * @param id
     * @param state
     * @return true if the ID was found in the palette and thus possible to override
     */","
     * Overrides the mapping of the palette.
     * This is meant for writing the palette to file.
     * @param id
     * @param state
     * @return true if the mapping was"
"<fim_prefix>ck.state.IBlockState;

public interface ILitematicaBlockStatePalette
{
    /**
     * Returns the current number of entries in the palette
     * @return
     */
    int getPaletteSize();

    /**
     * Gets the palette id for the given block state and adds
     * the state to the palette if it doesn't exist there yet.
     */
    int idFor(IBlockState state);

    /**<fim_suffix>
    @Nullable
    IBlockState getBlockState(int id);

    /**
     * Returns the current full mappings of IDs to values.
     * The ID is the position in the returned list.
     * @return
     */
    List<IBlockState> getMapping();

    /**
     * Sets the current mapping of the palette.
     * This is meant for reading the palette from file.
     * @param list
     * @<fim_middle>","
     * Gets the block state by the palette ID, if the provided ID exists.
     */","
     * Gets the block state for the given ID.
     * @param id
  "
"<fim_prefix>package litematica.schematic.container;

import java.util.List;
import javax.annotation.Nullable;

import net.minecraft.block.state.IBlockState;

public interface ILitematicaBlockStatePalette
{
    /**<fim_suffix>
    int getPaletteSize();

    /**
     * Gets the palette id for the given block state and adds
     * the state to the palette if it doesn't exist there yet.
     */
    int idFor(IBlockState state);

    /**
     * Gets the block state by the palette ID, if the provided ID exists.
     */
    @Nullable
    IBlockState getBlockState(int id);

    /**
     * Returns t<fim_middle>","
     * Returns the current number of entries in the palette
     * @return
     */","
     * Gets the palette size.
     */"
"<fim_prefix>	protected List<N> formComponent(Set<N> s, N found) {
		ExtendedDfs<N> dfs = new ExtendedDfs<>(graph, ExtendedDfs.TOPO).setMask(s).run(found);
		return dfs.getTopoOrder();
	}
	
	protected Set<? extends FastGraphEdge<N>> getEdges(N n) {
		return graph.getEdges(n);
	}

	protected Iterable<? extends FastGraphEdge<N>> filter(Set<? extends FastGraphEdge<N>> edges) {
		return edges;
	}
	
	/*<fim_suffix>

	/* List<FastGraphEdge<N>> weigh(Set<FastGraphEdge<N>> edges) {
		List<FastGraphEdge<N>> list = new ArrayList<>(edges);
		Collections.sort(list, new Comparator<FastGraphEdge<N>>() {
			@Override
			public int compare(FlowEdge<N> o1, FlowEdge<N> o2) {
				Class<?> c1 = o1.getClass();
				Class<?> c2 = o2.getClass();
				
				if(!WEIGHTS.containsKey(c1)) {
					throw new IllegalStateEx<fim_middle>"," static final Map<Class<?>, Integer> WEIGHTS = new HashMap<>();
	
	{
		WEIGHTS.put(ImmediateEdge.class, 10);
		WEIGHTS.put(ConditionalJumpEdge.class, 9);
		WEIGHTS.put(UnconditionalJumpEdge.class, 8);
		WEIGHTS.put(DefaultSwitchEdge.class, 7);
		WEIGHTS.put(SwitchEdge.class, 6);
		WEIGHTS.put(TryCatchEdge.class, 5);
	}  */","*
	 * @param edges
	 * @return
	 */"
"<fim_prefix>extends FastGraphEdge<N>> edges) {
		return edges;
	}
	
	/* static final Map<Class<?>, Integer> WEIGHTS = new HashMap<>();
	
	{
		WEIGHTS.put(ImmediateEdge.class, 10);
		WEIGHTS.put(ConditionalJumpEdge.class, 9);
		WEIGHTS.put(UnconditionalJumpEdge.class, 8);
		WEIGHTS.put(DefaultSwitchEdge.class, 7);
		WEIGHTS.put(SwitchEdge.class, 6);
		WEIGHTS.put(TryCatchEdge.class, 5);
	}  */

	/*<fim_suffix>
}
<fim_middle>"," List<FastGraphEdge<N>> weigh(Set<FastGraphEdge<N>> edges) {
		List<FastGraphEdge<N>> list = new ArrayList<>(edges);
		Collections.sort(list, new Comparator<FastGraphEdge<N>>() {
			@Override
			public int compare(FlowEdge<N> o1, FlowEdge<N> o2) {
				Class<?> c1 = o1.getClass();
				Class<?> c2 = o2.getClass();
				
				if(!WEIGHTS.containsKey(c1)) {
					throw new IllegalStateException(c1.toString());
				} else if(!WEIGHTS.containsKey(c2)) {
					throw new IllegalStateException(c2.toString());
				}
				
				int p1 = WEIGHTS.get(c1);
				int p2 = WEIGHTS.get(c2);
				
				// p2, p1 because higher weights are
				// more favoured.
				return Integer.compare(p2, p1);
			}
		});
		System.out.println(""list: "" + list);
		return list;
	} */","*
	 * Returns the weight of the given edge.
	 * 
	 * @param edge the edge
	 * @return the weight
	 */"
"<fim_prefix>/*<fim_suffix>
package optic_fusion1.antimalware.notifications.impl;

import java.awt.AWTException;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.nio.file.Path;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import optic_fusion1.antimalware.AntiMalware;
import static optic<fim_middle>","
* Copyright (C) 2021 Optic_Fusion1
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 12/12/2017.
 */"
"<fim_prefix>/*<fim_suffix>

package de.blichmann.idajava.api.idc;

/**
 * Base class for all exceptions specific to the IDC compatibility layer.
 * @author Christian Blichmann
 * @since 0.2
 */
public class IdcException extends Exception {
	private static final long serialVersionUID = 4251321264466725543L;

	public IdcException() {
		super();
	}

	public IdcException(final String message) {
		super(message);
	}<fim_middle>","
 * IDAJava version 0.3
 * Copyright (c)2007-2017 Christian Blichmann
 *
 * IdcException Class
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Base class for all exceptions specific to the IDC compatibility layer.
 * @author Christian Blichmann
 * @since 0.2
 */"
"<fim_prefix> will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package de.blichmann.idajava.api.idc;

/**<fim_suffix>
public class IdcException extends Exception {
	private static final long serialVersionUID = 4251321264466725543L;

	public IdcException() {
		super();
	}

	public IdcException(final String message) {
		super(message);
	}
}
<fim_middle>","
 * Base class for all exceptions specific to the IDC compatibility layer.
 * @author Christian Blichmann
 * @since 0.2
 */","
 * Exception thrown by the Idc API.
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.gmobile.sqliteeditor.factory;

/**<fim_suffix>
public enum DataType {

    appData,
    fileData,
    historyData,
    mineData

}
<fim_middle>","
 * Created by admin on 2016/11/22.
 */","
 * Created by guglielmo on 06/09/"
"<fim_prefix>/*<fim_suffix>

package io.github.dsheirer.module.decode.p25.phase2.enumeration;

/**
 * Indicates the RF level adjustment command to a mobile radio
 */
public enum RFLevel
{
    UNKNOWN(""UNKNOWN""),
    MINUS_15(""-15 dBm""),
    MINUS_12(""-12 dBm""),
    MINUS_9(""-9 dBm""),
    MINUS_6(""-6 dBm""),
    MINUS_3(""-3 dBm""),
    NONE(""0 dBm""),
    PLUS_3(""+3 dBm""),
    PLUS_6(""+6 dBm""),
    PLUS_9(""+9 dBm""),<fim_middle>","
 *
 *  * ******************************************************************************
 *  * Copyright (C) 2014-2019 Dennis Sheirer
 *  *
 *  * This program is free software: you can redistribute it and/or modify
 *  * it under the terms of the GNU General Public License as published by
 *  * the Free Software Foundation, either version 3 of the License, or
 *  * (at your option) any later version.
 *  *
 *  * This program is distributed in the hope that it will be useful,
 *  * but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  * GNU General Public License for more details.
 *  *
 *  * You should have received a copy of the GNU General Public License
 *  * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *  * *****************************************************************************
 *
 *
 */","*
 * Copyright (c) 2020 <NAME>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License."
"<fim_prefix>R PURPOSE.  See the
 *  * GNU General Public License for more details.
 *  *
 *  * You should have received a copy of the GNU General Public License
 *  * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *  * *****************************************************************************
 *
 *
 */

package io.github.dsheirer.module.decode.p25.phase2.enumeration;

/**<fim_suffix>
public enum RFLevel
{
    UNKNOWN(""UNKNOWN""),
    MINUS_15(""-15 dBm""),
    MINUS_12(""-12 dBm""),
    MINUS_9(""-9 dBm""),
    MINUS_6(""-6 dBm""),
    MINUS_3(""-3 dBm""),
    NONE(""0 dBm""),
    PLUS_3(""+3 dBm""),
    PLUS_6(""+6 dBm""),
    PLUS_9(""+9 dBm""),
    PLUS_12(""+12 dBm""),
    PLUS_15(""+15 dBm""),
    PLUS_18(""+18 dBm""),
    PLUS_21(""+21 dBm""),
    PLUS_24(""+24 dBm""),
    PLUS_27(""+27 <fim_middle>","
 * Indicates the RF level adjustment command to a mobile radio
 */","
 * RFLevel
 *
 * @author <NAME>
"
"<fim_prefix>nIgnoreProperties(ignoreUnknown = true)
public class JobExecutionException extends Throwable {

	/**
	 *
	 */
	private static final long serialVersionUID = -6169550730623190349L;

	/**
	 *
	 */
	private String message;

	public JobExecutionException(String message) {
		this.message = message;
	}

	/**
	 * @return the message
	 */
	public String getMessage() {
		return message;
	}

	/**<fim_suffix>
	public void setMessage(String message) {
		this.message = message;
	}

}
<fim_middle>","
	 * @param message the message to set
	 */","
	 * @param message the message to set
	 */"
"<fim_prefix>/*<fim_suffix>
package org.emonocot.api.job;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class JobExecutionException extends Throwable {

	/**
	 *
	 */
	private static final long serialVersionUID = -6169550730623190349L;

	/**
	 *
	 */
	private String message;

	public JobExecutionException(String message) {
		this.message = mess<fim_middle>","
 * This is eMonocot, a global online biodiversity information resource.
 *
 * Copyright © 2011–2015 The Board of Trustees of the Royal Botanic Gardens, Kew and The University of Oxford
 *
 * eMonocot is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * eMonocot is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * The complete text of the GNU Affero General Public License is in the source repository as the file
 * ‘COPYING’.  It is also available from <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>emonocot.api.job;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class JobExecutionException extends Throwable {

	/**
	 *
	 */
	private static final long serialVersionUID = -6169550730623190349L;

	/**
	 *
	 */
	private String message;

	public JobExecutionException(String message) {
		this.message = message;
	}

	/**<fim_suffix>
	public String getMessage() {
		return message;
	}

	/**
	 * @param message the message to set
	 */
	public void setMessage(String message) {
		this.message = message;
	}

}
<fim_middle>","
	 * @return the message
	 */","
	 * @return the message
	 */"
"<fim_prefix>= rx + sy*(pos.y+halfh);
      double scale = r/Math.sqrt(pos.x*pos.x+sz*pos.z*pos.z);
      pos.set(pos.x*scale, pos.y, pos.z*scale);
      fromLocal.transform(pos);
    }
    else
    {
      double dx = pos.x-cx, dz = pos.z-cz;
      double r = rx + sy*(pos.y-cy+halfh);
      double scale = r/Math.sqrt(dx*dx+sz*dz*dz);
      pos.set(cx+dx*scale, pos.y, cz+dz*scale);
    }
  }

  /**<fim_suffix>

  @Override
  public BoundingBox getBounds()
  {
    if (transform)
      return (new BoundingBox(-rx, rx, -halfh, halfh, -rz, rz)).transformAndOutset(fromLocal);
    else if (toprx2 > rx2)
    {
      double xrad = Math.sqrt(toprx2), zrad = Math.sqrt(rz2*toprx2/rx2);
      return new BoundingBox(cx-xrad, cx+xrad, cy-halfh, cy+halfh, cz-zrad, cz+zrad);
    }
    else
      return new<fim_middle>", Get a bounding box for this cylinder. */,"
   * Returns the bounding box of"
"<fim_prefix>tributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
   PARTICULAR PURPOSE.  See the GNU General Public License for more details. */

package artofillusion.raytracer;

import artofillusion.material.*;
import artofillusion.math.*;
import artofillusion.object.*;
import artofillusion.texture.*;

/**<fim_suffix>

public class RTCylinder extends RTObject
{
  Cylinder theCylinder;
  Vec3 topNormal, bottomNormal;
  double rx, rz, height, halfh, rx2, rz2, toprx2, cx, cy, cz, sy, sz, param[];
  boolean bumpMapped, cone, transform, uniform;
  Mat4 toLocal, fromLocal;

  public static final double TOL = 1e-12;
  public static final int TOP = 0;
  public static final int BOTTOM = 1;
  public static f<fim_middle>"," RTCylinder represents an cylinder, tapered cylinder, or cone to be raytraced.  It is
    defined by specifying a Cylinder object, and the transformations to and from local
    coordinates. */","
   A cylinder.
*/"
"<fim_prefix>    return (new BoundingBox(-rx, rx, -halfh, halfh, -rz, rz)).transformAndOutset(fromLocal);
    else if (toprx2 > rx2)
    {
      double xrad = Math.sqrt(toprx2), zrad = Math.sqrt(rz2*toprx2/rx2);
      return new BoundingBox(cx-xrad, cx+xrad, cy-halfh, cy+halfh, cz-zrad, cz+zrad);
    }
    else
      return new BoundingBox(cx-rx, cx+rx, cy-halfh, cy+halfh, cz-rz, cz+rz);
  }

  /**<fim_suffix>

  @Override
  public boolean intersectsNode(OctreeNode node)
  {
    double x, z;

    BoundingBox bb = node.getBounds();
    if (transform)
    {
      bb = bb.transformAndOutset(toLocal);
      if (bb.miny > halfh || bb.maxy < -halfh)
        return false;
      x = 0.0;
      z = 0.0;
      if (bb.minx > 0.0)
        x = bb.minx;
      else if (bb.maxx < 0.0)
        x = bb.maxx;
<fim_middle>", Determine whether any part of the surface of the cylinder lies within a bounding box. */,"
   * Returns the bounding box of this octree.
   */"
"<fim_prefix>b.maxy < cy-halfh)
      return false;
    x = cx;
    z = cz;
    if (cx < bb.minx)
      x = bb.minx;
    else if (cx > bb.maxx)
      x = bb.maxx;
    if (cz < bb.minz)
      z = bb.minz;
    else if (cz > bb.maxz)
      z = bb.maxz;
    double maxrad2 = (rx2 > toprx2 ? rx2 : toprx2);
    if ((x-cx)*(x-cx) + sz*(z-cz)*(z-cz) > maxrad2)
      return false;
    return true;
  }

  /**<fim_suffix>

  @Override
  public Mat4 toLocal()
  {
    return toLocal;
  }

  /**
   * Inner class representing an intersection with an RTCylinder.
   */

  private static class CylinderIntersection implements SurfaceIntersection
  {
    private RTCylinder cylinder;
    private int numIntersections, hit;
    private double dist1, dist2, r1x, r1y, r1z, r2x, r2y, r2z;
    private boolean trueNorm<fim_middle>", Get the transformation from world coordinates to the object's local coordinates. */,"
   * Returns the intersection point of the ray with the cylinder"
"<fim_prefix> (cz < bb.minz)
      z = bb.minz;
    else if (cz > bb.maxz)
      z = bb.maxz;
    double maxrad2 = (rx2 > toprx2 ? rx2 : toprx2);
    if ((x-cx)*(x-cx) + sz*(z-cz)*(z-cz) > maxrad2)
      return false;
    return true;
  }

  /** Get the transformation from world coordinates to the object's local coordinates. */

  @Override
  public Mat4 toLocal()
  {
    return toLocal;
  }

  /**<fim_suffix>

  private static class CylinderIntersection implements SurfaceIntersection
  {
    private RTCylinder cylinder;
    private int numIntersections, hit;
    private double dist1, dist2, r1x, r1y, r1z, r2x, r2y, r2z;
    private boolean trueNormValid;
    private Vec3 trueNorm, pos;

    public CylinderIntersection(RTCylinder cylinder, int numIntersections, int hit, Vec3 point1, Vec3 po<fim_middle>","
   * Inner class representing an intersection with an RTCylinder.
   */", Get the transformation from object's local coordinates to world coordinates. */
"<fim_prefix>(orig.x+dist1*rdir.x, orig.y+dist1*rdir.y, orig.z+dist1*rdir.z);
    if (hit == SIDE)
      projectPoint(v1);
    if (dist2 == Double.MAX_VALUE)
      intersections = 1;
    else
    {
      intersections = 2;
      v2.set(orig.x+dist2*rdir.x, orig.y+dist2*rdir.y, orig.z+dist2*rdir.z);
    }
    return new CylinderIntersection(this, intersections, hit, v1, v2, dist1, dist2);
  }

  /**<fim_suffix>

  private void projectPoint(Vec3 pos)
  {
    if (transform)
    {
      toLocal.transform(pos);
      double r = rx + sy*(pos.y+halfh);
      double scale = r/Math.sqrt(pos.x*pos.x+sz*pos.z*pos.z);
      pos.set(pos.x*scale, pos.y, pos.z*scale);
      fromLocal.transform(pos);
    }
    else
    {
      double dx = pos.x-cx, dz = pos.z-cz;
      double r = rx + sy*(pos.y-cy+halfh);
<fim_middle>"," Given a point, project it onto the surface of the cylinder.  This is necessary to
      prevent roundoff error. */","
   * Returns the distance from the cylinder to the given point.
   * @param pos the point
   * @return"
"<fim_prefix>et(r2x, r2y, r2z);
      if (cylinder.uniform)
        map.getTransparency(pos, trans, angle, size, time, cylinder.param);
      else
      {
        cylinder.toLocal.transform(pos);
        map.getTransparency(pos, trans, angle, size, time, cylinder.param);
      }
    }

    @Override
    public void trueNormal(Vec3 n)
    {
      calcTrueNorm();
      n.set(trueNorm);
    }

    /**<fim_suffix>

    private void calcTrueNorm()
    {
      if (trueNormValid)
        return;
      trueNormValid = true;
      if (hit == TOP)
        trueNorm.set(cylinder.topNormal);
      else if (hit == BOTTOM)
        trueNorm.set(cylinder.bottomNormal);
      else
      {
        if (cylinder.transform)
        {
          trueNorm.set(r1x-cylinder.cx, r1y-cylinder.cy, r1z-cylinder.cz);
    <fim_middle>", Calculate the true normal of the point of intersection. */,"/
    private void calcTrueNorm()"
"<fim_prefix>rz2), linearTol)*TOL;
    linearTol *= TOL;
  }

  /** Get the MaterialMapping for this object. */

  @Override
  public final MaterialMapping getMaterialMapping()
  {
    return theCylinder.getMaterialMapping();
  }

  /** Get the TextureMapping for this object. */

  @Override
  public final TextureMapping getTextureMapping()
  {
    return theCylinder.getTextureMapping();
  }

  /**<fim_suffix>

  @Override
  public SurfaceIntersection checkIntersection(Ray r)
  {
    Vec3 orig = r.getOrigin(), rdir = r.getDirection();
    Vec3 v1 = r.tempVec1, v2 = r.tempVec2, dir = r.tempVec3;
    double a, b, c, d, e, dist1, dist2, temp1, temp2, mint;
    int intersections, hit = -1;

    if (transform)
    {
      v1.set(cx-orig.x, cy-orig.y, cz-orig.z);
      toLocal.transformDirection(<fim_middle>", Determine whether the given ray intersects this cylinder. */, Get the Transform for this object. */
"<fim_prefix>/*<fim_suffix>

package artofillusion.raytracer;

import artofillusion.material.*;
import artofillusion.math.*;
import artofillusion.object.*;
import artofillusion.texture.*;

/** RTCylinder represents an cylinder, tapered cylinder, or cone to be raytraced.  It is
    defined by specifying a Cylinder object, and the transformations to and from local
    coordinates. */

public class RTCylinder exten<fim_middle>"," Copyright (C) 1999-2013 by Peter Eastman
   Editions copyright (C) by Petri Ihalainen 2020

   This program is free software; you can redistribute it and/or modify it under the
   terms of the GNU General Public License as published by the Free Software
   Foundation; either version 2 of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
   PARTICULAR PURPOSE.  See the GNU General Public License for more details. */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>ormal.times(-1.0);
    bumpMapped = cylinder.getTexture().hasComponent(Texture.BUMP_COMPONENT);
    this.toLocal = toLocal;

    linearTol = (Math.max(Math.max(Math.abs(fromLocal.m14), (Math.abs(fromLocal.m24))),(Math.abs(fromLocal.m34))) +
                 Math.max(Math.max(rx, rz), height));
    radialTol = Math.max(Math.max(rx2, rz2), linearTol)*TOL;
    linearTol *= TOL;
  }

  /**<fim_suffix>

  @Override
  public final MaterialMapping getMaterialMapping()
  {
    return theCylinder.getMaterialMapping();
  }

  /** Get the TextureMapping for this object. */

  @Override
  public final TextureMapping getTextureMapping()
  {
    return theCylinder.getTextureMapping();
  }

  /** Determine whether the given ray intersects this cylinder. */

  @Override
  public SurfaceInterse<fim_middle>", Get the MaterialMapping for this object. */, Get the cylinder. */
"<fim_prefix>fromLocal.m14), (Math.abs(fromLocal.m24))),(Math.abs(fromLocal.m34))) +
                 Math.max(Math.max(rx, rz), height));
    radialTol = Math.max(Math.max(rx2, rz2), linearTol)*TOL;
    linearTol *= TOL;
  }

  /** Get the MaterialMapping for this object. */

  @Override
  public final MaterialMapping getMaterialMapping()
  {
    return theCylinder.getMaterialMapping();
  }

  /**<fim_suffix>

  @Override
  public final TextureMapping getTextureMapping()
  {
    return theCylinder.getTextureMapping();
  }

  /** Determine whether the given ray intersects this cylinder. */

  @Override
  public SurfaceIntersection checkIntersection(Ray r)
  {
    Vec3 orig = r.getOrigin(), rdir = r.getDirection();
    Vec3 v1 = r.tempVec1, v2 = r.tempVec2, dir = r.tempVec3;
    double a, b,<fim_middle>", Get the TextureMapping for this object. */, Get the TextureMapping for this object. */
"<fim_prefix>/*<fim_suffix>
package com.gdev.timetable.helper;

import java.awt.Container;
import javax.swing.JOptionPane;

/**
 *
 * @author Admin
 */
public class MessageDisplay {
    public static int YES_OPTION = JOptionPane.YES_OPTION;
    public static int NO_OPTION = JOptionPane.NO_OPTION;
    public static void showErrorDialog(Container parent, String msg){
       showErrorDialog(parent, msg, ""Error"");
 <fim_middle>","
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */","*
 *
 * @author Admin
 */"
"<fim_prefix>/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gdev.timetable.helper;

import java.awt.Container;
import javax.swing.JOptionPane;

/**<fim_suffix>
public class MessageDisplay {
    public static int YES_OPTION = JOptionPane.YES_OPTION;
    public static int NO_OPTION = JOptionPane.NO_OPTION;
    public static void showErrorDialog(Container parent, String msg){
       showErrorDialog(parent, msg, ""Error"");
    }
     public static void showErrorDialog(Container parent, String msg, String title){
        JOptionPane.showMessageDia<fim_middle>","
 *
 * @author Admin
 */","
 *
 * @author user
 */"
"<fim_prefix>package com.dev.trident.comicbookreader;

import com.dev.trident.comicbookreader.activities.settings.presenter.SettingsPresenterImpl;

import org.junit.Test;

/**<fim_suffix>

public class SettingsPresenterImplTest {
    SettingsPresenterImpl settingsPresenter;
    @Test
    public void createTest() throws Exception{
        settingsPresenter = new SettingsPresenterImpl();
    }
}
<fim_middle>","
 * trident 15/04/2017.
 */","
 * Created by <NAME> on 4/12/"
"<fim_prefix>/*<fim_suffix>
package org.objectweb.proactive.examples.readers;

import org.objectweb.proactive.extensions.annotation.ActiveObject;


@ActiveObject
public class Reader implements org.objectweb.proactive.RunActive {
    private ReaderDisplay display;
    private ReaderWriter rw;
    private boolean done;
    private boolean autopilot;
    private boolean reading;
    private int id;

    /**
     * <fim_middle>","
 * ################################################################
 *
 * ProActive Parallel Suite(TM): The Java(TM) library for
 *    Parallel, Distributed, Multi-Core Computing for
 *    Enterprise Grids & Clouds
 *
 * Copyright (C) 1997-2012 INRIA/University of
 *                 Nice-Sophia Antipolis/ActiveEon
 * Contact: proactive@ow2.org or contact@activeeon.com
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation; version 3 of
 * the License.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA
 *
 * If needed, contact us to obtain a release under GPL Version 2 or 3
 * or a different license than the AGPL.
 *
 *  Initial developer(s):               The ProActive Team
 *                        http://proactive.inria.fr/team_members.htm
 *  Contributor(s):
 *
 * ################################################################
 * $$PROACTIVE_INITIAL_DEV$$
 */","*
 * @author <NAME>
 * @version $Id$
 */"
"<fim_prefix>ons.annotation.ActiveObject;


@ActiveObject
public class Reader implements org.objectweb.proactive.RunActive {
    private ReaderDisplay display;
    private ReaderWriter rw;
    private boolean done;
    private boolean autopilot;
    private boolean reading;
    private int id;

    /**
     * The no args constructor as commanded by PaPdc
     */
    public Reader() {
    }

    /**<fim_suffix>
    public Reader(ReaderDisplay display, ReaderWriter rw, int id) {
        this.display = display;
        this.rw = rw;
        this.id = id;
        done = false;
        autopilot = true;
        reading = false;
    }

    public void stopIt() {
        done = true;
    }

    private void startRead() {
        reading = true;
        display.setWait(id, true);
        rw.startRe<fim_middle>","
     * The real constructor
     */","
     * The constructor
     *
"
"<fim_prefix> autopilot = true;
        reading = false;
    }

    public void stopIt() {
        done = true;
    }

    private void startRead() {
        reading = true;
        display.setWait(id, true);
        rw.startRead();
        display.setRead(id, true);
    }

    private void endRead() {
        reading = false;
        rw.endRead();
        display.setRead(id, false);
    }

    /**<fim_suffix>
    public void runActivity(org.objectweb.proactive.Body body) {
        org.objectweb.proactive.Service service = new org.objectweb.proactive.Service(body);
        while (!done) {
            service.serveOldest();
            // Autopilot mode
            if (reading) {
                endRead();
            } else {
                startRead();
            }
            try {
    <fim_middle>","
     * The live method.
     * @param body the body of the Active object
     */","
     * @see org.objectweb.proactive.core.body.Body#runActivity(org.objectweb.proactive."
"<fim_prefix>EV$$
 */
package org.objectweb.proactive.examples.readers;

import org.objectweb.proactive.extensions.annotation.ActiveObject;


@ActiveObject
public class Reader implements org.objectweb.proactive.RunActive {
    private ReaderDisplay display;
    private ReaderWriter rw;
    private boolean done;
    private boolean autopilot;
    private boolean reading;
    private int id;

    /**<fim_suffix>
    public Reader() {
    }

    /**
     * The real constructor
     */
    public Reader(ReaderDisplay display, ReaderWriter rw, int id) {
        this.display = display;
        this.rw = rw;
        this.id = id;
        done = false;
        autopilot = true;
        reading = false;
    }

    public void stopIt() {
        done = true;
    }

    private void startRead() {
    <fim_middle>","
     * The no args constructor as commanded by PaPdc
     */","
     * The default constructor
     */"
"<fim_prefix>/**<fim_suffix>

package testmessenger.MSN;

import junit.framework.TestCase;
import junit.framework.Test;
import junit.framework.TestSuite;
import messenger.MSN.MSNOutgoingANSPacket;
import java.util.Vector;

/**
 * @author benny
 */
public class MSNOutgoingANSPacketTest extends TestCase {
	private MSNOutgoingANSPacket fANSPacket = null;	
	
	public MSNOutgoingANSPacketTest() {

	}
	
	public void tes<fim_middle>","   	Anastacia is a Java ICQ/MSN/Yahoo Instant Messenger
 *   	Copyright (C) 2002,2003 	Benny Van Aerschot, Bart Van Rompaey
 * 	Made as a project in 3th year computer science at the university of Antwerp (UA)
 *
 * 	This file is part of Anastacia.
 *
 *    	Anastacia is free software; you can redistribute it and/or modify
 *    	it under the terms of the GNU General Public License as published by
 *    	the Free Software Foundation; either version 2 of the License, or
 *    	(at your option) any later version.
 *
 *    	Anastacia is distributed in the hope that it will be useful,
 *    	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   	GNU General Public License for more details.
 *
 *    	You should have received a copy of the GNU General Public License
 *    	along with Anastacia; if not, write to the Free Software
 *    	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * 	Contact authors:
 * 		Benny Van Aerschot - bennyva@pi.be
 * 		Bart Van Rompaey - bart@perfectpc.be
 */","
 * @author benny
 */"
"<fim_prefix> Test suite() {
		return new TestSuite(MSNOutgoingANSPacketTest.class);
	}

	/**
	 * @see TestCase#setUp()
	 */
	protected void setUp() throws Exception {
		super.setUp();
		
		Vector args = new Vector();
		args.add(Long.valueOf(""3""));
		args.add(""someone@somewhere.com"");
		args.add(""849102291.520491932"");
		args.add(""11752099"");

		fANSPacket = new MSNOutgoingANSPacket(args);
	}

	/**<fim_suffix>
	protected void tearDown() throws Exception {
		super.tearDown();
	}

	public static void main (String[] args) {
		junit.textui.TestRunner.run(suite());
	}
	
}
<fim_middle>","
	 * @see TestCase#tearDown()
	 */","
	 * @see TestCase#tearDown()
	 */"
"<fim_prefix>*    	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * 	Contact authors:
 * 		Benny Van Aerschot - bennyva@pi.be
 * 		Bart Van Rompaey - bart@perfectpc.be
 */

package testmessenger.MSN;

import junit.framework.TestCase;
import junit.framework.Test;
import junit.framework.TestSuite;
import messenger.MSN.MSNOutgoingANSPacket;
import java.util.Vector;

/**<fim_suffix>
public class MSNOutgoingANSPacketTest extends TestCase {
	private MSNOutgoingANSPacket fANSPacket = null;	
	
	public MSNOutgoingANSPacketTest() {

	}
	
	public void testContent() {
		assertTrue(fANSPacket.getContent().equals(""ANS 3 someone@somewhere.com 849102291.520491932 11752099""));
	}
	
	public static Test suite() {
		return new TestSuite(MSNOutgoingANSPacketTest.class);
	}

	/**
<fim_middle>","
 * @author benny
 */","
 * @author Benny Van A"
"<fim_prefix>/
public class MSNOutgoingANSPacketTest extends TestCase {
	private MSNOutgoingANSPacket fANSPacket = null;	
	
	public MSNOutgoingANSPacketTest() {

	}
	
	public void testContent() {
		assertTrue(fANSPacket.getContent().equals(""ANS 3 someone@somewhere.com 849102291.520491932 11752099""));
	}
	
	public static Test suite() {
		return new TestSuite(MSNOutgoingANSPacketTest.class);
	}

	/**<fim_suffix>
	protected void setUp() throws Exception {
		super.setUp();
		
		Vector args = new Vector();
		args.add(Long.valueOf(""3""));
		args.add(""someone@somewhere.com"");
		args.add(""849102291.520491932"");
		args.add(""11752099"");

		fANSPacket = new MSNOutgoingANSPacket(args);
	}

	/**
	 * @see TestCase#tearDown()
	 */
	protected void tearDown() throws Exception {
		super.tearDown();
	}

	publi<fim_middle>","
	 * @see TestCase#setUp()
	 */","
	 * @see TestCase#setUp()
	 */"
"<fim_prefix>ners;
import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;
import org.springframework.test.context.transaction.TransactionalTestExecutionListener;

import com.github.springtestdbunit.DbUnitTestExecutionListener;

import org.demyo.dao.config.DaoConfig;
import org.demyo.test.AbstractPersistenceTest;
import org.demyo.test.config.TestConfiguration;

/**<fim_suffix>
@ContextConfiguration(classes = { DaoConfig.class, TestConfiguration.class })
@TestExecutionListeners(
{ DependencyInjectionTestExecutionListener.class, DbUnitTestExecutionListener.class,
		TransactionalTestExecutionListener.class })
public abstract class AbstractServiceTest extends AbstractPersistenceTest {

}
<fim_middle>","
 * Base class for Spring Data Repository tests.
 */","
 * Abstract test class for all services"
"<fim_prefix>/*<fim_suffix>
package org.entando.entando.aps.system.services.entity.model;

import com.agiletec.aps.system.common.entity.model.attribute.AttributeRole;
import java.util.Objects;

/**
 * Generic property of attribute
 *
 * @author E.Santoboni
 */
public class AttributePropertyDto {

    private String code;
    private String descr;

    public AttributePropertyDto() {
    }

    public AttributePr<fim_middle>","
 * Copyright 2018-Present Entando Inc. (http://www.entando.com) All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */","*
 * Generic property of attribute
 *
 * @author E.Santoboni
 */"
"<fim_prefix> hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
package org.entando.entando.aps.system.services.entity.model;

import com.agiletec.aps.system.common.entity.model.attribute.AttributeRole;
import java.util.Objects;

/**<fim_suffix>
public class AttributePropertyDto {

    private String code;
    private String descr;

    public AttributePropertyDto() {
    }

    public AttributePropertyDto(AttributeRole role) {
        this(role.getName(), role.getDescription());
    }

    public AttributePropertyDto(String code, String descr) {
        this.code = code;
        this.descr = descr;
    }

    public String g<fim_middle>","
 * Generic property of attribute
 *
 * @author E.Santoboni
 */","
 *
 * @author <NAME> <<EMAIL>>
 */"
"<fim_prefix>package com.android305.forgeessentialsremote.data;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

/**<fim_suffix>
public class Player implements Serializable {

    private String uuid;
    private String username;
    private float health;
    private float armor;
    private float hunger;
    private float saturation;
    private int dim;
    private float x, y, z;

    public Player() {
    }

    public Player(String uuid, String username, float health, float armor, float hunger, float satura<fim_middle>","
 * Created by Andres on 12/28/2014.
 */","
 * Created by Tom on 1/23/2015.
 */"
"<fim_prefix>package org.workcraft.interop;

/**<fim_suffix>
public final class ModelScope {
	private ModelScope(){}
}
<fim_middle>","
 * This type represents the model scope. Intended to be used in ServiceProviders and ServiceHandles which relate to the model.
 */","
 *
 * @author <NAME>
 *
 */"
"<fim_prefix>package top.xdi8.mod.firefly8.core.totem;

import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;

import java.util.Optional;

@FunctionalInterface
public interface TotemAbility {
    /**<fim_suffix>
    Optional<ItemStack> activate(Level level, Player player, InteractionHand hand);

    default ResourceLocation getId() {
        return TotemAbilities.getId(this).orElseThrow(() ->
                new IllegalStateException(""Trying to get id from unregistered TotemAbility""));
    }
}
<fim_middle>","
     * Empty: pass this event <br>
     * Present: return item to inventory
     */","
     * Activates the TotemAbility.
     *
     * @param level    "
"<fim_prefix>/*<fim_suffix>
package net.anwiba.commons.utilities.time;

import net.anwiba.commons.lang.functional.IConverter;

import java.time.format.DateTimeFormatter;

public final class LocalDateTimeRangeToStringConverter implements
    IConverter<ILocalDateTimeRange, String, RuntimeException> {

  private final DateTimeFormatter formatter;

  public LocalDateTimeRangeToStringConverter(final DateTimeFormatte<fim_middle>","
 * #%L
 * anwiba commons core
 * %%
 * Copyright (C) 2007 - 2016 Andreas Bartels
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */","*
 * @author <NAME>
 */"
"<fim_prefix>package ehud;

/**<fim_suffix>
public class Interference extends GridElement {
	
	/**
	 * How big is the blind spot
	 */
	float radius;
	
	
	public float getRadius() {
		return radius;
	}
	public void setRadius(float radius) {
		this.radius = radius;
	}
	
	
	
}
<fim_middle>","
 * Interference does not allow radio propagation. These are are blind spots on
 * the grid of the world. For simplicity we treat interference as a circle
 * 
 * @author Emerald Dsouza
 * 
 */","
 * A blind spot
 * @author <NAME>
 *
 */"
"<fim_prefix>package ehud;

/**
 * Interference does not allow radio propagation. These are are blind spots on
 * the grid of the world. For simplicity we treat interference as a circle
 * 
 * @author Emerald Dsouza
 * 
 */
public class Interference extends GridElement {
	
	/**<fim_suffix>
	float radius;
	
	
	public float getRadius() {
		return radius;
	}
	public void setRadius(float radius) {
		this.radius = radius;
	}
	
	
	
}
<fim_middle>","
	 * How big is the blind spot
	 */","
	 * 
	 */"
"<fim_prefix>/*<fim_suffix>
package org.eclipse.oomph.ostools;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.<fim_middle>","
 * Copyright (c) 2015 Eike Stepper (Loehne, Germany) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * Contributors:
 *    Eike Stepper - initial API and implementation
 */","*
 * @author <NAME>
 */"
"<fim_prefix>getParentFile();
    }

    if (element instanceof IAdaptable)
    {
      Object adapter = ((IAdaptable)element).getAdapter(File.class);
      return getDirectory(adapter);
    }

    return null;
  }

  private static File getWorkTree(Object element)
  {
    try
    {
      return GitHelper.getWorkTree(element);
    }
    catch (Throwable ex)
    {
      return null;
    }
  }

  /**<fim_suffix>
  private static final class GitHelper
  {
    public static File getWorkTree(Object element)
    {
      if (element instanceof Repository)
      {
        return ((Repository)element).getWorkTree();
      }

      if (element instanceof IAdaptable)
      {
        Object adapter = ((IAdaptable)element).getAdapter(Repository.class);
        return getWorkTree(adapter);
      }

     <fim_middle>","
   * @author Eike Stepper
   */",/
"<fim_prefix>.eclipse.core.commands.ExecutionException;
import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.ui.handlers.HandlerUtil;

import java.io.File;

/**<fim_suffix>
public abstract class AbstractLocationHandler extends AbstractHandler
{
  public AbstractLocationHandler()
  {
  }

  @Override
  public Object execute(ExecutionEvent event) throws ExecutionException
  {
    ISelection selection = HandlerUtil.getActiveMenuSelection(event);
    File location = getLocation(selection);

    try
    {
      execute(location);
    }
    catch (Exception ex<fim_middle>","
 * @author Eike Stepper
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>package mesquite.basic.aBasicIntro;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;/* ======================================================================== */public class aBasicIntro extends PackageIntro {	/*...................................................................................<fim_middle>"," Mesquite source code.  Copyright 1997-2009 W. Maddison and D. Maddison. Version 2.6, January 2009.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/","~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ * *                                                                                      * *                                                                                      * *        "
"<fim_prefix>  public boolean getHideable() {		return false;   	 } 	/*.................................................................................................................*/    	 public String getName() {		return ""Basic Utilities Package Introduction"";   	 }	/*.................................................................................................................*/	/**<fim_suffix> 	public String getPackageName(){ 		return ""Basic Utilities Package""; 	}	/*.................................................................................................................*/	/** Returns citation for a package of modules* 	public String getPackageCitation() 	 	NOT overridden because part of the standard Mesquite packages; hence uses standard Mesquite citation	/<fim_middle>"," Returns the name of the package of modules (e.g., ""Basic Mesquite Package"", ""Rhetenor"")*/", Returns the name of the package*
"<fim_prefix>.......................................................................*/	/** Returns citation for a package of modules* 	public String getPackageCitation() 	 	NOT overridden because part of the standard Mesquite packages; hence uses standard Mesquite citation	/*.................................................................................................................*/	/**<fim_suffix>	public boolean hasSplash(){ 		return false; 	}}<fim_middle>", Returns whether there is a splash banner*/, Returns splash screen for a package of modules
"<fim_prefix>............................................................................................*/	/** Returns the name of the package of modules (e.g., ""Basic Mesquite Package"", ""Rhetenor"")*/ 	public String getPackageName(){ 		return ""Basic Utilities Package""; 	}	/*.................................................................................................................*/	/**<fim_suffix>	/** Returns whether there is a splash banner*/	public boolean hasSplash(){ 		return false; 	}}<fim_middle>"," Returns citation for a package of modules* 	public String getPackageCitation() 	 	NOT overridden because part of the standard Mesquite packages; hence uses standard Mesquite citation	/*.................................................................................................................*/"," Returns the version of the package of modules (e.g., ""1.0"", ""1.1"")*/"
"<fim_prefix>/*<fim_suffix>
package cz.cvut.kbss.ontodriver.jena.connector;

import cz.cvut.kbss.ontodriver.Statement.StatementOntology;
import cz.cvut.kbss.ontodriver.jena.config.JenaConfigParam;
import cz.cvut.kbss.ontodriver.jena.exception.JenaDriverException;
import cz.cvut.kbss.ontodriver.jena.query.AbstractResultSet;
import org.apache.jena.query.Dataset;
import org.apache.jena.query.Query;
import org.apach<fim_middle>","
 * JOPA
 * Copyright (C) 2024 Czech Technical University in Prague
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */","*
 * Created by <NAME> on 5/25/14.
 */"
"<fim_prefix>or;

import cz.cvut.kbss.ontodriver.Statement.StatementOntology;
import cz.cvut.kbss.ontodriver.jena.config.JenaConfigParam;
import cz.cvut.kbss.ontodriver.jena.exception.JenaDriverException;
import cz.cvut.kbss.ontodriver.jena.query.AbstractResultSet;
import org.apache.jena.query.Dataset;
import org.apache.jena.query.Query;
import org.apache.jena.rdf.model.*;

import java.util.*;

/**<fim_suffix>
public class ChangeTrackingStorageConnector extends AbstractStorageConnector {

    private final AbstractStorageConnector centralConnector;

    private final boolean useDefaultAsUnion;

    private LocalModel localModel;

    ChangeTrackingStorageConnector(AbstractStorageConnector centralConnector) {
        super(centralConnector.configuration);
        this.centralConnector = cent<fim_middle>","
 * This connector tracks transactional changes and writes them on commit to the {@link SharedStorageConnector}.
 */","
 * This connector is used to store statements in a local model.
 * It is used to store statements"
"<fim_prefix>/**<fim_suffix>
package cern.c2mon.daq.common.conf.core;

import cern.c2mon.daq.common.conf.equipment.EquipmentConfigurationChangerHelper;
import cern.c2mon.daq.common.conf.equipment.IEquipmentConfigurationChanger;
import cern.c2mon.shared.common.process.IEquipmentConfiguration;
import cern.c2mon.shared.daq.config.ChangeReport;
import cern.c2mon.shared.daq.config.ChangeReport.CHANGE_STATE;
/**
 * Thi<fim_middle>","****************************************************************************
 * Copyright (C) 2010-2016 CERN. All rights not expressly granted are reserved.
 * 
 * This file is part of the CERN Control and Monitoring Platform 'C2MON'.
 * C2MON is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the license.
 * 
 * C2MON is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with C2MON. If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/","
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>******/
package cern.c2mon.daq.common.conf.core;

import cern.c2mon.daq.common.conf.equipment.EquipmentConfigurationChangerHelper;
import cern.c2mon.daq.common.conf.equipment.IEquipmentConfigurationChanger;
import cern.c2mon.shared.common.process.IEquipmentConfiguration;
import cern.c2mon.shared.daq.config.ChangeReport;
import cern.c2mon.shared.daq.config.ChangeReport.CHANGE_STATE;
/**<fim_suffix>
public class DefaultEquipmentConfigurationChanger implements IEquipmentConfigurationChanger {

    /**
     * Called after an update of the equipment configuration. Sets the state
     * of the report to REBOOT if any change is made which might affect
     * equipment specific things.
     * 
     * @param equipmentConfiguration The equipment configuration.
     * @param oldEquipmentC<fim_middle>","
 * This is a default implementation. of the equipment configuration changer.
 * It returns for every change which might affect the implementation
 * layer the status REBOOT.
 * 
 * @author Andreas Lang
 *
 */","
 * Default implementation of the {@link IEquipmentConfigurationChanger} interface.
 * 
 * @author <NAME>
 * @version 1.0
 * @since 1.0
 *"
"<fim_prefix>geReport;
import cern.c2mon.shared.daq.config.ChangeReport.CHANGE_STATE;
/**
 * This is a default implementation. of the equipment configuration changer.
 * It returns for every change which might affect the implementation
 * layer the status REBOOT.
 * 
 * @author Andreas Lang
 *
 */
public class DefaultEquipmentConfigurationChanger implements IEquipmentConfigurationChanger {

    /**<fim_suffix>
    @Override
    public void onUpdateEquipmentConfiguration(final IEquipmentConfiguration equipmentConfiguration, 
            final IEquipmentConfiguration oldEquipmentConfiguration,
            final ChangeReport changeReport) {
        if (EquipmentConfigurationChangerHelper.hasAddressChanged(equipmentConfiguration, oldEquipmentConfiguration)) {
            changeReport.appendErro<fim_middle>","
     * Called after an update of the equipment configuration. Sets the state
     * of the report to REBOOT if any change is made which might affect
     * equipment specific things.
     * 
     * @param equipmentConfiguration The equipment configuration.
     * @param oldEquipmentConfiguration The equipment configuration before the changes.
     * @param changeReport The report to fill.
     */","
     * {@inheritDoc}
     */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.equinox.ds.tests.tb1.impl;

import java.util.Dictionary;
import java.util.Vector;

import org.eclipse.equinox.ds.tests.tbc.BoundTester;
import org.osgi.framework.ServiceReference;

public class BindUnbind implements BoundTester {

	private Vector boundObjects = new Vector();

	public void bindSAComp(ServiceReference sr) {
		if (boundObjects.contains(sr)) {
		} else<fim_middle>","*****************************************************************************
 * Copyright (c) 1997-2009 by ProSyst Software GmbH
 * http://www.prosyst.com
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    ProSyst Software GmbH - initial API and implementation
 *******************************************************************************/","
 * Copyright (c) OSGi Alliance (2004, 2013). All Rights Reserved.
 * 
 * Implementation of certain elements of the OSGi Specification may be subject
 * to third party intellectual property rights, including without limitation,
 * patent rights (such a third party may or may not be a member of the OSGi
 * Alliance). The OSGi Alliance is not responsible and shall not be held
 * responsible in any manner for identifying or failing to identify any or all
 * such third party intellectual property rights.
 * 
 * This document and the information contained herein are provided on an"
"<fim_prefix>package com.github.augusto1982.betelgeuse.datastructures.graph;

/**<fim_suffix>
public class VertexImpl<T> implements Vertex<T>{
	
	private T data;
	
	public VertexImpl(T data){
		super();
		this.data = data;
	}

	@Override
	public T getData() {
		return this.data;
	}

	@Override
	public void setData(T data) {
		this.data = data;
		
	}

	
}
<fim_middle>","
 * 
 * @author Augusto Recordon
 *
 */","
 * 
 * @author augusto
 *
 * @param <"
"<fim_prefix>package de.jplag;

/**<fim_suffix>
public interface TokenType {
    /**
     * Returns the user-readable description of this token type.
     */
    String getDescription();

    /**
     * Indicates that no matches containing this token type shall be generated. Defaults to <code>false</code>.
     * @return <code>true</code> if token type is excluded from matching, otherwise <code>false</code>.
     */
    default Boo<fim_middle>","
 * Indicates the type of a token. Needs to be implemented for each language module to declare what types of tokens can
 * be extracted from code written in that language. A token type is expected to be stateless, thus it is recommended to
 * use an <code>enum</code> or <code>record</code>.
 * @see SharedTokenType
 */","
 * Defines the type of a token.
 *
 * @author <NAME>
 */"
"<fim_prefix>package de.jplag;

/**
 * Indicates the type of a token. Needs to be implemented for each language module to declare what types of tokens can
 * be extracted from code written in that language. A token type is expected to be stateless, thus it is recommended to
 * use an <code>enum</code> or <code>record</code>.
 * @see SharedTokenType
 */
public interface TokenType {
    /**<fim_suffix>
    String getDescription();

    /**
     * Indicates that no matches containing this token type shall be generated. Defaults to <code>false</code>.
     * @return <code>true</code> if token type is excluded from matching, otherwise <code>false</code>.
     */
    default Boolean isExcludedFromMatching() {
        return false;
    }
}
<fim_middle>","
     * Returns the user-readable description of this token type.
     */","
     * Returns the name of the token type.
     * @return the"
"<fim_prefix>dule to declare what types of tokens can
 * be extracted from code written in that language. A token type is expected to be stateless, thus it is recommended to
 * use an <code>enum</code> or <code>record</code>.
 * @see SharedTokenType
 */
public interface TokenType {
    /**
     * Returns the user-readable description of this token type.
     */
    String getDescription();

    /**<fim_suffix>
    default Boolean isExcludedFromMatching() {
        return false;
    }
}
<fim_middle>","
     * Indicates that no matches containing this token type shall be generated. Defaults to <code>false</code>.
     * @return <code>true</code> if token type is excluded from matching, otherwise <code>false</code>.
     */","
     * Returns the regular expression that matches this token type.
     */"
"<fim_prefix>;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;

/**<fim_suffix>
@Service
@Slf4j
public class BucketService
  implements
    PublishPublicNormPort,
    PublishPrivateNormPort,
    DeletePublicNormPort,
    DeletePrivateNormPort,
    DeleteAllPublicNormsPort,
    DeleteAllPrivateNormsPort,
    PublishChangelogsPort {

  @Value(""${otc.obs.private.bucket-name:private}"")
  private String privateBucketName;

  @Value(""${otc.obs.public.bucket-name:public<fim_middle>","
 * Service responsible for uploading, deleting, and managing {@link Norm} XML documents in designated private and public AWS S3 buckets.
 * This service provides methods to publish norms, delete norms (single or batch) and also for publishing changelogs.
 * <p>
 * Each bucket is associated with a dedicated S3 client, configured through Spring and injected based on
 * specific application profiles for staging, UAT, and production environments. The service uses AWS SDK
 * to interact with the S3 service and to manage document storage, utilizing XML transformation utilities
 * for document conversion and changelog management.
 *
 * <p>Configuration:</p>
 * <ul>
 *   <li>The bucket names are configured through application properties:
 *       <ul>
 *         <li>{@code otc.obs.private.bucket-name} for the private S3 bucket.</li>
 *         <li>{@code otc.obs.public.bucket-name} for the public S3 bucket.</li>
 *       </ul>
 *   </li>
 *   <li>S3 clients are injected with qualifiers {@code privateS3Client} and {@code publicS3Client}.</li>
 * </ul>
 *
 * <p>Usage:</p>
 * This service is used by invoking the appropriate methods to publish or delete norm documents, or managing the changelogs
 * In case of a failure during any operation (upload, delete, etc.), a {@link BucketException} is thrown, encapsulating the bucket name
 * and norm details.
 */","
 * Service for interacting with the S3 bucket.
 */"
"<fim_prefix>        .bucket(bucketName)
        .key(norm.getManifestationEli().toString())
        .build();
      s3Client.deleteObject(request);
    } catch (final Exception e) {
      throw new BucketException(
        BucketException.Operation.DELETE,
        bucketName,
        ""Key %s could not be deleted"".formatted(norm.getManifestationEli().toString()),
        e
      );
    }
  }

  /**<fim_suffix>
  private void deleteAllExceptChangelog(final S3Client s3Client, final String bucketName) {
    try {
      ListObjectsV2Request listRequest = ListObjectsV2Request.builder().bucket(bucketName).build();
      ListObjectsV2Response listResponse;

      do {
        listResponse = s3Client.listObjectsV2(listRequest);
        final List<ObjectIdentifier> objectsToDelete = new ArrayList<>(<fim_middle>","
   * Deletes all objects in the specified S3 bucket, except for those matching the changelog pattern.
   * The deletion process handles pagination automatically if there are more than 1,000 objects in the bucket.
   * <p>
   * AWS S3 allows a maximum of 1,000 keys to be processed per delete request. This method retrieves and deletes objects
   * in batches of up to 1,000 keys at a time, using pagination to handle more than 1,000 objects. If the number of objects
   * exceeds the 1,000-object limit, the method will continue deleting in subsequent requests until all objects have been deleted.
   *
   * @param s3Client the S3 client used to interact with the S3 service
   * @param bucketName the name of the S3 bucket where the objects are located
   */","
   * Delete all objects in the bucket except the changelog.
   *
   * @param s3Client                                                                                                                                                                   "
"<fim_prefix>package gui;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

/**<fim_suffix>
public class RightClickTimetableMenu extends MouseAdapter
{    
    protected TrainControlUI ui;
    
    public RightClickTimetableMenu(TrainControlUI u)
    {
        this.ui = u;
    }
    
    @Override
    public void mousePressed(MouseEvent e)
    {
        if (e.isPopupTrigger()) showPopup(e);
    }

    @Override
    public void mouseReleased(MouseEvent e)
  <fim_middle>","
 * This class represents a right-click menu with various utility functions displayed when any timetable entry is right-clicked
 * @author Adam
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>ocks;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.village.MerchantRecipe;
import net.minecraft.village.MerchantRecipeList;
import net.minecraft.world.World;

import java.util.Iterator;
import java.util.List;

/**<fim_suffix>
public class EntityAIAutotrader extends EntityAIBase {

    private EntityVillager villager;
    private BlockPos emeraldBlockPosition = null;
    private int counter = 0;

    /**
     * Main constructor
     *
     * @param theVillagerIn the villager that is attached to the AI task.
     */
    public EntityAIAutotrader(EntityVillager theVillagerIn) {
        this.villager = theVill<fim_middle>","
 * Automatically trading villagers, the villager will pickup items from the ground and trade the items in the same order of the trade list.
 * The order of trades can be adjusted by trading in the open GUI ones where last trade is placed first.
 */","
 * Created by <NAME> on 12/12/2016.
 */"
"<fim_prefix>Autotrader extends EntityAIBase {

    private EntityVillager villager;
    private BlockPos emeraldBlockPosition = null;
    private int counter = 0;

    /**
     * Main constructor
     *
     * @param theVillagerIn the villager that is attached to the AI task.
     */
    public EntityAIAutotrader(EntityVillager theVillagerIn) {
        this.villager = theVillagerIn;
    }

    /**<fim_suffix>
    @Override
    public boolean shouldExecute() {
        return true;
    }

    /**
     * AI update task that in this case only searches for a emerald block to throw items toward it when trading.
     */
    public void updateTask() {
        counter++;
        if (counter % 100 == 0) {
            findClosestEmeraldBlock();
        }
    }

    /**
     * Finds an emerald block t<fim_middle>","
     * Should excecute for all AI tasks, always true here.
     *
     * @return
     */","
     * Returns whether the EntityAIBase should begin execution.
     *
     * @return true if the EntityAIBase should begin"
"<fim_prefix>tructor
     *
     * @param theVillagerIn the villager that is attached to the AI task.
     */
    public EntityAIAutotrader(EntityVillager theVillagerIn) {
        this.villager = theVillagerIn;
    }

    /**
     * Should excecute for all AI tasks, always true here.
     *
     * @return
     */
    @Override
    public boolean shouldExecute() {
        return true;
    }

    /**<fim_suffix>
    public void updateTask() {
        counter++;
        if (counter % 100 == 0) {
            findClosestEmeraldBlock();
        }
    }

    /**
     * Finds an emerald block the trader will use to throw the items towards.
     */
    private void findClosestEmeraldBlock() {
        World worldIn = villager.getEntityWorld();
        BlockPos villagerpos = new BlockPos(villager);
  <fim_middle>","
     * AI update task that in this case only searches for a emerald block to throw items toward it when trading.
     */","
     * Updates the task
     */"
"<fim_prefix>e.
     *
     * @return
     */
    @Override
    public boolean shouldExecute() {
        return true;
    }

    /**
     * AI update task that in this case only searches for a emerald block to throw items toward it when trading.
     */
    public void updateTask() {
        counter++;
        if (counter % 100 == 0) {
            findClosestEmeraldBlock();
        }
    }

    /**<fim_suffix>
    private void findClosestEmeraldBlock() {
        World worldIn = villager.getEntityWorld();
        BlockPos villagerpos = new BlockPos(villager);
        for (BlockPos pos : BlockPos.getAllInBox(villagerpos.add(-3, -1, -3), villagerpos.add(3, 4, 3))) {
            if (worldIn.getBlockState(pos).getBlock() == Blocks.EMERALD_BLOCK) {
                emeraldBlockPosition = pos;
    <fim_middle>","
     * Finds an emerald block the trader will use to throw the items towards.
     */","
     * Finds the closest emerald block to the villager and stores it in the emeraldBlockPosition variable."
"<fim_prefix>;
        BlockPos villagerpos = new BlockPos(villager);
        for (BlockPos pos : BlockPos.getAllInBox(villagerpos.add(-3, -1, -3), villagerpos.add(3, 4, 3))) {
            if (worldIn.getBlockState(pos).getBlock() == Blocks.EMERALD_BLOCK) {
                emeraldBlockPosition = pos;
                return;
            }
        }
        emeraldBlockPosition = null;
    }

    /**<fim_suffix>
    public boolean updateEquipment(EntityItem itemEntity, MerchantRecipeList merchantList) {
        for (MerchantRecipe merchantrecipe : merchantList) {
            if (!merchantrecipe.isRecipeDisabled()) {
                ItemStack groundItems = itemEntity.getItem();
                ItemStack buyItem = merchantrecipe.getItemToBuy();
                if (groundItems.getItem() == buyIt<fim_middle>","
     * Update task that will make the villager search for items on the ground and throw items towards.
     *
     * @param itemEntity
     * @param merchantList
     * @return
     */","
     * Called when the villager is no longer in the world.
     */"
"<fim_prefix>-MathHelper.sin(f1 * 0.017453292F) * MathHelper.cos(f2 * 0.017453292F) * f);
        entityitem.motionZ = (double) (MathHelper.cos(f1 * 0.017453292F) * MathHelper.cos(f2 * 0.017453292F) * f);
        entityitem.motionY = (double) (-MathHelper.sin(f2 * 0.017453292F) * 0.3F + 0.1F);
        entityitem.setDefaultPickupDelay();
        villager.world.spawnEntity(entityitem);
    }

    /**<fim_suffix>
    public void addToFirstList(MerchantRecipeList buyingList, MerchantRecipe recipe, List<Integer> sortedTradeList) {
        int index = -1;
        for (int i = 0; i < buyingList.size(); i++) {
            MerchantRecipe b = buyingList.get(i);
            if (b.getItemToBuy().getItem().equals(recipe.getItemToBuy().getItem()) && b.getItemToSell().getItem().equals(recipe.getItemToSell<fim_middle>","
     * Adds the latest villager trade the player has trade to the a list that will be used to order the trades.
     *
     * @param buyingList
     * @param recipe
     * @param sortedTradeList
     */","
     * Adds a recipe to the first list of the given list.
     */"
"<fim_prefix>         index = i;
                break;
            }
        }
        if (index == -1) return;
        Iterator<Integer> iter = sortedTradeList.iterator();
        while (iter.hasNext()) {
            int i = iter.next();
            if (i == index) {
                iter.remove();
                break;
            }
        }
        sortedTradeList.add(0, index);
    }

    /**<fim_suffix>
    public void sortRepopulatedSortedList(MerchantRecipeList buyingList, MerchantRecipeList buyingListsorted, List<Integer> sortedTradeList) {
        if(buyingList == null) return;

        MerchantRecipeList copy = new MerchantRecipeList();
        copy.addAll(buyingList);
        buyingListsorted.clear();
        for (int i : sortedTradeList) {
            MerchantRecipe r = copy.g<fim_middle>","
     * Sortes the villager trades differently then in vanilla with the last trade first.
     *
     * @param buyingList
     * @param buyingListsorted
     * @param sortedTradeList
     */","
     * Sorts the list of sorted trades by the index of the recipe in the list of sorted trades
     * @param sortedTradeList
     */"
"<fim_prefix>       copy.addAll(buyingList);
        buyingListsorted.clear();
        for (int i : sortedTradeList) {
            MerchantRecipe r = copy.get(i);
            buyingListsorted.add(r);
        }
        for (MerchantRecipe r : buyingListsorted) {
            copy.remove(r);
        }
        for (MerchantRecipe r : copy) {
            buyingListsorted.add(r);
        }
    }

    /**<fim_suffix>
    public void setRecipiesForSaving(NBTTagCompound nbttagcompound, List<Integer> sortedTradeList) {
        NBTTagList nbttaglist = nbttagcompound.getTagList(""Recipes"", 10);

        for (int i = 0; i < nbttaglist.tagCount(); ++i) {
            NBTTagCompound nbt = nbttaglist.getCompoundTagAt(i);
            sortedTradeList.add(nbt.getInteger(""n""));
        }
    }

    /**
     * Sa<fim_middle>","
     * Reloads the NBT data of the sorted list for the trade order.
     *
     * @param nbttagcompound
     * @param sortedTradeList
     */","
     * Saves the list of recipes to NBT
     */"
"<fim_prefix>st
     */
    public void setRecipiesForSaving(NBTTagCompound nbttagcompound, List<Integer> sortedTradeList) {
        NBTTagList nbttaglist = nbttagcompound.getTagList(""Recipes"", 10);

        for (int i = 0; i < nbttaglist.tagCount(); ++i) {
            NBTTagCompound nbt = nbttaglist.getCompoundTagAt(i);
            sortedTradeList.add(nbt.getInteger(""n""));
        }
    }

    /**<fim_suffix>
    public NBTTagCompound getRecipiesForSaving(List<Integer> list) {
        NBTTagCompound nbttagcompound = new NBTTagCompound();
        NBTTagList nbttaglist = new NBTTagList();

        for (int i = 0; i < list.size(); ++i) {
            int index = list.get(i);
            NBTTagCompound num = new NBTTagCompound();
            num.setInteger(""n"", index);
            nbttaglist.ap<fim_middle>","
     * Saves the trade list into NBT for later saving to the villager
     *
     * @param list
     * @return
     */","
     * Gets the list of recipes for saving.
     */"
"<fim_prefix>illager will pickup items from the ground and trade the items in the same order of the trade list.
 * The order of trades can be adjusted by trading in the open GUI ones where last trade is placed first.
 */
public class EntityAIAutotrader extends EntityAIBase {

    private EntityVillager villager;
    private BlockPos emeraldBlockPosition = null;
    private int counter = 0;

    /**<fim_suffix>
    public EntityAIAutotrader(EntityVillager theVillagerIn) {
        this.villager = theVillagerIn;
    }

    /**
     * Should excecute for all AI tasks, always true here.
     *
     * @return
     */
    @Override
    public boolean shouldExecute() {
        return true;
    }

    /**
     * AI update task that in this case only searches for a emerald block to throw items toward<fim_middle>","
     * Main constructor
     *
     * @param theVillagerIn the villager that is attached to the AI task.
     */","
     * Creates a new AI task for the villager."
"<fim_prefix>              }

                    for (int i = 0; i < count; i++) {
                        villager.useRecipe(merchantrecipe);
                        dropItem(merchantrecipe.getItemToSell().copy());
                        groundItems.shrink(price);
                    }

                    return true;
                }
            }
        }
        return true;
    }

    /**<fim_suffix>
    private void dropItem(ItemStack itemstack) {
        if (itemstack.isEmpty())
            return;

        float f1 = villager.rotationYawHead;
        float f2 = villager.rotationPitch;

        if (emeraldBlockPosition != null) {
            double d0 = emeraldBlockPosition.getX() + 0.5D - villager.posX;
            double d1 = emeraldBlockPosition.getY() + 1.5D - (villager.posY<fim_middle>","
     * Drop item call when the villager succesfully finds an item to trade.
     *
     * @param itemstack
     */","
     * Returns the amount of gold the villager has.
     */"
"<fim_prefix>package io.mycat.jcache.net.command.binary;

import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import io.mycat.jcache.net.command.BinaryCommand;
import io.mycat.jcache.net.conn.Connection;


/**<fim_suffix>
public class BinaryIncrCommand implements BinaryCommand{
	
	private static final Logger logger = LoggerFactory.getLogger(BinaryIncrCommand.class);
	
	@Override
	public void execute(Connection conn) throws IOException {
		complete_incr_bin(conn);
	}
}
<fim_middle>","
	These commands will either add or remove the specified amount to the requested counter. 
	If you want to set the value of the counter with add/set/replace, 
	the objects data must be the ascii representation of the value and not the byte values of a 64 bit integer.
	
	If the counter does not exist, one of two things may happen:
	
	If the expiration value is all one-bits (0xffffffff), the operation will fail with NOT_FOUND.
	For all other expiration values, the operation will succeed by seeding the value for this key 
	with the provided initial value to expire with the provided expiration time. The flags will be set to zero.
	Decrementing a counter will never result in a ""negative value"" (or cause the counter to ""wrap""). 
	instead the counter is set to 0. Incrementing the counter may cause the counter to wrap.
       
 * @author liyanjun
 *
 */","
 * 增量命令
 * @author koqizhao
 *
 */"
"<fim_prefix>/**<fim_suffix>
package com.opendoorlogistics.components.reports;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swi<fim_middle>","*****************************************************************************
 * Copyright (c) 2014 Open Door Logistics (www.opendoorlogistics.com)
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at http://www.gnu.org/licenses/lgpl.txt
 ******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>).toLowerCase() + "")"");
				button.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						if (api != null) {
							api.executeInPlace(title, orientation == OrientationEnum.LANDSCAPE ? ReporterComponent.VIEW_BASIC_LANDSCAPE : ReporterComponent.VIEW_BASIC_PORTRAIT);
						}
					}
				});
				tools.add(button);
			}
		}

	}

	/**<fim_suffix>
	private Border createBorder(String title) {
		return BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5), BorderFactory.createTitledBorder(title));
	}

	public static void main(String[] args) {
		ShowPanel.showPanel(new ReporterPanel(null, new ReporterConfig()));
	}
}
<fim_middle>","
	 * @param title
	 * @return
	 */","
	 * Creates a border for the given title.
	 *"
"<fim_prefix>/*<fim_suffix>
package mesquite.lib;

import java.awt.*;
import java.math.*;


/* ======================================================================== */
/**An interface to be used by modules etc. so that employees can find the current tree in their context.*/
public interface TreeContext extends Context, Listable {
	public Tree getTree ();
	public String getContextName ();
	public void addTreeC<fim_middle>"," Mesquite source code.  Copyright 1997 and onward, W. Maddison and D. Maddison. 


Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. 
The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.
Perhaps with your help we can be more than a few, and make Mesquite better.

Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.
Mesquite's web site is http://mesquiteproject.org

This source code and its compiled class files are free and modifiable under the terms of 
GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)
*/","
 * Copyright (c) 2003-2011 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 */"
"<fim_prefix>THOUT ANY WARRANTY.
Mesquite's web site is http://mesquiteproject.org

This source code and its compiled class files are free and modifiable under the terms of 
GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)
*/
package mesquite.lib;

import java.awt.*;
import java.math.*;


/* ======================================================================== */
/**<fim_suffix>
public interface TreeContext extends Context, Listable {
	public Tree getTree ();
	public String getContextName ();
	public void addTreeContextListener (TreeContextListener listener);
	public void removeTreeContextListener (TreeContextListener listener);
	public MesquiteModule getTreeSource ();  //returns source of trees for context so that source can avoid using itself as context for<fim_middle>",An interface to be used by modules etc. so that employees can find the current tree in their context.*/,"
 * TreeContext is an interface for objects that can be used as contexts for
 * trees. "
"<fim_prefix>/**<fim_suffix>
package de.dlr.sc.virsat.fdir.core.markov;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import de.dlr.sc.virsat.fdir.core.metrics.FailLabelProvider.FailLabel;

/**
 * Abstract class for representing a state in a Markov structure
 * @author muel_s8
 *
 */
public class MarkovState {
	protected int index;
	private M<fim_middle>","*****************************************************************************
 * Copyright (c) 2008-2019 German Aerospace Center (DLR), Simulation and Software Technology, Germany.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/","
 * 
 * @author muel_s8
 *
 */"
"<fim_prefix>p://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
package de.dlr.sc.virsat.fdir.core.markov;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import de.dlr.sc.virsat.fdir.core.metrics.FailLabelProvider.FailLabel;

/**<fim_suffix>
public class MarkovState {
	protected int index;
	private MarkovStateType type = MarkovStateType.MARKOVIAN;
	private Map<FailLabel, Double> mapFailLabelToProb = new HashMap<>();
	// Sentinel value that ensures the correct index is returned when accessing the mttf values array
	protected int valuesIndex = -1;
	
	/**
	 * Gets the index of this state
	 * @return the index of th<fim_middle>","
 * Abstract class for representing a state in a Markov structure
 * @author muel_s8
 *
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>ateType type = MarkovStateType.MARKOVIAN;
	private Map<FailLabel, Double> mapFailLabelToProb = new HashMap<>();
	// Sentinel value that ensures the correct index is returned when accessing the mttf values array
	protected int valuesIndex = -1;
	
	/**
	 * Gets the index of this state
	 * @return the index of this state
	 */
	public int getIndex() {
		return index;
	}
	
	/**<fim_suffix>
	public void setValuesIndex(int valuesIndex) {
		this.valuesIndex = valuesIndex;
	}
	/**
	 * Gets the index of the mttf values array that corresponds to this state due to the mismatch between state index and array index when the state space is reduced
	 * @return the index of the mttf values array that corresponds to this state
	 */
	public int getValuesIndex() {
		if (values<fim_middle>","
	 * Sets the index of the mttf values array that corresponds to this state due to the mismatch between state index and array index when the state space is reduced
	 * @param valuesIndex the index of the mttf values array that corresponds to this state
	 */","
	 * Sets the index of this state
	 * @param index the index of this state
	 */"
"<fim_prefix>ting a state in a Markov structure
 * @author muel_s8
 *
 */
public class MarkovState {
	protected int index;
	private MarkovStateType type = MarkovStateType.MARKOVIAN;
	private Map<FailLabel, Double> mapFailLabelToProb = new HashMap<>();
	// Sentinel value that ensures the correct index is returned when accessing the mttf values array
	protected int valuesIndex = -1;
	
	/**<fim_suffix>
	public int getIndex() {
		return index;
	}
	
	/**
	 * Sets the index of the mttf values array that corresponds to this state due to the mismatch between state index and array index when the state space is reduced
	 * @param valuesIndex the index of the mttf values array that corresponds to this state
	 */
	public void setValuesIndex(int valuesIndex) {
		this.valuesIndex = v<fim_middle>","
	 * Gets the index of this state
	 * @return the index of this state
	 */","
	 * Creates a new Markov state
	 * @param index the index of the state in the Markov"
"<fim_prefix>ced
	 * @return the index of the mttf values array that corresponds to this state
	 */
	public int getValuesIndex() {
		if (valuesIndex == -1) {
			return getIndex();
		} else {
			return valuesIndex;
		}
	}
	
	/**
	 * Sets the type of this state
	 * @param type the new type of this state
	 */
	public void setType(MarkovStateType type) {
		this.type = type;
	}
	
	/**<fim_suffix>
	public MarkovStateType getType() {
		return type;
	}
	
	public boolean isMarkovian() {
		return type.equals(MarkovStateType.MARKOVIAN);
	}
	
	public boolean isNondet() {
		return type.equals(MarkovStateType.NONDET);
	}
	
	public boolean isProbabilisic() {
		return type.equals(MarkovStateType.PROBABILISTIC);
	}
	
	public Map<FailLabel, Double> getMapFailLabelToProb() <fim_middle>","
	 * Gets the type of this state
	 * @return the type of this state
	 */","
	 * Returns the type of this state
	 * @return the type of this state"
"<fim_prefix>**
	 * Gets the index of the mttf values array that corresponds to this state due to the mismatch between state index and array index when the state space is reduced
	 * @return the index of the mttf values array that corresponds to this state
	 */
	public int getValuesIndex() {
		if (valuesIndex == -1) {
			return getIndex();
		} else {
			return valuesIndex;
		}
	}
	
	/**<fim_suffix>
	public void setType(MarkovStateType type) {
		this.type = type;
	}
	
	/**
	 * Gets the type of this state
	 * @return the type of this state
	 */
	public MarkovStateType getType() {
		return type;
	}
	
	public boolean isMarkovian() {
		return type.equals(MarkovStateType.MARKOVIAN);
	}
	
	public boolean isNondet() {
		return type.equals(MarkovStateType.NONDET);
	}
<fim_middle>","
	 * Sets the type of this state
	 * @param type the new type of this state
	 */","
	 * Sets the index of the mttf values array that corresponds to this state due to the mismatch between state index"
"<fim_prefix>x() {
		return index;
	}
	
	/**
	 * Sets the index of the mttf values array that corresponds to this state due to the mismatch between state index and array index when the state space is reduced
	 * @param valuesIndex the index of the mttf values array that corresponds to this state
	 */
	public void setValuesIndex(int valuesIndex) {
		this.valuesIndex = valuesIndex;
	}
	/**<fim_suffix>
	public int getValuesIndex() {
		if (valuesIndex == -1) {
			return getIndex();
		} else {
			return valuesIndex;
		}
	}
	
	/**
	 * Sets the type of this state
	 * @param type the new type of this state
	 */
	public void setType(MarkovStateType type) {
		this.type = type;
	}
	
	/**
	 * Gets the type of this state
	 * @return the type of this state
	 */
	public Mar<fim_middle>","
	 * Gets the index of the mttf values array that corresponds to this state due to the mismatch between state index and array index when the state space is reduced
	 * @return the index of the mttf values array that corresponds to this state
	 */","
	 * Gets the index of the mttf values array that corresponds to this state due to the mismatch between state index and array index when the state space is reduced
	 * @return the index of the mttf values array that corresponds to this state
	 */"
"<fim_prefix>eType.NONDET);
	}
	
	public boolean isProbabilisic() {
		return type.equals(MarkovStateType.PROBABILISTIC);
	}
	
	public Map<FailLabel, Double> getMapFailLabelToProb() {
		return mapFailLabelToProb;
	}
	
	public Set<FailLabel> getFailLabels() {
		return mapFailLabelToProb.keySet();
	}
	
	@Override
	public String toString() {
		return String.valueOf(index);
	}
	
	/**<fim_suffix>
	public static final Comparator<MarkovState> MARKOVSTATE_COMPARATOR = new Comparator<MarkovState>() {
		public int compare(MarkovState state1, MarkovState state2) {
			return Integer.compare(state1.index, state2.index);
		};
	};
}
<fim_middle>","
	 * Standard comparator for MarkovStates.
	 * Usefule for sorting lists and ensuring deterministic behavior.
	 */","
	 * Comparator for MarkovState.
	 */"
"<fim_prefix>package org.whispersystems.signalservice.api.storage;

import java.util.Arrays;

/**<fim_suffix>
public final class StorageManifestKey implements StorageCipherKey {

  private static final int LENGTH = 32;

  private final byte[] key;

  StorageManifestKey(byte[] key) {
    if (key.length != LENGTH) throw new AssertionError();

    this.key = key;
  }

  @Override
  public byte[] serialize() {
    return key.clone();
  }

  @Override
  public boolean equals(Object o) {
    if (o <fim_middle>","
 * Key used to encrypt a manifest in the storage service.
 *
 * Created via {@link StorageKey#deriveManifestKey(long)}.
 */","
 * Created by zeganstyl on 11/7/14.
 */"
"<fim_prefix> of light sources.
     */
    private ArrayList<JLight> lights;
    /**
     * Should I render my light sources, or just use the current OpenGL light
     * state?
     */
    protected boolean lightingEnabled;
    /**
     * Some apps may have multiple cameras, which would cause recursion when
     * resetting the display.
     */
    protected boolean performingDisplayReset;
    /**<fim_suffix>
    public double worldModelView[] = new double[16];
    /**
     * The maximum number of lights that we expect OpenGL to support
     */
    public static int CHAI_MAXIMUM_OPENGL_LIGHT_COUNT = 8;

    public JWorld() {
        // set background properties
        backgroundColor = new JColorf();

        backgroundColor.set(0.0f, 0.0f, 0.0f, 1.0f);

        lightingEnabled = true;

 <fim_middle>","
     * It's useful to store the world's modelview matrix, for rendering stuff in
     * ""global"" coordinates.
     */","
     * The current OpenGL light state.
     */"
"<fim_prefix>tingEnabled;
    }

    /**
     * Create new texture and add it to textures list.
     *
     * @return
     */
    public JTexture2D newTexture() {
        // create new texture entity
        JTexture2D newTexture = new JTexture2D();

        // add texture to list
        textures.add(newTexture);

        // return pointer to new texture
        return (newTexture);
    }

    /**<fim_suffix>
    public void addTexture(JTexture2D aTexture) {
        // add texture to list
        textures.add(aTexture);
    }

    /**
     * Remove texture from textures list. Texture is not deleted from memory.
     *
     * @param aTexture
     * @return
     */
    public boolean removeTexture(JTexture2D aTexture) {
        // set iterator
        Iterator<JTexture2D> iter = textures.ite<fim_middle>","
     * Get a pointer to a texture by passing an index into my texture list.
     * public JTexture2D getTexture(int aIndex) { return textures.get(aIndex); }
     *
     * /**
     * Add texture to texture list.
     *
     * @param aTexture
     */","
     * Add texture to textures list. Texture is not added to memory.
     *
     * @param aTexture
     */"
"<fim_prefix>re in  list and remove it
        while (iter.hasNext()) {
            nextTexture = iter.next();
            if ((nextTexture) == aTexture) {
                // remove object from list
                textures.remove(nextTexture);

                // return success
                return (true);
            }
        }
        // operation failed
        return (false);
    }

    /**<fim_suffix>
    public boolean deleteTexture(JTexture2D aTexture) {
        // remove texture from list
        boolean result = removeTexture(aTexture);

        // if operation succeeds, delete object
        if (result) {
            aTexture = null;
        }

        // return result
        return (result);
    }

    /**
     * Delete all texture from memory.
     */
    public void delete<fim_middle>","
     * Delete texture from textures list and erase it from memory.
     *
     * @param aTexture
     * @return
     */","
     * Delete a texture from memory.
     *
     * @param aTexture the texture to delete.
     * @return true if the texture was deleted"
"<fim_prefix>JVector3d;

/**
 *
 * The JWorld object is the root for all scenegraph object in a scene.
 *
 * @author Francois Conti (original author)
 * @author Jairo Melo (java implementation)
 * @author Marcos Ramos (java implementation)
 */
public class JWorld extends JGenericObject {

    /**
     * Background color. Default color is black.
     */
    protected JColorf backgroundColor;
    /**<fim_suffix>
    protected ArrayList<JTexture2D> textures;
    /**
     * List of light sources.
     */
    private ArrayList<JLight> lights;
    /**
     * Should I render my light sources, or just use the current OpenGL light
     * state?
     */
    protected boolean lightingEnabled;
    /**
     * Some apps may have multiple cameras, which would cause recursion when
     * resetting the disp<fim_middle>","
     * List of textures.
     */","
     * List of textures.
     */"
"<fim_prefix>{
        backgroundColor = aColor;
    }

    /**
     * Get the background color used when rendering.
     */
    public final JColorf getBackgroundColor() {
        return (backgroundColor);
    }

    /**
     * Enable or disable the rendering of this world's light sources.
     */
    public void setLightingEnabled(boolean enable) {
        lightingEnabled = enable;
    }

    /**<fim_suffix>
    public boolean isLightingEnabled() {
        return lightingEnabled;
    }

    /**
     * Create new texture and add it to textures list.
     *
     * @return
     */
    public JTexture2D newTexture() {
        // create new texture entity
        JTexture2D newTexture = new JTexture2D();

        // add texture to list
        textures.add(newTexture);

        // return point<fim_middle>","
     * Returns the status of lighting(enabled or disabled)
     *
     * @return true if lighting is enabled, false otherwise
     */","
     * Get the rendering of this world's light sources.
     */"
"<fim_prefix>          aTexture = null;
        }

        // return result
        return (result);
    }

    /**
     * Delete all texture from memory.
     */
    public void deleteAllTextures() {
        // delete all textures
        for (int i = 0; i < textures.size(); i++) {
            textures.set(i, null);
        }

        // clear textures list
        textures.clear();
    }

    /**<fim_suffix>
    @Override
    public boolean computeCollisionDetection(JVector3d aSegmentPointA,
            JVector3d aSegmentPointB,
            JCollisionRecorder aRecorder,
            JCollisionSettings aSettings) {
        // temp variable
        boolean hit = false;
        JVector3d tSegmentPointA = new JVector3d(aSegmentPointA);
        JVector3d tSegmentPointB = new JVector3d(aSegmentP<fim_middle>","
     * Determine whether the given segment intersects a triangle in this world.
     * The segment is described by a start point /e a_segmentPointA and end
     * point /e a_segmentPointB. Collision detection functions of all children
     * of the world are called, which recursively call the collision detection
     * functions for all objects in this world. If there is more than one
     * collision, the one closest to a_segmentPointA is the one returned.
     *
     * @param aSegmentPointA
     * @param aSegmentPointB
     * @param aRecorder
     * @param aSettings
     * @return
     */","
     * Get the texture at the specified index.
     *
     * @param aIndex
     *            the index of the texture to get.
     * @return the texture at the specified index.
     */"
"<fim_prefix>formingDisplayReset = true;

        // This will pass the call on to any children I might have...
        JGenericObject jGenericObject = new JGenericObject();
        jGenericObject.onDisplayReset(aAffectChildren);

        performingDisplayReset = false;
    }

    /**
     * @return the mLights
     */
    public ArrayList<JLight> getLights() {
        return lights;
    }

    /**<fim_suffix>
    public void setLights(ArrayList<JLight> mLights) {
        this.lights = mLights;
    }
}
<fim_middle>","
     * @param mLights the mLights to set
     */","
     * @param mLights the mLights to set
     */"
"<fim_prefix>  }

            // check if a free ID was found
            if (free) {
                aLight.glLightID = lightId;
                found = true;
                break;
            }

            lightId++;
        }

        // finalize
        if (found) {
            lights.add(aLight);
            return (true);
        } else {
            return (false);
        }
    }

    /**<fim_suffix>
    public void addChild(JGenericObject obj) {
        if (obj == null) {
            return;
        }

        if (obj instanceof JMesh) {
            ((JMesh) obj).setParentWorld(this);
        }
        super.addChild(obj);
    }

    /**
     * Remove a light source from world.
     *
     * @param aLight the reference of the light to remove
     * @return false, only if the spec<fim_middle>","
     * Adds a new child to this world
     *
     * @param obj the new child
     */","
     * Remove a light source from world.
     *
     * @param aLight the reference of the light to remove
"
"<fim_prefix>color is black.
     */
    protected JColorf backgroundColor;
    /**
     * List of textures.
     */
    protected ArrayList<JTexture2D> textures;
    /**
     * List of light sources.
     */
    private ArrayList<JLight> lights;
    /**
     * Should I render my light sources, or just use the current OpenGL light
     * state?
     */
    protected boolean lightingEnabled;
    /**<fim_suffix>
    protected boolean performingDisplayReset;
    /**
     * It's useful to store the world's modelview matrix, for rendering stuff in
     * ""global"" coordinates.
     */
    public double worldModelView[] = new double[16];
    /**
     * The maximum number of lights that we expect OpenGL to support
     */
    public static int CHAI_MAXIMUM_OPENGL_LIGHT_COUNT = 8;

    public JWorld<fim_middle>","
     * Some apps may have multiple cameras, which would cause recursion when
     * resetting the display.
     */","
     * Should I perform a display reset before rendering?
     */"
"<fim_prefix>s;
import org.jchai3d.graphics.JColorf;
import org.jchai3d.graphics.JTexture2D;
import org.jchai3d.math.JVector3d;

/**
 *
 * The JWorld object is the root for all scenegraph object in a scene.
 *
 * @author Francois Conti (original author)
 * @author Jairo Melo (java implementation)
 * @author Marcos Ramos (java implementation)
 */
public class JWorld extends JGenericObject {

    /**<fim_suffix>
    protected JColorf backgroundColor;
    /**
     * List of textures.
     */
    protected ArrayList<JTexture2D> textures;
    /**
     * List of light sources.
     */
    private ArrayList<JLight> lights;
    /**
     * Should I render my light sources, or just use the current OpenGL light
     * state?
     */
    protected boolean lightingEnabled;
    /**
     * Some apps may h<fim_middle>","
     * Background color. Default color is black.
     */","
     * The background color of the scene.
     */"
"<fim_prefix> }

    /**
     * Get a pointer to a texture by passing an index into my texture list.
     * public JTexture2D getTexture(int aIndex) { return textures.get(aIndex); }
     *
     * /**
     * Add texture to texture list.
     *
     * @param aTexture
     */
    public void addTexture(JTexture2D aTexture) {
        // add texture to list
        textures.add(aTexture);
    }

    /**<fim_suffix>
    public boolean removeTexture(JTexture2D aTexture) {
        // set iterator
        Iterator<JTexture2D> iter = textures.iterator();
        JTexture2D nextTexture;

        // search texture in  list and remove it
        while (iter.hasNext()) {
            nextTexture = iter.next();
            if ((nextTexture) == aTexture) {
                // remove object from list
        <fim_middle>","
     * Remove texture from textures list. Texture is not deleted from memory.
     *
     * @param aTexture
     * @return
     */","
     * Remove texture from texture list.
     *
     * @param aTexture
     */"
"<fim_prefix>.jchai3d.scenegraph;

import java.util.ArrayList;
import java.util.Iterator;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLContext;
import org.jchai3d.collisions.JCollisionRecorder;
import org.jchai3d.collisions.JCollisionSettings;
import org.jchai3d.graphics.JColorf;
import org.jchai3d.graphics.JTexture2D;
import org.jchai3d.math.JVector3d;

/**<fim_suffix>
public class JWorld extends JGenericObject {

    /**
     * Background color. Default color is black.
     */
    protected JColorf backgroundColor;
    /**
     * List of textures.
     */
    protected ArrayList<JTexture2D> textures;
    /**
     * List of light sources.
     */
    private ArrayList<JLight> lights;
    /**
     * Should I render my light sources, or just use the c<fim_middle>","
 *
 * The JWorld object is the root for all scenegraph object in a scene.
 *
 * @author Francois Conti (original author)
 * @author Jairo Melo (java implementation)
 * @author Marcos Ramos (java implementation)
 */","
 * A world is a container for all the objects in the scene.
 * 
 * @author <NAME>
 */"
"<fim_prefix>otected boolean lightingEnabled;
    /**
     * Some apps may have multiple cameras, which would cause recursion when
     * resetting the display.
     */
    protected boolean performingDisplayReset;
    /**
     * It's useful to store the world's modelview matrix, for rendering stuff in
     * ""global"" coordinates.
     */
    public double worldModelView[] = new double[16];
    /**<fim_suffix>
    public static int CHAI_MAXIMUM_OPENGL_LIGHT_COUNT = 8;

    public JWorld() {
        // set background properties
        backgroundColor = new JColorf();

        backgroundColor.set(0.0f, 0.0f, 0.0f, 1.0f);

        lightingEnabled = true;

        performingDisplayReset = false;

        textures = new ArrayList<JTexture2D>();

        lights = new ArrayList<JLight>();
    }

<fim_middle>","
     * The maximum number of lights that we expect OpenGL to support
     */","
     * It's useful to store the world's projection matrix, for rendering stuff in
 "
"<fim_prefix> final float aBlue) {
        backgroundColor.set(aRed, aGreen, aBlue, 1.0f);
    }

    /**
     * Set the background color used when rendering. This really belongs in
     * cCamera or cViewport; it's a historical artifact that it lives here.
     *
     * @param aColor
     */
    public void setBackgroundColor(final JColorf aColor) {
        backgroundColor = aColor;
    }

    /**<fim_suffix>
    public final JColorf getBackgroundColor() {
        return (backgroundColor);
    }

    /**
     * Enable or disable the rendering of this world's light sources.
     */
    public void setLightingEnabled(boolean enable) {
        lightingEnabled = enable;
    }

    /**
     * Returns the status of lighting(enabled or disabled)
     *
     * @return true if lighting is enabled, <fim_middle>","
     * Get the background color used when rendering.
     */","
     * Get the background color used when rendering. This really belongs in
 "
"<fim_prefix> or disable the rendering of this world's light sources.
     */
    public void setLightingEnabled(boolean enable) {
        lightingEnabled = enable;
    }

    /**
     * Returns the status of lighting(enabled or disabled)
     *
     * @return true if lighting is enabled, false otherwise
     */
    public boolean isLightingEnabled() {
        return lightingEnabled;
    }

    /**<fim_suffix>
    public JTexture2D newTexture() {
        // create new texture entity
        JTexture2D newTexture = new JTexture2D();

        // add texture to list
        textures.add(newTexture);

        // return pointer to new texture
        return (newTexture);
    }

    /**
     * Get a pointer to a texture by passing an index into my texture list.
     * public JTexture2D getTexture<fim_middle>","
     * Create new texture and add it to textures list.
     *
     * @return
     */","
     * Returns the status of fog(enabled or disabled)
     *
     * @return true if fog is enabled,"
"<fim_prefix>belongs in
     * cCamera or cViewport; it's a historical artifact that it lives here.
     *
     * @param aColor
     */
    public void setBackgroundColor(final JColorf aColor) {
        backgroundColor = aColor;
    }

    /**
     * Get the background color used when rendering.
     */
    public final JColorf getBackgroundColor() {
        return (backgroundColor);
    }

    /**<fim_suffix>
    public void setLightingEnabled(boolean enable) {
        lightingEnabled = enable;
    }

    /**
     * Returns the status of lighting(enabled or disabled)
     *
     * @return true if lighting is enabled, false otherwise
     */
    public boolean isLightingEnabled() {
        return lightingEnabled;
    }

    /**
     * Create new texture and add it to textures list.
     *
 <fim_middle>","
     * Enable or disable the rendering of this world's light sources.
     */","
     * Set the status of lighting(enabled or disabled)
     *
 "
"<fim_prefix>/*<fim_suffix>
package org.jchai3d.scenegraph;

import java.util.ArrayList;
import java.util.Iterator;
import com.jogamp.opengl.GL;
import com.jogamp.opengl.GL2;
import com.jogamp.opengl.GLContext;
import org.jchai3d.collisions.JCollisionRecorder;
import org.jchai3d.collisions.JCollisionSettings;
import org.jchai3d.graphics.JColorf;
import org.jchai3d.graphics.JTexture2D;
import org.jchai3d.math.JVe<fim_middle>","
 *   This file is part of the JCHAI 3D visualization and haptics libraries.
 *   Copyright (C) 2010 by JCHAI 3D. All rights reserved.
 *
 *   This library is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License(""GPL"") version 2
 *   as published by the Free Software Foundation.
 *
 *   For using the JCHAI 3D libraries with software that can not be combined
 *   with the GNU GPL, and for taking advantage of the additional benefits
 *   of our support services, please contact CHAI 3D about acquiring a
 *   Professional Edition License.
 *
 *   project   <https://sourceforge.net/projects/jchai3d>
 */","*
 * @author <NAME>
 */"
"<fim_prefix>olor used when rendering. This really belongs in
     * cCamera or cViewport; it's a historical artifact that it lives here.
     *
     * @param aRed
     * @param aGreen
     * @param aBlue
     */
    public void setBackgroundColor(final float aRed,
            final float aGreen,
            final float aBlue) {
        backgroundColor.set(aRed, aGreen, aBlue, 1.0f);
    }

    /**<fim_suffix>
    public void setBackgroundColor(final JColorf aColor) {
        backgroundColor = aColor;
    }

    /**
     * Get the background color used when rendering.
     */
    public final JColorf getBackgroundColor() {
        return (backgroundColor);
    }

    /**
     * Enable or disable the rendering of this world's light sources.
     */
    public void setLightingEnabled(boolean <fim_middle>","
     * Set the background color used when rendering. This really belongs in
     * cCamera or cViewport; it's a historical artifact that it lives here.
     *
     * @param aColor
     */","
     * Set the background color used when rendering.
     */"
"<fim_prefix>t.hasNext()) {
            if ((nextLight.next()) == aLight) {
                // remove object from list
                lights.remove(nextLight);

                // return success
                return (true);
            }
        }
        // operation failed
        return (false);
    }

    public void removeLightSource(int index) {
        lights.remove(index);
    }

    /**<fim_suffix>
    public void setBackgroundColor(final float aRed,
            final float aGreen,
            final float aBlue) {
        backgroundColor.set(aRed, aGreen, aBlue, 1.0f);
    }

    /**
     * Set the background color used when rendering. This really belongs in
     * cCamera or cViewport; it's a historical artifact that it lives here.
     *
     * @param aColor
     */
    public<fim_middle>","
     * Set the background color used when rendering. This really belongs in
     * cCamera or cViewport; it's a historical artifact that it lives here.
     *
     * @param aRed
     * @param aGreen
     * @param aBlue
     */","
     * Set the background color used when rendering. This really belongs in
     * cCamera or cViewport; it's a historical artifact that it lives here.
     *
     * @param aColor
     */"
"<fim_prefix> gl.glGetDoublev(GL2.GL_MODELVIEW_MATRIX, worldModelView, 0);

        if (lightingEnabled) {
            // enable lighting
            gl.glEnable(GL2.GL_LIGHTING);

            // render light sources
            for (JLight light : lights) {
                light.renderLightSource();
            }
        } else {
            gl.glDisable(GL2.GL_LIGHTING);
        }

    }

    /**<fim_suffix>
    public JLight getLightSource(int index) {
        // Make sure this is a valid index
        if (index < 0 || (int) (index) >= getLights().size()) {
            return null;
        }

        // Return the light that we were supplied with by the creator of the world
        return lights.get(index);
    }

    /**
     * Called by the user or by the viewport when the world needs <fim_middle>","
     * Get access to a particular light source (between 0 and
     * MAXIMUM_OPENGL_LIGHT_COUNT-1). Returns a pointer to the requested light,
     * or zero if it's not available.
     *
     * @param index
     * @return
     */","
     * Returns the light source at the specified index.
     *
     * @param index The index of the light source to return.
     * @return The light source at the specified index.
     */"
"<fim_prefix>e.
 *
 * @author Francois Conti (original author)
 * @author Jairo Melo (java implementation)
 * @author Marcos Ramos (java implementation)
 */
public class JWorld extends JGenericObject {

    /**
     * Background color. Default color is black.
     */
    protected JColorf backgroundColor;
    /**
     * List of textures.
     */
    protected ArrayList<JTexture2D> textures;
    /**<fim_suffix>
    private ArrayList<JLight> lights;
    /**
     * Should I render my light sources, or just use the current OpenGL light
     * state?
     */
    protected boolean lightingEnabled;
    /**
     * Some apps may have multiple cameras, which would cause recursion when
     * resetting the display.
     */
    protected boolean performingDisplayReset;
    /**
     * It's useful to sto<fim_middle>","
     * List of light sources.
     */","
     * List of lights."
"<fim_prefix>entation)
 * @author Marcos Ramos (java implementation)
 */
public class JWorld extends JGenericObject {

    /**
     * Background color. Default color is black.
     */
    protected JColorf backgroundColor;
    /**
     * List of textures.
     */
    protected ArrayList<JTexture2D> textures;
    /**
     * List of light sources.
     */
    private ArrayList<JLight> lights;
    /**<fim_suffix>
    protected boolean lightingEnabled;
    /**
     * Some apps may have multiple cameras, which would cause recursion when
     * resetting the display.
     */
    protected boolean performingDisplayReset;
    /**
     * It's useful to store the world's modelview matrix, for rendering stuff in
     * ""global"" coordinates.
     */
    public double worldModelView[] = new double[16];
<fim_middle>","
     * Should I render my light sources, or just use the current OpenGL light
     * state?
     */","
     * List of objects.
     */"
"<fim_prefix> else {
            return (false);
        }
    }

    /**
     * Adds a new child to this world
     *
     * @param obj the new child
     */
    public void addChild(JGenericObject obj) {
        if (obj == null) {
            return;
        }

        if (obj instanceof JMesh) {
            ((JMesh) obj).setParentWorld(this);
        }
        super.addChild(obj);
    }

    /**<fim_suffix>
    public boolean removeLightSource(JLight aLight) {
        // set iterator
        Iterator<JLight> nextLight = lights.iterator();

        while (nextLight.hasNext()) {
            if ((nextLight.next()) == aLight) {
                // remove object from list
                lights.remove(nextLight);

                // return success
                return (true);
            }
 <fim_middle>","
     * Remove a light source from world.
     *
     * @param aLight the reference of the light to remove
     * @return false, only if the specified light is not on this world light
     * list
     */","
     * Removes a child from this world
     *
     * @param obj the child to remove
     */"
"<fim_prefix>e it from memory.
     *
     * @param aTexture
     * @return
     */
    public boolean deleteTexture(JTexture2D aTexture) {
        // remove texture from list
        boolean result = removeTexture(aTexture);

        // if operation succeeds, delete object
        if (result) {
            aTexture = null;
        }

        // return result
        return (result);
    }

    /**<fim_suffix>
    public void deleteAllTextures() {
        // delete all textures
        for (int i = 0; i < textures.size(); i++) {
            textures.set(i, null);
        }

        // clear textures list
        textures.clear();
    }

    /**
     * Determine whether the given segment intersects a triangle in this world.
     * The segment is described by a start point /e a_segmentPointA <fim_middle>","
     * Delete all texture from memory.
     */","
     * Delete all textures from this world."
"<fim_prefix>is world
        for (JGenericObject children : childrens) {
            hit = hit || children.computeCollisionDetection(tSegmentPointA,
                    tSegmentPointB,
                    aRecorder,
                    aSettings);
            continue;
        }

        // return whether there was a collision between the segment and this world
        return (hit);
    }

    /**<fim_suffix>
    @Override
    public void render(JChaiRenderMode renderMode) {
        GL2 gl = GLContext.getCurrent().getGL().getGL2();
        // Set up the CHAI openGL defaults (see cGenericObject::render())
        gl.glEnable(GL2.GL_LIGHTING);
        gl.glEnable(GL2.GL_DEPTH_TEST);
        gl.glEnable(GL2.GL_COLOR_MATERIAL);
        gl.glColorMaterial(GL2.GL_FRONT_AND_BACK, GL2.GL_AMBIENT_A<fim_middle>","
     * Render the world in OpenGL2.
     *
     * @param aRenderMode
     */","
     * Render the world.
     *
     * @param renderMode The render mode.
     */"
"<fim_prefix>'s not available.
     *
     * @param index
     * @return
     */
    public JLight getLightSource(int index) {
        // Make sure this is a valid index
        if (index < 0 || (int) (index) >= getLights().size()) {
            return null;
        }

        // Return the light that we were supplied with by the creator of the world
        return lights.get(index);
    }

    /**<fim_suffix>
    @Override
    public void onDisplayReset(final boolean aAffectChildren) {
        // Prevent the world from getting reset multiple times when there are multiple cameras
        if (performingDisplayReset) {
            return;
        }

        performingDisplayReset = true;

        // This will pass the call on to any children I might have...
        JGenericObject jGenericObje<fim_middle>","
     * Called by the user or by the viewport when the world needs to have
     * textures and display lists reset (e.g. after a switch to or from
     * fullscreen).
     *
     * @param aAffectChildren
     */","
     * This is called when the display is reset.
     *
     * @param aAffectChildren
     */"
"<fim_prefix>blic static int CHAI_MAXIMUM_OPENGL_LIGHT_COUNT = 8;

    public JWorld() {
        // set background properties
        backgroundColor = new JColorf();

        backgroundColor.set(0.0f, 0.0f, 0.0f, 1.0f);

        lightingEnabled = true;

        performingDisplayReset = false;

        textures = new ArrayList<JTexture2D>();

        lights = new ArrayList<JLight>();
    }

    /**<fim_suffix>
    public boolean addLightSource(JLight aLight) {
        // check if number of lights already equal to 8.
        if (lights.size() >= CHAI_MAXIMUM_OPENGL_LIGHT_COUNT) {
            return (false);
        }

        // search for a free ID number
        int lightId = GL2.GL_LIGHT0;
        boolean found = false;

        while (lightId < GL2.GL_LIGHT0 + CHAI_MAXIMUM_OPENGL_LIGHT_C<fim_middle>","
     * Add an OpenGL light source to the world. A maximum of eight light sources
     * can be registered. For each registered light source, an OpenGL lightID
     * number is defined
     *
     * @param aLight
     * @return
     */","
     * Adds a texture to the world.
     *
     * @param aTexture the texture to add.
     * @return true if the texture was added, false otherwise.
     */"
"<fim_prefix>package com.bryansharp.tools.parseapk.entity.data;

/**<fim_suffix>
public class AnnotationNV {
    public String name;
    public Object value;

    @Override
    public String toString() {
        return ""\n\t\t\t\t\t\t\t\tAnnotationNV{"" +
                ""name='"" + name + '\'' +
                "", value="" + value +
                '}';
    }
}
<fim_middle>","
 * Created by bushaopeng on 17/4/5.
 */","
 * Created by bryan on 2017/7/18.
 */"
"<fim_prefix>k;
import com.ldtteam.domumornamentum.util.Constants;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

/**<fim_suffix>
public final class ModBlockEntityTypes
{
    public static final DeferredRegister<BlockEntityType<?>> BLOCK_ENTITIES = DeferredRegister.create(ForgeRegistries.BLOCK_ENTITY_TYPES, Constants.MOD_ID);

    @SuppressWarnings({""SuspiciousToArrayCall"", ""ConstantConditions""}) //Not really true.
    public static RegistryObject<BlockEntityType<BlockEntity>> MATERIALLY_TEXTURED = BLOCK_ENTITIE<fim_middle>","
 * Class to create the modBlocks.
 * References to the blocks can be made here
 */","
 * Contains all the block entity types.
 *
 * @author <NAME>
 */"
"<fim_prefix>y>> MATERIALLY_TEXTURED = BLOCK_ENTITIES.register(Constants.BlockEntityTypes.MATERIALLY_RETEXTURABLE,
      () -> BlockEntityType.Builder.of((BlockEntityType.BlockEntitySupplier<BlockEntity>) MateriallyTexturedBlockEntity::new,
        ForgeRegistries.BLOCKS.getValues().stream().filter(IMateriallyTexturedBlock.class::isInstance).toArray(Block[]::new)
      ).build(null)
    );

    /**<fim_suffix>
    private ModBlockEntityTypes()
    {
    }
}
<fim_middle>","
     * Private constructor to hide the implicit public one.
     */","
     * Registers all block entity types.
     */"
"<fim_prefix>/*<fim_suffix>

package cz.cvut.felk.cig.jcop.problem.tspfast;
import java.util.ArrayList;

/**
 * TSPMetainfoStatic - class for calculation of static metainformation for TSP problem.
 *
 * @author oleg.kovarik@gmail.com
 */
public class TSPMetainfoStatic {
    ArrayList<Double[]> coordinates;
    int[][] distances;
    boolean available = false;  // statistics are available

    // statistics
    d<fim_middle>","
 * Copyright Â© 2010 by Oleg Kovarik. All Rights Reserved
 */","*
 * TSPMetainfoStatic - class for calculation of static metainformation for"
"<fim_prefix>/*
 * Copyright Â© 2010 by Oleg Kovarik. All Rights Reserved
 */

package cz.cvut.felk.cig.jcop.problem.tspfast;
import java.util.ArrayList;

/**<fim_suffix>
public class TSPMetainfoStatic {
    ArrayList<Double[]> coordinates;
    int[][] distances;
    boolean available = false;  // statistics are available

    // statistics
    double average;     // average distance between cities
    double variance;    // variance of distances between cities
    long edgesCount;    // number of edges between cities (usually n*n)
    double variancen<fim_middle>","
 * TSPMetainfoStatic - class for calculation of static metainformation for TSP problem.
 *
 * @author oleg.kovarik@gmail.com
 */","
 * This class contains meta information about TSP problem.
 *
 * @author Oleg Kovarik
 * @version 1.0
 */"
"<fim_prefix>/*<fim_suffix>

package etomica.api;

public interface ISimulationListener {

    public void simulationBoxAdded(ISimulationBoxEvent e);
    
    public void simulationBoxRemoved(ISimulationBoxEvent e);
    
    public void simulationSpeciesAdded(ISimulationSpeciesEvent e);
    
    public void simulationSpeciesRemoved(ISimulationSpeciesEvent e);
    
    public void simulationSpeciesIndexChanged(IS<fim_middle>"," This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */","*
 * Interface for listening to changes in simulation.
 * 
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package cz.cvut.kbss.jopa.owl2java.cli;

import cz.cvut.kbss.jopa.owl2java.config.Defaults;

public enum PropertiesType {
    object, string;

    public static PropertiesType fromParam(Object param) {
        return valueOf(param != null ? param.toString() : Defaults.PROPERTIES_TYPE);
    }
}
<fim_middle>","
 * JOPA
 * Copyright (C) 2024 Czech Technical University in Prague
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */","
 * Copyright 2014 <NAME>.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>sf.core.base.AbstractBinaryAction;
import de.fraunhofer.fokus.lsf.core.base.BinaryArgument;
import de.fraunhofer.fokus.upnp.util.CollectionHelper;
import de.fraunhofer.fokus.upnp.util.KeyValueVector;
import de.fraunhofer.fokus.upnp.util.Portable;
import de.fraunhofer.fokus.upnp.util.exceptions.ActionFailedException;
import de.fraunhofer.fokus.upnp.util.network.BinaryMessageObject;

/**<fim_suffix>
public class BinaryCPAction extends AbstractBinaryAction
{

  /** Associated service. */
  private BinaryCPService binaryCPService;

  /**
   * Creates a new instance of BinaryCPAction.java
   * 
   * @param actionName
   * @param actionID
   * @param argumentList
   */
  public BinaryCPAction(String actionName, int actionID, Vector argumentList)
  {
    super(actionName, actionID, ar<fim_middle>","
 * This class encapsulates a remote view on a binary UPnP action.
 * 
 * @author Alexander Koenig
 * 
 * 
 */","
 * This class represents a UPnP Binary Control Point action.
 * 
 * @author <NAME>
 */"
"<fim_prefix> * 
   * @param actionName
   * @param actionID
   * @param argumentList
   */
  public BinaryCPAction(String actionName, int actionID, Vector argumentList)
  {
    super(actionName, actionID, argumentList);
  }

  /**
   * Retrieves the binaryCPService.
   * 
   * @return The binaryCPService
   */
  public BinaryCPService getBinaryCPService()
  {
    return binaryCPService;
  }

  /**<fim_suffix>
  public void setBinaryCPService(BinaryCPService binaryCPService)
  {
    this.binaryCPService = binaryCPService;
  }

  /** Sends this action to the remote binary UPnP device. */
  public void invokeAction() throws ActionFailedException
  {
    ActionFailedException actionFailedException = null;
    try
    {
      byte[] data = toByteArrayForAction();

      BinaryMessageObject resp<fim_middle>","
   * Sets the binaryCPService.
   * 
   * @param binaryCPService
   *          The new value for binaryCPService
   */","
   * Sets the binaryCPService.
   * 
   * @param binaryCPService
   *        The binaryCPService to set
   */"
"<fim_prefix>      BinaryUPnPConstants.createActionFailedException(BinaryUPnPConstants.ResultTypeNoResponseMessage);
      throw actionFailedException;
    } catch (Exception e)
    {
      Portable.println(""Exception: "" + e.getMessage());
    }
    if (actionFailedException != null)
    {
      throw actionFailedException;
    }
    throw new ActionFailedException(501, ""Action failed"");
  }

  /**<fim_suffix>
  public byte[] toByteArrayForAction()
  {
    try
    {
      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

      // calculate action size
      for (int i = 0; i < argumentList.size(); i++)
      {
        BinaryArgument currentArgument = (BinaryArgument)argumentList.elementAt(i);
        if (currentArgument.isInArgument())
        {
          // add by<fim_middle>"," Returns the byte array description for this action, but without the EndOfPacket tupel. */","
   * @return the argumentList
   */"
"<fim_prefix>np.util.KeyValueVector;
import de.fraunhofer.fokus.upnp.util.Portable;
import de.fraunhofer.fokus.upnp.util.exceptions.ActionFailedException;
import de.fraunhofer.fokus.upnp.util.network.BinaryMessageObject;

/**
 * This class encapsulates a remote view on a binary UPnP action.
 * 
 * @author Alexander Koenig
 * 
 * 
 */
public class BinaryCPAction extends AbstractBinaryAction
{

  /**<fim_suffix>
  private BinaryCPService binaryCPService;

  /**
   * Creates a new instance of BinaryCPAction.java
   * 
   * @param actionName
   * @param actionID
   * @param argumentList
   */
  public BinaryCPAction(String actionName, int actionID, Vector argumentList)
  {
    super(actionName, actionID, argumentList);
  }

  /**
   * Retrieves the binaryCPService.
   * 
   * @return The binary<fim_middle>", Associated service. */,"
   *"
"<fim_prefix>/**<fim_suffix>
package de.fraunhofer.fokus.lsf.core.control_point;

import java.io.ByteArrayOutputStream;
import java.util.Vector;

import de.fraunhofer.fokus.lsf.core.BinaryUPnPConstants;
import de.fraunhofer.fokus.lsf.core.base.AbstractBinaryAction;
import de.fraunhofer.fokus.lsf.core.base.BinaryArgument;
import de.fraunhofer.fokus.upnp.util.CollectionHelper;
import de.fraunhofer.fokus.upnp.util.K<fim_middle>","
* 
* Copyright (C) 2004-2008 FhG Fokus
*
* This file is part of the FhG Fokus UPnP stack - an open source UPnP implementation
* with some additional features
*
* You can redistribute the FhG Fokus UPnP stack and/or modify it
* under the terms of the GNU General Public License Version 3 as published by
* the Free Software Foundation.
*
* For a license to use the FhG Fokus UPnP stack software under conditions
* other than those described here, or to purchase support for this
* software, please contact Fraunhofer FOKUS by e-mail at the following
* addresses:
*   upnpstack@fokus.fraunhofer.de
*
* The FhG Fokus UPnP stack is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, see <http://www.gnu.org/licenses/>
* or write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
*
*/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>ction extends AbstractBinaryAction
{

  /** Associated service. */
  private BinaryCPService binaryCPService;

  /**
   * Creates a new instance of BinaryCPAction.java
   * 
   * @param actionName
   * @param actionID
   * @param argumentList
   */
  public BinaryCPAction(String actionName, int actionID, Vector argumentList)
  {
    super(actionName, actionID, argumentList);
  }

  /**<fim_suffix>
  public BinaryCPService getBinaryCPService()
  {
    return binaryCPService;
  }

  /**
   * Sets the binaryCPService.
   * 
   * @param binaryCPService
   *          The new value for binaryCPService
   */
  public void setBinaryCPService(BinaryCPService binaryCPService)
  {
    this.binaryCPService = binaryCPService;
  }

  /** Sends this action to the remote binary UPnP device. */<fim_middle>","
   * Retrieves the binaryCPService.
   * 
   * @return The binaryCPService
   */","
   * Gets the binaryCPService.
   * 
   * @return Returns the binaryCPService.
 "
"<fim_prefix>CPService.
   * 
   * @return The binaryCPService
   */
  public BinaryCPService getBinaryCPService()
  {
    return binaryCPService;
  }

  /**
   * Sets the binaryCPService.
   * 
   * @param binaryCPService
   *          The new value for binaryCPService
   */
  public void setBinaryCPService(BinaryCPService binaryCPService)
  {
    this.binaryCPService = binaryCPService;
  }

  /**<fim_suffix>
  public void invokeAction() throws ActionFailedException
  {
    ActionFailedException actionFailedException = null;
    try
    {
      byte[] data = toByteArrayForAction();

      BinaryMessageObject response =
        getBinaryCPService().getBinaryCPDevice().getBinaryControlPoint().invokeAction(this, data);

      // Portable.println(DateTimeHelper.formatCurrentDateForDebug() + "":<fim_middle>", Sends this action to the remote binary UPnP device. */,"
   * Invokes the action.
  "
"<fim_prefix>port de.fraunhofer.fokus.upnp.util.exceptions.ActionFailedException;
import de.fraunhofer.fokus.upnp.util.network.BinaryMessageObject;

/**
 * This class encapsulates a remote view on a binary UPnP action.
 * 
 * @author Alexander Koenig
 * 
 * 
 */
public class BinaryCPAction extends AbstractBinaryAction
{

  /** Associated service. */
  private BinaryCPService binaryCPService;

  /**<fim_suffix>
  public BinaryCPAction(String actionName, int actionID, Vector argumentList)
  {
    super(actionName, actionID, argumentList);
  }

  /**
   * Retrieves the binaryCPService.
   * 
   * @return The binaryCPService
   */
  public BinaryCPService getBinaryCPService()
  {
    return binaryCPService;
  }

  /**
   * Sets the binaryCPService.
   * 
   * @param binaryCPService
   *        <fim_middle>","
   * Creates a new instance of BinaryCPAction.java
   * 
   * @param actionName
   * @param actionID
   * @param argumentList
   */","
   * Constructor.
   * 
   * @param actionName
   *          The name of the action.
   * @param actionID
"
"<fim_prefix>c void draw (float time)
	{
		animation.apply (form, time);
		appearance.draw (form);
	}

	public boolean finished (float time)
	{
		return animation.finished (time);
	}
}

////////////////////////////////////////////////////////////////////////////////
// SVG Form. Subclass and set entityNames to use.
////////////////////////////////////////////////////////////////////////////////

/*<fim_suffix>
class Appearance
{
	int col;

	Appearance ()
	{
		col = color (random (255), random (255), random (255));
	}	

	public void draw (Form f)
	{
		fill (col);
		f.draw ();
	}
}
// (:clashes ""outline"" ""burst_3d"" ""cluster_3d"" ""grow_3d"")

String MODE = P3D;

int KIND_COUNT = 3;

class Form
{
	float size;
	float x;
	float y;
	int kind;

	Form ()
	{
		kind = PApplet.parseInt (random (KIND_COUN<fim_middle>","

SVG[] entities = null;
PApplet SvgParent = this;

class SvgForm
{
	String[] entityNames = null;
	float x;
	float y;
	float size;

	Svg entity;

	SvgEntity ()
	{
		if (entities == null)
		{
			loadEntitiesSvg ();
		}
		
		entity = entities [int (random (entities.length))];
	}

	void loadEntitiesSvg ()
	{
		entities = new Entities [entityNames.length];
		for (int i = 0; i < entityNames.length; i++)
		{
			entities.i = new SVG (SvgParent, names[i] + "".svg"")
			entities.drawMode (CENTER);
			entities.ignoreStyles ();
		}
	}

	void draw ()
	{
		entity draw (x, y, size, size);	
	}
}
*/","*
 * SVG Form. Subclass and set entityNames to use.
 */"
"<fim_prefix>textAware;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextClosedEvent;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;

import java.util.Map;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

/**<fim_suffix>
@Slf4j
public class ContextShutdown implements ApplicationListener<ContextClosedEvent>, ApplicationContextAware {

    private ApplicationContext applicationContext;
    private GracefulProperties gracefulProperties;

    public ContextShutdown(GracefulProperties gracefulProperties) {
        this.gracefulProperties = gracefulProperties;
    }

    @Override
    public void setApplica<fim_middle>","
 * Created by liaomengge on 2019/2/22.
 */","
 * @author <NAME>
 */"
"<fim_prefix> boolean add(long element);

    /**
     * Adds each of the specified {@code elements} to this collection if not already there
     * @param elements    elements to add
     * @return {@code true} if collection modified, {@code false} otherwise
     */
    boolean addAll(long[] elements);

    /**
     * {@link this#addAll(long[])
     */
    boolean addAll(LongSet elements);

    /**<fim_suffix>
    boolean remove(long element);

    /**
     * removes all of the specified {@code elements} from this collection
     * @param elements    elements to remove
     * @return {@code true} if collection was changed, {@code false} otherwise
     */
    boolean removeAll(long[] elements);

    /**
     * {@link this#removeAll(long[])}
     */
    boolean removeAll(LongSet elements);

 <fim_middle>","
     * Removes the specified {@code element} from this collection if it was found there
     * @param element    element to remove
     * @return {@code true} if {@code element} was removed, {@code false} if there's no such element
     */","
     * {@link this#addAll(long[])}
     */"
"<fim_prefix>package net.aquadc.blitz;

/**
 * Created by mike on 25.01.17
 */

public interface MutableLongSet extends LongSet {

    /**<fim_suffix>
    boolean add(long element);

    /**
     * Adds each of the specified {@code elements} to this collection if not already there
     * @param elements    elements to add
     * @return {@code true} if collection modified, {@code false} otherwise
     */
    boolean addAll(long[] elements);

    /**
     * {@link this#addAll(long[])
     */
    boolean addAll(LongSet elements);

   <fim_middle>","
     * Adds the specified {@code element} to this collection if it is not already there.
     * @param element    element to add
     * @return {@code true} if {@code element} was added, {@code false} if it is already in this collection
     */","
     * Adds the specified element to this collection if not already there
     * @param element    element to add
     * @return {@code true} if collection modified, {@code false} otherwise
     */"
"<fim_prefix> {@code element} was added, {@code false} if it is already in this collection
     */
    boolean add(long element);

    /**
     * Adds each of the specified {@code elements} to this collection if not already there
     * @param elements    elements to add
     * @return {@code true} if collection modified, {@code false} otherwise
     */
    boolean addAll(long[] elements);

    /**<fim_suffix>
    boolean addAll(LongSet elements);

    /**
     * Removes the specified {@code element} from this collection if it was found there
     * @param element    element to remove
     * @return {@code true} if {@code element} was removed, {@code false} if there's no such element
     */
    boolean remove(long element);

    /**
     * removes all of the specified {@code elements} from<fim_middle>","
     * {@link this#addAll(long[])
     */","
     * Adds each of the specified {@code elements} to this collection if not"
"<fim_prefix>ments);

    /**
     * {@link this#addAll(long[])
     */
    boolean addAll(LongSet elements);

    /**
     * Removes the specified {@code element} from this collection if it was found there
     * @param element    element to remove
     * @return {@code true} if {@code element} was removed, {@code false} if there's no such element
     */
    boolean remove(long element);

    /**<fim_suffix>
    boolean removeAll(long[] elements);

    /**
     * {@link this#removeAll(long[])}
     */
    boolean removeAll(LongSet elements);

    /**
     * Leaves intersection of {@code this} and {@code elements}, removes any other elements
     * @param elements    elements to retain
     * @return {@code true} if collection was changed, {@code false} otherwise
     */
    boolean retain<fim_middle>","
     * removes all of the specified {@code elements} from this collection
     * @param elements    elements to remove
     * @return {@code true} if collection was changed, {@code false} otherwise
     */","
     * {@link this#remove(long)}
     */"
"<fim_prefix>oolean remove(long element);

    /**
     * removes all of the specified {@code elements} from this collection
     * @param elements    elements to remove
     * @return {@code true} if collection was changed, {@code false} otherwise
     */
    boolean removeAll(long[] elements);

    /**
     * {@link this#removeAll(long[])}
     */
    boolean removeAll(LongSet elements);

    /**<fim_suffix>
    boolean retainAll(long[] elements);

    /**
     * {@link this#retainAll(long[])}
     */
    boolean retainAll(LongSet elements);

    /**
     * Returns a mutable iterator over this collection.
     * @return a mutable iterator over this collection
     */
    @Override
    MutableLongIterator iterator();

    /**
     * Adds {@code element}, if not in collection, removes it ot<fim_middle>","
     * Leaves intersection of {@code this} and {@code elements}, removes any other elements
     * @param elements    elements to retain
     * @return {@code true} if collection was changed, {@code false} otherwise
     */","
     * {@link this#removeAll(long[])}
     */"
"<fim_prefix>elements);

    /**
     * {@link this#removeAll(long[])}
     */
    boolean removeAll(LongSet elements);

    /**
     * Leaves intersection of {@code this} and {@code elements}, removes any other elements
     * @param elements    elements to retain
     * @return {@code true} if collection was changed, {@code false} otherwise
     */
    boolean retainAll(long[] elements);

    /**<fim_suffix>
    boolean retainAll(LongSet elements);

    /**
     * Returns a mutable iterator over this collection.
     * @return a mutable iterator over this collection
     */
    @Override
    MutableLongIterator iterator();

    /**
     * Adds {@code element}, if not in collection, removes it otherwise.
     * @param element    element to add or remove
     * @return Î”: {@code -1} if rem<fim_middle>","
     * {@link this#retainAll(long[])}
     */","
     * {@link this#retainAll(long[])}
     */"
"<fim_prefix> true} if collection was changed, {@code false} otherwise
     */
    boolean retainAll(long[] elements);

    /**
     * {@link this#retainAll(long[])}
     */
    boolean retainAll(LongSet elements);

    /**
     * Returns a mutable iterator over this collection.
     * @return a mutable iterator over this collection
     */
    @Override
    MutableLongIterator iterator();

    /**<fim_suffix>
    int addOrRemove(long element);
}
<fim_middle>","
     * Adds {@code element}, if not in collection, removes it otherwise.
     * @param element    element to add or remove
     * @return Î”: {@code -1} if removed, {@code +1} if added
     */","
     * Returns a mutable list iterator over this collection.
     * @return a mutable list iterator over this collection
     */"
"<fim_prefix>tz;

/**
 * Created by mike on 25.01.17
 */

public interface MutableLongSet extends LongSet {

    /**
     * Adds the specified {@code element} to this collection if it is not already there.
     * @param element    element to add
     * @return {@code true} if {@code element} was added, {@code false} if it is already in this collection
     */
    boolean add(long element);

    /**<fim_suffix>
    boolean addAll(long[] elements);

    /**
     * {@link this#addAll(long[])
     */
    boolean addAll(LongSet elements);

    /**
     * Removes the specified {@code element} from this collection if it was found there
     * @param element    element to remove
     * @return {@code true} if {@code element} was removed, {@code false} if there's no such element
     */
    boolean <fim_middle>","
     * Adds each of the specified {@code elements} to this collection if not already there
     * @param elements    elements to add
     * @return {@code true} if collection modified, {@code false} otherwise
     */","
     * {@link this#addAll(long[])
     */"
"<fim_prefix>package net.aquadc.blitz;

/**<fim_suffix>

public interface MutableLongSet extends LongSet {

    /**
     * Adds the specified {@code element} to this collection if it is not already there.
     * @param element    element to add
     * @return {@code true} if {@code element} was added, {@code false} if it is already in this collection
     */
    boolean add(long element);

    /**
     * Adds each of the specified {@code e<fim_middle>","
 * Created by mike on 25.01.17
 */","
 * Mutable version of {@link LongSet}.
 */"
"<fim_prefix>ode true} if {@code element} was removed, {@code false} if there's no such element
     */
    boolean remove(long element);

    /**
     * removes all of the specified {@code elements} from this collection
     * @param elements    elements to remove
     * @return {@code true} if collection was changed, {@code false} otherwise
     */
    boolean removeAll(long[] elements);

    /**<fim_suffix>
    boolean removeAll(LongSet elements);

    /**
     * Leaves intersection of {@code this} and {@code elements}, removes any other elements
     * @param elements    elements to retain
     * @return {@code true} if collection was changed, {@code false} otherwise
     */
    boolean retainAll(long[] elements);

    /**
     * {@link this#retainAll(long[])}
     */
    boolean retain<fim_middle>","
     * {@link this#removeAll(long[])}
     */","
     * {@link this#removeAll(long[])}
     */"
"<fim_prefix>elements);

    /**
     * Leaves intersection of {@code this} and {@code elements}, removes any other elements
     * @param elements    elements to retain
     * @return {@code true} if collection was changed, {@code false} otherwise
     */
    boolean retainAll(long[] elements);

    /**
     * {@link this#retainAll(long[])}
     */
    boolean retainAll(LongSet elements);

    /**<fim_suffix>
    @Override
    MutableLongIterator iterator();

    /**
     * Adds {@code element}, if not in collection, removes it otherwise.
     * @param element    element to add or remove
     * @return Î”: {@code -1} if removed, {@code +1} if added
     */
    int addOrRemove(long element);
}
<fim_middle>","
     * Returns a mutable iterator over this collection.
     * @return a mutable iterator over this collection
     */","
     * {@link this#retainAll(long[])}
     */"
"<fim_prefix>/*<fim_suffix>
package de.elanev.studip.android.app.util;

/**
 * @author JÃ¶rn
 */
public final class ServerData {
  public final static String serverJson = """";
}
<fim_middle>","
 * Copyright (c) 2017 ELAN e.V.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 */","*
 * Created by JÃ¶rn on 11.02.2015.
 */"
"<fim_prefix>/*
 * Copyright (c) 2017 ELAN e.V.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 */
package de.elanev.studip.android.app.util;

/**<fim_suffix>
public final class ServerData {
  public final static String serverJson = """";
}
<fim_middle>","
 * @author JÃ¶rn
 */","
 * Created by christopher on 11."
"<fim_prefix>/*<fim_suffix>

package com.shatteredpixel.shatteredpixeldungeon.levels.rooms.sewerboss;

import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
import com.shatteredpixel.shatteredpixeldungeon.levels.features.LevelTransition;
import com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter;
import com.shatteredpixel.shatte<fim_middle>","
 * Pixel Dungeon
 * Copyright (C) 2012-2015 Oleg Dolya
 *
 * Shattered Pixel Dungeon
 * Copyright (C) 2014-2022 Evan Debenham
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * Created by <NAME> on 10/25/2018.
 */"
"<fim_prefix>package com.dlpu.eva.dboperate;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Entity;
import org.hibernate.Query;
import org.hibernate.Session;

import hibernate.*;

import com.db.hibernate.GetHibernateSession;
import com.dlpu.eva.common.NewsTitle;
import com.dlpu.eva.common.NoticeTitle;

@Entity
public class SearchDBOperate {

	/**<fim_suffix>
	@SuppressWarnings(""unchecked"")
	public ArrayList<NewsTitle> SearchNews(String word) {
		Session s = GetHibernateSession.getSessionFactory().openSession();
		Query q = s.createQuery(""from News as p where p.newstitle like :word"");
		q.setString(""word"", ""%"" + word + ""%"");
		List<News> nl = q.list();
		ArrayList<NewsTitle> nts = new ArrayList<NewsTitle>();
		for (News n : nl) {
			NewsTi<fim_middle>","
	 * ��ѯ
	 * 
	 * @param word
	 * @return
	 */","
	 * 
	 */"
"<fim_prefix>rom News as p where p.newstitle like :word"");
		q.setString(""word"", ""%"" + word + ""%"");
		List<News> nl = q.list();
		ArrayList<NewsTitle> nts = new ArrayList<NewsTitle>();
		for (News n : nl) {
			NewsTitle nt = new NewsTitle();
			nt.setNewsid(n.getNewsid());
			nt.setNewstime(n.getNewstime().toString());
			nt.setNewstitle(n.getNewstitle());
			nts.add(nt);
		}
		return nts;
	}

	/**<fim_suffix>
	@SuppressWarnings(""unchecked"")
	public ArrayList<NoticeTitle> SearchNotice1(String word) {
		Session s = GetHibernateSession.getSessionFactory().openSession();
		Query q = s.createQuery(""from Notice as p where p.noticetitle like :word and p.noticetype = 1"");
		q.setString(""word"", ""%"" + word + ""%"");
		List<Notice> nl = q.list();
		ArrayList<NoticeTitle> nts = new ArrayList<NoticeTitle<fim_middle>","
	 * ��ѯ
	 * 
	 * @param word
	 * @return
	 */","
	 * 搜索公告
	 * 
	 * @param word
	 * @return
	 */"
"<fim_prefix> p.noticetype = 1"");
		q.setString(""word"", ""%"" + word + ""%"");
		List<Notice> nl = q.list();
		ArrayList<NoticeTitle> nts = new ArrayList<NoticeTitle>();
		for (Notice n : nl) {
			NoticeTitle nt = new NoticeTitle();
			nt.setNoticeid(n.getNoticeid());
			nt.setNoticetime(n.getNoticetime().toString());
			nt.setNoticetitle(n.getNoticetitle());
			nts.add(nt);
		}
		return nts;
	}
	
	/**<fim_suffix>
	@SuppressWarnings(""unchecked"")
	public ArrayList<NoticeTitle> SearchNotice2(String word) {
		Session s = GetHibernateSession.getSessionFactory().openSession();
		Query q = s.createQuery(""from Notice as p where p.noticetitle like :word and p.noticetype = 2"");
		q.setString(""word"", ""%"" + word + ""%"");
		List<Notice> nl = q.list();
		ArrayList<NoticeTitle> nts = new ArrayList<NoticeTitle<fim_middle>","
	 * ��ѯ
	 * 
	 * @param word
	 * @return
	 */","
	 * 搜索公告
	 * @param word
	 * @return
	 */"
"<fim_prefix>port java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Logger;

import javax.faces.context.FacesContext;
import javax.faces.context.ResponseWriter;

import com.idega.core.idgenerator.business.UUIDGenerator;
import com.idega.util.CoreConstants;
import com.idega.util.CoreUtil;
import com.idega.util.PresentationUtil;
import com.idega.util.StringUtil;
/**<fim_suffix>
public abstract class IWUIBase extends IWBaseComponent{

	private StringBuilder scriptOnLoad = null;
	private IWContext iwc = null;
	private String tag = null;
	private Map<String,String> markupAttributes = null;
	
	public IWUIBase(){
		super();
	}
	
	public IWUIBase(String tag){
		
	}
	
	
	public String getTag() {
		return tag;
	}

	public void setTag(String tag) {
		this.tag = tag;
<fim_middle>","
 * Some new things that I use most of the time.
 * @author alex
 *
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>tribute with value attributeValue but, if there was previously a value 
	 * there old value will be kept and the new value be added with the semicolon separator ; 
	 * @param attributeName
	 * @param attributeValue
	 */
	public void setMarkupAttributeMultivalued(String attributeName, String attributeValue) {
		setMarkupAttributeMultivalued(attributeName, attributeValue, "";"");
	}
	
	/**<fim_suffix>
	public void setMarkupAttributeMultivalued(String attributeName, String attributeValue, String seperator) {
		String previousAttribute = getMarkupAttributes().get(attributeName);
		if (StringUtil.isEmpty(previousAttribute)){
			setMarkupAttribute(attributeName, attributeValue);
			return;
		}
		if (previousAttribute.indexOf(attributeValue) == -1){
			String parameterValue;
			if (prev<fim_middle>","
	 * Sets the attribute with value attributeValue but, if there was previously a value 
	 * there old value will be kept and the new value be added with the supplied seperator 
	 * @param attributeName
	 * @param attributeValue
	 * @param seperator
	 */","
	 * Set the markup attribute with value attributeValue but, if there was previously a value 
	 * there old value will be kept and the new value be added with the seperator separator ; 
	 * @param attributeName
	 * @param attributeValue
	 * @param seperator
"
"<fim_prefix>c = IWContext.getIWContext(context);
		}
		return iwc;
	}
	protected IWContext getIwc() {
		if(iwc == null){
			iwc = CoreUtil.getIWContext();
		}
		return iwc;
	}

	protected void setIwc(IWContext iwc) {
		this.iwc = iwc;
	}


	private String generateID()
	{
		String UUID = UUIDGenerator.getInstance().generateId();
		return ""iwid"" + UUID.substring(UUID.lastIndexOf(""-"") + 1);
	}
	
	/**<fim_suffix>
	public void setMarkupAttributeMultivalued(String attributeName, String attributeValue) {
		setMarkupAttributeMultivalued(attributeName, attributeValue, "";"");
	}
	
	/**
	 * Sets the attribute with value attributeValue but, if there was previously a value 
	 * there old value will be kept and the new value be added with the supplied seperator 
	 * @param attributeName
	 * @param attrib<fim_middle>","
	 * Sets the attribute with value attributeValue but, if there was previously a value 
	 * there old value will be kept and the new value be added with the semicolon separator ; 
	 * @param attributeName
	 * @param attributeValue
	 */","
	 * Sets the attribute with value attributeValue but, if there was previously a value 
	 * there old value will be kept and the new value be added with the supplied seperator 
	 * @param attributeName
	 * @param attribValue
	 *"
"<fim_prefix>/**<fim_suffix>
package xyz.gmitch215.socketmc.spigot;<fim_middle>","
 * Main package for the SocketMC Spigot API
 */","
 * @author <NAME>
 */"
"<fim_prefix>
package org.miloss.fgsms.services.interfaces.policyconfiguration;

import java.io.Serializable;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**<fim_suffix>
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""request""
})
@XmlRootElement(name = ""GetAgentPrinicples"")
public class GetAgentPrinicples
    implements Serializable
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true, nillable = true)
    protected GetAgentPrinicplesRequestMsg request;

    /**
     * Gets the value of t<fim_middle>","
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""request"" type=""{urn:org:miloss:fgsms:services:interfaces:policyConfiguration}GetAgentPrinicplesRequestMsg""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */","
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base=""{http://www.w3.org/2001/XMLSchema}anyType"">
 *       &lt;sequence>
 *         &lt;element name=""request"" type=""{http://www.w3.org/2001/XMLSchema}anyType""/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */"
"<fim_prefix>Type>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = """", propOrder = {
    ""request""
})
@XmlRootElement(name = ""GetAgentPrinicples"")
public class GetAgentPrinicples
    implements Serializable
{

    private final static long serialVersionUID = 1L;
    @XmlElement(required = true, nillable = true)
    protected GetAgentPrinicplesRequestMsg request;

    /**<fim_suffix>
    public GetAgentPrinicplesRequestMsg getRequest() {
        return request;
    }

    /**
     * Sets the value of the request property.
     * 
     * @param value
     *     allowed object is
     *     {@link GetAgentPrinicplesRequestMsg }
     *     
     */
    public void setRequest(GetAgentPrinicplesRequestMsg value) {
        this.request = value;
    }

    public boolean<fim_middle>","
     * Gets the value of the request property.
     * 
     * @return
     *     possible object is
     *     {@link GetAgentPrinicplesRequestMsg }
     *     
     */","
     * Gets the value of the request property.
     * 
     * @return
     *     possible object is
     *     {@link GetAgentPrinicplesRequestMsg }
     *     
     */"
"<fim_prefix>rsionUID = 1L;
    @XmlElement(required = true, nillable = true)
    protected GetAgentPrinicplesRequestMsg request;

    /**
     * Gets the value of the request property.
     * 
     * @return
     *     possible object is
     *     {@link GetAgentPrinicplesRequestMsg }
     *     
     */
    public GetAgentPrinicplesRequestMsg getRequest() {
        return request;
    }

    /**<fim_suffix>
    public void setRequest(GetAgentPrinicplesRequestMsg value) {
        this.request = value;
    }

    public boolean isSetRequest() {
        return (this.request!= null);
    }

}
<fim_middle>","
     * Sets the value of the request property.
     * 
     * @param value
     *     allowed object is
     *     {@link GetAgentPrinicplesRequestMsg }
     *     
     */","
     * Sets the value of the request property.
     * 
     * @param value
     *     allowed object is
     *     {@link GetAgentPrinicplesRequestMsg }
     *     
     */"
"<fim_prefix>/*<fim_suffix>

package com.touhoupixel.touhoupixeldungeonreloaded.items.abilitycards.reimuexclusive;

import com.touhoupixel.touhoupixeldungeonreloaded.Statistics;
import com.touhoupixel.touhoupixeldungeonreloaded.actors.hero.Hero;
import com.touhoupixel.touhoupixeldungeonreloaded.items.abilitycards.Abilitycards;
import com.touhoupixel.touhoupixeldungeonreloaded.sprites.ItemSpriteSheet;

import jav<fim_middle>","
 * Pixel Dungeon
 * Copyright (C) 2012-2015 Oleg Dolya
 *
 * Shattered Pixel Dungeon
 * Copyright (C) 2014-2021 Evan Debenham
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * Created by <NAME> on 11/12/2016.
 */"
"<fim_prefix>package eu.htcl.android.portknocker;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import java.io.IOException;
import java.net.*;

/**<fim_suffix>
public class Knocker {

    public static boolean doKnock(String host, int port, String protocol) {

        try {
            if (""udp"".equals(protocol)) {
                // udp knock (a ping would wait for a connection/resonse)
                DatagramSocket udp_socket = new DatagramSocket();
                InetAddress inetAddress = InetAddress.getByName(host);
                Str<fim_middle>","
 *
 * @author everard
 */","
 * Created by <NAME> on 10/"
"<fim_prefix>/********************************************//**<fim_suffix>

package eu.midan;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.security.Principal;

import com.atlassian.seraph.config.SecurityConfig;
import com.atlassian.seraph.auth.DefaultAuthenticator;

import eu.midan.SSOAuthenticatorWrapper;
import eu.midan.JIRAAuthenticatorWrapper;

public class MIDANAuthenti<fim_middle>","
 * \file MIDANAuthenticator.java
 * \brief \c MIDANAuthenticator.java combines Crowd SSO and 
 * JIRA local database authorization.
 *
 * \author Sebastian Puschhof, MIDAN SOFTWARE GmbH
 * \version 1.0 MIDANAuthenticator.java, v1.0 2015/09/30 14:34 SPF
 *
 * \note Copyright &copy; 2015 MIDAN SOFTWARE GmbH
 *
 * This file is part of MIDANAuthenticator.
 *
 * MIDANAuthenticator is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * MIDANAuthenticator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with MIDANAuthenticator.  If not, see <http://www.gnu.org/licenses/>.
 *
 * See COPYING file for the full LGPL text.
 ***********************************************/","************************************
 * Copyright (c) 2011, 2012 Red Hat, Inc.
 *  All rights reserved.
 * This program is made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Red Hat, Inc. - initial API and implementation
 *
 * @author <NAME>
 ******************************************************************************/"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.rap.clientbuilder;

import static org.eclipse.rap.clientbuilder.InputListReader.getInputFiles;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


/**
 * Usage: JSCompressor [--input-path <path>] --input-list <file> --output-file <file>
 *
 *   --input-list <file>
 *       file that includes the names of all input <fim_middle>","*****************************************************************************
 * Copyright (c) 2010, 2015 EclipseSource and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    EclipseSource - initial API and implementation
 ******************************************************************************/","
 * Copyright (c) 2008, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 *"
"<fim_prefix>epl-v10.html
 *
 * Contributors:
 *    EclipseSource - initial API and implementation
 ******************************************************************************/
package org.eclipse.rap.clientbuilder;

import static org.eclipse.rap.clientbuilder.InputListReader.getInputFiles;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;


/**<fim_suffix>
public class ClientBuilder {

  private static final String OPT_INPUT_PATH = ""--input-path"";
  private static final String OPT_INPUT_LIST = ""--input-list"";
  private static final String OPT_OUTPUT_FILE = ""--output-file"";
  private static final String OPT_NO_COMPRESS = ""--no-compress"";

  private static final boolean CREATE_DEBUG_FILES
    = ""true"".equals( System.getProperty( ""jscompre<fim_middle>","
 * Usage: JSCompressor [--input-path <path>] --input-list <file> --output-file <file>
 *
 *   --input-list <file>
 *       file that includes the names of all input files, one per line
 *
 *   --input-path <path>
 *       path to the directory that contains the input files
 *
 *   --output-file <file>
 *       compressed javascript file
 *
 *   --no-compress
 *       concatenate only, do not compress
 */","
 * The main class for the client builder.
 *
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @"
"<fim_prefix>package fr.ralala.netcap.net.layer.internet.utils;

import java.util.HashMap;
import java.util.Map;


/**<fim_suffix>
public class ICMPCodeRouterRenumbering implements IICMPCodes {

  private final boolean mIpv6;

  public ICMPCodeRouterRenumbering(boolean ipv6) {
    mIpv6 = ipv6;
  }

  public boolean isIPv6() {
    return mIpv6;
  }

  @Override
  public Map<Integer, String> getCodes() {
    Map<Integer, String> codes = new HashMap<>();
    if (isIPv6()) {
      codes.put(0, ""Router Renumbering Co<fim_middle>","
 * ******************************************************************************
 * <p><b>Project NetCap</b><br/> </p>
 *
 * @author Keidan
 * ******************************************************************************
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package org.nebula.ui;

import java.util.ArrayList;
import java.util.List;

import org.nebula.models.Conversation;

public class ConversationRow implements Comparable<ConversationRow> {
	private boolean isChecked;
	private List<ContactRow> members;
	private Conversation conversation;

	public ConversationRow(Conversation conv) {
		this.conversation = conv;
		
		membe<fim_middle>","
 * author - michel, saad
 */","*
 * 
 */"
"<fim_prefix>/*<fim_suffix>

import org.junit.*;
import static org.junit.Assert.*;

public class TestXmlElement {
	@Test(timeout = 4000)
	public void test() throws Throwable {
		// test here!
		XmlElement data = new XmlElement(""kill"");
		assertEquals(0,data.getElements().size());

		
		//assertEquals(null,data.removeElement(""a"",""d""));
		
	}
}<fim_middle>", no package name */,"*
 * This"
"<fim_prefix>package droid64.d64;

/**<fim_suffix>
public class CbmException extends Exception {

	private static final long serialVersionUID = 1L;

	public CbmException(String message) {
		super(message);
	}

	public CbmException(Throwable cause) {
		super(cause);
	}

	public CbmException(String message, Throwable cause) {
		super(message, cause);
	}

	@Override
	public String toString() {
		return new StringBuilder().append(""CbmExce<fim_middle>","
 * Exception to throw when there is a problem when processing a disk image.
 *
 * @author Henrik
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package de.uni_passau.fim.se2.litterbox.analytics.mblock.bugpattern;

import de.uni_passau.fim.se2.litterbox.analytics.IssueSeverity;
import de.uni_passau.fim.se2.litterbox.analytics.IssueType;
import de.uni_passau.fim.se2.litterbox.analytics.mblock.AbstractRobotFinder;
import de.uni_passau.fim.se2.litterbox.ast.model.expression.BinaryExpression;
import de.uni_passau.fim.se2.litterbox<fim_middle>","
 * Copyright (C) 2019-2024 LitterBox contributors
 *
 * This file is part of LitterBox.
 *
 * LitterBox is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * LitterBox is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LitterBox. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package io.github.wysohn.triggerreactor.core.manager.trigger.command;

import io.github.wysohn.triggerreactor.core.config.InvalidTrgConfigurationException;
import io.github.wysohn.triggerreactor.core.manager.trigger.ITriggerLoader;
import io.github.wysohn.triggerreactor.core.manager.trigger.TriggerConfigKey;
import io.github.wysohn.triggerreactor.core.manager.trigger.TriggerInfo;
imp<fim_middle>","
 * Copyright (C) 2022. TriggerReactor Team
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author wysohn
 */"
"<fim_prefix>/**<fim_suffix>
/**
 * Implements the CFML Function sqr
 */
package lucee.runtime.functions.math;

import lucee.runtime.PageContext;
import lucee.runtime.exp.ExpressionException;
import lucee.runtime.ext.function.Function;

public final class Sqr implements Function {
	public static double call(PageContext pc , double number) throws ExpressionException {
	    if(number >= 0.0D)
            return Str<fim_middle>","
 *
 * Copyright (c) 2014, the Railo Company Ltd. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either 
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public 
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 * 
 **/","
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public 
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 * 
 **/
/**<fim_suffix>
package lucee.runtime.functions.math;

import lucee.runtime.PageContext;
import lucee.runtime.exp.ExpressionException;
import lucee.runtime.ext.function.Function;

public final class Sqr implements Function {
	public static double call(PageContext pc , double number) throws ExpressionException {
	    if(number >= 0.0D)
            return StrictMath.sqrt(number);
        throw new Expr<fim_middle>","
 * Implements the CFML Function sqr
 */","
 * @author <NAME>
 * @"
"<fim_prefix>/**<fim_suffix>
package org.royllo.explorer.core.dto.bitcoin;<fim_middle>","
 * Bitcoin related Data Transfer Objects.
 */","
 * @author <NAME>
 * @"
"<fim_prefix>/*<fim_suffix>
package xdev.ui.table;


import java.io.ByteArrayInputStream;

import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;

import xdev.io.ByteHolder;
import xdev.io.IOUtils;
import xdev.vt.DataFlavor;
import xdev.vt.VirtualTable;
import xdev<fim_middle>","
 * XDEV Application Framework - XDEV Application Framework
 * Copyright Â© 2003 XDEV Software (https://xdev.software)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.gmt.modisco.infra.browser.custom.examples.uml;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.gmt.modisco.infra.query.core.exception.ModelQueryExecutionException;
import org.eclipse.gmt.modisco.infra.query.core.java.IJavaModelQuery;
import org.eclipse.gmt.modisco.infra.query.core.java.ParameterValueList;
import org.eclipse.uml2.uml<fim_middle>","*****************************************************************************
 * Copyright (c) 2009 Mia-Software.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Gregoire DUPE (Mia-Software)
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>amples.uml;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.gmt.modisco.infra.query.core.exception.ModelQueryExecutionException;
import org.eclipse.gmt.modisco.infra.query.core.java.IJavaModelQuery;
import org.eclipse.gmt.modisco.infra.query.core.java.ParameterValueList;
import org.eclipse.uml2.uml.Classifier;
import org.eclipse.uml2.uml.Element;

/**<fim_suffix>
public class AllClassifiersClassifier implements
		IJavaModelQuery<Classifier, List<Classifier>> {

	public List<Classifier> evaluate(final Classifier context,
			final ParameterValueList parameterValues)
			throws ModelQueryExecutionException {
		List<Classifier> allClassifiers = new ArrayList<Classifier>();
		List<Classifier> classifiers = new ArrayList<Classifier>();
		for<fim_middle>","
 * @author Gregoire DUPE (Mia-Software)
 */","
 * This class represents a query that returns all the classifiers in a model.
"
"<fim_prefix>/*<fim_suffix>
package matrix;

import org.junit.Assert;
import util.Misc;

/**
 *
 * Given a 2D binary matrix filled with 0's and 1's.
 * find the largest submatrix which main diagonal elements are all 1 and the other elements are all 0.
 * 
 * You can assume that the answer matrix must be a square matrix.
 * The main diagonal refers to a diagonal line from the upper left corner to the lower right <fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matrix;

import org.junit.Assert;
import util.Misc;

/**<fim_suffix>
public class MaxSquareII {
    
    /**
     * 
     * @param matrix
     * @return 
     */
    public int maxSquare2(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0 ){
            return 0;
        }
        
        int max = 0;
        
        int n = matrix.length;
        int m = matrix[0].length;
        int[][] f = new int[n + 1][m +<fim_middle>","
 *
 * Given a 2D binary matrix filled with 0's and 1's.
 * find the largest submatrix which main diagonal elements are all 1 and the other elements are all 0.
 * 
 * You can assume that the answer matrix must be a square matrix.
 * The main diagonal refers to a diagonal line from the upper left corner to the lower right corner.
 * 
 * Example 1:
 * Input:
 *   [[1,0,1,0,0],
 *    [1,0,0,1,0],
 *    [1,1,0,0,1],
 *    [1,0,0,1,0]]
 * Output: 9
 * Explanation: [0,2]->[2,4]
 * 
 * Example 2:
 * Input:
 *   [[1,0,1,0,1],
 *    [1,0,0,1,1],
 *    [1,1,1,1,1],
 *    [1,0,0,1,0]]
 * Output: 4
 * Explanation: [0,2]->[1,3]
 * 
 * Thought
 *   define f[i][j] as the edge length of the max matrix whose bottom right vertex is (i, j)
 *   To 1*1 square, when matrix[i][j] is 1,  f[i][j] = 1
 *   To 2*2 square, when matrix[i][j] is 1, and matrix[i - 1][j] and matrix[i][j - 1] is 0, f[i][j]= f[i - 1][j - 1] + 1
 * 
 *  need define c[i][j] to store how many zero count from (i, j) to (i-1, j) to (i-2, j)... until to 1
 *  need define r[j] to store how many zero count from (i, j) to (i, j-1), to (i, j-2)... until to 1
 * 
 */","
 *
 * @author <NAME> <<EMAIL>>
 */"
"<fim_prefix>i][j] = 1
 *   To 2*2 square, when matrix[i][j] is 1, and matrix[i - 1][j] and matrix[i][j - 1] is 0, f[i][j]= f[i - 1][j - 1] + 1
 * 
 *  need define c[i][j] to store how many zero count from (i, j) to (i-1, j) to (i-2, j) ... until to 1
 *  need define r[j] to store how many zero count from (i, j) to (i, j-1), to (i, j-2) ... until to 1
 * 
 */
public class MaxSquareII {
    
    /**<fim_suffix>
    public int maxSquare2(int[][] matrix) {
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0 ){
            return 0;
        }
        
        int max = 0;
        
        int n = matrix.length;
        int m = matrix[0].length;
        int[][] f = new int[n + 1][m + 1];
        int[] downZero = new int[m];
        int rightZero;
        
        for(int r =<fim_middle>","
     * 
     * @param matrix
     * @return 
     */","
     * @param matrix: a matrix of integers
     * @return: an integer
   "
"<fim_prefix>/*<fim_suffix>
package org.emonocot.portal.controller;

import org.emonocot.api.TypeAndSpecimenService;
import org.emonocot.model.TypeAndSpecimen;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestM<fim_middle>","
 * This is eMonocot, a global online biodiversity information resource.
 *
 * Copyright © 2011–2015 The Board of Trustees of the Royal Botanic Gardens, Kew and The University of Oxford
 *
 * eMonocot is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * eMonocot is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 * the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * The complete text of the GNU Affero General Public License is in the source repository as the file
 * ‘COPYING’.  It is also available from <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 2016-04-04.
 */"
"<fim_prefix>/*<fim_suffix>
package io.mycat.calcite.sqlfunction.mathfunction;

import io.mycat.calcite.MycatScalarFunction;
import org.apache.calcite.mycat.MycatSqlDefinedFunction;
import org.apache.calcite.sql.SqlFunctionCategory;
import org.apache.calcite.sql.type.InferTypes;
import org.apache.calcite.sql.type.OperandTypes;
import org.apache.calcite.sql.type.ReturnTypes;

public class LogFunction extends Myca<fim_middle>","
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to you under the Apache License, Version 2.0
 * (the ""License""); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * @author zhuam
 */"
"<fim_prefix>/*<fim_suffix>

package org.concord.modeler.util;

import java.awt.Dimension;
import java.awt.print.PageFormat;
import java.awt.print.Paper;

public class PrinterUtilities extends Object {

	private PrinterUtilities() {
	}

	/**
	 * @param orientation
	 *            the orientation of the paper
	 * @param paper
	 *            a piece of paper
	 * @param d
	 *            the actual dimension of the d<fim_middle>","
 *   Copyright (C) 2006  The Concord Consortium, Inc.,
 *   25 Love Lane, Concord, MA 01742
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * END LICENSE */","*
	 * @param orientation
	 *            the orientation of the paper
	 * @param paper
	 *            a piece of paper
	 * @param d
	 *            the actual dimension of the dimenstion
	 * @return the page format  Added a utility class for printing.  /*
 * Copyright (c) 2001-2004 Ant-Contrib project.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,"
"<fim_prefix>c License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * END LICENSE */

package org.concord.modeler.util;

import java.awt.Dimension;
import java.awt.print.PageFormat;
import java.awt.print.Paper;

public class PrinterUtilities extends Object {

	private PrinterUtilities() {
	}

	/**<fim_suffix>
	public static Dimension scaleToPaper(int orientation, Paper paper, Dimension d) {

		float wp = (float) paper.getImageableWidth();
		float hp = (float) paper.getImageableHeight();
		float w = d.width;
		float h = d.height;

		int w1 = (int) w, h1 = (int) h;

		float rw = 1.0f;
		float rh = 1.0f;

		if (orientation == PageFormat.PORTRAIT) {
			rw = w / wp;
			rh = h / hp;
		}
		else i<fim_middle>","
	 * @param orientation
	 *            the orientation of the paper
	 * @param paper
	 *            a piece of paper
	 * @param d
	 *            the actual dimension of the document to be printed
	 * @return the rescaled dimension that fits the imageable size of the paper but keeps the ratio of width to length
	 *         of the input dimension object
	 */","
	 * Scales the given dimension to fit the given paper.
	 * 
	 * @param orientation
	 *            the orientation of the paper
	 * @param paper
	 *            the paper
	 * @param d
	 *            the dimension to scale
	 * @return the scaled dimension
	 */"
"<fim_prefix>/**<fim_suffix>

package org.sparvnastet.rnf;

import java.util.concurrent.atomic.AtomicBoolean;

public class GameRunner implements IGameRunner {
    private IRenderer renderer_;
    private IInputHandler inputHandler_;
    private IPhysicsSimulator physicsSimulator_;

    private AtomicBoolean running_ = new AtomicBoolean(false);
    private GameState gameState_;

    private Thread thread_;
    pr<fim_middle>","
 * Copyright (c) 2012 Anders Sundman <anders@4zm.org>
 * 
 * This file is part of 'Rise and Fall' (RnF).
 * 
 * RnF is free software: you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * RnF is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with RnF.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * Created by thebarbarian on 10/12/2016.
 */"
"<fim_prefix>ystem.currentTimeMillis();

        running_.set(true);
        thread_ = new Thread(new GameLoop());
        thread_.start();
        return true;
    }

    @Override
    public boolean stop() {
        running_.set(false);

        try {
            thread_.join(500);
        } catch (InterruptedException e) {
            return false;
        }

        return true;

    }

    /**<fim_suffix>
    private class GameLoop implements Runnable {

        /**
         * Run the game loop. 1. Get input, 2. Do physics, 3. Render.
         * 
         * While this method is public, it should not be called directly. Use
         * the doStart/doStop to control execution.
         */
        @Override
        public void run() {
            while (running_.get()) {

                g<fim_middle>","
     * A concrete game thread that handles input, advances the game state
     * through a physics simulation and renders the state to a renderer.
     * 
     * Once started and stopped, the same instance can not be started again. A
     * new instance is required to continue.
     */","
     * The game loop.
     */"
"<fim_prefix>}

        return true;

    }

    /**
     * A concrete game thread that handles input, advances the game state
     * through a physics simulation and renders the state to a renderer.
     * 
     * Once started and stopped, the same instance can not be started again. A
     * new instance is required to continue.
     */
    private class GameLoop implements Runnable {

        /**<fim_suffix>
        @Override
        public void run() {
            while (running_.get()) {

                gameState_ = inputHandler_.handleInput(gameState_);

                // Check how much to advance the simulation
                long now = System.currentTimeMillis();
                float elapsed = (float) ((now - lastTime_) / 1000.0);
                lastTime_ = now;

               <fim_middle>","
         * Run the game loop. 1. Get input, 2. Do physics, 3. Render.
         * 
         * While this method is public, it should not be called directly. Use
         * the doStart/doStop to control execution.
         */","
         * The game state to be used for the simulation.
         */"
"<fim_prefix>/*<fim_suffix>
package org.codice.imaging.nitf.core.dataextension.impl;

import static org.codice.imaging.nitf.core.dataextension.impl.DataExtensionConstants.DE;
import static org.codice.imaging.nitf.core.dataextension.impl.DataExtensionConstants.DESID_LENGTH;
import static org.codice.imaging.nitf.core.dataextension.impl.DataExtensionConstants.DESITEM_LENGTH;
import static org.codice.imaging.nitf.co<fim_middle>","
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 */","*
 * @author <NAME>
 */"
"<fim_prefix>.codice.imaging.nitf.core.dataextension.DataExtensionSegment;
import org.codice.imaging.nitf.core.security.impl.SecurityMetadataParser;

/**
    Parser for a data extension segment (DES) in a NITF file.
*/
public class DataExtensionSegmentParser extends AbstractSegmentParser {
    private int userDefinedSubheaderLength = 0;

    private DataExtensionSegmentImpl segment = null;

    /**<fim_suffix>
    public DataExtensionSegmentParser() {
        // Intentionally Empty
    }

    /**
     * Parse DataExtensionSegment from the specified reader.
     *
     * @param nitfReader the NITF input reader.
     * @param dataLength the length of the data part of this segment
     * @return a fully parsed DataExtensionSegment
     * @throws NitfFormatException when the parser encounters u<fim_middle>","
     * Default Constructor.
     */","
     * Constructor.
     */"
"<fim_prefix>ion.impl.DataExtensionConstants.DESVER_LENGTH;

import org.codice.imaging.nitf.core.common.NitfFormatException;
import org.codice.imaging.nitf.core.common.NitfReader;
import org.codice.imaging.nitf.core.common.impl.AbstractSegmentParser;
import org.codice.imaging.nitf.core.dataextension.DataExtensionSegment;
import org.codice.imaging.nitf.core.security.impl.SecurityMetadataParser;

/**<fim_suffix>
public class DataExtensionSegmentParser extends AbstractSegmentParser {
    private int userDefinedSubheaderLength = 0;

    private DataExtensionSegmentImpl segment = null;

    /**
     * Default Constructor.
     */
    public DataExtensionSegmentParser() {
        // Intentionally Empty
    }

    /**
     * Parse DataExtensionSegment from the specified reader.
     *
     * @para<fim_middle>","
    Parser for a data extension segment (DES) in a NITF file.
*/","
 * This class is used to parse the DataExtensionSegment.
 *
 * @author <NAME"
"<fim_prefix>dataParser;

/**
    Parser for a data extension segment (DES) in a NITF file.
*/
public class DataExtensionSegmentParser extends AbstractSegmentParser {
    private int userDefinedSubheaderLength = 0;

    private DataExtensionSegmentImpl segment = null;

    /**
     * Default Constructor.
     */
    public DataExtensionSegmentParser() {
        // Intentionally Empty
    }

    /**<fim_suffix>
    public final DataExtensionSegment parse(final NitfReader nitfReader, final long dataLength) throws NitfFormatException {
        reader = nitfReader;
        segment = new DataExtensionSegmentImpl(nitfReader.getFileType());
        segment.setDataLength(dataLength);
        segment.setFileType(nitfReader.getFileType());

        readDE();
        readDESID();
        readDESVER();<fim_middle>","
     * Parse DataExtensionSegment from the specified reader.
     *
     * @param nitfReader the NITF input reader.
     * @param dataLength the length of the data part of this segment
     * @return a fully parsed DataExtensionSegment
     * @throws NitfFormatException when the parser encounters unexpected input from the reader.
     */","
     * Constructor.
     *
     * @param userDefinedSubheaderLength the length of the user defined subheader
     */"
"<fim_prefix>ry.datatype.Max35Text;
import com.tools20022.repository.datatype.YesNoIndicator;
import com.tools20022.repository.entity.*;
import com.tools20022.repository.GeneratedRepository;
import com.tools20022.repository.msg.MissingCover3;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.atomic.AtomicReference;
import java.util.List;
import java.util.Objects;

/**<fim_suffix>
public class PaymentInvestigationCase extends InvestigationCase {

	final static private AtomicReference<MMBusinessComponent> mmObject_lazy = new AtomicReference<>();
	protected List<com.tools20022.repository.entity.PaymentStatus> paymentStatus;
	/**
	 * 
	 <p>
	 * <strong>Constant fields:</strong>
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#get<fim_middle>","
 * Set of activities performed to handle an exception to a normal payment
 * transaction flow, such as: - a payment has not been received. - a payment has
 * been received but is incorrect. - a payment must be corrected or cancelled
 * (requested by the party which ordered the payment).
 * <p>
 * <strong>Class diagram</strong>
 * <p>
 * <embed name=""PaymentInvestigationCase""
 * src=""doc-files/PaymentInvestigationCase.svg"">
 * <p>
 * <strong>Constant fields:</strong>
 * <ul>
 * <li>{@linkplain com.tools20022.metamodel.MMBusinessComponent#getSuperType
 * superType} = {@linkplain com.tools20022.repository.entity.InvestigationCase
 * InvestigationCase}</li>
 * <li>{@linkplain com.tools20022.metamodel.MMBusinessComponent#getElement
 * element} =
 * <ul>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase#mmPaymentStatus
 * PaymentInvestigationCase.mmPaymentStatus}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase#mmCancellationReason
 * PaymentInvestigationCase.mmCancellationReason}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase#mmUnderlyingPayment
 * PaymentInvestigationCase.mmUnderlyingPayment}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase#mmMissingCoverIndication
 * PaymentInvestigationCase.mmMissingCoverIndication}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase#mmUnderlyingInstruction
 * PaymentInvestigationCase.mmUnderlyingInstruction}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase#mmUnderlyingCashEntry
 * PaymentInvestigationCase.mmUnderlyingCashEntry}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase#mmIncorrectInformationReason
 * PaymentInvestigationCase.mmIncorrectInformationReason}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase#mmMissingInformationReason
 * PaymentInvestigationCase.mmMissingInformationReason}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase#mmCaseType
 * PaymentInvestigationCase.mmCaseType}</li>
 * </ul>
 * </li>
 * <li>
 * {@linkplain com.tools20022.metamodel.MMBusinessComponent#getAssociationDomain
 * associationDomain} =
 * <ul>
 * <li>
 * {@linkplain com.tools20022.repository.entity.Payment#mmRelatedInvestigationCase
 * Payment.mmRelatedInvestigationCase}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.CashEntry#mmRelatedInvestigationCase
 * CashEntry.mmRelatedInvestigationCase}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentExecution#mmRelatedInvestigationCase
 * PaymentExecution.mmRelatedInvestigationCase}</li>
 * <li>
 * {@linkplain com.tools20022.repository.entity.PaymentStatus#mmRelatedInvestigationCase
 * PaymentStatus.mmRelatedInvestigationCase}</li>
 * </ul>
 * </li>
 * <li>
 * {@linkplain com.tools20022.metamodel.MMBusinessComponent#getDerivationComponent
 * derivationComponent} =
 * <ul>
 * <li>{@linkplain com.tools20022.repository.msg.MissingCover3 MissingCover3}</li>
 * </ul>
 * </li>
 * <li>
 * {@linkplain com.tools20022.metamodel.MMTopLevelDictionaryEntry#getDataDictionary
 * dataDictionary} =
 * {@linkplain com.tools20022.repository.GeneratedRepository#dataDict
 * GeneratedRepository.dataDict}</li>
 * <li>
 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getRegistrationStatus
 * registrationStatus} =
 * com.tools20022.metamodel.MMRegistrationStatus.REGISTERED</li>
 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getName name} =
 * ""PaymentInvestigationCase""</li>
 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getDefinition
 * definition} =
 * ""Set of activities performed to handle an exception to a normal payment transaction flow, such as: - a payment has not been received. - a payment has been received but is incorrect. - a payment must be corrected or cancelled (requested by the party which ordered the payment).""
 * </li>
 * </ul>
 */","
 * 
 * <p>
 * <strong>Constant fields:</strong>
 * <ul>
 * <li>
 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getMMBusinessAssociationEndName()}
 * </li>  Fixing compilation error  package com.tools20022.metamodel;

import com.tools20022.metamodel.MMBusinessAssociationEnd;
import com.tools20022.metamodel.MMBusinessComponent;
import com.tools20022.metamodel.MMBusinessObject;
import com.tools20022.metamodel.MMBusinessObjectEnd;
import com.tools20022.metamodel.MMBusinessObjectEndType;
import com.tools20022.metamodel.MMBusinessObjectStart;
import com.tools20022.metamodel.MMBusinessObjectStartType;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusinessObjectStartType_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum_Enum;
import com.tools20022.metamodel.MMBusinessObjectStartType.MMBusinessObjectStartType_Enum.MMBusiness"
"<fim_prefix>d but is incorrect. - a payment must be corrected or cancelled (requested by the party which ordered the payment).""
 * </li>
 * </ul>
 */
public class PaymentInvestigationCase extends InvestigationCase {

	final static private AtomicReference<MMBusinessComponent> mmObject_lazy = new AtomicReference<>();
	protected List<com.tools20022.repository.entity.PaymentStatus> paymentStatus;
	/**<fim_suffix>
	public static final MMBusinessAssociationEnd<PaymentInvestigationCase, List<PaymentStatus>> mmPaymentStatus = new MMBusinessAssociationEnd<PaymentInvestigationCase, List<PaymentStatus>>() {
		{
			isDerived = false;
			elementContext_lazy = () -> com.tools20022.repository.entity.PaymentInvestigationCase.mmObject();
			registrationStatus = MMRegistrationStatus.REGISTERED;
			name = ""P<fim_middle>","
	 * 
	 <p>
	 * <strong>Constant fields:</strong>
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getOpposite
	 * opposite} =
	 * {@linkplain com.tools20022.repository.entity.PaymentStatus#mmRelatedInvestigationCase
	 * PaymentStatus.mmRelatedInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getAggregation
	 * aggregation} = com.tools20022.metamodel.MMAggregation.NONE</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getType
	 * type} = {@linkplain com.tools20022.repository.entity.PaymentStatus
	 * PaymentStatus}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessElement#getElementContext
	 * elementContext} =
	 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase
	 * PaymentInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getRegistrationStatus
	 * registrationStatus} =
	 * com.tools20022.metamodel.MMRegistrationStatus.REGISTERED</li>
	 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getName
	 * name} = ""PaymentStatus""</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getDefinition
	 * definition} =
	 * ""Status of a payment which is the reason or the result of an investigation case.""
	 * </li>
	 * </ul>
	 */","
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 * </p>
	 * <p>
	 * The payment status of the payment.
	 *"
"<fim_prefix>gregation.NONE;
			type_lazy = () -> PaymentExecution.mmObject();
		}

		@Override
		public PaymentExecution getValue(PaymentInvestigationCase obj) {
			return obj.getUnderlyingInstruction();
		}

		@Override
		public void setValue(PaymentInvestigationCase obj, PaymentExecution value) {
			obj.setUnderlyingInstruction(value);
		}
	};
	protected List<CashEntry> underlyingCashEntry;
	/**<fim_suffix>
	public static final MMBusinessAssociationEnd<PaymentInvestigationCase, List<CashEntry>> mmUnderlyingCashEntry = new MMBusinessAssociationEnd<PaymentInvestigationCase, List<CashEntry>>() {
		{
			isDerived = false;
			elementContext_lazy = () -> com.tools20022.repository.entity.PaymentInvestigationCase.mmObject();
			registrationStatus = MMRegistrationStatus.REGISTERED;
			name = ""Und<fim_middle>","
	 * 
	 <p>
	 * <strong>Constant fields:</strong>
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getOpposite
	 * opposite} =
	 * {@linkplain com.tools20022.repository.entity.CashEntry#mmRelatedInvestigationCase
	 * CashEntry.mmRelatedInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getAggregation
	 * aggregation} = com.tools20022.metamodel.MMAggregation.NONE</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getType
	 * type} = {@linkplain com.tools20022.repository.entity.CashEntry CashEntry}
	 * </li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessElement#getElementContext
	 * elementContext} =
	 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase
	 * PaymentInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getRegistrationStatus
	 * registrationStatus} =
	 * com.tools20022.metamodel.MMRegistrationStatus.REGISTERED</li>
	 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getName
	 * name} = ""UnderlyingCashEntry""</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getDefinition
	 * definition} = ""Identifies the cash entry under investigation.""</li>
	 * </ul>
	 */","
	 * Getter for <code>com.tools20022.repository.entity.PaymentInvestigationCase.underlyingCashEntry</code>.
	 * 
	 * <p>
	 * If the business association is derived, this method returns the underlying
	 * business object.
	 * </p>
	 * 
	 * @return the underlying business object
	 */"
"<fim_prefix>.NONE;
			type_lazy = () -> CashEntry.mmObject();
		}

		@Override
		public List<CashEntry> getValue(PaymentInvestigationCase obj) {
			return obj.getUnderlyingCashEntry();
		}

		@Override
		public void setValue(PaymentInvestigationCase obj, List<CashEntry> value) {
			obj.setUnderlyingCashEntry(value);
		}
	};
	protected UnableToApplyIncorrectInfoCode incorrectInformationReason;
	/**<fim_suffix>
	public static final MMBusinessAttribute<PaymentInvestigationCase, UnableToApplyIncorrectInfoCode> mmIncorrectInformationReason = new MMBusinessAttribute<PaymentInvestigationCase, UnableToApplyIncorrectInfoCode>() {
		{
			isDerived = false;
			elementContext_lazy = () -> com.tools20022.repository.entity.PaymentInvestigationCase.mmObject();
			registrationStatus = MMRegistrationStatus<fim_middle>","
	 * 
	 <p>
	 * <strong>Constant fields:</strong>
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAttribute#getSimpleType
	 * simpleType} =
	 * {@linkplain com.tools20022.repository.codeset.UnableToApplyIncorrectInfoCode
	 * UnableToApplyIncorrectInfoCode}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessElement#getElementContext
	 * elementContext} =
	 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase
	 * PaymentInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getRegistrationStatus
	 * registrationStatus} =
	 * com.tools20022.metamodel.MMRegistrationStatus.REGISTERED</li>
	 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getName
	 * name} = ""IncorrectInformationReason""</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getDefinition
	 * definition} = ""Indicates, in a coded form, the incorrect information.""</li>
	 * </ul>
	 */","
	 * 
	 */"
"<fim_prefix>
		}

		@Override
		public UnableToApplyIncorrectInfoCode getValue(PaymentInvestigationCase obj) {
			return obj.getIncorrectInformationReason();
		}

		@Override
		public void setValue(PaymentInvestigationCase obj, UnableToApplyIncorrectInfoCode value) {
			obj.setIncorrectInformationReason(value);
		}
	};
	protected UnableToApplyMissingInformationV2Code missingInformationReason;
	/**<fim_suffix>
	public static final MMBusinessAttribute<PaymentInvestigationCase, UnableToApplyMissingInformationV2Code> mmMissingInformationReason = new MMBusinessAttribute<PaymentInvestigationCase, UnableToApplyMissingInformationV2Code>() {
		{
			isDerived = false;
			elementContext_lazy = () -> com.tools20022.repository.entity.PaymentInvestigationCase.mmObject();
			registrationStatus = MMRegist<fim_middle>","
	 * 
	 <p>
	 * <strong>Constant fields:</strong>
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAttribute#getSimpleType
	 * simpleType} =
	 * {@linkplain com.tools20022.repository.codeset.UnableToApplyMissingInformationV2Code
	 * UnableToApplyMissingInformationV2Code}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessElement#getElementContext
	 * elementContext} =
	 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase
	 * PaymentInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getRegistrationStatus
	 * registrationStatus} =
	 * com.tools20022.metamodel.MMRegistrationStatus.REGISTERED</li>
	 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getName
	 * name} = ""MissingInformationReason""</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getDefinition
	 * definition} = ""Indicates the missing information.""</li>
	 * </ul>
	 */","
	 * <p>Getter for the field <code>mmMissingInformationReason</code>.</p>
	 *
	 * @return a {@link com.tools20022.repository.entity.MMBusinessAttribute} object.
	 */"
"<fim_prefix>ssingInformationV2Code.mmObject();
		}

		@Override
		public UnableToApplyMissingInformationV2Code getValue(PaymentInvestigationCase obj) {
			return obj.getMissingInformationReason();
		}

		@Override
		public void setValue(PaymentInvestigationCase obj, UnableToApplyMissingInformationV2Code value) {
			obj.setMissingInformationReason(value);
		}
	};
	protected Max35Text caseType;
	/**<fim_suffix>
	public static final MMBusinessAttribute<PaymentInvestigationCase, Max35Text> mmCaseType = new MMBusinessAttribute<PaymentInvestigationCase, Max35Text>() {
		{
			isDerived = false;
			elementContext_lazy = () -> com.tools20022.repository.entity.PaymentInvestigationCase.mmObject();
			registrationStatus = MMRegistrationStatus.REGISTERED;
			name = ""CaseType"";
			definition = ""Specifie<fim_middle>","
	 * 
	 <p>
	 * <strong>Constant fields:</strong>
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAttribute#getSimpleType
	 * simpleType} = {@linkplain com.tools20022.repository.datatype.Max35Text
	 * Max35Text}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessElement#getElementContext
	 * elementContext} =
	 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase
	 * PaymentInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getRegistrationStatus
	 * registrationStatus} =
	 * com.tools20022.metamodel.MMRegistrationStatus.REGISTERED</li>
	 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getName
	 * name} = ""CaseType""</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getDefinition
	 * definition} = ""Specifies the type of investigation case.""</li>
	 * </ul>
	 */","
	 * <p>
	 * CaseType.
	 * <p>
	 * <p>
	 * The case type of the payment investigation case.
	 * <p>
	 * <p>
	 * 
	 * @return the caseType
	 */"
"<fim_prefix>;
			simpleType_lazy = () -> CancellationReasonCode.mmObject();
		}

		@Override
		public CancellationReasonCode getValue(PaymentInvestigationCase obj) {
			return obj.getCancellationReason();
		}

		@Override
		public void setValue(PaymentInvestigationCase obj, CancellationReasonCode value) {
			obj.setCancellationReason(value);
		}
	};
	protected List<Payment> underlyingPayment;
	/**<fim_suffix>
	public static final MMBusinessAssociationEnd<PaymentInvestigationCase, List<Payment>> mmUnderlyingPayment = new MMBusinessAssociationEnd<PaymentInvestigationCase, List<Payment>>() {
		{
			isDerived = false;
			elementContext_lazy = () -> com.tools20022.repository.entity.PaymentInvestigationCase.mmObject();
			registrationStatus = MMRegistrationStatus.REGISTERED;
			name = ""Underlyin<fim_middle>","
	 * 
	 <p>
	 * <strong>Constant fields:</strong>
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getOpposite
	 * opposite} =
	 * {@linkplain com.tools20022.repository.entity.Payment#mmRelatedInvestigationCase
	 * Payment.mmRelatedInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getAggregation
	 * aggregation} = com.tools20022.metamodel.MMAggregation.NONE</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getType
	 * type} = {@linkplain com.tools20022.repository.entity.Payment Payment}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessElement#getElementContext
	 * elementContext} =
	 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase
	 * PaymentInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getRegistrationStatus
	 * registrationStatus} =
	 * com.tools20022.metamodel.MMRegistrationStatus.REGISTERED</li>
	 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getName
	 * name} = ""UnderlyingPayment""</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getDefinition
	 * definition} =
	 * ""Identifies the end to end payment which is the subject of the investigation""
	 * </li>
	 * </ul>
	 */","
	 * Getter for <code>mm.PaymentInvestigationCase.underlyingPayment</code>.
	 */"
"<fim_prefix>/*<fim_suffix>

package com.tools20022.repository.entity;

import com.tools20022.metamodel.*;
import com.tools20022.repository.codeset.CancellationReasonCode;
import com.tools20022.repository.codeset.UnableToApplyIncorrectInfoCode;
import com.tools20022.repository.codeset.UnableToApplyMissingInformationV2Code;
import com.tools20022.repository.datatype.Max35Text;
import com.tools20022.repository.data<fim_middle>"," Tools20022 - API for ISO 20022
* Copyright (C) 2017 Tools20022.com - László Bukodi 
* 
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/","*
 * @author <NAME>
 *
 */"
"<fim_prefix>			aggregation = MMAggregation.NONE;
			type_lazy = () -> Payment.mmObject();
		}

		@Override
		public List<Payment> getValue(PaymentInvestigationCase obj) {
			return obj.getUnderlyingPayment();
		}

		@Override
		public void setValue(PaymentInvestigationCase obj, List<Payment> value) {
			obj.setUnderlyingPayment(value);
		}
	};
	protected YesNoIndicator missingCoverIndication;
	/**<fim_suffix>
	public static final MMBusinessAttribute<PaymentInvestigationCase, YesNoIndicator> mmMissingCoverIndication = new MMBusinessAttribute<PaymentInvestigationCase, YesNoIndicator>() {
		{
			derivation_lazy = () -> Arrays.asList(MissingCover3.mmMissingCoverIndicator);
			isDerived = false;
			elementContext_lazy = () -> com.tools20022.repository.entity.PaymentInvestigationCase.mmObject();<fim_middle>","
	 * 
	 <p>
	 * <strong>Constant fields:</strong>
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAttribute#getSimpleType
	 * simpleType} =
	 * {@linkplain com.tools20022.repository.datatype.YesNoIndicator
	 * YesNoIndicator}</li>
	 * <li>{@linkplain com.tools20022.metamodel.MMBusinessElement#getDerivation
	 * derivation} =
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.repository.msg.MissingCover3#mmMissingCoverIndicator
	 * MissingCover3.mmMissingCoverIndicator}</li>
	 * </ul>
	 * </li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessElement#getElementContext
	 * elementContext} =
	 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase
	 * PaymentInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getRegistrationStatus
	 * registrationStatus} =
	 * com.tools20022.metamodel.MMRegistrationStatus.REGISTERED</li>
	 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getName
	 * name} = ""MissingCoverIndication""</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getDefinition
	 * definition} =
	 * ""Indicates whether or not the claim is related to a missing cover.""</li>
	 * </ul>
	 */","
	 * 
	 */"
"<fim_prefix>ccurs = 1;
			simpleType_lazy = () -> YesNoIndicator.mmObject();
		}

		@Override
		public YesNoIndicator getValue(PaymentInvestigationCase obj) {
			return obj.getMissingCoverIndication();
		}

		@Override
		public void setValue(PaymentInvestigationCase obj, YesNoIndicator value) {
			obj.setMissingCoverIndication(value);
		}
	};
	protected PaymentExecution underlyingInstruction;
	/**<fim_suffix>
	public static final MMBusinessAssociationEnd<PaymentInvestigationCase, PaymentExecution> mmUnderlyingInstruction = new MMBusinessAssociationEnd<PaymentInvestigationCase, PaymentExecution>() {
		{
			isDerived = false;
			elementContext_lazy = () -> com.tools20022.repository.entity.PaymentInvestigationCase.mmObject();
			registrationStatus = MMRegistrationStatus.REGISTERED;
			name = <fim_middle>","
	 * 
	 <p>
	 * <strong>Constant fields:</strong>
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getOpposite
	 * opposite} =
	 * {@linkplain com.tools20022.repository.entity.PaymentExecution#mmRelatedInvestigationCase
	 * PaymentExecution.mmRelatedInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getAggregation
	 * aggregation} = com.tools20022.metamodel.MMAggregation.NONE</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAssociationEnd#getType
	 * type} = {@linkplain com.tools20022.repository.entity.PaymentExecution
	 * PaymentExecution}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessElement#getElementContext
	 * elementContext} =
	 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase
	 * PaymentInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getRegistrationStatus
	 * registrationStatus} =
	 * com.tools20022.metamodel.MMRegistrationStatus.REGISTERED</li>
	 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getName
	 * name} = ""UnderlyingInstruction""</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getDefinition
	 * definition} = ""Identifies the payment instruction under investigation.""</li>
	 * </ul>
	 */","
	 * Getter for <code>com.tools20022.repository.entity.PaymentInvestigationCase.underlyingInstruction</code>.
	 * @return a {@link com.tools20022.repository.entity.PaymentExecution} object.
	 */"
"<fim_prefix>zy = () -> com.tools20022.repository.entity.PaymentStatus.mmObject();
		}

		@Override
		public List<PaymentStatus> getValue(PaymentInvestigationCase obj) {
			return obj.getPaymentStatus();
		}

		@Override
		public void setValue(PaymentInvestigationCase obj, List<PaymentStatus> value) {
			obj.setPaymentStatus(value);
		}
	};
	protected CancellationReasonCode cancellationReason;
	/**<fim_suffix>
	public static final MMBusinessAttribute<PaymentInvestigationCase, CancellationReasonCode> mmCancellationReason = new MMBusinessAttribute<PaymentInvestigationCase, CancellationReasonCode>() {
		{
			isDerived = false;
			elementContext_lazy = () -> com.tools20022.repository.entity.PaymentInvestigationCase.mmObject();
			registrationStatus = MMRegistrationStatus.REGISTERED;
			name = ""<fim_middle>","
	 * 
	 <p>
	 * <strong>Constant fields:</strong>
	 * <ul>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessAttribute#getSimpleType
	 * simpleType} =
	 * {@linkplain com.tools20022.repository.codeset.CancellationReasonCode
	 * CancellationReasonCode}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMBusinessElement#getElementContext
	 * elementContext} =
	 * {@linkplain com.tools20022.repository.entity.PaymentInvestigationCase
	 * PaymentInvestigationCase}</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getRegistrationStatus
	 * registrationStatus} =
	 * com.tools20022.metamodel.MMRegistrationStatus.REGISTERED</li>
	 * <li>{@linkplain com.tools20022.metamodel.MMRepositoryConcept#getName
	 * name} = ""CancellationReason""</li>
	 * <li>
	 * {@linkplain com.tools20022.metamodel.MMRepositoryConcept#getDefinition
	 * definition} = ""Indicates the reason for cancellation.""</li>
	 * </ul>
	 */","
	 * Getter for <code>payment_investigation_case.cancellation_reason</code>.
	 */"
"<fim_prefix>/*<fim_suffix>
package cn.taketoday.bytecode.tree;

import org.junit.jupiter.api.Test;

import cn.taketoday.bytecode.AsmTest;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * Unit tests for {@link FieldNode}.
 *
 * @author Eric Bruneton
 */
public class FieldNodeTest extends AsmTest {

  @Test
  public void testConstructor() {
    FieldNode fieldNode = new FieldNode(123, ""field""<fim_middle>","
 * Original Author -> Harry Yang (taketoday@foxmail.com) https://taketoday.cn
 * Copyright Â© TODAY & 2017 - 2022 All Rights Reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/]
 */","*
 * Unit tests for {@link FieldNode}.
 *
 * @author Eric Bruneton
 */"
"<fim_prefix>POSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/]
 */
package cn.taketoday.bytecode.tree;

import org.junit.jupiter.api.Test;

import cn.taketoday.bytecode.AsmTest;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**<fim_suffix>
public class FieldNodeTest extends AsmTest {

  @Test
  public void testConstructor() {
    FieldNode fieldNode = new FieldNode(123, ""field"", ""I"", null, null);

    assertEquals(123, fieldNode.access);
    assertEquals(""field"", fieldNode.name);
    assertEquals(""I"", fieldNode.desc);
  }
}
<fim_middle>","
 * Unit tests for {@link FieldNode}.
 *
 * @author Eric Bruneton
 */","
 * @author <NAME>
 */"
"<fim_prefix> java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import common.DoubleMapComparator;

public class SocialRecencyRecommender {

	private HashMap<String, HashMap<Integer, ArrayList<Long>>> userTagTimes;
	private HashMap<String, ArrayList<String>> network;
	private List<String> users;

	/**<fim_suffix>
	public SocialRecencyRecommender(HashMap<String, HashMap<Integer, ArrayList<Long>>> userTagTimes, 
			HashMap<String, ArrayList<String>> network, List<String> users){
			this.userTagTimes = userTagTimes;
			this.network = network;
			this.users = users;
	}
	
	/**
	 * Get the weighted map of the tags for a given userid and timestamp. 
	 * @param userId integer user id of the user for w<fim_middle>","
	 * Constructor 
	 * @param userTagTimes the map of users to the tags to the timestamp list.
	 * @param network the underlying user network.
	 * @param users list of userids.
	 * */","
	 * Constructor for the SocialRecencyRecommender class. 
	 * @param userTagTimes HashMap of user id to a map of tag id to a list of timestamps. 
	 * @param network HashMap of user id to a list"
"<fim_prefix> to the tags to the timestamp list.
	 * @param network the underlying user network.
	 * @param users list of userids.
	 * */
	public SocialRecencyRecommender(HashMap<String, HashMap<Integer, ArrayList<Long>>> userTagTimes, 
			HashMap<String, ArrayList<String>> network, List<String> users){
			this.userTagTimes = userTagTimes;
			this.network = network;
			this.users = users;
	}
	
	/**<fim_suffix>
	public Map<Integer, Double> getRankedTagListSocialRecency(int userId, long timestamp, boolean sort) {
		HashMap<Integer, ArrayList<Long>> tagTimestampMapAllFriend = getAllFriendTagTimestampsMapSocialRecency(userId);
		HashMap<Integer, Long> mostRecentTimestampMap = getMostRecentTagTimestampSocialRecency(timestamp,
				tagTimestampMapAllFriend);
		Long maxValue = getMaxValue(mostRecen<fim_middle>","
	 * Get the weighted map of the tags for a given userid and timestamp. 
	 * @param userId integer user id of the user for which we want to get the recommendation.
	 * @param timestamp corresponding to which we want to get the recommendation.
	 * @return {@link Map} A map of tag to the weight of the tag for given users and timestamp.
	 **/","
	 * Returns a map of tag id to the most recent timestamp of the tag.
	 * @param timestamp the timestamp to search for.
	 * @param tagTimestampMapAllFriend the map of tag id to the timestamp list of all friends.
	 * @return a map of tag id to the most recent timestamp of the tag.
	 * */"
"<fim_prefix>r (Integer tag : tagTimestampMapAllFriend.keySet()) {
			ArrayList<Long> tagTimestampList = tagTimestampMapAllFriend.get(tag);
			for (Long tagTimestamp : tagTimestampMapAllFriend.get(tag)) {
				if (tagTimestamp > timestamp) {
					mostRecentTimestampMap.put(tag, tagTimestamp - timestamp);
					break;
				} else {
					continue;
				}
			}
		}
		return mostRecentTimestampMap;
	}

	/**<fim_suffix>
	private void sortHashMapListSocialRecency(HashMap<Integer, ArrayList<Long>> tagTimestampMapAllFriend) {
		for (Integer tag : tagTimestampMapAllFriend.keySet()) {
			Collections.sort(tagTimestampMapAllFriend.get(tag));
		}
	}

	/**
	 * Get the normalised values of the corresponding to the maximum value provided as the parameter.
	 * @param mostRecentTimestampMap most recent timestamp <fim_middle>","
	 * Sort the {@link ArrayList} in the value part of the {@link HashMap}
	 * @param tagTimestampMapAllFriend a map containing the tag and timestamps list.
	 * @return {@link Void}
	 ***/","
	 * Get the normalised values of the corresponding to the maximum value provided as the parameter.
	 * @param mostRecentTimestampMap most recent timestamp map  Sort the tag timestamp list in descending order  package com.re"
"<fim_prefix>estmapMapSingleFriend.keySet()) {
						if (!tagTimestampMapAllFriend.containsKey(tag)) {
							tagTimestampMapAllFriend.put(tag, new ArrayList<Long>());
						} else {
							tagTimestampMapAllFriend.get(tag).addAll(tagTimestmapMapSingleFriend.get(tag));
						}
					}
				}
			}
		}
		sortHashMapListSocialRecency(tagTimestampMapAllFriend);
		return tagTimestampMapAllFriend;
	}

	/**<fim_suffix>
	private HashMap<Integer, Long> getMostRecentTagTimestampSocialRecency(long timestamp,
			HashMap<Integer, ArrayList<Long>> tagTimestampMapAllFriend) {
		HashMap<Integer, Long> mostRecentTimestampMap = new HashMap<Integer, Long>();
		for (Integer tag : tagTimestampMapAllFriend.keySet()) {
			ArrayList<Long> tagTimestampList = tagTimestampMapAllFriend.get(tag);
			for (Long tagTimestam<fim_middle>","
	 * From the list of tag and their timestamp, get the Hashmap of tag mapped to it most recent timestamp 
	 * since the occurence of the given timestamp.
	 * @param timestamp the timestamp when the given 
	 * @param tagTimestampMapAllFriend get the tag to timestamps map for all the friend of a user.
	 * @return {@link HashMap} of tag to the most recent timestamp
	 **/","
	 * This method sorts the HashMap by the timestamp of the most recent tag.
	 * 
	 * @param tagTimestampMapAllFriend
	 *            HashMap of all tags and their timestamps.
	 */"
"<fim_prefix>alue = getMaxValue(mostRecentTimestampMap);
		HashMap<Integer, Double> resultMap = getNormalisedTagWeightSocialRecency(mostRecentTimestampMap, maxValue);		
		if (sort) {
			Map<Integer, Double> sortedResultMap = new TreeMap<Integer, Double>(new DoubleMapComparator(resultMap));
			sortedResultMap.putAll(resultMap);
			return sortedResultMap;
		} else {
			return resultMap;
		}
	}
	
	/**<fim_suffix>
	private HashMap<Integer, ArrayList<Long>> getAllFriendTagTimestampsMapSocialRecency(int userId) {
		HashMap<Integer, ArrayList<Long>> tagTimestampMapAllFriend = new HashMap<Integer, ArrayList<Long>>();
		String user = this.users.get(userId);
		List<String> friendList = network.get(user);
		if (friendList != null) {
			for (String friend : friendList) {
				HashMap<Integer, ArrayList<<fim_middle>","
	 * Merge all the tag timestamps for a users in a single Hashmap.
	 * @param userId user id of user for whom we want to get the tag timestamp map for all her friend.
	 * @return {@link HashMap} of tags and timestamp list of their usage.
	 * */","
	 * Returns the most recent timestamp for each tag.
	 * @param mostRecentTimestampMap
	 * @return
	 */"
"<fim_prefix>shMap<Integer, Double> getNormalisedTagWeightSocialRecency(HashMap<Integer, Long> mostRecentTimestampMap,
			Long maxValue) {
		HashMap<Integer, Double> resultMap = new HashMap<Integer, Double>();
		for (Integer tag : mostRecentTimestampMap.keySet()) {
			Double weight = (double) maxValue - mostRecentTimestampMap.get(tag);
			resultMap.put(tag, weight);
		}
		return resultMap;
	}

	/**<fim_suffix>
	private Long getMaxValue(HashMap<Integer, Long> mostRecentTimestampMap) {
		Long maxValue = new Long(0);
		for (Integer tag : mostRecentTimestampMap.keySet()) {
			if (maxValue < mostRecentTimestampMap.get(tag)) {
				maxValue = mostRecentTimestampMap.get(tag);
			} else {
				continue;
			}
		}
		return maxValue;
	}
}
<fim_middle>","
	 * Get the maximum value among all the values in a HashMap of comparable values.
	 * @param mostRecentTimestampMap {@link HashMap} the hashmap with each value corresponding 
	 * the timestamp when the hashmap was last used.
	 * @return the maximum value among all the Long values in value list.
	 * */","
	 * Get the max value of the map
	 * 
	 * @param mostRecentTimestampMap
	 * @return
	 */"
"<fim_prefix>} in the value part of the {@link HashMap}
	 * @param tagTimestampMapAllFriend a map containing the tag and timestamps list.
	 * @return {@link Void}
	 ***/
	private void sortHashMapListSocialRecency(HashMap<Integer, ArrayList<Long>> tagTimestampMapAllFriend) {
		for (Integer tag : tagTimestampMapAllFriend.keySet()) {
			Collections.sort(tagTimestampMapAllFriend.get(tag));
		}
	}

	/**<fim_suffix>
	private HashMap<Integer, Double> getNormalisedTagWeightSocialRecency(HashMap<Integer, Long> mostRecentTimestampMap,
			Long maxValue) {
		HashMap<Integer, Double> resultMap = new HashMap<Integer, Double>();
		for (Integer tag : mostRecentTimestampMap.keySet()) {
			Double weight = (double) maxValue - mostRecentTimestampMap.get(tag);
			resultMap.put(tag, weight);
		}
		return resultM<fim_middle>","
	 * Get the normalised values of the corresponding to the maximum value provided as the parameter.
	 * @param mostRecentTimestampMap most recent timestamp value when a hashtag is used corresponding to the given timestamp.
	 * @param maxValue maxValue of the recent timestamp.
	 * @return {@link HashMap} A hashmap which contains the normalised weights of the tags.
	 * **/","*
	 * This method normalises the weight of the tags in the {@link HashMap}
	 * @param mostRecentTimestampMap a map containing the tag and timestamp list.
	 * @param maxValue the maximum value of the timestamp list.
	 * @return a {@link HashMap} containing the tag and normalised weight."
"<fim_prefix>/**<fim_suffix>
/*
 * Created on Nov 17, 2011
 */

package com.bigdata.bop.solutions;

import org.apache.log4j.Logger;

import com.bigdata.bop.IValueExpression;
import com.bigdata.bop.engine.BOpStats;

/**
 * A utility class for logging type errors.
 * 
 * @author <a href=""mailto:thompsonbry@users.sourceforge.net"">Bryan Thompson</a>
 * @version $Id$
 */
public class TypeErrorLog {
<fim_middle>","

Copyright (C) SYSTAP, LLC DBA Blazegraph 2006-2016.  All rights reserved.

Contact:
     SYSTAP, LLC DBA Blazegraph
     2501 Calvert ST NW #106
     Washington, DC 20008
     licenses@blazegraph.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; version 2 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/","
 * 
 * @author <a href=""mailto:thompsonbry@users.sourceforge.net"">Bryan Thompson</a>
 * @version $Id$
 */"
"<fim_prefix>l,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
/*<fim_suffix>

package com.bigdata.bop.solutions;

import org.apache.log4j.Logger;

import com.bigdata.bop.IValueExpression;
import com.bigdata.bop.engine.BOpStats;

/**
 * A utility class for logging type errors.
 * 
 * @author <a href=""mailto:thompsonbry@users.sourceforge.net"">Bryan Thompson</a>
 * @version $Id$
 */
public class TypeErrorLog {

    private final static transient <fim_middle>","
 * Created on Nov 17, 2011
 */","*
 * 
 */"
"<fim_prefix>
import com.bigdata.bop.IValueExpression;
import com.bigdata.bop.engine.BOpStats;

/**
 * A utility class for logging type errors.
 * 
 * @author <a href=""mailto:thompsonbry@users.sourceforge.net"">Bryan Thompson</a>
 * @version $Id$
 */
public class TypeErrorLog {

    private final static transient Logger log = Logger
            .getLogger(TypeErrorLog.class);

    /**<fim_suffix>
    static public void handleTypeError(
            // final Logger log,
            final Throwable t,//
            final IValueExpression<?> expr,//
            final BOpStats stats//
            ) {

        stats.typeErrors.increment();
        
        if (log.isInfoEnabled())
            log.info(""Type error: expr="" + expr + "", cause="" + t);

    }

}
<fim_middle>","
     * Logs a type error.
     * 
     * @param t
     *            The cause.
     * @param expr
     *            The expression which resulted in a type error.
     * @param stats
     *            Used to report the type errors as a side-effect on
     *            {@link BOpStats#typeErrors}.
     */","
     * Private constructor to prevent instantiation.
     */"
"<fim_prefix>eived a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
/*
 * Created on Nov 17, 2011
 */

package com.bigdata.bop.solutions;

import org.apache.log4j.Logger;

import com.bigdata.bop.IValueExpression;
import com.bigdata.bop.engine.BOpStats;

/**<fim_suffix>
public class TypeErrorLog {

    private final static transient Logger log = Logger
            .getLogger(TypeErrorLog.class);

    /**
     * Logs a type error.
     * 
     * @param t
     *            The cause.
     * @param expr
     *            The expression which resulted in a type error.
     * @param stats
     *            Used to report the type errors as a<fim_middle>","
 * A utility class for logging type errors.
 * 
 * @author <a href=""mailto:thompsonbry@users.sourceforge.net"">Bryan Thompson</a>
 * @version $Id$
 */","
 * Logs type errors.
 * 
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package com.altran.general.integration.xtextsirius.runtime.converter.internal;

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;

public class RuntimeConverterActivator implements BundleActivator {
	
	private static BundleContext context;
	
	static BundleContext getContext() {
		return context;
	}
	
	@Override
	public void start(final <fim_middle>","
 * Copyright (C) 2018 Altran Netherlands B.V.
 * 
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 */","
 * 
 */"
"<fim_prefix>package com.hspedu;

/**<fim_suffix>
public class Dog {
}
<fim_middle>","
 * @author 韩顺平
 * @version 1.0
 */","
 * Created by <NAME> on 10/10/2016.
 */"
"<fim_prefix>/*<fim_suffix>

package edu.kit.iti.algover.swing.util;

import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import java.awt.*;

public class Underline extends AbstractBorder {

    private Color color;

    public Underline(Color color) {
        this.color = color;
    }

    @Override
    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height)<fim_middle>","
 * This file is part of AlgoVer.
 *
 * Copyright (C) 2015-2018 Karlsruhe Institute of Technology
 *
 */","*
 * Created by lucaskrauss at 02.02.2017
 */"
"<fim_prefix>/*<fim_suffix>
package inetsoft.web.portal.model.database.graph;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties
public class TableDetailJoinInfo extends TableJoinInfo {

   public String getSourceColumn() {
      return sourceColumn;
   }

   public void setSourceColumn(String sourceColumn) {
      this.sourceColumn = sourceColumn;
   }

   public String getTar<fim_middle>","
 * This file is part of StyleBI.
 * Copyright (C) 2024  InetSoft Technology
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * 
 */"
"<fim_prefix>package net.mcapi.uuid.utils;

import java.util.UUID;

import net.mcapi.uuid.UUIDAPI;

import org.json.simple.parser.JSONParser;

/**<fim_suffix>
public class UUIDUtils {

    public static JSONParser PARSER = new JSONParser();

    /**
     * Convert a string into a string that {@link UUID#fromString} will accept.
     *
     * @param uuid uuid string (without dashes)
     * @return a uuid compatible string
     */
    public static String convertUUIDToJava(String uuid) {
        if(uuid.contains(""-"")) {
            return uui<fim_middle>","
 * Utility methods for UUIDs.
 */","
 * Utility class for converting between UUIDs and"
"<fim_prefix>package net.mcapi.uuid.utils;

import java.util.UUID;

import net.mcapi.uuid.UUIDAPI;

import org.json.simple.parser.JSONParser;

/**
 * Utility methods for UUIDs.
 */
public class UUIDUtils {

    public static JSONParser PARSER = new JSONParser();

    /**<fim_suffix>
    public static String convertUUIDToJava(String uuid) {
        if(uuid.contains(""-"")) {
            return uuid;
        }

        if(uuid.length() < 32) {
            uuid = UUIDAPI.getUUIDString(uuid);
        }

        uuid = insertChar(uuid, '-', 8);
        uuid = insertChar(uuid, '-', 13);
        uuid = insertChar(uuid, '-', 18);
        uuid = insertChar(uuid, '-', 23);

<fim_middle>","
     * Convert a string into a string that {@link UUID#fromString} will accept.
     *
     * @param uuid uuid string (without dashes)
     * @return a uuid compatible string
     */","
     * Inserts a character at a specific index in a string.
     *
     * @param str The string to insert the character into.
     * @param c The character to insert.
     * @"
"<fim_prefix>/*<fim_suffix>
package com.sun.max.jdwp.vm.data;

/**
 * Class representing an array of machine code instructions. The reason for having an explicit class wrapped around the array is that this makes it possible to
 * serialize the whole array as one object.
 *
 */
public class MachineCodeInstructionArray extends AbstractSerializableObject {
    private final MachineCodeInstruction[] array;

    publ<fim_middle>","
 * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>f the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.sun.max.jdwp.vm.data;

/**<fim_suffix>
public class MachineCodeInstructionArray extends AbstractSerializableObject {
    private final MachineCodeInstruction[] array;

    public MachineCodeInstructionArray(MachineCodeInstruction[] array) {
        this.array = array;
    }

    public MachineCodeInstruction[] getArray() {
        return array;
    }
}
<fim_middle>","
 * Class representing an array of machine code instructions. The reason for having an explicit class wrapped around the array is that this makes it possible to
 * serialize the whole array as one object.
 *
 */","
 * An array of machine code instructions.
 */"
"<fim_prefix>/**<fim_suffix>
package com.bigdata.rdf.graph.util;

/**
 * Factory for {@link IGraphFixture}.
 */
public interface IGraphFixtureFactory {

    /**
     * Factory method to create a new {@link IGraphFixture}.
     * 
     * @throws Exception
     */
    IGraphFixture newGraphFixture() throws Exception;

}<fim_middle>","
   Copyright (C) SYSTAP, LLC 2006-2012.  All rights reserved.

   Licensed under the Apache License, Version 2.0 (the ""License"");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/","
 * Copyright (C) 2015 <NAME> (<EMAIL>)
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>g/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package com.bigdata.rdf.graph.util;

/**<fim_suffix>
public interface IGraphFixtureFactory {

    /**
     * Factory method to create a new {@link IGraphFixture}.
     * 
     * @throws Exception
     */
    IGraphFixture newGraphFixture() throws Exception;

}<fim_middle>","
 * Factory for {@link IGraphFixture}.
 */","
 * Interface for creating new {@link IGraphFixture}"
"<fim_prefix>are
   distributed under the License is distributed on an ""AS IS"" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package com.bigdata.rdf.graph.util;

/**
 * Factory for {@link IGraphFixture}.
 */
public interface IGraphFixtureFactory {

    /**<fim_suffix>
    IGraphFixture newGraphFixture() throws Exception;

}<fim_middle>","
     * Factory method to create a new {@link IGraphFixture}.
     * 
     * @throws Exception
     */","
     * Create a new {@link IGraphFixture}.
     *
     * @return a new {@link IGraphFixture}
 "
"<fim_prefix>/*<fim_suffix>

package com.codebutler.farebot.transit.seq_go;

import android.content.Context;

import com.codebutler.farebot.base.util.DBUtil;

/**
 * Database functionality for SEQ Go Cards
 */
public class SeqGoDBUtil extends DBUtil {
    public static final String TABLE_NAME = ""stops"";
    public static final String COLUMN_ROW_ID = ""id"";
    public static final String COLUMN_ROW_NAME = ""name"";
<fim_middle>","
 * SeqGoDBUtil.java
 *
 * This file is part of FareBot.
 * Learn more at: https://codebutler.github.io/farebot/
 *
 * Copyright (C) 2016 Eric Butler <eric@codebutler.com>
 * Copyright (C) 2016 Michael Farrell <micolous+git@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by zach on 11/29/15.
 */"
"<fim_prefix>ANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.codebutler.farebot.transit.seq_go;

import android.content.Context;

import com.codebutler.farebot.base.util.DBUtil;

/**<fim_suffix>
public class SeqGoDBUtil extends DBUtil {
    public static final String TABLE_NAME = ""stops"";
    public static final String COLUMN_ROW_ID = ""id"";
    public static final String COLUMN_ROW_NAME = ""name"";
    // TODO: Implement travel zones
    //public static final String COLUMN_ROW_ZONE = ""zone"";
    public static final String COLUMN_ROW_LON = ""x"";
    public static final String COL<fim_middle>","
 * Database functionality for SEQ Go Cards
 */","
 * Created by wschiavelli on"
"<fim_prefix>/*<fim_suffix>

package com.zrp200.rkpd2.sprites;

import com.zrp200.rkpd2.Assets;
import com.zrp200.rkpd2.actors.Char;
import com.zrp200.rkpd2.actors.mobs.CrystalWisp;
import com.zrp200.rkpd2.effects.Beam;
import com.zrp200.rkpd2.effects.TorchHalo;
import com.zrp200.rkpd2.scenes.GameScene;
import com.zrp200.rkpd2.tiles.DungeonTilemap;
import com.watabou.noosa.Game;
import com.watabou.noosa.TextureF<fim_middle>","
 * Pixel Dungeon
 * Copyright (C) 2012-2015 Oleg Dolya
 *
 * Shattered Pixel Dungeon
 * Copyright (C) 2014-2024 Evan Debenham
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * Created by lizaro on 11/30/16.
 */"
"<fim_prefix>package org.autowebauth.client.fx.business.configuration.boundary;

import javax.annotation.PreDestroy;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.persistence.EntityManager;

import org.autowebauth.client.fx.business.configuration.entity.Configuration;
import org.slf4j.Logger;

/**<fim_suffix>
@ApplicationScoped
public class ConfigurationBoundary
{

    @Inject
    private EntityManager em;

    @Inject
    private Logger log;

    @PreDestroy
    void shutdown()
    {
        this.em.close();
    }

    public Configuration loadConfiguration()
    {
        Configuration c = this.em.find(Configuration.class, Configuration.ID);
        if (c == null)
        {
            c<fim_middle>","
 * 
 * {@code Boundary} to store {@link Configuration} entities.
 * 
 * @author Andrin Bertschi
 * @since 09.02.2014
 * 
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package cz.cvut.kbss.jopa.test.integration;

import cz.cvut.kbss.jopa.exceptions.RollbackException;
import cz.cvut.kbss.jopa.model.annotations.Id;
import cz.cvut.kbss.jopa.model.annotations.MappedSuperclass;
import cz.cvut.kbss.jopa.model.annotations.OWLAnnotationProperty;
import cz.cvut.kbss.jopa.model.annotations.OWLClass;
import cz.cvut.kbss.jopa.model.annotations.PrePersist;
impor<fim_middle>","
 * JOPA
 * Copyright (C) 2024 Czech Technical University in Prague
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */","*
 * @author <NAME> <<EMAIL>>
 */"
"<fim_prefix>vd.getAssertions()
                                                     .contains(Assertion.createDataPropertyAssertion(URI.create(DC.Terms.MODIFIED), false))));
        assertTrue(value.stream().anyMatch(avd -> avd.getAssertions()
                                                     .contains(Assertion.createAnnotationPropertyAssertion(URI.create(RDFS.LABEL), false))));
    }

    /**<fim_suffix>
    @Test
    void oomHandlesMapOfInstances() throws Exception {
        final Properties properties = mock(Properties.class);
        when(connectionMock.properties()).thenReturn(properties);
        final OWLClassB entity = new OWLClassB();
        entity.setUri(Generators.generateUri());
        entity.setProperties(Map.of(Vocabulary.P_Q_STRING_ATTRIBUTE, Set.of(""Test"")));
        <fim_middle>","
     * Bug #264
     */","
     * Test that the OOM handler handles a map"
"<fim_prefix>ation(OWLClass.class).iri();
        return Arrays.asList(new AxiomImpl<>(nr, Assertion.createClassAssertion(false),
                        new Value<>(NamedResource.create(typeIri))),
                new AxiomImpl<>(nr,
                        Assertion.createAnnotationPropertyAssertion(URI.create(RDFS.LABEL), false),
                        new Value<>(""Instance1"")));
    }

    /**<fim_suffix>
    @Test
    void mergeDoesNotOverwriteCacheWithNonMergeInstance() throws OntoDriverException {
        final OWLClassD d = new OWLClassD(Generators.generateUri());
        final OWLClassA a = new OWLClassA(Generators.generateUri());
        d.setOwlClassA(a);
        final String str = ""StringValue"";
        a.setStringAttribute(str);
        em.getTransaction().begin();
        em.<fim_middle>","
     * Bug #2.
     */","
     * Test that the merge method does not overwrite the cache"
"<fim_prefix>   }

    private void initAxiomsForOwlClassD(NamedResource subject) throws OntoDriverException {
        final Axiom<?> classAssertion = new AxiomImpl<>(subject, Assertion.createClassAssertion(false),
                new Value<>(NamedResource.create(Vocabulary.C_OWL_CLASS_D)));
        doReturn(true).when(connectionMock).contains(classAssertion, Collections.emptySet());
    }

    /**<fim_suffix>
    @Test
    void readingInstanceReferenceWithoutCorrectTypeDoesNotAddAnythingToPluralAttribute() throws OntoDriverException {
        final URI owner = Generators.generateUri();
        initAxiomsForNullReferenceLoad(owner);
        final OWLClassJ result = em.find(OWLClassJ.class, owner);
        assertNotNull(result);
        assertTrue(result.getOwlClassA().isEmpty());
    }

   <fim_middle>","
     * When a property value (instance reference) points to an individual which cannot be loaded as the target type
     * entity, nothing should be added into a plural attribute collection. The bug caused {@code null} to be added.
     */","
     * Tests that a null reference is not added to the plural attribute of an instance.
     *
     * @throws OntoDriverException
     */"
"<fim_prefix>mport static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**
 * Test for discovered bugs and their fixes.
 */
@ExtendWith(MockitoExtension.class)
class BugTest extends IntegrationTestBase {

    /*<fim_suffix>
    @Test
    void hashCodeWithAttributeDoesNotCauseInfiniteLoop() throws Exception {
        final URI uri = Generators.generateUri();
        when(connectionMock.find(any())).thenReturn(initAxiomsForR(uri));

        final OWLClassR r = em.find(OWLClassR.class, uri);
        assertNotEquals(0, r.hashCode());
    }

    private Collection<Axiom<?>> initAxiomsForR(URI uri) {
        f<fim_middle>"," Bug: using an attribute in hashCode/equals caused an infinite loop, because the BeanListenerAspect tried
     to check whether it was necessary to load the field, which caused instance lookup to use hashCode again
     */","*
     * The connection mock.
     */"
"<fim_prefix>xiomDescriptor fDesc = new AxiomDescriptor(ownerResource);
        fDesc.addAssertion(classAssertion);
        fDesc.addAssertion(opAssertion);
        when(connectionMock.find(fDesc))
                .thenReturn(Collections.singletonList(new AxiomImpl<>(ownerResource, classAssertion,
                        new Value<>(NamedResource.create(Vocabulary.C_OWL_CLASS_J)))));
    }

    /**<fim_suffix>
    @Test
    void parentLifecycleCallbacksAreInvokedForEntity() {
        em.getTransaction().begin();
        final ChildWithCallback instance = new ChildWithCallback();
        instance.uri = Generators.generateUri();
        instance.label = ""Test"";
        em.persist(instance);
        assertTrue(instance.callbackInvoked);
        assertTrue(instance.childCallbackInvoked);
    }
<fim_middle>","
     * Bug #49
     */","
     * Test that the parent lifecycle callbacks are invoked for"
"<fim_prefix>)), eAssertion, new Value<>(NamedResource.create(reference.getUri())))
        );
        when(connectionMock.find(ownerDesc)).thenReturn(ownerAxioms);

        em.getTransaction().begin();
        final OWLClassO subject = em.find(OWLClassO.class, owner.getUri());
        em.merge(subject);
        verify(connectionMock, never()).update(any(AxiomValueDescriptor.class));
    }

    /**<fim_suffix>
    @Test
    void isInferredTriggersLazyLoadingForLazyLoadingProxy() throws Exception {
        final OWLClassL owner = new OWLClassL(Generators.generateUri());
        final OWLClassA ref = Generators.generateOwlClassA();
        final NamedResource subject = NamedResource.create(owner.getUri());
        final Assertion classAssertion = Assertion.createClassAssertion(false);
       <fim_middle>","
     * Bug #252
     */","
     * Tests that the inferred axiom is not added"
"<fim_prefix>getUri())), axiomCaptor.getValue().getValue());
        final ArgumentCaptor<AxiomDescriptor> captor = ArgumentCaptor.forClass(AxiomDescriptor.class);
        verify(connectionMock, atLeastOnce()).find(captor.capture());
        assertTrue(captor.getAllValues().stream()
                         .anyMatch(ad -> ad.getSubject().equals(NamedResource.create(ref.getUri()))));
    }

    /**<fim_suffix>
    @Test
    void updateRegistersChangesByInheritedPreUpdate() throws Exception {
        final OWLClassS entity = new OWLClassS();
        entity.setUri(Generators.generateUri());
        final NamedResource subject = NamedResource.create(entity.getUri());
        final List<Axiom<?>> axioms = new ArrayList<>();
        final Axiom<?> classAssertion = new AxiomImpl<>(subject, Assert<fim_middle>","
     * Bug #265
     */","
     * Test that the update method registers changes by inherited"
"<fim_prefix> static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

/**<fim_suffix>
@ExtendWith(MockitoExtension.class)
class BugTest extends IntegrationTestBase {

    /* Bug: using an attribute in hashCode/equals caused an infinite loop, because the BeanListenerAspect tried
     to check whether it was necessary to load the field, which caused instance lookup to use hashCode again
     */
    @Test
    void hashCodeWithAttributeDoesNotCauseInfiniteLoop() throws Exc<fim_middle>","
 * Test for discovered bugs and their fixes.
 */","
 * @author <NAME>
 */"
"<fim_prefix>ion);
        entityDesc.addAssertion(Assertion.createDataPropertyAssertion(URI.create(Vocabulary.P_F_STRING_ATTRIBUTE), true));
        doReturn(axioms).when(connectionMock).find(entityDesc);

        final AxiomDescriptor setDesc = new AxiomDescriptor(subject);
        setDesc.addAssertion(aSetAssertion);
        doReturn(aSetAxioms).when(connectionMock).find(setDesc);
    }

    /**<fim_suffix>
    @Test
    void cascadeMergeOnLazyLoadingProxyDoesNothing() throws Exception {
        final OWLClassO owner = new OWLClassO(Generators.generateUri());
        final OWLClassE reference = new OWLClassE();
        reference.setUri(Generators.generateUri());
        owner.setOwlClassE(reference);
        final Assertion classAssertion = Assertion.createClassAssertion(false);
        <fim_middle>","
     * Bug #248
     */","
     * Test that the lazy loading proxy does not cascade"
"<fim_prefix>/*<fim_suffix>

package com.torodb.mongodb.repl.topology;

import com.torodb.common.util.RetryHelper.ExceptionHandler;
import com.torodb.core.exceptions.user.UserException;
import com.torodb.core.retrier.Retrier;
import com.torodb.core.retrier.RetrierGiveUpException;
import com.torodb.core.retrier.SmartRetrier;

import java.util.EnumSet;
import java.util.concurrent.Callable;
import java.util.functio<fim_middle>","
 * ToroDB
 * Copyright Â© 2014 8Kdata Technology (www.8kdata.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package io.github.zerthick.protectionperms.events.listeners.item;

import io.github.zerthick.protectionperms.PermHandler;
import org.spongepowered.api.entity.EntityTypes;
import org.spongepowered.api.entity.Item;
import org.spongepowered.api.entity.living.player.Player;
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.filter.cause.Root;
import org.spong<fim_middle>","
 * Copyright (C) 2016  Zerthick
 *
 * This file is part of ProtectionPerms.
 *
 * ProtectionPerms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * ProtectionPerms is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProtectionPerms.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by Zerthick on 10/11/2015.
 */"
"<fim_prefix>/*<fim_suffix>
package com.ravenwolf.nnypdcn.levels;

import com.ravenwolf.nnypdcn.items.misc.Amulet;
import com.ravenwolf.nnypdcn.levels.painters.Painter;
import com.ravenwolf.nnypdcn.visuals.Assets;
import com.watabou.noosa.Scene;
import com.watabou.utils.Random;

import java.util.Arrays;

public class LastLevel extends Level {

	private static final int SIZE = 9;
	
	{
//        viewDistance = 8;
<fim_middle>","
 * Pixel Dungeon
 * Copyright (C) 2012-2015 Oleg Dolya
 *
 * Yet Another Pixel Dungeon
 * Copyright (C) 2015-2019 Considered Hamster
 *
 * No Name Yet Pixel Dungeon
 * Copyright (C) 2018-2019 RavenWolf
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * Created by Section on 10/9/2015.
 */"
"<fim_prefix>/*<fim_suffix>

package se.inera.intyg.webcert.web.csintegration.integration.dto;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import java.util.List;
import lombok.Builder;
import lombok.Value;
import se.inera.intyg.webcert.web.csintegration.integration.dto.CertificateServiceTypeInfoResponseDTO.CertificateService<fim_middle>","
 * Copyright (C) 2024 Inera AB (http://www.inera.se)
 *
 * This file is part of sklintyg (https://github.com/sklintyg).
 *
 * sklintyg is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * sklintyg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>
/**<fim_suffix>


package org.lunifera.dsl.xtext.lazyresolver.scoping;

import java.util.Collections;
import java.util.Map;

import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractScope;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common<fim_middle>","
 * Copyright (c) 2011 - 2015, Lunifera GmbH (Gross Enzersdorf), Loetz KG (Heidelberg)
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *         Florian Pirchner - Initial implementation
 */","
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */"
"<fim_prefix>/*<fim_suffix>

package com.touhoupixel.touhoupixeldungeon.items.potions;

import com.touhoupixel.touhoupixeldungeon.Dungeon;
import com.touhoupixel.touhoupixeldungeon.actors.buffs.Buff;
import com.touhoupixel.touhoupixeldungeon.actors.buffs.Haste;
import com.touhoupixel.touhoupixeldungeon.actors.buffs.Paralysis;
import com.touhoupixel.touhoupixeldungeon.actors.buffs.Silence;
import com.touhoupixel.<fim_middle>","
 * Pixel Dungeon
 * Copyright (C) 2012-2015 Oleg Dolya
 *
 * Shattered Pixel Dungeon
 * Copyright (C) 2014-2021 Evan Debenham
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * Created by <NAME> on 11/12/2016.
 */"
"<fim_prefix>/**<fim_suffix>

package com.od.filtertable;

/**
 * Avoids generating unnecessary String instances using String.substring(x,x)
 * Otherwise each indexing generates thousands of short lived String instances
 */
class MutableCharSequence implements CharSequence {

    public static final String EMPTY_SEGMENT = """";
    private CharSequence segment;
    private int start = 0;
    private in<fim_middle>","
 *  Copyright (C) Nick Ebbutt September 2009
 *
 *  This file is part of ObjectDefinitions Ltd. FilterTable.
 *  nick@objectdefinitions.com
 *  http://www.objectdefinitions.com/filtertable
 *
 *  FilterTable is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  ObjectDefinitions Ltd. FilterTable is distributed in the hope that it will
 *  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with ObjectDefinitions Ltd. FilterTable.
 *  If not, see <http://www.gnu.org/licenses/>.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with ObjectDefinitions Ltd. FilterTable.
 *  If not, see <http://www.gnu.org/licenses/>.
 */

package com.od.filtertable;

/**<fim_suffix>
class MutableCharSequence implements CharSequence {

    public static final String EMPTY_SEGMENT = """";
    private CharSequence segment;
    private int start = 0;
    private int end = 0;

    public MutableCharSequence() {}

    public int length() {
        return end - start;
    }

    public int totalSequenceLength() {
        return segment.length();
    }

 <fim_middle>","
 * Avoids generating unnecessary String instances using String.substring(x,x)
 * Otherwise each indexing generates thousands of short lived String instances
 */","
 * @author <NAME>
 * @version $Revision: 1.1 $
 */"
"<fim_prefix>;

  /**
   * A means to query the current id position of the journal without repositioning.
   * This constant must be honored by all {@code Entry<T>} storage implementations
   * regardless of internal id type.
   */
  static final String Query = ""="";

  /** The default number of retries used to prevent gaps in feed items. */
  static final int DefaultGapPreventionRetries = 3;

  /**<fim_suffix>
  static final long DefaultGapPreventionRetryInterval = 10L;


  /**
   * Closes this reader.
   */
  void close();

  /**
   * Eventually answers the name of this reader.
   *
   * @return the {@code Completes<String>} reader's name
   */
  Completes<String> name();

  /**
   * Eventually answers the next available {@code Entry<T>} instance or null if none is currently available.
   <fim_middle>", The default interval between retries used to prevent gaps in feed items. */, The default interval between retries used to prevent gaps in feed items. */
"<fim_prefix>rnal id type.
   */
  static final String Query = ""="";

  /** The default number of retries used to prevent gaps in feed items. */
  static final int DefaultGapPreventionRetries = 3;

  /** The default interval between retries used to prevent gaps in feed items. */
  static final long DefaultGapPreventionRetryInterval = 10L;


  /**
   * Closes this reader.
   */
  void close();

  /**<fim_suffix>
  Completes<String> name();

  /**
   * Eventually answers the next available {@code Entry<T>} instance or null if none is currently available.
   * The next {@code Entry<T>} instance is relative to the one previously read by the same reader
   * instance, or the first {@code Entry<T>} instance in the storage if none have previously
   * been read. Note that this is the least efficien<fim_middle>","
   * Eventually answers the name of this reader.
   *
   * @return the {@code Completes<String>} reader's name
   */","
   * Returns the name of the feed."
"<fim_prefix>faultGapPreventionRetries = 3;

  /** The default interval between retries used to prevent gaps in feed items. */
  static final long DefaultGapPreventionRetryInterval = 10L;


  /**
   * Closes this reader.
   */
  void close();

  /**
   * Eventually answers the name of this reader.
   *
   * @return the {@code Completes<String>} reader's name
   */
  Completes<String> name();

  /**<fim_suffix>
  Completes<T> readNext();

  /**
   * Eventually answers the next available {@code Entry<T>} instance or null if none is currently available.
   * The next {@code Entry<T>} instance is relative to the one previously read by the same reader
   * instance, or the first {@code Entry<T>} instance in the storage if none have previously
   * been read. Note that this is the least efficient<fim_middle>","
   * Eventually answers the next available {@code Entry<T>} instance or null if none is currently available.
   * The next {@code Entry<T>} instance is relative to the one previously read by the same reader
   * instance, or the first {@code Entry<T>} instance in the storage if none have previously
   * been read. Note that this is the least efficient read, because only one {@code Entry<T>} will
   * be answered, but it may be useful for test purposes or a storage that is
   * appended to slowly.
   * @return the {@code Completes<T>} next available entry or null if none
   */","
   * Eventually answers the next available {@code Entry<T>} instance or null if none is currently available.
   * The next {@code Entry<T>} instance is relative to the one previously read by the same reader
   * instance, or the first {@code Entry<T>} instance in the storage if none have previously
   * been read. Note that this is the least efficient way to read entries.
   *  Add a comment about the default number of retries.  /*
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License""); you may not
 * use this file except in compliance with the License. You"
"<fim_prefix>ause only one {@code Entry<T>} will
   * be answered, but it may be useful for test purposes or a storage that is
   * appended to slowly.
   *
   * @param fromId the String id of the {@code Entry<T>} instance to which the seek prepares to next read
   *
   * @return the {@code Completes<T>} next available entry or null if none
   */
  Completes<T> readNext(final String fromId);

  /**<fim_suffix>
  Completes<List<T>> readNext(final int maximumEntries);

  /**
   * Eventually answers the next available {@code Entry<T>} instances as a {@code List}, which may be
   * empty if none are currently available. The next {@code Entry<T>} instances are relative to the one(s)
   * previously read by the same reader instance, or the first {@code Entry<T>} instance in the storage
   * if no<fim_middle>","
   * Eventually answers the next available {@code Entry<T>} instances as a {@code List}, which may be
   * empty if none are currently available. The next {@code Entry<T>} instances are relative to the one(s)
   * previously read by the same reader instance, or the first {@code Entry<T>} instance in the storage
   * if none have previously been read. Note that this is the most efficient read, because up to
   * {@code maximumEntries} {@code Entry<T>} instances will be answered. The {@code maximumEntries} should be used to indicate
   * the total number of {@code Entry<T>} instances that can be consumed in a timely fashion by the sender,
   * which is a natural back-pressure mechanism.
   *
   * @param maximumEntries the int indicating the maximum number of {@code Entry<T>} instances to read
   *
   * @return the {@code Completes<List<T>>} of at most maximumEntries or empty if none
   */","
   * Eventually answers the next available {@code Entry<T>} instances as a {@code List}, which may be
   * empty if none are currently available. The next {@code Entry<T>} instances are relative to the one(s)
   * previously read by the same reader instance, or the first {@code Entry<T>} instance in the storage
   * if no entries have been read yet.  Add javadoc for readNext(int)  /*
 * Copyright (c) 2014 Spotify AB.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * ""License""); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *"
"<fim_prefix>T>} instances that can be consumed in a timely fashion by the sender,
   * which is a natural back-pressure mechanism.
   *
   * @param maximumEntries the int indicating the maximum number of {@code Entry<T>} instances to read
   *
   * @return the {@code Completes<List<T>>} of at most maximumEntries or empty if none
   */
  Completes<List<T>> readNext(final int maximumEntries);

  /**<fim_suffix>
  Completes<List<T>> readNext(final String fromId, final int maximumEntries);

  /**
   * Rewinds the reader so that the next available {@code Entry<T>} is the first one in the storage.
   * Sending {@code rewind()} is the same as sending {@code seekTo(Beginning)}.
   */
  void rewind();

  /**
   * Eventually answers the new position of the reader after attempting to seek to the {@co<fim_middle>","
   * Eventually answers the next available {@code Entry<T>} instances as a {@code List}, which may be
   * empty if none are currently available. The next {@code Entry<T>} instances are relative to the one(s)
   * previously read by the same reader instance, or the first {@code Entry<T>} instance in the storage
   * if none have previously been read. Note that this is the most efficient read, because up to
   * {@code maximumEntries} {@code Entry<T>} instances will be answered. The {@code maximumEntries} should be used to indicate
   * the total number of {@code Entry<T>} instances that can be consumed in a timely fashion by the sender,
   * which is a natural back-pressure mechanism.
   *
   * @param fromId the String id of the {@code Entry<T>} instance to which the seek prepares to next read
   * @param maximumEntries the int indicating the maximum number of {@code Entry<T>} instances to read
   *
   * @return the {@code Completes<List<T>>} of at most maximumEntries or empty if none
   */","
   * Reads the next {@code Entry<T>} from the storage starting from the entry with the given id.
   * Sending {@code readNext(id)} is the same as sending {@code seekTo(id)}.
   *
   * @param fromId the id of the entry to start reading from
   * @param maximumEntries the int indicating the maximum number of {@code Entry<T>} instances to read
   *
   * @return the {@code Completes<List<T>>} of at most maximumEntries or empty if none
   */"
"<fim_prefix>
   * must be honored by all {@code Entry<T>} storage implementations regardless
   *  of internal id type.
   */
  static final String Beginning = ""<"";

  /**
   * A means to seek past the last id position of the storage. This constant
   * must be honored by all {@code Entry<T>} storage implementations regardless
   * of internal id type.
   */
  static final String End = "">"";

  /**<fim_suffix>
  static final String Query = ""="";

  /** The default number of retries used to prevent gaps in feed items. */
  static final int DefaultGapPreventionRetries = 3;

  /** The default interval between retries used to prevent gaps in feed items. */
  static final long DefaultGapPreventionRetryInterval = 10L;


  /**
   * Closes this reader.
   */
  void close();

  /**
   * Eventually an<fim_middle>","
   * A means to query the current id position of the journal without repositioning.
   * This constant must be honored by all {@code Entry<T>} storage implementations
   * regardless of internal id type.
   */","
   * A means to seek to a specific id position of the storage. This constant
   * must be honored by all {@code Entry<T>} storage implementations regardless
   * of internal id type.
   */"
"<fim_prefix>eryEntryIdsExpression = queryEntryIdsExpression;
      this.queryEntryExpression = queryEntryExpression;
      this.queryCount = queryCount;
      this.queryLatestOffset = queryLatestOffset;
      this.queryUpdateCurrentOffset = queryUpdateCurrentOffset;
    }

    @SuppressWarnings(""unchecked"")
    public <C> C specificConfiguration() {
      return (C) configuration;
    }
  }

  /**<fim_suffix>
  public static class GapPrevention {
    /**
     * Answer the number of retries used to prevent gaps in {@code Entry} instances
     * due to race conditions in database sequences and transactions.
     * @return int
     */
    public int retries() {
      return DefaultGapPreventionRetries;
    }

    /**
     * Answer the interval between retries used to prevent gaps in {@code En<fim_middle>","
   * Provides values to assist in detecting and preventing
   * gaps between entries in a stream.
   */","
   * Answer the number of retries used to prevent gaps in {@code Entry} instances
   * due to race conditions"
"<fim_prefix>* @param fromId the String id of the {@code Entry<T>} instance to which the seek prepares to next read
   * @param maximumEntries the int indicating the maximum number of {@code Entry<T>} instances to read
   *
   * @return the {@code Completes<List<T>>} of at most maximumEntries or empty if none
   */
  Completes<List<T>> readNext(final String fromId, final int maximumEntries);

  /**<fim_suffix>
  void rewind();

  /**
   * Eventually answers the new position of the reader after attempting to seek to the {@code Entry<T>} of the
   * given id, such that the next available {@code Entry<T>} is the one of the given id. If the id does not (yet)
   * exist, the position is set to just beyond the last {@code Entry<T>} instance in the journal (see {@code End}), or to
   * being the f<fim_middle>","
   * Rewinds the reader so that the next available {@code Entry<T>} is the first one in the storage.
   * Sending {@code rewind()} is the same as sending {@code seekTo(Beginning)}.
   */","
   * Rewinds the reader to the beginning of the journal.
   */"
"<fim_prefix>s.queryLatestOffset = queryLatestOffset;
      this.queryUpdateCurrentOffset = queryUpdateCurrentOffset;
    }

    @SuppressWarnings(""unchecked"")
    public <C> C specificConfiguration() {
      return (C) configuration;
    }
  }

  /**
   * Provides values to assist in detecting and preventing
   * gaps between entries in a stream.
   */
  public static class GapPrevention {
    /**<fim_suffix>
    public int retries() {
      return DefaultGapPreventionRetries;
    }

    /**
     * Answer the interval between retries used to prevent gaps in {@code Entry}
     * instances due to race conditions in database sequences and transactions.
     * @return long
     */
    public long retryInterval() {
      return DefaultGapPreventionRetryInterval;
    }
  }
}
<fim_middle>","
     * Answer the number of retries used to prevent gaps in {@code Entry} instances
     * due to race conditions in database sequences and transactions.
     * @return int
     */","
     * Answer the number of retries used to prevent gaps in {@code Entry}
     * instances due to race conditions in database sequences and transactions.
     * @return int
     */"
"<fim_prefix>@code Entry<T>} instance to which the seek prepares to next read
   *
   * @return {@code Completes<String>}
   */
  Completes<String> seekTo(final String id);

  /**
   * Eventually answer the size in {@code Entry} instances. If the size
   * is not known or not queryable, the value of {@code -1L} is answered.
   * @return {@code Completes<Long>}
   */
  Completes<Long> size();

  /**<fim_suffix>
  Completes<Stream> streamAll();

  /**
   * Provides advice for the specific implementation.
   */
  public static final class Advice {
    public final Object configuration;
    public final Class<? extends Actor> entryReaderClass;
    public final String queryCount;
    public final String queryLatestOffset;
    public final String queryEntryBatchExpression;
    public final String<fim_middle>","
   * Answer a new {@code Stream} for flowing all {@code Entry} instances in total time order.
   * @return {@code <Completes<Stream>>}
   */","
   * Eventually answer the stream of {@code Entry} instances.
   * @return {@code Completes<Stream>}
   */"
"<fim_prefix>ry<T>} storage implementations
   * regardless of internal id type.
   */
  static final String Query = ""="";

  /** The default number of retries used to prevent gaps in feed items. */
  static final int DefaultGapPreventionRetries = 3;

  /** The default interval between retries used to prevent gaps in feed items. */
  static final long DefaultGapPreventionRetryInterval = 10L;


  /**<fim_suffix>
  void close();

  /**
   * Eventually answers the name of this reader.
   *
   * @return the {@code Completes<String>} reader's name
   */
  Completes<String> name();

  /**
   * Eventually answers the next available {@code Entry<T>} instance or null if none is currently available.
   * The next {@code Entry<T>} instance is relative to the one previously read by the same reader
   * <fim_middle>","
   * Closes this reader.
   */","
   * Creates a new {@code Reader<T"
"<fim_prefix> first {@code Entry<T>} instance in the storage if none have previously
   * been read. Note that this is the least efficient read, because only one {@code Entry<T>} will
   * be answered, but it may be useful for test purposes or a storage that is
   * appended to slowly.
   * @return the {@code Completes<T>} next available entry or null if none
   */
  Completes<T> readNext();

  /**<fim_suffix>
  Completes<T> readNext(final String fromId);

  /**
   * Eventually answers the next available {@code Entry<T>} instances as a {@code List}, which may be
   * empty if none are currently available. The next {@code Entry<T>} instances are relative to the one(s)
   * previously read by the same reader instance, or the first {@code Entry<T>} instance in the storage
   * if none have pre<fim_middle>","
   * Eventually answers the next available {@code Entry<T>} instance or null if none is currently available.
   * The next {@code Entry<T>} instance is relative to the one previously read by the same reader
   * instance, or the first {@code Entry<T>} instance in the storage if none have previously
   * been read. Note that this is the least efficient read, because only one {@code Entry<T>} will
   * be answered, but it may be useful for test purposes or a storage that is
   * appended to slowly.
   *
   * @param fromId the String id of the {@code Entry<T>} instance to which the seek prepares to next read
   *
   * @return the {@code Completes<T>} next available entry or null if none
   */","
   * Eventually answers the next available {@code Entry<T>} instances as a {@code List}, which may be
   * empty if none are currently available. The next {@code Entry<T>} instances are relative to the one(s)
   * previously read by the same reader instance, or the first {@code Entry<T>} instance in the storage
   * if none have pre-existing entries.  Fix javadoc  /*
 * Copyright (C) 2011-2015 <NAME> (<EMAIL>).
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed"
"<fim_prefix>   * @return the {@code Completes<List<T>>} of at most maximumEntries or empty if none
   */
  Completes<List<T>> readNext(final String fromId, final int maximumEntries);

  /**
   * Rewinds the reader so that the next available {@code Entry<T>} is the first one in the storage.
   * Sending {@code rewind()} is the same as sending {@code seekTo(Beginning)}.
   */
  void rewind();

  /**<fim_suffix>
  Completes<String> seekTo(final String id);

  /**
   * Eventually answer the size in {@code Entry} instances. If the size
   * is not known or not queryable, the value of {@code -1L} is answered.
   * @return {@code Completes<Long>}
   */
  Completes<Long> size();

  /**
   * Answer a new {@code Stream} for flowing all {@code Entry} instances in total time order.
   * @return {@code<fim_middle>","
   * Eventually answers the new position of the reader after attempting to seek to the {@code Entry<T>} of the
   * given id, such that the next available {@code Entry<T>} is the one of the given id. If the id does not (yet)
   * exist, the position is set to just beyond the last {@code Entry<T>} instance in the journal (see {@code End}), or to
   * being the first (see {@code Beginning}) if none currently exist. For example, if the storage id type is a
   * long, passing {@code ""-1""} will cause the position to be set just beyond the last {@code Entry<T>} instance in
   * the storage, or to the beginning if no instances exist. Passing the {@code String ""=""} (see {@code Query})
   * answers the current id position without attempting to seek in either direction. (Seeking relative
   * to the current id position is implementation specific and is not expected to be supported by any
   * given implementation.)
   *
   * @param id the String id of the {@code Entry<T>} instance to which the seek prepares to next read
   *
   * @return {@code Completes<String>}
   */","
   * Answer the {@code Entry<T>} instance with the given id.
   * @param id the id of the {@code Entry<T>} to answer
   * @return {@code Completes<Entry<T>>}
   */"
"<fim_prefix>re wasted/lost, following the
 * number of retries with time delays the reader should still provide results with gaps. This
 * recognizes that following best effort the gaps may never close, and thus be warranted.
 *
 * @param <T> the concrete type of {@code Entry<T>} stored and read, which maybe be String, byte[], or Object
 */
public interface EntryReader<T extends Entry<?>> {

  /**<fim_suffix>
  static final String Beginning = ""<"";

  /**
   * A means to seek past the last id position of the storage. This constant
   * must be honored by all {@code Entry<T>} storage implementations regardless
   * of internal id type.
   */
  static final String End = "">"";

  /**
   * A means to query the current id position of the journal without repositioning.
   * This constant must be h<fim_middle>","
   * A means to seek to the first id position of the storage. This constant
   * must be honored by all {@code Entry<T>} storage implementations regardless
   *  of internal id type.
   */","
   * A means to seek to the first id position of the storage. This constant
   * must be honored by all {@code Entry<T>} storage implementations regardless
   * of internal id type.
   */"
"<fim_prefix>ng to seek in either direction. (Seeking relative
   * to the current id position is implementation specific and is not expected to be supported by any
   * given implementation.)
   *
   * @param id the String id of the {@code Entry<T>} instance to which the seek prepares to next read
   *
   * @return {@code Completes<String>}
   */
  Completes<String> seekTo(final String id);

  /**<fim_suffix>
  Completes<Long> size();

  /**
   * Answer a new {@code Stream} for flowing all {@code Entry} instances in total time order.
   * @return {@code <Completes<Stream>>}
   */
  Completes<Stream> streamAll();

  /**
   * Provides advice for the specific implementation.
   */
  public static final class Advice {
    public final Object configuration;
    public final Class<? extends Acto<fim_middle>","
   * Eventually answer the size in {@code Entry} instances. If the size
   * is not known or not queryable, the value of {@code -1L} is answered.
   * @return {@code Completes<Long>}
   */","
   * Answer the total number of {@code Entry} instances in the store.
   *
   * @return {@code Completes<Long>}"
"<fim_prefix>sist in detecting and preventing
   * gaps between entries in a stream.
   */
  public static class GapPrevention {
    /**
     * Answer the number of retries used to prevent gaps in {@code Entry} instances
     * due to race conditions in database sequences and transactions.
     * @return int
     */
    public int retries() {
      return DefaultGapPreventionRetries;
    }

    /**<fim_suffix>
    public long retryInterval() {
      return DefaultGapPreventionRetryInterval;
    }
  }
}
<fim_middle>","
     * Answer the interval between retries used to prevent gaps in {@code Entry}
     * instances due to race conditions in database sequences and transactions.
     * @return long
     */","
     * Answer the interval between retries used to prevent gaps in {@code Entry} instances
     * due to race conditions in database sequences and transactions.
     * @return long
     */"
"<fim_prefix>terms of the
// Mozilla Public License, v. 2.0. If a copy of the MPL
// was not distributed with this file, You can obtain
// one at https://mozilla.org/MPL/2.0/.

package io.vlingo.xoom.symbio.store;

import java.util.List;

import io.vlingo.xoom.actors.Actor;
import io.vlingo.xoom.common.Completes;
import io.vlingo.xoom.reactivestreams.Stream;
import io.vlingo.xoom.symbio.Entry;

/**<fim_suffix>
public interface EntryReader<T extends Entry<?>> {

  /**
   * A means to seek to the first id position of the storage. This constant
   * must be honored by all {@code Entry<T>} storage implementations regardless
   *  of internal id type.
   */
  static final String Beginning = ""<"";

  /**
   * A means to seek past the last id position of the storage. This constant
   * must be hono<fim_middle>","
 * The {@code Entry<T>} reader for a given storage type. The specific storage type provides its typed instance.
 * This reads sequentially over all {@code Entry<T>} instances in the entire storage, from the
 * first written {@code Entry<T>} to the current last written {@code Entry<T>}, and is prepared to read
 * all newly appended {@code Entry<T>} instances beyond that point when they become available.
 * <p>
 * The {@code EntryReader} implementor may choose to provide the optional ""gap prevention."" Gaps
 * may occur in databases that support sequences or auto-increment columns used as a total ordering
 * for the {@code Journal} or other {@code Entry<T>} store. This happens when a sequenced value is
 * obtained, but the table row inserts are not serialized in the same order. The threads inserting
 * race to the physical writes, causing logical ordering with gaps for small time windows. Thus, a
 * range query may see gaps in the sequences if run during inserts at the tail of the table rows.
 * Performing gap prevention involves time-delayed retries, allowing the database inserts to fill
 * the gaps caused by thread races. The gaps are easy to detect, but since they may also be caused
 * by transactions that roll back where with sequence values that are wasted/lost, following the
 * number of retries with time delays the reader should still provide results with gaps. This
 * recognizes that following best effort the gaps may never close, and thus be warranted.
 *
 * @param <T> the concrete type of {@code Entry<T>} stored and read, which maybe be String, byte[], or Object
 */","
 * A means to read {@code Entry<T>}s from a storage.
 *
 * @param <T> the type of {@code Entry<T>}s to read.
 */"
"<fim_prefix>nored by all {@code Entry<T>} storage implementations regardless
   * of internal id type.
   */
  static final String End = "">"";

  /**
   * A means to query the current id position of the journal without repositioning.
   * This constant must be honored by all {@code Entry<T>} storage implementations
   * regardless of internal id type.
   */
  static final String Query = ""="";

  /**<fim_suffix>
  static final int DefaultGapPreventionRetries = 3;

  /** The default interval between retries used to prevent gaps in feed items. */
  static final long DefaultGapPreventionRetryInterval = 10L;


  /**
   * Closes this reader.
   */
  void close();

  /**
   * Eventually answers the name of this reader.
   *
   * @return the {@code Completes<String>} reader's name
   */
  Completes<<fim_middle>", The default number of retries used to prevent gaps in feed items. */,"
   * A means to query the current id position of the"
"<fim_prefix>y answer the size in {@code Entry} instances. If the size
   * is not known or not queryable, the value of {@code -1L} is answered.
   * @return {@code Completes<Long>}
   */
  Completes<Long> size();

  /**
   * Answer a new {@code Stream} for flowing all {@code Entry} instances in total time order.
   * @return {@code <Completes<Stream>>}
   */
  Completes<Stream> streamAll();

  /**<fim_suffix>
  public static final class Advice {
    public final Object configuration;
    public final Class<? extends Actor> entryReaderClass;
    public final String queryCount;
    public final String queryLatestOffset;
    public final String queryEntryBatchExpression;
    public final String queryEntryIdsExpression;
    public final String queryEntryExpression;
    public final String quer<fim_middle>","
   * Provides advice for the specific implementation.
   */","
   * Answer a new {@code Stream} for flowing all {@"
"<fim_prefix>concrete type of {@code Entry<T>} stored and read, which maybe be String, byte[], or Object
 */
public interface EntryReader<T extends Entry<?>> {

  /**
   * A means to seek to the first id position of the storage. This constant
   * must be honored by all {@code Entry<T>} storage implementations regardless
   *  of internal id type.
   */
  static final String Beginning = ""<"";

  /**<fim_suffix>
  static final String End = "">"";

  /**
   * A means to query the current id position of the journal without repositioning.
   * This constant must be honored by all {@code Entry<T>} storage implementations
   * regardless of internal id type.
   */
  static final String Query = ""="";

  /** The default number of retries used to prevent gaps in feed items. */
  static final int Default<fim_middle>","
   * A means to seek past the last id position of the storage. This constant
   * must be honored by all {@code Entry<T>} storage implementations regardless
   * of internal id type.
   */","
   * A means to seek to the last id position of the storage. This constant
   * must be honored by all {@code Entry<T>} storage implementations regardless
   *  of internal id type.
  "
"<fim_prefix>/*<fim_suffix>

package run.wallet.iota.api.handler;

import android.content.Context;


import run.wallet.common.json.JSONArray;
import run.wallet.common.json.JSONObject;
import run.wallet.iota.api.requests.ApiRequest;
import run.wallet.iota.api.requests.WebGetExchangeRatesRequest;
import run.wallet.iota.api.responses.ApiResponse;
import run.wallet.iota.api.responses.WebGetExchangeRatesResponse;
imp<fim_middle>","
 * Copyright (C) 2017 IOTA Foundation
 *
 * Authors: pinpong, adrianziser, saschan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 10/01/2018.
 */"
"<fim_prefix>package com.mobius.software.telco.protocols.diameter.impl.primitives.swx;
/*<fim_suffix>

import com.mobius.software.telco.protocols.diameter.impl.primitives.DiameterUnsigned32Impl;
import com.mobius.software.telco.protocols.diameter.primitives.swx.TWANDefaultAPNContextId;

/**
*
* @author yulian oifa
*
*/
public class TWANDefaultAPNContextIdImpl extends DiameterUnsigned32Impl implements TWANDefaultAPNContextId
{
	protected TWANDefaultAPNContextIdImpl()
	{
		super();
	}

<fim_middle>","
 * Mobius Software LTD
 * Copyright 2023, Mobius Software LTD and individual contributors
 * by the @authors tag.
 *
 * This program is free software: you can redistribute it and/or modify
 * under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
*
* @author yulian oifa
*
*/"
"<fim_prefix>ro General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

import com.mobius.software.telco.protocols.diameter.impl.primitives.DiameterUnsigned32Impl;
import com.mobius.software.telco.protocols.diameter.primitives.swx.TWANDefaultAPNContextId;

/**<fim_suffix>
public class TWANDefaultAPNContextIdImpl extends DiameterUnsigned32Impl implements TWANDefaultAPNContextId
{
	protected TWANDefaultAPNContextIdImpl()
	{
		super();
	}

	protected TWANDefaultAPNContextIdImpl(Long minValue, Long maxValue)
	{
		super(minValue, maxValue);
	}

	public TWANDefaultAPNContextIdImpl(Long value, Long minValue, Long maxValue)
	{
		super(value, minValue, maxValue<fim_middle>","
*
* @author yulian oifa
*
*/","
 * @author <NAME>
 */"
"<fim_prefix>.swaggershowdoc.util.ExampleUtil;
import io.swagger.models.ArrayModel;
import io.swagger.models.Model;
import io.swagger.models.RefModel;
import io.swagger.models.parameters.BodyParameter;
import io.swagger.models.properties.Property;
import io.swagger.models.properties.RefProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**<fim_suffix>
public class BodyParameter2 extends BodyParameter {

    private ExampleModel examples;

    @Override
    @JsonProperty(""x-examples"")
    public Map getExamples() {
        return examples;
    }

    @Override
    public void setExamples(Map<String, String> examples) {
        this.examples = new ExampleModel(examples);
    }

    public BodyParameter2(BodyParameter bodyParameter, M<fim_middle>","
 * @author LILONGTAO
 * @date 2019-07-10
 * @Description
 */","
 * Created by zhangls on 2019/1/9.
 *
 * @author zhangls"
"<fim_prefix>/*<fim_suffix>

package com.deathmotion.antihealthindicator.packetlisteners.spoofers;

import com.deathmotion.antihealthindicator.AHIPlatform;
import com.deathmotion.antihealthindicator.data.Settings;
import com.deathmotion.antihealthindicator.managers.ConfigManager;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketSendEvent;<fim_middle>","
 * This file is part of AntiHealthIndicator - https://github.com/Bram1903/AntiHealthIndicator
 * Copyright (C) 2024 Bram and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * Created by DeathMotion on 11/11/2016.
 */"
"<fim_prefix>PlayServerUpdateScore;

import java.util.Optional;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class ScoreboardListener<P> extends PacketListenerAbstract {
    private final ConfigManager<P> configManager;

    // Use ConcurrentHashMap's KeySet for a thread-safe Set
    private final Set<String> healthObjectives = ConcurrentHashMap.newKeySet();

    /**<fim_suffix>
    public ScoreboardListener(AHIPlatform<P> platform) {
        this.configManager = platform.getConfigManager();

        platform.getLogManager().debug(""Update Objective Listener initialized."");
    }

    @Override
    public void onPacketSend(PacketSendEvent event) {
        final Settings settings = configManager.getSettings();
        if (!settings.isTeamScoreboard()) return;

<fim_middle>","
     * Constructs a new EntityMetadataListener with the specified {@link AHIPlatform}.
     *
     * @param platform The platform to use.
     */","
     * Constructor.
     *
     * @param platform The platform.
     */"
"<fim_prefix>/*<fim_suffix>

/**
 * Predicate support for runtime hints.
 */
@NonNullApi
@NonNullFields
package cn.taketoday.aot.hint.predicate;

import cn.taketoday.lang.NonNullApi;
import cn.taketoday.lang.NonNullFields;<fim_middle>","
 * Original Author -> Harry Yang (taketoday@foxmail.com) https://taketoday.cn
 * Copyright Â© Harry Yang & 2017 - 2023 All Rights Reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/]
 */","*
 * Runtime hints support.
 *
 * @author <NAME>
 */"
"<fim_prefix>ogram is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/]
 */

/**<fim_suffix>
@NonNullApi
@NonNullFields
package cn.taketoday.aot.hint.predicate;

import cn.taketoday.lang.NonNullApi;
import cn.taketoday.lang.NonNullFields;<fim_middle>","
 * Predicate support for runtime hints.
 */","
 * 断言工具类
 *
"
"<fim_prefix>e me.soxey6.engine.objects;

import me.soxey6.engine.main.Wrapper;

public class Cheat extends Wrapper{
	private String name;
	private String keyCombination;
	
	public Cheat(String name, String keyCombination)
	{
		this.name=name;
		this.keyCombination = keyCombination;
		getEventManager().trigger(""CHEAT_CREATED"");
		getEventManager().trigger(getName().toUpperCase()+""_CREATED"");
	}
	/*<fim_suffix>
	/**
	 * runs when the cheat is trggered
	 * Override only pls
	 * @param Scene scene - The scene in which it was triggered
	 */
	public void triggered(Scene scene)
	{
		getEventManager().trigger(""CHEAT_TRIGGERED"");
		getEventManager().trigger(getName().toUpperCase()+""_TRGGERED"");
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;<fim_middle>","
	 * I'm a pansexual gender fluid non-binary mocha frappuccino with dual acting hydraulic cylinder and leather grip Swiss army knife
	 * #Triggered
	 */","*
	 * runs when the cheat is pressed
	 * Override only pls
	 * @param Scene scene - The scene in which it was pressed
	 */"
"<fim_prefix>
	
	public Cheat(String name, String keyCombination)
	{
		this.name=name;
		this.keyCombination = keyCombination;
		getEventManager().trigger(""CHEAT_CREATED"");
		getEventManager().trigger(getName().toUpperCase()+""_CREATED"");
	}
	/*
	 * I'm a pansexual gender fluid non-binary mocha frappuccino with dual acting hydraulic cylinder and leather grip Swiss army knife
	 * #Triggered
	 */
	/**<fim_suffix>
	public void triggered(Scene scene)
	{
		getEventManager().trigger(""CHEAT_TRIGGERED"");
		getEventManager().trigger(getName().toUpperCase()+""_TRGGERED"");
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getKeyCombination() {
		return keyCombination;
	}

	public void setKeyCombination(String keyCombination) {
		<fim_middle>","
	 * runs when the cheat is trggered
	 * Override only pls
	 * @param Scene scene - The scene in which it was triggered
	 */","
	 * Triggered when the cheat is triggered
	 * @param scene
	 */"
"<fim_prefix>package it.polimi.ingsw.server.controller.command;

import it.polimi.ingsw.common.viewRecord.UsernameAndMagicAge;

/**<fim_suffix>
public final class GameCommandUsernameAndMagicAge implements GameCommand {
    private final UsernameAndMagicAge usernameAndMagicAge;

    /**
     * Build the command with the player's info
     * @param usernameAndMagicAge A <code>UsernameAndMagicAge</code> containing the info
     */
    public GameCommandUsernameAndMagicAge(UsernameAndMagicAge usernameAndMagicAge) {
        this.u<fim_middle>","
 * Get the player's username and magic age
 * @author Sebastiano Meneghin
 */","
 * Command used to send the player's info to the server
 */"
"<fim_prefix>package it.polimi.ingsw.server.controller.command;

import it.polimi.ingsw.common.viewRecord.UsernameAndMagicAge;

/**
 * Get the player's username and magic age
 * @author Sebastiano Meneghin
 */
public final class GameCommandUsernameAndMagicAge implements GameCommand {
    private final UsernameAndMagicAge usernameAndMagicAge;

    /**<fim_suffix>
    public GameCommandUsernameAndMagicAge(UsernameAndMagicAge usernameAndMagicAge) {
        this.usernameAndMagicAge = usernameAndMagicAge;
    }

    /**
     * Get the player's info
     * @return A <code>UsernameAndMagicAge</code> containing the info
     */
    public UsernameAndMagicAge executeCommand() {
        return usernameAndMagicAge;
    }
}
<fim_middle>","
     * Build the command with the player's info
     * @param usernameAndMagicAge A <code>UsernameAndMagicAge</code> containing the info
     */","
     * Initializes the command
     * @param usernameAndMagicAge The player's info
     */"
"<fim_prefix>ments GameCommand {
    private final UsernameAndMagicAge usernameAndMagicAge;

    /**
     * Build the command with the player's info
     * @param usernameAndMagicAge A <code>UsernameAndMagicAge</code> containing the info
     */
    public GameCommandUsernameAndMagicAge(UsernameAndMagicAge usernameAndMagicAge) {
        this.usernameAndMagicAge = usernameAndMagicAge;
    }

    /**<fim_suffix>
    public UsernameAndMagicAge executeCommand() {
        return usernameAndMagicAge;
    }
}
<fim_middle>","
     * Get the player's info
     * @return A <code>UsernameAndMagicAge</code> containing the info
     */","
     * Execute the command
     * @return A <code>UsernameAndMagicAge</code> containing the info
     */"
"<fim_prefix>/*<fim_suffix>
 package fr.elyssif.client.gui.notification;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;

public class NotificationController {

	@FXML private ImageView icon;
	@FXML private Label title;
	@FXML private Label message;

	@FXML
	public voi<fim_middle>","
 * Elyssif-Client
 * Copyright (C) 2019 Jérémy LAMBERT (System-Glitch)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
	 * Close the notification.
	 * @param event
	 */"
"<fim_prefix>package it.eg.sloth.webdesktop.search.base;

import it.eg.sloth.webdesktop.search.SearchRelevance;
import it.eg.sloth.webdesktop.search.model.suggestion.SimpleSuggestion;
import it.eg.sloth.webdesktop.search.model.suggestion.Suggestion;
import lombok.Getter;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
@Getter
public abstract class InMemorySearcher<T> extends AbstractSearcher {

    List<T> searchSuggestionList;

    protected void add(T object) {
        searchSuggestionList.add(object);
    }

    protected abstract SimpleSuggestion simpleSuggestionFromObject(T object);

    protected abstract Suggestion suggestionFromObject(T object);

    protected abstract boolean match(T objec<fim_middle>","
 * Project: sloth-framework
 * Copyright (C) 2019-2025 Enrico Grillini
 * <p>
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * <p>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * <p>
 * You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Enrico Grillini
 */","
 * Searcher that stores the search suggestions in memory
 *
 * @param <T>
 */"
"<fim_prefix>ed.
   */
  public boolean pull(Physical pulling) {
    return locatedHere.remove(pulling);
  }



  /**
   * If there are any physicals here, get the one with the highest visual priority. Otherwise,
   * get the terrain for this square.
   */
  public Physical peek() {
    if (locatedHere.isEmpty()) {
      return terrain;
    } else {
      return locatedHere.get(0);
    }
  }

  /**<fim_suffix>
  public boolean isBlocked() {
    for(Physical physical : locatedHere) {
      if (physical.hasFlag(PhysicalFlag.BLOCKING)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Returns a list containing all physicals located here, including the terrain for this square.
   */
  public List<Physical> getAll() {
    List<Physical> list = new ArrayList<>(locatedHere);
 <fim_middle>","
   * Returns true if there are any blocking physicals here.
   */","
   * Returns true if there are any physicals here that are blocking.
 "
"<fim_prefix>ical peek() {
    if (locatedHere.isEmpty()) {
      return terrain;
    } else {
      return locatedHere.get(0);
    }
  }

  /**
   * Returns true if there are any blocking physicals here.
   */
  public boolean isBlocked() {
    for(Physical physical : locatedHere) {
      if (physical.hasFlag(PhysicalFlag.BLOCKING)) {
        return true;
      }
    }
    return false;
  }

  /**<fim_suffix>
  public List<Physical> getAll() {
    List<Physical> list = new ArrayList<>(locatedHere);
    list.add(terrain);
    return list;
  }

}<fim_middle>","
   * Returns a list containing all physicals located here, including the terrain for this square.
   */","
   * Returns a list of all the physicals here.
   */"
"<fim_prefix>{
      throw new IllegalArgumentException(""Attempted to put null to Square."");
    }

    for (int i = 0; i < locatedHere.size(); i++) {
      Physical comparePhysical = locatedHere.get(i);

      if (putting.getVisualPriority()
          >= comparePhysical.getVisualPriority()) {
        locatedHere.add(i,putting);
        return;
      }
    }
    locatedHere.add(putting);
  }

  /**<fim_suffix>
  public boolean pull(Physical pulling) {
    return locatedHere.remove(pulling);
  }



  /**
   * If there are any physicals here, get the one with the highest visual priority. Otherwise,
   * get the terrain for this square.
   */
  public Physical peek() {
    if (locatedHere.isEmpty()) {
      return terrain;
    } else {
      return locatedHere.get(0);
    }
  }

  /**
   * Ret<fim_middle>","
   * Remove a physical from this square. Returns true if the physical was found and removed.
   */","
   * If there are any physicals here, get the one with the highest visual priority. Otherwise,
 "
"<fim_prefix>    if (putting.getVisualPriority()
          >= comparePhysical.getVisualPriority()) {
        locatedHere.add(i,putting);
        return;
      }
    }
    locatedHere.add(putting);
  }

  /**
   * Remove a physical from this square. Returns true if the physical was found and removed.
   */
  public boolean pull(Physical pulling) {
    return locatedHere.remove(pulling);
  }



  /**<fim_suffix>
  public Physical peek() {
    if (locatedHere.isEmpty()) {
      return terrain;
    } else {
      return locatedHere.get(0);
    }
  }

  /**
   * Returns true if there are any blocking physicals here.
   */
  public boolean isBlocked() {
    for(Physical physical : locatedHere) {
      if (physical.hasFlag(PhysicalFlag.BLOCKING)) {
        return true;
      }
    }
    return fal<fim_middle>","
   * If there are any physicals here, get the one with the highest visual priority. Otherwise,
   * get the terrain for this square.
   */","
   * Returns the first physical in this square.
   */"
"<fim_prefix>al.Physical;
import game.physical.PhysicalFlag;

import java.util.ArrayList;
import java.util.List;

/**
 *
 */
public class Square {

  private final Terrain terrain;
  private final List<Physical> locatedHere;

  Square(String terrainTypeID) {
    this.terrain = GameResources.getTerrainTypeByID(terrainTypeID).getRandomVariation();
    this.locatedHere = new ArrayList<>();
  }


  /**<fim_suffix>
  public void put(Physical putting) {
    if (putting == null) {
      throw new IllegalArgumentException(""Attempted to put null to Square."");
    }

    for (int i = 0; i < locatedHere.size(); i++) {
      Physical comparePhysical = locatedHere.get(i);

      if (putting.getVisualPriority()
          >= comparePhysical.getVisualPriority()) {
        locatedHere.add(i,putting);
      <fim_middle>","
   * Sort a physical into the list for this square.
   */","
   *
   * @return
   */"
"<fim_prefix>/**<fim_suffix>
package org.multihelp;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Image;
import java.io.File;
import java.util.Locale;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;

/**
 * HelpWindow
 * 
 * Base window for providing a help system in a <fim_middle>","
 * HelpWindow
 *
 * Created Sep 15, 2010-12:20:16 PM by Daniel McEnnis
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an ""AS IS"" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>indow extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private FileTreeReader leftPane;

	private HelpViewer rightPane;
	
	/**
	 * Generic no argument constructor for creating a default help window
	 */
	public HelpWindow() {
		super();
		createWindow((new ImageIcon(""icons/MultiHelp16.png"")).getImage(),Locale.getDefault());
	}
	
	/**<fim_suffix>
	public HelpWindow(Image image){
		super();
		createWindow(image,Locale.getDefault());
	}
	
	/**
	 * Create a help window with the given locale, potentially different from the default.
	 * If the locale is not present, the contents of the 'help' directory are used directly.
	 * 
	 * 
	 * @param locale
	 */
	public HelpWindow(Locale locale){
		super();
		createWindow((ne<fim_middle>","
	 * Creates a help window system with default localization (if any) and the given image for the
	 * window.  If no image is present, the default image is used.
	 * 
	 * @param image
	 */","
	 * Create a help window with the given image, potentially different from the default.
	 * If the image is not present, the contents of the 'help' directory are used directly.
	 * 
	 * 
	 * @param"
"<fim_prefix>age governing permissions and
 *  limitations under the License.
 */
package org.multihelp;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Image;
import java.io.File;
import java.util.Locale;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;

/**<fim_suffix>
public class HelpWindow extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private FileTreeReader leftPane;

	private HelpViewer rightPane;
	
	/**
	 * Generic no argument constructor for creating a default help window
	 */
	public HelpWindow() {
		super();
		createWindow((new ImageIcon(""icons/MultiHelp16.png"")).getImage(),Locale.getDefa<fim_middle>","
 * HelpWindow
 * 
 * Base window for providing a help system in a Java application or applet.  It utilizes the provided language
 * and provided icons to produce the correct subdirectory of the 'help' directory.
 * If no localization is present, it utilizes the base 'help' directory instead with the MultiHelp icon.
 * 
 * @author Daniel McEnnis
 */","
 * A window that displays a file tree and a help viewer
 * @author <NAME>
 *
 */"
"<fim_prefix>duce the correct subdirectory of the 'help' directory.
 * If no localization is present, it utilizes the base 'help' directory instead with the MultiHelp icon.
 * 
 * @author Daniel McEnnis
 */
public class HelpWindow extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private FileTreeReader leftPane;

	private HelpViewer rightPane;
	
	/**<fim_suffix>
	public HelpWindow() {
		super();
		createWindow((new ImageIcon(""icons/MultiHelp16.png"")).getImage(),Locale.getDefault());
	}
	
	/**
	 * Creates a help window system with default localization (if any) and the given image for the
	 * window.  If no image is present, the default image is used.
	 * 
	 * @param image
	 */
	public HelpWindow(Image image){
		super();
		createW<fim_middle>","
	 * Generic no argument constructor for creating a default help window
	 */","
	 * Creates a help window system with default localization (if any) and"
"<fim_prefix>Locale.getDefault());
	}
	
	/**
	 * Create a help window with the given locale, potentially different from the default.
	 * If the locale is not present, the contents of the 'help' directory are used directly.
	 * 
	 * 
	 * @param locale
	 */
	public HelpWindow(Locale locale){
		super();
		createWindow((new ImageIcon(""icons/MultiHelp16.png"")).getImage(),locale);
	}

	/**<fim_suffix>
	public HelpWindow(Image image, Locale locale){
		super();
		createWindow(image,locale);
	}
	
	/**
	 * Helper function containing code for creating a new Window with both image and locale using defaults
	 * if the given parameters are null.
	 * 
	 * 
	 * @param image
	 * @param locale
	 */
	protected void createWindow(Image image,Locale locale){
		if(locale == null){
	<fim_middle>","
	 * Creates a window with the given window.  If the locale is null, the default is used.  If the image
	 * is null, the MultiHelp icon is used.
	 * 
	 * @param image
	 * @param locale
	 */","
	 * Create a help window with the given locale, potentially different from the default.
	 * If the locale is not present, the contents of the 'help' directory are used directly.
	 * 
	 * 
	 * @param image
	 * @param locale"
"<fim_prefix>
		createWindow((new ImageIcon(""icons/MultiHelp16.png"")).getImage(),locale);
	}

	/**
	 * Creates a window with the given window.  If the locale is null, the default is used.  If the image
	 * is null, the MultiHelp icon is used.
	 * 
	 * @param image
	 * @param locale
	 */
	public HelpWindow(Image image, Locale locale){
		super();
		createWindow(image,locale);
	}
	
	/**<fim_suffix>
	protected void createWindow(Image image,Locale locale){
		if(locale == null){
			System.out.println(""Null locale- 'help'"");
			leftPane= new FileTreeReader(new File(""help""));
		}else{
			File base = new File(""help""+File.separator+locale);
			System.out.println(""'""+base.getAbsolutePath()+""'"");
			if(base.exists()){
				leftPane = new FileTreeReader(base);
			}else{
				Syst<fim_middle>","
	 * Helper function containing code for creating a new Window with both image and locale using defaults
	 * if the given parameters are null.
	 * 
	 * 
	 * @param image
	 * @param locale
	 */","
	 * Creates a window with the given window.  If the locale is null, the default is used.  If the image
	 * is null, the MultiHelp icon is used.
	 * 
	 * @param image
"
"<fim_prefix>Window((new ImageIcon(""icons/MultiHelp16.png"")).getImage(),Locale.getDefault());
	}
	
	/**
	 * Creates a help window system with default localization (if any) and the given image for the
	 * window.  If no image is present, the default image is used.
	 * 
	 * @param image
	 */
	public HelpWindow(Image image){
		super();
		createWindow(image,Locale.getDefault());
	}
	
	/**<fim_suffix>
	public HelpWindow(Locale locale){
		super();
		createWindow((new ImageIcon(""icons/MultiHelp16.png"")).getImage(),locale);
	}

	/**
	 * Creates a window with the given window.  If the locale is null, the default is used.  If the image
	 * is null, the MultiHelp icon is used.
	 * 
	 * @param image
	 * @param locale
	 */
	public HelpWindow(Image image, Locale locale){
		sup<fim_middle>","
	 * Create a help window with the given locale, potentially different from the default.
	 * If the locale is not present, the contents of the 'help' directory are used directly.
	 * 
	 * 
	 * @param locale
	 */","
	 * Creates a help window system with the given locale and the default image for the window.  If no
	 * image is present, the default image is used.
	 * 
	 * @param locale
	 */"
"<fim_prefix>/*<fim_suffix>
package org.biojava.nbio.genome.io.fastq;

/**
 * Event based parser callback.
 *
 * @since 3.0.3
 */
public interface StreamListener
{
	/**
	 * Notify this listener of a FASTQ formatted sequence.
	 *
	 * @param fastq FASTQ formatted sequence
	 */
	void fastq(Fastq fastq);
}
<fim_middle>","
 *                    BioJava development code
 *
 * This code may be freely distributed and modified under the
 * terms of the GNU Lesser General Public Licence.  This should
 * be distributed with the code.  If you do not have a copy,
 * see:
 *
 *      http://www.gnu.org/copyleft/lesser.html
 *
 * Copyright for this code is held jointly by the individual
 * authors.  These should be listed in @author doc comments.
 *
 * For more information on the BioJava project and its aims,
 * or to join the biojava-l mailing list, visit the home page
 * at:
 *
 *      http://www.biojava.org/
 *
 */","
 * Copyright (c) 2006-2013  <NAME>  <<EMAIL>>
 * Licensed under the Apache License, Version 2.0
 * http://www.apache.org/licenses/LICENSE-2.0
 */"
"<fim_prefix>  http://www.gnu.org/copyleft/lesser.html
 *
 * Copyright for this code is held jointly by the individual
 * authors.  These should be listed in @author doc comments.
 *
 * For more information on the BioJava project and its aims,
 * or to join the biojava-l mailing list, visit the home page
 * at:
 *
 *      http://www.biojava.org/
 *
 */
package org.biojava.nbio.genome.io.fastq;

/**<fim_suffix>
public interface StreamListener
{
	/**
	 * Notify this listener of a FASTQ formatted sequence.
	 *
	 * @param fastq FASTQ formatted sequence
	 */
	void fastq(Fastq fastq);
}
<fim_middle>","
 * Event based parser callback.
 *
 * @since 3.0.3
 */","
 * A listener for FASTQ formatted sequences.
 *
 * @author <NAME>
"
"<fim_prefix> individual
 * authors.  These should be listed in @author doc comments.
 *
 * For more information on the BioJava project and its aims,
 * or to join the biojava-l mailing list, visit the home page
 * at:
 *
 *      http://www.biojava.org/
 *
 */
package org.biojava.nbio.genome.io.fastq;

/**
 * Event based parser callback.
 *
 * @since 3.0.3
 */
public interface StreamListener
{
	/**<fim_suffix>
	void fastq(Fastq fastq);
}
<fim_middle>","
	 * Notify this listener of a FASTQ formatted sequence.
	 *
	 * @param fastq FASTQ formatted sequence
	 */","
	 * Called when a new fastq record is parsed.
	 *
	 * @param fastq the fastq record.
	"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.wst.jsdt.web.ui.internal.java.refactoring;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.ltk.core.refactoring.Change;
import org.eclipse.ltk.core.refactoring.RefactoringStatus;
import org.eclipse.wst.jsdt.core.IPackageFragment;
import org.eclipse.wst.jsdt.web.core.javascript.search.JsSearchScope<fim_middle>","*****************************************************************************
 * Copyright (c) 2004, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/","
 * @since 3.8
 */"
"<fim_prefix>.runtime.IProgressMonitor;
import org.eclipse.ltk.core.refactoring.Change;
import org.eclipse.ltk.core.refactoring.RefactoringStatus;
import org.eclipse.wst.jsdt.core.IPackageFragment;
import org.eclipse.wst.jsdt.web.core.javascript.search.JsSearchScope;
import org.eclipse.wst.jsdt.web.core.javascript.search.JsSearchSupport;
import org.eclipse.wst.jsdt.web.ui.internal.JsUIMessages;
/**<fim_suffix>
public class JSPPackageRenameChange extends Change {
	public static Change[] createChangesFor(IPackageFragment pkg, String newName) {
		JsSearchSupport support = JsSearchSupport.getInstance();
		// should be handled by JSPIndexManager
		// https://w3.opensource.ibm.com/bugzilla/show_bug.cgi?id=3036
		// support.indexWorkspaceAndWait();
		BasicRefactorSearchRequestor requestor = new JS<fim_middle>","
*

* Provisional API: This class/interface is part of an interim API that is still under development and expected to
* change significantly before reaching stability. It is being made available at this early stage to solicit feedback
* from pioneering adopters on the understanding that any code that uses this API will almost certainly be broken
* (repeatedly) as the API evolves.
*
 * @author pavery
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package com.caucho.xsl.java;

import com.caucho.java.JavaWriter;
import com.caucho.xml.QName;
import com.caucho.xsl.XslParseException;

/**
 * Includes a stylesheet.
 */
public class XslInclude extends XslNode implements XslTopNode {
  private String _href;
  
  /**
   * Returns the tag name.
   */
  public String getTagName()
  {
    return ""xsl:include"";
  }
  
  /**
   * Adds an a<fim_middle>","
 * Copyright (c) 1998-2012 Caucho Technology -- all rights reserved
 *
 * This file is part of Resin(R) Open Source
 *
 * Each copy or derived work must preserve the copyright notice and this
 * notice unmodified.
 *
 * Resin Open Source is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Resin Open Source is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty
 * of NON-INFRINGEMENT.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Resin Open Source; if not, write to the
 *   Free SoftwareFoundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Scott Ferguson
 */","*
 * Includes a stylesheet.
 */"
"<fim_prefix>pNode {
  private String _href;
  
  /**
   * Returns the tag name.
   */
  public String getTagName()
  {
    return ""xsl:include"";
  }
  
  /**
   * Adds an attribute.
   */
  public void addAttribute(QName name, String value)
    throws XslParseException
  {
    if (name.getName().equals(""href"")) {
      _href = value;
    }
    else
      super.addAttribute(name, value);
  }

  /**<fim_suffix>
  public void endElement()
    throws Exception
  {
    _gen.generateInclude(getParent(), _href);
  }

  /**
   * Generates the code for the tag
   *
   * @param out the output writer for the generated java.
   */
  public void generate(JavaWriter out)
    throws Exception
  {
  }
}
<fim_middle>","
   * Called when the element ends.
   */","
   * Returns the href attribute.
   */"
"<fim_prefix> Adds an attribute.
   */
  public void addAttribute(QName name, String value)
    throws XslParseException
  {
    if (name.getName().equals(""href"")) {
      _href = value;
    }
    else
      super.addAttribute(name, value);
  }

  /**
   * Called when the element ends.
   */
  public void endElement()
    throws Exception
  {
    _gen.generateInclude(getParent(), _href);
  }

  /**<fim_suffix>
  public void generate(JavaWriter out)
    throws Exception
  {
  }
}
<fim_middle>","
   * Generates the code for the tag
   *
   * @param out the output writer for the generated java.
   */","
   * Generates the code."
"<fim_prefix>tt Ferguson
 */

package com.caucho.xsl.java;

import com.caucho.java.JavaWriter;
import com.caucho.xml.QName;
import com.caucho.xsl.XslParseException;

/**
 * Includes a stylesheet.
 */
public class XslInclude extends XslNode implements XslTopNode {
  private String _href;
  
  /**
   * Returns the tag name.
   */
  public String getTagName()
  {
    return ""xsl:include"";
  }
  
  /**<fim_suffix>
  public void addAttribute(QName name, String value)
    throws XslParseException
  {
    if (name.getName().equals(""href"")) {
      _href = value;
    }
    else
      super.addAttribute(name, value);
  }

  /**
   * Called when the element ends.
   */
  public void endElement()
    throws Exception
  {
    _gen.generateInclude(getParent(), _href);
  }

  /**
   * Generates the code <fim_middle>","
   * Adds an attribute.
   */","
   * Called when the element starts.
 "
"<fim_prefix>oftwareFoundation, Inc.
 *   59 Temple Place, Suite 330
 *   Boston, MA 02111-1307  USA
 *
 * @author Scott Ferguson
 */

package com.caucho.xsl.java;

import com.caucho.java.JavaWriter;
import com.caucho.xml.QName;
import com.caucho.xsl.XslParseException;

/**
 * Includes a stylesheet.
 */
public class XslInclude extends XslNode implements XslTopNode {
  private String _href;
  
  /**<fim_suffix>
  public String getTagName()
  {
    return ""xsl:include"";
  }
  
  /**
   * Adds an attribute.
   */
  public void addAttribute(QName name, String value)
    throws XslParseException
  {
    if (name.getName().equals(""href"")) {
      _href = value;
    }
    else
      super.addAttribute(name, value);
  }

  /**
   * Called when the element ends.
   */
  public void endElement()
    <fim_middle>","
   * Returns the tag name.
   */","
   * Creates a new XslInclude.
 "
"<fim_prefix>/*<fim_suffix>

package uk.ac.bbsrc.tgac.miso.persistence;

public interface PoolQcStore extends QcTargetStore {
}
<fim_middle>","
 * Copyright (c) 2012. The Genome Analysis Centre, Norwich, UK
 * MISO project contacts: Robert Davey @ TGAC
 * *********************************************************************
 *
 * This file is part of MISO.
 *
 * MISO is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MISO is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MISO.  If not, see <http://www.gnu.org/licenses/>.
 *
 * *********************************************************************
 */","*
 * @author <NAME> (<EMAIL>)
 *
 */"
"<fim_prefix>ist;
import java.util.Iterator;
import java.util.List;

/**
 * Used to hold name/value pairs that can be sorted by name. Used (primarily) by
 * the cfINOVKE classes.
 */
public class cfWSParameters {
	private String[] reservedWords;

	private cfWSParameters reserved;

	private List<String> names = null;

	private List<Object> values = null;

	private List<Boolean> omitted = null;

	/**<fim_suffix>
	public cfWSParameters(String[] reservedWords) {
		this();
		this.reserved = new cfWSParameters();
		this.reservedWords = reservedWords;
	}

	/**
	 * Internal constructor used to create the cfWSParameters instance that holds
	 * the reserved parameters.
	 * 
	 */
	private cfWSParameters() {
		this.names = new ArrayList<String>(4);
		this.values = new ArrayList<Object>(4);
		this.omitt<fim_middle>","
	 * Default constructor. Takes an array of reserved words (i.e. parameter names
	 * that must be kept separate so they can be returned in the reserved
	 * parameters OrderParameters instance).
	 * 
	 * @param reservedWords
	 *          parameter names to segregate
	 */","
	 * Constructor used to create the cfWSParameters instance that holds the
	 * reserved parameters.
	 * 
	 * @param reservedWords
	 *            The reserved words.
	 */"
"<fim_prefix>dWords) {
		this();
		this.reserved = new cfWSParameters();
		this.reservedWords = reservedWords;
	}

	/**
	 * Internal constructor used to create the cfWSParameters instance that holds
	 * the reserved parameters.
	 * 
	 */
	private cfWSParameters() {
		this.names = new ArrayList<String>(4);
		this.values = new ArrayList<Object>(4);
		this.omitted = new ArrayList<Boolean>(4);
	}

	/**<fim_suffix>
	public void add(String name, Object val, boolean filter, boolean omit) {
		// See if it's a reserved word
		if (filter && reservedWords != null && reserved != null) {
			for (int i = 0; i < this.reservedWords.length; i++) {
				if (this.reservedWords[i].equalsIgnoreCase(name)) {
					reserved.add(name, val, false, omit);
					return;
				}
			}
		}

		// OK, see about adding it then
<fim_middle>","
	 * Adds a parameter name and value pair to this cfWSParameters collection. If
	 * filter is true, the parameter may be put into the reserved parameters
	 * cfWSParameters instance if the name is a reserved word.
	 * 
	 * @param name
	 *          name of the parameter
	 * @param val
	 *          value of the parameter
	 * @param filter
	 *          if true, the parameter may be added to the reserved parameters if
	 *          the name is a reserved word; if false, no filtering is done
	 * @param omit
	 *          if true, the parameter should be omitted from being sent
	 */","
	 * Adds a parameter to the list of parameters.
	 * 
	 * @param name
	 *            The name of the parameter.
	 * @param val
	 *            The value of the parameter.
	 * @param filter
	 *            If true, the parameter is filtered out of the output.
	 * @param omit
	 *            If true, the parameter is omitted from the output.
	 */"
"<fim_prefix>kes an array of reserved words (i.e. parameter names
	 * that must be kept separate so they can be returned in the reserved
	 * parameters OrderParameters instance).
	 * 
	 * @param reservedWords
	 *          parameter names to segregate
	 */
	public cfWSParameters(String[] reservedWords) {
		this();
		this.reserved = new cfWSParameters();
		this.reservedWords = reservedWords;
	}

	/**<fim_suffix>
	private cfWSParameters() {
		this.names = new ArrayList<String>(4);
		this.values = new ArrayList<Object>(4);
		this.omitted = new ArrayList<Boolean>(4);
	}

	/**
	 * Adds a parameter name and value pair to this cfWSParameters collection. If
	 * filter is true, the parameter may be put into the reserved parameters
	 * cfWSParameters instance if the name is a reserved word.
	 * 
	 * @<fim_middle>","
	 * Internal constructor used to create the cfWSParameters instance that holds
	 * the reserved parameters.
	 * 
	 */","
	 * Creates a new cfWSParameters instance.
	 */"
"<fim_prefix>/*<fim_suffix>

package com.naryx.tagfusion.cfm.engine;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * Used to hold name/value pairs that can be sorted by name. Used (primarily) by
 * the cfINOVKE classes.
 */
public class cfWSParameters {
	private String[] reservedWords;

	private cfWSParameters reserved;

	private List<String> names = null;

	private List<Ob<fim_middle>"," 
 *  Copyright (C) 2000 - 2008 TagServlet Ltd
 *
 *  This file is part of Open BlueDragon (OpenBD) CFML Server Engine.
 *  
 *  OpenBD is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  Free Software Foundation,version 3.
 *  
 *  OpenBD is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with OpenBD.  If not, see http://www.gnu.org/licenses/
 *  
 *  Additional permission under GNU GPL version 3 section 7
 *  
 *  If you modify this Program, or any covered work, by linking or combining 
 *  it with any of the JARS listed in the README.txt (or a modified version of 
 *  (that library), containing parts covered by the terms of that JAR, the 
 *  licensors of this Program grant you additional permission to convey the 
 *  resulting work. 
 *  README.txt @ http://www.openbluedragon.org/license/README.txt
 *  
 *  http://www.openbluedragon.org/
 */","*
 * Used to hold name/value pairs that can be sorted by name. Used (primarily) by
 * the cfINOVKE classes.
 */"
"<fim_prefix>containing parts covered by the terms of that JAR, the 
 *  licensors of this Program grant you additional permission to convey the 
 *  resulting work. 
 *  README.txt @ http://www.openbluedragon.org/license/README.txt
 *  
 *  http://www.openbluedragon.org/
 */

package com.naryx.tagfusion.cfm.engine;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**<fim_suffix>
public class cfWSParameters {
	private String[] reservedWords;

	private cfWSParameters reserved;

	private List<String> names = null;

	private List<Object> values = null;

	private List<Boolean> omitted = null;

	/**
	 * Default constructor. Takes an array of reserved words (i.e. parameter names
	 * that must be kept separate so they can be returned in the reserved
	 * parameters Or<fim_middle>","
 * Used to hold name/value pairs that can be sorted by name. Used (primarily) by
 * the cfINOVKE classes.
 */","
 * This class represents the parameters of a CFML web service method.
 * 
 * @author <NAME>
 * @version 1.0
 *"
"<fim_prefix>	}
	
	/**
	 * Sets the <code>vendor-bin</code> property.
	 * 
	 * @param vendorDir the new <code>vendor-bin</code> value
	 */
	public void setVendorDir(String vendorDir) {
		set(""vendor-dir"", vendorDir);
	}
	
	/**
	 * Returns the <code>bin-dir</code> property.
	 * 
	 * @return the <code>bin-dir</code> property
	 */
	public String getBinDir() {
		return getAsString(""bin-dir"");
	}
	
	/**<fim_suffix>
	public void setBinDir(String binDir) {
		set(""bin-dir"", binDir);
	}
	
	/**
	 * Returns the <code>process-timeout</code> property.
	 * 
	 * @return the <code>process-timeout</code> property
	 */
	public Integer getProcessTimeout() {
		return getAsInteger(""process-timeout"");
	}
	
	/**
	 * Sets the <code>process-timeout</code> property.
	 * 
	 * @param processTimeout the new <code>proce<fim_middle>","
	 * Sets the <code>bin-dir</code> property.
	 * 
	 * @param binDir the new <code>bin-dir</code> value
	 */","
	 * Sets the <code>bin-dir</code> property.
	 * 
	 * @param binDir the new <code>bin-dir</code> value
	 */"
"<fim_prefix>or-dir"", vendorDir);
	}
	
	/**
	 * Returns the <code>bin-dir</code> property.
	 * 
	 * @return the <code>bin-dir</code> property
	 */
	public String getBinDir() {
		return getAsString(""bin-dir"");
	}
	
	/**
	 * Sets the <code>bin-dir</code> property.
	 * 
	 * @param binDir the new <code>bin-dir</code> value
	 */
	public void setBinDir(String binDir) {
		set(""bin-dir"", binDir);
	}
	
	/**<fim_suffix>
	public Integer getProcessTimeout() {
		return getAsInteger(""process-timeout"");
	}
	
	/**
	 * Sets the <code>process-timeout</code> property.
	 * 
	 * @param processTimeout the new <code>process-timeout</code> value
	 */
	public void setProcessTimeout(int processTimeout) {
		set(""process-timeout"", processTimeout);
	}
	
	/**
	 * Returns the <code>github-protocols</code> property. If th<fim_middle>","
	 * Returns the <code>process-timeout</code> property.
	 * 
	 * @return the <code>process-timeout</code> property
	 */","
	 * Returns the <code>bin-dir</code> property.
	 * 
	 * @return the <code>bin-dir</code> property
	 */"
"<fim_prefix>package com.dubture.getcomposer.core.objects;

import com.dubture.getcomposer.core.collection.JsonArray;

/**
 * Represents a config entity in a composer package
 * 
 * @see http://getcomposer.org/doc/04-schema.md#config
 * @author Thomas Gossmann <gos.si>
 *
 */
public class Config extends JsonObject {

	/**<fim_suffix>
	public String getVendorDir() {
		return getAsString(""vendor-dir"");
	}
	
	/**
	 * Sets the <code>vendor-bin</code> property.
	 * 
	 * @param vendorDir the new <code>vendor-bin</code> value
	 */
	public void setVendorDir(String vendorDir) {
		set(""vendor-dir"", vendorDir);
	}
	
	/**
	 * Returns the <code>bin-dir</code> property.
	 * 
	 * @return the <code>bin-dir</code> property
	 */
	p<fim_middle>","
	 * Returns the <code>vendor-bin</code> property.
	 * 
	 * @return the <code>vendor-bin</code> property
	 */","
	 * Returns the <code>bin-dir</code> property.
	 * 
	 * @return the <code>bin-dir</code> property
	 */"
"<fim_prefix>* Returns the <code>vendor-bin</code> property.
	 * 
	 * @return the <code>vendor-bin</code> property
	 */
	public String getVendorDir() {
		return getAsString(""vendor-dir"");
	}
	
	/**
	 * Sets the <code>vendor-bin</code> property.
	 * 
	 * @param vendorDir the new <code>vendor-bin</code> value
	 */
	public void setVendorDir(String vendorDir) {
		set(""vendor-dir"", vendorDir);
	}
	
	/**<fim_suffix>
	public String getBinDir() {
		return getAsString(""bin-dir"");
	}
	
	/**
	 * Sets the <code>bin-dir</code> property.
	 * 
	 * @param binDir the new <code>bin-dir</code> value
	 */
	public void setBinDir(String binDir) {
		set(""bin-dir"", binDir);
	}
	
	/**
	 * Returns the <code>process-timeout</code> property.
	 * 
	 * @return the <code>process-timeout</code> property
	 */
	public Integ<fim_middle>","
	 * Returns the <code>bin-dir</code> property.
	 * 
	 * @return the <code>bin-dir</code> property
	 */",
"<fim_prefix> Sets the <code>bin-dir</code> property.
	 * 
	 * @param binDir the new <code>bin-dir</code> value
	 */
	public void setBinDir(String binDir) {
		set(""bin-dir"", binDir);
	}
	
	/**
	 * Returns the <code>process-timeout</code> property.
	 * 
	 * @return the <code>process-timeout</code> property
	 */
	public Integer getProcessTimeout() {
		return getAsInteger(""process-timeout"");
	}
	
	/**<fim_suffix>
	public void setProcessTimeout(int processTimeout) {
		set(""process-timeout"", processTimeout);
	}
	
	/**
	 * Returns the <code>github-protocols</code> property. If this property
	 * isn't present in the json, the default value 
	 * <code>[""git"", ""https"", ""http""]</code> is returned.
	 * 
	 * @return the <code>github-protocols</code> property
	 */
	public JsonArray getGithubProtocols() <fim_middle>","
	 * Sets the <code>process-timeout</code> property.
	 * 
	 * @param processTimeout the new <code>process-timeout</code> value
	 */","
	 * Sets the <code>process-timeout</code> property.
	 * 
	 * @param processTimeout the new <code>process-timeout</code> value
	 */"
"<fim_prefix> * 
	 * @return the <code>process-timeout</code> property
	 */
	public Integer getProcessTimeout() {
		return getAsInteger(""process-timeout"");
	}
	
	/**
	 * Sets the <code>process-timeout</code> property.
	 * 
	 * @param processTimeout the new <code>process-timeout</code> value
	 */
	public void setProcessTimeout(int processTimeout) {
		set(""process-timeout"", processTimeout);
	}
	
	/**<fim_suffix>
	public JsonArray getGithubProtocols() {
		JsonArray protocols = getAsArray(""github-protocols"");
		if (protocols == null) {
			protocols = new JsonArray();
			protocols.add(""git"");
			protocols.add(""https"");
			protocols.add(""http"");
		}
		return protocols;
	}
	
	/**
	 * Sets the <code>github-protocols</code> property.
	 * 
	 * @param githubProtocols the new <code>github-protocols</co<fim_middle>","
	 * Returns the <code>github-protocols</code> property. If this property
	 * isn't present in the json, the default value 
	 * <code>[""git"", ""https"", ""http""]</code> is returned.
	 * 
	 * @return the <code>github-protocols</code> property
	 */","
	 * Gets the <code>github-protocols</code> property.
	 * 
	 * @return the <code>github-protocols</code> property
	 */"
"<fim_prefix>
	 * <code>[""git"", ""https"", ""http""]</code> is returned.
	 * 
	 * @return the <code>github-protocols</code> property
	 */
	public JsonArray getGithubProtocols() {
		JsonArray protocols = getAsArray(""github-protocols"");
		if (protocols == null) {
			protocols = new JsonArray();
			protocols.add(""git"");
			protocols.add(""https"");
			protocols.add(""http"");
		}
		return protocols;
	}
	
	/**<fim_suffix>
	public void setGithubProtocols(JsonArray githubProtocols) {
		set(""github-protocols"", githubProtocols);
	}
	
	/**
	 * Sets the <code>notify-on-install</code> property. If this property
	 * isn't present in the json, the default value <code>true</code>
	 * is returned. 
	 * 
	 * @return the <code>notify-on-install</code> property
	 */
	public boolean getNotifyOnInstall() {
		if (has(""<fim_middle>","
	 * Sets the <code>github-protocols</code> property.
	 * 
	 * @param githubProtocols the new <code>github-protocols</code> value
	 */","
	 * Sets the <code>github-protocols</code> property. If this property
	 * isn't present in the json, the default value <code>[""git"", ""https"","
"<fim_prefix>
	
	/**
	 * Sets the <code>notify-on-install</code> property. If this property
	 * isn't present in the json, the default value <code>true</code>
	 * is returned. 
	 * 
	 * @return the <code>notify-on-install</code> property
	 */
	public boolean getNotifyOnInstall() {
		if (has(""notify-on-install"")) {
			return getAsBoolean(""notify-on-install"");
		} else {
			return true;
		}
	}
	
	/**<fim_suffix>
	public void setNotifyOnInstall(boolean notifyOnInstall) {
		set(""notify-on-install"", notifyOnInstall);
	}
}
<fim_middle>","
	 * Set the <code>notify-on-install</code> property.
	 * 
	 * @param notifyOnInstall the new <code>notify-on-install</code> value
	 */","
	 * Sets the <code>notify-on-install</code> property.
	 * 
	 * @param notifyOnInstall the <code>notify-on-install</code> property
	 */"
"<fim_prefix>package com.dubture.getcomposer.core.objects;

import com.dubture.getcomposer.core.collection.JsonArray;

/**<fim_suffix>
public class Config extends JsonObject {

	/**
	 * Returns the <code>vendor-bin</code> property.
	 * 
	 * @return the <code>vendor-bin</code> property
	 */
	public String getVendorDir() {
		return getAsString(""vendor-dir"");
	}
	
	/**
	 * Sets the <code>vendor-bin</code> property.
	 * 
	 * @param vendorDir the new <code>vendor-bin</code> value
	 */
	public void setVendorDir(String vend<fim_middle>","
 * Represents a config entity in a composer package
 * 
 * @see http://getcomposer.org/doc/04-schema.md#config
 * @author Thomas Gossmann <gos.si>
 *
 */","
 * Represents the composer configuration.
 * 
 * @author <NAME> <<EMAIL>>
 */"
"<fim_prefix>
 * Represents a config entity in a composer package
 * 
 * @see http://getcomposer.org/doc/04-schema.md#config
 * @author Thomas Gossmann <gos.si>
 *
 */
public class Config extends JsonObject {

	/**
	 * Returns the <code>vendor-bin</code> property.
	 * 
	 * @return the <code>vendor-bin</code> property
	 */
	public String getVendorDir() {
		return getAsString(""vendor-dir"");
	}
	
	/**<fim_suffix>
	public void setVendorDir(String vendorDir) {
		set(""vendor-dir"", vendorDir);
	}
	
	/**
	 * Returns the <code>bin-dir</code> property.
	 * 
	 * @return the <code>bin-dir</code> property
	 */
	public String getBinDir() {
		return getAsString(""bin-dir"");
	}
	
	/**
	 * Sets the <code>bin-dir</code> property.
	 * 
	 * @param binDir the new <code>bin-dir</code> value
	 */
	public void setB<fim_middle>","
	 * Sets the <code>vendor-bin</code> property.
	 * 
	 * @param vendorDir the new <code>vendor-bin</code> value
	 */","
	 * Sets the <code>vendor-dir</code> property.
	 * 
	 * @param vendorDir the new <code>vendor-dir</code> value
	 */"
"<fim_prefix>rotocols = new JsonArray();
			protocols.add(""git"");
			protocols.add(""https"");
			protocols.add(""http"");
		}
		return protocols;
	}
	
	/**
	 * Sets the <code>github-protocols</code> property.
	 * 
	 * @param githubProtocols the new <code>github-protocols</code> value
	 */
	public void setGithubProtocols(JsonArray githubProtocols) {
		set(""github-protocols"", githubProtocols);
	}
	
	/**<fim_suffix>
	public boolean getNotifyOnInstall() {
		if (has(""notify-on-install"")) {
			return getAsBoolean(""notify-on-install"");
		} else {
			return true;
		}
	}
	
	/**
	 * Set the <code>notify-on-install</code> property.
	 * 
	 * @param notifyOnInstall the new <code>notify-on-install</code> value
	 */
	public void setNotifyOnInstall(boolean notifyOnInstall) {
		set(""notify-on-install"", notifyO<fim_middle>","
	 * Sets the <code>notify-on-install</code> property. If this property
	 * isn't present in the json, the default value <code>true</code>
	 * is returned. 
	 * 
	 * @return the <code>notify-on-install</code> property
	 */","
	 * Gets the <code>notify-on-install</code> property.
	 * 
	 * @return the <code>notify-on-install</code> value
	 */"
"<fim_prefix>package org.processexplorer.server.common.persistence.entity;

/**<fim_suffix>
public enum EventLogAutomationJobStatus {
    SCHEDULED,
    RUNNING,
    SUCCESS,
    FAILURE
}
<fim_middle>","
 * @author Alexander Seeliger on 08.12.2020.
 */","
 * @author <NAME>
 * @date 2011-06-03
"
"<fim_prefix>/*<fim_suffix>

package com.github.smeny.jpc.emulator.execution.opcodes.pm;

import com.github.smeny.jpc.emulator.execution.*;
import com.github.smeny.jpc.emulator.execution.decoder.*;
import com.github.smeny.jpc.emulator.processor.*;
import com.github.smeny.jpc.emulator.processor.fpu64.*;
import static com.github.smeny.jpc.emulator.processor.Processor.*;

public class fdivp_ST7_ST1 extends Executab<fim_middle>","
    JPC: An x86 PC Hardware Emulator for a pure Java Virtual Machine

    Copyright (C) 2012-2013 Ian Preston

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 2 as published by
    the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
    Details (including contact information) can be found at: 

    jpc.sourceforge.net
    or the developer website
    sourceforge.net/projects/jpc/

    End of licence header
*/","*
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>

package com.forrestguice.suntimeswidget.settings.colors;

import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Color;
import android.os.Build;
import android.preference.DialogPreference;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.Rec<fim_middle>","
    Copyright (C) 2024 Forrest Guice
    This file is part of SuntimesWidget.

    SuntimesWidget is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SuntimesWidget is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SuntimesWidget.  If not, see <http://www.gnu.org/licenses/>.
*/","
 * Created by alex on 11/12/14.
 */"
"<fim_prefix>outManager;
import android.support.v7.widget.RecyclerView;
import android.util.AttributeSet;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.forrestguice.suntimeswidget.R;

import java.util.ArrayList;

/**<fim_suffix>
@TargetApi(11)
public class ColorListPreference extends DialogPreference
{
    private final int FALLBACK_DEFAULT_VALUE = Color.WHITE;

    private int value;
    private final ArrayList<Integer> colors = new ArrayList<>();

    private TextView label;
    private LinearLayout preview;
    private RecyclerView picker;
    private ColorsAdapter adapter;

    @TargetApi(21)
    public C<fim_middle>","
 * A dialog preference that allows choosing from a list of pre-defined colors.
 */","
 * Created by forrestguice on 10/11/15.
 */"
"<fim_prefix>/*<fim_suffix>

package com.github.mhdirkse.countlang.execution;

import java.util.List;

import com.github.mhdirkse.countlang.ast.PrintStatement;
import com.github.mhdirkse.countlang.format.Format;

final class PrintStatementCalculation extends ExpressionResultsCollector {
    PrintStatementCalculation(PrintStatement node) {
        super(node);
    }

    @Override
    void processSubExpressionRes<fim_middle>","
 * Copyright Martijn Dirkse 2020
 *
 * This file is part of counting-language.
 *
 * counting-language is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 * @since 0.1
 */"
"<fim_prefix>/**<fim_suffix>
package pl.gda.pg.eti.kernelhive.gui.workflow.wizard;

import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;

import pl.gda.pg.eti.kernelhive.gui.wizard.WizardPanelDescriptor;

public class UserCredentialsPanelDescriptor extends WizardPanelDescriptor implements CaretListener {

	public static final String IDENTIFIER = ""USER_CREDENTIALS_PANEL"";

	public UserCrede<fim_middle>","
 * Copyright (c) 2014 Gdansk University of Technology
 * Copyright (c) 2014 Marcel Schally-Kacprzak
 * Copyright (c) 2014 Szymon Bultrowicz
 *
 * This file is part of KernelHive.
 * KernelHive is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * KernelHive is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with KernelHive. If not, see <http://www.gnu.org/licenses/>.
 */","
 * 
 * @author <NAME>
 * @since 2.0.0
 * 
 */"
"<fim_prefix>package editor.models;

import javafx.scene.image.Image;
import javafx.scene.image.ImageView;

/**<fim_suffix>
public abstract class GameElement extends ImageView {
    private int rowIndex;
    private int colIndex;

    private final Type TYPE = Type.GENERIC;

    public String getType(){
        return TYPE.getVal();
    }
    public abstract Image getIcon();

    GameElement(){
        this.setImage(this.getIcon());
    }

    public int getRowIndex() {
        return rowIndex;
    }

    <fim_middle>","
 * The class representation of a game element.
 */","
 * Created by <NAME> on 4/18/"
"<fim_prefix>/*<fim_suffix>

package lrstudios.games.ego.lib.themes;

import android.content.Context;
import android.graphics.BitmapFactory;
import android.graphics.BitmapShader;
import android.graphics.Paint;
import android.graphics.Shader;

import lrstudios.games.ego.lib.R;


public class DarkBoardTheme extends StandardTheme {
    public DarkBoardTheme(Context context) {
        super(context);
    }

    @Ove<fim_middle>","
 * This file is part of Elygo-lib.
 * Copyright (C) 2012   Emmanuel Mathis [emmanuel *at* lr-studios.net]
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 10/12/2014.
 */"
"<fim_prefix>/*<fim_suffix>
package org.neo4j.graphalgo.impl.closeness;

import org.neo4j.graphalgo.api.Graph;
import org.neo4j.graphalgo.core.utils.ProgressLogger;
import org.neo4j.graphalgo.core.write.Exporter;
import org.neo4j.graphalgo.core.write.PropertyTranslator;
import org.neo4j.graphalgo.impl.msbfs.BfsConsumer;
import org.neo4j.graphalgo.impl.msbfs.MultiSourceBFS;
import org.neo4j.graphdb.Direction;

im<fim_middle>","
 * Copyright (c) 2017 ""Neo4j, Inc."" <http://neo4j.com>
 *
 * This file is part of Neo4j Graph Algorithms <http://github.com/neo4j-contrib/neo4j-graph-algorithms>.
 *
 * Neo4j Graph Algorithms is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author mknblch
 */"
"<fim_prefix>tor;
import org.neo4j.graphalgo.impl.msbfs.BfsConsumer;
import org.neo4j.graphalgo.impl.msbfs.MultiSourceBFS;
import org.neo4j.graphdb.Direction;

import java.util.Arrays;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.function.LongToIntFunction;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**<fim_suffix>
public class MSClosenessCentrality extends MSBFSCCAlgorithm<MSClosenessCentrality> {

    private Graph graph;
    private AtomicIntegerArray farness;
    private AtomicIntegerArray component;

    private final int concurrency;
    private final ExecutorService executorService;
    private final int nodeCount;

    private final boolean wassermanFaust;

    public MSClosenessCentrali<fim_middle>","
 * Normalized Closeness Centrality.
 *
 * Utilizes the MSBFS for counting the farness between nodes.
 * See MSBFS documentation.
 *
 *
 *
 * @author mknblch
 */","
 * @author mknblch
 */"
"<fim_prefix>             (data, nodeId) ->
                                centrality(farness.get((int) nodeId), component.get((int) nodeId), nodeCount, wassermanFaust));
    }

    @Override
    public MSClosenessCentrality me() {
        return this;
    }

    @Override
    public MSClosenessCentrality release() {
        graph = null;
        farness = null;
        return this;
    }

    /**<fim_suffix>
    public static final class Result {

        public final long nodeId;

        public final double centrality;

        public Result(long nodeId, double centrality) {
            this.nodeId = nodeId;
            this.centrality = centrality;
        }

        @Override
        public String toString() {
            return ""Result{"" +
                    ""nodeId="" + nodeId +
   <fim_middle>","
     * Result class used for streaming
     */","
     * The result of the computation.
    "
"<fim_prefix>/*<fim_suffix>

package org.asqatasun.rules.accessiweb22;

import org.asqatasun.entity.audit.TestSolution;
import org.asqatasun.ruleimplementation.AbstractDetectionPageRuleImplementation;
import org.asqatasun.rules.elementselector.SimpleElementSelector;
import static org.asqatasun.rules.keystore.AttributeStore.SRC_ATTR;
import static org.asqatasun.rules.keystore.CssLikeQueryStore.IMG_WITH_ISMAP_ATTR<fim_middle>","
 * Asqatasun - Automated webpage assessment
 * Copyright (C) 2008-2020  Asqatasun.org
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact us by mail: asqatasun AT asqatasun DOT org
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>.ruleimplementation.AbstractDetectionPageRuleImplementation;
import org.asqatasun.rules.elementselector.SimpleElementSelector;
import static org.asqatasun.rules.keystore.AttributeStore.SRC_ATTR;
import static org.asqatasun.rules.keystore.CssLikeQueryStore.IMG_WITH_ISMAP_ATTR_CSS_LIKE_QUERY;
import static org.asqatasun.rules.keystore.RemarkMessageStore.MANUAL_CHECK_ON_ELEMENTS_MSG;

/**<fim_suffix>

public class Aw22Rule06051 extends AbstractDetectionPageRuleImplementation {
    
    /**
     * Default constructor
     */
    public Aw22Rule06051 () {
        super(
                new SimpleElementSelector(IMG_WITH_ISMAP_ATTR_CSS_LIKE_QUERY),
                // solution when at least one element is found
                TestSolution.NEED_MORE_INFO,
                // solution w<fim_middle>","
 * Implementation of the rule 6.5.1 of the referential Accessiweb 2.2.
 * <br/>
 * For more details about the implementation, refer to <a href=""http://doc.asqatasun.org/en/90_Rules/accessiweb2.2/06.Links/Rule-6.5.1.html"">the rule 6.5.1 design page.</a>
 * @see <a href=""http://www.accessiweb.org/index.php/accessiweb-22-english-version.html#test-6-5-1""> 6.5.1 rule specification</a>
 *
 * @author jkowalczyk
 */","
 * This class implements the rule Aw22 Rule 06051
 * @author <NAME>
 */"
"<fim_prefix>ementation, refer to <a href=""http://doc.asqatasun.org/en/90_Rules/accessiweb2.2/06.Links/Rule-6.5.1.html"">the rule 6.5.1 design page.</a>
 * @see <a href=""http://www.accessiweb.org/index.php/accessiweb-22-english-version.html#test-6-5-1""> 6.5.1 rule specification</a>
 *
 * @author jkowalczyk
 */

public class Aw22Rule06051 extends AbstractDetectionPageRuleImplementation {
    
    /**<fim_suffix>
    public Aw22Rule06051 () {
        super(
                new SimpleElementSelector(IMG_WITH_ISMAP_ATTR_CSS_LIKE_QUERY),
                // solution when at least one element is found
                TestSolution.NEED_MORE_INFO,
                // solution when no element is found
                TestSolution.NOT_APPLICABLE,
                // manual check message
                M<fim_middle>","
     * Default constructor
     */","
     * The rule name.
   "
"<fim_prefix>d.key.java.statement.MethodBodyStatement;
import de.uka.ilkd.key.logic.PosInOccurrence;
import de.uka.ilkd.key.logic.Term;
import de.uka.ilkd.key.logic.op.IProgramVariable;
import de.uka.ilkd.key.logic.op.UpdateApplication;
import de.uka.ilkd.key.proof.Node;
import de.uka.ilkd.key.proof.init.ProofInputException;
import de.uka.ilkd.key.symbolic_execution.util.SymbolicExecutionUtil;

/**<fim_suffix>
public class ThinBackwardSlicer extends AbstractBackwardSlicer {
   /**
    * {@inheritDoc}
    */
   @Override
   protected boolean accept(Node node, 
                            Node previousChild,
                            Services services,
                            Set<Location> relevantLocations, 
                            SequentInfo info,
                            Sour<fim_middle>","
 * Implementation of thin backward slicing.
 * @author Martin Hentschel
 */","
 * Thin backward slicer.
 * 
 * @author <NAME>
 *"
"<fim_prefix>el.EMetamodel;
import pt.uminho.haslab.mde.model.EModel;
import pt.uminho.haslab.mde.transformation.EDependency;
import pt.uminho.haslab.mde.transformation.EModelDomain;
import pt.uminho.haslab.mde.transformation.ERelation;
import pt.uminho.haslab.mde.transformation.ETransformation;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**<fim_suffix>
public class KodkodEchoTranslator extends EchoTranslator {
    public KodkodEchoTranslator(){}


    public static KodkodEchoTranslator getInstance() {
        return (KodkodEchoTranslator) EchoTranslator.getInstance();
    }

    /** maps meta-models Uris into translators*/
    private Map<String,EKodkodMetamodel> metaModels = new HashMap<>();
    /** maps models Uris into translator<fim_middle>","
 * Manages the translation of Echo artifacts into Kodkod.
 * 
 * @author nmm,tmg
 * @version 0.4 20/02/2014
 */","
 * Created by nuno on 10/04/17.
 */"
"<fim_prefix>) EchoTranslator.getInstance();
    }

    /** maps meta-models Uris into translators*/
    private Map<String,EKodkodMetamodel> metaModels = new HashMap<>();
    /** maps models Uris into translators*/
    private Map<String,EKodkodModel> models = new HashMap<>();
    /** maps models Uris into meta-models Uris*/
    private Map<String,String> model2metaModel = new HashMap<>();
    /**<fim_suffix>
	private Map<String,EKodkodTransformation> transKodkod = new HashMap<String,EKodkodTransformation>();


    @Override
    public void translateMetaModel(EMetamodel metaModel) throws EchoError {

        EKodkodMetamodel e2k = new EKodkodMetamodel(metaModel);
        metaModels.put(metaModel.ID, e2k);
        try {
            e2k.translate();
        } catch (EchoError e) {
          <fim_middle>", maps QVT-R IDs to the respective Kodkod translator*/, maps models Uris into models Uris*/
"<fim_prefix>mg
 * @version 0.4 20/02/2014
 */
public class KodkodEchoTranslator extends EchoTranslator {
    public KodkodEchoTranslator(){}


    public static KodkodEchoTranslator getInstance() {
        return (KodkodEchoTranslator) EchoTranslator.getInstance();
    }

    /** maps meta-models Uris into translators*/
    private Map<String,EKodkodMetamodel> metaModels = new HashMap<>();
    /**<fim_suffix>
    private Map<String,EKodkodModel> models = new HashMap<>();
    /** maps models Uris into meta-models Uris*/
    private Map<String,String> model2metaModel = new HashMap<>();
    /** maps QVT-R IDs to the respective Kodkod translator*/
	private Map<String,EKodkodTransformation> transKodkod = new HashMap<String,EKodkodTransformation>();


    @Override
    public void translateMetaM<fim_middle>", maps models Uris into translators*/, maps models Uris into meta-
"<fim_prefix>kodEchoTranslator(){}


    public static KodkodEchoTranslator getInstance() {
        return (KodkodEchoTranslator) EchoTranslator.getInstance();
    }

    /** maps meta-models Uris into translators*/
    private Map<String,EKodkodMetamodel> metaModels = new HashMap<>();
    /** maps models Uris into translators*/
    private Map<String,EKodkodModel> models = new HashMap<>();
    /**<fim_suffix>
    private Map<String,String> model2metaModel = new HashMap<>();
    /** maps QVT-R IDs to the respective Kodkod translator*/
	private Map<String,EKodkodTransformation> transKodkod = new HashMap<String,EKodkodTransformation>();


    @Override
    public void translateMetaModel(EMetamodel metaModel) throws EchoError {

        EKodkodMetamodel e2k = new EKodkodMetamodel(metaModel);
 <fim_middle>", maps models Uris into meta-models Uris*/, maps meta-models Uris into models*/
"<fim_prefix>{
        Kodkod2XMI k2x = new Kodkod2XMI(ins,root,e2k);

        ResourceSet resourceSet = new ResourceSetImpl();
        resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put(
                ""*"", new XMIResourceFactoryImpl());

        Resource resource = resourceSet.createResource(URI.createURI(targetURI));
        resource.getContents().add(k2x.getModel());

		/*<fim_suffix>
        Map<Object,Object> options = new HashMap<Object,Object>();
        options.put(XMLResource.OPTION_SCHEMA_LOCATION, Boolean.TRUE);
        try{
            resource.save(options);
        }catch (Exception e) {
            throw new ErrorTransform(e.getMessage());
        }

    }

}
<fim_middle>","
		* Save the resource using OPTION_SCHEMA_LOCATION save option toproduce
		* xsi:schemaLocation attribute in the document
		*/","*
         * Save the resource to the specified URI.
         */"
"<fim_prefix>ava.util.List;
import java.util.Map;

/**
 * Manages the translation of Echo artifacts into Kodkod.
 * 
 * @author nmm,tmg
 * @version 0.4 20/02/2014
 */
public class KodkodEchoTranslator extends EchoTranslator {
    public KodkodEchoTranslator(){}


    public static KodkodEchoTranslator getInstance() {
        return (KodkodEchoTranslator) EchoTranslator.getInstance();
    }

    /**<fim_suffix>
    private Map<String,EKodkodMetamodel> metaModels = new HashMap<>();
    /** maps models Uris into translators*/
    private Map<String,EKodkodModel> models = new HashMap<>();
    /** maps models Uris into meta-models Uris*/
    private Map<String,String> model2metaModel = new HashMap<>();
    /** maps QVT-R IDs to the respective Kodkod translator*/
	private Map<String,EKodkodTransf<fim_middle>", maps meta-models Uris into translators*/,"
     * Returns the K"
"<fim_prefix>package cz.cvut.kbss.analysis.security;

import cz.cvut.kbss.analysis.exception.BadRequestException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.switchuser.SwitchUserFilter;

import jakarta.servlet.http.HttpServletRequest;

/**<fim_suffix>
public class CustomSwitchUserFilter extends SwitchUserFilter {

    @Override
    protected Authentication attemptSwitchUser(HttpServletRequest request) throws AuthenticationException {
        final Authentication switchTo = super.attemptSwitchUser(request);
        if (switchTo.getAuthorities().stream().anyMatch(a -> SecurityConstants.ROLE_ADMIN.equals(a.getAuthority()))) {
        <fim_middle>","
 * Extends default user switching logic by preventing switching to an admin account.
 */","
 * Custom switch user filter.
 *
 * @author <NAME> <<EMAIL"
"<fim_prefix>/*<fim_suffix>
package ch.technokrat.gecko.geckocircuits.circuit.circuitcomponents;

import ch.technokrat.gecko.geckocircuits.circuit.AbstractTypeInfo;
import ch.technokrat.gecko.geckocircuits.circuit.circuitcomponents.AbstractCircuitGlobalTerminal;
import ch.technokrat.gecko.i18n.resources.I18nKeys;

class ReluctanceGlobalTerminal extends AbstractCircuitGlobalTerminal{
    public static final Abstr<fim_middle>","  This file is part of GeckoCIRCUITS. Copyright (C) ETH Zurich, Gecko-Simulations AG
 *
 *  GeckoCIRCUITS is free software: you can redistribute it and/or modify it under 
 *  the terms of the GNU General Public License as published by the Free Software 
 *  Foundation, either version 3 of the License, or (at your option) any later version.
 *
 *  GeckoCIRCUITS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 *  PURPOSE.  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with
 *  GeckoCIRCUITS.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>   commandEntity.setAlertDialogEntity(alertDialogEntity);
            }
        }
        commandEntity = commandRepository.save(commandEntity);
        return commandConverter.toDTO(commandEntity);
    }

    @Override
    public CommandDTO findOne(Long id) {
        CommandEntity entity = commandRepository.findOneById(id);
        return commandConverter.toDTO(entity);
    }

    /**<fim_suffix>
    @Override
    public List<CommandDTO> findAll(Pageable pageable) {
        List<CommandEntity> entities = commandRepository.findAllByOrderByModifiedDateDesc(pageable);
        List<CommandDTO> result = new ArrayList<>();
        for (CommandEntity item : entities) {
            CommandDTO commandDTO = commandConverter.toDTO(item);
            result.add(commandDTO);
        }
    <fim_middle>","
     * find item with page number and totalPage number
     *
     * @param pageable
     * @return
     */","
     * {@inheritDoc}
     */"
"<fim_prefix>/*<fim_suffix>
/**
 * Provides standard CANARY-EDS 4+ data channel (signal) implementations.
 */
package org.canaryeds.base.datachannels;
<fim_middle>","
 * Copyright 2014 Sandia Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * Provides standard CANARY-EDS 4+ data channel (signal) implementations.
 */"
"<fim_prefix>at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**<fim_suffix>
package org.canaryeds.base.datachannels;
<fim_middle>","
 * Provides standard CANARY-EDS 4+ data channel (signal) implementations.
 */","
 * 
 */"
"<fim_prefix>/*<fim_suffix>
package jthtest.Config_TestTree;

import com.sun.interview.wizard.selectiontree.SelectionTree;
import jthtest.Test;
import jthtest.tools.ConfigDialog;
import jthtest.tools.Configuration;
import jthtest.tools.JTFrame;

public class Config_TestTree3 extends Test {
     /**
      * This test verifies that multiple test results can be cleared Test Tree by
      * pressing right mouse butt<fim_middle>","
 * $Id$
 *
 * Copyright (c) 2009, 2024, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the ""Classpath"" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>ood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package jthtest.Config_TestTree;

import com.sun.interview.wizard.selectiontree.SelectionTree;
import jthtest.Test;
import jthtest.tools.ConfigDialog;
import jthtest.tools.Configuration;
import jthtest.tools.JTFrame;

public class Config_TestTree3 extends Test {
     /**<fim_suffix>
     @Override
     public void testImpl() throws Exception {
          mainFrame = new JTFrame(true);
          mainFrame.openDefaultTestSuite();
          addUsedFile(mainFrame.createWorkDirectoryInTemp());
          Configuration conf = mainFrame.getConfiguration();
          conf.load(CONFIG_NAME, true);

          ConfigDialog cd = conf.openByMenu(true);
          ConfigDialog.Qu<fim_middle>","
      * This test verifies that multiple test results can be cleared Test Tree by
      * pressing right mouse button -> Clear Results.
      */","
      * @param args
      */"
"<fim_prefix>package com.mobius.software.telco.protocols.diameter.primitives.slg;

import java.util.HashMap;
import java.util.Map;

import com.mobius.software.telco.protocols.diameter.primitives.IntegerEnum;

/*<fim_suffix>
/**
*
* @author yulian oifa
*
*/

/*
 * 	7.4.50	Periodic-Location-Support-Indicator
	The Periodic-Location-Support-Indicator AVP is of type Enumerated and it indicates if the given PLMN-ID (indicated by Visited-PLMN-Id) supports periodic location or not. The following values are defined:

	NOT_SUPPORTED (0)

	SUPPORTED (1)
 */
public enum PeriodicLocationSupportIndicatorEnum implement<fim_middle>","
 * Mobius Software LTD, Open Source Cloud Communications
 * Copyright 2023, Mobius Software LTD and individual contributors
 * by the @authors tag.
 *
 * This program is free software: you can redistribute it and/or modify
 * under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
*
* @author yulian oifa
*
*/"
"<fim_prefix>ributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
/**<fim_suffix>

/*
 * 	7.4.50	Periodic-Location-Support-Indicator
	The Periodic-Location-Support-Indicator AVP is of type Enumerated and it indicates if the given PLMN-ID (indicated by Visited-PLMN-Id) supports periodic location or not. The following values are defined:

	NOT_SUPPORTED (0)

	SUPPORTED (1)
 */
public enum PeriodicLocationSupportIndicatorEnum implements IntegerEnum
{
	NOT_SUPPORTED(0)<fim_middle>","
*
* @author yulian oifa
*
*/","
 *
 */"
"<fim_prefix>be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
/**
*
* @author yulian oifa
*
*/

/*<fim_suffix>
public enum PeriodicLocationSupportIndicatorEnum implements IntegerEnum
{
	NOT_SUPPORTED(0),SUPPORTED(1);

	private static final Map<Integer, PeriodicLocationSupportIndicatorEnum> intToTypeMap = new HashMap<Integer, PeriodicLocationSupportIndicatorEnum>();
	static
	{
	    for (PeriodicLocationSupportIndicatorEnum type : PeriodicLocationSupportIndicatorEnum.values()) 
	    {
	    	intT<fim_middle>","
 * 	7.4.50	Periodic-Location-Support-Indicator
	The Periodic-Location-Support-Indicator AVP is of type Enumerated and it indicates if the given PLMN-ID (indicated by Visited-PLMN-Id) supports periodic location or not. The following values are defined:

	NOT_SUPPORTED (0)

	SUPPORTED (1)
 */","*
 * 
 * @author yulian oifa
 *
 */"
"<fim_prefix>TABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package net.sf.jkniv.sqlegance.transaction;

/**<fim_suffix>
public enum TransactionType
{
    /** JTA - Global transaction, delimit JTA transactions using UserTransaction interface, can span multiple databases and processes*/
    GLOBAL,  
    /** JDBC - Local transaction, delimit JDBC transactions using connection interface, are native to a single database, use non-XA data sources, and are restricted within a single process. */
    LOCAL,
   <fim_middle>","
 * Represents the transaction type over EIS or database systems
 * 
 * @author Alisson Gomes
 *
 */","
 * Transaction type
 * 
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix>lic enum TransactionType
{
    /** JTA - Global transaction, delimit JTA transactions using UserTransaction interface, can span multiple databases and processes*/
    GLOBAL,  
    /** JDBC - Local transaction, delimit JDBC transactions using connection interface, are native to a single database, use non-XA data sources, and are restricted within a single process. */
    LOCAL,
    /**<fim_suffix>
    EJB;
    
    public static TransactionType get(String s)
    {
        TransactionType answer = TransactionType.LOCAL;
        for(TransactionType type : TransactionType.values())
        {
            if (type.name().equalsIgnoreCase(s))
                answer = type;
        }
        return answer;
    }

}
<fim_middle>", EJB - Means the transaction it's controlled by JEE <b>container-managed</b> or <b>bean-managed</b> transaction demarcation */," EJB - Local transaction, delimit EJB transactions using EJB interface, are native to a single database, use non-XA data sources, and are restricted within a single"
"<fim_prefix>ved a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package net.sf.jkniv.sqlegance.transaction;

/**
 * Represents the transaction type over EIS or database systems
 * 
 * @author Alisson Gomes
 *
 */
public enum TransactionType
{
    /**<fim_suffix>
    GLOBAL,  
    /** JDBC - Local transaction, delimit JDBC transactions using connection interface, are native to a single database, use non-XA data sources, and are restricted within a single process. */
    LOCAL,
    /** EJB - Means the transaction it's controlled by JEE <b>container-managed</b> or <b>bean-managed</b> transaction demarcation */
    EJB;
    
    public static Tra<fim_middle>"," JTA - Global transaction, delimit JTA transactions using UserTransaction interface, can span multiple databases and processes*/"," JDBC - Global transaction, delimit JDBC transactions using connection interface, are native to a single database, use non-"
"<fim_prefix>treet, Fifth Floor, Boston, MA  02110-1301  USA
 */
package net.sf.jkniv.sqlegance.transaction;

/**
 * Represents the transaction type over EIS or database systems
 * 
 * @author Alisson Gomes
 *
 */
public enum TransactionType
{
    /** JTA - Global transaction, delimit JTA transactions using UserTransaction interface, can span multiple databases and processes*/
    GLOBAL,  
    /**<fim_suffix>
    LOCAL,
    /** EJB - Means the transaction it's controlled by JEE <b>container-managed</b> or <b>bean-managed</b> transaction demarcation */
    EJB;
    
    public static TransactionType get(String s)
    {
        TransactionType answer = TransactionType.LOCAL;
        for(TransactionType type : TransactionType.values())
        {
            if (type.name().equalsIgnoreCase(s)<fim_middle>"," JDBC - Local transaction, delimit JDBC transactions using connection interface, are native to a single database, use non-XA data sources, and are restricted within a single process. */", LOCAL - Means the transaction it's controlled by the application <b>container-managed</b> or <b>bean-managed</b> transaction demarcation */
"<fim_prefix>/*<fim_suffix>
package net.sf.jkniv.sqlegance.transaction;

/**
 * Represents the transaction type over EIS or database systems
 * 
 * @author Alisson Gomes
 *
 */
public enum TransactionType
{
    /** JTA - Global transaction, delimit JTA transactions using UserTransaction interface, can span multiple databases and processes*/
    GLOBAL,  
    /** JDBC - Local transaction, delimit JDBC transaction<fim_middle>"," 
 * JKNIV, SQLegance keeping queries maintainable.
 * 
 * Copyright (C) 2017, the original author or authors.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */","*
 * Represents the transaction type over EIS or database systems
 * 
 * @author Alisson Gomes
 *
 */"
"<fim_prefix>package de.mineformers.powergrid.fluid;

import net.minecraftforge.fluids.Fluid;
import net.minecraftforge.fluids.FluidRegistry;

/**<fim_suffix>
public class ModFluids {
	
	public static Fluid energon;
	
	public static void init() {
		energon = new FluidEnergon();
		
		FluidRegistry.registerFluid(energon);
	}

}
<fim_middle>","
 * 
 * PowerGrid
 * 
 * ModFluids
 * 
 * @author PaleoCrafter
 * @license Lesser GNU Public License v3 (http://www.gnu.org/licenses/lgpl.html)
 * 
 */","
 * ModFluids
 *
 * @author PaleoCrafter
 */"
"<fim_prefix>/*<fim_suffix>

package kunlun.io;

import kunlun.core.Storage;

import java.util.Collection;

/**
 * The data storage.
 * @author Kahle
 */
public interface DataStorage extends Storage {

    /**
     * Determine whether the data exists based on the resource information (key).
     * @param key The resource information (key)
     * @return Whether it exists
     */
    boolean exist(Object key);

 <fim_middle>","
 * Copyright (c) 2018. the original author or authors.
 * Kunlun is licensed under the ""LICENSE"" file in the project's root directory.
 */","*
 * The data storage.
 * @author Kahle
 */"
"<fim_prefix>Put the key and value into the storage.
     * @param key The key to be stored
     * @param value The value to be stored
     * @return The old data or null
     */
    Object put(Object key, Object value);

    /**
     * Put data into storage in batches.
     * @param data The data to be put in
     * @return The result or null
     */
    Object putAll(Collection<?> data);

    /**<fim_suffix>
    Object delete(Object key);

    /**
     * Delete data from storage in batches.
     * @param keys The keys to be deleted
     * @return The result or null
     */
    Object deleteAll(Collection<?> keys);

    /**
     * Condition query the resource information list.
     * @param conditions The query conditions
     * @return The query result or null
     */
    Object list(Obje<fim_middle>","
     * Delete the data based on the resource information (key).
     * @param key The resource information (key)
     * @return The deleted data or null
     */","
     * Delete the data from storage.
     * @param key The key to be deleted
     * @return The old data or null
     */"
"<fim_prefix>/*
 * Copyright (c) 2018. the original author or authors.
 * Kunlun is licensed under the ""LICENSE"" file in the project's root directory.
 */

package kunlun.io;

import kunlun.core.Storage;

import java.util.Collection;

/**<fim_suffix>
public interface DataStorage extends Storage {

    /**
     * Determine whether the data exists based on the resource information (key).
     * @param key The resource information (key)
     * @return Whether it exists
     */
    boolean exist(Object key);

    /**
     * Obtain the data based on the resource information (key).
     * @param key The resource information (key)
     *<fim_middle>","
 * The data storage.
 * @author Kahle
 */","
 * Data storage interface
 *
 * @author kslise"
"<fim_prefix>age kunlun.io;

import kunlun.core.Storage;

import java.util.Collection;

/**
 * The data storage.
 * @author Kahle
 */
public interface DataStorage extends Storage {

    /**
     * Determine whether the data exists based on the resource information (key).
     * @param key The resource information (key)
     * @return Whether it exists
     */
    boolean exist(Object key);

    /**<fim_suffix>
    Object get(Object key);

    /**
     * Put the data.
     * @param data The data
     * @return The old data or null
     */
    Object put(Object data);

    /**
     * Put the key and value into the storage.
     * @param key The key to be stored
     * @param value The value to be stored
     * @return The old data or null
     */
    Object put(Object key, Object value);

   <fim_middle>","
     * Obtain the data based on the resource information (key).
     * @param key The resource information (key)
     * @return The data
     */","
     * Get the data.
     * @param key The resource information (key)
     * @return The data
     */"
"<fim_prefix>alue);

    /**
     * Put data into storage in batches.
     * @param data The data to be put in
     * @return The result or null
     */
    Object putAll(Collection<?> data);

    /**
     * Delete the data based on the resource information (key).
     * @param key The resource information (key)
     * @return The deleted data or null
     */
    Object delete(Object key);

    /**<fim_suffix>
    Object deleteAll(Collection<?> keys);

    /**
     * Condition query the resource information list.
     * @param conditions The query conditions
     * @return The query result or null
     */
    Object list(Object conditions);

}
<fim_middle>","
     * Delete data from storage in batches.
     * @param keys The keys to be deleted
     * @return The result or null
     */","
     * Delete the data based on the resource information (keys).
     * @param keys The resource information (keys)
     * @return The deleted data or null"
"<fim_prefix>* Determine whether the data exists based on the resource information (key).
     * @param key The resource information (key)
     * @return Whether it exists
     */
    boolean exist(Object key);

    /**
     * Obtain the data based on the resource information (key).
     * @param key The resource information (key)
     * @return The data
     */
    Object get(Object key);

    /**<fim_suffix>
    Object put(Object data);

    /**
     * Put the key and value into the storage.
     * @param key The key to be stored
     * @param value The value to be stored
     * @return The old data or null
     */
    Object put(Object key, Object value);

    /**
     * Put data into storage in batches.
     * @param data The data to be put in
     * @return The result or null
     */
 <fim_middle>","
     * Put the data.
     * @param data The data
     * @return The old data or null
     */","
     * Put the data into storage.
     * @param data The data to be put in
     * @return The old data or null"
"<fim_prefix>* @return Whether it exists
     */
    boolean exist(Object key);

    /**
     * Obtain the data based on the resource information (key).
     * @param key The resource information (key)
     * @return The data
     */
    Object get(Object key);

    /**
     * Put the data.
     * @param data The data
     * @return The old data or null
     */
    Object put(Object data);

    /**<fim_suffix>
    Object put(Object key, Object value);

    /**
     * Put data into storage in batches.
     * @param data The data to be put in
     * @return The result or null
     */
    Object putAll(Collection<?> data);

    /**
     * Delete the data based on the resource information (key).
     * @param key The resource information (key)
     * @return The deleted data or null
     */
   <fim_middle>","
     * Put the key and value into the storage.
     * @param key The key to be stored
     * @param value The value to be stored
     * @return The old data or null
     */","
     * Put the data.
     * @param key The resource information (key)
     * @param value The data
     * @return The old data or null
     */"
"<fim_prefix>
    /**
     * Delete the data based on the resource information (key).
     * @param key The resource information (key)
     * @return The deleted data or null
     */
    Object delete(Object key);

    /**
     * Delete data from storage in batches.
     * @param keys The keys to be deleted
     * @return The result or null
     */
    Object deleteAll(Collection<?> keys);

    /**<fim_suffix>
    Object list(Object conditions);

}
<fim_middle>","
     * Condition query the resource information list.
     * @param conditions The query conditions
     * @return The query result or null
     */","
     * List data from storage.
     * @param conditions The conditions to be used for filtering
     * @return The result or null
    "
"<fim_prefix>/*
 * Copyright (c) 2018. the original author or authors.
 * Kunlun is licensed under the ""LICENSE"" file in the project's root directory.
 */

package kunlun.io;

import kunlun.core.Storage;

import java.util.Collection;

/**
 * The data storage.
 * @author Kahle
 */
public interface DataStorage extends Storage {

    /**<fim_suffix>
    boolean exist(Object key);

    /**
     * Obtain the data based on the resource information (key).
     * @param key The resource information (key)
     * @return The data
     */
    Object get(Object key);

    /**
     * Put the data.
     * @param data The data
     * @return The old data or null
     */
    Object put(Object data);

    /**
     * Put the key and value into <fim_middle>","
     * Determine whether the data exists based on the resource information (key).
     * @param key The resource information (key)
     * @return Whether it exists
     */","
     * Obtain the data based on the resource information (key).
     * @param key The resource information (key)
     * @return The data
     */"
"<fim_prefix> Object get(Object key);

    /**
     * Put the data.
     * @param data The data
     * @return The old data or null
     */
    Object put(Object data);

    /**
     * Put the key and value into the storage.
     * @param key The key to be stored
     * @param value The value to be stored
     * @return The old data or null
     */
    Object put(Object key, Object value);

    /**<fim_suffix>
    Object putAll(Collection<?> data);

    /**
     * Delete the data based on the resource information (key).
     * @param key The resource information (key)
     * @return The deleted data or null
     */
    Object delete(Object key);

    /**
     * Delete data from storage in batches.
     * @param keys The keys to be deleted
     * @return The result or null
     */
    Object<fim_middle>","
     * Put data into storage in batches.
     * @param data The data to be put in
     * @return The result or null
     */","
     * Put the data into the storage.
     * @param data The data
     * @return The old data or null
     */"
"<fim_prefix>/*<fim_suffix>



package it.geosolutions.geobatch.configuration.event.action;

import it.geosolutions.geobatch.catalog.Configuration;
import it.geosolutions.geobatch.catalog.impl.BaseConfiguration;

public abstract class ActionConfiguration extends BaseConfiguration implements Configuration {
    
    @Override
	public abstract ActionConfiguration clone() throws CloneNotSupportedExcepti<fim_middle>","
 *  GeoBatch - Open Source geospatial batch processing system
 *  http://geobatch.codehaus.org/
 *  Copyright (C) 2007-2008-2009 GeoSolutions S.A.S.
 *  http://www.geo-solutions.it
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author etj
 */"
"<fim_prefix>/*<fim_suffix>

package org.ujmp.core.importer;

import org.ujmp.core.Matrix;

public abstract class AbstractMatrixImporter implements MatrixImporter {

	private final Matrix matrix;

	public AbstractMatrixImporter(Matrix matrix) {
		this.matrix = matrix;
	}

	public Matrix getTargetMatrix() {
		return matrix;
	}

}
<fim_middle>","
 * Copyright (C) 2008-2015 by Holger Arndt
 *
 * This file is part of the Universal Java Matrix Package (UJMP).
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership and licensing.
 *
 * UJMP is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * UJMP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with UJMP; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 */","
 * Copyright (c) 2013, <NAME>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <organization> nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO"
"<fim_prefix>.botlogic.core.ui.tooltip;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.GlyphLayout;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.ui.Widget;
import com.badlogic.gdx.scenes.scene2d.utils.Drawable;


/**<fim_suffix>
public class TooltipWidget extends Widget {

  private TooltipStyle style;
  private String content;
  private Vector2 temp = new Vector2();

  public TooltipWidget(TooltipStyle tooltipStyle, String message) {
    this.style = tooltipStyle;
    setContent(message);
  }

  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content <fim_middle>","
 * Created by macbury on 10.04.14.
 */","
 * Created by <NAME> on 2017-01-12.
 */"
"<fim_prefix>/*<fim_suffix>
package us.mn.state.dot.tms.server;

import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeSet;
import us.mn.state.dot.sonar.Namespace;
import us.mn.state.dot.tms.ChangeVetoException;
import us.mn.state.dot.tms.DayMatcher;
import us.mn.state.dot.tms.DayMatcherHelper;
import us.mn.state.dot.tms.DayPlan;
import us.mn.state.dot.tms.TMSException;
<fim_middle>","
 * IRIS -- Intelligent Roadway Information System
 * Copyright (C) 2009-2024  Minnesota Department of Transportation
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>ase lookup */
	private DayPlanImpl(Namespace ns, String n) throws TMSException {
		this(n);
		TreeSet<DayMatcherImpl> dm_set = new TreeSet<DayMatcherImpl>();
		for (String o: mapping.lookup(this)) {
			DayMatcher dm = DayMatcherHelper.lookup(o);
			if (dm instanceof DayMatcherImpl)
				dm_set.add((DayMatcherImpl) dm);
		}
		day_matchers = dm_set.toArray(new DayMatcherImpl[0]);
	}

	/**<fim_suffix>
	private DayMatcherImpl[] day_matchers = new DayMatcherImpl[0];

	/** Set the day matchers assigned to the day plan */
	@Override
	public void setDayMatchers(DayMatcher[] dms) {
		DayMatcherImpl[] _dms = new DayMatcherImpl[dms.length];
		for (int i = 0; i < dms.length; i++) {
			if (dms[i] instanceof DayMatcherImpl)
				_dms[i] = (DayMatcherImpl) dms[i];
		}
		day_matchers = _dms;
	}
<fim_middle>", DayMatchers for the day plan */, Get the day matchers assigned to the
"<fim_prefix>n.state.dot.sonar.Namespace;
import us.mn.state.dot.tms.ChangeVetoException;
import us.mn.state.dot.tms.DayMatcher;
import us.mn.state.dot.tms.DayMatcherHelper;
import us.mn.state.dot.tms.DayPlan;
import us.mn.state.dot.tms.TMSException;

/**
 * Day plan for scheduling time actions.
 *
 * @author Douglas lau
 */
public class DayPlanImpl extends BaseObjectImpl implements DayPlan {

	/**<fim_suffix>
	static private TableMapping mapping;

	/** Load all the day plans */
	static public void loadAll() throws TMSException {
		mapping = new TableMapping(store, ""iris"", SONAR_TYPE,
			DayMatcher.SONAR_TYPE);
		store.query(""SELECT name FROM iris."" + SONAR_TYPE + "";"",
			new ResultFactory()
		{
			public void create(ResultSet row) throws Exception {
				namespace.addObject(new DayPlanImpl(<fim_middle>", DayPlan / DayMatcher table mapping */, The namespace for this object */
"<fim_prefix>on {
				namespace.addObject(new DayPlanImpl(namespace,
					row.getString(1)	// name
				));
			}
		});
	}

	/** Get a mapping of the columns */
	@Override
	public Map<String, Object> getColumns() {
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put(""name"", name);
		return map;
	}

	/** Create a new day plan */
	public DayPlanImpl(String n) {
		super(n);
	}

	/**<fim_suffix>
	private DayPlanImpl(Namespace ns, String n) throws TMSException {
		this(n);
		TreeSet<DayMatcherImpl> dm_set = new TreeSet<DayMatcherImpl>();
		for (String o: mapping.lookup(this)) {
			DayMatcher dm = DayMatcherHelper.lookup(o);
			if (dm instanceof DayMatcherImpl)
				dm_set.add((DayMatcherImpl) dm);
		}
		day_matchers = dm_set.toArray(new DayMatcherImpl[0]);
	}

	/** DayMatchers <fim_middle>", Create a day plan from database lookup */, Create a new day plan */
"<fim_prefix>vate DayMatcherImpl[] day_matchers = new DayMatcherImpl[0];

	/** Set the day matchers assigned to the day plan */
	@Override
	public void setDayMatchers(DayMatcher[] dms) {
		DayMatcherImpl[] _dms = new DayMatcherImpl[dms.length];
		for (int i = 0; i < dms.length; i++) {
			if (dms[i] instanceof DayMatcherImpl)
				_dms[i] = (DayMatcherImpl) dms[i];
		}
		day_matchers = _dms;
	}

	/**<fim_suffix>
	public void doSetDayMatchers(DayMatcher[] dms) throws TMSException {
		TreeSet<Storable> dm_set = new TreeSet<Storable>();
		for (DayMatcher dm: dms) {
			if (dm instanceof DayMatcherImpl)
				dm_set.add((DayMatcherImpl) dm);
			else {
				throw new ChangeVetoException(
					""Invalid day matcher"");
			}
		}
		mapping.update(this, dm_set);
		setDayMatchers(dms);
	}

	/** Get the day m<fim_middle>", Set the day matchers assigned to the day plan */, Set the day matchers assigned to the day plan */
"<fim_prefix>he day plan */
	public void doSetDayMatchers(DayMatcher[] dms) throws TMSException {
		TreeSet<Storable> dm_set = new TreeSet<Storable>();
		for (DayMatcher dm: dms) {
			if (dm instanceof DayMatcherImpl)
				dm_set.add((DayMatcherImpl) dm);
			else {
				throw new ChangeVetoException(
					""Invalid day matcher"");
			}
		}
		mapping.update(this, dm_set);
		setDayMatchers(dms);
	}

	/**<fim_suffix>
	@Override
	public DayMatcher[] getDayMatchers() {
		return day_matchers;
	}
}
<fim_middle>", Get the day matchers assigned to the day plan */,"
	 * @see org.opennms."
"<fim_prefix>kage us.mn.state.dot.tms.server;

import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeSet;
import us.mn.state.dot.sonar.Namespace;
import us.mn.state.dot.tms.ChangeVetoException;
import us.mn.state.dot.tms.DayMatcher;
import us.mn.state.dot.tms.DayMatcherHelper;
import us.mn.state.dot.tms.DayPlan;
import us.mn.state.dot.tms.TMSException;

/**<fim_suffix>
public class DayPlanImpl extends BaseObjectImpl implements DayPlan {

	/** DayPlan / DayMatcher table mapping */
	static private TableMapping mapping;

	/** Load all the day plans */
	static public void loadAll() throws TMSException {
		mapping = new TableMapping(store, ""iris"", SONAR_TYPE,
			DayMatcher.SONAR_TYPE);
		store.query(""SELECT name FROM iris."" + SONAR_TYPE + "";"",
			new Res<fim_middle>","
 * Day plan for scheduling time actions.
 *
 * @author Douglas lau
 */","
 * DayPlanImpl
 *
 * @author <NAME>
 */"
"<fim_prefix>			new ResultFactory()
		{
			public void create(ResultSet row) throws Exception {
				namespace.addObject(new DayPlanImpl(namespace,
					row.getString(1)	// name
				));
			}
		});
	}

	/** Get a mapping of the columns */
	@Override
	public Map<String, Object> getColumns() {
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put(""name"", name);
		return map;
	}

	/**<fim_suffix>
	public DayPlanImpl(String n) {
		super(n);
	}

	/** Create a day plan from database lookup */
	private DayPlanImpl(Namespace ns, String n) throws TMSException {
		this(n);
		TreeSet<DayMatcherImpl> dm_set = new TreeSet<DayMatcherImpl>();
		for (String o: mapping.lookup(this)) {
			DayMatcher dm = DayMatcherHelper.lookup(o);
			if (dm instanceof DayMatcherImpl)
				dm_set.add((DayMatc<fim_middle>", Create a new day plan */, Create a day plan from database
"<fim_prefix>*/
	static public void loadAll() throws TMSException {
		mapping = new TableMapping(store, ""iris"", SONAR_TYPE,
			DayMatcher.SONAR_TYPE);
		store.query(""SELECT name FROM iris."" + SONAR_TYPE + "";"",
			new ResultFactory()
		{
			public void create(ResultSet row) throws Exception {
				namespace.addObject(new DayPlanImpl(namespace,
					row.getString(1)	// name
				));
			}
		});
	}

	/**<fim_suffix>
	@Override
	public Map<String, Object> getColumns() {
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put(""name"", name);
		return map;
	}

	/** Create a new day plan */
	public DayPlanImpl(String n) {
		super(n);
	}

	/** Create a day plan from database lookup */
	private DayPlanImpl(Namespace ns, String n) throws TMSException {
		this(n);
		TreeSet<DayMatcherImpl<fim_middle>", Get a mapping of the columns */, Get the columns for this table */
"<fim_prefix>DayMatcherImpl> dm_set = new TreeSet<DayMatcherImpl>();
		for (String o: mapping.lookup(this)) {
			DayMatcher dm = DayMatcherHelper.lookup(o);
			if (dm instanceof DayMatcherImpl)
				dm_set.add((DayMatcherImpl) dm);
		}
		day_matchers = dm_set.toArray(new DayMatcherImpl[0]);
	}

	/** DayMatchers for the day plan */
	private DayMatcherImpl[] day_matchers = new DayMatcherImpl[0];

	/**<fim_suffix>
	@Override
	public void setDayMatchers(DayMatcher[] dms) {
		DayMatcherImpl[] _dms = new DayMatcherImpl[dms.length];
		for (int i = 0; i < dms.length; i++) {
			if (dms[i] instanceof DayMatcherImpl)
				_dms[i] = (DayMatcherImpl) dms[i];
		}
		day_matchers = _dms;
	}

	/** Set the day matchers assigned to the day plan */
	public void doSetDayMatchers(DayMatcher[] dms) throws TMSExcept<fim_middle>", Set the day matchers assigned to the day plan */, Set the day matchers assigned to the day plan */
"<fim_prefix>t us.mn.state.dot.tms.DayMatcher;
import us.mn.state.dot.tms.DayMatcherHelper;
import us.mn.state.dot.tms.DayPlan;
import us.mn.state.dot.tms.TMSException;

/**
 * Day plan for scheduling time actions.
 *
 * @author Douglas lau
 */
public class DayPlanImpl extends BaseObjectImpl implements DayPlan {

	/** DayPlan / DayMatcher table mapping */
	static private TableMapping mapping;

	/**<fim_suffix>
	static public void loadAll() throws TMSException {
		mapping = new TableMapping(store, ""iris"", SONAR_TYPE,
			DayMatcher.SONAR_TYPE);
		store.query(""SELECT name FROM iris."" + SONAR_TYPE + "";"",
			new ResultFactory()
		{
			public void create(ResultSet row) throws Exception {
				namespace.addObject(new DayPlanImpl(namespace,
					row.getString(1)	// name
				));
			}
		});
	}

	/** G<fim_middle>", Load all the day plans */,"
	 * Constructor.
"
"<fim_prefix>/*<fim_suffix>
package com.rapidminer.gui.tour;

import java.awt.Window;

import com.rapidminer.gui.RapidMinerGUI;
import com.rapidminer.gui.tools.components.BubbleToButton;
import com.rapidminer.gui.tools.components.BubbleWindow;
import com.rapidminer.gui.tools.components.BubbleWindow.AlignedSide;

/**
 * This Subclass of {@link Step} will open a {@link BubbleWindow} which closes if the given Butto<fim_middle>","
 *  RapidMiner
 *
 *  Copyright (C) 2001-2014 by RapidMiner and the contributors
 *
 *  Complete list of developers available at our web site:
 *
 *       http://rapidminer.com
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see http://www.gnu.org/licenses/.
 */","*
 * This Subclass of {@link Step} will open a {@link BubbleWindow} which closes if the given ButtonedButton is clicked.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>ssage which will be shown in the {@link BubbleWindow}.
	 * @param buttonKey i18nKey of the Button to which the {@link Step} listens and the {@link BubbleWindow} will point to.
	 */
	public SimpleStep(AlignedSide preferredAlignment, String i18nKey, String buttonKey, boolean isInMenuBar){
		this(preferredAlignment, i18nKey, buttonKey, isInMenuBar, RapidMinerGUI.getMainFrame());
	}
	
	/**<fim_suffix>
	public SimpleStep(AlignedSide preferredAlignment, String i18nKey, String buttonKey, boolean isInMenuBar , Window owner){
		super();
		this.alignment = preferredAlignment;
		this.owner = owner;
		this.i18nKey = i18nKey;
		this.buttonKey = buttonKey;
		this.isInMenuBar = isInMenuBar;
	}
	
	@Override
	boolean createBubble() {
		bubble = new BubbleToButton(owner, null, alignment, i18nKey<fim_middle>","
	 * This Steps creates a Bubble pointing to the Button with the given key which disposes in the moment the Button will be pressed.
	 * The owner is is the Mainframe by default.
	 * @param preferredAlignment offer for alignment but the Class will calculate by itself whether the position is usable.
	 * @param i18nKey of the message which will be shown in the {@link BubbleWindow}.
	 * @param buttonKey i18nKey of the Button to which the {@link Step} listens and the {@link BubbleWindow} will point to.
	 * @param owner sets the owner of the Bubble from Mainframe to given owner
	 */","
	 * Creates a new {@link SimpleStep} with the given parameters.
	 * @param preferredAlignment the preferred alignment of the {@link BubbleWindow}
	 * @param i18nKey i18nKey of the {@link Step}
	 * @param buttonKey i18nKey of the Button to which the {@link Step} listens and the {@link BubbleWindow} will point to.
	 * @param isInMenuBar true if the {@link Step} should be shown in the {@link MenuBar}
	 * @param owner the owner of the {@link BubbleWindow}"
"<fim_prefix>nts.BubbleWindow.AlignedSide;

/**
 * This Subclass of {@link Step} will open a {@link BubbleWindow} which closes if the given Button was pressed.
 * 
 * @author Philipp Kersting and Thilo Kamradt
 *
 */

public class SimpleStep extends Step {

	private String buttonKey;
	private String i18nKey;
	private AlignedSide alignment;
	private Window owner;
	private boolean isInMenuBar;
	
	/**<fim_suffix>
	public SimpleStep(AlignedSide preferredAlignment, String i18nKey, String buttonKey, boolean isInMenuBar){
		this(preferredAlignment, i18nKey, buttonKey, isInMenuBar, RapidMinerGUI.getMainFrame());
	}
	
	/**
	 * This Steps creates a Bubble pointing to the Button with the given key which disposes in the moment the Button will be pressed.
	 * The owner is is the Mainframe by default.
	 <fim_middle>","
	 * This Steps creates a Bubble pointing to the Button with the given key which disposes in the moment the Button will be pressed.
	 * The owner is is the Mainframe by default.
	 * @param preferredAlignment offer for alignment but the Class will calculate by itself whether the position is usable.
	 * @param i18nKey of the message which will be shown in the {@link BubbleWindow}.
	 * @param buttonKey i18nKey of the Button to which the {@link Step} listens and the {@link BubbleWindow} will point to.
	 */","
	 * This Steps creates a Bubble pointing to the Button with the given key which disposes in the moment the Button will be pressed.
	 * The owner is is the Mainframe by default.
	  * 
	 * @param preferredAlignment
	 * @param i18nKey
	 * @param buttonKey
	 * @param isInMenuBar
	 * @param owner
	 */"
"<fim_prefix>General Public License
 *  along with this program.  If not, see http://www.gnu.org/licenses/.
 */
package com.rapidminer.gui.tour;

import java.awt.Window;

import com.rapidminer.gui.RapidMinerGUI;
import com.rapidminer.gui.tools.components.BubbleToButton;
import com.rapidminer.gui.tools.components.BubbleWindow;
import com.rapidminer.gui.tools.components.BubbleWindow.AlignedSide;

/**<fim_suffix>

public class SimpleStep extends Step {

	private String buttonKey;
	private String i18nKey;
	private AlignedSide alignment;
	private Window owner;
	private boolean isInMenuBar;
	
	/**
	 * This Steps creates a Bubble pointing to the Button with the given key which disposes in the moment the Button will be pressed.
	 * The owner is is the Mainframe by default.
	 * @param preferredAlign<fim_middle>","
 * This Subclass of {@link Step} will open a {@link BubbleWindow} which closes if the given Button was pressed.
 * 
 * @author Philipp Kersting and Thilo Kamradt
 *
 */","
 * This class represents a step in the tour.
 * 
 * @author <NAME>
 *"
"<fim_prefix>/**<fim_suffix>
package net.openchrom.xxd.processor.supplier.tracecompare.model;

public interface ITrackModel {

	int getSampleTrack();

	void setSampleTrack(int sampleTrack);

	int getReferenceTrack();

	void setReferenceTrack(int referenceTrack);

	int getScanVelocity();

	void setScanVelocity(int scanVelocity);

	double getStartRetentionTime();

	void setStartRetentionTime(double startRetentionTi<fim_middle>","*****************************************************************************
 * Copyright (c) 2017, 2018 Lablicate GmbH.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 *
 * Dr. Philip Wenig - initial API and implementation
 *******************************************************************************/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.cab404.moonlight.framework;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

/**<fim_suffix>
public class EntrySet<K, V> implements Iterable<Map.Entry<K, V>> {
    private ArrayList<Map.Entry<K, V>> data;

    public EntrySet() {
        data = new ArrayList<>();
    }

    public void put(K key, V value) {
        data.add(new AbstractMap.SimpleEntry<>(key, value));
    }

    @Override public Iterator<Map.Entry<K, V>> iterator() {
        return data.iterator();
    }
}
<fim_middle>","
 * Just for order-dependent request data. It isn't actually a map.
 *
 * @author cab404
 */","
 * Created by cab404 on 3/29/2016.
 */"
"<fim_prefix>/*<fim_suffix>

package dr.evomodelxml.branchratemodel;

import dr.evomodel.branchratemodel.BranchRateModel;
import dr.evomodel.tree.TreeModel;
import dr.inference.model.BranchParameter;
import dr.inference.model.Parameter;
import dr.xml.*;

/**
 * @author Marc Suchard
 * @author Xiang Ji
 */
public class BranchParameterParser extends AbstractXMLObjectParser {

    public static final String BRANCH_<fim_middle>","
 * BranchParameterParser.java
 *
 * Copyright Â© 2002-2024 the BEAST Development Team
 * http://beast.community/about
 *
 * This file is part of BEAST.
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership and licensing.
 *
 * BEAST is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 *  BEAST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with BEAST; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 *
 */","*
 * @author Marc Suchard
 * @author Xiang Ji
 */"
"<fim_prefix>ublic
 * License along with BEAST; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
 * Boston, MA  02110-1301  USA
 *
 */

package dr.evomodelxml.branchratemodel;

import dr.evomodel.branchratemodel.BranchRateModel;
import dr.evomodel.tree.TreeModel;
import dr.inference.model.BranchParameter;
import dr.inference.model.Parameter;
import dr.xml.*;

/**<fim_suffix>
public class BranchParameterParser extends AbstractXMLObjectParser {

    public static final String BRANCH_SPECIFIC_COMPOUND_PARAMETER = ""branchParameter"";

    @Override
    public Object parseXMLObject(XMLObject xo) throws XMLParseException {

        Parameter rootParameter = (Parameter) xo.getChild(Parameter.class);
        BranchRateModel branchRates = (BranchRateModel) xo.getCh<fim_middle>","
 * @author Marc Suchard
 * @author Xiang Ji
 */","
 * @author <NAME>
 * @version $Id$
 */"
"<fim_prefix>/*<fim_suffix>

package org.openzal.zal;

public class LdapUtil
{
}
<fim_middle>","
 * ZAL - The abstraction layer for Zimbra.
 * Copyright (C) 2016 ZeXtras S.r.l.
 *
 * This file is part of ZAL.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation, version 2 of
 * the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ZAL. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>urePaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;

import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;

/**<fim_suffix>
public class PanelTimeframe extends JPanel
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	
	private static final Color LOOK_COLOR = new Color(132,170,232); 
	private static final Color TRIAL_COLOR = view.panels.ExperimentOverview.HEADER_COLOR;
	private static final Color TRIAL_INCOMPLETE_COLOR = new Color(189, 207,211);
	private static final Color LOOK_INCOMPLET<fim_middle>","
 *	Each time frame has its own panel.
 */","
 * Panel for displaying the time frame of the experiment.
"
"<fim_prefix>t(getStart(), endTime, tf.getType());
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				panel.setSize(rect);
			}
		});
	}
		
	/**
	 * Method to ensure complete removal of Panel time frame from view
	 */
	public void remove()
	{
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				panel.removeAll();
				pane.remove(panel);
			}
		});
	}
	
	/**<fim_suffix>
	private void createLayout()
	{
		this.slate = new TexturePaint(getTexture(), new Rectangle(0,0,10,10));
		
		this.labelbl = new JLabel();
		this.commentLbl = new JLabel();
		this.commentLbl.setForeground(Color.DARK_GRAY);
		
		this.contextMenu = new ContextMenu(g, tf);
		
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				setLayout(new BoxLayout(panel, BoxLayout<fim_middle>","
	 * Creates a layout for the panel
	 */","
	 * Method to set the time frame to be displayed"
"<fim_prefix>ate static final int DETAIL_MARGIN = 5;
	private static final int OVERVIEW_MARGIN = 1;
	
	private AbstractTimeFrame tf;
	private JLabel labelbl, commentLbl;
	private ContextMenu contextMenu;
	private ABar pane;
	private Globals g;
	private TimeLineBar timeline;
	private PanelTimeframe panel;
	
	private TexturePaint slate;
	private int margin;
	
	private IMediaPlayerListener mpl;
	
	/**<fim_suffix>
	public PanelTimeframe(AbstractTimeFrame tf, ABar parentPane, Globals g, TimeLineBar timeline)
	{
		this.panel = this;
		this.tf = tf;
		this.pane = parentPane;
		this.g = g;
		this.timeline = timeline;
		
		this.margin = (pane.getType() == ABar.TYPE_DETAIL) ? DETAIL_MARGIN : OVERVIEW_MARGIN;
		
		if(tf.getType() ==AbstractTimeFrame.TYPE_TRIAL){
			((AbstractTimeContainer) tf).registe<fim_middle>","
	 * Constructor for a new Panel time frame tuple
	 * @param tf			The time frame
	 * @param parentPane	The pane this panel should be added to
	 * @param g				Reference to Globals instance
	 * @param timeline		Reference to time line instance
	 */","
	 * 
	 * @param tf
	 * @param parentPane
	 * @param g
	 * @param timeline
	 */"
"<fim_prefix>Lbl.setForeground(Color.DARK_GRAY);
		
		this.contextMenu = new ContextMenu(g, tf);
		
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));
				setBorder(new EmptyBorder(margin, margin, 0, 0));
				add(labelbl);
				add(commentLbl);
				setComponentPopupMenu(contextMenu);
				pane.add(panel);
			}
		});
	}
	
	/**<fim_suffix>
	public void setSize(final Rectangle size)
	{
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				setBounds(size);
				updateBorder();
				updateBackground();
				updateInfo();
				repaint();
			}
		});
	}
	
	/**
	 * Method to update the background based on what type the time frame is and if it has ended
	 */
	private void updateBackground()
	{
		if(tf.hasEnded())<fim_middle>","
	 * Method to update the size of the time frame, if anything changed on the GUI
	 * @param size
	 */","
	 * Method to update the border based on what type the time frame is and if it has ended
	 */"
"<fim_prefix>	 * Method to update the background based on what type the time frame is and if it has ended
	 */
	private void updateBackground()
	{
		if(tf.hasEnded())
		{
			setBackground((tf.getType() == AbstractTimeFrame.TYPE_LOOK) ? LOOK_COLOR : TRIAL_COLOR);
		} else {
			setBackground((tf.getType() == AbstractTimeFrame.TYPE_LOOK) ? LOOK_INCOMPLETE_COLOR : TRIAL_INCOMPLETE_COLOR);
		}
	}
	
	/**<fim_suffix>
	private void updateInfo()
	{
		SwingUtilities.invokeLater(new Runnable(){
			public void run()
			{
				int number = g.getController().getNumber(tf);
				int nrlength = Integer.toBinaryString(number).length();
				
				long duration = tf.getType() == AbstractTimeFrame.TYPE_LOOK ? tf.getDuration() : ((AbstractTimeContainer) tf).getTotalTimeForItems();
				
				String label = String.fo<fim_middle>","
	 * Method to update the labels, in case start or end time, or comments have changed
	 * @param index
	 */","
	 * Method to update the info based on what type the time frame is and if it has ended
	 */"
"<fim_prefix>the timeout area once the frame is painted
	 */
	public void paintComponent(final Graphics g)
	{
		super.paintComponent(g);
		
		long timeout = tf.getTimeout();
		if(timeout > -1l)
		{
			int x = xByTime(timeout);
			Graphics2D g2 = (Graphics2D) g;
			Rectangle2D rect = new Rectangle2D.Double(x, 0, getWidth() - x, getHeight());
			
			g2.setPaint(slate);
			g2.fill(rect);
		}
	}
	
	/**<fim_suffix>
	public long getStart()
	{
		return tf.getBegin();
	}
	
	/**
	 * Method that returns the end time of the time frame
	 * @return	End time of time frame
	 */
	public long getEnd()
	{
		return tf.getEnd();
	}
	
	/**
	 * Method to get the type of the current time frame
	 * @return	integer Type of time frame (AbstractTimeFrame.TYPE...)
	 */
	public int getType()
	{
		return tf.getType();
	<fim_middle>","
	 * Method that returns the start time of the Panel Time frame
	 * @return	Start time of time frame
	 */","
	 * Method that returns the x coordinate of the time frame
	 * @param	time	Time to get the x coordinate for"
"<fim_prefix>tHeight());
			
			g2.setPaint(slate);
			g2.fill(rect);
		}
	}
	
	/**
	 * Method that returns the start time of the Panel Time frame
	 * @return	Start time of time frame
	 */
	public long getStart()
	{
		return tf.getBegin();
	}
	
	/**
	 * Method that returns the end time of the time frame
	 * @return	End time of time frame
	 */
	public long getEnd()
	{
		return tf.getEnd();
	}
	
	/**<fim_suffix>
	public int getType()
	{
		return tf.getType();
	}
	
	/**
	 * Calculation method for the x coordinate on the panel given a certain time
	 * @param time		A certain time
	 * @return			The x coordinate that corresponds to the time 
	 */
	private int xByTime(long time)
	{
		long end = tf.hasEnded() ? tf.getEnd() : Math.max(tf.getMinimumEndTime(), g.getVideoController().getMediaTime()); 
	<fim_middle>","
	 * Method to get the type of the current time frame
	 * @return	integer Type of time frame (AbstractTimeFrame.TYPE...)
	 */","
	 * Method that returns the type of the time frame
	 * @return	Type of time frame
	 */"
"<fim_prefix>timeout > -1l)
		{
			int x = xByTime(timeout);
			Graphics2D g2 = (Graphics2D) g;
			Rectangle2D rect = new Rectangle2D.Double(x, 0, getWidth() - x, getHeight());
			
			g2.setPaint(slate);
			g2.fill(rect);
		}
	}
	
	/**
	 * Method that returns the start time of the Panel Time frame
	 * @return	Start time of time frame
	 */
	public long getStart()
	{
		return tf.getBegin();
	}
	
	/**<fim_suffix>
	public long getEnd()
	{
		return tf.getEnd();
	}
	
	/**
	 * Method to get the type of the current time frame
	 * @return	integer Type of time frame (AbstractTimeFrame.TYPE...)
	 */
	public int getType()
	{
		return tf.getType();
	}
	
	/**
	 * Calculation method for the x coordinate on the panel given a certain time
	 * @param time		A certain time
	 * @return			The x coordinate that c<fim_middle>","
	 * Method that returns the end time of the time frame
	 * @return	End time of time frame
	 */","
	 * Method that returns the end time of the Panel Time frame
	 * @return	End time of time frame
	"
"<fim_prefix> long getStart()
	{
		return tf.getBegin();
	}
	
	/**
	 * Method that returns the end time of the time frame
	 * @return	End time of time frame
	 */
	public long getEnd()
	{
		return tf.getEnd();
	}
	
	/**
	 * Method to get the type of the current time frame
	 * @return	integer Type of time frame (AbstractTimeFrame.TYPE...)
	 */
	public int getType()
	{
		return tf.getType();
	}
	
	/**<fim_suffix>
	private int xByTime(long time)
	{
		long end = tf.hasEnded() ? tf.getEnd() : Math.max(tf.getMinimumEndTime(), g.getVideoController().getMediaTime()); 
		int x = Math.round(((float) time - (float) tf.getBegin()) / ((float) end - (float) tf.getBegin()) * (float) getWidth());
		return x;
	}
	
	/**
	 * Creates the texture for the timeout area
	 * @return	BufferedImage of 10x10 pixels con<fim_middle>","
	 * Calculation method for the x coordinate on the panel given a certain time
	 * @param time		A certain time
	 * @return			The x coordinate that corresponds to the time 
	 */","
	 * Method to get the width of the current time frame
	 * @return	Width of time frame
	 */"
"<fim_prefix>aram time		A certain time
	 * @return			The x coordinate that corresponds to the time 
	 */
	private int xByTime(long time)
	{
		long end = tf.hasEnded() ? tf.getEnd() : Math.max(tf.getMinimumEndTime(), g.getVideoController().getMediaTime()); 
		int x = Math.round(((float) time - (float) tf.getBegin()) / ((float) end - (float) tf.getBegin()) * (float) getWidth());
		return x;
	}
	
	/**<fim_suffix>
	private static BufferedImage getTexture()
	{
		BufferedImage bi = new BufferedImage(10,10, BufferedImage.TYPE_INT_ARGB);
		Graphics2D g2 = (Graphics2D) bi.getGraphics();
		Line2D diagonal = new Line2D.Float(0, 0, 10, 10);
		g2.setColor(TIMEOUT_COLOR);
		g2.draw(diagonal);
		return bi;
	}
}
<fim_middle>","
	 * Creates the texture for the timeout area
	 * @return	BufferedImage of 10x10 pixels containing a texture for the timeout area
	 */","
	 * Gets the texture that is used to indicate that a video is currently loading.
	 * @return			The texture
	 */"
"<fim_prefix>ntextMenu);
				pane.add(panel);
			}
		});
	}
	
	/**
	 * Method to update the size of the time frame, if anything changed on the GUI
	 * @param size
	 */
	public void setSize(final Rectangle size)
	{
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				setBounds(size);
				updateBorder();
				updateBackground();
				updateInfo();
				repaint();
			}
		});
	}
	
	/**<fim_suffix>
	private void updateBackground()
	{
		if(tf.hasEnded())
		{
			setBackground((tf.getType() == AbstractTimeFrame.TYPE_LOOK) ? LOOK_COLOR : TRIAL_COLOR);
		} else {
			setBackground((tf.getType() == AbstractTimeFrame.TYPE_LOOK) ? LOOK_INCOMPLETE_COLOR : TRIAL_INCOMPLETE_COLOR);
		}
	}
	
	/**
	 * Method to update the labels, in case start or end time, or comments have changed
	 * @param <fim_middle>","
	 * Method to update the background based on what type the time frame is and if it has ended
	 */","
	 * Method to update the size of the time frame, if anything changed on the GUI
	 * @param"
"<fim_prefix>_DETAIL && tf.getBegin() <  timeline.getCurrentStartVisibleTime())
		{
			long end = (tf.hasEnded()) ? tf.getEnd() : g.getVideoController().getMediaTime();
			left = (int) Math.round(
					(double) (timeline.getCurrentStartVisibleTime() - tf.getBegin()) / 
					(double) (end - tf.getBegin()) 
					* getWidth() + left); 
		}
		
		setBorder(new EmptyBorder(margin, left, 0, 0));
	}
	
	/**<fim_suffix>
	public void paintComponent(final Graphics g)
	{
		super.paintComponent(g);
		
		long timeout = tf.getTimeout();
		if(timeout > -1l)
		{
			int x = xByTime(timeout);
			Graphics2D g2 = (Graphics2D) g;
			Rectangle2D rect = new Rectangle2D.Double(x, 0, getWidth() - x, getHeight());
			
			g2.setPaint(slate);
			g2.fill(rect);
		}
	}
	
	/**
	 * Method that returns the start time of the <fim_middle>","
	 * Paints the timeout area once the frame is painted
	 */","
	 * Method that returns the start time of the timeline.
	 *"
"<fim_prefix>resize()
	{
		long time = Globals.getInstance().getVideoController().getMediaTime();
		long endTime = (tf.hasEnded()) ? tf.getEnd() : Math.min(tf.getEnd(), Math.max(time, tf.getMinimumEndTime()));
		final Rectangle rect = pane.getTfRect(getStart(), endTime, tf.getType());
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				panel.setSize(rect);
			}
		});
	}
		
	/**<fim_suffix>
	public void remove()
	{
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				panel.removeAll();
				pane.remove(panel);
			}
		});
	}
	
	/**
	 * Creates a layout for the panel
	 */
	private void createLayout()
	{
		this.slate = new TexturePaint(getTexture(), new Rectangle(0,0,10,10));
		
		this.labelbl = new JLabel();
		this.commentLbl = new JLabel();
		this.comme<fim_middle>","
	 * Method to ensure complete removal of Panel time frame from view
	 */","
	 * Removes the panel from the pane
	 */"
"<fim_prefix>etComment());
				setToolTipText(toolTipText);
				
				if(getWidth() < 40 + 5 * nrlength)
				{
					if(getWidth() > 5 * nrlength){
						label = Integer.toString(number);
						comment = """";
					} else {
						label = """";
						comment = """";
					}
				}
				
				labelbl.setText(label);
				commentLbl.setText((pane.getType() == ABar.TYPE_DETAIL) ? comment : """");
			}
		});
	}
	
	/**<fim_suffix>
	private void updateBorder()
	{
		int left = margin;
		if(pane.getType() == ABar.TYPE_DETAIL && tf.getBegin() <  timeline.getCurrentStartVisibleTime())
		{
			long end = (tf.hasEnded()) ? tf.getEnd() : g.getVideoController().getMediaTime();
			left = (int) Math.round(
					(double) (timeline.getCurrentStartVisibleTime() - tf.getBegin()) / 
					(double) (end - tf.getBegin()) 
					* g<fim_middle>","
	 * Method to update the margin to show text even if half the panel is hidden
	 */","*
	 * Updates the border of the bar.
	 */"
"<fim_prefix>o not include sub categories
                    if (category.level == 1) {
                        // filter root categories only
                        filterIds.add(category.getId());
                    }
                }
            }
        }
    }

    @Override
    protected void setColumnFilter() {
        columnFilter = TransactionColumns.category_id.name();
    }

    /**<fim_suffix>
    @Override
    protected void build() {
        boolean addSubs = MyPreferences.addSubCategoriesToSum(context);
        if (addSubs) {
            SQLiteDatabase db = em.db();
            Cursor cursor = null;
            try {
                long categoryId = filterIds.get(currentFilterOrder);
                Category parent = em.getCategory(categoryId);
                String wh<fim_middle>","
     * Request data and fill data objects (list of points, max, min, etc.)
     */","*
     * Build the query to get the transactions.
     */"
"<fim_prefix> ru.orangesoftware.financisto.model.Category;
import ru.orangesoftware.financisto.model.Currency;
import ru.orangesoftware.financisto.model.PeriodValue;
import ru.orangesoftware.financisto.model.ReportDataByPeriod;
import ru.orangesoftware.financisto.utils.MyPreferences;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;

/**<fim_suffix>
public class CategoryByPeriodReport extends Report2DChart {

    public CategoryByPeriodReport(Context context, MyEntityManager em, Calendar startPeriod, int periodLength, Currency currency) {
        super(context, em, startPeriod, periodLength, currency);
    }

    @Override
    public String getFilterName() {
        if (filterIds.size() > 0) {
            long categoryId = filter<fim_middle>","
 * 2D Chart Report to display monthly results by Categories.
 *
 * @author Abdsandryk
 */","
 * Created by Vladimir on 08.07.2015.
 */"
"<fim_prefix>
/*<fim_suffix>
package com.versant.core.jdo.junit.test3.model.nav;

/**
 */
public class NavRootRef1 {

    private String navRootRef1;

    public String getNavRootRef1() {
        return navRootRef1;
    }

    public void setNavRootRef1(String navRootRef1) {
        this.navRootRef1 = navRootRef1;
    }
}
<fim_middle>","
 * Copyright (c) 1998 - 2005 Versant Corporation
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Versant Corporation - initial API and implementation
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package com.ciphertool.zenith.genetic.statistics;

import com.ciphertool.zenith.genetic.GeneticAlgorithmStrategy;
import lombok.*;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

@NoArgsConstructor
@Getter
@Setter
@EqualsAndHashCode
@ToString
public class ExecutionStatistics {
    private LocalDateTime startDateTime;
<fim_middle>","
 * Copyright 2017-2020 George Belden
 *
 * This file is part of Zenith.
 *
 * Zenith is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Zenith is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Zenith. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 10/10/2017.
 */"
"<fim_prefix>/*<fim_suffix>
/**
 *
 */
package com.xdev.jadoth.util;

/**
 * @author Thomas Muenz
 *
 */
public interface KeyValue<K,V>
{
	public K key();
	public V value();
	
	
	public class Implementation<K,V> extends Pair.Implementation<K, V>
	{		
		public Implementation(final K key, final V val)
		{
			super(key, val);
		}
		/**
		 * @return a String of pattern <code>[<i>key</i> -> <i>value</i>]</code>
		 */<fim_middle>","
 * XDEV Application Framework - XDEV Application Framework
 * Copyright Â© 2003 XDEV Software (https://xdev.software)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author Thomas Muenz
 *
 */"
"<fim_prefix>
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 *
 */
package com.xdev.jadoth.util;

/**<fim_suffix>
public interface KeyValue<K,V>
{
	public K key();
	public V value();
	
	
	public class Implementation<K,V> extends Pair.Implementation<K, V>
	{		
		public Implementation(final K key, final V val)
		{
			super(key, val);
		}
		/**
		 * @return a String of pattern <code>[<i>key</i> -> <i>value</i>]</code>
		 */
		@Override
		public String toString()
		{
			// self-reference can never oc<fim_middle>","
 * @author Thomas Muenz
 *
 */","
 * @author <NAME>
 * @version $"
"<fim_prefix>ense
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 *
 */
package com.xdev.jadoth.util;

/**
 * @author Thomas Muenz
 *
 */
public interface KeyValue<K,V>
{
	public K key();
	public V value();
	
	
	public class Implementation<K,V> extends Pair.Implementation<K, V>
	{		
		public Implementation(final K key, final V val)
		{
			super(key, val);
		}
		/**<fim_suffix>
		@Override
		public String toString()
		{
			// self-reference can never occur as this implementation is immutable
			return '['+String.valueOf(this.key())+"" -> ""+String.valueOf(this.value())+']';
		}
		
	}
}
<fim_middle>","
		 * @return a String of pattern <code>[<i>key</i> -> <i>value</i>]</code>
		 */","
		 * @see java.lang.Object#toString()
		 */"
"<fim_prefix>package tests;

/*<fim_suffix>

import java.io.IOException;

import junit.framework.TestCase;
import utils.TSUtil;
import utils.TestArticleManager;
import de.d3web.empiricaltesting.RatedTestCase;
import com.denkbares.plugin.test.InitPluginManager;
import de.knowwe.core.kdom.Article;

/**
 * This class tests whether the TestCases are equal
 * 
 * @author Sebastian Furth
 * @see TSUtil to modify the TestSuite against<fim_middle>","
 * Copyright (C) 2009 Chair of Artificial Intelligence and Applied Informatics
 * Computer Science VI, University of Wuerzburg
 * 
 * This is free software; you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or (at your option) any
 * later version.
 * 
 * This software is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF
 * site: http://www.fsf.org.
 */","*
 * This class tests whether the TestCases are equal
 * 
 * @author Sebastian Furth
 * @see TSUtil to modify the TestSuite against the TestCases
 *
 */"
"<fim_prefix>@author Sebastian Furth
 * @see TSUtil to modify the TestSuite against which everything is tested
 * @see TestCaseTest.txt to modify the Article which is tested
 * 
 */
public class TestCaseTest extends TestCase {

	private final String TESTSUITEARTICLE = ""src/test/resources/TestCaseTest.txt"";

	@Override
	protected void setUp() throws IOException {
		InitPluginManager.init();
	}

	/**<fim_suffix>
	public void testTestCases() {
		Article article =
				TestArticleManager.getArticle(TESTSUITEARTICLE);
		de.d3web.empiricaltesting.TestCase loadedTS =
				TSUtil.getInstance().findTestSuite(article);
		de.d3web.empiricaltesting.TestCase createdTS = TSUtil.getInstance().getCreatedTS();

		assertNotNull(""TestCase has no Sequential-Test-Case."",
				loadedTS.getRepository().get(0));
		as<fim_middle>","
	 * Test some aspects of the TestCase NOTE: derived Solutions are not tested
	 * because they have nothing to do with the creation/ parsing of the the
	 * TestSuite(-section)
	 */","
	 * Tests the creation of a TestSuite from a given Article.
	 */"
"<fim_prefix>tware Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF
 * site: http://www.fsf.org.
 */

import java.io.IOException;

import junit.framework.TestCase;
import utils.TSUtil;
import utils.TestArticleManager;
import de.d3web.empiricaltesting.RatedTestCase;
import com.denkbares.plugin.test.InitPluginManager;
import de.knowwe.core.kdom.Article;

/**<fim_suffix>
public class TestCaseTest extends TestCase {

	private final String TESTSUITEARTICLE = ""src/test/resources/TestCaseTest.txt"";

	@Override
	protected void setUp() throws IOException {
		InitPluginManager.init();
	}

	/**
	 * Test some aspects of the TestCase NOTE: derived Solutions are not tested
	 * because they have nothing to do with the creation/ parsing of the the
	 * TestSuite(-s<fim_middle>","
 * This class tests whether the TestCases are equal
 * 
 * @author Sebastian Furth
 * @see TSUtil to modify the TestSuite against which everything is tested
 * @see TestCaseTest.txt to modify the Article which is tested
 * 
 */","
 * @author <NAME>
 * 
 */"
"<fim_prefix>package com.ziq.linemaze.rect;

import com.ziq.linemaze.MazeTile;

import java.io.Serializable;
import java.util.Iterator;
import java.util.List;

/**<fim_suffix>
public class BlockRectTile implements MazeTile, Serializable {

    private List<Integer> position;
    /**
     * The direction of the tile.
     */
    private Integer direction;

    @Override
    public void rotate() {
    }

    @Override
    public int getRotation() {
        return 0;
    }

    @Override
    public Integer access(Integer entrance) {
       <fim_middle>","
 * The block tile.
 *
 * @author ziq
 */","
 * Created by ziq on 2016/12/28.
 */"
"<fim_prefix>package com.ziq.linemaze.rect;

import com.ziq.linemaze.MazeTile;

import java.io.Serializable;
import java.util.Iterator;
import java.util.List;

/**
 * The block tile.
 *
 * @author ziq
 */
public class BlockRectTile implements MazeTile, Serializable {

    private List<Integer> position;
    /**<fim_suffix>
    private Integer direction;

    @Override
    public void rotate() {
    }

    @Override
    public int getRotation() {
        return 0;
    }

    @Override
    public Integer access(Integer entrance) {
        return null;
    }

    @Override
    public Boolean isAccessed(Integer entrance) {
        return true;
    }

    @Override
    public Iterator<<fim_middle>","
     * The direction of the tile.
     */","
     * The direction.
     */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.wb.internal.core.model.util;

import org.eclipse.wb.core.model.JavaInfo;
import org.eclipse.wb.core.model.association.Association;
import org.eclipse.wb.core.model.association.AssociationUtils;
import org.eclipse.wb.core.model.association.InvocationChildAssociation;
import org.eclipse.wb.internal.core.model.JavaInfoUtils;
import org.eclipse.wb.internal.core<fim_middle>","*****************************************************************************
 * Copyright (c) 2011, 2023 Google, Inc.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Google, Inc. - initial API and implementation
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>argetDescription target)
			throws Exception {
		return ComponentPresentationHelper.getPresentation(
				m_editor,
				target.getComponentClass().getName(),
				target.getCreationId());
	}

	////////////////////////////////////////////////////////////////////////////
	//
	// Contribution
	//
	////////////////////////////////////////////////////////////////////////////
	/**<fim_suffix>
	public static void contribute(String toolkitClassName,
			JavaInfo component,
			IContributionManager manager) throws Exception {
		// check for supported variable type
		if (!(component.getVariableSupport() instanceof AbstractSimpleVariableSupport)) {
			return;
		}
		// add ""morph"" actions
		MorphingSupport<JavaInfo> morphingSupport =
				new MorphingSupport<>(toolkitClas<fim_middle>","
	 * If possible, contributes ""morph"" actions.
	 *
	 * @param toolkitClassName
	 *          the name of base class for ""Other..."" action, for example
	 *          <code>""org.eclipse.swt.widgets.Control""</code> as SWT.
	 * @param component
	 *          the {@link JavaInfo} that should be morphed.
	 * @param manager
	 *          the {@link IContributionManager} to add action to.
	 */","
	 * {@inheritDoc}
	 */"
"<fim_prefix>lassInstanceCreation;
import org.eclipse.jdt.core.dom.Expression;
import org.eclipse.jdt.core.dom.MethodInvocation;
import org.eclipse.jdt.core.dom.QualifiedName;
import org.eclipse.jface.action.IContributionManager;
import org.eclipse.jface.resource.ImageDescriptor;

import java.text.MessageFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**<fim_suffix>
public abstract class MorphingSupport<T extends JavaInfo> extends AbstractMorphingSupport<T> {
	////////////////////////////////////////////////////////////////////////////
	//
	// Instance fields
	//
	////////////////////////////////////////////////////////////////////////////
	private final AstEditor m_editor;

	//////////////////////////////////////////////////////////////<fim_middle>","
 * Helper for morphing {@link JavaInfo} for one component class to another.
 *
 * @author scheglov_ke
 * @author sablin_aa
 * @coverage core.model.util
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.harry2258.Alfred.commands;

import com.harry2258.Alfred.api.*;
import org.pircbotx.hooks.events.MessageEvent;

/**<fim_suffix>
public class Fishbans extends Command {

    private Config config;
    private PermissionManager manager;

    public Fishbans() {
        super(""Fishbans"", ""Check if the user has any McBans."", ""Fishbans [user]"");
    }

    @Override
    public boolean execute(MessageEvent event) throws Exception {
        String[] args = event.getMessage().split("" "");
        MessageUtils.sendChann<fim_middle>","
 * Created by Hardik on 1/21/14.
 */","
 * Created by <NAME> on 1/25/2017.
"
"<fim_prefix>a.saalfeldlab.util.HashPriorityQueue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.invoke.MethodHandles;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.atomic.AtomicBoolean;

/**<fim_suffix>
public class HashPriorityQueueBasedTaskExecutor<P> {

	private static final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());

	private final HashPriorityQueue<P, Runnable> priorityQueue;

	private final Thread[] workers;

	private final Runnable[] runningTasks;

	private final AtomicBoolean isShutdown = new AtomicBoolean(false);

	public HashPriorityQueueBas<fim_middle>","
 * @param <P> task priority type
 * @author Igor Pisarev
 * <p>
 * Provides similar functionality to {@link java.util.concurrent.ExecutorService} for prioritized tasks.
 * <p>
 * In contrast to using a standard thread pool executor with a {@link java.util.concurrent.PriorityBlockingQueue},
 * this class allows to efficiently change the priority of already submitted tasks.
 */","
 * A task executor that uses a hash priority queue to schedule tasks.
 *
 * @author <NAME>
 *
 * @param <P>
 *            the type of priority
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.kapua.job.engine.app.web;

import org.eclipse.kapua.app.api.core.settings.KapuaApiCoreSetting;
import org.eclipse.kapua.app.api.core.settings.KapuaApiCoreSettingKeys;
import org.eclipse.kapua.commons.rest.errors.ExceptionConfigurationProvider;
import org.eclipse.kapua.locator.KapuaLocator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.injec<fim_middle>","*****************************************************************************
 * Copyright (c) 2016, 2022 Eurotech and/or its affiliates and others
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     Eurotech - initial API and implementation
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>

package br.unicamp.cst.motivational;

import br.unicamp.cst.core.entities.Codelet;
import br.unicamp.cst.core.entities.Memory;

import java.util.ArrayList;
import java.util.List;

public abstract class MoodCodelet extends Codelet {

    public static final String INPUT_DRIVES_MEMORY = ""INPUT_DRIVES_MEMORY"";
    public static final String INPUT_APPRAISAL_MEMORY = ""INPUT_APPRAISAL_MEMO<fim_middle>","*****************************************************************************
 * Copyright (c) 2016  DCA-FEEC-UNICAMP
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v3
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl.html
 *
 * Contributors:
 *     E. M. Froes, R. R. Gudwin - initial API and implementation
 ******************************************************************************/","
 * Created by pedro on 11/04/16.
 */"
"<fim_prefix>/*<fim_suffix>

package com.logistimo.tags.dao;


import com.logistimo.logger.XLog;
import com.logistimo.services.impl.PMF;
import com.logistimo.tags.entity.ITag;
import com.logistimo.tags.entity.Tag;

import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;

import javax.jdo.PersistenceManager;
import javax.jdo.Query;

/**
 * Created by charan on 17/02/1<fim_middle>","
 * Copyright Â© 2017 Logistimo.
 *
 * This file is part of Logistimo.
 *
 * Logistimo software is a mobile & web platform for supply chain management and remote temperature monitoring in
 * low-resource settings, made available under the terms of the GNU Affero General Public License (AGPL).
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General
 * Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License
 * for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * You can be released from the requirements of the license by purchasing a commercial license. To know more about
 * the commercial license, please contact us at opensource@logistimo.com
 */","*
 * Created by charan on 17/02/1.
 */"
"<fim_prefix> at opensource@logistimo.com
 */

package com.logistimo.tags.dao;


import com.logistimo.logger.XLog;
import com.logistimo.services.impl.PMF;
import com.logistimo.tags.entity.ITag;
import com.logistimo.tags.entity.Tag;

import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;

import javax.jdo.PersistenceManager;
import javax.jdo.Query;

/**<fim_suffix>
@Repository
public class TagDao implements ITagDao {

  private static final XLog xLogger = XLog.getLog(TagDao.class);

  @Override
  public ITag getTagByName(String name, int type) {
    PersistenceManager pm = PMF.get().getPersistenceManager();
    Query query = pm.newQuery(Tag.class);
    query.setFilter(""name == nameParam && type == typeParam"");
    query.declareParameters(""String<fim_middle>","
 * Created by charan on 17/02/15.
 */","
 * @author opensource@logistimo.com
 */"
"<fim_prefix>ic enum MeaningModsSimpleType {

// FIELDS ------------------

    VARIATION(""variation""),
    TERMMODIFICATION(""termModification""),
    AUTHENTICINTERPRETATION(""authenticInterpretation"");
    private final String value;

    /**
     * Create an instance of MeaningModsSimpleType class with the given String
     */
    MeaningModsSimpleType(String v) {
        value = v;
    }

    /**<fim_suffix>
    public String value() {
        return value;
    }

    /**
     * Return an Enum based on the given input text or null if it does not fit
     *
     * @param text the String representation of the enum
     * @return MeaningModsSimpleType or <code>null</code>
     */
    public static MeaningModsSimpleType fromString(String text) {
        if (text == null) return null;
        <fim_middle>","
     * Return the value of the instance
     *
     * @return value as String
     */","
     * Return the String representation of the enum
     *
     * @return String representation of the enum
  "
"<fim_prefix>PRETATION(""authenticInterpretation"");
    private final String value;

    /**
     * Create an instance of MeaningModsSimpleType class with the given String
     */
    MeaningModsSimpleType(String v) {
        value = v;
    }

    /**
     * Return the value of the instance
     *
     * @return value as String
     */
    public String value() {
        return value;
    }

    /**<fim_suffix>
    public static MeaningModsSimpleType fromString(String text) {
        if (text == null) return null;
        for (MeaningModsSimpleType en : MeaningModsSimpleType.values()) {
            if (text.equalsIgnoreCase(en.value())) {
                return en;
            }
        }
        return null;
    }
}
<fim_middle>","
     * Return an Enum based on the given input text or null if it does not fit
     *
     * @param text the String representation of the enum
     * @return MeaningModsSimpleType or <code>null</code>
     */","
     * Return the value of the instance
     *
     * @return value as MeaningModsSimpleType
     */"
"<fim_prefix>by applicable law or agreed to in writing, software distributed under the Licence is distributed on an ""AS IS"" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 */
package org.nsesa.editor.gwt.an.common.client.ui.overlay.document.gen.akomantoso20;

/**<fim_suffix>
public enum MeaningModsSimpleType {

// FIELDS ------------------

    VARIATION(""variation""),
    TERMMODIFICATION(""termModification""),
    AUTHENTICINTERPRETATION(""authenticInterpretation"");
    private final String value;

    /**
     * Create an instance of MeaningModsSimpleType class with the given String
     */
    MeaningModsSimpleType(String v) {
        value = v;
    }

  <fim_middle>","
 * The simple type MeaningMods lists all the types of modifications in meaning as values for the type attribute of the meaningMod element.* This file is generated. Rather than changing this file, correct the template called <tt>overlayEnum.ftl</tt>.
 */","
 * Enumeration of MeaningModsSimpleType
 */"
"<fim_prefix>/**<fim_suffix>
package org.nsesa.editor.gwt.an.common.client.ui.overlay.document.gen.akomantoso20;

/**
 * The simple type MeaningMods lists all the types of modifications in meaning as values for the type attribute of the meaningMod element.* This file is generated. Rather than changing this file, correct the template called <tt>overlayEnum.ftl</tt>.
 */
public enum MeaningModsSimpleType {

// FIEL<fim_middle>","
 * Copyright 2013 European Parliament
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the European Commission - subsequent versions of the EUPL (the ""Licence"");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 *
 * http://joinup.ec.europa.eu/software/page/eupl
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the Licence is distributed on an ""AS IS"" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 */","
 * The simple type MeaningMods lists all the types of modifications in meaning as values for the type attribute of the meaningMod element.* This file is generated. Rather than changing this file, correct the template called <tt>overlayEnum.ftl</tt>.
 */"
"<fim_prefix>pe attribute of the meaningMod element.* This file is generated. Rather than changing this file, correct the template called <tt>overlayEnum.ftl</tt>.
 */
public enum MeaningModsSimpleType {

// FIELDS ------------------

    VARIATION(""variation""),
    TERMMODIFICATION(""termModification""),
    AUTHENTICINTERPRETATION(""authenticInterpretation"");
    private final String value;

    /**<fim_suffix>
    MeaningModsSimpleType(String v) {
        value = v;
    }

    /**
     * Return the value of the instance
     *
     * @return value as String
     */
    public String value() {
        return value;
    }

    /**
     * Return an Enum based on the given input text or null if it does not fit
     *
     * @param text the String representation of the enum
     * @return Meanin<fim_middle>","
     * Create an instance of MeaningModsSimpleType class with the given String
     */","
     * Constructor
     *
     * @param v the value"
"<fim_prefix>/*<fim_suffix>

package io.kamax.hboxd.hypervisor.vbox6_1.setting.machine;

import io.kamax.hbox.constant.MachineAttribute;
import io.kamax.hbox.hypervisor.vbox.settings.general.OsTypeSetting;
import io.kamax.hboxd.hypervisor.vbox6_1.setting._MachineSettingAction;
import io.kamax.tools.setting._Setting;
import org.virtualbox_6_1.IMachine;
import org.virtualbox_6_1.LockType;

public class OsTypeSetti<fim_middle>","
 * Hyperbox - Virtual Infrastructure Manager
 * Copyright (C) 2018 Kamax Sarl
 *
 * https://apps.kamax.io/hyperbox
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author kamax
 * @since 1.0.0
 */"
"<fim_prefix>getInstance().getActiveTasks().isEmpty());
				continue;
			}
			fail(""No exception was thrown, but an AlgorithmTimedoutedException should have been thrown!"");
		}
	}

	@Test
	@MediumTest
	void testThatNoInterruptIsFiredIfExecutionFinishesInTime() throws AlgorithmTimeoutedException, ExecutionException, InterruptedException {
		for (int i = 0; i < NUMBER_ITERATIONS_SIMPLE; i++) {

			/*<fim_suffix>
			TimedComputation.compute(new BusyBeaver(100), new Timeout(1000, TimeUnit.MILLISECONDS), ""bb interrupt"");
			assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
			Awaitility.await().atLeast(2, TimeUnit.SECONDS);
			assertTrue(!Thread.interrupted());
		}
	}

	/**
	 * Two timed computations are nested. The outer is canceled significantly (1s) earlier than the inner.
	 *<fim_middle>", test that InterruptException is thrown  */,"*
			 * The computation is canceled after 1s."
"<fim_prefix>	}

	/**
	 * Two timed computations are nested. The outer is canceled significantly (1s) earlier than the inner.
	 *
	 * @throws ExecutionException
	 * @throws InterruptedException
	 */
	@Test
	@LongTest
	void testNestedInterruptDuringExecutionWithOuterSignifiantlyEarlier() throws ExecutionException, InterruptedException {

		for (int i = 0; i < NUMBER_ITERATIONS_SHIFTED; i++) {

			/*<fim_suffix>
			try {
				TimedComputation.compute(() -> TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(2000, TimeUnit.MILLISECONDS), ""inner interrupt""), new Timeout(1000, TimeUnit.MILLISECONDS), ""outer interrupt"");
			} catch (AlgorithmTimeoutedException e) {

				/* this is expected behavior */
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
				assert<fim_middle>", test that InterruptException is thrown and that no interrupts are open */,"*
			 * The outer computation is canceled significantly (1s) earlier than the"
"<fim_prefix>ER_ITERATIONS_SHIFTED; i++) {

			/* test that InterruptException is thrown and that no interrupts are open */
			try {
				TimedComputation.compute(() -> TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(2000, TimeUnit.MILLISECONDS), ""inner interrupt""), new Timeout(1000, TimeUnit.MILLISECONDS), ""outer interrupt"");
			} catch (AlgorithmTimeoutedException e) {

				/*<fim_suffix>
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
				assertFalse(Interrupter.get().hasCurrentThreadOpenInterrupts());
				Awaitility.await().atLeast(2, TimeUnit.SECONDS);
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
				assertFalse(Interrupter.get().hasCurrentThreadOpenInterrupts());
				continue;
			}
			fail(""No exception was thrown, but<fim_middle>", this is expected behavior */, check that the exception is
"<fim_prefix>d that no interrupts are open */
			try {
				TimedComputation.compute(() -> TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1000, TimeUnit.MILLISECONDS), ""inner interrupt""), new Timeout(2000, TimeUnit.MILLISECONDS), ""outer interrupt"");
			} catch (ExecutionException e) {

				if (!(e.getCause() instanceof AlgorithmTimeoutedException)) {
					throw e;
				}

				/*<fim_suffix>
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
				assertFalse(Interrupter.get().hasCurrentThreadOpenInterrupts());
				Awaitility.await().atLeast(2, TimeUnit.SECONDS);
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
				assertFalse(Interrupter.get().hasCurrentThreadOpenInterrupts());
				continue;
			}
			fail(""No exception was thrown, but<fim_middle>", this is expected behavior */,"*
				 * This"
"<fim_prefix>));
			} else {
				fail(""No exception was thrown, but an AlgorithmTimedoutedException should have been thrown!"");
			}
		}
	}

	@Test
	@LongTest
	void testTwistedInterruptDuringExecutionWithOuterSignifiantlyEarlier() throws InterruptedException, AlgorithmTimeoutedException, ExecutionException {
		this.checkPreconditions();
		for (int i = 0; i < NUMBER_ITERATIONS_SHIFTED; i++) {

			/*<fim_suffix>
			InterruptionTimerTask task = new InterruptionTimerTask(""outer interrupt"");
			GlobalTimer.getInstance().schedule(task, 1000);
			try {
				TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1500, TimeUnit.MILLISECONDS), ""inner interrupt"");
				fail(""No exception was thrown, but an AlgorithmTimedoutedException should have been thrown!"");
			} catch (InterruptedExce<fim_middle>", test that InterruptException is thrown and that no interrupts are open */,"*
			 * This is the outer interrupt.
			 */"
"<fim_prefix>oolean interrupted = Thread.interrupted();
				logger.debug(""Now resolving the interrupt. Current interrupted flag state: {}"", interrupted);
				Interrupter.get().markInterruptOnCurrentThreadAsResolved(task);
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty(), ""There are still active tasks!"");
				assertFalse(Interrupter.get().hasCurrentThreadOpenInterrupts());

				/*<fim_suffix>
				Thread.currentThread().interrupt();
				if (!interrupted) {
					Thread.interrupted();
				}
			}
		}
	}

	@Test
	@LongTest
	void testTwistedInterruptDuringExecutionWithOuterSignifiantlyLater() throws InterruptedException, AlgorithmTimeoutedException, ExecutionException {
		this.checkPreconditions();
		for (int i = 0; i < NUMBER_ITERATIONS_SHIFTED; i++) {

			/* test that Interrup<fim_middle>", this is just to make sonarqube happy */,"*
				 * The interrupt should be resolved now"
"<fim_prefix>		assertFalse(Interrupter.get().hasCurrentThreadOpenInterrupts());
				Awaitility.await().atLeast(2, TimeUnit.SECONDS);
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
				assertFalse(Interrupter.get().hasCurrentThreadOpenInterrupts());
				continue;
			}
			fail(""No exception was thrown, but an AlgorithmTimedoutedException should have been thrown!"");
		}
	}

	/**<fim_suffix>
	@Test
	@LongTest
	void testNestedInterruptDuringExecutionWithOuterAndInnerAtSameTime() throws ExecutionException {
		this.checkPreconditions();
		for (int i = 0; i < NUMBER_ITERATIONS_OVERLAPPING; i++) {
			logger.info(""Starting iteration {}/{} of testNestedInterruptDuringExecutionWithOuterAndInnerAtSameTime"", i + 1, NUMBER_ITERATIONS_OVERLAPPING);

			/* test that InterruptException<fim_middle>","
	 * Two timed computations are nested. The outer is canceled significantly (1s) later than the inner.
	 * @throws
	 *
	 * @throws ExecutionException
	 * @throws InterruptedException
	 * @throws AlgorithmTimeoutedException
	 */","
	 * Tests that an InterruptException is thrown when an interrupt is requested while the algorithm is running.
	 */"
"<fim_prefix>orithmTimeoutedException
	 */
	@Test
	@LongTest
	void testNestedInterruptDuringExecutionWithOuterAndInnerAtSameTime() throws ExecutionException {
		this.checkPreconditions();
		for (int i = 0; i < NUMBER_ITERATIONS_OVERLAPPING; i++) {
			logger.info(""Starting iteration {}/{} of testNestedInterruptDuringExecutionWithOuterAndInnerAtSameTime"", i + 1, NUMBER_ITERATIONS_OVERLAPPING);

			/*<fim_suffix>
			Exception caughtException = null;
			try {
				TimedComputation.compute(() -> TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1000, TimeUnit.MILLISECONDS), ""inner interrupt""), new Timeout(1000, TimeUnit.MILLISECONDS), ""outer interrupt"");
			} catch (Exception e) {
				caughtException = e;
			}

			/* check exception */
			if (caughtException instanceof Executio<fim_middle>", test that InterruptException is thrown and that no interrupts are open */, check exception */
"<fim_prefix> sonarqube happy */
				Thread.currentThread().interrupt();
				if (!interrupted) {
					Thread.interrupted();
				}
			}
		}
	}

	@Test
	@LongTest
	void testTwistedInterruptDuringExecutionWithOuterSignifiantlyLater() throws InterruptedException, AlgorithmTimeoutedException, ExecutionException {
		this.checkPreconditions();
		for (int i = 0; i < NUMBER_ITERATIONS_SHIFTED; i++) {

			/*<fim_suffix>
			InterruptionTimerTask task = new InterruptionTimerTask(""outer interrupt"");
			GlobalTimer.getInstance().schedule(task, 1500);
			try {
				TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1000, TimeUnit.MILLISECONDS), ""inner interrupt"");
			} catch (AlgorithmTimeoutedException e) {

				/* check that thread is not interrupted */
				assertFalse(Thread.interrupte<fim_middle>", test that InterruptException is thrown and that no interrupts are open */, schedule outer interrupt */
"<fim_prefix>"");
			} catch (InterruptedException e) {
				outerEarlier++;
				Interrupter.get().markInterruptAsResolved(Thread.currentThread(), task);
				assertTrue(task.isTriggered(), ""There has been an interrupted exception, but the task has not fired! Stack trace: "" + Arrays.stream(e.getStackTrace()).map(s -> ""\n\t"" + s).collect(Collectors.toList()));
				assertTrue(task.isFinished());

				/*<fim_suffix>
				boolean interrupted = Thread.interrupted();
				Thread.currentThread().interrupt();
				if (!interrupted) {
					Thread.interrupted();
				}
			} catch (AlgorithmTimeoutedException e) {
				innerEarlier++;

				/* wait for outer interrupt to occur */
				while (!task.isFinished()) {
					try {
						Thread.sleep(100);
					} catch (InterruptedException ex) {
						Thread.currentTh<fim_middle>", this is just to make sonarqube happy */, wait for outer interrupt to occur */
"<fim_prefix>n {
		for (int i = 0; i < NUMBER_ITERATIONS_SIMPLE; i++) {

			/* test that InterruptException is thrown  */
			TimedComputation.compute(new BusyBeaver(100), new Timeout(1000, TimeUnit.MILLISECONDS), ""bb interrupt"");
			assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
			Awaitility.await().atLeast(2, TimeUnit.SECONDS);
			assertTrue(!Thread.interrupted());
		}
	}

	/**<fim_suffix>
	@Test
	@LongTest
	void testNestedInterruptDuringExecutionWithOuterSignifiantlyEarlier() throws ExecutionException, InterruptedException {

		for (int i = 0; i < NUMBER_ITERATIONS_SHIFTED; i++) {

			/* test that InterruptException is thrown and that no interrupts are open */
			try {
				TimedComputation.compute(() -> TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeo<fim_middle>","
	 * Two timed computations are nested. The outer is canceled significantly (1s) earlier than the inner.
	 *
	 * @throws ExecutionException
	 * @throws InterruptedException
	 */","
	 * Test that a computation that is interrupted by a timeout is interrupted.
	 */"
"<fim_prefix>		assertFalse(Interrupter.get().hasCurrentThreadOpenInterrupts());
				Awaitility.await().atLeast(2, TimeUnit.SECONDS);
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
				assertFalse(Interrupter.get().hasCurrentThreadOpenInterrupts());
				continue;
			}
			fail(""No exception was thrown, but an AlgorithmTimedoutedException should have been thrown!"");
		}
	}

	/**<fim_suffix>
	@Test
	@LongTest
	void testNestedInterruptDuringExecutionWithOuterSignifiantlyLater() throws InterruptedException, AlgorithmTimeoutedException, ExecutionException {
		this.checkPreconditions();
		for (int i = 0; i < NUMBER_ITERATIONS_SHIFTED; i++) {

			/* test that InterruptException is thrown and that no interrupts are open */
			try {
				TimedComputation.compute(() -> TimedComput<fim_middle>","
	 * Two timed computations are nested. The outer is canceled significantly (1s) later than the inner.
	 *
	 * @throws ExecutionException
	 * @throws InterruptedException
	 * @throws AlgorithmTimeoutedException
	 */","
	 * This test checks that the interrupt is thrown when the computation is interrupted.
	 * 
	 * @throws InterruptedException
	 * @throws AlgorithmTimeoutedException
	 * @throws ExecutionException
	 */"
"<fim_prefix> ""inner interrupt""), new Timeout(1000, TimeUnit.MILLISECONDS), ""outer interrupt"");
			} catch (Exception e) {
				caughtException = e;
			}

			/* check exception */
			if (caughtException instanceof ExecutionException && !(caughtException.getCause() instanceof AlgorithmTimeoutedException)) {
				throw (ExecutionException) caughtException;
			}

			if (caughtException != null) {
				/*<fim_suffix>
				assertFalse(Thread.interrupted(), ""The executing thread is interrupted after a computation block!"");
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
				assertFalse(Interrupter.get().hasCurrentThreadOpenInterrupts(),
						""There are open interrupts: "" + Interrupter.get().getAllUnresolvedInterruptsOfThread(Thread.currentThread()).stream().map(Interrupt::getRe<fim_middle>", this is expected behavior */, check timeout */
"<fim_prefix>nterruptException is thrown and that no interrupts are open */
			Exception caughtException = null;
			try {
				TimedComputation.compute(() -> TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1000, TimeUnit.MILLISECONDS), ""inner interrupt""), new Timeout(1000, TimeUnit.MILLISECONDS), ""outer interrupt"");
			} catch (Exception e) {
				caughtException = e;
			}

			/*<fim_suffix>
			if (caughtException instanceof ExecutionException && !(caughtException.getCause() instanceof AlgorithmTimeoutedException)) {
				throw (ExecutionException) caughtException;
			}

			if (caughtException != null) {
				/* this is expected behavior */
				assertFalse(Thread.interrupted(), ""The executing thread is interrupted after a computation block!"");
				assertTrue(GlobalTimer.get<fim_middle>", check exception */,* this is
"<fim_prefix>Preconditions();
		int innerEarlier = 0;
		int outerEarlier = 0;
		for (int i = 0; i < NUMBER_ITERATIONS_OVERLAPPING; i++) {
			logger.info(""Starting iteration {}/{} of testTwistedTrackedInterruptDuringExecutionWithOuterAndInnerAtSameTime"", i + 1, NUMBER_ITERATIONS_OVERLAPPING);
			assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty(), ""There are still active tasks!"");

			/*<fim_suffix>
			InterruptionTimerTask task = new InterruptionTimerTask(""outer interrupt"");
			int timeout = 1000;
			GlobalTimer.getInstance().schedule(task, timeout + Math.round(Math.random())); // increase timeout by 1 ms in the first 10 runs to balance scheduling disadvanates of the outer one
			try {
				TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(timeout, TimeUnit.MIL<fim_middle>", test that InterruptException is thrown and that no interrupts are open */,"*
			 * This is the outer interruption.
			 */"
"<fim_prefix> + Arrays.stream(e.getStackTrace()).map(s -> ""\n\t"" + s).collect(Collectors.toList()));
				assertTrue(task.isFinished());

				/* this is just to make sonarqube happy */
				boolean interrupted = Thread.interrupted();
				Thread.currentThread().interrupt();
				if (!interrupted) {
					Thread.interrupted();
				}
			} catch (AlgorithmTimeoutedException e) {
				innerEarlier++;

				/*<fim_suffix>
				while (!task.isFinished()) {
					try {
						Thread.sleep(100);
					} catch (InterruptedException ex) {
						Thread.currentThread().interrupt();
					}
					if (Thread.interrupted()) {
						logger.debug(""Interrupt received."");
					}
				}
				boolean interrupted = Thread.interrupted();
				logger.debug(""Now resolving the interrupt. Current interrupted flag state: {}"", interru<fim_middle>", wait for outer interrupt to occur */, this is just to make sonarq
"<fim_prefix> test that InterruptException is thrown and that no interrupts are open */
			InterruptionTimerTask task = new InterruptionTimerTask(""outer interrupt"");
			GlobalTimer.getInstance().schedule(task, 1500);
			try {
				TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1000, TimeUnit.MILLISECONDS), ""inner interrupt"");
			} catch (AlgorithmTimeoutedException e) {

				/*<fim_suffix>
				assertFalse(Thread.interrupted());

				/* this is expected behavior */
				while (!task.isFinished()) {
					Awaitility.await().atLeast(100, TimeUnit.MILLISECONDS);
				}
				boolean interrupted = Thread.interrupted();
				logger.debug(""Now resolving the interrupt. Current interrupted flag state: {}"", interrupted);
				Interrupter.get().markInterruptOnCurrentThreadAsResolved(task<fim_middle>", check that thread is not interrupted */, this is expected behavior */
"<fim_prefix>ionTimerTask task = new InterruptionTimerTask(""outer interrupt"");
			GlobalTimer.getInstance().schedule(task, 1500);
			try {
				TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1000, TimeUnit.MILLISECONDS), ""inner interrupt"");
			} catch (AlgorithmTimeoutedException e) {

				/* check that thread is not interrupted */
				assertFalse(Thread.interrupted());

				/*<fim_suffix>
				while (!task.isFinished()) {
					Awaitility.await().atLeast(100, TimeUnit.MILLISECONDS);
				}
				boolean interrupted = Thread.interrupted();
				logger.debug(""Now resolving the interrupt. Current interrupted flag state: {}"", interrupted);
				Interrupter.get().markInterruptOnCurrentThreadAsResolved(task);
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
			<fim_middle>", this is expected behavior */, check that thread is interrupted
"<fim_prefix>edException();
				}
			}
			return null;
		}
	}

	public void checkPreconditions() {
		assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty(), ""There are still active tasks of some previous test!!"");
	}

	@Test
	@MediumTest
	void testSimpleInterruptDuringExecution() throws ExecutionException, InterruptedException {
		for (int i = 0; i < NUMBER_ITERATIONS_SIMPLE; i++) {

			/*<fim_suffix>
			try {
				TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1000, TimeUnit.MILLISECONDS), ""bb interrupt"");
			} catch (AlgorithmTimeoutedException e) {

				/* this is expected behavior */
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
				continue;
			}
			fail(""No exception was thrown, but an AlgorithmTimedoutedException should have been <fim_middle>", test that InterruptException is thrown  */,"*
			 * This test is designed"
"<fim_prefix>diumTest
	void testSimpleInterruptDuringExecution() throws ExecutionException, InterruptedException {
		for (int i = 0; i < NUMBER_ITERATIONS_SIMPLE; i++) {

			/* test that InterruptException is thrown  */
			try {
				TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1000, TimeUnit.MILLISECONDS), ""bb interrupt"");
			} catch (AlgorithmTimeoutedException e) {

				/*<fim_suffix>
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty());
				continue;
			}
			fail(""No exception was thrown, but an AlgorithmTimedoutedException should have been thrown!"");
		}
	}

	@Test
	@MediumTest
	void testThatNoInterruptIsFiredIfExecutionFinishesInTime() throws AlgorithmTimeoutedException, ExecutionException, InterruptedException {
		for (int i = 0; i < NUMBER_ITER<fim_middle>", this is expected behavior */, test
"<fim_prefix>r than the inner.
	 *
	 * @throws ExecutionException
	 * @throws InterruptedException
	 * @throws AlgorithmTimeoutedException
	 */
	@Test
	@LongTest
	void testNestedInterruptDuringExecutionWithOuterSignifiantlyLater() throws InterruptedException, AlgorithmTimeoutedException, ExecutionException {
		this.checkPreconditions();
		for (int i = 0; i < NUMBER_ITERATIONS_SHIFTED; i++) {

			/*<fim_suffix>
			try {
				TimedComputation.compute(() -> TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1000, TimeUnit.MILLISECONDS), ""inner interrupt""), new Timeout(2000, TimeUnit.MILLISECONDS), ""outer interrupt"");
			} catch (ExecutionException e) {

				if (!(e.getCause() instanceof AlgorithmTimeoutedException)) {
					throw e;
				}

				/* this is expected behavior */
		<fim_middle>", test that InterruptException is thrown and that no interrupts are open */,"*
			 * This is the inner computation.
			 */"
"<fim_prefix>merTask task = new InterruptionTimerTask(""outer interrupt"");
			GlobalTimer.getInstance().schedule(task, 1000);
			try {
				TimedComputation.compute(new BusyBeaver(Long.MAX_VALUE), new Timeout(1500, TimeUnit.MILLISECONDS), ""inner interrupt"");
				fail(""No exception was thrown, but an AlgorithmTimedoutedException should have been thrown!"");
			} catch (InterruptedException e) {

				/*<fim_suffix>
				while (!task.isFinished()) {
					Awaitility.await().atLeast(100, TimeUnit.MILLISECONDS);
				}

				boolean interrupted = Thread.interrupted();
				logger.debug(""Now resolving the interrupt. Current interrupted flag state: {}"", interrupted);
				Interrupter.get().markInterruptOnCurrentThreadAsResolved(task);
				assertTrue(GlobalTimer.getInstance().getActiveTasks().isEmpty(), ""Th<fim_middle>", this is expected behavior */,"*
				 * The"
"<fim_prefix>/*<fim_suffix>

package com.qsr.customspd.levels.traps;

import com.qsr.customspd.items.bombs.Bomb;

public class ExplosiveTrap extends Trap {

	{
		color = ORANGE;
		shape = DIAMOND;
	}

	@Override
	public void activate() {
		new Bomb().explode(pos);
	}

}
<fim_middle>","
 * Pixel Dungeon
 * Copyright (C) 2012-2015 Oleg Dolya
 *
 * Shattered Pixel Dungeon
 * Copyright (C) 2014-2023 Evan Debenham
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package com.teammoeg.thermopolium.data.recipes.conditions;

import java.util.stream.Stream;

import com.google.gson.JsonObject;
import com.teammoeg.thermopolium.data.TranslationProvider;
import com.teammoeg.thermopolium.data.recipes.StewNumber;
import com.teammoeg.thermopolium.data.recipes.StewPendingContext;
import com.teammoeg.thermopolium.util.FloatemTagStack;

import net.minecraf<fim_middle>","
 * Copyright (c) 2022 TeamMoeg
 *
 * This file is part of Thermopolium.
 *
 * Thermopolium is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * Thermopolium is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Thermopolium. If not, see <https://www.gnu.org/licenses/>.
 */","
 * Copyright (c) 2021
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the ""Software""), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
"<fim_prefix>/**<fim_suffix>
package de.uni_potsdam.hpi.bpt.promnicat.persistenceApi.orientdb.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Obser<fim_middle>","
 * PromniCAT - Collection and Analysis of Business Process Models
 * Copyright (C) 2012 Cindy FÃ¤hnrich, Tobias Hoppe, Andrina Mascher
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * @author <NAME>
 */"
"<fim_prefix>* Tests if database is created or opened correctly
	 */
	@Test
	public void testGetOrCreateDatabase(){
		papi.openDb();
		ODatabaseObjectTx db = papi.getInternalDbAccess();
		assertTrue(db.exists());
		
		try {
			papi.openDb();
			assertTrue(db.exists());
			assertFalse(db.isClosed());
		} catch (Exception e) {
			fail(""Unexpected Exception occurred: "" + e.getMessage());
		}
	}
	
	/**<fim_suffix>
	@Test
	public void testDropDb(){
		papi.openDb();
		ODatabaseObjectTx db = papi.getInternalDbAccess();
		papi.dropDb();
		assertFalse(db.exists());
	}
	
	@Test
	public void testCloseDb(){
		papi.openDb();
		ODatabaseObjectTx db = papi.getInternalDbAccess();
		papi.closeDb();
		assertTrue(db.isClosed());
	}

	@Test
	public void testCountType() {
		long result = papi.countClass(Model.c<fim_middle>","
	 * Tests if database is dropped
	 */",
"<fim_prefix>iOrientDbObj.getInstance(Constants.TEST_DB_CONFIG_PATH);
		} catch (Exception e) {
			e.printStackTrace();
			fail();
		}
	}
	
	
	@Before
	public void setUp(){
		try{
			papi.openDb();
		} catch (Exception e){
			e.printStackTrace();
			fail();
		}
		
	}
	
	@After
	public void tearDown(){
		try{
			papi.dropDb();
		} catch (Exception e){
			e.printStackTrace();
			fail();
		}
	}
	
	/**<fim_suffix>
	@Test
	public void testGetOrCreateDatabase(){
		papi.openDb();
		ODatabaseObjectTx db = papi.getInternalDbAccess();
		assertTrue(db.exists());
		
		try {
			papi.openDb();
			assertTrue(db.exists());
			assertFalse(db.isClosed());
		} catch (Exception e) {
			fail(""Unexpected Exception occurred: "" + e.getMessage());
		}
	}
	
	/**
	 * Tests if database is dropped
	 */
	@Test
	public v<fim_middle>","
	 * Tests if database is created or opened correctly
	 */","
	 * Tests if database is created
	 */"
"<fim_prefix>eApi.DbFilterConfig;
import de.uni_potsdam.hpi.bpt.promnicat.persistenceApi.Model;
import de.uni_potsdam.hpi.bpt.promnicat.persistenceApi.Representation;
import de.uni_potsdam.hpi.bpt.promnicat.persistenceApi.orientdbObj.DbConstants;
import de.uni_potsdam.hpi.bpt.promnicat.persistenceApi.orientdbObj.PersistenceApiOrientDbObj;
import de.uni_potsdam.hpi.bpt.promnicat.util.Constants;

/**<fim_suffix>
public class PersistenceApiOrientDbEmptyContentTest {
	
	private static final String dbId2 = ""#80:4"";
	private static final String dbId1 = ""#15:0"";
	private static PersistenceApiOrientDbObj papi;
	
	@BeforeClass 
	public static void setUpClass() {
		try {
			papi = PersistenceApiOrientDbObj.getInstance(Constants.TEST_DB_CONFIG_PATH);
		} catch (Exception e) {
			e.printStackTrace();
	<fim_middle>","
 * Test class for {@link PersistanceApiOrientDB}.
 * @author Andrina Mascher
 *
 */","
 * 
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package lucee.runtime.net.mail;

import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;

import lucee.commons.lang.StringUtil;

import org.apache.commons.mail.DefaultAuthenticator;

/**
 * SMTP Server verifier
 */
public final class SMTPVerifier{       
       
    /**
     * verify m<fim_middle>","
 *
 * Copyright (c) 2014, the Railo Company Ltd. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either 
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public 
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 * 
 **/","
 * SMTP Server verifier
 */"
"<fim_prefix>nses/>.
 * 
 **/
package lucee.runtime.net.mail;

import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;

import lucee.commons.lang.StringUtil;

import org.apache.commons.mail.DefaultAuthenticator;

/**
 * SMTP Server verifier
 */
public final class SMTPVerifier{       
       
    /**<fim_suffix>
    public static boolean verify(String host, String username,String password, int port) throws SMTPException  {
        try {
            return _verify(host,username,password,port);
        } 
        catch (MessagingException e) {
            
            // check user
            if(!StringUtil.isEmpty(username)) {
                try {
                    _verify(host,null,null,p<fim_middle>","
     * verify mail server
     * @param host
     * @param username
     * @param password
     * @param port
     * @return are the setting ok
     * @throws SMTPException 
     */","
     * SMTP Server verifier
     */"
"<fim_prefix>al Public 
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 * 
 **/
package lucee.runtime.net.mail;

import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;

import lucee.commons.lang.StringUtil;

import org.apache.commons.mail.DefaultAuthenticator;

/**<fim_suffix>
public final class SMTPVerifier{       
       
    /**
     * verify mail server
     * @param host
     * @param username
     * @param password
     * @param port
     * @return are the setting ok
     * @throws SMTPException 
     */
    public static boolean verify(String host, String username,String password, int port) throws SMTPException  {
        try {
            return _ve<fim_middle>","
 * SMTP Server verifier
 */","
 * SMTPVerifier
 * 
"
"<fim_prefix>/**<fim_suffix>
package ditl.graphs;

import java.io.IOException;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import ditl.CodedBuffer;
import ditl.CodedInputStream;
import ditl.Filter;
import ditl.Groups;
import ditl.Item;

public class GroupEvent implements Item {

    public enum Type {
        NEW,
        JOIN,
        LEAVE,
        DELETE;
    }

    public fi<fim_middle>","*****************************************************************************
 * This file is part of DITL.                                                  *
 *                                                                             *
 * Copyright (C) 2011-2012 John Whitbeck <john@whitbeck.fr>                    *
 *                                                                             *
 * DITL is free software: you can redistribute it and/or modify                *
 * it under the terms of the GNU General Public License as published by        *
 * the Free Software Foundation, either version 3 of the License, or           *
 * (at your option) any later version.                                         *
 *                                                                             *
 * DITL is distributed in the hope that it will be useful,                     *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of              *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
 * GNU General Public License for more details.                                *
 *                                                                             *
 * You should have received a copy of the GNU General Public License           *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.       *
 *******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package alfio.repository;

import alfio.model.EmailMessage;
import alfio.model.Event;
import alfio.model.LightweightMailMessage;
import alfio.model.PurchaseContext;
import alfio.model.subscription.SubscriptionDescriptor;
import ch.digitalfondue.npjt.Bind;
import ch.digitalfondue.npjt.Query;
import ch.digitalfondue.npjt.QueryRepository;
import ch.digitalfondue.npjt.QueryType;

import j<fim_middle>","
 * This file is part of alf.io.
 *
 * alf.io is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * alf.io is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package org.geoserver.acl.api.mapper;

import org.geoserver.acl.domain.rules.LayerAttribute;
import org.mapstruct.InjectionStrategy;
import org.mapstruct.Mapper;
import org.mapstruct.NullValueMappingStrategy;
import org.mapstruct.NullValuePropertyMappingStrategy;
import org.mapstruct.ReportingPolicy;

import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;<fim_middle>"," (c) 2023  Open Source Geospatial Foundation - all rights reserved
 * This code is licensed under the GPL 2.0 license, available at the root
 * application directory.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package cz.cas.lib.proarc.webapp.server.rest;

import cz.cas.lib.proarc.webapp.shared.rest.ImportResourceApi;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

/**
 *
 * @author Jan Pokorsky
 */
@XmlRootElement(name = Imp<fim_middle>","
 * Copyright (C) 2011 Jan Pokorsky
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author Jan Pokorsky
 */"
"<fim_prefix>s program. If not, see <http://www.gnu.org/licenses/>.
 */
package cz.cas.lib.proarc.webapp.server.rest;

import cz.cas.lib.proarc.webapp.shared.rest.ImportResourceApi;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

/**<fim_suffix>
@XmlRootElement(name = ImportResourceApi.IMPORT_FOLDER_ELEMENT)
@XmlAccessorType(XmlAccessType.FIELD)
public class ImportFolder {

    private transient String name;
    @XmlElement(name = ImportResourceApi.IMPORT_FOLDER_STATE)
    private String state;
    private transient String parent;
    @XmlElement(name = ImportResourceApi.IMPORT_FOLDER_PATH)
    private String path;
    @XmlEl<fim_middle>","
 *
 * @author Jan Pokorsky
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package org.jembi.sdmxhd.dsd;

import java.io.File;
import java.io.FileReader;

import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLInputFactory;

import junit.framework.Assert;

import org.jembi.sdmxhd.parser.dsd.DSDParser;
import org.junit.Test;

public class HierarchyTest {

	@Test
	public void testFindCodeRef() throws Exception {
		File f = new File(""test/org/jembi/<fim_middle>","*****************************************************************************
 * Copyright (c) 2010 Ryan Crichton.
 * 
 * This file is part of Jembi SDMX-HD Library.
 * 
 * Jembi SDMX-HD Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Jembi SDMX-HD Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Jembi SDMX-HD Library.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package org.fix4j.test.util;

/**<fim_suffix>
public class BaseReport implements Report {
    private final String content;

    public BaseReport(final String content) {
        this.content = content;
    }

    public String getReportAsString(){
        if(content != null && content.length() > 0){
            return StringUtils.indentAllLines(content) + Consts.EOL;
        } else {
            return """";
        }
    }
}
<fim_middle>","
 * User: ben
 * Date: 19/11/14
 * Time: 4:41 PM
 */","
 * Created by <NAME> on 11/11/2014.
 */"
"<fim_prefix>Type;
import org.craftercms.commons.entitlements.model.Module;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StopWatch;

/**
 * Defines the operations to support entitlement usage data in a module.
 *
 * Each module must provide an implementation of this interface.
 *
 * @author joseross
 */
public interface EntitlementUsageProvider {

    /**<fim_suffix>
    Module getModule();

    List<EntitlementType> getSupportedEntitlements();

    /**
     * Returns the current usage for a given entitlement type in the current module
     * @param type the entitlement to check
     * @return the current usage
     */
    default int getEntitlementUsage(final EntitlementType type) {
        Logger logger = LoggerFactory.getLogger(getClass());
   <fim_middle>","
     * Identifies the current module running.
     * @return value from {@link Module}
     */","
     * Returns the module this provider is associated with.
     * @return the module
     */"
"<fim_prefix>raftercms.commons.entitlements.usage;

import java.util.List;
import java.util.stream.Collectors;

import org.craftercms.commons.entitlements.model.Entitlement;
import org.craftercms.commons.entitlements.model.EntitlementType;
import org.craftercms.commons.entitlements.model.Module;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StopWatch;

/**<fim_suffix>
public interface EntitlementUsageProvider {

    /**
     * Identifies the current module running.
     * @return value from {@link Module}
     */
    Module getModule();

    List<EntitlementType> getSupportedEntitlements();

    /**
     * Returns the current usage for a given entitlement type in the current module
     * @param type the entitlement to check
     * @return the curr<fim_middle>","
 * Defines the operations to support entitlement usage data in a module.
 *
 * Each module must provide an implementation of this interface.
 *
 * @author joseross
 */","
 * Provides the current usage for a given entitlement type in the current module
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>    watch.stop();
                logger.debug(""{}"", watch);
            }
        }
        return value;
    }

    /**
     * Performs the module specific operations to get the current value of the given entitlement
     * @param type the entitlement to check
     * @return the current usage
     */
    int doGetEntitlementUsage(final EntitlementType type) throws Exception;

    /**<fim_suffix>
    default List<Entitlement> getCurrentUsage() {
        return getSupportedEntitlements().stream().map(type -> {
            Entitlement entitlement = new Entitlement();
            entitlement.setType(type);
            entitlement.setValue(getEntitlementUsage(type));
            return entitlement;
        }).collect(Collectors.toList());
    }

}
<fim_middle>","
     * Provides a list holding the current values for all entitlements supported by the current module.
     * @return the entitlement list
     */","
     * Returns the current usage of the given entitlement
     * @param type the entitlement to check
     * @return the current usage
"
"<fim_prefix>operations to support entitlement usage data in a module.
 *
 * Each module must provide an implementation of this interface.
 *
 * @author joseross
 */
public interface EntitlementUsageProvider {

    /**
     * Identifies the current module running.
     * @return value from {@link Module}
     */
    Module getModule();

    List<EntitlementType> getSupportedEntitlements();

    /**<fim_suffix>
    default int getEntitlementUsage(final EntitlementType type) {
        Logger logger = LoggerFactory.getLogger(getClass());
        logger.debug(""Getting current value for entitlement {}"", type);
        int value = Integer.MAX_VALUE;
        StopWatch watch = new StopWatch(getClass().getSimpleName());
        if (logger.isDebugEnabled()) {
            watch.start(type.toString());<fim_middle>","
     * Returns the current usage for a given entitlement type in the current module
     * @param type the entitlement to check
     * @return the current usage
     */","
     * Returns the current value for the given entitlement type.
     * @param type the entitlement type
     * @return the current value for the given entitlement type
   "
"<fim_prefix>/*<fim_suffix>

package org.craftercms.commons.entitlements.usage;

import java.util.List;
import java.util.stream.Collectors;

import org.craftercms.commons.entitlements.model.Entitlement;
import org.craftercms.commons.entitlements.model.EntitlementType;
import org.craftercms.commons.entitlements.model.Module;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.<fim_middle>","
 * Copyright (C) 2007-2022 Crafter Software Corporation. All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 3 as published by
 * the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>());
        }
        try {
            value = doGetEntitlementUsage(type);
        } catch (Exception e) {
            logger.error(""Error getting current value for entitlement {}"", type);
        } finally {
            if (logger.isDebugEnabled()) {
                watch.stop();
                logger.debug(""{}"", watch);
            }
        }
        return value;
    }

    /**<fim_suffix>
    int doGetEntitlementUsage(final EntitlementType type) throws Exception;

    /**
     * Provides a list holding the current values for all entitlements supported by the current module.
     * @return the entitlement list
     */
    default List<Entitlement> getCurrentUsage() {
        return getSupportedEntitlements().stream().map(type -> {
            Entitlement entitlement = n<fim_middle>","
     * Performs the module specific operations to get the current value of the given entitlement
     * @param type the entitlement to check
     * @return the current usage
     */","
     * Provides the current value for the given entitlement type.
     * @param type the entitlement type
     * @return the current value
     */"
"<fim_prefix>on.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpSession;

/**<fim_suffix>
public abstract class LtiLaunchController {
    private static final Logger LOG = LogManager.getLogger(LtiLaunchController.class);
    @Autowired
    private CanvasInstanceChecker instanceChecker;

    @RequestMapping(value = ""/launch"", method = RequestMethod.POST)
    public String ltiLaunch(@ModelAttribute LtiLaunchData ltiData, HttpSession session) throws Exception {
        // Inv<fim_middle>","
 * Class to handle the initial launch of an LTI application and creating a
 * session with authentication information from Canvas in it. After the
 * LTI data's signature is verified it will forward the request to an 
 * ""initial view"" that all implementing classes must supply via the 
 * getInitialViewPath() method. This initial view method should verify
 * that there is a valid ltiSession with an eID in it and can then serve
 * up its content.
 */","
 * Created by <NAME> on 10/10/15.
 */"
"<fim_prefix>.class.getName(), ltiSession);
        instanceChecker.assertValidInstance(ltiSession);
        LOG.info(""launching LTI integration '"" + getApplicationName() + ""' from "" + ltiSession.getCanvasDomain() + "" for course: "" + canvasCourseId + "" as user "" + eID);
        LOG.debug(""forwarding user to: "" + getInitialViewPath());
        return ""forward:"" + getInitialViewPath();
    }

    /**<fim_suffix>
    protected abstract String getInitialViewPath();

    /** The identifier of this LTI application. Used to look up config
     * values in the database and such
     *
     * @return The name of the application
     */
    protected abstract String getApplicationName();
}
<fim_middle>"," return the initial path that the user should be sent
     *  to after authenticating the LTI launch request
     *
     * @return Name of the initial view to send the user to
     *  */","
     * @return the canvasCourseId
     */"
"<fim_prefix> "" + eID);
        LOG.debug(""forwarding user to: "" + getInitialViewPath());
        return ""forward:"" + getInitialViewPath();
    }

    /** return the initial path that the user should be sent
     *  to after authenticating the LTI launch request
     *
     * @return Name of the initial view to send the user to
     *  */
    protected abstract String getInitialViewPath();

    /**<fim_suffix>
    protected abstract String getApplicationName();
}
<fim_middle>"," The identifier of this LTI application. Used to look up config
     * values in the database and such
     *
     * @return The name of the application
     */"," return the name of the application that the user is
     *  attempting to launch
     *
     * @return Name of the application
     *  */"
"<fim_prefix>/*<fim_suffix>

package com.biglybt.ui.swt.columns.tag;

import com.biglybt.ui.swt.columns.ColumnCheckBox;
import com.biglybt.pif.ui.tables.TableColumn;

import com.biglybt.core.tag.Tag;
import com.biglybt.core.tag.TagType;


public class
ColumnTagFilter
	extends ColumnCheckBox
{
	public static String COLUMN_ID = ""tag.filter"";

	public
	ColumnTagFilter(
		TableColumn column )
	{
		super( column, 60 <fim_middle>"," 
 * Copyright (C) Bigly Software, Inc, All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */","*
 * 
 */"
"<fim_prefix>package org.sapia.corus.client.exceptions.misc;

import org.sapia.corus.client.exceptions.CorusRuntimeException;
import org.sapia.corus.client.exceptions.ExceptionCode;

/**<fim_suffix>
public class MissingDataException extends CorusRuntimeException {

  static final long serialVersionUID = 1L;

  public MissingDataException(String msg) {
    super(msg, ExceptionCode.MISSING_DATA.getFullCode());
  }

}
<fim_middle>","
 * Thrown when expected data is missing.
 * 
 * @author yduchesne
 * 
 */","
 * @author yduchesne
 *
 */"
"<fim_prefix>package fusion.utils.crates;

import java.util.List;
import java.util.Random;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;

import fusion.utils.chat.Chat;

/**<fim_suffix>

public abstract class Crate {
	
	public abstract String getName();
	
	public abstract List<Reward> getRewards();
	
	public void apply(Player player) {
		
		Random r = new Random();
		
		getRewards().get(r.nextInt(getRewards().size())).apply(player);
		
		for (Player online : Bukkit.getOnlinePlayers()) {
			
			Chat.getInstance().messagePlayer(online, ChatColor.GOLD + <fim_middle>","
	 * 
	 * Copyright GummyPvP. Created on May 31, 2016 by Jeremy Gooch.
	 * All Rights Reserved.
	 * 
	 */","
 * 
 * @author Calclavia
 *
 */"
"<fim_prefix>/*<fim_suffix>
package org.gitools.ui.platform.dialog;

import javax.swing.*;
import java.awt.*;
import java.util.List;

public class DialogButtonsPanel extends JPanel {

    private static final long serialVersionUID = 738021254078143859L;

    public static final JButton SEPARATOR = new JButton();


    private List<JButton> buttons;
    private final JPanel buttonsPanel;

    public DialogButtons<fim_middle>","
 * #%L
 * gitools-ui-platform
 * %%
 * Copyright (C) 2013 Universitat Pompeu Fabra - Biomedical Genomics group
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the 
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public 
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */","*
 * Created by <NAME> on 2019-03-07
 */"
"<fim_prefix>package deepnetts.eval;

import deepnetts.data.DataSet;
import deepnetts.net.NeuralNetwork;

/**<fim_suffix>
public class Evaluators {

    private Evaluators() { }

    /**
     *
     * @param neuralNet
     * @param testSet
     * @return regression performance measures
     */
    public static PerformanceMeasure evaluateRegressor(NeuralNetwork<?> neuralNet, DataSet<?> testSet) {
        RegresionEvaluator eval = new RegresionEvaluator();
        return eval.evaluatePerforma<fim_middle>","
 * This class provides various utility methods for evaluating machine learning models.
 * @author Zoran Sevarac
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package deepnetts.eval;

import deepnetts.data.DataSet;
import deepnetts.net.NeuralNetwork;

/**
 * This class provides various utility methods for evaluating machine learning models.
 * @author Zoran Sevarac
 */
public class Evaluators {

    private Evaluators() { }

    /**<fim_suffix>
    public static PerformanceMeasure evaluateRegressor(NeuralNetwork<?> neuralNet, DataSet<?> testSet) {
        RegresionEvaluator eval = new RegresionEvaluator();
        return eval.evaluatePerformance(neuralNet, testSet);
    }

    /**
     *
     * @param neuralNet
     * @param testSet
     * @return classification performance measure
     */
    public static Perfo<fim_middle>","
     *
     * @param neuralNet
     * @param testSet
     * @return regression performance measures
     */","
     *
     * @param neuralNet
     * @param testSet
     * @return regression performance measure
     */"
"<fim_prefix> Evaluators() { }

    /**
     *
     * @param neuralNet
     * @param testSet
     * @return regression performance measures
     */
    public static PerformanceMeasure evaluateRegressor(NeuralNetwork<?> neuralNet, DataSet<?> testSet) {
        RegresionEvaluator eval = new RegresionEvaluator();
        return eval.evaluatePerformance(neuralNet, testSet);
    }

    /**<fim_suffix>
    public static PerformanceMeasure evaluateClassifier(NeuralNetwork<?> neuralNet, DataSet<?> testSet) {
        ClassifierEvaluator eval = new ClassifierEvaluator();
        return eval.evaluatePerformance(neuralNet, testSet);
    }

}<fim_middle>","
     *
     * @param neuralNet
     * @param testSet
     * @return classification performance measure
     */","
     *
     * @param neuralNet
     * @param testSet
     * @return classification performance measures
     */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.xtend.core.tests.compiler;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.junit.Test;

/**
 * @author Sebastian Zarnekow - Initial contribution and API
 */
@SuppressWarnings(""all"")
public class CompilerBug460963Test extends AbstractXtendCompilerTest {
  @Test
  public void test_01() {
    StringConcatenation _builder = new StringConcatenation();
   <fim_middle>","
 * Copyright (c) 2015 itemis AG (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */","
 * Copyright (c) 2018-2020 ArSysOp
 * 
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by"
"<fim_prefix> (http://www.itemis.eu) and others.
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.xtend.core.tests.compiler;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.junit.Test;

/**<fim_suffix>
@SuppressWarnings(""all"")
public class CompilerBug460963Test extends AbstractXtendCompilerTest {
  @Test
  public void test_01() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(""import java.util.List"");
    _builder.newLine();
    _builder.append(""import java.util.Set"");
    _builder.newLine();
    _builder.append(""class C {"");
    _builder.newLine()<fim_middle>","
 * @author Sebastian Zarnekow - Initial contribution and API
 */","
 * @author <NAME>
 *"
"<fim_prefix>/**<fim_suffix>
package ro.cs.ts.common;

import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

/**
 * 
 * @author Adelina
 *
 */
public class MessageProvider {

private static String RESOURCE_BUNDLE  = ""config.messages"";
	
	private static ResourceBundle rb = null;
	
	
	public static String getMessage(String key, Locale locale) {
		i<fim_middle>","*****************************************************************************
 * This file is part of Termitaria, a project management tool 
 *    Copyright (C) 2008-2013 CodeSphere S.R.L., www.codesphere.ro
 *     
 *    Termitaria is free software; you can redistribute it and/or 
 *    modify it under the terms of the GNU Affero General Public License 
 *    as published by the Free Software Foundation; either version 3 of 
 *    the License, or (at your option) any later version.
 *    
 *    This program is distributed in the hope that it will be useful, 
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of 
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *    GNU Affero General Public License for more details.
 *    
 *    You should have received a copy of the GNU Affero General Public License 
 *    along with Termitaria. If not, see  <http://www.gnu.org/licenses/>.
 ******************************************************************************/","
 * 
 * @author Adelina
 *
 */"
"<fim_prefix>s.
 *    
 *    You should have received a copy of the GNU Affero General Public License 
 *    along with Termitaria. If not, see  <http://www.gnu.org/licenses/> .
 ******************************************************************************/
package ro.cs.ts.common;

import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;

/**<fim_suffix>
public class MessageProvider {

private static String RESOURCE_BUNDLE  = ""config.messages"";
	
	private static ResourceBundle rb = null;
	
	
	public static String getMessage(String key, Locale locale) {
		if (key == null) {
			return ""!key=null!"";
		}
		try{
			rb = ResourceBundle.getBundle(RESOURCE_BUNDLE + ""_"" + locale.getLanguage());
			return rb.getString(key);
		}ca<fim_middle>","
 * 
 * @author Adelina
 *
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.io.sdchain.bean;

import java.io.Serializable;
import java.util.List;

/**<fim_suffix>

public final class TransactionsBean implements Serializable{

    private List<TransactionBean> data;

    private String marker;

    public List<TransactionBean> getData() {
        return data;
    }

    public void setData(List<TransactionBean> data) {
        this.data = data;
    }

    public String getMarker() {
        return marker;
    }

    public void setMarker(String <fim_middle>","
 * @author xiey
 * @date created at 2018/5/7 17:51
 * @project SDChain
 * @email xiey94@qq.com
 * @motto Why should our days leave us never to return?
 */","
 * Created by jameson on 2016/12/7.
 */"
"<fim_prefix>/
public class NominalExampleSetGenerator extends AbstractExampleSource {


	/** The parameter name for &quot;The number of generated examples.&quot; */
	public static final String PARAMETER_NUMBER_EXAMPLES = ""number_examples"";

	/** The parameter name for &quot;The number of attributes.&quot; */
	public static final String PARAMETER_NUMBER_OF_ATTRIBUTES = ""number_of_attributes"";

	/**<fim_suffix>
	public static final String PARAMETER_NUMBER_OF_VALUES = ""number_of_values"";

	public NominalExampleSetGenerator(OperatorDescription description) {
		super(description);
	}

	@Override
	public ExampleSet createExampleSet() throws OperatorException {
		// init
		int numberOfExamples = getParameterAsInt(PARAMETER_NUMBER_EXAMPLES);
		int numberOfAttributes = getParameterAsInt(PARAMETER_N<fim_middle>", The parameter name for &quot;The number of nominal values for each attribute.&quot; */, The parameter name for &quot;The number of values.&quot; */
"<fim_prefix>s a random example set for testing purposes. All attributes have only
 * (random) nominal values and a classification label.
 * 
 * @author Ingo Mierswa
 */
public class NominalExampleSetGenerator extends AbstractExampleSource {


	/** The parameter name for &quot;The number of generated examples.&quot; */
	public static final String PARAMETER_NUMBER_EXAMPLES = ""number_examples"";

	/**<fim_suffix>
	public static final String PARAMETER_NUMBER_OF_ATTRIBUTES = ""number_of_attributes"";

	/** The parameter name for &quot;The number of nominal values for each attribute.&quot; */
	public static final String PARAMETER_NUMBER_OF_VALUES = ""number_of_values"";

	public NominalExampleSetGenerator(OperatorDescription description) {
		super(description);
	}

	@Override
	public ExampleSet creat<fim_middle>", The parameter name for &quot;The number of attributes.&quot; */, The parameter name for &quot;The number of attributes.&quot; */
"<fim_prefix>/*<fim_suffix>
package com.rapidminer.operator.generator;

import java.util.LinkedList;
import java.util.List;

import com.rapidminer.example.Attribute;
import com.rapidminer.example.Attributes;
import com.rapidminer.example.ExampleSet;
import com.rapidminer.example.table.AttributeFactory;
import com.rapidminer.example.table.DoubleArrayDataRow;
import com.rapidminer.example.table.MemoryExampleTable;<fim_middle>","
 *  RapidMiner
 *
 *  Copyright (C) 2001-2014 by RapidMiner and the contributors
 *
 *  Complete list of developers available at our web site:
 *
 *       http://rapidminer.com
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see http://www.gnu.org/licenses/.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>tExampleSource;
import com.rapidminer.operator.ports.metadata.AttributeMetaData;
import com.rapidminer.operator.ports.metadata.ExampleSetMetaData;
import com.rapidminer.operator.ports.metadata.MetaData;
import com.rapidminer.parameter.ParameterType;
import com.rapidminer.parameter.ParameterTypeInt;
import com.rapidminer.tools.Ontology;
import com.rapidminer.tools.RandomGenerator;


/**<fim_suffix>
public class NominalExampleSetGenerator extends AbstractExampleSource {


	/** The parameter name for &quot;The number of generated examples.&quot; */
	public static final String PARAMETER_NUMBER_EXAMPLES = ""number_examples"";

	/** The parameter name for &quot;The number of attributes.&quot; */
	public static final String PARAMETER_NUMBER_OF_ATTRIBUTES = ""number_of_attributes"";

	/** <fim_middle>","
 * Generates a random example set for testing purposes. All attributes have only
 * (random) nominal values and a classification label.
 * 
 * @author Ingo Mierswa
 */","
 * A source of examples for nominal attributes.
 *
 * @author <NAME>
 */"
"<fim_prefix>e;
import com.rapidminer.parameter.ParameterTypeInt;
import com.rapidminer.tools.Ontology;
import com.rapidminer.tools.RandomGenerator;


/**
 * Generates a random example set for testing purposes. All attributes have only
 * (random) nominal values and a classification label.
 * 
 * @author Ingo Mierswa
 */
public class NominalExampleSetGenerator extends AbstractExampleSource {


	/**<fim_suffix>
	public static final String PARAMETER_NUMBER_EXAMPLES = ""number_examples"";

	/** The parameter name for &quot;The number of attributes.&quot; */
	public static final String PARAMETER_NUMBER_OF_ATTRIBUTES = ""number_of_attributes"";

	/** The parameter name for &quot;The number of nominal values for each attribute.&quot; */
	public static final String PARAMETER_NUMBER_OF_VALUES = ""number<fim_middle>", The parameter name for &quot;The number of generated examples.&quot; */, The parameter name for &quot;The number of examples.&quot; */
"<fim_prefix>ontainer.DocRef;
import imcode.server.Imcms;
import imcode.server.document.DocumentDomainObject;
import imcode.server.user.UserDomainObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

/**<fim_suffix>
public class DocGetterCallback implements Serializable {

    private static final Logger logger = LoggerFactory.getLogger(DocGetterCallback.class);
    private static final long serialVersionUID = 2496394918087427549L;
    private volatile DocumentLanguage language;
    private UserDomainObject user;
    private Map<Integer, Callback> callbacks = new ConcurrentHashMap<>();
    privat<fim_middle>","
 * Parametrized callback for DocumentMapper#getDocument method.
 * A callback is updated on each request and (re)assigned to a user.
 * <p>
 * Default doc callback always returns default version of any doc if it is present and the user has at least 'view' rights on it.
 * <p>
 * Working and Custom doc callback return working and custom version of a document with particular id;
 * for other doc ids they behave exactly as default doc callback.
 *
 * @see imcode.server.Imcms
 * @see com.imcode.imcms.servlet.ImcmsSetupFilter
 * @see com.imcode.imcms.mapping.DocumentGetter#getDocument(int)
 */","
 * Created by IntelliJ IDEA.
 * User: pedro
 * Date: Aug 26, 2009
 * Time: 12:01:55 PM
 * To change this template use File | Settings | File Templates.
 */"
"<fim_prefix>/*<fim_suffix>

package org.mabb.fontverter.opentype.TtfInstructions.instructions.graphic;

import org.mabb.fontverter.io.FontDataInputStream;
import org.mabb.fontverter.opentype.TtfInstructions.InstructionStack;
import org.mabb.fontverter.opentype.TtfInstructions.instructions.TtfInstruction;

import java.io.IOException;

public class GetCoordinateInstruction extends TtfInstruction {
    private boo<fim_middle>","
 * Copyright (C) Maddie Abboud 2016
 *
 * FontVerter is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FontVerter is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with FontVerter. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 2017-01-18.
 */"
"<fim_prefix>/*<fim_suffix>

package com.magento.idea.magento2uct.packages;

import com.intellij.codeInspection.LocalInspectionTool;
import com.intellij.psi.PsiElementVisitor;
import com.intellij.psi.xml.XmlFile;
import com.jetbrains.php.lang.psi.PhpFile;
import com.magento.idea.magento2uct.bundles.UctInspectionBundle;
import com.magento.idea.magento2uct.inspections.UctProblemsHolder;
import com.magento.idea.mag<fim_middle>","
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */","*
 * @author <NAME> <<EMAIL>>
 */"
"<fim_prefix>*
     * Get issue severity level.
     *
     * @return IssueSeverityLevel
     */
    public IssueSeverityLevel getLevel() {
        return level;
    }

    /**
     * Get bundle message for the issue.
     *
     * @param args Object
     *
     * @return String
     */
    public String getMessage(final Object... args) {
        return BUNDLE.message(message, args);
    }

    /**<fim_suffix>
    public Class<? extends LocalInspectionTool> getInspectionClass() {
        return inspectionClass;
    }

    /**
     * Get issue by code.
     *
     * @param code int
     *
     * @return SupportedIssue
     */
    public static SupportedIssue getByCode(final int code) {
        for (final SupportedIssue issue : SupportedIssue.values()) {
            if (issue.getCode() == cod<fim_middle>","
     * Get registered inspection class.
     *
     * @return Class
     */","
     * Get issue code.
     *
     * @return int
     */"
"<fim_prefix> issue by code.
     *
     * @param code int
     *
     * @return SupportedIssue
     */
    public static SupportedIssue getByCode(final int code) {
        for (final SupportedIssue issue : SupportedIssue.values()) {
            if (issue.getCode() == code) {
                return issue;
            }
        }
        // unsupported issue code.
        return null;
    }

    /**<fim_suffix>
    public static List<PsiElementVisitor> getVisitors(
            final UctProblemsHolder problemsHolder
    ) {
        final List<PsiElementVisitor> visitors = new LinkedList<>();

        for (final SupportedIssue issue : SupportedIssue.values()) {
            final PsiElementVisitor visitor = buildInspectionVisitor(
                    problemsHolder,
                    issue.ge<fim_middle>","
     * Get visitors for all registered inspections.
     *
     * @param problemsHolder UctProblemsHolder
     *
     * @return List[PsiElementVisitor]
     */","
     * Get supported issue visitors.
     *
     * @param problemsHolder UctProblemsHolder
     *
     * @return List<PsiElementVisitor>
     */"
"<fim_prefix>dList<>();

        for (final SupportedIssue issue : SupportedIssue.values()) {
            final PsiElementVisitor visitor = buildInspectionVisitor(
                    problemsHolder,
                    issue.getInspectionClass()
            );

            if (visitor != null) {
                visitors.add(visitor);
            }
        }

        return visitors;
    }

    /**<fim_suffix>
    public static List<Class<?>> getSupportedFileTypes() {
        final List<Class<?>> types = new ArrayList<>();
        types.add(PhpFile.class);
        types.add(XmlFile.class);

        return types;
    }

    /**
     * Build inspection visitor for file.
     *
     * @param problemsHolder UctProblemsHolder
     * @param inspectionClass Class
     *
     * @return PsiElementVi<fim_middle>","
     * Get supported file types.
     *
     * @return List
     */","
     * Get supported file types.
     *
     * @return List<Class<?>>
  "
"<fim_prefix>level,
            final String message,
            final Class<? extends LocalInspectionTool> inspectionClass
    ) {
        this.code = code;
        this.level = level;
        this.message = message;
        this.inspectionClass = inspectionClass;
    }

    /**
     * Get issue code.
     *
     * @return int
     */
    public int getCode() {
        return code;
    }

    /**<fim_suffix>
    public IssueSeverityLevel getLevel() {
        return level;
    }

    /**
     * Get bundle message for the issue.
     *
     * @param args Object
     *
     * @return String
     */
    public String getMessage(final Object... args) {
        return BUNDLE.message(message, args);
    }

    /**
     * Get registered inspection class.
     *
     * @return Class
     */
    pu<fim_middle>","
     * Get issue severity level.
     *
     * @return IssueSeverityLevel
     */","
     * Get issue severity level.
     *
     * @return IssueSeverityLevel
     */"
"<fim_prefix>            visitors.add(visitor);
            }
        }

        return visitors;
    }

    /**
     * Get supported file types.
     *
     * @return List
     */
    public static List<Class<?>> getSupportedFileTypes() {
        final List<Class<?>> types = new ArrayList<>();
        types.add(PhpFile.class);
        types.add(XmlFile.class);

        return types;
    }

    /**<fim_suffix>
    private static @Nullable PsiElementVisitor buildInspectionVisitor(
            final UctProblemsHolder problemsHolder,
            final Class<? extends LocalInspectionTool> inspectionClass
    ) {
        LocalInspectionTool inspection;

        try {
            inspection = inspectionClass.getConstructor().newInstance();
        } catch (NoSuchMethodException
                | <fim_middle>","
     * Build inspection visitor for file.
     *
     * @param problemsHolder UctProblemsHolder
     * @param inspectionClass Class
     *
     * @return PsiElementVisitor
     */","
     * Build inspection visitor.
     *
     * @param problemsHolder holder
     * @param inspectionClass inspection class
     * @return visitor
     */"
"<fim_prefix>the issue.
     *
     * @param args Object
     *
     * @return String
     */
    public String getMessage(final Object... args) {
        return BUNDLE.message(message, args);
    }

    /**
     * Get registered inspection class.
     *
     * @return Class
     */
    public Class<? extends LocalInspectionTool> getInspectionClass() {
        return inspectionClass;
    }

    /**<fim_suffix>
    public static SupportedIssue getByCode(final int code) {
        for (final SupportedIssue issue : SupportedIssue.values()) {
            if (issue.getCode() == code) {
                return issue;
            }
        }
        // unsupported issue code.
        return null;
    }

    /**
     * Get visitors for all registered inspections.
     *
     * @param problemsHolder U<fim_middle>","
     * Get issue by code.
     *
     * @param code int
     *
     * @return SupportedIssue
     */","
     * Get registered inspection class.
     *
     * @return Class
     */"
"<fim_prefix>Level.WARNING,
            ""customCode.critical.existence.1410"",
            UsedNonExistentMethodInConfig.class
    );

    private final int code;
    private final IssueSeverityLevel level;
    private final String message;
    private final Class<? extends LocalInspectionTool> inspectionClass;
    private static final UctInspectionBundle BUNDLE = new UctInspectionBundle();

    /**<fim_suffix>
    SupportedIssue(
            final int code,
            final IssueSeverityLevel level,
            final String message,
            final Class<? extends LocalInspectionTool> inspectionClass
    ) {
        this.code = code;
        this.level = level;
        this.message = message;
        this.inspectionClass = inspectionClass;
    }

    /**
     * Get issue code.
     *
   <fim_middle>","
     * Known issue ENUM.
     *
     * @param code IssueSeverityLevel
     * @param level IssueSeverityLevel
     * @param message String
     * @param inspectionClass Class
     */","
     * Create new instance.
     *
     * @param code                                          "
"<fim_prefix>el = level;
        this.message = message;
        this.inspectionClass = inspectionClass;
    }

    /**
     * Get issue code.
     *
     * @return int
     */
    public int getCode() {
        return code;
    }

    /**
     * Get issue severity level.
     *
     * @return IssueSeverityLevel
     */
    public IssueSeverityLevel getLevel() {
        return level;
    }

    /**<fim_suffix>
    public String getMessage(final Object... args) {
        return BUNDLE.message(message, args);
    }

    /**
     * Get registered inspection class.
     *
     * @return Class
     */
    public Class<? extends LocalInspectionTool> getInspectionClass() {
        return inspectionClass;
    }

    /**
     * Get issue by code.
     *
     * @param code int
     *
     * @return S<fim_middle>","
     * Get bundle message for the issue.
     *
     * @param args Object
     *
     * @return String
     */","
     * Get issue message.
     *
     * @return String
     */"
"<fim_prefix>aram inspectionClass Class
     */
    SupportedIssue(
            final int code,
            final IssueSeverityLevel level,
            final String message,
            final Class<? extends LocalInspectionTool> inspectionClass
    ) {
        this.code = code;
        this.level = level;
        this.message = message;
        this.inspectionClass = inspectionClass;
    }

    /**<fim_suffix>
    public int getCode() {
        return code;
    }

    /**
     * Get issue severity level.
     *
     * @return IssueSeverityLevel
     */
    public IssueSeverityLevel getLevel() {
        return level;
    }

    /**
     * Get bundle message for the issue.
     *
     * @param args Object
     *
     * @return String
     */
    public String getMessage(final Object... args) <fim_middle>","
     * Get issue code.
     *
     * @return int
     */","
     * Get issue code.
     *
     * @return int
     */"
"<fim_prefix>/*<fim_suffix>
package org.eclipse.ditto.policies.model;

import static org.eclipse.ditto.base.model.common.ConditionChecker.checkNotNull;

import java.util.Objects;

import javax.annotation.Nonnull;
import javax.annotation.concurrent.Immutable;

/**
 * An immutable implementation of {@link SubjectIssuer}.
 */
@Immutable
final class ImmutableSubjectIssuer implements SubjectIssuer {

    private fina<fim_middle>","
 * Copyright (c) 2017 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","*
 * An immutable implementation of {@link SubjectIssuer}.
 */"
"<fim_prefix>ts;

import javax.annotation.Nonnull;
import javax.annotation.concurrent.Immutable;

/**
 * An immutable implementation of {@link SubjectIssuer}.
 */
@Immutable
final class ImmutableSubjectIssuer implements SubjectIssuer {

    private final String subjectIssuer;

    private ImmutableSubjectIssuer(final String subjectIssuer) {
        this.subjectIssuer = subjectIssuer;
    }

    /**<fim_suffix>
    public static SubjectIssuer of(final CharSequence subjectIssuerValue) {
        checkNotNull(subjectIssuerValue, ""subjectIssuerValue"");

        return new ImmutableSubjectIssuer(subjectIssuerValue.toString());
    }

    @Override
    public int length() {
        return toString().length();
    }

    @Override
    public char charAt(final int index) {
        return toString().<fim_middle>","
     * Returns a new SubjectIssuer based on the provided string.
     *
     * @param subjectIssuerValue the character sequence forming the SubjectType's value.
     * @return a new SubjectIssuer.
     * @throws NullPointerException if {@code subjectIssuerValue} is {@code null}.
     */","
     * Creates a new {@link ImmutableSubjectIssuer} from the specified {@link CharSequence}.
     *
     * @param subjectIssuerValue the subject issuer value
     * @return the new {@link ImmutableSubjectIssuer}
     */"
"<fim_prefix> the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.ditto.policies.model;

import static org.eclipse.ditto.base.model.common.ConditionChecker.checkNotNull;

import java.util.Objects;

import javax.annotation.Nonnull;
import javax.annotation.concurrent.Immutable;

/**<fim_suffix>
@Immutable
final class ImmutableSubjectIssuer implements SubjectIssuer {

    private final String subjectIssuer;

    private ImmutableSubjectIssuer(final String subjectIssuer) {
        this.subjectIssuer = subjectIssuer;
    }

    /**
     * Returns a new SubjectIssuer based on the provided string.
     *
     * @param subjectIssuerValue the character sequence forming the SubjectT<fim_middle>","
 * An immutable implementation of {@link SubjectIssuer}.
 */","
 * Immutable implementation of the SubjectIssuer interface.
 *
"
"<fim_prefix>ECTION = new ConnectionConfigurationImpl(I18N.getGUILabel(""connection.type.unknown.label""), ""unknown"");

	// Use this configuration object to show its content as metadata
	private ConnectionConfiguration configuration;

	/**
	 * Constructor required by {@link MetaData#clone()}
	 */
	public ConnectionInformationMetaData() {
		super(ConnectionInformationContainerIOObject.class);
	}

	/**<fim_suffix>
	public ConnectionInformationMetaData(ConnectionConfiguration connectionConfiguration) {
		this();
		configuration = connectionConfiguration;
	}

	/**
	 * Create a new {@link ConnectionInformationMetaData} instance with the given {@link ConnectionConfiguration} to
	 * show as its content
	 *
	 * @param object
	 * 		will be kept as a reference to show its content
	 * @param ignored
	 *<fim_middle>","
	 * Create a new {@link ConnectionInformationMetaData} instance with the given {@link ConnectionConfiguration} to
	 * show as its content
	 *
	 * @param connectionConfiguration
	 * 		will be kept as a reference to show its content
	 */","
	 * Create a new {@link ConnectionInformationMetaData} instance with the given {@link ConnectionConfiguration} to
	 * show as its content
	 *
	 * @param object
	 * 		will be kept as a reference to show its content
	 * @"
"<fim_prefix>nImpl;
import com.rapidminer.connection.util.ConnectionI18N;
import com.rapidminer.tools.encryption.EncryptionProvider;
import com.rapidminer.tools.I18N;


/**
 * MetaData object for {@link com.rapidminer.connection.ConnectionInformation} contains the complete configuration.
 *
 * @author Andreas Timm
 * @since 9.2
 */
public class ConnectionInformationMetaData extends MetaData {

	/**<fim_suffix>
	private static final String TAG_DELIMITER = "", "";
	/**
	 * Maximum description length, about four lines
	 */
	static final int DESCRIPTION_PREVIEW_LENGTH = 300;
	/**
	 * used if no configuration is available
	 */
	static final ConnectionConfiguration UNKNOWN_CONNECTION = new ConnectionConfigurationImpl(I18N.getGUILabel(""connection.type.unknown.label""), ""unknown"");

	// Use this confi<fim_middle>","
	 * Tag delimiter
	 */","
	 * The connection type
	"
"<fim_prefix>ner.tools.encryption.EncryptionProvider;
import com.rapidminer.tools.I18N;


/**
 * MetaData object for {@link com.rapidminer.connection.ConnectionInformation} contains the complete configuration.
 *
 * @author Andreas Timm
 * @since 9.2
 */
public class ConnectionInformationMetaData extends MetaData {

	/**
	 * Tag delimiter
	 */
	private static final String TAG_DELIMITER = "", "";
	/**<fim_suffix>
	static final int DESCRIPTION_PREVIEW_LENGTH = 300;
	/**
	 * used if no configuration is available
	 */
	static final ConnectionConfiguration UNKNOWN_CONNECTION = new ConnectionConfigurationImpl(I18N.getGUILabel(""connection.type.unknown.label""), ""unknown"");

	// Use this configuration object to show its content as metadata
	private ConnectionConfiguration configuration;

	/**
	 * Cons<fim_middle>","
	 * Maximum description length, about four lines
	 */","
	 * Description preview length"
"<fim_prefix>ines
	 */
	static final int DESCRIPTION_PREVIEW_LENGTH = 300;
	/**
	 * used if no configuration is available
	 */
	static final ConnectionConfiguration UNKNOWN_CONNECTION = new ConnectionConfigurationImpl(I18N.getGUILabel(""connection.type.unknown.label""), ""unknown"");

	// Use this configuration object to show its content as metadata
	private ConnectionConfiguration configuration;

	/**<fim_suffix>
	public ConnectionInformationMetaData() {
		super(ConnectionInformationContainerIOObject.class);
	}

	/**
	 * Create a new {@link ConnectionInformationMetaData} instance with the given {@link ConnectionConfiguration} to
	 * show as its content
	 *
	 * @param connectionConfiguration
	 * 		will be kept as a reference to show its content
	 */
	public ConnectionInformationMetaData(Connect<fim_middle>","
	 * Constructor required by {@link MetaData#clone()}
	 */","
	 * Create a new {@link ConnectionInformationMetaData} instance
	"
"<fim_prefix>*
	 * Create a new {@link ConnectionInformationMetaData} instance with the given {@link ConnectionConfiguration} to
	 * show as its content
	 *
	 * @param connectionConfiguration
	 * 		will be kept as a reference to show its content
	 */
	public ConnectionInformationMetaData(ConnectionConfiguration connectionConfiguration) {
		this();
		configuration = connectionConfiguration;
	}

	/**<fim_suffix>
	public ConnectionInformationMetaData(ConnectionInformationContainerIOObject object, boolean ignored) {
		this(object.getConnectionInformation().getConfiguration());
	}

	/**
	 * Returns the type of the connection. Might return {@code null}.
	 */
	public String getConnectionType() {
		return configuration == null ? null : configuration.getType();
	}

	@Override
	public String getDescr<fim_middle>","
	 * Create a new {@link ConnectionInformationMetaData} instance with the given {@link ConnectionConfiguration} to
	 * show as its content
	 *
	 * @param object
	 * 		will be kept as a reference to show its content
	 * @param ignored
	 * 		not used
	 * @see MetaDataFactory#registerIOObjectMetaData(Class, Class)
	 */","
	 * Create a new {@link ConnectionInformationMetaData} instance with the given {@link ConnectionInformationContainerIOObject}
	 * to show as its content
	 *
	 * @param object
	 * 		will be kept as a reference to show its content
	 * @param ignored
	 * 		will be ignored
	 */"
"<fim_prefix>com.rapidminer.connection.ConnectionInformation} contains the complete configuration.
 *
 * @author Andreas Timm
 * @since 9.2
 */
public class ConnectionInformationMetaData extends MetaData {

	/**
	 * Tag delimiter
	 */
	private static final String TAG_DELIMITER = "", "";
	/**
	 * Maximum description length, about four lines
	 */
	static final int DESCRIPTION_PREVIEW_LENGTH = 300;
	/**<fim_suffix>
	static final ConnectionConfiguration UNKNOWN_CONNECTION = new ConnectionConfigurationImpl(I18N.getGUILabel(""connection.type.unknown.label""), ""unknown"");

	// Use this configuration object to show its content as metadata
	private ConnectionConfiguration configuration;

	/**
	 * Constructor required by {@link MetaData#clone()}
	 */
	public ConnectionInformationMetaData() {
		super(Conn<fim_middle>","
	 * used if no configuration is available
	 */","
	 * Maximum name length, about four lines
	"
"<fim_prefix>ration} to
	 * show as its content
	 *
	 * @param object
	 * 		will be kept as a reference to show its content
	 * @param ignored
	 * 		not used
	 * @see MetaDataFactory#registerIOObjectMetaData(Class, Class)
	 */
	public ConnectionInformationMetaData(ConnectionInformationContainerIOObject object, boolean ignored) {
		this(object.getConnectionInformation().getConfiguration());
	}

	/**<fim_suffix>
	public String getConnectionType() {
		return configuration == null ? null : configuration.getType();
	}

	@Override
	public String getDescription() {
		final StringBuilder builder = new StringBuilder(super.getDescription());
		ConnectionConfiguration config = Optional.ofNullable(getConfiguration()).orElse(UNKNOWN_CONNECTION);
		String tags = String.join(TAG_DELIMITER, Optional.ofNull<fim_middle>","
	 * Returns the type of the connection. Might return {@code null}.
	 */","
	 * Creates a new {@link ConnectionInformationMetaData} with the given {@link ConnectionConfiguration"
"<fim_prefix>ppend(ConnectionI18N.getConnectionIconName(config.getType())).append(""' />"").append(""</td>"");
		builder.append(""<td>"");
		builder.append(I18N.getGUIMessage(""gui.label.connection.metadata.connection_type.message"", """" + config.getName(), """" + ConnectionI18N.getTypeName(config.getType())));
		builder.append(""</td>"");
		builder.append(""</tr></table>"");
		return builder.toString();
	}

	/**<fim_suffix>
	private void writeObject(ObjectOutputStream out) throws IOException {
		// we encrypt values in MD, even though they are not meant to be decrypted again. This is for security reasons to not expose values in the MD in plain text on AI Hub disk
		ConnectionInformationSerializer.INSTANCE.writeJson(out, configuration, EncryptionProvider.DEFAULT_CONTEXT);
	}

	/**
	 * Required for Java se<fim_middle>","
	 * Required for Java serialization, this is a special @Override style..
	 *
	 * @param out
	 * 		writing to this stream
	 * @throws IOException
	 * 		could not write
	 */","
	 * Required for Java serilization
	 */"
"<fim_prefix>onInformationMetaData) super.clone();
		if (configuration == null) {
			return cimdClone;
		}
		try {
			// keep only a copy of the configuration
			cimdClone.configuration = ConnectionInformationSerializer.INSTANCE.createDeepCopy(configuration);
		} catch (IOException e) {
			throw new RuntimeException(""Cloning the connection configuration failed"", e);
		}
		return cimdClone;
	}

	/**<fim_suffix>
	public ConnectionConfiguration getConfiguration() {
		return configuration;
	}
}
<fim_middle>","
	 * Gets the connection configuration
	 *
	 * @return the configuration object or {@code null} if not yet loaded
	 */","
	 * @return the connection configuration
	 */"
"<fim_prefix>/**<fim_suffix>
package com.rapidminer.operator.ports.metadata;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;

import org.apache.commons.lang.StringUtils;

import com.rapidminer.connection.ConnectionInformationContainerIOObject;
import com.rapidminer.connection.Connec<fim_middle>","
 * Copyright (C) 2001-2021 by RapidMiner and the contributors
 *
 * Complete list of developers available at our web site:
 *
 * http://rapidminer.com
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License along with this program.
 * If not, see http://www.gnu.org/licenses/.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>ionContainerIOObject;
import com.rapidminer.connection.ConnectionInformationSerializer;
import com.rapidminer.connection.configuration.ConnectionConfiguration;
import com.rapidminer.connection.configuration.ConnectionConfigurationImpl;
import com.rapidminer.connection.util.ConnectionI18N;
import com.rapidminer.tools.encryption.EncryptionProvider;
import com.rapidminer.tools.I18N;


/**<fim_suffix>
public class ConnectionInformationMetaData extends MetaData {

	/**
	 * Tag delimiter
	 */
	private static final String TAG_DELIMITER = "", "";
	/**
	 * Maximum description length, about four lines
	 */
	static final int DESCRIPTION_PREVIEW_LENGTH = 300;
	/**
	 * used if no configuration is available
	 */
	static final ConnectionConfiguration UNKNOWN_CONNECTION = new ConnectionConfigura<fim_middle>","
 * MetaData object for {@link com.rapidminer.connection.ConnectionInformation} contains the complete configuration.
 *
 * @author Andreas Timm
 * @since 9.2
 */","
 * Class for storing connection information
 *
 */"
"<fim_prefix> * 		could not write
	 */
	private void writeObject(ObjectOutputStream out) throws IOException {
		// we encrypt values in MD, even though they are not meant to be decrypted again. This is for security reasons to not expose values in the MD in plain text on AI Hub disk
		ConnectionInformationSerializer.INSTANCE.writeJson(out, configuration, EncryptionProvider.DEFAULT_CONTEXT);
	}

	/**<fim_suffix>
	private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
		// we don't care about encrypted values in the meta data. They should not be accessible via MD at all, so we don't try to decrypt them
		configuration = ConnectionInformationSerializer.INSTANCE.loadConfiguration(in, null);
	}

	@Override
	public ConnectionInformationMetaData clone() {
		Conne<fim_middle>","
	 * Required for Java serialization, this is a special @Override style..
	 *
	 * @param in
	 * 		reading from this stream
	 * @throws IOException
	 * 		could not read
	 */","
	 * @see java.io.Serializable#readObject(java.io.ObjectInputStream)
	 */"
"<fim_prefix>package com.mobius.software.telco.protocols.diameter.impl.primitives.creditcontrol.huawei;
/*<fim_suffix>

import com.mobius.software.telco.protocols.diameter.impl.primitives.DiameterUTF8StringImpl;
import com.mobius.software.telco.protocols.diameter.primitives.creditcontrol.huawei.CalledVlrNumber;

/**
*
* @author yulian oifa
*
*/
public class CalledVlrNumberImpl extends DiameterUTF8StringImpl implements CalledVlrNumber
{
	protected CalledVlrNumberImpl()
	{
		super(0, 32);
	}

	public Ca<fim_middle>","
 * Mobius Software LTD
 * Copyright 2023, Mobius Software LTD and individual contributors
 * by the @authors tag.
 *
 * This program is free software: you can redistribute it and/or modify
 * under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
*
* @author yulian oifa
*
*/"
"<fim_prefix>l Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

import com.mobius.software.telco.protocols.diameter.impl.primitives.DiameterUTF8StringImpl;
import com.mobius.software.telco.protocols.diameter.primitives.creditcontrol.huawei.CalledVlrNumber;

/**<fim_suffix>
public class CalledVlrNumberImpl extends DiameterUTF8StringImpl implements CalledVlrNumber
{
	protected CalledVlrNumberImpl()
	{
		super(0, 32);
	}

	public CalledVlrNumberImpl(String value)
	{
		super(value, 0, 32);
	}
}<fim_middle>","
*
* @author yulian oifa
*
*/","
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package org.silvertunnel_ng.netlib.api.impl;

import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;

public class DataNetSocketUtil
{

	public static DataNetSocketPair createDataNetSocketPair()
			throws IOException
	{
		final DataNetSocketPair result = new DataNetSocketPair();

		// create stream from higher layer
		final PipedInputStream fro<fim_middle>","
 * silvertunnel.org Netlib - Java library to easily access anonymity networks
 * Copyright (c) 2009-2012 silvertunnel.org
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>s will override the default salt length
     * @param hashLength  Length of the returned hash in bytes.
     * @param version     Argon2 version
     * @return Hash result, containing both the raw and the encoded representation.
     */
    HashResult hashAdvanced(int iterations, int memory, int parallelism, byte[] password, byte[] salt, int hashLength, Argon2Version version);

    /**<fim_suffix>
    byte[] rawHashAdvanced(int iterations, int memory, int parallelism, char[] password, Charset charset, byte[] salt, byte[] secret, byte[] associatedData);

    /**
     * Advanced version of hash, let the caller specify addition parameters such as hash length, salt, secret and associated data.
     * Return both the encoded and the raw hash.
     *
     * @param iterations     Numb<fim_middle>","
     * Hashes a password, using the given salt, secret and associated data.
     *
     * @param iterations     Number of iterations
     * @param memory         Sets memory usage to x kibibytes
     * @param parallelism    Number of threads and compute lanes
     * @param password       Password to hash
     * @param charset        Charset of the password
     * @param salt           Salt
     * @param secret         Secret (sometimes referred as Pepper)
     * @param associatedData Associated Data
     * @return Hashed password in raw bytes.
     */","
     * Advanced version of hash, let the caller specify addition parameters such as hash length, salt, secret and associated data.
     * Return both the encoded and the raw hash.
     *
     * @param iterations     Numb of iterations
     * @param memory         Memory in kibibytes
     * @param parallelism    Number of threads
     * @param password       <PASSWORD>
     * @param salt           Salt
     * @param secret         Secret
     * @param associatedData Associated data
     * @param charset        Charset to use for encoding
     * @return"
"<fim_prefix>ecret (sometimes referred as Pepper)
     * @param associatedData Associated Data
     * @param rawHash        Raw Hash bytes.
     * @return True if the password matches the hash, false otherwise.
     */
    boolean verifyAdvanced(int iterations, int memory, int parallelism, char[] password, Charset charset, byte[] salt, byte[] secret, byte[] associatedData, byte[] rawHash);

    /**<fim_suffix>
    boolean verifyAdvanced(int iterations, int memory, int parallelism, byte[] password, byte[] salt, byte[] secret, byte[] associatedData, int hashLength, Argon2Version version, byte[] rawHash);

    /**
     * Generates salt with the default length.
     *
     * @return Salt.
     */
    byte[] generateSalt();

    /**
     * Generates salt with the specified length in bytes.
     <fim_middle>","
     * Verifies a password against a hash.
     *
     * @param iterations     Number of iterations
     * @param memory         Sets memory usage to x kibibytes
     * @param parallelism    Number of threads and compute lanes
     * @param password       Password to hash
     * @param salt           Salt
     * @param secret         Secret (sometimes referred as Pepper)
     * @param associatedData Associated Data
     * @param hashLength     Length of the returned hash in bytes.
     * @param version        Argon2 version
     * @param rawHash        Raw Hash bytes.
     * @return True if the password matches the hash, false otherwise.
     */","
     * Verifies the password with the specified parameters.
     *
     * @param iterations     Number of iterations.
     * @param memory         Memory in KiB.
     * @param parallelism    Number of threads.
     * @param password       Password.
     * @param charset        Charset.
     * @param salt           Salt.
     * @param secret         Secret.
     * @param associatedData Associated Data.
     * @param rawHash        Raw Hash bytes.
     * @return True if the password matches the hash, false otherwise.
     */"
"<fim_prefix>package de.mkammerer.argon2;

import java.nio.charset.Charset;

/**<fim_suffix>
public interface Argon2Advanced extends Argon2 {
    /**
     * Hashes a password and returns the raw bytes.
     * <p>
     * Uses UTF-8 encoding.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param salt   <fim_middle>","
 * Advanced Argon2 hash functions.
 * <p>
 * All implementing classes need to be thread safe.
 */","
 * Interface for Argon2 with advanced options.
 * <p>
 * This interface extends {@link Argon2}"
"<fim_prefix>package de.mkammerer.argon2;

import java.nio.charset.Charset;

/**
 * Advanced Argon2 hash functions.
 * <p>
 * All implementing classes need to be thread safe.
 */
public interface Argon2Advanced extends Argon2 {
    /**<fim_suffix>
    @Deprecated
    byte[] rawHash(int iterations, int memory, int parallelism, String password, byte[] salt);

    /**
     * Hashes a password and returns the raw bytes.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to ha<fim_middle>","
     * Hashes a password and returns the raw bytes.
     * <p>
     * Uses UTF-8 encoding.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     * @deprecated Use the {@link #rawHash(int, int, int, char[], byte[])} method instead. Will be removed in version 3.
     */","
     * Hashes a password and returns the raw bytes.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to ha<PASSWORD>
     * @param salt        Salt to use
     * @return Raw bytes of the hash
     */"
"<fim_prefix>   * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param data        Data to hash
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed data in raw bytes.
     */
    byte[] rawHash(int iterations, int memory, int parallelism, byte[] data, byte[] salt);

    /**<fim_suffix>
    byte[] rawHash(int iterations, int memory, int parallelism, char[] password, Charset charset, byte[] salt);

    /**
     * Uses the given password to generate key material (password based key derivation).
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
  <fim_middle>","
     * Hashes a password and returns the raw bytes.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param charset     Charset of the password
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     */","
     * Uses the given password to generate key material (password based key derivation).
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to use
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed data in raw bytes.
     */"
"<fim_prefix>ism Number of threads and compute lanes
     * @param password    Password to hash
     * @param charset     Charset of the password
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     */
    byte[] rawHash(int iterations, int memory, int parallelism, char[] password, Charset charset, byte[] salt);

    /**<fim_suffix>
    byte[] pbkdf(int iterations, int memory, int parallelism, char[] password, Charset charset, byte[] salt, int keyLength);

    /**
     * Uses the given password to generate key material (password based key derivation).
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and com<fim_middle>","
     * Uses the given password to generate key material (password based key derivation).
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to generate key material from
     * @param charset     Charset of the password
     * @param salt        Salt to use. This will override the default salt length
     * @param keyLength   Length of the returned key material in bytes.
     * @return Key material.
     */","
     * Uses the given password to generate key material (password based key derivation).
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compeute lanes  Add keyLength parameter to pbkdf  /*
 * JBoss, Home of Professional Open Source.
 * Copyright 2014 Red Hat, Inc., and individual contributors
 * as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http"
"<fim_prefix>   * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     * @deprecated Use the {@link #hash(int, int, int, char[], Charset)} method instead. Will be removed in version 3.
     */
    @Deprecated
    byte[] rawHash(int iterations, int memory, int parallelism, String password, Charset charset, byte[] salt);

    /**<fim_suffix>
    byte[] rawHash(int iterations, int memory, int parallelism, char[] password, byte[] salt);

    /**
     * Hashes the given data and returns the raw bytes.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param data        Data to hash
     * @param<fim_middle>","
     * Hashes a password and returns the raw bytes.
     * <p>
     * Uses UTF-8 encoding.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     */","
     * Hashes the given data and returns the raw bytes.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param data        Data to hash
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     */"
"<fim_prefix>material from
     * @param charset     Charset of the password
     * @param salt        Salt to use. This will override the default salt length
     * @param keyLength   Length of the returned key material in bytes.
     * @return Key material.
     */
    byte[] pbkdf(int iterations, int memory, int parallelism, char[] password, Charset charset, byte[] salt, int keyLength);

    /**<fim_suffix>
    byte[] pbkdf(int iterations, int memory, int parallelism, byte[] password, byte[] salt, int keyLength);


    /**
     * Hashes a password, using the given salt.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
   <fim_middle>","
     * Uses the given password to generate key material (password based key derivation).
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to generate key material from
     * @param salt        Salt to use. This will override the default salt length
     * @param keyLength   Length of the returned key material in bytes.
     * @return Key material.
     */","
     * Hashes a password, using the given salt.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param salt        Salt to use. This will override the default salt length
     * @param keyLength   Length of the returned key material in bytes.
     * @return Key material.
     */"
"<fim_prefix>memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param charset     Charset of the password
     * @param salt        Salt
     * @return Hashed password.
     */
    String hash(int iterations, int memory, int parallelism, char[] password, Charset charset, byte[] salt);

    /**<fim_suffix>
    HashResult hashAdvanced(int iterations, int memory, int parallelism, byte[] password, byte[] salt, int hashLength, Argon2Version version);

    /**
     * Hashes a password, using the given salt, secret and associated data.
     *
     * @param iterations     Number of iterations
     * @param memory         Sets memory usage to x kibibytes
     * @param parallelism    Number of t<fim_middle>","
     * Advanced version of hash, let the caller specify the hash length, the salt and the argon2 version. Returns both
     * the encoded and the raw hash.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param salt        Salt to use. This will override the default salt length
     * @param hashLength  Length of the returned hash in bytes.
     * @param version     Argon2 version
     * @return Hash result, containing both the raw and the encoded representation.
     */","
     * Hashes a password, using the given salt, secret and associated data.
     *
     * @param iterations     Number of iterations
     * @param memory         Sets memory usage to x kibibytes
     * @param parallelism    Number of threads and compute lanes
     * @param password       Password to hash
     * @param salt           Salt
     * @param associatedData Associated data
     * @return Hashed password.
     */"
"<fim_prefix>harset of the password
     * @param salt           Salt
     * @param secret         Secret (sometimes referred as Pepper)
     * @param associatedData Associated Data
     * @return Hashed password in raw bytes.
     */
    byte[] rawHashAdvanced(int iterations, int memory, int parallelism, char[] password, Charset charset, byte[] salt, byte[] secret, byte[] associatedData);

    /**<fim_suffix>
    byte[] rawHashAdvanced(int iterations, int memory, int parallelism, byte[] password, byte[] salt, byte[] secret, byte[] associatedData, int hashLength, Argon2Version version);

    /**
     * Verifies a password against a hash.
     *
     * @param iterations     Number of iterations
     * @param memory         Sets memory usage to x kibibytes
     * @param parallelism    Number <fim_middle>","
     * Advanced version of hash, let the caller specify addition parameters such as hash length, salt, secret and associated data.
     * Return both the encoded and the raw hash.
     *
     * @param iterations     Number of iterations
     * @param memory         Sets memory usage to x kibibytes
     * @param parallelism    Number of threads and compute lanes
     * @param password       Password to hash
     * @param salt           Salt
     * @param secret         Secret (sometimes referred as Pepper)
     * @param associatedData Associated Data
     * @param hashLength     Length of the returned hash in bytes.
     * @param version        Argon2 version
     * @return Hashed password in raw bytes.
     */","
     * Verifies a password against a hash.
     *
     * @param iterations     Number of iterations
     * @param memory         Sets memory usage to x kibibytes
     * @param parallelism    Number of threads to use
     * @param password       <PASSWORD>
     * @param charset        Charset of the password
     * @param salt           Salt
     * @param secret         Secret (sometimes referred as Pepper)
     * @param associatedData Associated Data
     * @param hashLength     Length of the hash
     * @return Hashed password in raw bytes.
     */"
"<fim_prefix>memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     */
    byte[] rawHash(int iterations, int memory, int parallelism, char[] password, byte[] salt);

    /**<fim_suffix>
    byte[] rawHash(int iterations, int memory, int parallelism, byte[] data, byte[] salt);

    /**
     * Hashes a password and returns the raw bytes.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param cha<fim_middle>","
     * Hashes the given data and returns the raw bytes.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param data        Data to hash
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed data in raw bytes.
     */","
     * Hashes a password and returns the raw bytes.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     */"
"<fim_prefix> hash in bytes.
     * @param version        Argon2 version
     * @param rawHash        Raw Hash bytes.
     * @return True if the password matches the hash, false otherwise.
     */
    boolean verifyAdvanced(int iterations, int memory, int parallelism, byte[] password, byte[] salt, byte[] secret, byte[] associatedData, int hashLength, Argon2Version version, byte[] rawHash);

    /**<fim_suffix>
    byte[] generateSalt();

    /**
     * Generates salt with the specified length in bytes.
     *
     * @param lengthInBytes Length of salt in bytes.
     * @return Salt.
     */
    byte[] generateSalt(int lengthInBytes);
}
<fim_middle>","
     * Generates salt with the default length.
     *
     * @return Salt.
     */","
     * Generates salt.
     *
     * @return Salt.
     */"
"<fim_prefix> compute lanes
     * @param password    Password to generate key material from
     * @param salt        Salt to use. This will override the default salt length
     * @param keyLength   Length of the returned key material in bytes.
     * @return Key material.
     */
    byte[] pbkdf(int iterations, int memory, int parallelism, byte[] password, byte[] salt, int keyLength);


    /**<fim_suffix>
    String hash(int iterations, int memory, int parallelism, char[] password, Charset charset, byte[] salt);

    /**
     * Advanced version of hash, let the caller specify the hash length, the salt and the argon2 version. Returns both
     * the encoded and the raw hash.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
<fim_middle>","
     * Hashes a password, using the given salt.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param charset     Charset of the password
     * @param salt        Salt
     * @return Hashed password.
     */","
     * Hash a password using Argon2.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads to use
     * @param password    Password to generate key material from
     * @param salt        Salt to use. This will override the default salt length
     * @param keyLength   Length of the returned key material in bytes.
   "
"<fim_prefix>aram associatedData Associated Data
     * @param hashLength     Length of the returned hash in bytes.
     * @param version        Argon2 version
     * @return Hashed password in raw bytes.
     */
    byte[] rawHashAdvanced(int iterations, int memory, int parallelism, byte[] password, byte[] salt, byte[] secret, byte[] associatedData, int hashLength, Argon2Version version);

    /**<fim_suffix>
    boolean verifyAdvanced(int iterations, int memory, int parallelism, char[] password, Charset charset, byte[] salt, byte[] secret, byte[] associatedData, byte[] rawHash);

    /**
     * Verifies a password against a hash.
     *
     * @param iterations     Number of iterations
     * @param memory         Sets memory usage to x kibibytes
     * @param parallelism    Number of thr<fim_middle>","
     * Verifies a password against a hash.
     *
     * @param iterations     Number of iterations
     * @param memory         Sets memory usage to x kibibytes
     * @param parallelism    Number of threads and compute lanes
     * @param password       Password to hash
     * @param charset        Charset of the password
     * @param salt           Salt
     * @param secret         Secret (sometimes referred as Pepper)
     * @param associatedData Associated Data
     * @param rawHash        Raw Hash bytes.
     * @return True if the password matches the hash, false otherwise.
     */","
     * Verifies a password against a hash.
     *
     * @param iterations     Number of iterations
     * @param memory         Sets memory usage to x kibibytes
     * @param parallelism    Number of threads to use
     * @param password       <PASSWORD>
     * @param charset        Charset of the password
     * @param salt           Salt
     * @param secret         Secret
     * @param associatedData Associated Data
     * @param rawHash        Hashed password in raw bytes
     * @return True if the password is correct, false otherwise.
     */"
"<fim_prefix>word to hash
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     * @deprecated Use the {@link #rawHash(int, int, int, char[], byte[])} method instead. Will be removed in version 3.
     */
    @Deprecated
    byte[] rawHash(int iterations, int memory, int parallelism, String password, byte[] salt);

    /**<fim_suffix>
    @Deprecated
    byte[] rawHash(int iterations, int memory, int parallelism, String password, Charset charset, byte[] salt);

    /**
     * Hashes a password and returns the raw bytes.
     * <p>
     * Uses UTF-8 encoding.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads an<fim_middle>","
     * Hashes a password and returns the raw bytes.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads and compute lanes
     * @param password    Password to hash
     * @param charset     Charset of the password
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     * @deprecated Use the {@link #hash(int, int, int, char[], Charset)} method instead. Will be removed in version 3.
     */","
     * Hashes a password and returns the raw bytes.
     * <p>
     * Uses UTF-8 encoding.
     *
     * @param iterations  Number of iterations
     * @param memory      Sets memory usage to x kibibytes
     * @param parallelism Number of threads an operation should use
     * @param password    <PASSWORD>
     * @param salt        Salt to use. This will override the default salt length
     * @return Hashed password in raw bytes.
     */"
"<fim_prefix> True if the password matches the hash, false otherwise.
     */
    boolean verifyAdvanced(int iterations, int memory, int parallelism, byte[] password, byte[] salt, byte[] secret, byte[] associatedData, int hashLength, Argon2Version version, byte[] rawHash);

    /**
     * Generates salt with the default length.
     *
     * @return Salt.
     */
    byte[] generateSalt();

    /**<fim_suffix>
    byte[] generateSalt(int lengthInBytes);
}
<fim_middle>","
     * Generates salt with the specified length in bytes.
     *
     * @param lengthInBytes Length of salt in bytes.
     * @return Salt.
     */","
     * Generates salt with the specified length.
     *
     * @param lengthInBytes Length of the salt in bytes.
     * @return Salt.
     */"
"<fim_prefix>/*<fim_suffix>

package com.alcatrazescapee.tinkersforging.common.blocks;

import java.util.Random;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.ParametersAreNonnullByDefault;

import net.minecraft.block.Block;
import net.minecraft.block.SoundType;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.BlockFaceShape;
import net.m<fim_middle>","
 * Part of the Tinkers Forging Mod by alcatrazEscapee
 * Work under Copyright. Licensed under the GPL-3.0.
 * See the project LICENSE.md for more information.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.sirius.diagram.editor.tools.internal.menu.child;

import org.eclipse.sirius.diagram.description.tool.ToolPackage;
import org.eclipse.sirius.editor.tools.api.menu.AbstractMenuBuilder;
import org.eclipse.sirius.editor.tools.api.menu.AbstractTypeRestrictingMenuBuilder;

/**
 * The element creation menu.
 * 
 * @author cbrun
 * 
 */
public class ElementCreationMenuBuil<fim_middle>","*****************************************************************************
 * Copyright (c) 2009, 2015 THALES GLOBAL SERVICES and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Obeo - initial API and implementation
 *******************************************************************************/","
 * 
 * @author cbrun
 * 
 */"
"<fim_prefix>l.menu.child;

import org.eclipse.sirius.diagram.description.tool.ToolPackage;
import org.eclipse.sirius.editor.tools.api.menu.AbstractMenuBuilder;
import org.eclipse.sirius.editor.tools.api.menu.AbstractTypeRestrictingMenuBuilder;

/**
 * The element creation menu.
 * 
 * @author cbrun
 * 
 */
public class ElementCreationMenuBuilder extends AbstractTypeRestrictingMenuBuilder {
    /**<fim_suffix>
    public ElementCreationMenuBuilder() {
        super();
        addValidType(ToolPackage.eINSTANCE.getNodeCreationDescription());
        addValidType(ToolPackage.eINSTANCE.getContainerCreationDescription());
        addValidType(ToolPackage.eINSTANCE.getEdgeCreationDescription());
    }

    @Override
    public String getLabel() {
        return ""New Element Creation"";
    }

   <fim_middle>","
     * Build the menu.
     */","
     * Constructor.
     */"
"<fim_prefix>implementation
 *******************************************************************************/
package org.eclipse.sirius.diagram.editor.tools.internal.menu.child;

import org.eclipse.sirius.diagram.description.tool.ToolPackage;
import org.eclipse.sirius.editor.tools.api.menu.AbstractMenuBuilder;
import org.eclipse.sirius.editor.tools.api.menu.AbstractTypeRestrictingMenuBuilder;

/**<fim_suffix>
public class ElementCreationMenuBuilder extends AbstractTypeRestrictingMenuBuilder {
    /**
     * Build the menu.
     */
    public ElementCreationMenuBuilder() {
        super();
        addValidType(ToolPackage.eINSTANCE.getNodeCreationDescription());
        addValidType(ToolPackage.eINSTANCE.getContainerCreationDescription());
        addValidType(ToolPackage.eINSTANCE.getEdgeC<fim_middle>","
 * The element creation menu.
 * 
 * @author cbrun
 * 
 */","
 * @generated
 */"
"<fim_prefix>/*<fim_suffix>
package io.mosip.esignet.repository;

import io.mosip.esignet.entity.ClientDetail;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface ClientDetailRepository extends JpaRepository<ClientDetail, String> {

    /**
     * case-sensitive query to fetch client with clientId and status
     * @param clientId
     * @param status
     <fim_middle>","
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
package io.mosip.esignet.repository;

import io.mosip.esignet.entity.ClientDetail;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface ClientDetailRepository extends JpaRepository<ClientDetail, String> {

    /**<fim_suffix>
    Optional<ClientDetail> findByIdAndStatus(String clientId, String status);
}
<fim_middle>","
     * case-sensitive query to fetch client with clientId and status
     * @param clientId
     * @param status
     * @return
     */","
     * Find client detail by client id and status.
     *
     * @param clientId client id
     * @param status   status
    "
"<fim_prefix>;

        handler.postDelayed(() -> {
          executeEvent(event);
          scheduleIfNecessary();
        }, delay);

        scheduleAlarm(application, event, delay);
      }
    });
  }

  /**
   * @return The next event that should be executed, or {@code null} if there are no events to execute.
   */
  @WorkerThread
  protected @Nullable abstract E getNextClosestEvent();

  /**<fim_suffix>
  @WorkerThread
  protected abstract void executeEvent(@NonNull E event);

  /**
   * @return How long before the provided event should be executed.
   */
  @WorkerThread
  protected abstract long getDelayForEvent(@NonNull E event);

  /**
   * Schedules an alarm to call {@link #scheduleIfNecessary()} after the specified delay. You can
   * use {@link #setAlarm(Context, long, Class)} <fim_middle>","
   * Execute the provided event.
   */","
   * Executes the provided event.
   */"
"<fim_prefix>;

        scheduleAlarm(application, event, delay);
      }
    });
  }

  /**
   * @return The next event that should be executed, or {@code null} if there are no events to execute.
   */
  @WorkerThread
  protected @Nullable abstract E getNextClosestEvent();

  /**
   * Execute the provided event.
   */
  @WorkerThread
  protected abstract void executeEvent(@NonNull E event);

  /**<fim_suffix>
  @WorkerThread
  protected abstract long getDelayForEvent(@NonNull E event);

  /**
   * Schedules an alarm to call {@link #scheduleIfNecessary()} after the specified delay. You can
   * use {@link #setAlarm(Context, long, Class)} as a helper method.
   */
  @AnyThread
  protected abstract void scheduleAlarm(@NonNull Application application, E event, long delay);

  /**
   * Helper m<fim_middle>","
   * @return How long before the provided event should be executed.
   */","
   * Returns the delay in milliseconds before the provided event should be executed.
  "
"<fim_prefix>re no events to execute.
   */
  @WorkerThread
  protected @Nullable abstract E getNextClosestEvent();

  /**
   * Execute the provided event.
   */
  @WorkerThread
  protected abstract void executeEvent(@NonNull E event);

  /**
   * @return How long before the provided event should be executed.
   */
  @WorkerThread
  protected abstract long getDelayForEvent(@NonNull E event);

  /**<fim_suffix>
  @AnyThread
  protected abstract void scheduleAlarm(@NonNull Application application, E event, long delay);

  /**
   * Helper method to set an alarm.
   */
  protected static void setAlarm(@NonNull Context context, long delay, @NonNull Class<? extends BroadcastReceiver> alarmClass) {
    Intent        intent        = new Intent(context, alarmClass);
    PendingIntent pendingIntent =<fim_middle>","
   * Schedules an alarm to call {@link #scheduleIfNecessary()} after the specified delay. You can
   * use {@link #setAlarm(Context, long, Class)} as a helper method.
   */","
   * Schedule an alarm to execute the provided event.
   */"
"<fim_prefix>xecuted.
   */
  @WorkerThread
  protected abstract long getDelayForEvent(@NonNull E event);

  /**
   * Schedules an alarm to call {@link #scheduleIfNecessary()} after the specified delay. You can
   * use {@link #setAlarm(Context, long, Class)} as a helper method.
   */
  @AnyThread
  protected abstract void scheduleAlarm(@NonNull Application application, E event, long delay);

  /**<fim_suffix>
  protected static void setAlarm(@NonNull Context context, long delay, @NonNull Class<? extends BroadcastReceiver> alarmClass) {
    Intent        intent        = new Intent(context, alarmClass);
    PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, PendingIntentFlags.mutable());
    AlarmManager  alarmManager  = ServiceUtil.getAlarmManager(context);

    al<fim_middle>","
   * Helper method to set an alarm.
   */","
   * Sets an alarm to call {@link #scheduleIfNecessary"
"<fim_prefix>oid.os.Handler;
import android.os.HandlerThread;

import androidx.annotation.AnyThread;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.WorkerThread;

import org.signal.core.util.PendingIntentFlags;
import org.signal.core.util.ThreadUtil;
import org.signal.core.util.logging.Log;
import org.thoughtcrime.securesms.util.ServiceUtil;

/**<fim_suffix>
public abstract class TimedEventManager<E> {

  private static final String TAG = Log.tag(TimedEventManager.class);

  private final Application application;
  private final Handler     handler;

  public TimedEventManager(@NonNull Application application, @NonNull String threadName) {
    HandlerThread handlerThread = new HandlerThread(threadName, ThreadUtil.PRIORITY_BACKGROUND_THREA<fim_middle>","
 * Class to help manage scheduling events to happen in the future, whether the app is open or not.
 */","
 * A base class for event managers that are backed by a {@link Handler}.
 */"
"<fim_prefix>tion application;
  private final Handler     handler;

  public TimedEventManager(@NonNull Application application, @NonNull String threadName) {
    HandlerThread handlerThread = new HandlerThread(threadName, ThreadUtil.PRIORITY_BACKGROUND_THREAD);
    handlerThread.start();

    this.application = application;
    this.handler     = new Handler(handlerThread.getLooper());
  }

  /**<fim_suffix>
  public void scheduleIfNecessary() {
    handler.removeCallbacksAndMessages(null);

    handler.post(() -> {
      E event = getNextClosestEvent();

      if (event != null) {
        long delay = getDelayForEvent(event);

        handler.postDelayed(() -> {
          executeEvent(event);
          scheduleIfNecessary();
        }, delay);

        scheduleAlarm(application, event, d<fim_middle>","
   * Should be called whenever the underlying data of events has changed. Will appropriately
   * schedule new event executions.
   */","
   * Schedules the next event if it is not already scheduled.
   */"
"<fim_prefix>y() {
    handler.removeCallbacksAndMessages(null);

    handler.post(() -> {
      E event = getNextClosestEvent();

      if (event != null) {
        long delay = getDelayForEvent(event);

        handler.postDelayed(() -> {
          executeEvent(event);
          scheduleIfNecessary();
        }, delay);

        scheduleAlarm(application, event, delay);
      }
    });
  }

  /**<fim_suffix>
  @WorkerThread
  protected @Nullable abstract E getNextClosestEvent();

  /**
   * Execute the provided event.
   */
  @WorkerThread
  protected abstract void executeEvent(@NonNull E event);

  /**
   * @return How long before the provided event should be executed.
   */
  @WorkerThread
  protected abstract long getDelayForEvent(@NonNull E event);

  /**
   * Schedules an alarm to ca<fim_middle>","
   * @return The next event that should be executed, or {@code null} if there are no events to execute.
   */","
   * @return The next event to be executed.
   */"
"<fim_prefix>/*<fim_suffix>

package org.openlmis.auth.service.notification;

import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Getter
@Setter
@ToString
@EqualsAndHashCode
@NoArgsConstructor
@AllArgsConstructor
public final class EmailDetailsDto {
  private String email;
  private Boolean email<fim_middle>","
 * This program is part of the OpenLMIS logistics management information system platform software.
 * Copyright © 2017 VillageReach
 *
 * This program is free software: you can redistribute it and/or modify it under the terms
 * of the GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details. You should have received a copy of
 * the GNU Affero General Public License along with this program. If not, see
 * http://www.gnu.org/licenses.  For additional information contact info@OpenLMIS.org.
 */","*
 * Created by <NAME> on 11/1/15.
 */"
"<fim_prefix>package studio.thevipershow.safechat.config.messages;

import org.jetbrains.annotations.NotNull;
import studio.thevipershow.safechat.SafeChat;
import studio.thevipershow.vtc.TomlSectionConfiguration;

/**<fim_suffix>
public final class MessagesConfig extends TomlSectionConfiguration<SafeChat, MessagesSection> {

    public MessagesConfig(@NotNull SafeChat javaPlugin, @NotNull String configurationFilename, @NotNull Class<? extends MessagesSection> enumTypeClass) {
        super(javaPlugin, configurationFilename, enumTypeClass);
    }
}
<fim_middle>","
 * Config for the messages.
 */","
 * @author thevipershow
"
"<fim_prefix>/*<fim_suffix>

package innexgo;

public class Session {
  public long id;
  // Id of encounter (Use this to determine student, location, etc)
  long inEncounterId;
  Long outEncounterId;

  // Initialized by jackson during serialization
  public Encounter inEncounter;
  public Encounter outEncounter;
}
<fim_middle>","
 * Innexgo Website
 * Copyright (C) 2020 Innexgo LLC
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 10/29/16.
 */"
"<fim_prefix>om.ankamagames.dofus.harvey.numeric.doubles.sets.interfaces.IDoubleInterval;
import com.ankamagames.dofus.harvey.numeric.doubles.sets.interfaces.IDoubleSet;
import com.ankamagames.dofus.harvey.numeric.doubles.sets.interfaces.ISimpleDoubleSet;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;


/**<fim_suffix>
@NonNullByDefault
public class DegenerateDoubleSet
extends AbstractDegenerateContinuousSet<IDoubleBound, IDoubleSet, ISimpleDoubleSet, IElementaryDoubleSet, IDoubleInterval, IDegenerateDoubleSet>
implements IDegenerateDoubleSet
{
	double _value;
	private final DegenerateDoubleSetBridge<DegenerateDoubleSet> _bridge = new DegenerateDoubleSetBridge<DegenerateDoubleSet>(this);
	private fi<fim_middle>","
 * @author sgros
 *
 */","
 * A degenerate double set is a set"
"<fim_prefix>/*<fim_suffix>
package me.val_mobile.utils;

import me.val_mobile.iceandfire.Dragon;
import me.val_mobile.iceandfire.DragonBreed;
import me.val_mobile.iceandfire.DragonGender;
import me.val_mobile.iceandfire.DragonVariant;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
import net.minecraft.world.level.Level;
import org.bukkit.Location;
i<fim_middle>","
    Copyright (C) 2024  Val_Mobile

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Created by <NAME> on 2016-12-01.
 */"
"<fim_prefix>/*<fim_suffix>
package functionaltests.db.schedulerdb;

import static org.hamcrest.CoreMatchers.*;

import org.junit.Assert;
import org.junit.Test;
import org.ow2.proactive.scheduler.common.job.Job;
import org.ow2.proactive.scheduler.common.job.JobPriority;
import org.ow2.proactive.scheduler.common.job.JobStatus;
import org.ow2.proactive.scheduler.common.job.TaskFlowJob;
import org.ow2.proactive.sch<fim_middle>","
 * ProActive Parallel Suite(TM):
 * The Open Source library for parallel and distributed
 * Workflows & Scheduling, Orchestration, Cloud Automation
 * and Big Data Analysis on Enterprise Grids & Clouds.
 *
 * Copyright (c) 2007 - 2017 ActiveEon
 * Contact: contact@activeeon.com
 *
 * This library is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License
 * as published by the Free Software Foundation: version 3 of
 * the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * If needed, contact us to obtain a release under GPL Version 2 or 3
 * or a different license than the AGPL.
 */","*
 * Copyright (c) 2009-2013 <NAME>
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"
"<fim_prefix>package org.lambda3.graphene.core.relation_extraction.model;

/*<fim_suffix>


import org.lambda3.graphene.core.utils.IDGenerator;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class Extraction {
	private String id;
	private ExtractionType type;
	private Double confidence; //optional
	private int sentenceIdx;
	private int contextLayer;
	private String relation;
	private String arg1;
	private String arg2;
	private List<L<fim_middle>","-
 * ==========================License-Start=============================
 * Extraction.java - Graphene Core - Lambda^3 - 2017
 * Graphene
 * %%
 * Copyright (C) 2017 Lambda^3
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * ==========================License-End===============================
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package com.ostrichemulators.semtool.ui.components.api;

import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.DirectedGraph;
import com.ostrichemulators.semtool.om.SEMOSSEdge;
import com.ostrichemulators.semtool.om.SEMOSSVertex;
import com.ostrichemulators.semtool.ui.components.playsheets.GraphPlaySheet;

/**
 *
 * @author ryan
 */
public interf<fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","*
 *
 * @author ryan
 */"
"<fim_prefix>and open the template in the editor.
 */
package com.ostrichemulators.semtool.ui.components.api;

import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.DirectedGraph;
import com.ostrichemulators.semtool.om.SEMOSSEdge;
import com.ostrichemulators.semtool.om.SEMOSSVertex;
import com.ostrichemulators.semtool.ui.components.playsheets.GraphPlaySheet;

/**<fim_suffix>
public interface GraphListener {

	/**
	 * Notifies when the graph has changed
	 *
	 * @param graph The full graph (including any hidden nodes, etc.)
	 * @param gps The graph playsheet
	 */
	public void graphUpdated( DirectedGraph<SEMOSSVertex, SEMOSSEdge> graph, GraphPlaySheet gps );

	public void layoutChanged( DirectedGraph<SEMOSSVertex, SEMOSSEdge> graph,
			String old<fim_middle>","
 *
 * @author ryan
 */","
 *
 * @author ryan
 */"
"<fim_prefix>ors.semtool.ui.components.api;

import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.graph.DirectedGraph;
import com.ostrichemulators.semtool.om.SEMOSSEdge;
import com.ostrichemulators.semtool.om.SEMOSSVertex;
import com.ostrichemulators.semtool.ui.components.playsheets.GraphPlaySheet;

/**
 *
 * @author ryan
 */
public interface GraphListener {

	/**<fim_suffix>
	public void graphUpdated( DirectedGraph<SEMOSSVertex, SEMOSSEdge> graph, GraphPlaySheet gps );

	public void layoutChanged( DirectedGraph<SEMOSSVertex, SEMOSSEdge> graph,
			String oldlayout, Layout<SEMOSSVertex, SEMOSSEdge> newlayout, GraphPlaySheet gps );

}
<fim_middle>","
	 * Notifies when the graph has changed
	 *
	 * @param graph The full graph (including any hidden nodes, etc.)
	 * @param gps The graph playsheet
	 */","
	 *
	 * @param graph
	 * @param gps
	 */"
"<fim_prefix>/*<fim_suffix>
package denver.svgeditor.ui;

import net.rim.device.api.ui.Field;
import net.rim.device.api.ui.component.LabelField;
import net.rim.device.api.ui.component.pane.HorizontalTabController;
import net.rim.device.api.ui.component.pane.HorizontalTabTitleView;
import net.rim.device.api.ui.component.pane.Pane;
import net.rim.device.api.ui.component.pane.PaneManagerController;
import net.rim.d<fim_middle>","
 * SVGEditorTabs.java
 * By: Denver Coneybeare <denver.coneybeare@gmail.com>
 * Nov 4, 2011
 *
 * Copyright 2011 Denver Coneybeare
 *
 * This file is part of SVGEditor.
 * 
 * SVGEditor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * SVGEditor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with SVGEditor.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>oller;
import net.rim.device.api.ui.component.pane.PaneManagerModel;
import net.rim.device.api.ui.component.pane.PaneManagerView;
import net.rim.device.api.ui.component.pane.PaneView;
import net.rim.device.api.ui.component.pane.TitleView;

/**
 * Manages the tabs of the UI widgets for editing SVG images.
 */
public class SVGEditorTabs {

    private final PaneManagerView view;

    /**<fim_suffix>
    public SVGEditorTabs() {
        final PaneManagerModel model = new PaneManagerModel();
        model.enableLooping(true);
        model.addPane(new Pane(new LabelField(""Title 0"", Field.FOCUSABLE),
            new LabelField(""Content 0"", Field.FOCUSABLE)));
        model.addPane(new Pane(new LabelField(""Title 1"", Field.FOCUSABLE),
            new LabelField(""Content 1"", Field.FOCU<fim_middle>","
     * Creates a new instance of <code>SVGEditorTabs</code>.
     */","
     * Creates a new instance of the SVG editor tabs.
     */"
"<fim_prefix>onent.pane.HorizontalTabTitleView;
import net.rim.device.api.ui.component.pane.Pane;
import net.rim.device.api.ui.component.pane.PaneManagerController;
import net.rim.device.api.ui.component.pane.PaneManagerModel;
import net.rim.device.api.ui.component.pane.PaneManagerView;
import net.rim.device.api.ui.component.pane.PaneView;
import net.rim.device.api.ui.component.pane.TitleView;

/**<fim_suffix>
public class SVGEditorTabs {

    private final PaneManagerView view;

    /**
     * Creates a new instance of <code>SVGEditorTabs</code>.
     */
    public SVGEditorTabs() {
        final PaneManagerModel model = new PaneManagerModel();
        model.enableLooping(true);
        model.addPane(new Pane(new LabelField(""Title 0"", Field.FOCUSABLE),
            new LabelField(""Content 0<fim_middle>","
 * Manages the tabs of the UI widgets for editing SVG images.
 */","
 * A pane manager view that contains a set of tabs.
 *
 *"
"<fim_prefix> paneView.setModel(model);

        final PaneManagerView view =
            new PaneManagerView(Field.FOCUSABLE, titleView, paneView);
        view.setModel(model);
        model.setView(view);

        controller.setModel(model);
        controller.setView(view);
        model.setController(controller);
        view.setController(controller);

        this.view = view;
    }

    /**<fim_suffix>
    public Field getField() {
        return this.view;
    }
}
<fim_middle>","
     * Returns the field that displays the tabs.
     * 
     * @return the field that displays the tabs; never returns null
     */","
     * Returns the field view.
     *
     * @return the field view.
     */"
"<fim_prefix>ckage za.ac.sun.cs.coastal.model;

import org.apache.commons.configuration2.ImmutableConfiguration;

import za.ac.sun.cs.coastal.COASTAL;
import za.ac.sun.cs.coastal.diver.SymbolicState;
import za.ac.sun.cs.coastal.solver.Expression;
import za.ac.sun.cs.coastal.solver.IntegerConstant;
import za.ac.sun.cs.coastal.solver.IntegerVariable;
import za.ac.sun.cs.coastal.solver.Operation;

/**<fim_suffix>
public class String {

	private static final Expression MONE = new IntegerConstant(-1, 32);

	private final int minChar;

	private final int maxChar;

	public String(COASTAL coastal, ImmutableConfiguration options) {
		minChar = (Character) coastal.getDefaultMinValue(char.class);
		maxChar = (Character) coastal.getDefaultMaxValue(char.class);
	}

	public boolean length____I(SymbolicSt<fim_middle>","
 * A model of some operations of {@link java.lang.String}. This implementation
 * exploits the fact that string instances enjoy a special status in Java and
 * are also treated specially by COASTAL. Wherever possible, COASTAL mirrors
 * Java string instances with much simpler array-like symbolic values.
 */","
 * A string object.
 */"
"<fim_prefix>t;
import com.a4server.gameserver.model.collision.VirtualObject;
import com.a4server.gameserver.model.event.GridEvent;
import com.a4server.gameserver.model.position.MoveToVirtual;

import static com.a4server.gameserver.model.collision.CollisionResult.CollisionType.COLLISION_NONE;
import static com.a4server.gameserver.model.collision.CollisionResult.CollisionType.COLLISION_VIRTUAL;

/**<fim_suffix>
public class MoveVirtualAI extends PlayerAI
{
	private final VirtualObject _virtual;

	private final ArrivedCallback _arrivedCallback;

	public MoveVirtualAI(Player player, VirtualObject virtual, ArrivedCallback callback)
	{
		super(player);
		_virtual = virtual;
		_arrivedCallback = callback;
	}

	@Override
	public void onArrived(CollisionResult moveResult)
	{
		if (_arrivedCallback <fim_middle>","
 * Created by arksu on 26.04.17.
 */","
 * Created by Vitor on 10/04/2015.
 */"
"<fim_prefix>piledScene} instance
	 * @throws NullPointerException thrown if, and only if, {@code compiledScene} is {@code null}
	 */
	public CompiledSceneModifier(final CompiledScene compiledScene) {
		this.compiledScene = Objects.requireNonNull(compiledScene, ""compiledScene == null"");
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/**<fim_suffix>
	public CompiledScene getCompiledScene() {
		return this.compiledScene;
	}
	
	/**
	 * Adds {@code light} to the associated {@link CompiledScene} instance, if absent.
	 * <p>
	 * Returns {@code true} if, and only if, {@code light} was added, {@code false} otherwise.
	 * <p>
	 * If {@code light} is {@code null}, a {@code NullPointerException} will be thrown.
	 * 
	 * @param light the {@<fim_middle>","
	 * Returns the {@link CompiledScene} instance that is associated with this {@code CompiledSceneModifier} instance.
	 * 
	 * @return the {@code CompiledScene} instance that is associated with this {@code CompiledSceneModifier} instance
	 */","
	 * Returns the associated {@link CompiledScene} instance.
	 * <p>
	 * Returns {@code null} if, and only if, the associated {@link CompiledScene} instance is {@code null}.
	 * 
	 * @return"
"<fim_prefix>ort org.dayflower.scene.texture.UVTexture;

/**
 * A {@code CompiledSceneModifier} is used to modify a {@link CompiledScene} instance.
 * 
 * @since 1.0.0
 * @author J&#246;rgen Lundgren
 */
public final class CompiledSceneModifier {
	private final CompiledScene compiledScene;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/**<fim_suffix>
	public CompiledSceneModifier(final CompiledScene compiledScene) {
		this.compiledScene = Objects.requireNonNull(compiledScene, ""compiledScene == null"");
	}
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * Returns the {@link CompiledScene} instance that is associated with this {@code CompiledSceneModifier} instance.
	 *<fim_middle>","
	 * Constructs a new {@code CompiledSceneModifier} instance.
	 * <p>
	 * If {@code compiledScene} is {@code null}, a {@code NullPointerException} will be thrown.
	 * 
	 * @param compiledScene a {@link CompiledScene} instance
	 * @throws NullPointerException thrown if, and only if, {@code compiledScene} is {@code null}
	 */","
	 * Creates a new {@code CompiledSceneModifier} instance.
	 * 
	 * @param compiledScene the {@link CompiledScene} instance that is associated with this
	 *                      {@code CompiledSceneModifier} instance
	 */"
"<fim_prefix>//////////////////////////////////////////////////////////
	
	/**
	 * Returns the {@link CompiledScene} instance that is associated with this {@code CompiledSceneModifier} instance.
	 * 
	 * @return the {@code CompiledScene} instance that is associated with this {@code CompiledSceneModifier} instance
	 */
	public CompiledScene getCompiledScene() {
		return this.compiledScene;
	}
	
	/**<fim_suffix>
	@SuppressWarnings(""static-method"")
	public boolean addLight(final Light light) {
//		TODO: Implement!
		Objects.requireNonNull(light, ""light == null"");
		
		if(!CompiledLightCache.isSupported(light)) {
			return false;
		}
		
		return false;
	}
	
	/**
	 * Adds {@code primitive} to the associated {@link CompiledScene} instance, if absent.
	 * <p>
	 * Returns {@code true} if, and only <fim_middle>","
	 * Adds {@code light} to the associated {@link CompiledScene} instance, if absent.
	 * <p>
	 * Returns {@code true} if, and only if, {@code light} was added, {@code false} otherwise.
	 * <p>
	 * If {@code light} is {@code null}, a {@code NullPointerException} will be thrown.
	 * 
	 * @param light the {@link Light} instance to add
	 * @return {@code true} if, and only if, {@code light} was added, {@code false} otherwise
	 * @throws NullPointerException thrown if, and only if, {@code light} is {@code null}
	 */","
	 * Returns the {@link CompiledLight} instance that is associated with this {@code CompiledSceneModifier} instance.
	 * 
	 * @return the {@code CompiledLight} instance that is associated with this {@code CompiledSceneModifier} instance
	 */"
"<fim_prefix>exture;
import org.dayflower.scene.texture.LDRImageTexture;
import org.dayflower.scene.texture.MarbleTexture;
import org.dayflower.scene.texture.PolkaDotTexture;
import org.dayflower.scene.texture.SimplexFractionalBrownianMotionTexture;
import org.dayflower.scene.texture.SurfaceNormalTexture;
import org.dayflower.scene.texture.Texture;
import org.dayflower.scene.texture.UVTexture;

/**<fim_suffix>
public final class CompiledSceneModifier {
	private final CompiledScene compiledScene;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/**
	 * Constructs a new {@code CompiledSceneModifier} instance.
	 * <p>
	 * If {@code compiledScene} is {@code null}, a {@code NullPointerException} will be thrown.
	 * 
	 * @param compiledSce<fim_middle>","
 * A {@code CompiledSceneModifier} is used to modify a {@link CompiledScene} instance.
 * 
 * @since 1.0.0
 * @author J&#246;rgen Lundgren
 */","
 * A {@code CompiledSceneModifier} is a {@code SceneModifier} that is compiled into a {@code CompiledScene}.
 * <p>
 * A {@code CompiledSceneModifier} is a {@code SceneModifier}"
"<fim_prefix>e light} was added, {@code false} otherwise
	 * @throws NullPointerException thrown if, and only if, {@code light} is {@code null}
	 */
	@SuppressWarnings(""static-method"")
	public boolean addLight(final Light light) {
//		TODO: Implement!
		Objects.requireNonNull(light, ""light == null"");
		
		if(!CompiledLightCache.isSupported(light)) {
			return false;
		}
		
		return false;
	}
	
	/**<fim_suffix>
	public boolean addPrimitive(final Primitive primitive) {
		Objects.requireNonNull(primitive, ""primitive == null"");
		
		if(!CompiledPrimitiveCache.isSupported(primitive)) {
			return false;
		}
		
		final int areaLightOffset = doAddOptionalAreaLight(primitive.getAreaLight());
		final int boundingVolumeOffset = doAddBoundingVolume3F(primitive.getBoundingVolume());
		final int material<fim_middle>","
	 * Adds {@code primitive} to the associated {@link CompiledScene} instance, if absent.
	 * <p>
	 * Returns {@code true} if, and only if, {@code primitive} was added, {@code false} otherwise.
	 * <p>
	 * If {@code primitive} is {@code null}, a {@code NullPointerException} will be thrown.
	 * 
	 * @param primitive the {@link Primitive} instance to add
	 * @return {@code true} if, and only if, {@code primitive} was added, {@code false} otherwise
	 * @throws NullPointerException thrown if, and only if, {@code primitive} is {@code null}
	 */","
	 * Adds a {@link Primitive} to this {@link Scene}.
	 * 
	 * @param primitive the {@link Primitive} to add
	 * @return {@code true} if the {@link Primitive} was added, {@code false} otherwise
	 * @throws NullPointerException thrown if, and only if, {@code primitive} is {@code null}
	 */"
"<fim_prefix>unt();
		final int primitiveOffset = this.compiledScene.getCompiledPrimitiveCache().addPrimitive(CompiledPrimitiveCache.toPrimitive(primitive, areaLight -> areaLightOffset, boundingVolume3F -> boundingVolumeOffset, material -> materialOffset, shape3F -> shapeOffset), CompiledPrimitiveCache.toMatrix44Fs(primitive.getTransform()));
		
		return primitiveOffset == primitiveCount;
	}
	
	/**<fim_suffix>
	@SuppressWarnings(""static-method"")
	public boolean removeLight(final Light light) {
//		TODO: Implement!
		Objects.requireNonNull(light, ""light == null"");
		
		if(!CompiledLightCache.isSupported(light)) {
			return false;
		}
		
		return false;
	}
	
	/**
	 * Removes {@code primitive} from the associated {@link CompiledScene} instance, if present.
	 * <p>
	 * Returns {@code true} if, <fim_middle>","
	 * Removes {@code light} from the associated {@link CompiledScene} instance, if present.
	 * <p>
	 * Returns {@code true} if, and only if, {@code light} was removed, {@code false} otherwise.
	 * <p>
	 * If {@code light} is {@code null}, a {@code NullPointerException} will be thrown.
	 * 
	 * @param light the {@link Light} instance to remove
	 * @return {@code true} if, and only if, {@code light} was removed, {@code false} otherwise
	 * @throws NullPointerException thrown if, and only if, {@code light} is {@code null}
	 */","
	 * Removes {@code light} from the associated {@link CompiledScene} instance, if present.
	 * <p>
	 * Returns {@code true} if,  and only if,  the light was removed.  Added TODOs to CompiledScene.  package com.jme3.scene.plugins.blender.scenes;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.jme3.light.AreaLight;
import com.jme3.light.DirectionalLight;
import com.jme3.light.Light;
import com.jme3.light.PointLight;
import com.jme"
"<fim_prefix>/**<fim_suffix>
package org.dayflower.scene.compiler;

import java.util.Objects;
import java.util.Optional;

import org.dayflower.geometry.BoundingVolume3F;
import org.dayflower.geometry.Shape3F;
import org.dayflower.geometry.boundingvolume.AxisAlignedBoundingBox3F;
import org.dayflower.geometry.boundingvolume.BoundingSphere3F;
import org.dayflower.geometry.boundingvolume.InfiniteBoundingVolume3F;
im<fim_middle>","
 * Copyright 2014 - 2024 J&#246;rgen Lundgren
 * 
 * This file is part of Dayflower.
 * 
 * Dayflower is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Dayflower is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Dayflower. If not, see <http://www.gnu.org/licenses/>.
 */","
 * A {@link Shape3F} that is bounded by a {@link BoundingVolume3F}.
 */"
"<fim_prefix>ht} was removed, {@code false} otherwise
	 * @throws NullPointerException thrown if, and only if, {@code light} is {@code null}
	 */
	@SuppressWarnings(""static-method"")
	public boolean removeLight(final Light light) {
//		TODO: Implement!
		Objects.requireNonNull(light, ""light == null"");
		
		if(!CompiledLightCache.isSupported(light)) {
			return false;
		}
		
		return false;
	}
	
	/**<fim_suffix>
	public boolean removePrimitive(final Primitive primitive) {
		Objects.requireNonNull(primitive, ""primitive == null"");
		
		if(!CompiledPrimitiveCache.isSupported(primitive)) {
			return false;
		}
		
		final int areaLightOffset = doAddOptionalAreaLight(primitive.getAreaLight());
		final int boundingVolumeOffset = doAddBoundingVolume3F(primitive.getBoundingVolume());
		final int mater<fim_middle>","
	 * Removes {@code primitive} from the associated {@link CompiledScene} instance, if present.
	 * <p>
	 * Returns {@code true} if, and only if, {@code primitive} was removed, {@code false} otherwise.
	 * <p>
	 * If {@code primitive} is {@code null}, a {@code NullPointerException} will be thrown.
	 * 
	 * @param primitive the {@link Primitive} instance to remove
	 * @return {@code true} if, and only if, {@code primitive} was removed, {@code false} otherwise
	 * @throws NullPointerException thrown if, and only if, {@code primitive} is {@code null}
	 */","
	 * Removes the given {@link Primitive} from this {@link Scene}.
	 * 
	 * @param primitive the {@link Primitive} to remove
	 * @return {@code true} if the {@link Primitive} was removed, {@code false} otherwise
	 * @throws NullPointerException thrown if, and only if, {@code primitive} is {@code null}
	 */"
"<fim_prefix>/*<fim_suffix>

package net.jxta.util;

/**
 *  @deprecated Will be deprecated soon and moved to impl utils.
 **/
public class GenericTimeStampedData extends AbstractTimeStampedData {
	protected Object data;

	public GenericTimeStampedData(Object data) {
		super();
		this.data = data;
	}

	public Object getData() { return data; }
}
<fim_middle>","
 * Copyright (c) 2001 Sun Microsystems, Inc.  All rights
 * reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The end-user documentation included with the redistribution,
 *    if any, must include the following acknowledgment:
 *       ""This product includes software developed by the
 *       Sun Microsystems, Inc. for Project JXTA.""
 *    Alternately, this acknowledgment may appear in the software itself,
 *    if and wherever such third-party acknowledgments normally appear.
 *
 * 4. The names ""Sun"", ""Sun Microsystems, Inc."", ""JXTA"" and ""Project JXTA"" must
 *    not be used to endorse or promote products derived from this
 *    software without prior written permission. For written
 *    permission, please contact Project JXTA at http://www.jxta.org.
 *
 * 5. Products derived from this software may not be called ""JXTA"",
 *    nor may ""JXTA"" appear in their name, without prior written
 *    permission of Sun.
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL SUN MICROSYSTEMS OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of Project JXTA.  For more
 * information on Project JXTA, please see
 * <http://www.jxta.org/>.
 *
 * This license is based on the BSD license adopted by the Apache Foundation.
 *
 * $Id: GenericTimeStampedData.java,v 1.1 2007/01/16 11:01:34 thomas Exp $
 */","
 *  Copyright (c) 2001-2009, <NAME>
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *  
 *      * Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *  
 *      * Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *  
 *      * Neither the name of Jean Tessier nor the names of his contributors
 *        may be used to endorse or promote products derived from this software
 *        without specific prior written permission.
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR
 *  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 *  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */"
"<fim_prefix>=====
 *
 * This software consists of voluntary contributions made by many
 * individuals on behalf of Project JXTA.  For more
 * information on Project JXTA, please see
 * <http://www.jxta.org/>.
 *
 * This license is based on the BSD license adopted by the Apache Foundation.
 *
 * $Id: GenericTimeStampedData.java,v 1.1 2007/01/16 11:01:34 thomas Exp $
 */

package net.jxta.util;

/**<fim_suffix>
public class GenericTimeStampedData extends AbstractTimeStampedData {
	protected Object data;

	public GenericTimeStampedData(Object data) {
		super();
		this.data = data;
	}

	public Object getData() { return data; }
}
<fim_middle>","
 *  @deprecated Will be deprecated soon and moved to impl utils.
 **/","
 * A timestamped data object that contains a generic object.
 */"
"<fim_prefix>package net.vleo.timel.variable;

/*<fim_suffix>

import net.vleo.timel.executor.ExecutorContext;
import net.vleo.timel.iterator.TimeIterator;
import net.vleo.timel.time.Interval;
import net.vleo.timel.time.IntervalMaps;
import net.vleo.timel.time.Sample;
import net.vleo.timel.variable.Variable;

import java.util.TreeMap;

/**
 * A variable backed by a TreeMap.
 *
 * @author Andrea Leofreddi
 */
public class TreeMapVariable<V> imple<fim_middle>","-
 * #%L
 * TimEL core
 * %%
 * Copyright (C) 2015 - 2019 Andrea Leofreddi
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 *
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */","*
 * A variable backed by a TreeMap.
 *
 * @author Andrea Leofreddi
 */"
"<fim_prefix>
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-3.0.html>.
 * #L%
 */

import net.vleo.timel.executor.ExecutorContext;
import net.vleo.timel.iterator.TimeIterator;
import net.vleo.timel.time.Interval;
import net.vleo.timel.time.IntervalMaps;
import net.vleo.timel.time.Sample;
import net.vleo.timel.variable.Variable;

import java.util.TreeMap;

/**<fim_suffix>
public class TreeMapVariable<V> implements Variable<V> {
    private final TreeMap<Interval, V> values;

    public TreeMapVariable() {
        values = new TreeMap<>(IntervalMaps.getIntervalEndComparator());
    }

    public TreeMap<Interval, V> getTreeMap() {
        return values;
    }

    @Override
    public TimeIterator<V> readForward(Interval interval, ExecutorContext contex<fim_middle>","
 * A variable backed by a TreeMap.
 *
 * @author Andrea Leofreddi
 */","
 * User: <NAME>
 * Date: 1/12/13
 * Time: 11:"
"<fim_prefix>/*<fim_suffix>

package com.github.smeny.jpc.emulator.execution.opcodes.vm;

import com.github.smeny.jpc.emulator.execution.*;
import com.github.smeny.jpc.emulator.execution.decoder.*;
import com.github.smeny.jpc.emulator.processor.*;
import com.github.smeny.jpc.emulator.processor.fpu64.*;
import static com.github.smeny.jpc.emulator.processor.Processor.*;

public class jcxz_Jb extends Executable
{
 <fim_middle>","
    JPC: An x86 PC Hardware Emulator for a pure Java Virtual Machine

    Copyright (C) 2012-2013 Ian Preston

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License version 2 as published by
    the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 
    Details (including contact information) can be found at: 

    jpc.sourceforge.net
    or the developer website
    sourceforge.net/projects/jpc/

    End of licence header
*/","*
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

package org.fosstrak.epcis.queryclient;

import java.util.List;

import org.fosstrak.epcis.model.Poll;
import org.fosstrak.epcis.model.QueryResults;
import org.fosstrak.epcis.model.Subscribe;
import org.fosstrak.epcis.soap.DuplicateSubscriptionExceptionResponse;
import org.fosstrak.epcis.soap.ImplementationExceptionResponse;
import org.fosstrak.epcis.soap.InvalidURIExcepti<fim_middle>","
 * Copyright (C) 2007 ETH Zurich
 *
 * This file is part of Fosstrak (www.fosstrak.org).
 *
 * Fosstrak is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License version 2.1, as published by the Free Software Foundation.
 *
 * Fosstrak is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with Fosstrak; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301  USA
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>.fosstrak.epcis.soap.QueryTooComplexExceptionResponse;
import org.fosstrak.epcis.soap.QueryTooLargeExceptionResponse;
import org.fosstrak.epcis.soap.SecurityExceptionResponse;
import org.fosstrak.epcis.soap.SubscribeNotPermittedExceptionResponse;
import org.fosstrak.epcis.soap.SubscriptionControlsExceptionResponse;
import org.fosstrak.epcis.soap.ValidationExceptionResponse;

/**<fim_suffix>
public interface QueryControlInterface {

    /**
     * Performs a poll operation at the repository's Query Controls Module.
     * 
     * @param poll
     *            The Poll object including the query name and parameters to be
     *            executed.
     * @return The QueryResults.
     * @throws QueryParameterExceptionResponse
     * @throws NoSuchNameExceptionR<fim_middle>","
 * @author Marco Steybe
 */","
 * The QueryControlInterface defines the methods that"
"<fim_prefix>hrows DuplicateSubscriptionExceptionResponse,
            ImplementationExceptionResponse, QueryTooComplexExceptionResponse, SecurityExceptionResponse,
            InvalidURIExceptionResponse, ValidationExceptionResponse, SubscribeNotPermittedExceptionResponse,
            NoSuchNameExceptionResponse, SubscriptionControlsExceptionResponse, QueryParameterExceptionResponse;

    /**<fim_suffix>
    void unsubscribe(final String subscriptionId) throws ImplementationExceptionResponse, SecurityExceptionResponse,
            ValidationExceptionResponse, NoSuchSubscriptionExceptionResponse;

    /**
     * Retrieves the names of queries that can be coped with.
     * 
     * @return A List of query names.
     * @throws ValidationExceptionResponse
     * @throws Security<fim_middle>","
     * Perform an unsubscribe operation at the repository's Query Controls
     * Module, i.e. unsubscribes a previously subscribed query.
     * 
     * @param subscriptionId
     *            The ID of the query to be unsubscribed.
     * @throws NoSuchSubscriptionExceptionResponse
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ImplementationExceptionResponse
     */","
     * Retrieves the names of queries that can be coped with.
     * 
     * @return A List of query names.
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws NoSuchNameExceptionResponse  Added unsubscribe method to SubscriptionManager interface.  /*
 * Copyright (c) 2010, <NAME>, <NAME>, <NAME>,
 * <NAME>, <NAME>.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms"
"<fim_prefix>xceptionResponse;

    /**
     * Retrieves the names of queries that can be coped with.
     * 
     * @return A List of query names.
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     */
    List<String> getQueryNames() throws ImplementationExceptionResponse, SecurityExceptionResponse,
            ValidationExceptionResponse;

    /**<fim_suffix>
    List<String> getSubscriptionIds(final String queryName) throws ImplementationExceptionResponse,
            SecurityExceptionResponse, ValidationExceptionResponse, NoSuchNameExceptionResponse;

    /**
     * Retrieves the standard version implemented by this implementation.
     * 
     * @return The implemented standard version.
     * @throws ValidationExceptionResponse<fim_middle>","
     * Retrieves the ID of a subscribed query.
     * 
     * @param queryName
     *            The name of the query.
     * @return A List of IDs.
     * @throws NoSuchNameExceptionResponse
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ImplementationExceptionResponse
     */","
     * Retrieves the subscription ids for a given query name.
     * 
     * @param queryName
     *            The name of the query.
     * @return A List of subscription ids.
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws NoSuchNameExceptionResponse
     */"
"<fim_prefix>@throws NoSuchNameExceptionResponse
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ImplementationExceptionResponse
     */
    List<String> getSubscriptionIds(final String queryName) throws ImplementationExceptionResponse,
            SecurityExceptionResponse, ValidationExceptionResponse, NoSuchNameExceptionResponse;

    /**<fim_suffix>
    String getStandardVersion() throws ImplementationExceptionResponse, SecurityExceptionResponse,
            ValidationExceptionResponse;

    /**
     * Retrieves the vendor version.
     * 
     * @return The vendor version.
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ImplementationExceptionResponse
     */
    Str<fim_middle>","
     * Retrieves the standard version implemented by this implementation.
     * 
     * @return The implemented standard version.
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ImplementationExceptionResponse
     */","
     * Retrieves the standard version.
     * 
     * @return The standard version.
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ImplementationExceptionResponse
     */"
"<fim_prefix>plemented by this implementation.
     * 
     * @return The implemented standard version.
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ImplementationExceptionResponse
     */
    String getStandardVersion() throws ImplementationExceptionResponse, SecurityExceptionResponse,
            ValidationExceptionResponse;

    /**<fim_suffix>
    String getVendorVersion() throws ImplementationExceptionResponse, SecurityExceptionResponse,
            ValidationExceptionResponse;
}
<fim_middle>","
     * Retrieves the vendor version.
     * 
     * @return The vendor version.
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ImplementationExceptionResponse
     */","
     * Returns the vendor version of the implementation.
     * 
     * @return The vendor version of the implementation.
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ImplementationExceptionResponse"
"<fim_prefix>s NoSuchSubscriptionExceptionResponse
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ImplementationExceptionResponse
     */
    void unsubscribe(final String subscriptionId) throws ImplementationExceptionResponse, SecurityExceptionResponse,
            ValidationExceptionResponse, NoSuchSubscriptionExceptionResponse;

    /**<fim_suffix>
    List<String> getQueryNames() throws ImplementationExceptionResponse, SecurityExceptionResponse,
            ValidationExceptionResponse;

    /**
     * Retrieves the ID of a subscribed query.
     * 
     * @param queryName
     *            The name of the query.
     * @return A List of IDs.
     * @throws NoSuchNameExceptionResponse
     * @throws ValidationExceptio<fim_middle>","
     * Retrieves the names of queries that can be coped with.
     * 
     * @return A List of query names.
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     */","
     * Retrieves the names of all subscribed queries.
     * 
     * @return A List of query names.
     * @throws ImplementationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws ValidationException"
"<fim_prefix>eryTooComplexExceptionResponse
     * @throws ImplementationExceptionResponse
     */
    QueryResults poll(final Poll poll) throws ImplementationExceptionResponse, QueryTooComplexExceptionResponse,
            QueryTooLargeExceptionResponse, SecurityExceptionResponse, ValidationExceptionResponse,
            NoSuchNameExceptionResponse, QueryParameterExceptionResponse;

    /**<fim_suffix>
    void subscribe(final Subscribe subscribe) throws DuplicateSubscriptionExceptionResponse,
            ImplementationExceptionResponse, QueryTooComplexExceptionResponse, SecurityExceptionResponse,
            InvalidURIExceptionResponse, ValidationExceptionResponse, SubscribeNotPermittedExceptionResponse,
            NoSuchNameExceptionResponse, SubscriptionControlsExceptionResp<fim_middle>","
     * Performs a subscribe operation at the repository's Query Controls Module,
     * i.e. subscribes a query for later execution.
     * 
     * @param subscribe
     *            The Subscribe object including the query name, the parameters,
     *            and subscription id used for subscribing the query.
     * @throws QueryParameterExceptionResponse
     * @throws SubscriptionControlsExceptionResponse
     * @throws NoSuchNameExceptionResponse
     * @throws SubscribeNotPermittedExceptionResponse
     * @throws ValidationExceptionResponse
     * @throws InvalidURIExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws QueryTooComplexExceptionResponse
     * @throws ImplementationExceptionResponse
     * @throws DuplicateSubscriptionExceptionResponse
     */","
     * @param subscribe
     * @throws DuplicateSubscriptionExceptionResponse
     * @throws ImplementationExceptionResponse
     * @throws QueryTooComplexExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws InvalidURIExceptionResponse
     * @throws ValidationExceptionResponse
     * @throws SubscribeNotPermittedExceptionResponse
     * @throws NoSuchNameExceptionResponse
     * @throws SubscriptionControlsExceptionResp"
"<fim_prefix>oap.QueryTooLargeExceptionResponse;
import org.fosstrak.epcis.soap.SecurityExceptionResponse;
import org.fosstrak.epcis.soap.SubscribeNotPermittedExceptionResponse;
import org.fosstrak.epcis.soap.SubscriptionControlsExceptionResponse;
import org.fosstrak.epcis.soap.ValidationExceptionResponse;

/**
 * @author Marco Steybe
 */
public interface QueryControlInterface {

    /**<fim_suffix>
    QueryResults poll(final Poll poll) throws ImplementationExceptionResponse, QueryTooComplexExceptionResponse,
            QueryTooLargeExceptionResponse, SecurityExceptionResponse, ValidationExceptionResponse,
            NoSuchNameExceptionResponse, QueryParameterExceptionResponse;

    /**
     * Performs a subscribe operation at the repository's Query Controls Module,
   <fim_middle>","
     * Performs a poll operation at the repository's Query Controls Module.
     * 
     * @param poll
     *            The Poll object including the query name and parameters to be
     *            executed.
     * @return The QueryResults.
     * @throws QueryParameterExceptionResponse
     * @throws NoSuchNameExceptionResponse
     * @throws ValidationExceptionResponse
     * @throws SecurityExceptionResponse
     * @throws QueryTooLargeExceptionResponse
     * @throws QueryTooComplexExceptionResponse
     * @throws ImplementationExceptionResponse
     */","
     * Performs a poll operation at the repository's Query Controls Module,
     * returning the results.
     * 
     * @param poll
     *            The poll to perform.
     * @return The results of the poll.
     * @throws ImplementationExceptionResponse
     *             If the implementation of the repository does not support the
     *             operation.
     * @throws QueryTooComplexExceptionResponse
     *             If the query is too complex.
  "
"<fim_prefix>/*<fim_suffix>
package org.eblocker.server.icap.filter.bpjm;

import javax.xml.bind.DatatypeConverter;

public class BpjmEntry {
    private final byte[] domainHash;
    private final byte[] pathHash;
    private final int depth;

    public BpjmEntry(byte[] domainHash, byte[] pathHash, int depth) {
        this.domainHash = domainHash;
        this.pathHash = pathHash;
        this.depth = depth;
 <fim_middle>","
 * Copyright 2020 eBlocker Open Source UG (haftungsbeschraenkt)
 *
 * Licensed under the EUPL, Version 1.2 or - as soon they will be
 * approved by the European Commission - subsequent versions of the EUPL
 * (the ""License""); You may not use this work except in compliance with
 * the License. You may obtain a copy of the License at:
 *
 *   https://joinup.ec.europa.eu/page/eupl-text-11-12
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */","*
 * Created by <NAME> on 2016-12-01.
 */"
"<fim_prefix>/*<fim_suffix>


import java.util.ArrayList;
import java.util.*;
public class Solution {

	public static ArrayList<Integer> kSmallest(int n, int[] input, int k) {
		// Write your code here

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());
        for(int i=0;i<k;i++)
        {
            pq.add(input[i]);
        }
        
        for(int i=k;i<input.leng<fim_middle>","
You are given with an integer k and an array of integers that contain numbers in random order. Write a program to find k smallest numbers from given array. You need to save them in an array and return it.
Time complexity should be O(n * logk) and space complexity should not be more than O(k).
Note: Order of elements in the output is not important.
Input Format :
The first line of input contains an integer, that denotes the value of the size of the array. Let us denote it with the symbol N.
The following line contains N space separated integers, that denote the value of the elements of the array.
The following line contains an integer, that denotes the value of k.
Output Format :
The first and only line of output print k smallest elements. The elements in the output are separated by a single space. 
Constraints:
Time Limit: 1 sec
Sample Input 1 :
13
2 12 9 16 10 5 3 20 25 11 1 8 6 
4
Sample Output 1 :
1 2 3 5 
*/","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package org.eclipse.keyple.calypso.command.po.builder;

import org.eclipse.keyple.calypso.command.PoClass;
import org.eclipse.keyple.calypso.command.po.AbstractPoCommandBuilder;
import org.eclipse.keyple.calypso.command.po.CalypsoPoCommand;
import org.eclipse.keyple.calypso.command.po.parser.WriteRecordRespPars;
import org.eclipse.keyple.core.card.message.ApduResponse;
import org.slf4<fim_middle>"," **************************************************************************************
 * Copyright (c) 2018 Calypso Networks Association https://www.calypsonet-asso.org/
 *
 * See the NOTICE file(s) distributed with this work for additional information
 * regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License 2.0 which is available at http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 ************************************************************************************** */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Builds the Write Record APDU command. */
public final class WriteRecordCmdBuild extends AbstractPoCommandBuilder<WriteRecordRespPars> {
  private static final Logger logger = LoggerFactory.getLogger(WriteRecordCmdBuild.class);

  /** The command. */
  private static final CalypsoPoCommand command = CalypsoPoCommand.WRITE_RECORD;

  /*<fim_suffix>
  private final int sfi;
  private final int recordNumber;
  private final byte[] data;

  /**
   * Instantiates a new WriteRecordCmdBuild.
   *
   * @param poClass indicates which CLA byte should be used for the Apdu
   * @param sfi the sfi to select
   * @param recordNumber the record number to write
   * @param newRecordData the new record data to write
   * @throws IllegalArgument<fim_middle>", Construction arguments */,"*
 "
"<fim_prefix>.builder;

import org.eclipse.keyple.calypso.command.PoClass;
import org.eclipse.keyple.calypso.command.po.AbstractPoCommandBuilder;
import org.eclipse.keyple.calypso.command.po.CalypsoPoCommand;
import org.eclipse.keyple.calypso.command.po.parser.WriteRecordRespPars;
import org.eclipse.keyple.core.card.message.ApduResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**<fim_suffix>
public final class WriteRecordCmdBuild extends AbstractPoCommandBuilder<WriteRecordRespPars> {
  private static final Logger logger = LoggerFactory.getLogger(WriteRecordCmdBuild.class);

  /** The command. */
  private static final CalypsoPoCommand command = CalypsoPoCommand.WRITE_RECORD;

  /* Construction arguments */
  private final int sfi;
  private final int recordNumber;
  priv<fim_middle>", Builds the Write Record APDU command. */,"
 * The Class WriteRecordCmdBuild."
"<fim_prefix>and.po.parser.WriteRecordRespPars;
import org.eclipse.keyple.core.card.message.ApduResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Builds the Write Record APDU command. */
public final class WriteRecordCmdBuild extends AbstractPoCommandBuilder<WriteRecordRespPars> {
  private static final Logger logger = LoggerFactory.getLogger(WriteRecordCmdBuild.class);

  /**<fim_suffix>
  private static final CalypsoPoCommand command = CalypsoPoCommand.WRITE_RECORD;

  /* Construction arguments */
  private final int sfi;
  private final int recordNumber;
  private final byte[] data;

  /**
   * Instantiates a new WriteRecordCmdBuild.
   *
   * @param poClass indicates which CLA byte should be used for the Apdu
   * @param sfi the sfi to select
   * @param recordNumb<fim_middle>", The command. */,"
   *"
"<fim_prefix>Number = recordNumber;
    this.data = newRecordData;

    byte p2 = (sfi == 0) ? (byte) 0x04 : (byte) ((byte) (sfi * 8) + 4);

    this.request = setApduRequest(cla, command, (byte) recordNumber, p2, newRecordData, null);

    if (logger.isDebugEnabled()) {
      String extraInfo = String.format(""SFI=%02X, REC=%d"", sfi, recordNumber);
      this.addSubName(extraInfo);
    }
  }

  /**<fim_suffix>
  @Override
  public WriteRecordRespPars createResponseParser(ApduResponse apduResponse) {
    return new WriteRecordRespPars(apduResponse, this);
  }

  /**
   * {@inheritDoc}
   *
   * <p>This command modified the contents of the PO and therefore uses the session buffer.
   *
   * @return true
   * @since 0.9
   */
  @Override
  public boolean isSessionBufferUsed() {
    return true<fim_middle>","
   * {@inheritDoc}
   *
   * @since 0.9
   */","
   * {@inheritDoc}
   *
   * <p>This command modified the contents of"
"<fim_prefix>
  public WriteRecordRespPars createResponseParser(ApduResponse apduResponse) {
    return new WriteRecordRespPars(apduResponse, this);
  }

  /**
   * {@inheritDoc}
   *
   * <p>This command modified the contents of the PO and therefore uses the session buffer.
   *
   * @return true
   * @since 0.9
   */
  @Override
  public boolean isSessionBufferUsed() {
    return true;
  }

  /**<fim_suffix>
  public int getSfi() {
    return sfi;
  }

  /**
   * @return the number of the accessed record
   * @since 0.9
   */
  public int getRecordNumber() {
    return recordNumber;
  }

  /**
   * @return the data sent to the PO
   * @since 0.9
   */
  public byte[] getData() {
    return data;
  }
}
<fim_middle>","
   * @return the SFI of the accessed file
   * @since 0.9
   */","
   * {@inheritDoc}
   *
   * <p>This command modified the contents of the PO"
"<fim_prefix>apduResponse, this);
  }

  /**
   * {@inheritDoc}
   *
   * <p>This command modified the contents of the PO and therefore uses the session buffer.
   *
   * @return true
   * @since 0.9
   */
  @Override
  public boolean isSessionBufferUsed() {
    return true;
  }

  /**
   * @return the SFI of the accessed file
   * @since 0.9
   */
  public int getSfi() {
    return sfi;
  }

  /**<fim_suffix>
  public int getRecordNumber() {
    return recordNumber;
  }

  /**
   * @return the data sent to the PO
   * @since 0.9
   */
  public byte[] getData() {
    return data;
  }
}
<fim_middle>","
   * @return the number of the accessed record
   * @since 0.9
   */","
   * @return the record number of the accessed record
   * @since 0.9
  "
"<fim_prefix>rdCmdBuild extends AbstractPoCommandBuilder<WriteRecordRespPars> {
  private static final Logger logger = LoggerFactory.getLogger(WriteRecordCmdBuild.class);

  /** The command. */
  private static final CalypsoPoCommand command = CalypsoPoCommand.WRITE_RECORD;

  /* Construction arguments */
  private final int sfi;
  private final int recordNumber;
  private final byte[] data;

  /**<fim_suffix>
  public WriteRecordCmdBuild(PoClass poClass, byte sfi, int recordNumber, byte[] newRecordData) {
    super(command, null);

    byte cla = poClass.getValue();
    this.sfi = sfi;
    this.recordNumber = recordNumber;
    this.data = newRecordData;

    byte p2 = (sfi == 0) ? (byte) 0x04 : (byte) ((byte) (sfi * 8) + 4);

    this.request = setApduRequest(cla, command, (byte) recordNum<fim_middle>","
   * Instantiates a new WriteRecordCmdBuild.
   *
   * @param poClass indicates which CLA byte should be used for the Apdu
   * @param sfi the sfi to select
   * @param recordNumber the record number to write
   * @param newRecordData the new record data to write
   * @throws IllegalArgumentException - if record number is &lt; 1
   * @throws IllegalArgumentException - if the request is inconsistent
   * @since 0.9
   */","
   * Instantiates a new write record cmd build.
   *
   * @param poClass the po class
   * @param sfi the sfi
   * @param recordNumber the record number
   * @param newRecordData the new record data
   */"
"<fim_prefix>RecordData, null);

    if (logger.isDebugEnabled()) {
      String extraInfo = String.format(""SFI=%02X, REC=%d"", sfi, recordNumber);
      this.addSubName(extraInfo);
    }
  }

  /**
   * {@inheritDoc}
   *
   * @since 0.9
   */
  @Override
  public WriteRecordRespPars createResponseParser(ApduResponse apduResponse) {
    return new WriteRecordRespPars(apduResponse, this);
  }

  /**<fim_suffix>
  @Override
  public boolean isSessionBufferUsed() {
    return true;
  }

  /**
   * @return the SFI of the accessed file
   * @since 0.9
   */
  public int getSfi() {
    return sfi;
  }

  /**
   * @return the number of the accessed record
   * @since 0.9
   */
  public int getRecordNumber() {
    return recordNumber;
  }

  /**
   * @return the data sent to the PO
   * @since 0.9
<fim_middle>","
   * {@inheritDoc}
   *
   * <p>This command modified the contents of the PO and therefore uses the session buffer.
   *
   * @return true
   * @since 0.9
   */","
   * {@inheritDoc}
   *
   * @since 0.9
   */"
"<fim_prefix>n buffer.
   *
   * @return true
   * @since 0.9
   */
  @Override
  public boolean isSessionBufferUsed() {
    return true;
  }

  /**
   * @return the SFI of the accessed file
   * @since 0.9
   */
  public int getSfi() {
    return sfi;
  }

  /**
   * @return the number of the accessed record
   * @since 0.9
   */
  public int getRecordNumber() {
    return recordNumber;
  }

  /**<fim_suffix>
  public byte[] getData() {
    return data;
  }
}
<fim_middle>","
   * @return the data sent to the PO
   * @since 0.9
   */","
   * @return the data of the accessed record
   * @since 0.9
   */"
"<fim_prefix>/**<fim_suffix>
package de.tuebingen.rparse.treebank.constituent.depconv;

import java.io.IOException;

import de.tuebingen.rparse.treebank.TreebankException;
import de.tuebingen.rparse.treebank.UnknownTaskException;
import de.tuebingen.rparse.treebank.constituent.Tree;
import de.tuebingen.rparse.treebank.dep.DependencyForest;
import de.tuebingen.rparse.treebank.dep.DependencyForestNodeLabel;

/**
 *<fim_middle>","*****************************************************************************
 * File AbstractLabeledDependencyConverter.java
 * 
 * Authors:
 *    Wolfgang Maier
 *    
 * Copyright:
 *    Wolfgang Maier, 2011
 * 
 * This file is part of rparse, see <www.wolfgang-maier.net/rparse>.
 * 
 * rparse is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation; either version 2 of the License, or (at your option) 
 * any later version.
 * 
 * rparse is distributed in the hope that it will be useful, but WITHOUT ANY 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the  GNU General Public 
 * License for more details.
 * 
 * You should have received a copy of the GNU General Public License along 
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 ******************************************************************************/","
 * @author <NAME>
 *
 */"
"<fim_prefix>er.markHeads(t);
		// make label pre-annotations
		LabeledDependencyAnnotator.annotate(t);
		// prepare the dep graph with the terminals
		DependencyForest<DependencyForestNodeLabel, String> deps = initializeDepGraph(t);
		// draw the edges
		makeDeps(t.getRoot(), deps);
		// annotate the edges
		labelDeps(deps);
		// set ID
		deps.id = t.getId();
		// return it
		return deps;
	}

	/**<fim_suffix>
	abstract protected void labelDeps(DependencyForest<DependencyForestNodeLabel, String> deps);
	
	
}
<fim_middle>","
	 * Introduce dependency labels on this graph
	 * @param deps
	 */","
	 * Initializes the dependency graph.
	 * @param t the tree
	"
"<fim_prefix>**/
package de.tuebingen.rparse.treebank.constituent.depconv;

import java.io.IOException;

import de.tuebingen.rparse.treebank.TreebankException;
import de.tuebingen.rparse.treebank.UnknownTaskException;
import de.tuebingen.rparse.treebank.constituent.Tree;
import de.tuebingen.rparse.treebank.dep.DependencyForest;
import de.tuebingen.rparse.treebank.dep.DependencyForestNodeLabel;

/**<fim_suffix>
abstract public class AbstractLabeledDependencyConverter extends UnlabeledDependencyConverter {

	public AbstractLabeledDependencyConverter(String task) throws TreebankException,
			UnknownTaskException, IOException {
		super(task);
	}

	@Override
	public DependencyForest<DependencyForestNodeLabel, String> processSentence(
			Tree t) throws TreebankException {
		// mark heads in the i<fim_middle>","
 * Creates labeled dependencies from a constituent tree following a labeling scheme
 * which must be implemented by every class subclassing this one.
 * 
 * @author wmaier
 *
 */","
 * Abstract class for dependency converters that are labeled.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package ch.threema.app.adapters.decorators;

import android.content.Context;
import android.view.View;
import android.widget.AbsListView;
import android.widget.ListView;

import androidx.annotation.AnyThread;

import androidx.annotation.NonNull;
import ch.threema.app.ui.listitemholder.AbstractListItemHolder;
import ch.threema.app.utils.RuntimeUtil;

abstract class AdapterDecorator {
<fim_middle>","  _____ _
 * |_   _| |_  _ _ ___ ___ _ __  __ _
 *   | | |'\| '_/ -_) -_)' \/ _` |_
 *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
 *
 * Threema for Android
 * Copyright (c) 2014-2024 Threema GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */","*
 * A decorator for a {@link ListView} that adds a header and footer to the list.
 */"
"<fim_prefix>/*<fim_suffix>

package com.discordsrv.common.util;

import com.discordsrv.common.DiscordSRV;
import com.discordsrv.common.util.function.CheckedRunnable;
import com.discordsrv.common.util.function.CheckedSupplier;
import org.jetbrains.annotations.NotNull;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.Completabl<fim_middle>","
 * This file is part of DiscordSRV, licensed under the GPLv3 License
 * Copyright (c) 2016-2024 Austin ""Scarsz"" Shapiro, Henri ""Vankka"" Schubin and DiscordSRV contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","*
 * @author <NAME> ""St4rG00se""
 * @version 1.0
 * @since 1.0
 */"
"<fim_prefix>ns.NotNull;

import java.time.Duration;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeoutException;

public final class CompletableFutureUtil {

    private CompletableFutureUtil() {}

    /**<fim_suffix>
    @NotNull
    public static <T> CompletableFuture<T> failed(@NotNull Throwable throwable) {
        CompletableFuture<T> future = new CompletableFuture<>();
        future.completeExceptionally(throwable);
        return future;
    }

    @SuppressWarnings(""unchecked"")
    @NotNull
    public static <T> CompletableFuture<List<T>> combine(@NotNull Collection<@NotNull CompletableFut<fim_middle>","
     * Same as {@link CompletableFuture#completedFuture(Object)} but for failing.
     */","
     * Creates a new {@link CompletableFuture} that is completed with the given value.
     *"
"<fim_prefix>/**<fim_suffix>
package org.gamehost.jtrek.javatrek.bot;

import org.gamehost.jtrek.javatrek.*;

import java.util.Enumeration;
import java.util.Vector;

/**
 * Created by IntelliJ IDEA.
 * User: Jay
 * Date: Apr 8, 2004
 * Time: 8:48:01 PM
 * To change this template use File | Settings | File Templates.
 */
public class BotDY extends BotPlayer {
    public BotDY(TrekServer serverIn, String name) {
  <fim_middle>","
 *  Copyright (C) 2003-2012  Joe Hopkinson, Jay Ashworth
 *
 *  JavaTrek is based on Chuck L. Peterson's MTrek.
 *
 *  This file is part of JavaTrek.
 *
 *  JavaTrek is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  JavaTrek is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with JavaTrek; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */","
 * Created by IntelliJ IDEA.
 * User: Jay
 * Date: Apr 8, 2004
 * Time: 8:48:01 PM
 * To change this template use File | Settings | File Templates.
 */"
"<fim_prefix>ublic License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with JavaTrek; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
package org.gamehost.jtrek.javatrek.bot;

import org.gamehost.jtrek.javatrek.*;

import java.util.Enumeration;
import java.util.Vector;

/**<fim_suffix>
public class BotDY extends BotPlayer {
    public BotDY(TrekServer serverIn, String name) {
        super(serverIn, name);

        shipName = name;
    }

    public void loadInitialBot() {
        super.loadInitialBot();

        ship = TrekUtilities.getShip(""d"", this);
        ship.setInitialDirection();
        ship.currentQuadrant.addShip(ship);

        quadrantName = ship.curre<fim_middle>","
 * Created by IntelliJ IDEA.
 * User: Jay
 * Date: Apr 8, 2004
 * Time: 8:48:01 PM
 * To change this template use File | Settings | File Templates.
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package org.apis.config.net;

import org.apis.config.blockchain.OsirisTestConfig;

/**<fim_suffix>
public class TestNetConfig extends BaseNetConfig {
    public TestNetConfig() {
        add(0, new OsirisTestConfig());
        //add(1_150_000, new HomesteadConfig());
    }
}
<fim_middle>","
 * Created by Anton Nashatyrev on 25.02.2016.
 */","
 * Created by <NAME> on 12/28/17.
 */"
"<fim_prefix>/*<fim_suffix>

package bio.overture.ego.model.dto;

import bio.overture.ego.model.enums.ApplicationType;
import bio.overture.ego.model.enums.StatusType;
import javax.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class CreateApplicationRequest <fim_middle>","
 * Copyright (c) 2017. The Ontario Institute for Cancer Research. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>damage > 0 ? 1 : 0, 1, 1));
				} else {
					Server.getEventManager().dispatchEvent(new SpecialAttackEvent(player));
				}
			} else if (attacker instanceof NPC) {
				DelayedHit.submit(attacker, victim, new Hit(damage,
						damage > 0 ? 1 : 0, 1, 1));
			}

			/*
			 * Adds experience to the player
			 */
			if (attacker instanceof Player)
				addExperience(attacker, damage);

			/*<fim_suffix>
			victim.setCombatDelay(System.currentTimeMillis());
			attacker.setHitDelay(attacker.grabAttackSpeed());
		}
	}

	@Override
	public boolean checkRequirements(Mobile attacker, Mobile victim) {
		/*
		 * Check if the victim is null or dead, or if the attacker is dead
		 */
		if (victim == null || attacker.getStatus() == WelfareStatus.DEAD
				|| victim.getStatus() == WelfareStatus.DEA<fim_middle>","
			 * Now we reset the attackers hit delay so they cant spam attack
			 */","
			 * Adds experience to the victim
			 */"
"<fim_prefix>er.getLocation().withinDistance(victim.getLocation(),
				distanceRequired(attacker))) {
			return false;
		}
		return true;
	}

	@Override
	public int distanceRequired(Mobile attacker) {
		return 2;
	}

	@Override
	public int calculateDamage(Mobile attacker, Mobile victim) {
		/*
		 * Calculates the damage a player can deal to the victim
		 */
		if (attacker instanceof Player) {
			/*<fim_suffix>
			Player player = (Player) attacker;

			/*
			 * Checks if the victim is an npc so we can grab the calculations
			 */
			if (victim instanceof NPC) {
				/*
				 * Creates an npc instance of the victim so we don't have to
				 * cast NPC
				 */
				NPC npc = (NPC) victim;
				/*
				 * Checks if the players attack bonus is greater then the npcs
				 * defence bonus
				 */
				int<fim_middle>","
			 * Creates a player instance of the attacker
			 */","
			 * Creates a player instance of the attacker so we don"
"<fim_prefix>eate an instance of the victim
		 */
		Mobile victim = (Mobile) attacker.getInteractingEntity();
		/*
		 * Check if all of the requirements are met, if not don't attack
		 */
		if (!checkRequirements(attacker, victim))
			return;
		/*
		 * First we need to face the entity
		 */
		attacker.getUpdateFlags().faceEntity(victim.getIndex() + ((victim instanceof Player) ? 32768 : 0));
		
		/*<fim_suffix>
		if (attacker.getHitDelay() <= 0) {

			/*
			 * First we need to face the entity
			 */
			attacker.getUpdateFlags().faceEntity(victim.getIndex() + ((victim instanceof Player) ? 32768 : 0));

			// attacker.getUpdateFlags().faceEntity();
			/*
			 * Attack animation then block animation before damage
			 */
			attacker.setAnimation(Animation.create(attacker.grabAttackAnimation()));
<fim_middle>","
		 * Check if the attackers hit delay is at least 0 to prevent spam
		 * attacking
		 */","
		 * Attack animation then block animation before damage
		 */"
"<fim_prefix>ort org.solace.game.entity.Animation;
import org.solace.game.entity.mobile.Mobile;
import org.solace.game.entity.mobile.Mobile.WelfareStatus;
import org.solace.game.entity.mobile.npc.NPC;
import org.solace.game.entity.mobile.player.Player;
import org.solace.util.ProtocolUtils;

/**
 * Represents the melee combat style
 * @author Arithium
 *
 */
public class Melee extends Combat {

	/**<fim_suffix>
	private static final Melee melee = new Melee();

	/**
	 * Returns the singleton of the melee class
	 * 
	 * @return
	 */
	public static final Melee getSingleton() {
		return melee;
	}

	// TODO: Damage mapping to get the attacker who dealt the most damage

	@Override
	public void handle(Mobile attacker) {
		/*
		 * First we create an instance of the victim
		 */
		Mobile victim = (Mo<fim_middle>","
	 * Creates an instance of the melee class
	 */","
	 * 
	 */"
"<fim_prefix>lee();

	/**
	 * Returns the singleton of the melee class
	 * 
	 * @return
	 */
	public static final Melee getSingleton() {
		return melee;
	}

	// TODO: Damage mapping to get the attacker who dealt the most damage

	@Override
	public void handle(Mobile attacker) {
		/*
		 * First we create an instance of the victim
		 */
		Mobile victim = (Mobile) attacker.getInteractingEntity();
		/*<fim_suffix>
		if (!checkRequirements(attacker, victim))
			return;
		/*
		 * First we need to face the entity
		 */
		attacker.getUpdateFlags().faceEntity(victim.getIndex() + ((victim instanceof Player) ? 32768 : 0));
		
		/*
		 * Check if the attackers hit delay is at least 0 to prevent spam
		 * attacking
		 */
		if (attacker.getHitDelay() <= 0) {

			/*
			 * First we need to face the entity
	<fim_middle>","
		 * Check if all of the requirements are met, if not don't attack
		 */","
		 * Check if the attacker is in combat
		 */"
"<fim_prefix>m
		 */
		if (attacker instanceof Player) {
			/*
			 * Creates a player instance of the attacker
			 */
			Player player = (Player) attacker;

			/*
			 * Checks if the victim is an npc so we can grab the calculations
			 */
			if (victim instanceof NPC) {
				/*
				 * Creates an npc instance of the victim so we don't have to
				 * cast NPC
				 */
				NPC npc = (NPC) victim;
				/*<fim_suffix>
				int randomAttack = ProtocolUtils.random(player
						.grabAttackBonus() + ProtocolUtils.random(10));
				int randomDefence = ProtocolUtils.random(npc.grabDefenceBonus()
						+ ProtocolUtils.random(5));
				if (randomAttack > randomDefence) {
					return ProtocolUtils.random(MeleeCalculations
							.calculateMeleeMaxHit(player, false));
				}
			} else if (victim instanceof Playe<fim_middle>","
				 * Checks if the players attack bonus is greater then the npcs
				 * defence bonus
				 */","
				 * Checks if the player is a player so we can grab the
				 * calculations
				 */"
"<fim_prefix>alse;
		}
		return true;
	}

	@Override
	public int distanceRequired(Mobile attacker) {
		return 2;
	}

	@Override
	public int calculateDamage(Mobile attacker, Mobile victim) {
		/*
		 * Calculates the damage a player can deal to the victim
		 */
		if (attacker instanceof Player) {
			/*
			 * Creates a player instance of the attacker
			 */
			Player player = (Player) attacker;

			/*<fim_suffix>
			if (victim instanceof NPC) {
				/*
				 * Creates an npc instance of the victim so we don't have to
				 * cast NPC
				 */
				NPC npc = (NPC) victim;
				/*
				 * Checks if the players attack bonus is greater then the npcs
				 * defence bonus
				 */
				int randomAttack = ProtocolUtils.random(player
						.grabAttackBonus() + ProtocolUtils.random(10));
				int randomDefence =<fim_middle>","
			 * Checks if the victim is an npc so we can grab the calculations
			 */","
			 * Checks if the players attack bonus is greater then the npcs
			 * defence"
"<fim_prefix>acker;
				if (!player.getEquipment().isUsingSpecial()) {
					DelayedHit.submit(attacker, victim, new Hit(damage,
							damage > 0 ? 1 : 0, 1, 1));
				} else {
					Server.getEventManager().dispatchEvent(new SpecialAttackEvent(player));
				}
			} else if (attacker instanceof NPC) {
				DelayedHit.submit(attacker, victim, new Hit(damage,
						damage > 0 ? 1 : 0, 1, 1));
			}

			/*<fim_suffix>
			if (attacker instanceof Player)
				addExperience(attacker, damage);

			/*
			 * Now we reset the attackers hit delay so they cant spam attack
			 */
			victim.setCombatDelay(System.currentTimeMillis());
			attacker.setHitDelay(attacker.grabAttackSpeed());
		}
	}

	@Override
	public boolean checkRequirements(Mobile attacker, Mobile victim) {
		/*
		 * Check if the victim is null o<fim_middle>","
			 * Adds experience to the player
			 */","
			 * Now we reset the attackers hit delay so"
"<fim_prefix>	public int calculateDamage(Mobile attacker, Mobile victim) {
		/*
		 * Calculates the damage a player can deal to the victim
		 */
		if (attacker instanceof Player) {
			/*
			 * Creates a player instance of the attacker
			 */
			Player player = (Player) attacker;

			/*
			 * Checks if the victim is an npc so we can grab the calculations
			 */
			if (victim instanceof NPC) {
				/*<fim_suffix>
				NPC npc = (NPC) victim;
				/*
				 * Checks if the players attack bonus is greater then the npcs
				 * defence bonus
				 */
				int randomAttack = ProtocolUtils.random(player
						.grabAttackBonus() + ProtocolUtils.random(10));
				int randomDefence = ProtocolUtils.random(npc.grabDefenceBonus()
						+ ProtocolUtils.random(5));
				if (randomAttack > randomDefence) {
					retu<fim_middle>","
				 * Creates an npc instance of the victim so we don't have to
				 * cast NPC
				 */","
				 * Creates a npc instance of the victim
				 */"
"<fim_prefix>Check if the attacker is within the defined distance requirements
		 * before attacking
		 */
		if (!attacker.getLocation().withinDistance(victim.getLocation(),
				distanceRequired(attacker))) {
			return false;
		}
		return true;
	}

	@Override
	public int distanceRequired(Mobile attacker) {
		return 2;
	}

	@Override
	public int calculateDamage(Mobile attacker, Mobile victim) {
		/*<fim_suffix>
		if (attacker instanceof Player) {
			/*
			 * Creates a player instance of the attacker
			 */
			Player player = (Player) attacker;

			/*
			 * Checks if the victim is an npc so we can grab the calculations
			 */
			if (victim instanceof NPC) {
				/*
				 * Creates an npc instance of the victim so we don't have to
				 * cast NPC
				 */
				NPC npc = (NPC) victim;
				/*
				 *<fim_middle>","
		 * Calculates the damage a player can deal to the victim
		 */","*
		 * Checks if the attacker is a player so we can grab the"
"<fim_prefix>me.entity.mobile.Mobile.WelfareStatus;
import org.solace.game.entity.mobile.npc.NPC;
import org.solace.game.entity.mobile.player.Player;
import org.solace.util.ProtocolUtils;

/**
 * Represents the melee combat style
 * @author Arithium
 *
 */
public class Melee extends Combat {

	/**
	 * Creates an instance of the melee class
	 */
	private static final Melee melee = new Melee();

	/**<fim_suffix>
	public static final Melee getSingleton() {
		return melee;
	}

	// TODO: Damage mapping to get the attacker who dealt the most damage

	@Override
	public void handle(Mobile attacker) {
		/*
		 * First we create an instance of the victim
		 */
		Mobile victim = (Mobile) attacker.getInteractingEntity();
		/*
		 * Check if all of the requirements are met, if not don't attack
		 */
		if <fim_middle>","
	 * Returns the singleton of the melee class
	 * 
	 * @return
	 */","
	 * Returns the singleton instance of the melee class
	 * @return The singleton instance of the"
"<fim_prefix>import org.solace.game.content.combat.impl.DelayedHit;
import org.solace.game.content.combat.impl.Hit;
import org.solace.game.entity.Animation;
import org.solace.game.entity.mobile.Mobile;
import org.solace.game.entity.mobile.Mobile.WelfareStatus;
import org.solace.game.entity.mobile.npc.NPC;
import org.solace.game.entity.mobile.player.Player;
import org.solace.util.ProtocolUtils;

/**<fim_suffix>
public class Melee extends Combat {

	/**
	 * Creates an instance of the melee class
	 */
	private static final Melee melee = new Melee();

	/**
	 * Returns the singleton of the melee class
	 * 
	 * @return
	 */
	public static final Melee getSingleton() {
		return melee;
	}

	// TODO: Damage mapping to get the attacker who dealt the most damage

	@Override
	public void handle(Mobile a<fim_middle>","
 * Represents the melee combat style
 * @author Arithium
 *
 */","
 * The melee combat class
 * 
 * @author <NAME>
 */"
"<fim_prefix>melee;
	}

	// TODO: Damage mapping to get the attacker who dealt the most damage

	@Override
	public void handle(Mobile attacker) {
		/*
		 * First we create an instance of the victim
		 */
		Mobile victim = (Mobile) attacker.getInteractingEntity();
		/*
		 * Check if all of the requirements are met, if not don't attack
		 */
		if (!checkRequirements(attacker, victim))
			return;
		/*<fim_suffix>
		attacker.getUpdateFlags().faceEntity(victim.getIndex() + ((victim instanceof Player) ? 32768 : 0));
		
		/*
		 * Check if the attackers hit delay is at least 0 to prevent spam
		 * attacking
		 */
		if (attacker.getHitDelay() <= 0) {

			/*
			 * First we need to face the entity
			 */
			attacker.getUpdateFlags().faceEntity(victim.getIndex() + ((victim instanceof Player) ? 32768 : <fim_middle>","
		 * First we need to face the entity
		 */","
		 * Check if the attackers hit delay is at least 0"
"<fim_prefix>(attacker.getHitDelay() <= 0) {

			/*
			 * First we need to face the entity
			 */
			attacker.getUpdateFlags().faceEntity(victim.getIndex() + ((victim instanceof Player) ? 32768 : 0));

			// attacker.getUpdateFlags().faceEntity();
			/*
			 * Attack animation then block animation before damage
			 */
			attacker.setAnimation(Animation.create(attacker.grabAttackAnimation()));

			/*<fim_suffix>
			if (victim.getHitDelay() < 2
					&& (victim.getMobilityManager().walkingDirection() < 1 || victim
							.getMobilityManager().runningDirection() < 1)) {
				victim.setAnimation(Animation.create(victim.getBlockAnimation()));
			}

			/*
			 * Now we send the delayed hit based on the weapons attack speed by
			 * default we'll be using 1 since we don't have weapon definitions
			 *<fim_middle>","
			 * Now victims block animation
			 */","
			 * We need to check if the victim"
"<fim_prefix>dds experience to the player
			 */
			if (attacker instanceof Player)
				addExperience(attacker, damage);

			/*
			 * Now we reset the attackers hit delay so they cant spam attack
			 */
			victim.setCombatDelay(System.currentTimeMillis());
			attacker.setHitDelay(attacker.grabAttackSpeed());
		}
	}

	@Override
	public boolean checkRequirements(Mobile attacker, Mobile victim) {
		/*<fim_suffix>
		if (victim == null || attacker.getStatus() == WelfareStatus.DEAD
				|| victim.getStatus() == WelfareStatus.DEAD) {
			resetCombat(attacker);
			return false;
		}

		if (!attacker.isInCombat()) {
			// no need to attack as were not in combat, prevents attacking while
			// following
			return false;
		}
		/*
		 * Check if the attacker is within the defined distance requirements
		 *<fim_middle>","
		 * Check if the victim is null or dead, or if the attacker is dead
		 */","*
		 * Check if the victim is dead"
"<fim_prefix>ndomAttack = ProtocolUtils.random(player
						.grabAttackBonus() + ProtocolUtils.random(10));
				int randomDefence = ProtocolUtils.random(npc.grabDefenceBonus()
						+ ProtocolUtils.random(5));
				if (randomAttack > randomDefence) {
					return ProtocolUtils.random(MeleeCalculations
							.calculateMeleeMaxHit(player, false));
				}
			} else if (victim instanceof Player) {
				/*<fim_suffix>
				Player otherPlayer = (Player) victim;

				if (((Math.random() * player.grabAttackBonus()) + Math.random() * 5) > ((Math
						.random() * otherPlayer.grabDefenceBonus()) + Math
						.random() * 5)) {
					return ProtocolUtils.random(MeleeCalculations
							.calculateMeleeMaxHit(player, false));
				}
			}
		}
		/*
		 * If none of the requirements are met, set the damage to 0
		<fim_middle>","
				 * Creates a player instance of the victim so we don't have to
				 * cast player
				 */","*
				 * If the victim is a player, check if the player is
				 * attacking first.
				"
"<fim_prefix>ance of the victim so we don't have to
				 * cast player
				 */
				Player otherPlayer = (Player) victim;

				if (((Math.random() * player.grabAttackBonus()) + Math.random() * 5) > ((Math
						.random() * otherPlayer.grabDefenceBonus()) + Math
						.random() * 5)) {
					return ProtocolUtils.random(MeleeCalculations
							.calculateMeleeMaxHit(player, false));
				}
			}
		}
		/*<fim_suffix>
		return 0;
	}

}
<fim_middle>","
		 * If none of the requirements are met, set the damage to 0
		 */","*
		 * If we get here, we have a random chance of hitting the victim
"
"<fim_prefix> + ((victim instanceof Player) ? 32768 : 0));
		
		/*
		 * Check if the attackers hit delay is at least 0 to prevent spam
		 * attacking
		 */
		if (attacker.getHitDelay() <= 0) {

			/*
			 * First we need to face the entity
			 */
			attacker.getUpdateFlags().faceEntity(victim.getIndex() + ((victim instanceof Player) ? 32768 : 0));

			// attacker.getUpdateFlags().faceEntity();
			/*<fim_suffix>
			attacker.setAnimation(Animation.create(attacker.grabAttackAnimation()));

			/*
			 * Now victims block animation
			 */
			if (victim.getHitDelay() < 2
					&& (victim.getMobilityManager().walkingDirection() < 1 || victim
							.getMobilityManager().runningDirection() < 1)) {
				victim.setAnimation(Animation.create(victim.getBlockAnimation()));
			}

			/*
			 * Now we send the <fim_middle>","
			 * Attack animation then block animation before damage
			 */","*
			 * Now we send the attack animation
			 */"
"<fim_prefix>*
		 * Check if the victim is null or dead, or if the attacker is dead
		 */
		if (victim == null || attacker.getStatus() == WelfareStatus.DEAD
				|| victim.getStatus() == WelfareStatus.DEAD) {
			resetCombat(attacker);
			return false;
		}

		if (!attacker.isInCombat()) {
			// no need to attack as were not in combat, prevents attacking while
			// following
			return false;
		}
		/*<fim_suffix>
		if (!attacker.getLocation().withinDistance(victim.getLocation(),
				distanceRequired(attacker))) {
			return false;
		}
		return true;
	}

	@Override
	public int distanceRequired(Mobile attacker) {
		return 2;
	}

	@Override
	public int calculateDamage(Mobile attacker, Mobile victim) {
		/*
		 * Calculates the damage a player can deal to the victim
		 */
		if (attacker instanceof P<fim_middle>","
		 * Check if the attacker is within the defined distance requirements
		 * before attacking
		 */","*
		 * Check if the victim is within range of the attacker"
"<fim_prefix>/*<fim_suffix>
package org.solace.game.content.combat.melee;

import org.solace.Server;
import org.solace.event.events.SpecialAttackEvent;
import org.solace.game.content.combat.Combat;
import org.solace.game.content.combat.PrayerHandler.Prayer;
import org.solace.game.content.combat.impl.DelayedHit;
import org.solace.game.content.combat.impl.Hit;
import org.solace.game.entity.Animation;
import org.so<fim_middle>","
 * This file is part of Solace Framework.
 * Solace is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Solace is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Solace. If not, see <http://www.gnu.org/licenses/>.
 *
 */","*
 * @author <NAME>
 */"
"<fim_prefix>elee extends Combat {

	/**
	 * Creates an instance of the melee class
	 */
	private static final Melee melee = new Melee();

	/**
	 * Returns the singleton of the melee class
	 * 
	 * @return
	 */
	public static final Melee getSingleton() {
		return melee;
	}

	// TODO: Damage mapping to get the attacker who dealt the most damage

	@Override
	public void handle(Mobile attacker) {
		/*<fim_suffix>
		Mobile victim = (Mobile) attacker.getInteractingEntity();
		/*
		 * Check if all of the requirements are met, if not don't attack
		 */
		if (!checkRequirements(attacker, victim))
			return;
		/*
		 * First we need to face the entity
		 */
		attacker.getUpdateFlags().faceEntity(victim.getIndex() + ((victim instanceof Player) ? 32768 : 0));
		
		/*
		 * Check if the attackers hit del<fim_middle>","
		 * First we create an instance of the victim
		 */","*
		 * Check if all of the requirements are met, if"
"<fim_prefix>on before damage
			 */
			attacker.setAnimation(Animation.create(attacker.grabAttackAnimation()));

			/*
			 * Now victims block animation
			 */
			if (victim.getHitDelay() < 2
					&& (victim.getMobilityManager().walkingDirection() < 1 || victim
							.getMobilityManager().runningDirection() < 1)) {
				victim.setAnimation(Animation.create(victim.getBlockAnimation()));
			}

			/*<fim_suffix>
			int damage = calculateDamage(attacker, victim);
			
			if (victim instanceof Player) {
				Player otherPlayer = (Player) victim;
				if (otherPlayer.isActivePrayer(Prayer.PROTECT_FROM_MELEE)) {
					damage = (int) (damage * 0.60);
				}
			}

			if (attacker instanceof Player) {
				Player player = (Player) attacker;
				if (!player.getEquipment().isUsingSpecial()) {
					DelayedHi<fim_middle>","
			 * Now we send the delayed hit based on the weapons attack speed by
			 * default we'll be using 1 since we don't have weapon definitions
			 * 
			 * First we calculate the damage we will deal to the victim, then
			 * create a DelayedHit instance which sends the delayed damage to
			 * the victim
			 * 
			 * TODO: special attack checking
			 */","
			 * Calculate damage"
"<fim_prefix>ements are met, if not don't attack
		 */
		if (!checkRequirements(attacker, victim))
			return;
		/*
		 * First we need to face the entity
		 */
		attacker.getUpdateFlags().faceEntity(victim.getIndex() + ((victim instanceof Player) ? 32768 : 0));
		
		/*
		 * Check if the attackers hit delay is at least 0 to prevent spam
		 * attacking
		 */
		if (attacker.getHitDelay() <= 0) {

			/*<fim_suffix>
			attacker.getUpdateFlags().faceEntity(victim.getIndex() + ((victim instanceof Player) ? 32768 : 0));

			// attacker.getUpdateFlags().faceEntity();
			/*
			 * Attack animation then block animation before damage
			 */
			attacker.setAnimation(Animation.create(attacker.grabAttackAnimation()));

			/*
			 * Now victims block animation
			 */
			if (victim.getHitDelay() < 2
					&& (v<fim_middle>","
			 * First we need to face the entity
			 */","
			 * Attack animation then block animation before damage
			 */"
"<fim_prefix>inecraftforge.fluids.FluidStack;

public class FluidHelper {

    public static void init() {
        RecipeRegistryProxy.addRecipe(Items.WATER_BUCKET, Items.BUCKET, new FluidStack(FluidRegistry.WATER, Fluid.BUCKET_VOLUME));
        RecipeRegistryProxy.addRecipe(Items.LAVA_BUCKET, Items.BUCKET, new FluidStack(FluidRegistry.LAVA, Fluid.BUCKET_VOLUME));
        initMilk();
    }

    /**<fim_suffix>
    private static void initMilk() {

        if (!FluidRegistry.isFluidRegistered(""milk"")) {
            if (FluidRegistry.registerFluid(new Fluid(""ee_milk"", ResourceLocationHelper.getResourceLocation(""milk_still""), ResourceLocationHelper.getResourceLocation(""milk_flow"")))) {
                RecipeRegistryProxy.addRecipe(Items.MILK_BUCKET, Items.BUCKET, new FluidStack(FluidRegistry.g<fim_middle>","
     *  An awkward fix for the case where milk may not be registered as a liquid but we want to assign
     *  an energy value to milk (the liquid).
     *  <p>TL-DR; we substitute a dummy liquid and assign value/recipes to it
     */","
     * Init milk fluid
     */"
"<fim_prefix>
/**<fim_suffix>
package org.cytoscape.session;
<fim_middle>","
 * This package contains the interfaces and classes necessary to capturing,
 * storing, and retrieving the state of a Cytoscape session.  The package
 * contains additional utility interfaces relating to actitivities 
 * relevant to the session.
 */","
 *
 * @author churas
 */"
"<fim_prefix>ort it.eg.sloth.form.fields.field.base.InputField;
import it.eg.sloth.framework.common.base.BaseFunction;
import it.eg.sloth.framework.common.base.StringUtil;
import it.eg.sloth.framework.common.casting.DataTypes;
import it.eg.sloth.jaxb.form.ForceCase;
import lombok.Getter;
import lombok.Setter;
import lombok.experimental.SuperBuilder;
import org.apache.commons.lang3.StringUtils;

/**<fim_suffix>
@Getter
@Setter
@SuperBuilder(toBuilder = true)
public class Input<T> extends InputField<T> {

    private ForceCase forceCase;
    private Integer maxLength;

    @Override
    public void setData(String data) {
        if (BaseFunction.in(getForceCase(), ForceCase.TRIM, ForceCase.INIT_CAP_TRIM, ForceCase.UPPER_TRIM, ForceCase.LOWER_TRIM)) {
            data = StringUtil.trim(data);
<fim_middle>","
 * Project: sloth-framework
 * Copyright (C) 2019-2025 Enrico Grillini
 * <p>
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * <p>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * <p>
 * You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * <p>
 *
 * @author Enrico Grillini
 */","
 * <code>Input</code> is a field that can be used to input text.
 *
 * @param <T> the type of the field
 */"
"<fim_prefix>/*<fim_suffix>

package mclachlan.maze.stat.condition;

import mclachlan.maze.stat.StatModifier;
import mclachlan.maze.stat.Stats;
import mclachlan.maze.stat.UnifiedActor;
import mclachlan.maze.stat.combat.AttackAction;
import mclachlan.maze.stat.combat.CombatAction;
import mclachlan.maze.stat.combat.SpellAction;
import mclachlan.maze.stat.magic.MagicSys;
import mclachlan.maze.stat.magic.Spell;

/**<fim_middle>","
 * Copyright (c) 2011 Alan McLachlan
 *
 * This file is part of Escape From The Maze.
 *
 * Escape From The Maze is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Created by mclachlan on 3/29/16.
 */"
"<fim_prefix>/**<fim_suffix>
package org.jbundle.main.calendar.screen;

import java.util.*;

import org.jbundle.base.db.*;
import org.jbundle.thin.base.util.*;
import org.jbundle.thin.base.db.*;
import org.jbundle.base.db.event.*;
import org.jbundle.base.db.filter.*;
import org.jbundle.base.field.*;
import org.jbundle.base.field.convert.*;
import org.jbundle.base.field.event.*;
import org.jbundle.base.screen.mode<fim_middle>","
 * @(#)AnnivMasterScreen.
 * Copyright Â© 2013 jbundle.org. All rights reserved.
 * GPL3 Open Source Software License.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>per.init(record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties);
    }
    /**
     * Override this to open the main file.
     * <p />You should pass this record owner to the new main file (ie., new MyNewTable(thisRecordOwner)).
     * @return The new record.
     */
    public Record openMainRecord()
    {
        return new AnnivMaster(this);
    }
    /**<fim_suffix>
    public void openOtherRecords()
    {
        super.openOtherRecords();
        new CalendarControl(this);
    }
    /**
     * Add all the screen listeners.
     */
    public void addListeners()
    {
        super.addListeners();
        this.getMainRecord().getField(AnnivMaster.CALENDAR_CATEGORY_ID).addListener(new InitFieldHandler(this.getRecord(CalendarControl.CALENDAR_CONTRO<fim_middle>","
     * Override this to open the other files in the query.
     */","
     * Override this to open the other records.
     */"
"<fim_prefix>rt org.jbundle.base.model.*;
import org.jbundle.base.util.*;
import org.jbundle.model.*;
import org.jbundle.model.db.*;
import org.jbundle.model.screen.*;
import org.jbundle.main.calendar.db.*;

/**
 *  AnnivMasterScreen - .
 */
public class AnnivMasterScreen extends Screen
{
    /**
     * Default constructor.
     */
    public AnnivMasterScreen()
    {
        super();
    }
    /**<fim_suffix>
    public AnnivMasterScreen(Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map<String,Object> properties)
    {
        this();
        this.init(record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties);
    }
    /**
     * Initialize class fields.
     */
    public void init(Record record<fim_middle>","
     * Constructor.
     * @param record The main record for this screen.
     * @param itsLocation The location of this component within the parent.
     * @param parentScreen The parent screen.
     * @param fieldConverter The field this screen field is linked to.
     * @param iDisplayFieldDesc Do I display the field desc?
     * @param properties Addition properties to pass to the screen.
     */","
     * Constructor.
     */"
"<fim_prefix>field.event.*;
import org.jbundle.base.screen.model.*;
import org.jbundle.base.screen.model.util.*;
import org.jbundle.base.model.*;
import org.jbundle.base.util.*;
import org.jbundle.model.*;
import org.jbundle.model.db.*;
import org.jbundle.model.screen.*;
import org.jbundle.main.calendar.db.*;

/**
 *  AnnivMasterScreen - .
 */
public class AnnivMasterScreen extends Screen
{
    /**<fim_suffix>
    public AnnivMasterScreen()
    {
        super();
    }
    /**
     * Constructor.
     * @param record The main record for this screen.
     * @param itsLocation The location of this component within the parent.
     * @param parentScreen The parent screen.
     * @param fieldConverter The field this screen field is linked to.
     * @param iDisplayFieldDesc Do I display the fie<fim_middle>","
     * Default constructor.
     */","
     * Constructor.
     */"
"<fim_prefix>wner to the new main file (ie., new MyNewTable(thisRecordOwner)).
     * @return The new record.
     */
    public Record openMainRecord()
    {
        return new AnnivMaster(this);
    }
    /**
     * Override this to open the other files in the query.
     */
    public void openOtherRecords()
    {
        super.openOtherRecords();
        new CalendarControl(this);
    }
    /**<fim_suffix>
    public void addListeners()
    {
        super.addListeners();
        this.getMainRecord().getField(AnnivMaster.CALENDAR_CATEGORY_ID).addListener(new InitFieldHandler(this.getRecord(CalendarControl.CALENDAR_CONTROL_FILE).getField(CalendarControl.ANNIVERSARY_CATEGORY_ID)));
    }

}
<fim_middle>","
     * Add all the screen listeners.
     */","
     * Add listeners to the fields.
     */"
"<fim_prefix>ldConverter, iDisplayFieldDesc, properties);
    }
    /**
     * Initialize class fields.
     */
    public void init(Record record, ScreenLocation itsLocation, BasePanel parentScreen, Converter fieldConverter, int iDisplayFieldDesc, Map<String,Object> properties)
    {
        super.init(record, itsLocation, parentScreen, fieldConverter, iDisplayFieldDesc, properties);
    }
    /**<fim_suffix>
    public Record openMainRecord()
    {
        return new AnnivMaster(this);
    }
    /**
     * Override this to open the other files in the query.
     */
    public void openOtherRecords()
    {
        super.openOtherRecords();
        new CalendarControl(this);
    }
    /**
     * Add all the screen listeners.
     */
    public void addListeners()
    {
        super.addList<fim_middle>","
     * Override this to open the main file.
     * <p />You should pass this record owner to the new main file (ie., new MyNewTable(thisRecordOwner)).
     * @return The new record.
     */","
     * Override this to open the main record.
     */"
"<fim_prefix>o.touret.bookstore.spring.number.generated.dto.BookNumbersDto;
import info.touret.bookstore.spring.number.service.BookNumbersService;
import io.micrometer.core.annotation.Timed;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RestController;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

/**<fim_suffix>
@Timed(value = ""numberController"")
@RestController
public class BookNumbersController implements IsbnsApi {

    private final BookNumbersService bookNumbersService;

    public BookNumbersController(BookNumbersService bookNumbersService) {
        this.bookNumbersService = bookNumbersService;
    }

    /**
     * Gets the ISBN numbers for a given book. If there is a timeout calling <fim_middle>","
 * Numbers API spring controller
 * the time to respond is monitored using <code>@Timed</code> annotation
 */","
 * REST controller for book numbers.
 */"
"<fim_prefix>r
 * the time to respond is monitored using <code>@Timed</code> annotation
 */
@Timed(value = ""numberController"")
@RestController
public class BookNumbersController implements IsbnsApi {

    private final BookNumbersService bookNumbersService;

    public BookNumbersController(BookNumbersService bookNumbersService) {
        this.bookNumbersService = bookNumbersService;
    }

    /**<fim_suffix>

    @Override
    @SuppressWarnings(""java:S2142"")
    public ResponseEntity<BookNumbersDto> generateBookNumbers() {
        try {
            return ResponseEntity.ok(bookNumbersService.createBookNumbersAsync().get());
        } catch (InterruptedException | ExecutionException e) {
            throw new ISBNExecutionException(e);
        }
    }


}
<fim_middle>","
     * Gets the ISBN numbers for a given book. If there is a timeout calling {@link #bookNumbersService}, the method {@link BookNumbersService#generateBookNumbersFallBack(TimeoutException)} is called
     * The timeout mechanism is specified in the <code>application.yml</code>. You can check the <code>book-numbers</code> timeout instance out.
     *
     * @return The ISBN numbers
     * @see BookNumbersService#generateBookNumbersFallBack(TimeoutException)
     * @see BookNumbersService#createBookNumbersAsync()
     */","
     * {@code GET  /book-numbers} : get all the bookNumbers.
     *
     * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of bookNumbers in body.
     */"
"<fim_prefix>***********************************************************************/
package org.eclipse.perfmsr.core;

/**
 * Take snapshots of the various performance counters.
 * ************* This is just a stub of the real interface to get org.eclipse.jem.util 
 *               to compile. It is not usable by itself. ****************************
 */
public interface IPerformanceMonitor
{
	/**<fim_suffix>
	interface Types
	{
		/** 
		 * 1 - Write out the performance counters from the operating system. These
		 * include working set, peak working set, elapsed time, user time, and 
		 * kernel time.
		 */
		int OperatingSystemCounters		= 1;
		
		/**
		 * 2 - Write out the global performance info. This includes things like the total
		 * committed memory for the entire system.
		 * 
		 * <fim_middle>","
	 * These constants control how much information is gathered for a particular snapshot.
	 * They are or'ed together and passed into the snapshot method.  
	 */","
	 * The types of performance counters to take snapshots of.
	 */"
"<fim_prefix>t GlobalSystemCounters		= 2;
		
		/**
		 * 4 - Write out the size of the Java Heap.
		 */
		int JavaHeapSize				= 4;

		/**
		 * 8 - Write out how much of the Java heap is being used. This calls the 
		 * garbage collector so it may skew timing results.
		 */
		int JavaHeapUsed				= 8;
		
		/**
		 * 16 - The plugin startup and size information.
		 */
		int PluginInfo					= 16;
		
		/**<fim_suffix>
		int All							= 0xffff;	
	}
	
	/**
	 * Add some more ""extra"" variations. 
	 * 
	 * The variations that are in effect are made up of these extra variations plus any variations
	 * that may have been set with the setVar() method.
	 * 
	 * @param varList a comma separated list of variations
	 */
	public void addVarAppend(String varList);
	
	/**
	 * Set the driver name. 
	 * 
	 * @param<fim_middle>", 0xffff - Everything. */,"
		 * 32 - The"
"<fim_prefix> may have been set with the setVar() method.
	 * 
	 * @param varList a comma separated list of variations
	 */
	public void addVarAppend(String varList);
	
	/**
	 * Set the driver name. 
	 * 
	 * @param driver a label that identifies the driver that is being tested. If it is a WSAD
	 * driver, this will usually be set by the extension.
	 */
	public void setDriver(String driver);
	
	/**<fim_suffix>
	public void setLogFile(String logFile);
	
	/**
	 * Set the performance monitor to be on or off. If it is off then most of the other 
	 * operations will no-op.
	 * 
	 * The default is for the performance monitor to be off unless it's special environment variable is set. 
	 * When called from the UI, the UI should call this to make sure that it is on.
	 */
	public void setIsOn(boolean<fim_middle>","
	 * Set the location of the performance measurement file, that is the place where
	 * the measurements are stored.
	 * 
	 * @param logFile the file name of where the log should be written. Usually this is fully qualified
	 * path name. For example ""x:\logs\timer.xml"".
	 */","
	 * Set the log file name. 
	 * 
	 * @param logFile the name of the log file."
"<fim_prefix> the extension.
	 */
	public void setDriver(String driver);
	
	/**
	 * Set the location of the performance measurement file, that is the place where
	 * the measurements are stored.
	 * 
	 * @param logFile the file name of where the log should be written. Usually this is fully qualified
	 * path name. For example ""x:\logs\timer.xml"".
	 */
	public void setLogFile(String logFile);
	
	/**<fim_suffix>
	public void setIsOn(boolean isOn);
	
	/**
	 * Sets the test case number for this measurement run.
	 *  
	 * @param testd test case identifier
	 */
	public void setTestd(int testd);
	
	/**
	 * Sets the test case name. If will cause a new test case to be created if it does not already exist.
	 * 
	 * @param testName a simple (short) test case name. In the case of JUnit test cases, it w<fim_middle>","
	 * Set the performance monitor to be on or off. If it is off then most of the other 
	 * operations will no-op.
	 * 
	 * The default is for the performance monitor to be off unless it's special environment variable is set. 
	 * When called from the UI, the UI should call this to make sure that it is on.
	 */","
	 * Set the name of the test case.
	 * 
	 * @param testName the name of the test case.
	 */"
"<fim_prefix> test cases, it would usually 
	 * be the JUnit name.
	 */
	public void setTestName(String testName);
	
	/**
	 * Set the variations that are in effect.
	 * 
	 * @param var a comma delimited string of variation numbers
	 */
	public void setVar(String var);
	
	/**
	 * Set the upload host
	 * 
	 * @param host DNS name of the upload host
	 */
	public void setUploadHost(String host);
	
	/**<fim_suffix>
	public void setUploadPort(int port);
	
	/**
	 * Set the upload userid
	 * 
	 * @param userid
	 */
	public void setUploadUserid(String userid);
	
	/**
	 * Take a snapshot of some default performance measurements.
	 * 
	 * @param step this identifies the step that the snapshot is for
	 */
	void snapshot(int step);
	
	/**
	 * Take a snapshot of the selected performance measurements.
	 *<fim_middle>","
	 * Set the upload port
	 * 
	 * @param port upload port
	 */","
	 * Set the upload port
	 * 
	 * @param port
	 */"
"<fim_prefix>size of the Java Heap.
		 */
		int JavaHeapSize				= 4;

		/**
		 * 8 - Write out how much of the Java heap is being used. This calls the 
		 * garbage collector so it may skew timing results.
		 */
		int JavaHeapUsed				= 8;
		
		/**
		 * 16 - The plugin startup and size information.
		 */
		int PluginInfo					= 16;
		
		/** 0xffff - Everything. */
		int All							= 0xffff;	
	}
	
	/**<fim_suffix>
	public void addVarAppend(String varList);
	
	/**
	 * Set the driver name. 
	 * 
	 * @param driver a label that identifies the driver that is being tested. If it is a WSAD
	 * driver, this will usually be set by the extension.
	 */
	public void setDriver(String driver);
	
	/**
	 * Set the location of the performance measurement file, that is the place where
	 * the measurements are st<fim_middle>","
	 * Add some more ""extra"" variations. 
	 * 
	 * The variations that are in effect are made up of these extra variations plus any variations
	 * that may have been set with the setVar() method.
	 * 
	 * @param varList a comma separated list of variations
	 */","
	 * Add a variable to the list of variables to be appended to the performance
	 * measurement file.
	 * 
	 * @param varList a string that contains the variable to be appended.
	 */"
"<fim_prefix>setLogFile(String logFile);
	
	/**
	 * Set the performance monitor to be on or off. If it is off then most of the other 
	 * operations will no-op.
	 * 
	 * The default is for the performance monitor to be off unless it's special environment variable is set. 
	 * When called from the UI, the UI should call this to make sure that it is on.
	 */
	public void setIsOn(boolean isOn);
	
	/**<fim_suffix>
	public void setTestd(int testd);
	
	/**
	 * Sets the test case name. If will cause a new test case to be created if it does not already exist.
	 * 
	 * @param testName a simple (short) test case name. In the case of JUnit test cases, it would usually 
	 * be the JUnit name.
	 */
	public void setTestName(String testName);
	
	/**
	 * Set the variations that are in effect.
	 * 
	 * @par<fim_middle>","
	 * Sets the test case number for this measurement run.
	 *  
	 * @param testd test case identifier
	 */","
	 * Set the test case description.
	 * 
	 * @param testDescription a simple (short) test"
"<fim_prefix>	/**
	 * Set the upload port
	 * 
	 * @param port upload port
	 */
	public void setUploadPort(int port);
	
	/**
	 * Set the upload userid
	 * 
	 * @param userid
	 */
	public void setUploadUserid(String userid);
	
	/**
	 * Take a snapshot of some default performance measurements.
	 * 
	 * @param step this identifies the step that the snapshot is for
	 */
	void snapshot(int step);
	
	/**<fim_suffix>
	void snapshot(int step, int types);
	
	/**
	 * Write the comment to the performance measurement file.
	 * 
	 * @param comment
	 */
	void writeComment(String comment);
	
	/**
	 * Upload the results to the server. This causes the file to be
	 * closed, and the monitor to be placed into the finished state.
	 * 
	 * This method can only be called if the uploadhost, uploadport and uploadu<fim_middle>","
	 * Take a snapshot of the selected performance measurements.
	 * 
	 * @param step this identifies the step that the snapshot is for
	 * 
	 * @param types This controls which measurements are selected. It is an or'd together
	 * list of the IPerformanceMonitor.Types constants.
	 * 
	 * @see IPerformanceMonitor.Types 
	 */","
	 * Take a snapshot of some default performance measurements.
	 * 
	 * @param step this identifies the step that the snapshot is for
	 * @param types the types of performance measurements to take
	 */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.perfmsr.core;

/**
 * Take snapshots of the various performance counters.
 * ************* This is just a stub of the real interface to get org.eclipse.jem.util 
 *               to compile. It is not usable by itself. ****************************
 */
public interface IPerformanceMonitor
{
	/**
	 * These constants control how much information is gathered for a part<fim_middle>","*****************************************************************************
 * Copyright (c) 2003, 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/","****************************************************************************
 * Copyright (c) 2004, 2010 IBM Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software"
"<fim_prefix>.
	 * 
	 * The default is for the performance monitor to be off unless it's special environment variable is set. 
	 * When called from the UI, the UI should call this to make sure that it is on.
	 */
	public void setIsOn(boolean isOn);
	
	/**
	 * Sets the test case number for this measurement run.
	 *  
	 * @param testd test case identifier
	 */
	public void setTestd(int testd);
	
	/**<fim_suffix>
	public void setTestName(String testName);
	
	/**
	 * Set the variations that are in effect.
	 * 
	 * @param var a comma delimited string of variation numbers
	 */
	public void setVar(String var);
	
	/**
	 * Set the upload host
	 * 
	 * @param host DNS name of the upload host
	 */
	public void setUploadHost(String host);
	
	/**
	 * Set the upload port
	 * 
	 * @param port upload port
<fim_middle>","
	 * Sets the test case name. If will cause a new test case to be created if it does not already exist.
	 * 
	 * @param testName a simple (short) test case name. In the case of JUnit test cases, it would usually 
	 * be the JUnit name.
	 */","
	 * Sets the test name for this measurement run.
	 * 
	 * @param testName test name
	 */"
"<fim_prefix>es things like the total
		 * committed memory for the entire system.
		 * 
		 * This function depends on the GetPerformanceInfo() function being available in
		 * the Windows psapi.dll. This is available in XP but is usually not available
		 * in Win/2000. If it is not available then this function throws an UnsupportedOperationException.
		 */
		int GlobalSystemCounters		= 2;
		
		/**<fim_suffix>
		int JavaHeapSize				= 4;

		/**
		 * 8 - Write out how much of the Java heap is being used. This calls the 
		 * garbage collector so it may skew timing results.
		 */
		int JavaHeapUsed				= 8;
		
		/**
		 * 16 - The plugin startup and size information.
		 */
		int PluginInfo					= 16;
		
		/** 0xffff - Everything. */
		int All							= 0xffff;	
	}
	
	/**
	 * Add some more ""extra"" v<fim_middle>","
		 * 4 - Write out the size of the Java Heap.
		 */","
		 * 1 - The number of threads in the process.
		 */"
"<fim_prefix>ent run.
	 *  
	 * @param testd test case identifier
	 */
	public void setTestd(int testd);
	
	/**
	 * Sets the test case name. If will cause a new test case to be created if it does not already exist.
	 * 
	 * @param testName a simple (short) test case name. In the case of JUnit test cases, it would usually 
	 * be the JUnit name.
	 */
	public void setTestName(String testName);
	
	/**<fim_suffix>
	public void setVar(String var);
	
	/**
	 * Set the upload host
	 * 
	 * @param host DNS name of the upload host
	 */
	public void setUploadHost(String host);
	
	/**
	 * Set the upload port
	 * 
	 * @param port upload port
	 */
	public void setUploadPort(int port);
	
	/**
	 * Set the upload userid
	 * 
	 * @param userid
	 */
	public void setUploadUserid(String userid);
	
	/**
	 * Take<fim_middle>","
	 * Set the variations that are in effect.
	 * 
	 * @param var a comma delimited string of variation numbers
	 */","
	 * Sets the test case description.
	 * 
	 * @param testDescription a description of"
"<fim_prefix>function depends on the GetPerformanceInfo() function being available in
		 * the Windows psapi.dll. This is available in XP but is usually not available
		 * in Win/2000. If it is not available then this function throws an UnsupportedOperationException.
		 */
		int GlobalSystemCounters		= 2;
		
		/**
		 * 4 - Write out the size of the Java Heap.
		 */
		int JavaHeapSize				= 4;

		/**<fim_suffix>
		int JavaHeapUsed				= 8;
		
		/**
		 * 16 - The plugin startup and size information.
		 */
		int PluginInfo					= 16;
		
		/** 0xffff - Everything. */
		int All							= 0xffff;	
	}
	
	/**
	 * Add some more ""extra"" variations. 
	 * 
	 * The variations that are in effect are made up of these extra variations plus any variations
	 * that may have been set with the setVar() method.
	 * <fim_middle>","
		 * 8 - Write out how much of the Java heap is being used. This calls the 
		 * garbage collector so it may skew timing results.
		 */","
		 * 8 - Write out the size of the Java Heap that is currently in use."
"<fim_prefix>If it is not available then this function throws an UnsupportedOperationException.
		 */
		int GlobalSystemCounters		= 2;
		
		/**
		 * 4 - Write out the size of the Java Heap.
		 */
		int JavaHeapSize				= 4;

		/**
		 * 8 - Write out how much of the Java heap is being used. This calls the 
		 * garbage collector so it may skew timing results.
		 */
		int JavaHeapUsed				= 8;
		
		/**<fim_suffix>
		int PluginInfo					= 16;
		
		/** 0xffff - Everything. */
		int All							= 0xffff;	
	}
	
	/**
	 * Add some more ""extra"" variations. 
	 * 
	 * The variations that are in effect are made up of these extra variations plus any variations
	 * that may have been set with the setVar() method.
	 * 
	 * @param varList a comma separated list of variations
	 */
	public void addVarAppend(Strin<fim_middle>","
		 * 16 - The plugin startup and size information.
		 */","
		 * 16 - Write out the plugin information."
"<fim_prefix>				= 16;
		
		/** 0xffff - Everything. */
		int All							= 0xffff;	
	}
	
	/**
	 * Add some more ""extra"" variations. 
	 * 
	 * The variations that are in effect are made up of these extra variations plus any variations
	 * that may have been set with the setVar() method.
	 * 
	 * @param varList a comma separated list of variations
	 */
	public void addVarAppend(String varList);
	
	/**<fim_suffix>
	public void setDriver(String driver);
	
	/**
	 * Set the location of the performance measurement file, that is the place where
	 * the measurements are stored.
	 * 
	 * @param logFile the file name of where the log should be written. Usually this is fully qualified
	 * path name. For example ""x:\logs\timer.xml"".
	 */
	public void setLogFile(String logFile);
	
	/**
	 * Set the perform<fim_middle>","
	 * Set the driver name. 
	 * 
	 * @param driver a label that identifies the driver that is being tested. If it is a WSAD
	 * driver, this will usually be set by the extension.
	 */","
	 * Add some more ""extra"" variations. 
	 * 
	 * The variations that are in effect are made up of these extra variations plus any variations
	 * that may have been set with the setVar() method.
	 *"
"<fim_prefix>ot(int step);
	
	/**
	 * Take a snapshot of the selected performance measurements.
	 * 
	 * @param step this identifies the step that the snapshot is for
	 * 
	 * @param types This controls which measurements are selected. It is an or'd together
	 * list of the IPerformanceMonitor.Types constants.
	 * 
	 * @see IPerformanceMonitor.Types 
	 */
	void snapshot(int step, int types);
	
	/**<fim_suffix>
	void writeComment(String comment);
	
	/**
	 * Upload the results to the server. This causes the file to be
	 * closed, and the monitor to be placed into the finished state.
	 * 
	 * This method can only be called if the uploadhost, uploadport and uploaduserid
	 * have been configured before hand.
	 * 
	 * @param description an optional description (it can be null)
	 * 
	 * @return so<fim_middle>","
	 * Write the comment to the performance measurement file.
	 * 
	 * @param comment
	 */","
	 * Write a comment to the file.
	 * 
	 * @param comment the comment to write
"
"<fim_prefix>at the snapshot is for
	 * 
	 * @param types This controls which measurements are selected. It is an or'd together
	 * list of the IPerformanceMonitor.Types constants.
	 * 
	 * @see IPerformanceMonitor.Types 
	 */
	void snapshot(int step, int types);
	
	/**
	 * Write the comment to the performance measurement file.
	 * 
	 * @param comment
	 */
	void writeComment(String comment);
	
	/**<fim_suffix>
	public Upload.Status upload(String description);
//	
//	/**
//	 * Upload the results to the server. This causes the file to be
//	 * closed, and the monitor to be placed into the finished state.
//	 * 
//	 * @param host the host name that the file is being sent to
//	 * @param port the port on the host
//	 * @param userid the userid that is doing the upload
//	 * @param description a<fim_middle>","
	 * Upload the results to the server. This causes the file to be
	 * closed, and the monitor to be placed into the finished state.
	 * 
	 * This method can only be called if the uploadhost, uploadport and uploaduserid
	 * have been configured before hand.
	 * 
	 * @param description an optional description (it can be null)
	 * 
	 * @return some status information
	 */","
	 * Write the comment to the performance measurement file.
	 * 
	 * @param comment
	 */"
"<fim_prefix>*
	 * Set the variations that are in effect.
	 * 
	 * @param var a comma delimited string of variation numbers
	 */
	public void setVar(String var);
	
	/**
	 * Set the upload host
	 * 
	 * @param host DNS name of the upload host
	 */
	public void setUploadHost(String host);
	
	/**
	 * Set the upload port
	 * 
	 * @param port upload port
	 */
	public void setUploadPort(int port);
	
	/**<fim_suffix>
	public void setUploadUserid(String userid);
	
	/**
	 * Take a snapshot of some default performance measurements.
	 * 
	 * @param step this identifies the step that the snapshot is for
	 */
	void snapshot(int step);
	
	/**
	 * Take a snapshot of the selected performance measurements.
	 * 
	 * @param step this identifies the step that the snapshot is for
	 * 
	 * @param types This cont<fim_middle>","
	 * Set the upload userid
	 * 
	 * @param userid
	 */","
	 * Set the upload userid
	 * 
	 * @param userid upload userid
"
"<fim_prefix>nying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.perfmsr.core;

/**<fim_suffix>
public interface IPerformanceMonitor
{
	/**
	 * These constants control how much information is gathered for a particular snapshot.
	 * They are or'ed together and passed into the snapshot method.  
	 */
	interface Types
	{
		/** 
		 * 1 - Write out the performance counters from the operating system. These
		 * include working set, peak working set, elapsed time, user time, and 
		 * <fim_middle>","
 * Take snapshots of the various performance counters.
 * ************* This is just a stub of the real interface to get org.eclipse.jem.util 
 *               to compile. It is not usable by itself. ****************************
 */","
 * This interface is used to gather performance information.
 * 
 * @author <NAME>
 * @author <NAME>
 */"
"<fim_prefix>bers
	 */
	public void setVar(String var);
	
	/**
	 * Set the upload host
	 * 
	 * @param host DNS name of the upload host
	 */
	public void setUploadHost(String host);
	
	/**
	 * Set the upload port
	 * 
	 * @param port upload port
	 */
	public void setUploadPort(int port);
	
	/**
	 * Set the upload userid
	 * 
	 * @param userid
	 */
	public void setUploadUserid(String userid);
	
	/**<fim_suffix>
	void snapshot(int step);
	
	/**
	 * Take a snapshot of the selected performance measurements.
	 * 
	 * @param step this identifies the step that the snapshot is for
	 * 
	 * @param types This controls which measurements are selected. It is an or'd together
	 * list of the IPerformanceMonitor.Types constants.
	 * 
	 * @see IPerformanceMonitor.Types 
	 */
	void snapshot(int step, int t<fim_middle>","
	 * Take a snapshot of some default performance measurements.
	 * 
	 * @param step this identifies the step that the snapshot is for
	 */","
	 * Set the upload password
	 * 
	 * @param password
	 */"
"<fim_prefix>s control how much information is gathered for a particular snapshot.
	 * They are or'ed together and passed into the snapshot method.  
	 */
	interface Types
	{
		/** 
		 * 1 - Write out the performance counters from the operating system. These
		 * include working set, peak working set, elapsed time, user time, and 
		 * kernel time.
		 */
		int OperatingSystemCounters		= 1;
		
		/**<fim_suffix>
		int GlobalSystemCounters		= 2;
		
		/**
		 * 4 - Write out the size of the Java Heap.
		 */
		int JavaHeapSize				= 4;

		/**
		 * 8 - Write out how much of the Java heap is being used. This calls the 
		 * garbage collector so it may skew timing results.
		 */
		int JavaHeapUsed				= 8;
		
		/**
		 * 16 - The plugin startup and size information.
		 */
		int PluginInfo					= 16;
		
<fim_middle>","
		 * 2 - Write out the global performance info. This includes things like the total
		 * committed memory for the entire system.
		 * 
		 * This function depends on the GetPerformanceInfo() function being available in
		 * the Windows psapi.dll. This is available in XP but is usually not available
		 * in Win/2000. If it is not available then this function throws an UnsupportedOperationException.
		 */","
		 * 2 - Write out the performance counters from the JVM. These include 
		 * the number of threads, the number of classes loaded, the number of 
		 * bytes of memory allocated, and the number of bytes of memory used.
		 */"
"<fim_prefix>is is just a stub of the real interface to get org.eclipse.jem.util 
 *               to compile. It is not usable by itself. ****************************
 */
public interface IPerformanceMonitor
{
	/**
	 * These constants control how much information is gathered for a particular snapshot.
	 * They are or'ed together and passed into the snapshot method.  
	 */
	interface Types
	{
		/**<fim_suffix>
		int OperatingSystemCounters		= 1;
		
		/**
		 * 2 - Write out the global performance info. This includes things like the total
		 * committed memory for the entire system.
		 * 
		 * This function depends on the GetPerformanceInfo() function being available in
		 * the Windows psapi.dll. This is available in XP but is usually not available
		 * in Win/2000. If it is not available th<fim_middle>"," 
		 * 1 - Write out the performance counters from the operating system. These
		 * include working set, peak working set, elapsed time, user time, and 
		 * kernel time.
		 */","
		 * 1 - Write out the CPU usage for the entire system.
		 * 
		 * This function depends on the GetPerformanceInfo() function being available in
		 * the Windows psapi.dll"
"<fim_prefix>ase to be created if it does not already exist.
	 * 
	 * @param testName a simple (short) test case name. In the case of JUnit test cases, it would usually 
	 * be the JUnit name.
	 */
	public void setTestName(String testName);
	
	/**
	 * Set the variations that are in effect.
	 * 
	 * @param var a comma delimited string of variation numbers
	 */
	public void setVar(String var);
	
	/**<fim_suffix>
	public void setUploadHost(String host);
	
	/**
	 * Set the upload port
	 * 
	 * @param port upload port
	 */
	public void setUploadPort(int port);
	
	/**
	 * Set the upload userid
	 * 
	 * @param userid
	 */
	public void setUploadUserid(String userid);
	
	/**
	 * Take a snapshot of some default performance measurements.
	 * 
	 * @param step this identifies the step that the snapshot <fim_middle>","
	 * Set the upload host
	 * 
	 * @param host DNS name of the upload host
	 */","
	 * Set the upload host
	 * 
	 * @param host upload host
	 */"
"<fim_prefix>/*<fim_suffix>

package com.emanuelef.remote_capture.model;

/* App state handling: ready -> starting -> running -> stopping -> ready  */
public enum AppState {
    ready,
    starting,
    running,
    stopping
}
<fim_middle>","
 * This file is part of PCAPdroid.
 *
 * PCAPdroid is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PCAPdroid is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PCAPdroid.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2020-21 - Emanuele Faranda
 */","*
 * Created by <NAME> on 12/05/2018.
 */"
"<fim_prefix> without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PCAPdroid.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2020-21 - Emanuele Faranda
 */

package com.emanuelef.remote_capture.model;

/*<fim_suffix>
public enum AppState {
    ready,
    starting,
    running,
    stopping
}
<fim_middle>", App state handling: ready -> starting -> running -> stopping -> ready  */,"*
 * @author emanuele.faranda@gmail."
"<fim_prefix>rivate Class<?> clazz; 
	
	/**
	 * @return the serviceName
	 */
	public String getServiceName() {
		return serviceName;
	}
	/**
	 * @param serviceName the serviceName to set
	 */
	public void setServiceName(String serviceName) {
		this.serviceName = serviceName;
	}
	/**
	 * @return the serviceDescription
	 */
	public String getServiceDescription() {
		return serviceDescription;
	}
	/**<fim_suffix>
	public void setServiceDescription(String serviceDescription) {
		this.serviceDescription = serviceDescription;
	}
	/**
	 * @return the methodDocs
	 */
	public List<ServiceDocMethodTO> getMethodDocs() {
		return methodDocs;
	}
	/**
	 * @param methodDocs the methodDocs to set
	 */
	public void setMethodDocs(List<ServiceDocMethodTO> methodDocs) {
		this.methodDocs = methodDocs;
	}

	pub<fim_middle>","
	 * @param serviceDescription the serviceDescription to set
	 */","
	 * @param serviceDescription the serviceDescription to set
	 */"
"<fim_prefix>ucturing Service Documentation. 
 * @author lee
 */
public class ServiceDocTO {
	private String serviceName;
	private String serviceDescription;

	private List<ServiceDocMethodTO> methodDocs = new ArrayList<ServiceDocMethodTO>();
	private String servicePath;
	private Class<?> clazz; 
	
	/**
	 * @return the serviceName
	 */
	public String getServiceName() {
		return serviceName;
	}
	/**<fim_suffix>
	public void setServiceName(String serviceName) {
		this.serviceName = serviceName;
	}
	/**
	 * @return the serviceDescription
	 */
	public String getServiceDescription() {
		return serviceDescription;
	}
	/**
	 * @param serviceDescription the serviceDescription to set
	 */
	public void setServiceDescription(String serviceDescription) {
		this.serviceDescription = serviceDescription;
<fim_middle>","
	 * @param serviceName the serviceName to set
	 */","
	 * @param serviceName the serviceName to set
	 */"
"<fim_prefix>package com.meadowhawk.homepi.util.model;

import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.Path;

/**<fim_suffix>
public class ServiceDocTO {
	private String serviceName;
	private String serviceDescription;

	private List<ServiceDocMethodTO> methodDocs = new ArrayList<ServiceDocMethodTO>();
	private String servicePath;
	private Class<?> clazz; 
	
	/**
	 * @return the serviceName
	 */
	public String getServiceName() {
		return serviceName;
	}
	/**
	 * @param serviceName the serviceName to set
	 */<fim_middle>","
 * Container for structuring Service Documentation. 
 * @author lee
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>cription
	 */
	public String getServiceDescription() {
		return serviceDescription;
	}
	/**
	 * @param serviceDescription the serviceDescription to set
	 */
	public void setServiceDescription(String serviceDescription) {
		this.serviceDescription = serviceDescription;
	}
	/**
	 * @return the methodDocs
	 */
	public List<ServiceDocMethodTO> getMethodDocs() {
		return methodDocs;
	}
	/**<fim_suffix>
	public void setMethodDocs(List<ServiceDocMethodTO> methodDocs) {
		this.methodDocs = methodDocs;
	}

	public void setServicePath(String path) {
		this.servicePath = path;
	}
	
	/**
	 * @return the servicePath
	 */
	public String getServicePath() {
		return servicePath;
	}
	
	public void setServiceClass(Class<?> servClass) {
		this.clazz = servClass;
	}

	public Class<?> getServiceCla<fim_middle>","
	 * @param methodDocs the methodDocs to set
	 */","
	 * @param methodDocs the methodDocs to set"
"<fim_prefix>/*<fim_suffix>
package to.etc.iocular;

/**
 * <p>An actual store of instantiated resources, part of a container tree. A container
 * has a <i>definition</i> determining the possible object wirings, and a <i>store</i>
 * containing the already instantiated objects.</p>
 *
 * <p>Instantiating a container is a very cheap operation. Objects defined for the container
 * are only retrieved/instantiated w<fim_middle>","
 * DomUI Java User Interface library
 * Copyright (c) 2010 by Frits Jalvingh, Itris B.V.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * See the ""sponsors"" file for a list of supporters.
 *
 * The latest version of DomUI and related code, support and documentation
 * can be found at http://www.domui.org/
 * The contact for the project is Frits Jalvingh <jal@etc.to>.
 */","*
 * <p>An actual store of instantiated resources, part of a container tree. A container
 * has a <i>definition</i> determining the possible object wirings, and a <i>store</i>
 * containing the already instantiated objects.</p>
 *
 * <p>Instantiating a container is a very cheap operation. Objects defined for the container
 * are only retrieved/instantiated whan they are needed.</p>  Added a comment about the container tree.  /*
 * Copyright (c) 2012 <NAME>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT"
"<fim_prefix> if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * See the ""sponsors"" file for a list of supporters.
 *
 * The latest version of DomUI and related code, support and documentation
 * can be found at http://www.domui.org/
 * The contact for the project is Frits Jalvingh <jal@etc.to>.
 */
package to.etc.iocular;

/**<fim_suffix>
public interface Container {
	void start();

	void destroy();

	/**
	 * Return the 'unnamed' object with the specified class from this container. If the
	 * object is not known this will return null!! This should not normally be used; use
	 * the 'getObject' call with the same signature instead: it throws an exception when
	 * the associated object is not found.
	 *
	 * @param theClas<fim_middle>","
 * <p>An actual store of instantiated resources, part of a container tree. A container
 * has a <i>definition</i> determining the possible object wirings, and a <i>store</i>
 * containing the already instantiated objects.</p>
 *
 * <p>Instantiating a container is a very cheap operation. Objects defined for the container
 * are only retrieved/instantiated when they are needed. The container itself is configured
 * with a predefined ContainerDefinition; the definition is typically created at application
 * startup and *is* expensive to create.</p>
 *
 * @author jal
 * Created on Mar 25, 2007
 */","
 * Interface for objects that can be managed by a container.
 *
 * @author Frits Jalvingh <jal@etc.to>
 * @version $Revision: 1.1 $ $Date: 2005/12/13 20:36:05 $
 */"
"<fim_prefix>
	 *
	 * @param theClass
	 * @return
	 */
	<T> T getObject(Class<T> theClass) throws Exception;

	<T> T findObject(String name, Class<T> theClass);

	<T> T getObject(String name, Class<T> theClass) throws Exception;

	/**
	 * Set a container parameter object. The parameter to set is inferred from the object type.
	 * @param instance
	 */
	void setParameter(final Object instance);

	/**<fim_suffix>
	void setParameter(final Class< ? > theClass, final Object instance);

	/**
	 * Sets the parameter with the specified name to the instance passed. This instance CAN
	 * be null, in which case null will be set into contructors and/or setters dependent on
	 * this parameter.
	 * @param name
	 * @param instance
	 */
	void setParameter(final String name, final Object instance);
}
<fim_middle>","
	 * Set the parameter as identified by it's target class to the specified instance. This instance CAN
	 * be null, in which case null will be set into contructors and/or setters dependent on this parameter.
	 * @param clz
	 * @param instance
	 */","
	 * Sets the parameter with the specified class to the instance passed. This instance CAN
	 * be null, in which case null will be set into contructors and/or setters dependent on
	 * this parameter.
	 * @param theClass
	 * @param instance
	 */"
"<fim_prefix>am instance
	 */
	void setParameter(final Object instance);

	/**
	 * Set the parameter as identified by it's target class to the specified instance. This instance CAN
	 * be null, in which case null will be set into contructors and/or setters dependent on this parameter.
	 * @param clz
	 * @param instance
	 */
	void setParameter(final Class< ? > theClass, final Object instance);

	/**<fim_suffix>
	void setParameter(final String name, final Object instance);
}
<fim_middle>","
	 * Sets the parameter with the specified name to the instance passed. This instance CAN
	 * be null, in which case null will be set into contructors and/or setters dependent on
	 * this parameter.
	 * @param name
	 * @param instance
	 */","
	 * Set the parameter as identified by it's name to the specified instance. This instance CAN
	 * be null, in which case null will be set into contructors and/or setters dependent on this parameter.
	 * @param name
	 * @param instance
	 */"
"<fim_prefix>

	/**
	 * Return the 'unnamed' object with the specified class from this container. If the
	 * object is not known this will return null!! This should not normally be used; use
	 * the 'getObject' call with the same signature instead: it throws an exception when
	 * the associated object is not found.
	 *
	 * @param theClass
	 * @return
	 */
	<T> T findObject(Class<T> theClass);

	/**<fim_suffix>
	<T> T getObject(Class<T> theClass) throws Exception;

	<T> T findObject(String name, Class<T> theClass);

	<T> T getObject(String name, Class<T> theClass) throws Exception;

	/**
	 * Set a container parameter object. The parameter to set is inferred from the object type.
	 * @param instance
	 */
	void setParameter(final Object instance);

	/**
	 * Set the parameter as identified by i<fim_middle>","
	 * Return the 'unnamed' object with the specified class from this container. If the
	 * object is not known this will throw a IocNotFoundException.
	 *
	 * @param theClass
	 * @return
	 */",
"<fim_prefix>> theClass);

	/**
	 * Return the 'unnamed' object with the specified class from this container. If the
	 * object is not known this will throw a IocNotFoundException.
	 *
	 * @param theClass
	 * @return
	 */
	<T> T getObject(Class<T> theClass) throws Exception;

	<T> T findObject(String name, Class<T> theClass);

	<T> T getObject(String name, Class<T> theClass) throws Exception;

	/**<fim_suffix>
	void setParameter(final Object instance);

	/**
	 * Set the parameter as identified by it's target class to the specified instance. This instance CAN
	 * be null, in which case null will be set into contructors and/or setters dependent on this parameter.
	 * @param clz
	 * @param instance
	 */
	void setParameter(final Class< ? > theClass, final Object instance);

	/**
	 * Sets the pa<fim_middle>","
	 * Set a container parameter object. The parameter to set is inferred from the object type.
	 * @param instance
	 */","
	 * Return the 'unnamed' object with the specified class from this container. If the
	 * object is not known this will throw"
"<fim_prefix>ration. Objects defined for the container
 * are only retrieved/instantiated when they are needed. The container itself is configured
 * with a predefined ContainerDefinition; the definition is typically created at application
 * startup and *is* expensive to create.</p>
 *
 * @author jal
 * Created on Mar 25, 2007
 */
public interface Container {
	void start();

	void destroy();

	/**<fim_suffix>
	<T> T findObject(Class<T> theClass);

	/**
	 * Return the 'unnamed' object with the specified class from this container. If the
	 * object is not known this will throw a IocNotFoundException.
	 *
	 * @param theClass
	 * @return
	 */
	<T> T getObject(Class<T> theClass) throws Exception;

	<T> T findObject(String name, Class<T> theClass);

	<T> T getObject(String name, Class<T> theClas<fim_middle>","
	 * Return the 'unnamed' object with the specified class from this container. If the
	 * object is not known this will return null!! This should not normally be used; use
	 * the 'getObject' call with the same signature instead: it throws an exception when
	 * the associated object is not found.
	 *
	 * @param theClass
	 * @return
	 */","
	 * Return the 'unnamed' object with the specified class from this container. If the
	 * object is not known this will throw a IocNotFoundException.
	 *
	 * @param theClass
	 * @return
	 */"
"<fim_prefix>/*<fim_suffix>
package com.stacksync.desktop.watch.local;

import java.io.File;
import org.apache.log4j.Logger;
import com.stacksync.desktop.Environment;
import com.stacksync.desktop.Environment.OperatingSystem;
import com.stacksync.desktop.config.Config;
import com.stacksync.desktop.config.Folder;
import com.stacksync.desktop.config.profile.Profile;
import com.stacksync.desktop.index.Indexer;
impor<fim_middle>","
 * Syncany, www.syncany.org
 * Copyright (C) 2011 Philipp C. Heckel <philipp.heckel@gmail.com> 
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>

import java.io.File;
import org.apache.log4j.Logger;
import com.stacksync.desktop.Environment;
import com.stacksync.desktop.Environment.OperatingSystem;
import com.stacksync.desktop.config.Config;
import com.stacksync.desktop.config.Folder;
import com.stacksync.desktop.config.profile.Profile;
import com.stacksync.desktop.index.Indexer;
import com.stacksync.desktop.util.FileUtil;

/**<fim_suffix>
public abstract class LocalWatcher {
    protected final Logger logger = Logger.getLogger(LocalWatcher.class.getName());
    protected static final Environment env = Environment.getInstance();
    protected static LocalWatcher instance;
    protected Config config;
    protected Indexer indexer;

    public LocalWatcher() {
        initDependencies();
        logger.info(""Creating wat<fim_middle>","
 *
 * @author oubou68, pheckel
 */","
 * LocalWatcher is the base class for all watchers.
 *
"
"<fim_prefix>package freenet.client.l10n;

import com.google.gwt.i18n.client.Dictionary;

/**<fim_suffix>
public class L10n {

	/** It fills a dictionary */
	private static Dictionary	dict	= Dictionary.getDictionary(""l10n"");

	/**
	 * Returns the localized value for a key
	 * 
	 * @param key
	 *            - The localization key
	 * @return The localized value
	 */
	public static String get(String key) {
		try{
			return dict.get(key);
		}catch(Exception mre){
			return ""#""+key+""#"";
		}
	<fim_middle>", This static class handles the l10n */,"
 * This class is used to fill the"
"<fim_prefix>package freenet.client.l10n;

import com.google.gwt.i18n.client.Dictionary;

/** This static class handles the l10n */
public class L10n {

	/**<fim_suffix>
	private static Dictionary	dict	= Dictionary.getDictionary(""l10n"");

	/**
	 * Returns the localized value for a key
	 * 
	 * @param key
	 *            - The localization key
	 * @return The localized value
	 */
	public static String get(String key) {
		try{
			return dict.get(key);
		}catch(Exception mre){
			return ""#""+key+""#"";
		}
	}

}
<fim_middle>", It fills a dictionary */,"
	 * The dictionary"
"<fim_prefix>package freenet.client.l10n;

import com.google.gwt.i18n.client.Dictionary;

/** This static class handles the l10n */
public class L10n {

	/** It fills a dictionary */
	private static Dictionary	dict	= Dictionary.getDictionary(""l10n"");

	/**<fim_suffix>
	public static String get(String key) {
		try{
			return dict.get(key);
		}catch(Exception mre){
			return ""#""+key+""#"";
		}
	}

}
<fim_middle>","
	 * Returns the localized value for a key
	 * 
	 * @param key
	 *            - The localization key
	 * @return The localized value
	 */", Returns the value of the key */
"<fim_prefix>/*<fim_suffix>
package net.sourceforge.seqware.queryengine.backend.store;

/**
 *
 * @author boconnor
 */
class ReturnValue {
  
}
<fim_middle>","
 * Copyright (C) 2012 SeqWare
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */"
"<fim_prefix>but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.sourceforge.seqware.queryengine.backend.store;

/**<fim_suffix>
class ReturnValue {
  
}
<fim_middle>","
 *
 * @author boconnor
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package com.sun.max.ins.gui;

import java.util.regex.*;

/**
 * Regular expression pattern matcher; identifies by number the rows that match a pattern.
 * @see java.util.regex.Pattern
 */
public interface RowTextMatcher {

    /**
     * @return the number of rows being examined.
     */
    int rowCount();

    /**
     * Find rows matching a regexp pattern.
     *
     * @param patt<fim_middle>","
 * Copyright (c) 2008, 2012, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */","*
 * @author <NAME>
 */"
"<fim_prefix> contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.sun.max.ins.gui;

import java.util.regex.*;

/**
 * Regular expression pattern matcher; identifies by number the rows that match a pattern.
 * @see java.util.regex.Pattern
 */
public interface RowTextMatcher {

    /**<fim_suffix>
    int rowCount();

    /**
     * Find rows matching a regexp pattern.
     *
     * @param pattern a regular expression pattern
     * @return rows in the row-based object being searched that match the {@link Pattern}.
     */
    int[] findMatches(Pattern pattern);

}
<fim_middle>","
     * @return the number of rows being examined.
     */","
     * Get the number of rows in the row-based object being searched.
"
"<fim_prefix>ic License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package com.sun.max.ins.gui;

import java.util.regex.*;

/**<fim_suffix>
public interface RowTextMatcher {

    /**
     * @return the number of rows being examined.
     */
    int rowCount();

    /**
     * Find rows matching a regexp pattern.
     *
     * @param pattern a regular expression pattern
     * @return rows in the row-based object being searched that match the {@link Pattern}.
     */
    int[] findMatches(Pattern pattern);

}
<fim_middle>","
 * Regular expression pattern matcher; identifies by number the rows that match a pattern.
 * @see java.util.regex.Pattern
 */","
 * Interface for classes that can match rows of text.
 *
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>e.com if you need additional information or have any
 * questions.
 */
package com.sun.max.ins.gui;

import java.util.regex.*;

/**
 * Regular expression pattern matcher; identifies by number the rows that match a pattern.
 * @see java.util.regex.Pattern
 */
public interface RowTextMatcher {

    /**
     * @return the number of rows being examined.
     */
    int rowCount();

    /**<fim_suffix>
    int[] findMatches(Pattern pattern);

}
<fim_middle>","
     * Find rows matching a regexp pattern.
     *
     * @param pattern a regular expression pattern
     * @return rows in the row-based object being searched that match the {@link Pattern}.
     */","
     * @param pattern the pattern to match.
     * @return an array of row numbers that match the pattern.
     */"
"<fim_prefix>package se.chalmers.gdcn.files;

import org.codehaus.plexus.util.FileUtils;
import se.chalmers.gdcn.taskbuilder.Task;
import se.chalmers.gdcn.taskbuilder.communicationToClient.TaskListener;
import se.chalmers.gdcn.taskbuilder.fileManagement.PathManager;

import java.io.File;
import java.io.IOException;

/**<fim_suffix>
public class SelfWorker {

    private final String taskName;
    private final PathManager jobPathManager;
    private final PathManager workerPathManager;

    public SelfWorker(TaskMeta taskMeta, String jobName) throws TaskMetaDataException {
        taskName = taskMeta.getTaskName();
        jobPathManager = PathManager.jobOwner(jobName);
        workerPathManager = PathManager.wo<fim_middle>","
 * Created by Leif on 2014-04-21.
 */","
 * Created by marcus on 2017-03-16.
 */"
"<fim_prefix>          copyFiles();
        } catch (IOException e) {
            e.printStackTrace();
            listener.taskFailed(taskName, e.getMessage());
        }

        return new Task(jobPathManager.getProjectName(), taskMeta.getTaskName(), FileManagementUtils.moduleName(taskMeta),
                FileManagementUtils.getResourceFiles(jobPathManager, taskMeta), listener);
    }

    /**<fim_suffix>
    private void copyFiles() throws IOException {
//        PathManager workerPathManager = PathManager.worker(jobPathManager.getProjectName());
        FileUtils.copyDirectory( new File(jobPathManager.taskResourcesDir()), new File(workerPathManager.taskResourcesDir()));
        FileUtils.copyDirectory( new File(jobPathManager.taskCodeDir()), new File(workerPathManager.taskCodeDir()))<fim_middle>","
     * Copies files from jobs/ to data/ folder in order to perform local work.
     * @throws IOException
     */","
     * Copy files from job resources to worker resources
     * @throws IOException
     */"
"<fim_prefix>PathManager = PathManager.worker(jobName);
    }

    /**
     * Returns absolute path to result file from this self work.
     * This file will be in the /data directory.
     * @return Absolute path
     */
    public String futureResultFilePath(){
//        return jobPathManager.getResultFilePath(taskName);
        return workerPathManager.getResultFilePath(taskName);
    }

    /**<fim_suffix>
    public Task workSelf(TaskMeta taskMeta, TaskListener listener) throws TaskMetaDataException {
        try {
            copyFiles();
        } catch (IOException e) {
            e.printStackTrace();
            listener.taskFailed(taskName, e.getMessage());
        }

        return new Task(jobPathManager.getProjectName(), taskMeta.getTaskName(), FileManagementUtils.moduleName(t<fim_middle>","
     * Creates a Task object for the local job owner to work on himself.
     *
     * @param taskMeta Meta info of this replica
     * @param listener Listener for success or failure
     * @return Runnable Task
     * @throws TaskMetaDataException
     */","
     * Copies files from the /data directory to the /tmp directory.
     * @throws IOException
     */"
"<fim_prefix>   private final String taskName;
    private final PathManager jobPathManager;
    private final PathManager workerPathManager;

    public SelfWorker(TaskMeta taskMeta, String jobName) throws TaskMetaDataException {
        taskName = taskMeta.getTaskName();
        jobPathManager = PathManager.jobOwner(jobName);
        workerPathManager = PathManager.worker(jobName);
    }

    /**<fim_suffix>
    public String futureResultFilePath(){
//        return jobPathManager.getResultFilePath(taskName);
        return workerPathManager.getResultFilePath(taskName);
    }

    /**
     * Creates a Task object for the local job owner to work on himself.
     *
     * @param taskMeta Meta info of this replica
     * @param listener Listener for success or failure
     * @return Runnable<fim_middle>","
     * Returns absolute path to result file from this self work.
     * This file will be in the /data directory.
     * @return Absolute path
     */","
     * Creates a Task object for the local job owner to work on himself.
     *
     * @param taskMeta Meta info of this replica
     * @param"
"<fim_prefix>/*<fim_suffix>

package org.das2.qds.filters;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author mmclouth
 */
public class ContourFilterEditorPanel extends AbstractFilterEditorPanel {

    /**
     * Creates new form ContourFilterEditorPanel
     */
    public ContourFilterEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from with<fim_middle>","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */","*
 *
 * @author mmclouth
 */"
"<fim_prefix>nd open the template in the editor.
 */

package org.das2.qds.filters;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author mmclouth
 */
public class ContourFilterEditorPanel extends AbstractFilterEditorPanel {

    /**
     * Creates new form ContourFilterEditorPanel
     */
    public ContourFilterEditorPanel() {
        initComponents();
    }

    /**<fim_suffix>
    @SuppressWarnings(""unchecked"")
    // <editor-fold defaultstate=""collapsed"" desc=""Generated Code"">//GEN-BEGIN:initComponents
    private void initComponents() {

        contourPtsTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        contourPtsTF.setText(""1,5,10"");
        contourPtsTF.setPreferredSize(new java.awt.Dimension(150, 27));

        jL<fim_middle>","
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */","
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */"
"<fim_prefix>o change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.das2.qds.filters;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author mmclouth
 */
public class ContourFilterEditorPanel extends AbstractFilterEditorPanel {

    /**<fim_suffix>
    public ContourFilterEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings(""unchecked"")
    // <editor-fold defaultstate=""collapsed"" desc=""Generated Code<fim_middle>","
     * Creates new form ContourFilterEditorPanel
     */","
     * Creates new form ContourFilterEditorPanel"
"<fim_prefix>/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.das2.qds.filters;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**<fim_suffix>
public class ContourFilterEditorPanel extends AbstractFilterEditorPanel {

    /**
     * Creates new form ContourFilterEditorPanel
     */
    public ContourFilterEditorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * <fim_middle>","
 *
 * @author mmclouth
 */","
 *
 * @author jonas
 */"
"<fim_prefix>package eu.xenit.alfred.api.search.nodes;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import eu.xenit.alfred.api.search.json.IJsonTyped;
import eu.xenit.alfred.api.search.visitors.ISearchSyntaxVisitor;

/**<fim_suffix>
public class TermSearchNode implements SearchSyntaxNode, IJsonTyped {

    private String term;
    private String value;

    @JsonCreator
    public TermSearchNode(String value) {
        this.value = value;
    }

    public TermSearchNode(@JsonProperty(""nodeType"") String term, @JsonProperty(""value"") String value) {
        this.value = value;
        this.term = term;
    }

    @<fim_middle>","
 * Represents a search nodes that searches for a specific value for a specific term.
 */","
 * A search node that matches a term.
 */"
"<fim_prefix>/**<fim_suffix>
package com.cevelop.includator.tests.datastructure.constructorrefs;

import java.util.List;

import org.junit.Assert;
import org.junit.Test;

import com.cevelop.includator.cxxelement.DeclarationReference;
import com.cevelop.includator.tests.base.IncludatorTest;


public class ConstructorRefTest8parameterDeclarationNoImpl extends IncludatorTest {

    @Test
    public void runTest() th<fim_middle>","*****************************************************************************
 * Copyright (c) 2010 Institute for Software, HSR Hochschule fuer Technik
 * Rapperswil, University of applied sciences and others
 * All rights reserved.
 *
 * Contributors:
 * Institute for Software - initial API and implementation
 ******************************************************************************/","
 * 
 */"
"<fim_prefix>/*<fim_suffix>
package org.meveo.model.catalog;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.OneToMany;
import javax.<fim_middle>","
 * (C) Copyright 2015-2016 Opencell SAS (http://opencellsoft.com/) and contributors.
 * (C) Copyright 2009-2014 Manaty SARL (http://manaty.net/) and contributors.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * This program is not suitable for any direct or indirect application in MILITARY industry
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>INUTE, endValue % 100);
                    calendar.set(java.util.Calendar.SECOND, 0);
                    calendar.set(java.util.Calendar.MILLISECOND, 0);
                    found = true;
                    break;
                }
            }

        }

        if (found) {
            return calendar.getTime();
        } else {
            return null;
        }
    }

    /**<fim_suffix>
    public Date previousCalendarDate(Date date) {

        GregorianCalendar calendar = new GregorianCalendar();
        calendar.setTime(date);

        boolean found = false;

        // Get the first interval that contains a given date's weekday. To handle a special case that spans to another week (e.g. thursday to monday), the interval end value is
        // adjusted by 7 days.
 <fim_middle>","
     * Determines a previous calendar date matching any of calendar's time intervals. Example: given a month/day period of 01/15-01/30 a previous calendar date for 2015/01/20 will
     * be 2015/01/15
     * 
     * 
     * @param date Date to check
     * @return Previous calendar date.
     */","
     * Returns the previous calendar date.
     *
     * @param date
     *            the date to find the previous calendar date for
     * @return the previous calendar date
     */"
"<fim_prefix>val> getIntervals() {
        return intervals;
    }

    public void setIntervals(List<CalendarDateInterval> intervals) {
        this.intervals = intervals;
    }

    public CalendarIntervalTypeEnum getIntervalType() {
        return intervalType;
    }

    public void setIntervalType(CalendarIntervalTypeEnum intervalType) {
        this.intervalType = intervalType;
    }

    /**<fim_suffix>
    public Date nextCalendarDate(Date date) {

        GregorianCalendar calendar = new GregorianCalendar();
        calendar.setTime(date);

        boolean found = false;

        // Get the first interval that contains a given date's weekday. To handle a special case that spans to another week (e.g. thursday to monday), the interval end value is
        // adjusted by 7 days.
     <fim_middle>","
     * Determines a next calendar date matching any of calendar's time intervals. Example: given a month/day period of 01/15-01/30 a next calendar date for 2015/01/20 will be
     * 2015/01/30
     * 
     * 
     * @param date Date to check
     * @return Next calendar date.
     */","
     * Returns the next calendar date after the given date.
     *
     * @param date the date to find the next calendar date after
     * @return the next calendar date after the given date
     */"
"<fim_prefix>x.persistence.Column;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;

import org.meveo.model.shared.DateUtils;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**<fim_suffix>
@Entity
@DiscriminatorValue(""INTERVAL"")
public class CalendarInterval extends Calendar {

    private static final long serialVersionUID = 1L;

    @Column(name = ""interval_type"")
    @Enumerated(EnumType.STRING)
    private CalendarIntervalTypeEnum intervalType = CalendarIntervalTypeEnum.DAY;

    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    @OneToMany(mappedBy = ""calendar<fim_middle>","
 * Represents a time inverval(s) based calendar. Time interval specifies a begin and end times, which can be expressed in the following units: weekdays, month/day and hour/minute.
 * 
 * Example: given a month/day interval of 01/15 - 01/30 a previous calendar date for 2015/01/20 will be 2015/01/15 and next calendar date will be 2015/01/30&lt;br/&gt; given a
 * hour/minute interval of 15:30 - 16:45 a previous calendar date for 2015/01/20 16:00 will be 2015/01/20 15:30 and next calendar date will be 2015/01/20 16:45 &lt;br/&gt; given
 * weekday interval of 1-5 (monday - friday) a previous calendar date for 2015/01/20 will be 2015/01/19 and next calendar date will be 2015/01/23&lt;br/&gt;
 * 
 * @author Andrius Karpavicius
 * 
 */","
 * @author <NAME>
 */"
"<fim_prefix>nts.
 */
@Entity
@Table( name = ""Subscriptions"" )
public class Subscription {

	/**
	 * The ID of this Subscription
	 */
	@Id
	long id;

	/**
	 * The member who subscribed to this event.
	 */
	private String member;
	
	/**
	 * The ID of the thing subscribed to.
	 * For BlogEntries or Games, this is the urlName. For Members, this is the member name.
	 */
	private String entityId;
	
	/**<fim_suffix>
	private String type;
	
	/**
	 * The label for this subscription. ""Comments on XYZ""
	 * TODO: this is meant to be used for managing subscription settings.
	 */
	private String label;
	
	/**
	 * The last time the user saw the notifications for this Subscription.
	 * Any event in this subscription after this time is a new notification.
	 */
	private long lastNotificationViewedTimestamp;<fim_middle>","
	 * The type of the thing subscribed to. BlogEntry or Game or Member.
	 */","
	 * The type of this subscription.
	 * For BlogEntries, this is ""BlogEntry"
"<fim_prefix>package com.StaticVoidGames.notifications;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * This class encapsulates a member subscription to an event. This causes the member to receive notifications for new comments.
 */
@Entity
@Table( name = ""Subscriptions"" )
public class Subscription {

	/**<fim_suffix>
	@Id
	long id;

	/**
	 * The member who subscribed to this event.
	 */
	private String member;
	
	/**
	 * The ID of the thing subscribed to.
	 * For BlogEntries or Games, this is the urlName. For Members, this is the member name.
	 */
	private String entityId;
	
	/**
	 * The type of the thing subscribed to. BlogEntry or Game or Member.
	 */
	private String type;
	
	/**
	 * The label f<fim_middle>","
	 * The ID of this Subscription
	 */","
	 * The ID of the subscription.
	"
"<fim_prefix>e.Id;
import javax.persistence.Table;

/**
 * This class encapsulates a member subscription to an event. This causes the member to receive notifications for new comments.
 */
@Entity
@Table( name = ""Subscriptions"" )
public class Subscription {

	/**
	 * The ID of this Subscription
	 */
	@Id
	long id;

	/**
	 * The member who subscribed to this event.
	 */
	private String member;
	
	/**<fim_suffix>
	private String entityId;
	
	/**
	 * The type of the thing subscribed to. BlogEntry or Game or Member.
	 */
	private String type;
	
	/**
	 * The label for this subscription. ""Comments on XYZ""
	 * TODO: this is meant to be used for managing subscription settings.
	 */
	private String label;
	
	/**
	 * The last time the user saw the notifications for this Subscription.
	 * Any event in <fim_middle>","
	 * The ID of the thing subscribed to.
	 * For BlogEntries or Games, this is the urlName. For Members, this is the member name.
	 */","
	 * The entity ID of the thing subscribed to.
	 */"
"<fim_prefix>oidGames.notifications;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * This class encapsulates a member subscription to an event. This causes the member to receive notifications for new comments.
 */
@Entity
@Table( name = ""Subscriptions"" )
public class Subscription {

	/**
	 * The ID of this Subscription
	 */
	@Id
	long id;

	/**<fim_suffix>
	private String member;
	
	/**
	 * The ID of the thing subscribed to.
	 * For BlogEntries or Games, this is the urlName. For Members, this is the member name.
	 */
	private String entityId;
	
	/**
	 * The type of the thing subscribed to. BlogEntry or Game or Member.
	 */
	private String type;
	
	/**
	 * The label for this subscription. ""Comments on XYZ""
	 * TODO: this is meant to be u<fim_middle>","
	 * The member who subscribed to this event.
	 */","
	 * The member that is subscribed to the event.
	"
"<fim_prefix>ubscription
	 */
	@Id
	long id;

	/**
	 * The member who subscribed to this event.
	 */
	private String member;
	
	/**
	 * The ID of the thing subscribed to.
	 * For BlogEntries or Games, this is the urlName. For Members, this is the member name.
	 */
	private String entityId;
	
	/**
	 * The type of the thing subscribed to. BlogEntry or Game or Member.
	 */
	private String type;
	
	/**<fim_suffix>
	private String label;
	
	/**
	 * The last time the user saw the notifications for this Subscription.
	 * Any event in this subscription after this time is a new notification.
	 */
	private long lastNotificationViewedTimestamp;
	
	/**
	 * The time this Subscription was created.
	 */
	private long timestamp;
	
	/**
	 * Constructs a new Subscription and sets the timestamp to the current<fim_middle>","
	 * The label for this subscription. ""Comments on XYZ""
	 * TODO: this is meant to be used for managing subscription settings.
	 */","
	 * The label of the thing subscribed to. For BlogEntries, this is the title. For Games, this is the name. For Members, this is"
"<fim_prefix> For BlogEntries or Games, this is the urlName. For Members, this is the member name.
	 */
	private String entityId;
	
	/**
	 * The type of the thing subscribed to. BlogEntry or Game or Member.
	 */
	private String type;
	
	/**
	 * The label for this subscription. ""Comments on XYZ""
	 * TODO: this is meant to be used for managing subscription settings.
	 */
	private String label;
	
	/**<fim_suffix>
	private long lastNotificationViewedTimestamp;
	
	/**
	 * The time this Subscription was created.
	 */
	private long timestamp;
	
	/**
	 * Constructs a new Subscription and sets the timestamp to the current time.
	 */
	public Subscription(){
		this.timestamp = System.currentTimeMillis();
	}

	public String getMember() {
		return member;
	}

	public void setMember(String member) {
		th<fim_middle>","
	 * The last time the user saw the notifications for this Subscription.
	 * Any event in this subscription after this time is a new notification.
	 */","
	 * The last time this Subscription was viewed.
	 */"
"<fim_prefix>te String type;
	
	/**
	 * The label for this subscription. ""Comments on XYZ""
	 * TODO: this is meant to be used for managing subscription settings.
	 */
	private String label;
	
	/**
	 * The last time the user saw the notifications for this Subscription.
	 * Any event in this subscription after this time is a new notification.
	 */
	private long lastNotificationViewedTimestamp;
	
	/**<fim_suffix>
	private long timestamp;
	
	/**
	 * Constructs a new Subscription and sets the timestamp to the current time.
	 */
	public Subscription(){
		this.timestamp = System.currentTimeMillis();
	}

	public String getMember() {
		return member;
	}

	public void setMember(String member) {
		this.member = member;
	}

	public String getEntityId() {
		return entityId;
	}

	public void setEntityId(<fim_middle>","
	 * The time this Subscription was created.
	 */","
	 * The timestamp of when this subscription was created.
"
"<fim_prefix> TODO: this is meant to be used for managing subscription settings.
	 */
	private String label;
	
	/**
	 * The last time the user saw the notifications for this Subscription.
	 * Any event in this subscription after this time is a new notification.
	 */
	private long lastNotificationViewedTimestamp;
	
	/**
	 * The time this Subscription was created.
	 */
	private long timestamp;
	
	/**<fim_suffix>
	public Subscription(){
		this.timestamp = System.currentTimeMillis();
	}

	public String getMember() {
		return member;
	}

	public void setMember(String member) {
		this.member = member;
	}

	public String getEntityId() {
		return entityId;
	}

	public void setEntityId(String entityId) {
		this.entityId = entityId;
	}

	public String getType() {
		return type;
	}

	public void setTy<fim_middle>","
	 * Constructs a new Subscription and sets the timestamp to the current time.
	 */","
	 * The member that this subscription is for.
	 */"
"<fim_prefix>package com.StaticVoidGames.notifications;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

/**<fim_suffix>
@Entity
@Table( name = ""Subscriptions"" )
public class Subscription {

	/**
	 * The ID of this Subscription
	 */
	@Id
	long id;

	/**
	 * The member who subscribed to this event.
	 */
	private String member;
	
	/**
	 * The ID of the thing subscribed to.
	 * For BlogEntries or Games, this is the urlName. For Members, this is the member name.
	 */
	private String entityId;
	
	/**
	 * The<fim_middle>","
 * This class encapsulates a member subscription to an event. This causes the member to receive notifications for new comments.
 */","
 * A Subscription is a record of a member subscribing to an event.
 * 
 * @author StaticVoidGames"
"<fim_prefix>package gmx.iderc.geoserver.tjs.catalog;

/**<fim_suffix>
public interface JoinedMapInfo extends TJSCatalogObject {

    //3 d√≠as de vida, en milisegundos
    public static final long DEFAULT_LIFE_TIME = 3 * 24 * 60 * 60 * 1000;

    String getGetDataURL();

    void setGetDataURL(String getDataURL);

    String getFrameworkURI();

    void setFrameworkURI(String frameworkURI);

    public boolean isUpdatable();

    public void setUpdatabl<fim_middle>","
 * Created with IntelliJ IDEA.
 * User: Alvaro Javier
 * Date: 3/27/13
 * Time: 12:16 a.m.
 */","
 * Created by IntelliJ IDEA.
 * User: sergio
 * Date: 26/08/14
 * Time: 11:44
 * To change this template use File |"
"<fim_prefix>/**<fim_suffix>
package org.openhab.binding.max.internal.exceptions;

/**
 * Will be thrown when there is an attempt to put a new message line into the message processor,
 * but the processor is not yet ready to handle new lines because there is already a message that
 * has be pulled before.
 *
 * @author Christian Rockrohr <christian@rockrohr.de> - Initial contribution
 */
public class MessageIsWai<fim_middle>","
 * Copyright (c) 2010-2021 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */","
 * Copyright (C) 2015 <NAME> (<EMAIL>)
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software"
"<fim_prefix>exceptions;

/**
 * Will be thrown when there is an attempt to put a new message line into the message processor,
 * but the processor is not yet ready to handle new lines because there is already a message that
 * has be pulled before.
 *
 * @author Christian Rockrohr <christian@rockrohr.de> - Initial contribution
 */
public class MessageIsWaitingException extends Exception {

    /**<fim_suffix>
    private static final long serialVersionUID = -7317329978634583853L;
}
<fim_middle>","
     * required variable to avoid IncorrectMultilineIndexException warning
     */",
"<fim_prefix> openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.openhab.binding.max.internal.exceptions;

/**<fim_suffix>
public class MessageIsWaitingException extends Exception {

    /**
     * required variable to avoid IncorrectMultilineIndexException warning
     */
    private static final long serialVersionUID = -7317329978634583853L;
}
<fim_middle>","
 * Will be thrown when there is an attempt to put a new message line into the message processor,
 * but the processor is not yet ready to handle new lines because there is already a message that
 * has be pulled before.
 *
 * @author Christian Rockrohr <christian@rockrohr.de> - Initial contribution
 */","
 * Exception thrown when a message is waiting to be sent.
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>

/* Mult predefined algorithmic node */

package ir.algorithms;

import common.CompilerError;

public class Mult extends OperatorMulti {

  public void completeAndCheck(CompilerError ce) {
    setOperation(""*"");
    super.completeAndCheck(ce);
  }
}
<fim_middle>","
  This file is part of KernelGenius.

  Copyright (C) 2013 STMicroelectronics

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 3 of the License, or (at your option) any later version.
 
  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.
 
  You should have received a copy of the GNU Lesser General Public
  License along with this program; if not, write to the Free
  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
  Boston, MA 02110-1301 USA.
  
  Authors: Thierry Lepley
*/","
 * Copyright (c) 2004-2005 The Trustees of Indiana University and Indiana
 *                         University Research and Technology
 *                         Corporation.  All rights reserved.
 * Copyright (c) 2004-2005 The University of Tennessee and The University
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 * Copyright (c) 2004-2005 High Performance Computing Center Stuttgart, 
 *                         University of"
"<fim_prefix>ed warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.
 
  You should have received a copy of the GNU Lesser General Public
  License along with this program; if not, write to the Free
  Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
  Boston, MA 02110-1301 USA.
  
  Authors: Thierry Lepley
*/

/*<fim_suffix>

package ir.algorithms;

import common.CompilerError;

public class Mult extends OperatorMulti {

  public void completeAndCheck(CompilerError ce) {
    setOperation(""*"");
    super.completeAndCheck(ce);
  }
}
<fim_middle>", Mult predefined algorithmic node */,"
 * Created on Feb 26"
"<fim_prefix>package com.mobius.software.telco.protocols.diameter.primitives.gi;
/*<fim_suffix>

import com.mobius.software.telco.protocols.diameter.TgppAvpCodes;
import com.mobius.software.telco.protocols.diameter.VendorIDs;
import com.mobius.software.telco.protocols.diameter.annotations.DiameterAvpDefinition;
import com.mobius.software.telco.protocols.diameter.primitives.DiameterOctetString;

/**
*
* @author yulian oifa
*
*/

/*
	16 - 3GPP-GGSN IPv6 address
	GGSN IPv6 address <fim_middle>","
 * Mobius Software LTD
 * Copyright 2023, Mobius Software LTD and individual contributors
 * by the @authors tag.
 *
 * This program is free software: you can redistribute it and/or modify
 * under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation; either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */","*
*
* @author yulian oifa
*
*/"
"<fim_prefix>.  If not, see <http://www.gnu.org/licenses/>
 */

import com.mobius.software.telco.protocols.diameter.TgppAvpCodes;
import com.mobius.software.telco.protocols.diameter.VendorIDs;
import com.mobius.software.telco.protocols.diameter.annotations.DiameterAvpDefinition;
import com.mobius.software.telco.protocols.diameter.primitives.DiameterOctetString;

/**
*
* @author yulian oifa
*
*/

/*<fim_suffix>
@DiameterAvpDefinition(code = TgppAvpCodes.TGPP_GGSN_IPV6_ADDRESS, vendorId = VendorIDs.TGPP_ID, must = false, name = ""3GPP-GGSN-IPv6-Address"")
public interface TGPPGGSNIPv6Address extends DiameterOctetString
{
}<fim_middle>","
	16 - 3GPP-GGSN IPv6 address
	GGSN IPv6 address value: IPv6 Address.
	GGSN IPv6 address is Octet String type. 
 */","*
 * 3GPP-GGSN-IPv6-Address
 *
 * The 3GPP-GGSN-IPv6-Address AVP is used to convey the IPv6 address of the"
"<fim_prefix>icense
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

import com.mobius.software.telco.protocols.diameter.TgppAvpCodes;
import com.mobius.software.telco.protocols.diameter.VendorIDs;
import com.mobius.software.telco.protocols.diameter.annotations.DiameterAvpDefinition;
import com.mobius.software.telco.protocols.diameter.primitives.DiameterOctetString;

/**<fim_suffix>

/*
	16 - 3GPP-GGSN IPv6 address
	GGSN IPv6 address value: IPv6 Address.
	GGSN IPv6 address is Octet String type. 
 */
@DiameterAvpDefinition(code = TgppAvpCodes.TGPP_GGSN_IPV6_ADDRESS, vendorId = VendorIDs.TGPP_ID, must = false, name = ""3GPP-GGSN-IPv6-Address"")
public interface TGPPGGSNIPv6Address extends DiameterOctetString
{
}<fim_middle>","
*
* @author yulian oifa
*
*/","
 * @author <NAME>
 */"
"<fim_prefix>.junit.Before;
import org.junit.Test;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.sparql.api.*;
import org.semanticweb.owlapi.sparql.algebra.AlgebraEvaluationContext;

import java.util.Arrays;
import java.util.Collections;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.mockito.Mockito.mock;

/**<fim_suffix>
public class ISIRI_Evaluator_TestCase {

    private final AtomicIRI iri = new AtomicIRI(IRI.create(""http://stuff.com""));

    private ISIRI_Evaluator evaluator;

    @Before
    public void setUp() throws Exception {
        evaluator = new ISIRI_Evaluator();
    }

    @Test
    public void shouldEvaluateIRIAsTrue() {
        EvaluationResult result = evaluator.evaluate(Collections.<fim_middle>","
 * Matthew Horridge Stanford Center for Biomedical Informatics Research 16 Oct 2017
 */","
 * @author <NAME>, Stanford University, Bio-Medical Informatics Research Group,"
"<fim_prefix>/*<fim_suffix>
package us.mn.state.dot.tms.server.comm.mndot;

import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import us.mn.state.dot.sched.TimeSteward;
import us.mn.state.dot.tms.server.ControllerImpl;
import us.mn.state.dot.tms.server.RampMeterImpl;
import us.mn.state.dot.tms.server.comm.CommMessage;
import us.mn.state.dot.tms.server.comm.ControllerException;
import u<fim_middle>","
 * IRIS -- Intelligent Roadway Information System
 * Copyright (C) 2000-2016  Minnesota Department of Transportation
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>ller.storeOccupancy(getStamp(), SAMPLE_PERIOD_SEC,
				FIRST_DETECTOR_PIN, scans, MAX_SCANS);
			updateGreenCount(lookupMeter1(controller),
				rec[Address.OFF_GREEN_METER_1] & 0xFF);
			updateGreenCount(lookupMeter2(controller),
				rec[Address.OFF_GREEN_METER_2] & 0xFF);
			if(recs > 0 && TimeSteward.currentTimeMillis() < newest)
				return this;
			else
				return null;
		}
	}

	/**<fim_suffix>
	private void updateGreenCount(RampMeterImpl meter, int g) {
		if (meter != null) {
			meter.updateGreenCount5(getStamp(),
				adjustGreenCount(meter, g));
		}
	}

	/** Cleanup the operation */
	@Override
	public void cleanup() {
		if (isSuccess())
			setMaintStatus(maint);
		super.cleanup();
	}
}
<fim_middle>", Update meter with the most recent 5-minute green count */,"
	 * Adjust the green count to be in the range"
"<fim_prefix>nstance();
		cal.setTimeInMillis(getStamp());
		cal.add(Calendar.DATE, -1);
		oldest = cal.getTimeInMillis();
		cal.setTimeInMillis(getStamp());
		cal.add(Calendar.MINUTE, 4);
		cal.add(Calendar.SECOND, 20);
		newest = cal.getTimeInMillis();
	}

	/** Create the first phase of the operation */
	@Override
	protected Phase<MndotProperty> phaseOne() {
		return new GetNextRecord();
	}

	/**<fim_suffix>
	protected class GetNextRecord extends Phase<MndotProperty> {

		/** Binned data record */
		private byte[] rec;

		/** Try to get and delete the next record */
		private int tryNextRecord(CommMessage<MndotProperty> mess)
			throws IOException
		{
			BinnedDataProperty bin = new BinnedDataProperty();
			mess.add(bin);
			mess.queryProps();
			setStamp(bin.getStamp());
			rec = bin.get<fim_middle>", Phase to get the next sample data record */, Create the second phase of the operation */
"<fim_prefix>MINUTE, 4);
		cal.add(Calendar.SECOND, 20);
		newest = cal.getTimeInMillis();
	}

	/** Create the first phase of the operation */
	@Override
	protected Phase<MndotProperty> phaseOne() {
		return new GetNextRecord();
	}

	/** Phase to get the next sample data record */
	protected class GetNextRecord extends Phase<MndotProperty> {

		/** Binned data record */
		private byte[] rec;

		/**<fim_suffix>
		private int tryNextRecord(CommMessage<MndotProperty> mess)
			throws IOException
		{
			BinnedDataProperty bin = new BinnedDataProperty();
			mess.add(bin);
			mess.queryProps();
			setStamp(bin.getStamp());
			rec = bin.getRecord();
			// Delete the record from the controller
			mess.storeProps();
			return bin.getRecordCount();
		}

		/** Test if the timestamp is out of the valid <fim_middle>", Try to get and delete the next record */,"
		 * Get the next record from the"
"<fim_prefix>rollerImpl;
import us.mn.state.dot.tms.server.RampMeterImpl;
import us.mn.state.dot.tms.server.comm.CommMessage;
import us.mn.state.dot.tms.server.comm.ControllerException;
import us.mn.state.dot.tms.server.comm.PriorityLevel;

/**
 * Operation to query 5-minute sample data + meter green counts
 *
 * @author Douglas Lau
 */
public class OpQuerySamples5Min extends OpQuerySamples {

	/**<fim_suffix>
	static public final int SAMPLE_PERIOD_SEC = 300;

	/** Maximum number of scans in 5 minutes */
	static private final int MAX_SCANS = 18000;

	/** Maximum number of records to read with ""BAD TIMESTAMP"" errors */
	static private final int MAX_BAD_RECORDS = 5;

	/** Oldest time stamp to accept from controller */
	private final long oldest;

	/** Newest timestamp to accept from controlle<fim_middle>", Sample period (seconds) */, Sample period in seconds */
"<fim_prefix>nts
 *
 * @author Douglas Lau
 */
public class OpQuerySamples5Min extends OpQuerySamples {

	/** Sample period (seconds) */
	static public final int SAMPLE_PERIOD_SEC = 300;

	/** Maximum number of scans in 5 minutes */
	static private final int MAX_SCANS = 18000;

	/** Maximum number of records to read with ""BAD TIMESTAMP"" errors */
	static private final int MAX_BAD_RECORDS = 5;

	/**<fim_suffix>
	private final long oldest;

	/** Newest timestamp to accept from controller */
	private final long newest;

	/** Count of records with ""BAD TIMESTAMP"" errors */
	protected int n_bad = 0;

	/** Maintenance status */
	private String maint = """";

	/** Create a new 5-minute data operation */
	public OpQuerySamples5Min(ControllerImpl c) {
		super(PriorityLevel.DATA_5_MIN, c);
		Calendar c<fim_middle>", Oldest time stamp to accept from controller */, Oldest timestamp to accept from controller */
"<fim_prefix>to read with ""BAD TIMESTAMP"" errors */
	static private final int MAX_BAD_RECORDS = 5;

	/** Oldest time stamp to accept from controller */
	private final long oldest;

	/** Newest timestamp to accept from controller */
	private final long newest;

	/** Count of records with ""BAD TIMESTAMP"" errors */
	protected int n_bad = 0;

	/** Maintenance status */
	private String maint = """";

	/**<fim_suffix>
	public OpQuerySamples5Min(ControllerImpl c) {
		super(PriorityLevel.DATA_5_MIN, c);
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(getStamp());
		cal.add(Calendar.DATE, -1);
		oldest = cal.getTimeInMillis();
		cal.setTimeInMillis(getStamp());
		cal.add(Calendar.MINUTE, 4);
		cal.add(Calendar.SECOND, 20);
		newest = cal.getTimeInMillis();
	}

	/** Create the first phas<fim_middle>", Create a new 5-minute data operation */,"
	 * Constructor
	 * 
	"
"<fim_prefix>Samples {

	/** Sample period (seconds) */
	static public final int SAMPLE_PERIOD_SEC = 300;

	/** Maximum number of scans in 5 minutes */
	static private final int MAX_SCANS = 18000;

	/** Maximum number of records to read with ""BAD TIMESTAMP"" errors */
	static private final int MAX_BAD_RECORDS = 5;

	/** Oldest time stamp to accept from controller */
	private final long oldest;

	/**<fim_suffix>
	private final long newest;

	/** Count of records with ""BAD TIMESTAMP"" errors */
	protected int n_bad = 0;

	/** Maintenance status */
	private String maint = """";

	/** Create a new 5-minute data operation */
	public OpQuerySamples5Min(ControllerImpl c) {
		super(PriorityLevel.DATA_5_MIN, c);
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(getStamp());
		cal.add(Calend<fim_middle>", Newest timestamp to accept from controller */, Newest time stamp to accept from controller
"<fim_prefix>nute data operation */
	public OpQuerySamples5Min(ControllerImpl c) {
		super(PriorityLevel.DATA_5_MIN, c);
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(getStamp());
		cal.add(Calendar.DATE, -1);
		oldest = cal.getTimeInMillis();
		cal.setTimeInMillis(getStamp());
		cal.add(Calendar.MINUTE, 4);
		cal.add(Calendar.SECOND, 20);
		newest = cal.getTimeInMillis();
	}

	/**<fim_suffix>
	@Override
	protected Phase<MndotProperty> phaseOne() {
		return new GetNextRecord();
	}

	/** Phase to get the next sample data record */
	protected class GetNextRecord extends Phase<MndotProperty> {

		/** Binned data record */
		private byte[] rec;

		/** Try to get and delete the next record */
		private int tryNextRecord(CommMessage<MndotProperty> mess)
			throws IOException
		{
<fim_middle>", Create the first phase of the operation */,"
	 * @see com.bb"
"<fim_prefix>** Try to get and delete the next record */
		private int tryNextRecord(CommMessage<MndotProperty> mess)
			throws IOException
		{
			BinnedDataProperty bin = new BinnedDataProperty();
			mess.add(bin);
			mess.queryProps();
			setStamp(bin.getStamp());
			rec = bin.getRecord();
			// Delete the record from the controller
			mess.storeProps();
			return bin.getRecordCount();
		}

		/**<fim_suffix>
		private boolean isStampBad(long s) {
			return (s < oldest || s > newest);
		}

		/** Collect 5-minute data from the controller */
		@Override
		protected Phase<MndotProperty> poll(
			CommMessage<MndotProperty> mess) throws IOException
		{
			int recs = 0;
			try {
				recs = tryNextRecord(mess);
				long s = getStamp();
				if (isStampBad(s)) {
					mess.logError(""BAD TIMESTAMP: ""<fim_middle>", Test if the timestamp is out of the valid range */, Check if the stamp is bad */
"<fim_prefix>dDataProperty bin = new BinnedDataProperty();
			mess.add(bin);
			mess.queryProps();
			setStamp(bin.getStamp());
			rec = bin.getRecord();
			// Delete the record from the controller
			mess.storeProps();
			return bin.getRecordCount();
		}

		/** Test if the timestamp is out of the valid range */
		private boolean isStampBad(long s) {
			return (s < oldest || s > newest);
		}

		/**<fim_suffix>
		@Override
		protected Phase<MndotProperty> poll(
			CommMessage<MndotProperty> mess) throws IOException
		{
			int recs = 0;
			try {
				recs = tryNextRecord(mess);
				long s = getStamp();
				if (isStampBad(s)) {
					mess.logError(""BAD TIMESTAMP: "" +
						new Date(s));
					if (++n_bad > MAX_BAD_RECORDS)
						return null;
					else
						return this;
				}
			}
			catch (Contr<fim_middle>", Collect 5-minute data from the controller */, Test if the record is out of the valid
"<fim_prefix> int MAX_SCANS = 18000;

	/** Maximum number of records to read with ""BAD TIMESTAMP"" errors */
	static private final int MAX_BAD_RECORDS = 5;

	/** Oldest time stamp to accept from controller */
	private final long oldest;

	/** Newest timestamp to accept from controller */
	private final long newest;

	/** Count of records with ""BAD TIMESTAMP"" errors */
	protected int n_bad = 0;

	/**<fim_suffix>
	private String maint = """";

	/** Create a new 5-minute data operation */
	public OpQuerySamples5Min(ControllerImpl c) {
		super(PriorityLevel.DATA_5_MIN, c);
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(getStamp());
		cal.add(Calendar.DATE, -1);
		oldest = cal.getTimeInMillis();
		cal.setTimeInMillis(getStamp());
		cal.add(Calendar.MINUTE, 4);
		cal.add(Calendar.SEC<fim_middle>", Maintenance status */, Count of records
"<fim_prefix>),
				rec[Address.OFF_GREEN_METER_2] & 0xFF);
			if(recs > 0 && TimeSteward.currentTimeMillis() < newest)
				return this;
			else
				return null;
		}
	}

	/** Update meter with the most recent 5-minute green count */
	private void updateGreenCount(RampMeterImpl meter, int g) {
		if (meter != null) {
			meter.updateGreenCount5(getStamp(),
				adjustGreenCount(meter, g));
		}
	}

	/**<fim_suffix>
	@Override
	public void cleanup() {
		if (isSuccess())
			setMaintStatus(maint);
		super.cleanup();
	}
}
<fim_middle>", Cleanup the operation */, Adjust green count to
"<fim_prefix>.tms.server.comm.CommMessage;
import us.mn.state.dot.tms.server.comm.ControllerException;
import us.mn.state.dot.tms.server.comm.PriorityLevel;

/**
 * Operation to query 5-minute sample data + meter green counts
 *
 * @author Douglas Lau
 */
public class OpQuerySamples5Min extends OpQuerySamples {

	/** Sample period (seconds) */
	static public final int SAMPLE_PERIOD_SEC = 300;

	/**<fim_suffix>
	static private final int MAX_SCANS = 18000;

	/** Maximum number of records to read with ""BAD TIMESTAMP"" errors */
	static private final int MAX_BAD_RECORDS = 5;

	/** Oldest time stamp to accept from controller */
	private final long oldest;

	/** Newest timestamp to accept from controller */
	private final long newest;

	/** Count of records with ""BAD TIMESTAMP"" errors */
	protecte<fim_middle>", Maximum number of scans in 5 minutes */, Maximum number of scans to read from controller
"<fim_prefix>mport us.mn.state.dot.tms.server.comm.PriorityLevel;

/**
 * Operation to query 5-minute sample data + meter green counts
 *
 * @author Douglas Lau
 */
public class OpQuerySamples5Min extends OpQuerySamples {

	/** Sample period (seconds) */
	static public final int SAMPLE_PERIOD_SEC = 300;

	/** Maximum number of scans in 5 minutes */
	static private final int MAX_SCANS = 18000;

	/**<fim_suffix>
	static private final int MAX_BAD_RECORDS = 5;

	/** Oldest time stamp to accept from controller */
	private final long oldest;

	/** Newest timestamp to accept from controller */
	private final long newest;

	/** Count of records with ""BAD TIMESTAMP"" errors */
	protected int n_bad = 0;

	/** Maintenance status */
	private String maint = """";

	/** Create a new 5-minute data operation <fim_middle>"," Maximum number of records to read with ""BAD TIMESTAMP"" errors */", Maximum number of bad records in 5 minutes */
"<fim_prefix>al.setTimeInMillis(getStamp());
		cal.add(Calendar.MINUTE, 4);
		cal.add(Calendar.SECOND, 20);
		newest = cal.getTimeInMillis();
	}

	/** Create the first phase of the operation */
	@Override
	protected Phase<MndotProperty> phaseOne() {
		return new GetNextRecord();
	}

	/** Phase to get the next sample data record */
	protected class GetNextRecord extends Phase<MndotProperty> {

		/**<fim_suffix>
		private byte[] rec;

		/** Try to get and delete the next record */
		private int tryNextRecord(CommMessage<MndotProperty> mess)
			throws IOException
		{
			BinnedDataProperty bin = new BinnedDataProperty();
			mess.add(bin);
			mess.queryProps();
			setStamp(bin.getStamp());
			rec = bin.getRecord();
			// Delete the record from the controller
			mess.storeProps();
			return bin.g<fim_middle>", Binned data record */, Try to get and delete
"<fim_prefix>D_SEC = 300;

	/** Maximum number of scans in 5 minutes */
	static private final int MAX_SCANS = 18000;

	/** Maximum number of records to read with ""BAD TIMESTAMP"" errors */
	static private final int MAX_BAD_RECORDS = 5;

	/** Oldest time stamp to accept from controller */
	private final long oldest;

	/** Newest timestamp to accept from controller */
	private final long newest;

	/**<fim_suffix>
	protected int n_bad = 0;

	/** Maintenance status */
	private String maint = """";

	/** Create a new 5-minute data operation */
	public OpQuerySamples5Min(ControllerImpl c) {
		super(PriorityLevel.DATA_5_MIN, c);
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(getStamp());
		cal.add(Calendar.DATE, -1);
		oldest = cal.getTimeInMillis();
		cal.setTimeInMillis(getStamp());<fim_middle>"," Count of records with ""BAD TIMESTAMP"" errors */", Number of bad records */
"<fim_prefix>mport java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import us.mn.state.dot.sched.TimeSteward;
import us.mn.state.dot.tms.server.ControllerImpl;
import us.mn.state.dot.tms.server.RampMeterImpl;
import us.mn.state.dot.tms.server.comm.CommMessage;
import us.mn.state.dot.tms.server.comm.ControllerException;
import us.mn.state.dot.tms.server.comm.PriorityLevel;

/**<fim_suffix>
public class OpQuerySamples5Min extends OpQuerySamples {

	/** Sample period (seconds) */
	static public final int SAMPLE_PERIOD_SEC = 300;

	/** Maximum number of scans in 5 minutes */
	static private final int MAX_SCANS = 18000;

	/** Maximum number of records to read with ""BAD TIMESTAMP"" errors */
	static private final int MAX_BAD_RECORDS = 5;

	/** Oldest time stamp to accept from<fim_middle>","
 * Operation to query 5-minute sample data + meter green counts
 *
 * @author Douglas Lau
 */","
 * Query samples for 5 minute intervals.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>
package jdplus.sa.base.core.extractors;

import jdplus.toolkit.base.api.information.InformationExtractor;
import jdplus.toolkit.base.api.information.InformationMapping;
import jdplus.sa.base.api.SaDictionaries;
import jdplus.toolkit.base.api.timeseries.TsData;
import jdplus.sa.base.core.SaBenchmarkingResults;
import nbbrd.service.ServiceProvider;

/**
 *
 * @author palatej
 */
@Servic<fim_middle>","
 * Copyright 2022 National Bank of Belgium
 *
 * Licensed under the EUPL, Version 1.2 or â€“ as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the ""Licence"");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 *
 * https://joinup.ec.europa.eu/software/page/eupl
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an ""AS IS"" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */","*
 *
 * @author palatej
 */"
"<fim_prefix>limitations under the Licence.
 */
package jdplus.sa.base.core.extractors;

import jdplus.toolkit.base.api.information.InformationExtractor;
import jdplus.toolkit.base.api.information.InformationMapping;
import jdplus.sa.base.api.SaDictionaries;
import jdplus.toolkit.base.api.timeseries.TsData;
import jdplus.sa.base.core.SaBenchmarkingResults;
import nbbrd.service.ServiceProvider;

/**<fim_suffix>
@ServiceProvider(InformationExtractor.class)
public class SaBenchmarkingExtractor extends InformationMapping<SaBenchmarkingResults> {

    @Override
    public Class getSourceClass() {
        return SaBenchmarkingResults.class;
    }


    public SaBenchmarkingExtractor() {

        set(SaDictionaries.ORIGINAL, TsData.class, source -> source.getSa());
        set(SaDictionaries.TARGE<fim_middle>","
 *
 * @author palatej
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package smartblob.blobs.layeredzigzag;

public abstract class Adjacent{
	//TODO rename this AdjacentCornersAndTris to AdjacentsTriAndCorner
	
	/** starts full of nulls. Size is for all adjacent to fit.
	TODO first 2 adjacent corners are in same layer.
	*/
	public final CornerData adjacentCorners[];

	public final LineData adjacentLines[];

	/** starts full of nulls. Size is for all ad<fim_middle>", Ben F Rayfield offers this software opensource GNU GPL 2+ */,"
 * @author <NAME>
 *
 */"
"<fim_prefix>s Adjacent{
	//TODO rename this AdjacentCornersAndTris to AdjacentsTriAndCorner
	
	/** starts full of nulls. Size is for all adjacent to fit.
	TODO first 2 adjacent corners are in same layer.
	*/
	public final CornerData adjacentCorners[];

	public final LineData adjacentLines[];

	/** starts full of nulls. Size is for all adjacent to fit. */
	public final TriData adjacentTris[];

	/**<fim_suffix>
	public abstract void connectAdjacent();

	public Adjacent(int adjacentTris, int adjacentLines, int adjacentCorners){
		this.adjacentTris = new TriData[adjacentTris];
		this.adjacentLines = new LineData[adjacentLines];
		this.adjacentCorners = new CornerData[adjacentCorners];
	}

}
<fim_middle>", fills in the adjacentCorners and adjacentTris arrays which start as containing nulls */, starts full of nulls. Size is for all adjacent to fit. */
"<fim_prefix>/** Ben F Rayfield offers this software opensource GNU GPL 2+ */
package smartblob.blobs.layeredzigzag;

public abstract class Adjacent{
	//TODO rename this AdjacentCornersAndTris to AdjacentsTriAndCorner
	
	/**<fim_suffix>
	public final CornerData adjacentCorners[];

	public final LineData adjacentLines[];

	/** starts full of nulls. Size is for all adjacent to fit. */
	public final TriData adjacentTris[];

	/** fills in the adjacentCorners and adjacentTris arrays which start as containing nulls */
	public abstract void connectAdjacent();

	public Adjacent(int adjacentTris, int adjacentLines, int adjace<fim_middle>"," starts full of nulls. Size is for all adjacent to fit.
	TODO first 2 adjacent corners are in same layer.
	*/", starts full of nulls. Size is for all adjacent to fit. */
"<fim_prefix>rs this software opensource GNU GPL 2+ */
package smartblob.blobs.layeredzigzag;

public abstract class Adjacent{
	//TODO rename this AdjacentCornersAndTris to AdjacentsTriAndCorner
	
	/** starts full of nulls. Size is for all adjacent to fit.
	TODO first 2 adjacent corners are in same layer.
	*/
	public final CornerData adjacentCorners[];

	public final LineData adjacentLines[];

	/**<fim_suffix>
	public final TriData adjacentTris[];

	/** fills in the adjacentCorners and adjacentTris arrays which start as containing nulls */
	public abstract void connectAdjacent();

	public Adjacent(int adjacentTris, int adjacentLines, int adjacentCorners){
		this.adjacentTris = new TriData[adjacentTris];
		this.adjacentLines = new LineData[adjacentLines];
		this.adjacentCorners = new CornerD<fim_middle>", starts full of nulls. Size is for all adjacent to fit. */, starts full of nulls. Size is for all adjacent to fit.
"<fim_prefix>package com.problem.solving.leetcode;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class PalindromeNumber {

    public boolean isPalindrome(int input) {

        List<Integer> digits = new ArrayList<Integer>();

        if (input < 0) {
            return false;
        }

        while (input > 0) {
            int digit = input % 10;

            digits.add(digit);
            input = input/10;
        }

        int size       = digits.size();
        int<fim_middle>","
 * Determine whether an integer is a palindrome. An integer is a palindrome when
 * it reads the same backward as forward.
 *
 * Example 1:
 * Input: 121
 * Output: true
 *
 * Example 2:
 * Input: -121
 * Output: false
 * Explanation: From left to right, it reads -121. From right to left, it becomes 121-.
 * Therefore it is not a palindrome.
 *
 * Example 3:
 * Input: 10
 * Output: false
 * Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 * Follow up:
 *
 * Coud you solve it without converting the integer to a string?
 */","
 * @author rachita
 *         Palindrome Number
 *         https://leetcode.com/problems/palindrome-number/
 *         https://www.geeksforgeeks.org/check-if-a-number-is-palindrome/
 *         https://www.geeksforgeeks.org/check-if-a-number-is-palindrome-in-java/
 */"
"<fim_prefix>/**<fim_suffix>
package richtercloud.document.scanner.ocr;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import richtercloud.document.scanner.ifaces.OCREngineRecognitionException;
import richtercloud.message.handler.ExceptionMessage;
import richtercloud.message.handler.IssueHan<fim_middle>","
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>ied {@code tesseract} command is available and
     * accessible/executable
     * @param binary the command to check
     * @return the {@link IOException} which is presumed to have cause the
     * absence of the tesseact binary {@code tesseract}
     * @throws InterruptedException if an {@code InterruptedException} occurs during {@link Runtime#exec(java.lang.String) }
     */
    /*<fim_suffix>
    public static IOException checkBinaryAvailable(String binary) throws InterruptedException {
        try {
            new ProcessBuilder(binary).start().waitFor();
            return null;
        }catch(IOException ex) {
            return ex;
        }
    }

    public static void checkBinaryAvailableExceptions(String binary,
            IssueHandler issueHandler) throws Binary<fim_middle>","
    internal implementation notes:
    - returns the exception which is presumed to indicate the absense of the
    binary. This allows to examine the exception by callers and eventually to
    distinguish
    IOExceptions which are proof of absense of the binary and unrelated
    IOExceptions which might be thrown and need to be handled by caller
    */","*
     * Checks if the given {@code binary} is available and executable
     * @param binary the command to check
     * @param issueHandler the {@link IssueHandler} to use for reporting issues
     * @return the {@link IOException} which is presumed to have cause the
     * absence of the tesseact binary {@code "
"<fim_prefix>ichtercloud.document.scanner.ocr;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import richtercloud.document.scanner.ifaces.OCREngineRecognitionException;
import richtercloud.message.handler.ExceptionMessage;
import richtercloud.message.handler.IssueHandler;

/**<fim_suffix>
public abstract class ProcessOCREngine<C extends ProcessOCREngineConf> extends CachedOCREngine<C> {
    private final static Logger LOGGER = LoggerFactory.getLogger(ProcessOCREngine.class);

    /**
     * checks whether the specified {@code tesseract} command is available and
     * accessible/executable
     * @param binary the command to check
     * @return the {@link IOException}<fim_middle>","
 *
 * @author richter
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>document.scanner.ifaces.OCREngineRecognitionException;
import richtercloud.message.handler.ExceptionMessage;
import richtercloud.message.handler.IssueHandler;

/**
 *
 * @author richter
 */
public abstract class ProcessOCREngine<C extends ProcessOCREngineConf> extends CachedOCREngine<C> {
    private final static Logger LOGGER = LoggerFactory.getLogger(ProcessOCREngine.class);

    /**<fim_suffix>
    /*
    internal implementation notes:
    - returns the exception which is presumed to indicate the absense of the
    binary. This allows to examine the exception by callers and eventually to
    distinguish
    IOExceptions which are proof of absense of the binary and unrelated
    IOExceptions which might be thrown and need to be handled by caller
    */
    public static IOExc<fim_middle>","
     * checks whether the specified {@code tesseract} command is available and
     * accessible/executable
     * @param binary the command to check
     * @return the {@link IOException} which is presumed to have cause the
     * absence of the tesseact binary {@code tesseract}
     * @throws InterruptedException if an {@code InterruptedException} occurs during {@link Runtime#exec(java.lang.String) }
     */","
     *
     * @param conf
     * @param issueHandler
     * @param cache
     */"
"<fim_prefix>package org.geoatlas.metadata.endpoint;

import org.geoatlas.metadata.model.SpatialReferenceInfo;
import org.geoatlas.metadata.persistence.managent.SpatialReferenceInfoManagement;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

/**<fim_suffix>
@RestController
@RequestMapping(""/v1/metadata/spatial_refs"")
public class SpatialReferenceInfoEndpoint {

    private final SpatialReferenceInfoManagement management;

    public SpatialReferenceInfoEndpoint(SpatialReferenceInfoManagement management) {
        this.management = management;
    }

    @GetMapping(""/page"")
    public ResponseEntity<?> pageSpatialReferenceInfo(@RequestPa<fim_middle>","
 * @author: <a href=""mailto:thread.zhou@gmail.com"">Fuyi</a>
 * @time: 2024/5/24 18:43
 * @since: 1.0
 **/","
 * @author <NAME>
 */"
"<fim_prefix>package cx.ath.jbzdak.common.nativeUtils;

import cx.ath.jbzdak.common.fakeEnum.FakeEnum;
import junit.framework.Test;

import java.util.Map;
import java.util.NavigableMap;

/**<fim_suffix>
public class TestMaskedEnum extends MaskedEnum{

   public static final TestMaskedEnum A0 = new TestMaskedEnum(1);
   public static final TestMaskedEnum A1 = new TestMaskedEnum(2);
   public static final TestMaskedEnum A2 = new TestMaskedEnum(4);
   public static final TestMaskedEnum MASK = new TestMaskedEnum(3);

   public static final MaskedFakeEnum<TestMaskedEnum> FAKE_ENUM = new M<fim_middle>","
 * Created by: Jacek Bzdak
 */","
 * Created by alex on 3/29/17"
"<fim_prefix>/*<fim_suffix>
package org.esa.beam;

public class TestNotExecutableException extends RuntimeException {

    private static final long serialVersionUID = 1L;

    /**
     * Constructs a <code>TestNotExecutableException</code> with no detail message.
     */
    public TestNotExecutableException() {
    }

    /**
     * Constructs a <code>TestNotExecutableException</code> with the specified detail<fim_middle>","
 * Copyright (C) 2010 Brockmann Consult GmbH (info@brockmann-consult.de)
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or (at your option)
 * any later version.
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see http://www.gnu.org/licenses/
 */","*
 * @author <NAME>
 */"
"<fim_prefix>ublic License along
 * with this program; if not, see http://www.gnu.org/licenses/
 */
package org.esa.beam;

public class TestNotExecutableException extends RuntimeException {

    private static final long serialVersionUID = 1L;

    /**
     * Constructs a <code>TestNotExecutableException</code> with no detail message.
     */
    public TestNotExecutableException() {
    }

    /**<fim_suffix>
    public TestNotExecutableException(String s) {
        super(s);
    }

    /**
     * Constructs a <code>TestNotExecutableException</code> for the givne exception.
     *
     * @param e the exception which caused the test to fail
     */
    public TestNotExecutableException(Exception e) {
        super(e == null ? null : e.getClass().getName() + "": "" + e.getMessage());
    }
}
<fim_middle>","
     * Constructs a <code>TestNotExecutableException</code> with the specified detail message.
     *
     * @param s the detail message.
     */","
     * Constructs a <code>TestNotExecutableException</code> with the specified detail message.
     *
     * @param s the detail message
     */"
"<fim_prefix> FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, see http://www.gnu.org/licenses/
 */
package org.esa.beam;

public class TestNotExecutableException extends RuntimeException {

    private static final long serialVersionUID = 1L;

    /**<fim_suffix>
    public TestNotExecutableException() {
    }

    /**
     * Constructs a <code>TestNotExecutableException</code> with the specified detail message.
     *
     * @param s the detail message.
     */
    public TestNotExecutableException(String s) {
        super(s);
    }

    /**
     * Constructs a <code>TestNotExecutableException</code> for the givne exception.
     *
     * @p<fim_middle>","
     * Constructs a <code>TestNotExecutableException</code> with no detail message.
     */","
     * Constructs a <code>TestNotExecutableException</code> with no detail message.
     */"
"<fim_prefix>;

    /**
     * Constructs a <code>TestNotExecutableException</code> with no detail message.
     */
    public TestNotExecutableException() {
    }

    /**
     * Constructs a <code>TestNotExecutableException</code> with the specified detail message.
     *
     * @param s the detail message.
     */
    public TestNotExecutableException(String s) {
        super(s);
    }

    /**<fim_suffix>
    public TestNotExecutableException(Exception e) {
        super(e == null ? null : e.getClass().getName() + "": "" + e.getMessage());
    }
}
<fim_middle>","
     * Constructs a <code>TestNotExecutableException</code> for the givne exception.
     *
     * @param e the exception which caused the test to fail
     */","
     * Constructs a <code>TestNotExecutableException</code> with the specified detail message and cause.
     *
     * @param s the detail message.
     * @param e the cause.
"
"<fim_prefix>/**<fim_suffix>
package it.regioneveneto.mygov.payment.mypay4.ws.iface.fesp;

import gov.telematici.pagamenti.ws.PaaAttivaRPT;
import gov.telematici.pagamenti.ws.PaaAttivaRPTRisposta;
import gov.telematici.pagamenti.ws.PaaVerificaRPT;
import gov.telematici.pagamenti.ws.PaaVerificaRPTRisposta;
import gov.telematici.pagamenti.ws.ppthead.IntestazionePPT;

public interface PagamentiTelematiciCCP {
  PaaV<fim_middle>","
 *     MyPay - Payment portal of Regione Veneto.
 *     Copyright (C) 2022  Regione Veneto
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Affero General Public License as
 *     published by the Free Software Foundation, either version 3 of the
 *     License, or (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Affero General Public License for more details.
 *
 *     You should have received a copy of the GNU Affero General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package org.fseek.simon.gameone.parse;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Optional;

import org.fseek.simon.gameone.util.Check;
import org.fseek.simon.gameone<fim_middle>","*****************************************************************************
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *******************************************************************************/","
 * @author Simon
 *
 */"
"<fim_prefix>o.UnsupportedEncodingException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Optional;

import org.fseek.simon.gameone.util.Check;
import org.fseek.simon.gameone.util.ErrorUtil;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;

/**<fim_suffix>
public class CachedURLParser implements URLParser {
    private static final String CHARSET = ""UTF-8"";

    private final Optional<Path> cacheDir;
    private final URLParser delegate;

    public CachedURLParser(URLParser delegate) {
        this(delegate, null);
    }

    public CachedURLParser(URLParser delegate, Path cacheDir) {
        Check.requireNonNull(delegate);
        thi<fim_middle>","
 * Url parser which tries to read the data from the filesystem when a cache
 * directory was specified. When not cache file exists the cache will be
 * generated by writing the online resource to the specified cache directory.
 *
 * This prevents unnecessary roundtrips to the online resource when testing.
 */","
 * A {@link URLParser} that caches the result of the {@link #parse(String)} method.
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package blcmm.gui.components;

import blcmm.gui.FontInfo;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JToolTip;

/**
 * An extension to JCheckBox which supports scaling the tooltip font based on
 * the user's font-size selection.  (Only really needed for sessions in which
 * the user's changing the size dynamically.)
 *
 * @auth<fim_middle>","
 * Copyright (C) 2023 Christopher J. Kucera
 *
 * OpenBLCMM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>RPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 */
package blcmm.gui.components;

import blcmm.gui.FontInfo;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JToolTip;

/**<fim_suffix>
public class FontInfoJCheckBox extends JCheckBox {

    private final FontInfo fontInfo;

    public FontInfoJCheckBox(FontInfo fontInfo) {
        super();
        this.fontInfo = fontInfo;
    }

    public FontInfoJCheckBox(Action a, FontInfo fontInfo) {
        super(a);
        this.fontInfo = fontInfo;
    }

    public FontInfoJCheckBox(Icon icon, FontInfo fontInfo) {
        s<fim_middle>","
 * An extension to JCheckBox which supports scaling the tooltip font based on
 * the user's font-size selection.  (Only really needed for sessions in which
 * the user's changing the size dynamically.)
 *
 * @author apocalyptech
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>


package org.polarsys.eplmp.core.exceptions;

import java.text.MessageFormat;

/**
 * @author Morgan Guimard
 */
public class IndexerRequestException extends ApplicationException {

    private String error;

    public IndexerRequestException(String error) {
        super();
        this.error = error;
    }

    public IndexerRequestException(String error, Throwable cause) {
      <fim_middle>","*****************************************************************************
 * Copyright (c) 2017-2019 DocDoku.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    DocDoku - initial API and implementation
 *******************************************************************************/","
 * @author Morgan Guimard
 */"
"<fim_prefix>under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    DocDoku - initial API and implementation
 *******************************************************************************/


package org.polarsys.eplmp.core.exceptions;

import java.text.MessageFormat;

/**<fim_suffix>
public class IndexerRequestException extends ApplicationException {

    private String error;

    public IndexerRequestException(String error) {
        super();
        this.error = error;
    }

    public IndexerRequestException(String error, Throwable cause) {
        super(cause);
        this.error = error;
    }

    @Override
    public String getLocalizedMessage() {
       <fim_middle>","
 * @author Morgan Guimard
 */","
 * Exception thrown when an error occurs during indexing"
"<fim_prefix>/*<fim_suffix>

package ch.threema.domain.protocol.csp.messages.voip.features;

/**
 * Indicate that this client supports video calls.
 */
public class VideoFeature extends SimpleCallFeature {
	public static String NAME = ""video"";
	public VideoFeature() {
		super(NAME);
	}
}
<fim_middle>","  _____ _
 * |_   _| |_  _ _ ___ ___ _ __  __ _
 *   | | |'\| '_/ -_) -_)' \/ _` |_
 *   |_| |_||_|_| \___\___|_|_|_\__,_(_)
 *
 * Threema for Android
 * Copyright (c) 2020-2024 Threema GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */","*
 * Copyright 2017 - 2021 Threema GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License."
"<fim_prefix>RRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

package ch.threema.domain.protocol.csp.messages.voip.features;

/**<fim_suffix>
public class VideoFeature extends SimpleCallFeature {
	public static String NAME = ""video"";
	public VideoFeature() {
		super(NAME);
	}
}
<fim_middle>","
 * Indicate that this client supports video calls.
 */","
 * Video feature
 *
 * @see <a href"
"<fim_prefix>package com.github.bordertech.wcomponents.container;

import com.github.bordertech.wcomponents.Headers;
import com.github.bordertech.wcomponents.WebUtilities;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;

/**<fim_suffix>
public final class PageContentHelper {

	private static final String OPEN_JAVASCRIPT = ""\n<script type=\""text/javascript\"">"";

	private static final String CLOSE_JAVASCRIPT = ""\n</script>"";

	/**
	 * Prevent instance creation because this class only contains static utility methods.
	 */
	private PageContentHelper() {
	}

	/**
	 * Shortcut method for adding all the headline entries sto<fim_middle>","
 * Static utility methods used in construction of WComponent web pages.
 *
 * @author Martin Shevchenko
 * @since 1.0.0
 */","
 * Helper for adding page content.
 *
 * @author <NAME>
 * @since 1.0.0
 */"
"<fim_prefix>b pages.
 *
 * @author Martin Shevchenko
 * @since 1.0.0
 */
public final class PageContentHelper {

	private static final String OPEN_JAVASCRIPT = ""\n<script type=\""text/javascript\"">"";

	private static final String CLOSE_JAVASCRIPT = ""\n</script>"";

	/**
	 * Prevent instance creation because this class only contains static utility methods.
	 */
	private PageContentHelper() {
	}

	/**<fim_suffix>
	public static void addAllHeadlines(final PrintWriter writer, final Headers headers) {
		PageContentHelper.addHeadlines(writer, headers.getHeadLines());
		PageContentHelper.addJsHeadlines(writer, headers.getHeadLines(Headers.JAVASCRIPT_HEADLINE));
		PageContentHelper.addCssHeadlines(writer, headers.getHeadLines(Headers.CSS_HEADLINE));
	}

	/**
	 * Add a list of html headline entries i<fim_middle>","
	 * Shortcut method for adding all the headline entries stored in the WHeaders.
	 *
	 * @param writer the writer to write to.
	 * @param headers contains all the headline entries.
	 */","
	 * Add a list of html headline entries i.e. &lt;h1&gt;...&lt;/h1&gt; to the given writer.
	 *
	 * @param writer  "
"<fim_prefix>rs contains all the headline entries.
	 */
	public static void addAllHeadlines(final PrintWriter writer, final Headers headers) {
		PageContentHelper.addHeadlines(writer, headers.getHeadLines());
		PageContentHelper.addJsHeadlines(writer, headers.getHeadLines(Headers.JAVASCRIPT_HEADLINE));
		PageContentHelper.addCssHeadlines(writer, headers.getHeadLines(Headers.CSS_HEADLINE));
	}

	/**<fim_suffix>
	public static void addHeadlines(final PrintWriter writer, final List headlines) {
		if (headlines == null || headlines.isEmpty()) {
			return;
		}

		writer.write(""\n<!-- Start general headlines -->"");

		Iterator iter = headlines.iterator();
		while (iter.hasNext()) {
			String line = (String) iter.next();
			writer.write(""\n"" + line);
		}

		writer.println(""\n<!-- End general headl<fim_middle>","
	 * Add a list of html headline entries intended to be added only once to the page.
	 *
	 * @param writer the writer to write to.
	 * @param headlines a list of html entries to be added to the page as a whole.
	 */","
	 * Adds the headlines to the given writer.
	 * 
	 * @param writer
	 *            The writer to add the headlines to.
	 * @param headlines
	 *        "
"<fim_prefix>Headlines == null || jsHeadlines.isEmpty()) {
			return;
		}

		writer.println();
		writer.write(""\n<!-- Start javascript headlines -->""
				+ OPEN_JAVASCRIPT);

		for (Iterator iter = jsHeadlines.iterator(); iter.hasNext();) {
			String line = (String) iter.next();
			writer.write(""\n"" + line);
		}

		writer.write(CLOSE_JAVASCRIPT
				+ ""\n<!-- End javascript headlines -->"");
	}

	/**<fim_suffix>
	public static void addCssHeadlines(final PrintWriter writer, final List cssHeadlines) {
		if (cssHeadlines == null || cssHeadlines.isEmpty()) {
			return;
		}

		writer.write(""<!-- Start css headlines -->""
				+ ""\n<style type=\"""" + WebUtilities.CONTENT_TYPE_CSS + ""\"" media=\""screen\"">"");

		for (Iterator iter = cssHeadlines.iterator(); iter.hasNext();) {
			String line = (String) it<fim_middle>","
	 * Add a list of css headline entries intended to be added only once to the page.
	 *
	 * @param writer the writer to write to.
	 * @param cssHeadlines a list of css entries to be added to the page as a whole.
	 */","  Added support for css headlines  /*
 * Copyright (c) 2010-2011 <NAME> (frankee.zhou at gmail dot com)
 *
 * Distributed under under the Apache License, version 2.0 (the ""License"").
 * you may not use this file except"
"<fim_prefix>.PrintWriter;
import java.util.Iterator;
import java.util.List;

/**
 * Static utility methods used in construction of WComponent web pages.
 *
 * @author Martin Shevchenko
 * @since 1.0.0
 */
public final class PageContentHelper {

	private static final String OPEN_JAVASCRIPT = ""\n<script type=\""text/javascript\"">"";

	private static final String CLOSE_JAVASCRIPT = ""\n</script>"";

	/**<fim_suffix>
	private PageContentHelper() {
	}

	/**
	 * Shortcut method for adding all the headline entries stored in the WHeaders.
	 *
	 * @param writer the writer to write to.
	 * @param headers contains all the headline entries.
	 */
	public static void addAllHeadlines(final PrintWriter writer, final Headers headers) {
		PageContentHelper.addHeadlines(writer, headers.getHeadLines());
		PageCon<fim_middle>","
	 * Prevent instance creation because this class only contains static utility methods.
	 */","
	 * Adds all the headline entries stored in the WHeaders.
	 *
"
"<fim_prefix> addHeadlines(final PrintWriter writer, final List headlines) {
		if (headlines == null || headlines.isEmpty()) {
			return;
		}

		writer.write(""\n<!-- Start general headlines -->"");

		Iterator iter = headlines.iterator();
		while (iter.hasNext()) {
			String line = (String) iter.next();
			writer.write(""\n"" + line);
		}

		writer.println(""\n<!-- End general headlines -->"");
	}

	/**<fim_suffix>
	public static void addJsHeadlines(final PrintWriter writer, final List jsHeadlines) {
		if (jsHeadlines == null || jsHeadlines.isEmpty()) {
			return;
		}

		writer.println();
		writer.write(""\n<!-- Start javascript headlines -->""
				+ OPEN_JAVASCRIPT);

		for (Iterator iter = jsHeadlines.iterator(); iter.hasNext();) {
			String line = (String) iter.next();
			writer.write(""\n"" + li<fim_middle>","
	 * Add a list of javascript headline entries intended to be added only once to the page.
	 *
	 * @param writer the writer to write to.
	 * @param jsHeadlines a list of javascript entries to be added to the page as a whole.
	 */","
	 * Adds the headlines to the given writer.
	 * 
	 * @param writer
	 *            the writer to add the headlines to
	 * @param headlines
	 *           "
"<fim_prefix>package com.mozilla.telemetry.contextualservices;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;

/**<fim_suffix>
public class BuildReportingUrl {

  // API parameter names
  static final String PARAM_COUNTRY_CODE = ""country-code"";
  static final String PARAM_REGION_CODE = ""region-code"";
  static final String PARAM_OS_FAMILY = ""os-family"";
  // Slot-number is 1-indexed: the first item will have the index 1, not zero
  static final String PARAM_POSITION = ""slot-number"";
  static final String PARAM<fim_middle>","
 * Utility class for parsing and building contextual services reporting URLs.
 */","
 * Builds the URL for the Contextual Services API.
 */"
"<fim_prefix>+ reportingUrl);
    }
  }

  public void addQueryParam(String name, String value) {
    queryParams.put(name, value);
  }

  public String getQueryParam(String paramName) {
    return queryParams.get(paramName);
  }

  public Map<String, String> getQueryParams() {
    return queryParams;
  }

  public String getBaseUrl() {
    return reportingUrl.toString().split(""\\?"")[0];
  }

  /**<fim_suffix>
  public URL getReportingUrl() {
    // Generate query string from map sorted by key
    String queryString = queryParams
        .entrySet().stream().sorted(Map.Entry.comparingByKey()).map(entry -> String.format(""%s=%s"",
            entry.getKey(), entry.getValue() == null ? """" : entry.getValue()))
        .collect(Collectors.joining(""&""));

    try {
      return new URL(getBaseUrl(<fim_middle>","
   * Build reporting url by creating query param string (sorted by key).
   */","
   * Generate a URL from the base URL and the query string.
   *
"
"<fim_prefix>

import javax.xml.stream.util.StreamReaderDelegate;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.Buffer;

/**<fim_suffix>
public class Client {

    public static void main(String[] args) throws Exception {
        InputStreamReader isr = new InputStreamReader(System.in);
        BufferedReader br = new BufferedReader(isr);
        //for (String in = br.readLine();in!=null;) {
        while(true) {
            String in = br.readLine();
            if(in ==null) {
                break;
            }
   <fim_middle>","
 * Created by IntelliJ IDEA.
 * User: togelius
 * Date: //130910
 * Time: 14:19 PM
 */","
 * Created by zhangxiaofan on 2019/9/25.
 */"
"<fim_prefix>// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: MPL-2.0

/*<fim_suffix>

package it.bz.opendatahub.alpinebits.servlet;

import it.bz.opendatahub.alpinebits.middleware.Context;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * This interface defined methods to build a {@link Context}.
 */
public interface ContextBuilder {

    /**
     * Create a {@link Context} from the given {@link HttpServletRequest}, <fim_middle>","
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */","*
 * This interface defined methods to build a {@link Context}.
 */"
"<fim_prefix>Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

package it.bz.opendatahub.alpinebits.servlet;

import it.bz.opendatahub.alpinebits.middleware.Context;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**<fim_suffix>
public interface ContextBuilder {

    /**
     * Create a {@link Context} from the given {@link HttpServletRequest}, {@link HttpServletResponse}
     * and <code>requestId</code>.
     *
     * @param request   the {@link HttpServletRequest} can be e.g. stored in the created context
     * @param response  the {@link HttpServletResponse} can be e.g. stored in the created context
    <fim_middle>","
 * This interface defined methods to build a {@link Context}.
 */","
 * Interface for creating a {@link Context} from the given {@link"
"<fim_prefix>ed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

package it.bz.opendatahub.alpinebits.servlet;

import it.bz.opendatahub.alpinebits.middleware.Context;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * This interface defined methods to build a {@link Context}.
 */
public interface ContextBuilder {

    /**<fim_suffix>
    Context fromRequest(HttpServletRequest request, HttpServletResponse response, String requestId);

}
<fim_middle>","
     * Create a {@link Context} from the given {@link HttpServletRequest}, {@link HttpServletResponse}
     * and <code>requestId</code>.
     *
     * @param request   the {@link HttpServletRequest} can be e.g. stored in the created context
     * @param response  the {@link HttpServletResponse} can be e.g. stored in the created context
     * @param requestId the requestId  can be e.g. stored in the created context
     * @return the {@link Context} build using the parameters
     */","
     * Build a {@link Context} from the given request.
     *
     * @param request   the request
     * @param response  the response
     * @param requestId the request id
     * @return the context
     */"
"<fim_prefix>g"");

    /**
     * The recipe type name for smithing transform recipes.
     */
    public static final ResourceLocation SMITHING_TRANSFORM_RECIPE_TYPE = new ResourceLocation(""smithing_transform"");

    /**
     * The recipe type name for smithing trim recipes.
     */
    public static final ResourceLocation SMITHING_TRIM_RECIPE_TYPE = new ResourceLocation(""smithing_trim"");

    /**<fim_suffix>
    public static final ResourceLocation DECORATED_POT_RECIPE_TYPE = new ResourceLocation(""decorated_pot"");
}
<fim_middle>","
     * The recipe type name for decorated pot recipes.
     */","
     * The recipe type name for decorating pot recipes.
    "
"<fim_prefix>package com.ldtteam.aequivaleo.vanilla.api.util;

import net.minecraft.resources.ResourceLocation;

/**<fim_suffix>
public final class Constants
{

    private Constants()
    {
        throw new IllegalStateException(""Tried to initialize: Constants but this is a Utility class."");
    }

    /**
     * The recipe type name for simple recipes.
     */
    public static final ResourceLocation SIMPLE_RECIPE_TYPE = new ResourceLocation(""simple"");

    /**
     * The recipe type name for cooking recipes<fim_middle>","
 * Class to hold all the constants used by the vanilla plugin.
 */","
 * Constants used by the mod.
 */"
"<fim_prefix>YPE = new ResourceLocation(""simple"");

    /**
     * The recipe type name for cooking recipes.
     */
    public static final ResourceLocation COOKING_RECIPE_TYPE       = new ResourceLocation(""cooking"");

    /**
     * The recipe type name for smelting recipes.
     */
    public static final ResourceLocation STONE_CUTTING_RECIPE_TYPE = new ResourceLocation(""stonecutting"");

    /**<fim_suffix>
    public static final ResourceLocation SMITHING_TRANSFORM_RECIPE_TYPE = new ResourceLocation(""smithing_transform"");

    /**
     * The recipe type name for smithing trim recipes.
     */
    public static final ResourceLocation SMITHING_TRIM_RECIPE_TYPE = new ResourceLocation(""smithing_trim"");

    /**
     * The recipe type name for decorated pot recipes.
     */
    public static<fim_middle>","
     * The recipe type name for smithing transform recipes.
     */","
     * The recipe type name for smithing recipes.
     */"
"<fim_prefix>ll the constants used by the vanilla plugin.
 */
public final class Constants
{

    private Constants()
    {
        throw new IllegalStateException(""Tried to initialize: Constants but this is a Utility class."");
    }

    /**
     * The recipe type name for simple recipes.
     */
    public static final ResourceLocation SIMPLE_RECIPE_TYPE = new ResourceLocation(""simple"");

    /**<fim_suffix>
    public static final ResourceLocation COOKING_RECIPE_TYPE       = new ResourceLocation(""cooking"");

    /**
     * The recipe type name for smelting recipes.
     */
    public static final ResourceLocation STONE_CUTTING_RECIPE_TYPE = new ResourceLocation(""stonecutting"");

    /**
     * The recipe type name for smithing transform recipes.
     */
    public static final ResourceLo<fim_middle>","
     * The recipe type name for cooking recipes.
     */","
     * The recipe type name for shapeless recipes.
    "
"<fim_prefix>cooking"");

    /**
     * The recipe type name for smelting recipes.
     */
    public static final ResourceLocation STONE_CUTTING_RECIPE_TYPE = new ResourceLocation(""stonecutting"");

    /**
     * The recipe type name for smithing transform recipes.
     */
    public static final ResourceLocation SMITHING_TRANSFORM_RECIPE_TYPE = new ResourceLocation(""smithing_transform"");

    /**<fim_suffix>
    public static final ResourceLocation SMITHING_TRIM_RECIPE_TYPE = new ResourceLocation(""smithing_trim"");

    /**
     * The recipe type name for decorated pot recipes.
     */
    public static final ResourceLocation DECORATED_POT_RECIPE_TYPE = new ResourceLocation(""decorated_pot"");
}
<fim_middle>","
     * The recipe type name for smithing trim recipes.
     */","
     * The recipe type name for smithing trim recipes.
     */"
"<fim_prefix>ize: Constants but this is a Utility class."");
    }

    /**
     * The recipe type name for simple recipes.
     */
    public static final ResourceLocation SIMPLE_RECIPE_TYPE = new ResourceLocation(""simple"");

    /**
     * The recipe type name for cooking recipes.
     */
    public static final ResourceLocation COOKING_RECIPE_TYPE       = new ResourceLocation(""cooking"");

    /**<fim_suffix>
    public static final ResourceLocation STONE_CUTTING_RECIPE_TYPE = new ResourceLocation(""stonecutting"");

    /**
     * The recipe type name for smithing transform recipes.
     */
    public static final ResourceLocation SMITHING_TRANSFORM_RECIPE_TYPE = new ResourceLocation(""smithing_transform"");

    /**
     * The recipe type name for smithing trim recipes.
     */
    public st<fim_middle>","
     * The recipe type name for smelting recipes.
     */","
     * The recipe type name for stonecutting recipes.
     */"
"<fim_prefix>package com.ldtteam.aequivaleo.vanilla.api.util;

import net.minecraft.resources.ResourceLocation;

/**
 * Class to hold all the constants used by the vanilla plugin.
 */
public final class Constants
{

    private Constants()
    {
        throw new IllegalStateException(""Tried to initialize: Constants but this is a Utility class."");
    }

    /**<fim_suffix>
    public static final ResourceLocation SIMPLE_RECIPE_TYPE = new ResourceLocation(""simple"");

    /**
     * The recipe type name for cooking recipes.
     */
    public static final ResourceLocation COOKING_RECIPE_TYPE       = new ResourceLocation(""cooking"");

    /**
     * The recipe type name for smelting recipes.
     */
    public static final ResourceLocation STONE_CUTTING_REC<fim_middle>","
     * The recipe type name for simple recipes.
     */","
     * The recipe type name for simple recipes.
     */"
"<fim_prefix>/**<fim_suffix>
package ch.njol.skript.expressions;

import org.bukkit.entity.Entity;
import org.bukkit.entity.Projectile;
import org.bukkit.event.Event;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityDeathEvent;
import org.bukkit.event.vehicle.VehicleDamageEvent;
import org.bukkit.event.vehicle.VehicleD<fim_middle>","
 *   This file is part of Skript.
 *
 *  Skript is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Skript is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Skript.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright Peter Güttinger, SkriptLang team and contributors
 */","
 * Contains all event expressions.
 */"
"<fim_prefix>ript.doc.Examples;
import ch.njol.skript.doc.Name;
import ch.njol.skript.doc.Since;
import ch.njol.skript.lang.Expression;
import ch.njol.skript.lang.ExpressionType;
import ch.njol.skript.lang.SkriptParser.ParseResult;
import ch.njol.skript.lang.util.SimpleExpression;
import ch.njol.skript.log.ErrorQuality;
import ch.njol.skript.registrations.Classes;
import ch.njol.util.Kleenean;

/**<fim_suffix>
@Name(""Attacker"")
@Description({""The attacker of a damage event, e.g. when a player attacks a zombie this expression represents the player."",
		""Please note that the attacker can also be a block, e.g. a cactus or lava, but this expression will not be set in these cases.""})
@Examples({""on damage:"",
		""	attacker is a player"",
		""	health of attacker is less than or equal to 2"",
		""	damag<fim_middle>","
 * @author Peter Güttinger
 */","
 * @author <NAME>
 *
 *"
"<fim_prefix>/*<fim_suffix>
package eu.clarin.cmdi.vlo.service.impl;

import eu.clarin.cmdi.vlo.PIDUtils;
import eu.clarin.cmdi.vlo.service.PIDResolver;
import eu.clarin.cmdi.vlo.service.handle.impl.HandleRestApiClient;
import java.net.URI;
import java.net.URISyntaxException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Resolves DOIs via the DOI handle API
 *
 * @author Twan Goosen <twan@clar<fim_middle>","
 * Copyright (C) 2018 CLARIN
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */","*
 * Resolves DOIs via the DOI handle API
 *
 * @author Twan Goosen <twan@clarins.eu>
 */"
"<fim_prefix>
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package eu.clarin.cmdi.vlo.service.impl;

import eu.clarin.cmdi.vlo.PIDUtils;
import eu.clarin.cmdi.vlo.service.PIDResolver;
import eu.clarin.cmdi.vlo.service.handle.impl.HandleRestApiClient;
import java.net.URI;
import java.net.URISyntaxException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**<fim_suffix>
public class DOIResolver implements PIDResolver {

    private final static Logger logger = LoggerFactory.getLogger(DOIResolver.class);

    private final static String DOI_API_URL = ""https://doi.org/api/handles/"";
    private final HandleRestApiClient handleApiClient;

    public DOIResolver() {
        handleApiClient = new HandleRestApiClient(DOI_API_URL);
    }

    @Override
    <fim_middle>","
 * Resolves DOIs via the DOI handle API
 *
 * @author Twan Goosen <twan@clarin.eu>
 * @see HandleRestApiClient
 */","
 *
 * @author <NAME> <<EMAIL>>
 */"
"<fim_prefix>/**<fim_suffix>

package jx.compiler.nativecode;

final public class RegDouble implements Cloneable {

    public RegDouble() {
	throw new Error(""wrong RegFloat constuctor"");
    }

    public RegFloat getClone() {
	return null;
    }
}
<fim_middle>","
 * X86-Register for floating-point 
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>rder to update its title image.
 * 
 * @since 0.9.0
 * @author <a href=""mailto:alex.lagarde@obeo.fr"">Alex Lagarde</a>
 */
public class DRepresentationPermissionStatusListener implements IAuthorityListener {

    private DSemanticDecorator representation;

    private SessionListener editor;

    private DRepresentationPermissionStatusQuery dRepresentationPermissionStatusQuery;

    /**<fim_suffix>
    public DRepresentationPermissionStatusListener(DSemanticDecorator representation, SessionListener editor) {
        this.representation = representation;
        this.editor = editor;
        this.dRepresentationPermissionStatusQuery = new DRepresentationPermissionStatusQuery(representation);
    }

    /**
     * {@link org.eclipse.sirius.viewpoint.DSemanticDecorator} getter meth<fim_middle>","
     * Constructor.
     * 
     * @param representation
     *            the current {@link org.eclipse.sirius.viewpoint.DSemanticDecorator}.
     * @param editor
     *            the current editor.
     */","
     * Constructor.
     * 
     * @param representation the representation to listen to.
     * @param editor the editor to notify when the representation is updated.
     */"
"<fim_prefix>orator}.
     * @param editor
     *            the current editor.
     */
    public DRepresentationPermissionStatusListener(DSemanticDecorator representation, SessionListener editor) {
        this.representation = representation;
        this.editor = editor;
        this.dRepresentationPermissionStatusQuery = new DRepresentationPermissionStatusQuery(representation);
    }

    /**<fim_suffix>
    public DSemanticDecorator getRepresentation() {
        return representation;
    }

    /**
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission has been restricted.
     */
    public void notifyIsLocked(EObject lockedElement) {
        notifyIsLocked(Collections.singletonList(lockedElement));
    }

    /**
     * {@inheritDoc}
     * 
     * Notif<fim_middle>","
     * {@link org.eclipse.sirius.viewpoint.DSemanticDecorator} getter method.
     * 
     * @return this.representation
     */","
     * {@inheritDoc}
     * 
     * @see org.eclipse.ui.ISessionListener#sessionAboutToBeChanged(org.eclipse.ui.ISessionListener."
"<fim_prefix>     * @return this.representation
     */
    public DSemanticDecorator getRepresentation() {
        return representation;
    }

    /**
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission has been restricted.
     */
    public void notifyIsLocked(EObject lockedElement) {
        notifyIsLocked(Collections.singletonList(lockedElement));
    }

    /**<fim_suffix>
    public void notifyIsLocked(Collection<EObject> lockedElements) {
        IPermissionAuthority permissionAuthority = PermissionAuthorityRegistry.getDefault().getPermissionAuthority(representation);
        if (dRepresentationPermissionStatusQuery.isDSemanticDecoratorLockStatusNotification(lockedElements)) {
            LockStatus lockStatus = permissionAuthority.getLockStatus(repre<fim_middle>","
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission has been restricted.
     */","
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission has been restricted.
     */"
"<fim_prefix>ermissionAuthority permissionAuthority = PermissionAuthorityRegistry.getDefault().getPermissionAuthority(representation);
        if (dRepresentationPermissionStatusQuery.isDSemanticDecoratorLockStatusNotification(lockedElements)) {
            LockStatus lockStatus = permissionAuthority.getLockStatus(representation);
            changeUILockStatus(lockStatus);
        }
    }

    /**<fim_suffix>
    public void notifyIsReleased(EObject unlockedElement) {
        notifyIsReleased(Collections.singletonList(unlockedElement));
    }

    /**
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission have been granted.
     */
    public void notifyIsReleased(Collection<EObject> unlockedElements) {
        if (dRepresentationPermissionStatusQuery.isDSemantic<fim_middle>","
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission have been granted.
     */","
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission have been granted.
     */"
"<fim_prefix>pse.sirius.ecore.extender.business.api.permission.IAuthorityListener;
import org.eclipse.sirius.ecore.extender.business.api.permission.IPermissionAuthority;
import org.eclipse.sirius.ecore.extender.business.api.permission.LockStatus;
import org.eclipse.sirius.ecore.extender.business.api.permission.PermissionAuthorityRegistry;
import org.eclipse.sirius.viewpoint.DSemanticDecorator;

/**<fim_suffix>
public class DRepresentationPermissionStatusListener implements IAuthorityListener {

    private DSemanticDecorator representation;

    private SessionListener editor;

    private DRepresentationPermissionStatusQuery dRepresentationPermissionStatusQuery;

    /**
     * Constructor.
     * 
     * @param representation
     *            the current {@link org.eclipse.sirius.viewpoi<fim_middle>","
 * A permission status listener to notify the editor about permission authority
 * in order to update its title image.
 * 
 * @since 0.9.0
 * @author <a href=""mailto:alex.lagarde@obeo.fr"">Alex Lagarde</a>
 */","
 * This class is a {@link IAuthorityListener} that listens to the {@link DRepresentation} and updates the
 * {@link DRepresentationPermissionStatusQuery} accordingly.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>s lockStatus = permissionAuthority.getLockStatus(representation);
            changeUILockStatus(lockStatus);
        }
    }

    /**
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission have been granted.
     */
    public void notifyIsReleased(EObject unlockedElement) {
        notifyIsReleased(Collections.singletonList(unlockedElement));
    }

    /**<fim_suffix>
    public void notifyIsReleased(Collection<EObject> unlockedElements) {
        if (dRepresentationPermissionStatusQuery.isDSemanticDecoratorLockStatusNotification(unlockedElements)) {
            changeUILockStatus(LockStatus.NOT_LOCKED);
        }
    }

    /**
     * Notify the DialectEditor of changed LockStatus on its root element.
     * 
     * @param lockStatus
     *       <fim_middle>","
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission have been granted.
     */","
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission have been granted.
     */"
"<fim_prefix>   }

    /**
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission have been granted.
     */
    public void notifyIsReleased(Collection<EObject> unlockedElements) {
        if (dRepresentationPermissionStatusQuery.isDSemanticDecoratorLockStatusNotification(unlockedElements)) {
            changeUILockStatus(LockStatus.NOT_LOCKED);
        }
    }

    /**<fim_suffix>
    private void changeUILockStatus(LockStatus lockStatus) {
        int sessionListenerEvent = dRepresentationPermissionStatusQuery.getAssociatedSessionListenerEvent(lockStatus);
        if (sessionListenerEvent != -1) {
            editor.notify(sessionListenerEvent);
        }
    }
}
<fim_middle>","
     * Notify the DialectEditor of changed LockStatus on its root element.
     * 
     * @param lockStatus
     *            the {@link LockStatus} to indicate with which
     *            {@link SessionListener} event notify DialectEditor
     */","
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission have been revoked.
     */"
"<fim_prefix>/**<fim_suffix>
package org.eclipse.sirius.tools.api.permission;

import java.util.Collection;
import java.util.Collections;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.sirius.business.api.session.SessionListener;
import org.eclipse.sirius.ecore.extender.business.api.permission.IAuthorityListener;
import org.eclipse.sirius.ecore.extender.business.api.permission.IPermissionAuthority;
imp<fim_middle>","*****************************************************************************
 * Copyright (c) 2011 THALES GLOBAL SERVICES.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Obeo - initial API and implementation
 *******************************************************************************/","
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */"
"<fim_prefix>ation;
        this.editor = editor;
        this.dRepresentationPermissionStatusQuery = new DRepresentationPermissionStatusQuery(representation);
    }

    /**
     * {@link org.eclipse.sirius.viewpoint.DSemanticDecorator} getter method.
     * 
     * @return this.representation
     */
    public DSemanticDecorator getRepresentation() {
        return representation;
    }

    /**<fim_suffix>
    public void notifyIsLocked(EObject lockedElement) {
        notifyIsLocked(Collections.singletonList(lockedElement));
    }

    /**
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission has been restricted.
     */
    public void notifyIsLocked(Collection<EObject> lockedElements) {
        IPermissionAuthority permissionAuthority = PermissionAuthority<fim_middle>","
     * {@inheritDoc}
     * 
     * Notify the editor that the edition permission has been restricted.
     */","
     * {@link org.eclipse.sirius.viewpoint.DSemanticDecorator} setter method.
     * 
     * @"
"<fim_prefix>ublic double getScore(FieldInstance fieldA, FieldInstance fieldB, ClassEnvironment env) {
			return ClassifierUtil.compareMethodSets(fieldA.getWriteRefs(), fieldB.getWriteRefs(), true);
		}
	};

	private static AbstractClassifier position = new AbstractClassifier(""position"") {
		@Override
		public double getScore(FieldInstance fieldA, FieldInstance fieldB, ClassEnvironment env) {
			/*<fim_suffix>
			return ClassifierUtil.classifyPosition(fieldA, fieldB, MemberInstance::getPosition, (f, idx) -> f.getCls().getField(idx), f -> f.getCls().getFields());
		}
	};

	private static AbstractClassifier initValue = new AbstractClassifier(""init value"") {
		@Override
		public double getScore(FieldInstance fieldA, FieldInstance fieldB, ClassEnvironment env) {
			if (!checkAsmNodes(fieldA, fi<fim_middle>","if (fieldA.position == fieldB.position) return 1;

			double relPosA = ClassifierUtil.getRelativePosition(fieldA.position, fieldA.cls.fields.size());
			double relPosB = ClassifierUtil.getRelativePosition(fieldB.position, fieldB.cls.fields.size());

			return 1 - Math.abs(relPosA - relPosB);*/","*
			 * TODO: This is a hack.
			 * 
			 * We need to find a way to get the position of the field in the
			 * class.
			 */"
"<fim_prefix>package icse.bintree.set2;


import icse.bintree.BinTreeNode;


public class BinTreeInsert5Bug2Dx6Ix8Dx9Dx23I {

    /*<fim_suffix>
    public /*@nullable@*/icse.bintree.BinTreeNode root;

    public int size;

    public BinTreeInsert5Bug2Dx6Ix8Dx9Dx23I() {
    }

    /*@
    @ requires true;
    @
    @ ensures (\result == true) <==> (\exists BinTreeNode n;
    @		\reach(root, BinTreeNode, left+right).has(n) == true;
    @		n.key == k);
    @
    @ ensures (\forall BinTreeNode n;
    @		\reach(root, BinTreeNode,<fim_middle>","@
    @ invariant (\forall BinTreeNode n;
    @     \reach(root, BinTreeNode, left + right).has(n) == true;
    @     \reach(n.right, BinTreeNode, right + left).has(n) == false &&
    @     \reach(n.left, BinTreeNode, left + right).has(n) == false);
    @
    @ invariant (\forall BinTreeNode n;
    @     \reach(root, BinTreeNode, left + right).has(n) == true;
    @     (\forall BinTreeNode m;
    @     \reach(n.left, BinTreeNode, left + right).has(m) == true;
    @     m.key <= n.key) &&
    @     (\forall BinTreeNode m;
    @     \reach(n.right, BinTreeNode, left + right).has(m) == true;
    @     m.key > n.key));
    @
    @ invariant size == \reach(root, BinTreeNode, left + right).int_size();
    @
    @ invariant (\forall BinTreeNode n;
    @	  \reach(root, BinTreeNode, left + right).has(n) == true;
    @	  (n.left!= null ==> n.left.parent == n) && (n.right!= null ==> n.right.parent == n));
    @
    @ invariant root!= null ==> root.parent == null;
    @*/","*
     * @param k
     * @param x
     * @param y
     * @param z
     * @param w
     */"
"<fim_prefix>orall BinTreeNode n;
    @	  \reach(root, BinTreeNode, left + right).has(n) == true;
    @	  (n.left != null ==> n.left.parent == n) && (n.right != null ==> n.right.parent == n));
    @
    @ invariant root != null ==> root.parent == null;
    @*/
    public /*@nullable@*/icse.bintree.BinTreeNode root;

    public int size;

    public BinTreeInsert5Bug2Dx6Ix8Dx9Dx23I() {
    }

    /*<fim_suffix>
    public boolean contains( int k ) {
        icse.bintree.BinTreeNode current = root; //mutGenLimit 0
        //@decreasing \reach(current, BinTreeNode, left+right).int_size();
        while (current != null) { //mutGenLimit 0
            if (k < current.key) { //mutGenLimit 0
                current = current.left; //mutGenLimit 0
            } else {
                if (k > curren<fim_middle>","@
    @ requires true;
    @
    @ ensures (\result == true) <==> (\exists BinTreeNode n;
    @		\reach(root, BinTreeNode, left+right).has(n) == true;
    @		n.key == k);
    @
    @ ensures (\forall BinTreeNode n;
    @		\reach(root, BinTreeNode, left+right).has(n);
    @		\old(\reach(root, BinTreeNode, left+right)).has(n));
    @
    @ ensures (\forall BinTreeNode n;
    @		\old(\reach(root, BinTreeNode, left+right)).has(n);
    @		\reach(root, BinTreeNode, left+right).has(n));
    @
    @ signals (RuntimeException e) false;
    @*/","@
      @ requires root == null;
      @ ensures root == null;
      @*/"
"<fim_prefix>null) { //mutGenLimit 0
            root = x; //mutGenLimit 0
        } else {
            if (k < y.key) { //mutGenLimit 0
                y.left = x; //mutGenLimit 0
            } else {
                y.parent.right = x; //mutGenLimit 1
            }
        }
        x.parent = y; //mutGenLimit 0
        size += 1; //mutGenLimit 0
        return true; //mutGenLimit 0
    }

    /*<fim_suffix>
    public boolean remove( int element ) { //mutGenLimit 0
        icse.bintree.BinTreeNode node = root; //mutGenLimit 0
        while (node != null && node.key != element) { //mutGenLimit 0
            if (element < node.key) { //mutGenLimit 0
                node = node.left; //mutGenLimit 0
            } else {
                if (element > node.key) { //mutGenLimit 0
             <fim_middle>","@
    @ requires (\forall BinTreeNode n1;
    @		\reach(root, BinTreeNode, left+right).has(n1);
    @		(\forall BinTreeNode m1;
    @				\reach(root, BinTreeNode, left+right).has(m1); n1!= m1 ==> n1.key!= m1.key));
    @
    @ ensures (\exists BinTreeNode n2;
    @		\old(\reach(root, BinTreeNode, left + right)).has(n2) == true;
    @		\old(n2.key) == element)
    @				 <==> \result == true;
    @
    @ ensures (\forall BinTreeNode n3;
    @		\reach(root, BinTreeNode, left+right).has(n3);
    @		n3.key!= element);
    @
    @ signals (RuntimeException e) false;
    @*/","*
     * Removes the specified element from this tree if it is present (optional operation).
     *
     * @param element element to be removed from this tree, if present
     * @return {@code true} if this tree contained the specified element (or equivalently, if this tree
     * changed as a result of the call).
     */"
"<fim_prefix>   m.key > n.key));
    @
    @ invariant size == \reach(root, BinTreeNode, left + right).int_size();
    @
    @ invariant (\forall BinTreeNode n;
    @	  \reach(root, BinTreeNode, left + right).has(n) == true;
    @	  (n.left != null ==> n.left.parent == n) && (n.right != null ==> n.right.parent == n));
    @
    @ invariant root != null ==> root.parent == null;
    @*/
    public /*<fim_suffix>icse.bintree.BinTreeNode root;

    public int size;

    public BinTreeInsert5Bug2Dx6Ix8Dx9Dx23I() {
    }

    /*@
    @ requires true;
    @
    @ ensures (\result == true) <==> (\exists BinTreeNode n;
    @		\reach(root, BinTreeNode, left+right).has(n) == true;
    @		n.key == k);
    @
    @ ensures (\forall BinTreeNode n;
    @		\reach(root, BinTreeNode, left+right).has(n);
    @<fim_middle>",@nullable@*/,@ pure */
"<fim_prefix>rent.key) { //mutGenLimit 0
                current = current.left; //mutGenLimit 0
            } else {
                if (k > current.key) { //mutGenLimit 0
                    current = current.right; //mutGenLimit 0
                } else {
                    return true; //mutGenLimit 0
                }
            }
        }
        return false; //mutGenLimit 0
    }

    /*<fim_suffix>
    public boolean insert( int k, BinTreeNode newBinTreeNode ) {
        icse.bintree.BinTreeNode y = null; //mutGenLimit 0
        icse.bintree.BinTreeNode x = null; //mutGenLimit 1
        //@decreasing \reach(x, BinTreeNode, left+right).int_size();
        while (x != null) { //mutGenLimit 0
            y = x; //mutGenLimit 0
            if (k < x.key) { //mutGenLimit 0
           <fim_middle>","@
    @ requires newBinTreeNode!= null;
    @ requires newBinTreeNode.key == k;
    @ requires newBinTreeNode.left == null;
    @ requires newBinTreeNode.right == null;
    @ requires \reach(root, BinTreeNode, left+right).has(newBinTreeNode) == false;
    @
    @ ensures (\exists BinTreeNode n;
    @		\old(\reach(root, BinTreeNode, left + right)).has(n) == true;
    @  	n.key == k) ==> size == \old(size);
    @
    @	ensures (\forall BinTreeNode n;
    @		\old(\reach(root, BinTreeNode, left + right)).has(n) == true;
    @  	n.key!= k) ==> size == \old(size) + 1;
    @
    @ ensures (\exists BinTreeNode n;
    @     \reach(root, BinTreeNode, left + right).has(n) == true;
    @		n.key == k);
    @
    @ signals (RuntimeException e) false;
    @*/","*
     * @param k
     * @param newBinTreeNode
     * @return
     */"
"<fim_prefix>/*<fim_suffix>

package discord4j.rest.request;

import discord4j.rest.http.client.ClientException;
import io.netty.handler.codec.http.HttpHeaders;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Scheduler;
import reactor.util.Logger;
import reactor.util.Loggers;
import reactor.util.context.Context;

import j<fim_middle>","
 * This file is part of Discord4J.
 *
 * Discord4J is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Discord4J is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Discord4J. If not, see <http://www.gnu.org/licenses/>.
 */","*
 * A {@link Requester} that uses a {@link Scheduler} to execute requests.
 */"
"<fim_prefix>t.request;

import discord4j.rest.http.client.ClientException;
import io.netty.handler.codec.http.HttpHeaders;
import org.reactivestreams.Publisher;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Scheduler;
import reactor.util.Logger;
import reactor.util.Loggers;
import reactor.util.context.Context;

import java.time.Duration;

/**<fim_suffix>
public class RateLimitRetryOperator {

    private static final Logger log = Loggers.getLogger(RateLimitRetryOperator.class);

    private final Scheduler backoffScheduler;

    public RateLimitRetryOperator(Scheduler backoffScheduler) {
        this.backoffScheduler = backoffScheduler;
    }

    public Publisher<Context> apply(Flux<Throwable> errors) {
        return errors.index().<fim_middle>","
 * The retry function used for reading and completing HTTP requests. The backoff is determined by the rate limit
 * headers returned by Discord in the event of a 429.
 */","
 * A retry operator that will retry requests that return a 429 status code.
 *
 * @see <a href=""https://discord.com/developers/docs/"
"<fim_prefix>/*<fim_suffix>

/**
 * Implementation package for JSR-107 (javax.cache aka ""JCache"") based caches.
 * Provides a {@link cn.taketoday.cache.CacheManager CacheManager}
 * and {@link cn.taketoday.cache.Cache Cache} implementation for
 * use in a Framework context, using a JSR-107 compliant cache provider.
 */
@NonNullApi
@NonNullFields
package cn.taketoday.cache.jcache;

import cn.taketoday.lang.NonNul<fim_middle>","
 * Original Author -> Harry Yang (taketoday@foxmail.com) https://taketoday.cn
 * Copyright Â© TODAY & 2017 - 2022 All Rights Reserved.
 *
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/]
 */","*
 * Implementation package for JSR-107 (javax.cache aka ""JCache"") based caches.
 * Provides a {@link cn.taketoday.cache.CacheManager CacheManager}
 * and {@link cn.taketoday.cache.Cache Cache} implementation for
 * use in a Framework context, using a JSR-107 compliant cache provider.
 */"
"<fim_prefix>ogram is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see [http://www.gnu.org/licenses/]
 */

/**<fim_suffix>
@NonNullApi
@NonNullFields
package cn.taketoday.cache.jcache;

import cn.taketoday.lang.NonNullApi;
import cn.taketoday.lang.NonNullFields;
<fim_middle>","
 * Implementation package for JSR-107 (javax.cache aka ""JCache"") based caches.
 * Provides a {@link cn.taketoday.cache.CacheManager CacheManager}
 * and {@link cn.taketoday.cache.Cache Cache} implementation for
 * use in a Framework context, using a JSR-107 compliant cache provider.
 */","
 * JCache 缓存
 *
 * @author <NAME>
 */"
