context,truth,prediction
"<fim_prefix>/**<fim_suffix>
package it.makeit.alfresco.webscriptsapi.model;<fim_middle>","
 * Questo package contiene il modello dei dati usato nella Web Scripts API esposta da Alfresco 5.1.
 * <p>
 * Questo modello Ã¨ stato costruito a partire dalla descrizione dei singoli web script
 * direttamente esposta dal repository al percorso {@code alfresco/s/index}.
 * </p>
 * <p>
 * Sebbene realizzato basandosi su Alfresco 5.1, l'API <i>dovrebbe</i> essere compatibile fino ad
 * (almeno) Alfresco 4.2
 * </p>
 * 
 * @author Alessio Gaeta &lt;alessio.gaeta@make-it.it&gt;
 *
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.jerryoops.eurika.common.spring.annotation;

import com.jerryoops.eurika.common.constant.RegistryConstant;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**<fim_suffix>
@Documented
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
public @interface EurikaService {
    /**
     * 用于标识本实现类从属的组名。
     * <p>不显式指定时，默认为""DEFAULT_GROUP""。</p>
     */
    String group() default RegistryConstant.DEFAULT_GROUP_NAME;

    /**
     * 用于标识本实现类的版本。
     * <p>不显式指定时，默认为""1.0.0""。</p>
     */
    String version() default RegistryConstant.DEFAULT_VERSION;
}
<fim_middle>","
 * 在provider端使用，标注在某接口的实现类之上。
 * 将会把此实现类作为bean注册到Spring IOC容器中，并将此类实现的接口暴露在服务注册中心中，供消费者调用。
 */","
 * @author wangqing
 * @date 2018/10/18 下午4:00
 */"
"<fim_prefix>nnotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * 在provider端使用，标注在某接口的实现类之上。
 * 将会把此实现类作为bean注册到Spring IOC容器中，并将此类实现的接口暴露在服务注册中心中，供消费者调用。
 */
@Documented
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
public @interface EurikaService {
    /**<fim_suffix>
    String group() default RegistryConstant.DEFAULT_GROUP_NAME;

    /**
     * 用于标识本实现类的版本。
     * <p>不显式指定时，默认为""1.0.0""。</p>
     */
    String version() default RegistryConstant.DEFAULT_VERSION;
}
<fim_middle>","
     * 用于标识本实现类从属的组名。
     * <p>不显式指定时，默认为""DEFAULT_GROUP""。</p>
     */","
     * 用于标识本实现类的服务名。
     * <p>不显式指定时，默认为接口名。</p>
     */"
"<fim_prefix>;
import java.lang.annotation.Target;

/**
 * 在provider端使用，标注在某接口的实现类之上。
 * 将会把此实现类作为bean注册到Spring IOC容器中，并将此类实现的接口暴露在服务注册中心中，供消费者调用。
 */
@Documented
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
public @interface EurikaService {
    /**
     * 用于标识本实现类从属的组名。
     * <p>不显式指定时，默认为""DEFAULT_GROUP""。</p>
     */
    String group() default RegistryConstant.DEFAULT_GROUP_NAME;

    /**<fim_suffix>
    String version() default RegistryConstant.DEFAULT_VERSION;
}
<fim_middle>","
     * 用于标识本实现类的版本。
     * <p>不显式指定时，默认为""1.0.0""。</p>
     */","
     * 用于标识本实现类从属的版本。
     * <p>不显式指定时，默认为""DEFAULT_VERSION""。</p>
    "
"<fim_prefix>package org.openyu.commons.web.struts2;

import org.springframework.context.ApplicationContextAware;

import org.openyu.commons.web.servlet.BaseWeb;

/**<fim_suffix>
public interface BaseAction extends ApplicationContextAware, BaseWeb
{
	String KEY = BaseAction.class.getName();

}
<fim_middle>","
 * 控制器
 */","
 * 基础Action
"
"<fim_prefix>/**<fim_suffix>
package cn.edu.bit.ruixin.community;
<fim_middle>","
 * <p>
 * 预约管理系统的后台
 * </p><p>
 * 该系统的主要任务是，存储预约的基本信息和执行状态，根据一定的规则更新预约状态。
 * </p><p>
 * 该后台的程序执行由HTTP请求触发。spring框架接收到请求以后，首先根据
 * 安全配置规则，运行请求<strong>过滤器</strong>，检验用户身份。
 * 然后根据请求的请求方法和请求地址，调用<strong>控制器</strong>中的处理函数
 * 来处理请求。处理函数被调用后，会根据函数签名的注解，读取请求的内容
 * 并将其转换为Java对象，然后调用<strong>服务对象</strong>的方法来处理请求。
 * 服务对象当中有访问数据库的<strong>存储库</strong>对象，服务会根据业务需求，
 * 读取或修改数据库的内容，然后返回操作的结果。控制器函数接收到服务的返回值以后，
 * 会调整返回值的结构，然后将写入HTTP响应的对象返回到框架，由框架将其
 * 转换为JSON字符串并写入响应。
 * 如果由于业务逻辑限制或者Bug，请求无法返回给定的响应，那么上述处理流程会抛出异常，
 * 异常处理函数将错误信息发送到前端。
 * 如果在业务逻辑中涉及到了<strong>数据库字段对象</strong>，就可以
 * 将字段对象转换为<strong>视图层对象</strong>。
 * </p>
 * 
 */","
 * @author: xiaohe
 * @description:
 * @since: 1.0.0
 * @date: Created in 2020/9/2 10:56
 */"
"<fim_prefix>package net.cocotea.elysiananime.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**<fim_suffix>
@Getter
@AllArgsConstructor
public enum SexEnum {
    /**
     * 未知
     */
    UNKNOWN(0, ""未知""),
    /**
     * 男
     */
    MAN(1, ""男""),
    /**
     * 女
     */
    WOMAN(2, ""女"");

    final Integer code;
    final String desc;
}
<fim_middle>","
 * 性别枚举值
 *
 * @author CoCoTea
 * @version 2.0.0
 */","
 * @author <NAME>
 * @date 2021/6/25 22:00
 */"
"<fim_prefix>package net.cocotea.elysiananime.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 性别枚举值
 *
 * @author CoCoTea
 * @version 2.0.0
 */
@Getter
@AllArgsConstructor
public enum SexEnum {
    /**<fim_suffix>
    UNKNOWN(0, ""未知""),
    /**
     * 男
     */
    MAN(1, ""男""),
    /**
     * 女
     */
    WOMAN(2, ""女"");

    final Integer code;
    final String desc;
}
<fim_middle>","
     * 未知
     */","
     * 未知
     */"
"<fim_prefix>package net.cocotea.elysiananime.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 性别枚举值
 *
 * @author CoCoTea
 * @version 2.0.0
 */
@Getter
@AllArgsConstructor
public enum SexEnum {
    /**
     * 未知
     */
    UNKNOWN(0, ""未知""),
    /**<fim_suffix>
    MAN(1, ""男""),
    /**
     * 女
     */
    WOMAN(2, ""女"");

    final Integer code;
    final String desc;
}
<fim_middle>","
     * 男
     */","
     * 男
     */"
"<fim_prefix>package net.cocotea.elysiananime.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 性别枚举值
 *
 * @author CoCoTea
 * @version 2.0.0
 */
@Getter
@AllArgsConstructor
public enum SexEnum {
    /**
     * 未知
     */
    UNKNOWN(0, ""未知""),
    /**
     * 男
     */
    MAN(1, ""男""),
    /**<fim_suffix>
    WOMAN(2, ""女"");

    final Integer code;
    final String desc;
}
<fim_middle>","
     * 女
     */","
     * 女
     */"
"<fim_prefix>/**<fim_suffix>
package br.com.hslife.orcamento.component;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import br.com.hslife.orcamento.entity.Usuario;
import br.com.hslife.orcamento.facade.INotificacaoSistema;

@Component
public class NotificacaoSistemaComponent {

    @Autowired
    private INotificacaoSistema notificacaoSistemaService;

    public INoti<fim_middle>","*

Copyright (c) 2012 - 2021 Hércules S. S. José

Este arquivo é parte do programa Orçamento Doméstico.


Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou

modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como

publicada pela Fundação do Software Livre (FSF); na versão 3.0 da

Licença.


Este programa é distribuído na esperança que possa ser útil, mas SEM

NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer

MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral Menor

GNU em português para maiores detalhes.


Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob

o nome de ""LICENSE"" junto com este programa, se não, acesse o site do

projeto no endereco https://github.com/herculeshssj/orcamento ou escreva

para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor,

Boston, MA  02110-1301, USA.


Para mais informações sobre o programa Orçamento Doméstico e seu autor

entre em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva

para Hércules S. S. José, Rua José dos Anjos, 160 - Bl. 3 Apto. 304 -

Jardim Alvorada - CEP: 26261-130 - Nova Iguaçu, RJ, Brasil.

***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package ltd.kumo.plutomc.framework.shared.command.arguments;

import ltd.kumo.plutomc.framework.shared.command.Argument;

/**<fim_suffix>
public abstract class ArgumentBoolean implements Argument<Boolean> {
}
<fim_middle>","
 * 布尔值参数
 */","
 * 布尔型参数
 *"
"<fim_prefix>/**<fim_suffix>
package it.unimi.di.j4im.notazione;<fim_middle>","
 * Contiene classi utili a rappresentare i simboli della notazione musicale e le loro caratteristiche.
 */","
 * @author <NAME>
 */"
"<fim_prefix>package bGLOOP;

/**<fim_suffix>
interface IGLSubdivisable {
	/** Anzahl der polygonalen Unterteilungen des Modells. Jedem Objekt liegt ein
	 * Gittermodell zugrundeliegenden. Je größer die Anzahl der Unteilungen,
	 * desto feiner sind die Schattierungen auf der Oberfläche. Allerdings führt
	 * eine hohe Zahl von Polygonen in einer Szene zu langsamerer Darstellung
	 * und fallender Framerate.
	 * 
	 * @param pBreitengrade Anzahl der Unteil<fim_middle>"," Methoden, die von Objekten unterstützt werden, die in kleinere Polygone
 * unterteilbar sind.
 * @author R. Spillner
 */","
 * Interface für Objekte, die als Gittermodelle dargestellt werden können.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package bGLOOP;

/** Methoden, die von Objekten unterstützt werden, die in kleinere Polygone
 * unterteilbar sind.
 * @author R. Spillner
 */
interface IGLSubdivisable {
	/**<fim_suffix>
	public void setzeQualitaet(int pBreitengrade, int pLaengengrade);

	/** Anzahl der polygonalen Unterteilungen des Modells.
	 * 
	 * @see #setzeQualitaet(int,int)
	 * @param pUnterteilungen Anzahl der horizontalen und vertikalen
	 * Scheiben in der Unterteilung
	 */
	public void setzeQualitaet(int pUnterteilungen);
}
<fim_middle>"," Anzahl der polygonalen Unterteilungen des Modells. Jedem Objekt liegt ein
	 * Gittermodell zugrundeliegenden. Je größer die Anzahl der Unteilungen,
	 * desto feiner sind die Schattierungen auf der Oberfläche. Allerdings führt
	 * eine hohe Zahl von Polygonen in einer Szene zu langsamerer Darstellung
	 * und fallender Framerate.
	 * 
	 * @param pBreitengrade Anzahl der Unteilungen horizontalen Scheiben
	 * @param pLaengengrade Anzahl der Unteilungen vertikalen Scheiben
	 */"," Anzahl der horizontalen und vertikalen Scheiben in der
	 * Unterteilung.
	 * 
	 * @see #setzeQualitaet(int,int)
	 * @param pBreitengrade Anzahl der horizontalen Scheiben in der
	 * Unterteilung
	 * @param pLaengengrade Anzahl der vertikalen Scheiben in der
	 * Unterteilung
	 */"
"<fim_prefix>lungen,
	 * desto feiner sind die Schattierungen auf der Oberfläche. Allerdings führt
	 * eine hohe Zahl von Polygonen in einer Szene zu langsamerer Darstellung
	 * und fallender Framerate.
	 * 
	 * @param pBreitengrade Anzahl der Unteilungen horizontalen Scheiben
	 * @param pLaengengrade Anzahl der Unteilungen vertikalen Scheiben
	 */
	public void setzeQualitaet(int pBreitengrade, int pLaengengrade);

	/**<fim_suffix>
	public void setzeQualitaet(int pUnterteilungen);
}
<fim_middle>"," Anzahl der polygonalen Unterteilungen des Modells.
	 * 
	 * @see #setzeQualitaet(int,int)
	 * @param pUnterteilungen Anzahl der horizontalen und vertikalen
	 * Scheiben in der Unterteilung
	 */","
	 * Setzt die Anzahl der Unterteilungen der Oberfläche.
	 * 
	 * @param pUnterteilungen Anzahl der Unterteilungen
	 */"
"<fim_prefix>package org.foa.data.combinationdata;

/**<fim_suffix>
public interface CombinationCustom {
}
<fim_middle>","
 * @author 王川源
 */","
 *
 * @author <NAME>
"
"<fim_prefix>package insert;

import interf.SortImpl;

/**<fim_suffix>
public class InsertSort extends SortImpl {

    @Override
    public void sort(int[] arr) {
        if (null == arr || 1 >= arr.length) return;

        for (int i = 1; i < arr.length; i++) {
            insert(arr, i);
        }
    }

    private void insert(int[] arr, int i){
        int x = arr[i], j;
        for (j = i - 1; j >= 0; j--) {
            if (x < arr[j]){
                arr[j + 1] = arr[j]<fim_middle>","
 * 插入排序
 */","
 * @author 余修"
"<fim_prefix>package moe.ahao.process.management.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

import java.util.HashSet;
import java.util.Set;

/**<fim_suffix>
@Getter
@AllArgsConstructor
public enum ProcessEnableEnum {
    ENABLE(1, ""启用""),
    DISABLE(0, ""禁用"");

    private final Integer code;
    private final String msg;

    public static Set<Integer> allowableValues() {
        Set<Integer> allowableValues = new HashSet<>(values().length);
        for (ProcessEnableEnum typeEnum : values()) {
            allowableValues.add(typeEnum.getCode());
        }
    <fim_middle>","
 * 流程启用/禁用类型
 */","
 * 流程启用状态
 *
 *"
"<fim_prefix>package com.github.mybatis.easy.go.windowFunctions.frame;

/**<fim_suffix>
public class Preceding extends Frame{
    int rows;

    public Preceding(int rows) {
        this.rows = rows;
    }

    public long getRows() {
        return rows;
    }

    public void setRows(int rows) {
        this.rows = rows;
    }
}
<fim_middle>","
 * 往前row行
 */","
 * @author will
 */"
"<fim_prefix>package cn.maple.core.datasource.event;

import cn.hutool.core.lang.Dict;
import cn.maple.core.framework.event.GXBaseEvent;

/**<fim_suffix>
public class GXMyBatisModelSaveBatchEntityEvent<M extends Dict> extends GXBaseEvent<M> {
    public GXMyBatisModelSaveBatchEntityEvent(M source) {
        super(source);
    }

    public GXMyBatisModelSaveBatchEntityEvent(M source, String eventType) {
        super(source, eventType);
    }

    public GXMyBatisModelSaveBatchEntityEvent(M source, String eventType, Dict param) {
        super(source, eventT<fim_middle>","
 * 数据已经更新数据库事件
 */","
 * @author maple
 * @"
"<fim_prefix>package com.fit2cloud.constants;


/**<fim_suffix>
public enum OptimizationRuleConditionTypeConstants {
    /**
     * 并且
     */
    AND,
    /**
     * 或者
     */
    OR
}
<fim_middle>","
 * 描述：优化规则条件类型常量
 * @author jianneng
 */","
 * 优化规则条件类型
 *
 * @author phuzz
 */"
"<fim_prefix>package com.fit2cloud.constants;


/**
 * 描述：优化规则条件类型常量
 * @author jianneng
 */
public enum OptimizationRuleConditionTypeConstants {
    /**<fim_suffix>
    AND,
    /**
     * 或者
     */
    OR
}
<fim_middle>","
     * 并且
     */","
     * 并且
     */"
"<fim_prefix>package com.fit2cloud.constants;


/**
 * 描述：优化规则条件类型常量
 * @author jianneng
 */
public enum OptimizationRuleConditionTypeConstants {
    /**
     * 并且
     */
    AND,
    /**<fim_suffix>
    OR
}
<fim_middle>","
     * 或者
     */","
     * 或者
     */"
"<fim_prefix>package com.yunzhou.tdinformation.mine.red;

/*<fim_suffix>

public interface IRedListener {
    /**
     * 切换看无效红包
     */
    void onClickCheckUselessRed();
}
<fim_middle>","
 *  @项目名：  project 
 *  @包名：    com.yunzhou.tdinformation.mine.red
 *  @文件名:   IRedListener
 *  @创建者:   lz
 *  @创建时间:  2018/11/13 17:22
 *  @描述：    交互接口
 */","*
 * @description:
 * @version: V1.0
 * @author: 林智直
 * @date: 2020/5/27 17:06
 */"
"<fim_prefix>package com.yunzhou.tdinformation.mine.red;

/*
 *  @项目名：  project 
 *  @包名：    com.yunzhou.tdinformation.mine.red
 *  @文件名:   IRedListener
 *  @创建者:   lz
 *  @创建时间:  2018/11/13 17:22
 *  @描述：    交互接口
 */

public interface IRedListener {
    /**<fim_suffix>
    void onClickCheckUselessRed();
}
<fim_middle>","
     * 切换看无效红包
     */","
     * 红包点击事件
     */"
"<fim_prefix>/**
 * 
 */
package com.smartsnow.smartpdftoprinter;

/**
 * 应用的实现接口
 * 
 * @author Shandy
 *
 */
public interface Application {
	/**
	 * 执行接口,args为入参信息
	 * */
	int run();
	/**<fim_suffix>
	void end();
}
<fim_middle>",应用退出*/,"
	 *"
"<fim_prefix>/**
 * 
 */
package com.smartsnow.smartpdftoprinter;

/**<fim_suffix>
public interface Application {
	/**
	 * 执行接口,args为入参信息
	 * */
	int run();
	/**应用退出*/
	void end();
}
<fim_middle>","
 * 应用的实现接口
 * 
 * @author Shandy
 *
 */","
 * @author Administrator
 *
 */"
"<fim_prefix>/**
 * 
 */
package com.smartsnow.smartpdftoprinter;

/**
 * 应用的实现接口
 * 
 * @author Shandy
 *
 */
public interface Application {
	/**<fim_suffix>
	int run();
	/**应用退出*/
	void end();
}
<fim_middle>","
	 * 执行接口,args为入参信息
	 * */",应用启动*/
"<fim_prefix>package com.steven.solomon.service;

import com.steven.solomon.properties.FileChoiceProperties;

/**<fim_suffix>
public class KS3Service extends S3Service {

  public KS3Service(FileChoiceProperties properties) {
    super(properties);
  }

}
<fim_middle>","
 * 金山云文件实现类
 */","
 * @author steven
 * @desc
"
"<fim_prefix>package org.haic.often.tuple.record;

/**<fim_suffix>
public record ThreeTuple<A, B, C>(A first, B second, C third) {}
<fim_middle>","
 * Tuple的实现,用于记录多个参数
 */","
 * @author <NAME>
 * @version"
"<fim_prefix>package info.ozkan.vipera.views.patient;

import info.ozkan.vipera.entities.Sex;

import javax.inject.Named;

/**<fim_suffix>
@Named(""sexList"")
public class SexListBean {
    /**
     * Cinsiyet listesini dizi olarak dönderir
     * 
     * @return
     */
    public Sex[] getSexList() {
        return Sex.values();
    }
}
<fim_middle>","
 * Cinsiyet listesi
 * 
 * @author Ömer Özkan
 * 
 */","
 * Cinsiyet listesini döndürür
 * 
 * @author <NAME>
 *"
"<fim_prefix>package info.ozkan.vipera.views.patient;

import info.ozkan.vipera.entities.Sex;

import javax.inject.Named;

/**
 * Cinsiyet listesi
 * 
 * @author Ömer Özkan
 * 
 */
@Named(""sexList"")
public class SexListBean {
    /**<fim_suffix>
    public Sex[] getSexList() {
        return Sex.values();
    }
}
<fim_middle>","
     * Cinsiyet listesini dizi olarak dönderir
     * 
     * @return
     */","
     * Cinsiyet listesi
     */"
"<fim_prefix>package net.nanxu.payment.channel;

import net.nanxu.payment.channel.model.CallbackRequest;
import net.nanxu.payment.channel.model.CallbackResult;
import reactor.core.publisher.Mono;

/**<fim_suffix>
public interface IPaymentCallback {
    /**
     * 支付回调
     */
    Mono<CallbackResult> callback(CallbackRequest request);

}
<fim_middle>","
 * 第三方支付插件回调.
 *
 * @author: P
 **/","
 * 支付回调
 *
 * @author Nan
 * @date 2020/"
"<fim_prefix>package net.nanxu.payment.channel;

import net.nanxu.payment.channel.model.CallbackRequest;
import net.nanxu.payment.channel.model.CallbackResult;
import reactor.core.publisher.Mono;

/**
 * 第三方支付插件回调.
 *
 * @author: P
 **/
public interface IPaymentCallback {
    /**<fim_suffix>
    Mono<CallbackResult> callback(CallbackRequest request);

}
<fim_middle>","
     * 支付回调
     */","
     * 支付回调.
    "
"<fim_prefix>package com.ozguryazilim.tekir.entities;

/**<fim_suffix>
public enum ApplicantWorkType {
    
    WORK,
    INTERNSHIP,
    VOLUNTEER_WORK
}
<fim_middle>","
 *  İş Türü Tipleri
 * @author serdar
 */","
 * Created by <NAME> on 02.02.2016.
 */"
"<fim_prefix>package com.minlia.iot.marshal.deserialize;

import com.minlia.iot.body.response.StatefulApiResponseBody;
import com.minlia.iot.context.ApiRuntimeContext;
import com.minlia.iot.marshal.ApiMarshalWrappedBody;

/**<fim_suffix>
public interface ApiDeserializer<RESPONSE> {

  StatefulApiResponseBody<RESPONSE> deserialize(ApiMarshalWrappedBody body,ApiRuntimeContext context);

}
<fim_middle>","
 * 反序列化器
 */","
 * @author will
 */"
"<fim_prefix>package algorithm.day02;

/**<fim_suffix>
public class Test02 {

    /**
     * 主要思想：
     * 与运算
     * 任何数与自己相反数
     * @param args
     */
    public static void main(String[] args) {
        //二进制为 1010 == 10
        int i = 10;
        int j = i & -i;
        //输出2  0010 == 2
        System.out.println(j);

    }
}
<fim_middle>","
 * 怎么找到一个int类型二进制最右侧的1
 *
 * @author wuyj
 * @date 2021/11/11 9:46 下午
 */","
 * @author: mayuan
 * @desc:
 * @date: 2018/08/07
 */"
"<fim_prefix>package algorithm.day02;

/**
 * 怎么找到一个int类型二进制最右侧的1
 *
 * @author wuyj
 * @date 2021/11/11 9:46 下午
 */
public class Test02 {

    /**<fim_suffix>
    public static void main(String[] args) {
        //二进制为 1010 == 10
        int i = 10;
        int j = i & -i;
        //输出2  0010 == 2
        System.out.println(j);

    }
}
<fim_middle>","
     * 主要思想：
     * 与运算
     * 任何数与自己相反数
     * @param args
     */","
     * 思路：
     * 1. 取出i的二进制最右侧的1
     * 2. 然后将i与这个1进行与运算，"
"<fim_prefix>package cn.foxtech.device.protocol.v1.core.template;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class TemplateFactory {
    private static final Map<String, TemplateContainer> map = new ConcurrentHashMap<>();

    /**<fim_suffix>
    public static TemplateContainer getTemplate(String protocolModelName) {
        TemplateContainer template = map.get(protocolModelName);
        if (template == null) {
            template = new TemplateContainer();
            map.put(protocolModelName, template);
        }

        return template;
    }
}
<fim_middle>","
     * 协议模块名称
     *
     * @param protocolModelName 协议模型明名称
     * @return 模板容器
     */","
     * 获取模板
     *
     * @param protocolModelName 模板名称
     * @return 模板
     */"
"<fim_prefix>package com.mquan86.pattern.creational.factory.example;

/**<fim_suffix>
public enum FileType {
    TEXT_FILE, XML_FILE
}
<fim_middle>","
 * @author Minh Quan Pham (mquan86@gmail.com)
 *
 */","
 * @author angus
 * @date 2018/12/28
 */"
"<fim_prefix>package unstudio.chinacraft.util.annotation.register;

import net.minecraft.item.ItemBlock;

import java.lang.annotation.*;

@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Register {
    /**<fim_suffix>
    String value();

    /**
     * @return 物品Class,默认构造方法只能有一个Block参数
     */
    Class<? extends ItemBlock> itemClass() default ItemBlock.class;


    /**
     * @return 矿物词典
     */
    String ore() default """";
}<fim_middle>","
     * @return 物品或方块的名字
     */","
     * @return 物品名称
     */"
"<fim_prefix>package unstudio.chinacraft.util.annotation.register;

import net.minecraft.item.ItemBlock;

import java.lang.annotation.*;

@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Register {
    /**
     * @return 物品或方块的名字
     */
    String value();

    /**<fim_suffix>
    Class<? extends ItemBlock> itemClass() default ItemBlock.class;


    /**
     * @return 矿物词典
     */
    String ore() default """";
}<fim_middle>","
     * @return 物品Class,默认构造方法只能有一个Block参数
     */","
     * @return 物品或方块的id
     */"
"<fim_prefix>o.chinacraft.util.annotation.register;

import net.minecraft.item.ItemBlock;

import java.lang.annotation.*;

@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Register {
    /**
     * @return 物品或方块的名字
     */
    String value();

    /**
     * @return 物品Class,默认构造方法只能有一个Block参数
     */
    Class<? extends ItemBlock> itemClass() default ItemBlock.class;


    /**<fim_suffix>
    String ore() default """";
}<fim_middle>","
     * @return 矿物词典
     */","
     * @return 矿物名称
     */"
"<fim_prefix>package cn.maple.core.framework.service;

public interface GXDynamicCallMethodService {
    /**<fim_suffix>
    Object call(String serviceClassName, String methodName, Object... parameters);

    /**
     * 动态调用指定服务的参数
     *
     * @param target     目标对象
     * @param methodName 方法的名字
     * @param parameters 方法参数
     * @return Object
     */
    Object call(Object target, String methodName, Object... parameters);
}
<fim_middle>","
     * 动态调用指定服务的参数
     *
     * @param serviceClassName 服务类的名字
     * @param methodName       方法的名字
     * @param parameters       方法参数
     * @return Object
     */","
     * 动态调用指定服务
     *
     * @param serviceClassName 服务的类名
     * @param methodName       方法的名字
     * @param parameters       方法参数
     * @return Object
     */"
"<fim_prefix>package cn.maple.core.framework.service;

public interface GXDynamicCallMethodService {
    /**
     * 动态调用指定服务的参数
     *
     * @param serviceClassName 服务类的名字
     * @param methodName       方法的名字
     * @param parameters       方法参数
     * @return Object
     */
    Object call(String serviceClassName, String methodName, Object... parameters);

    /**<fim_suffix>
    Object call(Object target, String methodName, Object... parameters);
}
<fim_middle>","
     * 动态调用指定服务的参数
     *
     * @param target     目标对象
     * @param methodName 方法的名字
     * @param parameters 方法参数
     * @return Object
     */","
     * 动态调用指定服务的参数
     *
     * @param target           目标对象
     * @param methodName       方法的名字
     * @param parameters     "
"<fim_prefix>package com.kao.server.dto;

import java.io.Serializable;

/**<fim_suffix>
public class TutorFavorBase implements Serializable {

    private String tutCid;
    private String tutTid;

    public String getTutCid() {
        return tutCid;
    }

    public void setTutCid(String tutCid) {
        this.tutCid = tutCid;
    }

    public String getTutTid() {
        return tutTid;
    }

    public void setTutTid(String tutTid) {
        this.tutTid = tutTid;
    }
}
<fim_middle>","
 * @author 沈伟峰
 */","
 * @Auther: <NAME>
 *"
"<fim_prefix>package taokdao.api.plugin.bean;

public enum PluginActions {
    /**
     * 升级降级
     * 版本最新的插件才会调用，而且是直接调用
     * 不走onCreate流程
     * onUpGrade在新安装的插件中调用
     * onDownGrade在旧的插件中调用
     */
    onUpGrade, onDownGrade,
    /**
     * 创建销毁
     */
    onCreate, onDestroy,
    /**<fim_suffix>
    onInit, onCall,
    /**
     * 暂停，恢复
     */
    onPause, onResume,
    /**
     * 被调用
     */
    onInvoke
}
<fim_middle>","
     * 初始化，触发
     */","
     * 初始化，调用
     */"
"<fim_prefix>package taokdao.api.plugin.bean;

public enum PluginActions {
    /**<fim_suffix>
    onUpGrade, onDownGrade,
    /**
     * 创建销毁
     */
    onCreate, onDestroy,
    /**
     * 初始化，触发
     */
    onInit, onCall,
    /**
     * 暂停，恢复
     */
    onPause, onResume,
    /**
     * 被调用
     */
    onInvoke
}
<fim_middle>","
     * 升级降级
     * 版本最新的插件才会调用，而且是直接调用
     * 不走onCreate流程
     * onUpGrade在新安装的插件中调用
     * onDownGrade在旧的插件中调用
     */","
     * 升级，降级
     */"
"<fim_prefix>package taokdao.api.plugin.bean;

public enum PluginActions {
    /**
     * 升级降级
     * 版本最新的插件才会调用，而且是直接调用
     * 不走onCreate流程
     * onUpGrade在新安装的插件中调用
     * onDownGrade在旧的插件中调用
     */
    onUpGrade, onDownGrade,
    /**<fim_suffix>
    onCreate, onDestroy,
    /**
     * 初始化，触发
     */
    onInit, onCall,
    /**
     * 暂停，恢复
     */
    onPause, onResume,
    /**
     * 被调用
     */
    onInvoke
}
<fim_middle>","
     * 创建销毁
     */","
     * 创建，销毁
    "
"<fim_prefix>package taokdao.api.plugin.bean;

public enum PluginActions {
    /**
     * 升级降级
     * 版本最新的插件才会调用，而且是直接调用
     * 不走onCreate流程
     * onUpGrade在新安装的插件中调用
     * onDownGrade在旧的插件中调用
     */
    onUpGrade, onDownGrade,
    /**
     * 创建销毁
     */
    onCreate, onDestroy,
    /**
     * 初始化，触发
     */
    onInit, onCall,
    /**<fim_suffix>
    onPause, onResume,
    /**
     * 被调用
     */
    onInvoke
}
<fim_middle>","
     * 暂停，恢复
     */","
     * 暂停，恢复
     */"
"<fim_prefix>package taokdao.api.plugin.bean;

public enum PluginActions {
    /**
     * 升级降级
     * 版本最新的插件才会调用，而且是直接调用
     * 不走onCreate流程
     * onUpGrade在新安装的插件中调用
     * onDownGrade在旧的插件中调用
     */
    onUpGrade, onDownGrade,
    /**
     * 创建销毁
     */
    onCreate, onDestroy,
    /**
     * 初始化，触发
     */
    onInit, onCall,
    /**
     * 暂停，恢复
     */
    onPause, onResume,
    /**<fim_suffix>
    onInvoke
}
<fim_middle>","
     * 被调用
     */","
     * 插件调用
    "
"<fim_prefix>package sep.fimball.model.physics.game;

/**<fim_suffix>
public enum CollisionEventType
{
    /**
     * Der Ball hat angefangen ein Element zu berühren.
     */
    ENTERED,
    /**
     * Der Ball hat aufgehört ein Element zu berühren.
     */
    LEFT,
    /**
     * Der Ball berührt ein Element.
     */
    OVER
}
<fim_middle>","
 * Beschreibt verschiedene Arten von Kollisionsevents.
 */","
 * Die verschiedenen Arten von Konflikten.
 * 
 *"
"<fim_prefix>package sep.fimball.model.physics.game;

/**
 * Beschreibt verschiedene Arten von Kollisionsevents.
 */
public enum CollisionEventType
{
    /**
     * Der Ball hat angefangen ein Element zu berühren.
     */
    ENTERED,
    /**<fim_suffix>
    LEFT,
    /**
     * Der Ball berührt ein Element.
     */
    OVER
}
<fim_middle>","
     * Der Ball hat aufgehört ein Element zu berühren.
     */","
     * Der Ball hat angefangen ein Element zu verlassen.
     */"
"<fim_prefix>package sep.fimball.model.physics.game;

/**
 * Beschreibt verschiedene Arten von Kollisionsevents.
 */
public enum CollisionEventType
{
    /**<fim_suffix>
    ENTERED,
    /**
     * Der Ball hat aufgehört ein Element zu berühren.
     */
    LEFT,
    /**
     * Der Ball berührt ein Element.
     */
    OVER
}
<fim_middle>","
     * Der Ball hat angefangen ein Element zu berühren.
     */","
     * Der Ball hat sich in einem Element befunden.
     */"
"<fim_prefix>package sep.fimball.model.physics.game;

/**
 * Beschreibt verschiedene Arten von Kollisionsevents.
 */
public enum CollisionEventType
{
    /**
     * Der Ball hat angefangen ein Element zu berühren.
     */
    ENTERED,
    /**
     * Der Ball hat aufgehört ein Element zu berühren.
     */
    LEFT,
    /**<fim_suffix>
    OVER
}
<fim_middle>","
     * Der Ball berührt ein Element.
     */","
     * Der Ball hat sich über ein Element gesetzt.
  "
"<fim_prefix>package main;

import tools.Punto;

public class Main {

/*<fim_suffix>

	public static void main(String[] args) {
				
		Punto miPunto = new Punto(3,7);
		Punto miSegundoPunto = new Punto(9,2);
	}

}
<fim_middle>","
 * Crear una estructura para definir puntos en el plano.
 * Crear funciones que muestren:
 * 		la distancia entre dos puntos del plano dados
 * 		el punto medio entre los dos puntos dados
 */","*
 * @author <NAME>
 * @version 1.0
 * @since 1.0
 *
 */"
"<fim_prefix>/**<fim_suffix>
package br.univali.portugol.nucleo.simbolos;<fim_middle>","
 * Este pacote contém todos os símbolos da linguagem Portugol (variáveis, vetores, matrizes, etc.)
 * que são alocados em memória durante a execução dos programas para armazenar valores.
 */","
 * @author <NAME>
 */"
"<fim_prefix>package ru.cyberbiology.test.prototype.gene;

import ru.cyberbiology.test.prototype.IBot;

/**<fim_suffix>
public abstract class ABotGeneController implements IBotGeneController
{


}
<fim_middle>","
 * Абстрактный класс обработчика гена, введен, если какие либо методы обработчиков будут общими, тогда их можно реализовать здесь
 * @author Nickolay
 *
 */","
 * Created by storm on 24.03.2017.
 */"
"<fim_prefix>package pama1234.gdx.util.listener;

/**<fim_suffix>
public interface DisplayEntityListener extends EntityListener{
  public void displayCam();
}
<fim_middle>","
 * 更好的EntityListener（真的吗）
 * </p>
 * TODO 需要改名
 */","
 * Created by <NAME> on 2016/11/28.
 */"
"<fim_prefix>/**<fim_suffix>
package cn.jsmod2.core;<fim_middle>","
 * 本包封装了JSMOD2交互的核心内容
 * 本包类任何服务端都可以调用使用，其中类为通用的类
 * 相当于jsmod2驱动内核，jsmod2-core
 * 其中继承了
 * 服务器主类 Server - 继承Server,实现其中方法
 *
 */","
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>package dhbw.ka.mwi.businesshorizon2.cf;

/**<fim_suffix>
public class TaxShieldEKKostVerschCalculator2 implements EKKostVerschCalculator {

    @Override
    public double calculateEKKostenVersch(final CFParameter parameter, final CFIntermediateResult intermediate, final int periode) {
        return parameter.getEKKosten() + (parameter.getEKKosten() - parameter.getFKKosten() * (1 - parameter.getuSteusatz())) * parameter.getFK()[periode - 1] / intermediate.getuWe<fim_middle>","
 * Eine Klasse zur Berechnung der EK Kosten.
 * Implementiert das EKKostVerschCalculator Interface
 * und basiert auf Formel 86 vom Ballwieser.
 */","
 * Implementierung der EKKostVerschCalculator2.
 */"
"<fim_prefix>package gui.tipos;

/**<fim_suffix>
public enum TipoVersion {

	VERSION1, VERSION2
}
<fim_middle>","
 * Enumerado que contiene el tipo de versión seleccionada por el usuario en 
 * la interfaz.
 * 
 * @author Grupo20.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package com.jasonpercus.encryption.base64;<fim_middle>","
Ce package contient la classe Base64
*/","
 * @author JasonPercus
 */"
"<fim_prefix>sitory.specification;

import org.crue.hercules.sgi.pii.model.Procedimiento;
import org.crue.hercules.sgi.pii.model.Procedimiento_;
import org.crue.hercules.sgi.pii.model.SolicitudProteccion;
import org.springframework.data.jpa.domain.Specification;

import lombok.AccessLevel;
import lombok.NoArgsConstructor;

@NoArgsConstructor(access = AccessLevel.PRIVATE)
public class ProcedimientoSpecifications {

  /**<fim_suffix>
  public static Specification<Procedimiento> bySolicitudProteccionId(Long id) {
    return (root, query, cb) -> cb.equal(root.get(Procedimiento_.solicitudProteccionId), id);
  }

}
<fim_middle>","
   * {@link Procedimiento} de la entidad {@link SolicitudProteccion} con el
   * id indicado.
   * 
   * @param id identificador de la entidad {@link SolicitudProteccion}.
   * @return specification para obtener los {@link Procedimiento} de la
   *         entidad {@link SolicitudProteccion} con el id indicado.
   */","
   * Creates a specification that matches a {@link SolicitudProteccion} by its id.
   * 
   * @param id
   *          the id of the {@link SolicitudProteccion} to match
   * @return the specification
   */"
"<fim_prefix>package org.dromara.auth.domain.convert;

import io.github.linpeilie.BaseMapper;
import org.dromara.auth.domain.vo.TenantListVo;
import org.dromara.system.api.domain.vo.RemoteTenantVo;
import org.mapstruct.Mapper;
import org.mapstruct.MappingConstants;

/**<fim_suffix>
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)
public interface TenantVoConvert extends BaseMapper<RemoteTenantVo, TenantListVo> {

}
<fim_middle>","
 * 租户vo转换器
 * @author zhujie
 */","
 * @author liangziqiang
 */"
"<fim_prefix>package com.kfyty.loveqq.framework.web.core.annotation;

import com.kfyty.loveqq.framework.core.lang.annotation.AliasFor;
import com.kfyty.loveqq.framework.web.core.request.RequestMethod;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**<fim_suffix>
@Documented
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@RequestMapping(method = RequestMethod.GET)
public @interface GetMapping {
    @AliasFor(annotation = RequestMapping.class)
    String value() default """";

    @AliasFor(annotation = RequestMapping.class)
    String produces() default RequestMapping.DEFAULT_PRODUCES;

    @AliasFor(annotation = RequestMapping.class)
    RequestMappi<fim_middle>","
 * 请求映射路径
 *
 * @see RequestMapping
 */","
 * 描述: 映射 GET 请求
 *
 * @author k"
"<fim_prefix>package com.allen.easyChat.common.action;

import com.allen.easyChat.common.vo.MessageItem;
import lombok.Data;
import lombok.ToString;

import java.util.List;
import java.util.UUID;

/**<fim_suffix>
@Data
@ToString
public class FetchHistoryMessageRespAction extends Action {

    public FetchHistoryMessageRespAction() {
        this.setActionType("""");
        this.setAction(ActionIdEnum.ACTION_FETCH_HISTORY_MESSAGE_RESP.getAction());
        this.setRequestId(UUID.randomUUID().toString());
    }

    private List<MessageItem> items;

}
<fim_middle>","
 * 登陆请求action
 */","
 * @author 周何�"
"<fim_prefix>package cn.foxtech.channel.opcua.entity;

import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

@Builder(toBuilder = true)
@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class OpcUaNodeEntity {
    /**
     * 节点ID
     */
    private OpcUaNodeId nodeId;
    /**<fim_suffix>
    private Object value;
    /**
     * 数值类型
     */
    private String type;
}
<fim_middle>","
     * 数值
     */","
     * 节点名称
    "
"<fim_prefix>package cn.foxtech.channel.opcua.entity;

import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.Setter;

@Builder(toBuilder = true)
@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class OpcUaNodeEntity {
    /**
     * 节点ID
     */
    private OpcUaNodeId nodeId;
    /**
     * 数值
     */
    private Object value;
    /**<fim_suffix>
    private String type;
}
<fim_middle>","
     * 数值类型
     */","
     * 类型
     */"
"<fim_prefix>package com.rzg.zombieland.server.comunicacion.peticion;

import com.rzg.zombieland.comunes.comunicacion.Enviable;
import com.rzg.zombieland.comunes.comunicacion.Peticion;
import com.rzg.zombieland.comunes.comunicacion.pojo.POJOPartida;
import com.rzg.zombieland.comunes.comunicacion.respuesta.RespuestaGenerica;

/**<fim_suffix>
public class PeticionActualizacionLobby extends Peticion<POJOPartida, RespuestaGenerica> {

    public PeticionActualizacionLobby(POJOPartida enviable) {
        super(enviable, RespuestaGenerica.class);
    }

    @Override
    protected int getCodigoPeticion() {
        return Enviable.ACTUALIZACION_LOBBY;
    }

}
<fim_middle>","
 * Envía una petición de actualización de lobby a los clientes.
 * @author nicolas
 *
 */","
 * Created by xanadurenah on 10/7/16.
 */"
"<fim_prefix>package com.ruipengkj.dgxtos;

/**<fim_suffix>
public interface ConstantValue {
	
	static boolean DEBUG = true;

}
<fim_middle>","
 * 全局常量类
 * @author ruipengVictor
 *
 */","
 * @author 郭金鹏<br>
 * @date 2018年"
"<fim_prefix>package com.supermarket.image.utils;

import com.supermarket.common.utils.VerifyCode;
import org.apache.commons.lang3.tuple.Pair;

import javax.imageio.stream.ImageOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;

public class ValistrUtils {
    private ValistrUtils() {
    }

    /**<fim_suffix>
    public static Pair<String, byte[]> generateValistr(){
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        VerifyCode img = new VerifyCode();
        img.drawImage(out);
        return Pair.of(img.getCode(), out.toByteArray());
    }
}
<fim_middle>","
     * 生成一个键值对，key是验证码的字符串，value是图片的byte数组
     * @return 一个键值对
     */","
     * 生成验证码
     * @return
     */"
"<fim_prefix>package de.sedico.sql.importing;

import de.sedico.sql.Table;
/**<fim_suffix>
public interface SQLImportStrategy {
    Table fetchTable();
}
<fim_middle>","
 * Hier wird das Interface SQLImportStrategy implementiert. Hier wird die Importstrategy der SQL-Datenbank implementiert.
 * @author jens
 *
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.linkwechat.wecom.service;

import com.baomidou.mybatisplus.extension.service.IService;
import com.linkwechat.wecom.domain.WeChatItem;
import com.linkwechat.wecom.domain.dto.WeChatItemDto;
import com.linkwechat.wecom.domain.vo.WeChatSideVo;

import java.util.List;

/**<fim_suffix>
public interface IWeChatItemService extends IService<WeChatItem> {

    /**
     * 侧边栏抓取素材
     *
     * @param chatItemDto 侧边栏素材
     * @return 结果
     */
    public int checkItems(WeChatItemDto chatItemDto);

    /**
     * h5素材列表
     *
     * @param sideId 侧边栏id
     * @return
     */
    public List<WeChatSideVo> chatItems(Long sideId,String keyword,String mediaType,String userId);

}
<fim_middle>","
 * 聊天工具侧边栏
 * @author kewen
 */","
 * <p>
 * 微信素材表 服务类
 * </"
"<fim_prefix>package com.linkwechat.wecom.service;

import com.baomidou.mybatisplus.extension.service.IService;
import com.linkwechat.wecom.domain.WeChatItem;
import com.linkwechat.wecom.domain.dto.WeChatItemDto;
import com.linkwechat.wecom.domain.vo.WeChatSideVo;

import java.util.List;

/**
 * 聊天工具侧边栏
 * @author kewen
 */
public interface IWeChatItemService extends IService<WeChatItem> {

    /**<fim_suffix>
    public int checkItems(WeChatItemDto chatItemDto);

    /**
     * h5素材列表
     *
     * @param sideId 侧边栏id
     * @return
     */
    public List<WeChatSideVo> chatItems(Long sideId,String keyword,String mediaType,String userId);

}
<fim_middle>","
     * 侧边栏抓取素材
     *
     * @param chatItemDto 侧边栏素材
     * @return 结果
     */","
     * 新增
     *
     * @param chatItemDto
     * @return
     */"
"<fim_prefix>wecom.domain.WeChatItem;
import com.linkwechat.wecom.domain.dto.WeChatItemDto;
import com.linkwechat.wecom.domain.vo.WeChatSideVo;

import java.util.List;

/**
 * 聊天工具侧边栏
 * @author kewen
 */
public interface IWeChatItemService extends IService<WeChatItem> {

    /**
     * 侧边栏抓取素材
     *
     * @param chatItemDto 侧边栏素材
     * @return 结果
     */
    public int checkItems(WeChatItemDto chatItemDto);

    /**<fim_suffix>
    public List<WeChatSideVo> chatItems(Long sideId,String keyword,String mediaType,String userId);

}
<fim_middle>","
     * h5素材列表
     *
     * @param sideId 侧边栏id
     * @return
     */","
     * 侧边栏获取素材
     *
     * @param sideId                 "
"<fim_prefix>package org.crue.hercules.sgi.csp.repository.specification;

import org.crue.hercules.sgi.csp.model.Proyecto;
import org.crue.hercules.sgi.csp.model.ProyectoProrroga;
import org.crue.hercules.sgi.csp.model.ProyectoProrroga_;
import org.crue.hercules.sgi.csp.model.Proyecto_;
import org.springframework.data.jpa.domain.Specification;

public class ProyectoProrrogaSpecifications {

  /**<fim_suffix>
  public static Specification<ProyectoProrroga> byProyectoId(Long id) {
    return (root, query, cb) -> {
      return cb.equal(root.get(ProyectoProrroga_.proyecto).get(Proyecto_.id), id);
    };
  }

}
<fim_middle>","
   * {@link ProyectoProrroga} del {@link Proyecto} con el id indicado.
   * 
   * @param id identificador del {@link Proyecto}.
   * @return specification para obtener los {@link ProyectoProrroga} del
   *         {@link Proyecto} con el id indicado.
   */","
   * Returns a {@link Specification} for the given {@link ProyectoProrroga} id.
   *
   * @param id the id of the {@link ProyectoProrroga} to fetch.
   * @return the {@link Specification} for the given {@link ProyectoProrroga} id.
   */"
"<fim_prefix>
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JFrame;

/**<fim_suffix>
public class Movimenta {
    /**
     * Método estático que leva o botão 5 pixels para cima
     * @param botao 
     */
    public static void irCima(JButton botao) {
        if (botao.getY() > 0) {
            botao.setBounds(botao.getX(), botao.getY() - 5, botao.getWidth(), botao.getHeight());
        }
    }
    
    public static boolean irEsquerda(JButton botao) {
        if (botao.getX() > 0) {
     <fim_middle>","
 * Classe com métodos estáticos para movimentar botão nas 4 direções
 * @author laboratorio
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>
import java.util.Random;
import javax.swing.JButton;
import javax.swing.JFrame;

/**
 * Classe com métodos estáticos para movimentar botão nas 4 direções
 * @author laboratorio
 */
public class Movimenta {
    /**<fim_suffix>
    public static void irCima(JButton botao) {
        if (botao.getY() > 0) {
            botao.setBounds(botao.getX(), botao.getY() - 5, botao.getWidth(), botao.getHeight());
        }
    }
    
    public static boolean irEsquerda(JButton botao) {
        if (botao.getX() > 0) {
            botao.setBounds(botao.getX() - 5, botao.getY(), botao.getWidth(), botao.getHeight());            
        }
      <fim_middle>","
     * Método estático que leva o botão 5 pixels para cima
     * @param botao 
     */","
     * Método para mover botão para direita
     * @param botao botão a ser movido
     */"
"<fim_prefix>package io.github.xezzon.tao.observer;

/**<fim_suffix>
public interface Observation {

}
<fim_middle>","
 * 观察者 - 通知消息
 * @author xezzon
 */","
 * @author Xezzon
 */"
"<fim_prefix>package io.mosip.biometrics.util.nist.parser.v2011.dto;

import java.io.Serializable;

import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;

import io.mosip.biometrics.util.nist.parser.v2011.constant.XmlnsNameSpaceConstant;
import lombok.Data;

@Data
/**<fim_suffix>
public class FPIFingerprintOrientation implements Serializable {
    @JacksonXmlProperty(namespace = XmlnsNameSpaceConstant.NAMESPACE_URL_BIOM, localName = ""OrientationAngleValue"")
    private int orinAngle;
    
    @JacksonXmlProperty(namespace = XmlnsNameSpaceConstant.NAMESPACE_URL_BIOM, localName = ""OrientationAngleUncertaintyValue"")
    private int oriAngleUncertainty;
}<fim_middle>","
 * FPI = FingerprintImage
 */","
 * 
 * @author  <NAME>"
"<fim_prefix>package lib.stat.dirmult;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Options;

/**<fim_suffix>
public interface DirMultCLIprocessing {

	Options getOptions();
	void processCLI(final CommandLine cmd);
	
}
<fim_middle>","
 * TODO
 */","
 * Interface for processing"
"<fim_prefix>package club.xiaojiawei.controls.ico;

import club.xiaojiawei.controls.images.ImagesLoader;
import javafx.scene.layout.StackPane;
import org.girod.javafx.svgimage.SVGImage;
import org.girod.javafx.svgimage.SVGLoader;

/**<fim_suffix>
public class DateIco extends AbstractIco {

    public DateIco() {
        this(null);
    }

    public DateIco(String color) {
        super(color);
        SVGImage svgImage = SVGLoader.load(ImagesLoader.class.getResource(this.getClass().getSimpleName() + "".svg""));
        if (svgImage != null) {
            this.setMaxWidth(svgImage.getWidth());
            this.getChildren().add(svgImage);
        }
  <fim_middle>","
 * @author 肖嘉威 xjw580@qq.com
 * @date 2023/10/31 0:28
 */","
 * @author : xiaojiawei
 * @date : 17/12/21
 */"
"<fim_prefix>/**<fim_suffix>
package poc.jbehave.todo.test;<fim_middle>","
 * <p>Ce paquetage contient :
 * <ul>
 * <li>la classe {@link poc.jbehave.AllStoriesTest}, pour l'exécution des scénarii de test ;</li>
 * <li>des sous-paquetages pour la définition des étapes des scénarii JBehave.</li>
 * </ul>
 * </p>
 * 
 * @author Xavier Pigeon
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.zbl.msb.concurrent.c_026;

/**<fim_suffix>
public class T02_ExecutorService  {

}
<fim_middle>","
 * 认识ExecutorService,阅读API文档
 * 认识submit方法，扩展了execute方法，具有一个返回值
 */","
 * @author James
 * @Description
 */"
"<fim_prefix>package com.github.mybatis.easy.go.windowFunctions;

import com.github.mybatis.easy.go.Function;
import com.github.mybatis.easy.go.exception.SelfCheckException;
import com.github.mybatis.easy.go.methodAnnotation._Over;
import com.github.mybatis.easy.go.step.Mysql5StepGenerator;
import com.github.mybatis.easy.go.supportAnnotation.UnSupport;

/**<fim_suffix>
@_Over
@UnSupport(unSupportGenerator = {Mysql5StepGenerator.class})
public class DenseRank extends Function {
    @Override
    public void selfCheck() throws SelfCheckException {

    }
}
<fim_middle>","
 * 数据项在分组中的排名，排名相等会在名次中不会留下空位
 */","
 * @author liuzh
 */"
"<fim_prefix>package com.sctbc.Dao;

import com.sctbc.Pojo.outline.Stu_classOtl;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

/**<fim_suffix>
@Mapper
public interface Stu_classOtlMapper {
    /**
     * 根据教师id查询教师所管理的班级信息
     * @param teaid
     * @return
     */
    List<Stu_classOtl> queryStuOtlClass(String teaid);

}
<fim_middle>","
 * 班级
 */","
 * @author sctbc"
"<fim_prefix>package com.sctbc.Dao;

import com.sctbc.Pojo.outline.Stu_classOtl;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

/**
 * 班级
 */
@Mapper
public interface Stu_classOtlMapper {
    /**<fim_suffix>
    List<Stu_classOtl> queryStuOtlClass(String teaid);

}
<fim_middle>","
     * 根据教师id查询教师所管理的班级信息
     * @param teaid
     * @return
     */","
     * 查询班级
     * @param teaid
     * @return
     */"
"<fim_prefix>package com.talent.aio.client;

/**<fim_suffix>
public class Main
{

	/**
	 * 
	 *
	 * @author: tanyaowu
	 * @创建时间:　2017年3月5日 下午6:03:39
	 * 
	 */
	public Main()
	{
		
	}

	/**
	 * @param args
	 *
	 * @author: tanyaowu
	 * @创建时间:　2017年3月5日 下午6:03:39
	 * 
	 */
	public static void main(String[] args)
	{
		//把所有源文件归到talent-aio-common中了，此工程暂时没有用处
	}

}
<fim_middle>","
 * 
 * @author tanyaowu 
 * @创建时间 2017年3月5日 下午6:03:39
 *
 * @操作列表
 *  编号	| 操作时间	| 操作人员	 | 操作说明
 *  (1) | 2017年3月5日 | tanyaowu | 新建类
 *
 */","
 * 
 * @author: tanyaowu
 * @创建时间:　2017年3月5日 下午6:03:39
 * 
 */"
"<fim_prefix>package com.talent.aio.client;

/**
 * 
 * @author tanyaowu 
 * @创建时间 2017年3月5日 下午6:03:39
 *
 * @操作列表
 *  编号	| 操作时间	| 操作人员	 | 操作说明
 *  (1) | 2017年3月5日 | tanyaowu | 新建类
 *
 */
public class Main
{

	/**<fim_suffix>
	public Main()
	{
		
	}

	/**
	 * @param args
	 *
	 * @author: tanyaowu
	 * @创建时间:　2017年3月5日 下午6:03:39
	 * 
	 */
	public static void main(String[] args)
	{
		//把所有源文件归到talent-aio-common中了，此工程暂时没有用处
	}

}
<fim_middle>","
	 * 
	 *
	 * @author: tanyaowu
	 * @创建时间:　2017年3月5日 下午6:03:39
	 * 
	 */","
	 * 
	 * @author: tanyaowu
	 * @创建时间:　2017年3月5日 下午6:03:39
	 * 
	 */"
"<fim_prefix>package com.talent.aio.client;

/**
 * 
 * @author tanyaowu 
 * @创建时间 2017年3月5日 下午6:03:39
 *
 * @操作列表
 *  编号	| 操作时间	| 操作人员	 | 操作说明
 *  (1) | 2017年3月5日 | tanyaowu | 新建类
 *
 */
public class Main
{

	/**
	 * 
	 *
	 * @author: tanyaowu
	 * @创建时间:　2017年3月5日 下午6:03:39
	 * 
	 */
	public Main()
	{
		
	}

	/**<fim_suffix>
	public static void main(String[] args)
	{
		//把所有源文件归到talent-aio-common中了，此工程暂时没有用处
	}

}
<fim_middle>","
	 * @param args
	 *
	 * @author: tanyaowu
	 * @创建时间:　2017年3月5日 下午6:03:39
	 * 
	 */","
	 * 
	 * @param args
	 * @author: tanyaowu
	 * @创建时间:　2017年3月5日 下午6:03:39
	 * 
	 */"
"<fim_prefix>package com.tmp.demo.ssh;

public class Test5 {

    /**<fim_suffix>

}
<fim_middle>","
     *
     * 场景：一次调度
     *      1、单机：1条log
     *      2、重试：1条log + N条重试log
     *      3、分片：N条分片Log
     *      4、分片：N条分片Log + N条重试log
     *
     * 概念：
     *      分片：概念统一，单机是单节点的重试；
     *          - 0/1
     *          - 0/2 + 1/2
     *      重试：概念统一，单次是重试此时为0
     *
     *  日志结构：
     *      日志组：
     *          分片1：
     *              重试1
     *              重试2
     *          分片2：
     *              重试1
     *  日志表：
     *      日志组：
     *
     */","
     * @param args
     * @throws Exception
     */"
"<fim_prefix>package com.sctbc.Service.outline;

import com.sctbc.Dao.Stu_classOtlMapper;
import com.sctbc.Pojo.outline.Stu_classOtl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class Stu_classOtlServer {
    @Autowired
    private Stu_classOtlMapper stu_classMapper;

    /**<fim_suffix>
    public List<Stu_classOtl> queryStuOtlClass(String teaid){
        return stu_classMapper.queryStuOtlClass(teaid);
    }
}
<fim_middle>","
     * 根据教师id查询教师所管理的班级信息
     * @param teaid
     * @return
     */","
     * 查询班级
     * @param teaid
     * @return
     */"
"<fim_prefix>package com.hero.wireless.sort;

import com.hero.wireless.web.entity.send.Input;

/**<fim_suffix>
public interface ISortSMSService {
	/**
	 * 分拣信息
	 */
	void sort(Input input) throws Exception;
}
<fim_middle>","
 * 分拣信息业务类
 * 
 * @author Administrator
 * 
 */","
 * 短信分拣服务
 * 
 * @author wanghaiyang
"
"<fim_prefix>package com.hero.wireless.sort;

import com.hero.wireless.web.entity.send.Input;

/**
 * 分拣信息业务类
 * 
 * @author Administrator
 * 
 */
public interface ISortSMSService {
	/**<fim_suffix>
	void sort(Input input) throws Exception;
}
<fim_middle>","
	 * 分拣信息
	 */","
	 * 分拣信息
	 *"
"<fim_prefix>package com.joe.utils.pool;

import java.util.function.Supplier;

/**<fim_suffix>
public interface PooledObject<T> extends AutoCloseable, Supplier<T> {

    /**
     * 关闭方法，禁止抛出异常
     */
    void close();
}
<fim_middle>","
 * 池对象持有者，获取到之后可以从该对象
 *
 * @author JoeKerouac
 * @version $Id: joe, v 0.1 2019年03月05日 15:02 JoeKerouac Exp $
 */","
 * 池化对象接口
 *
 * @param <T>
 * @author joe
 */"
"<fim_prefix>package com.joe.utils.pool;

import java.util.function.Supplier;

/**
 * 池对象持有者，获取到之后可以从该对象
 *
 * @author JoeKerouac
 * @version $Id: joe, v 0.1 2019年03月05日 15:02 JoeKerouac Exp $
 */
public interface PooledObject<T> extends AutoCloseable, Supplier<T> {

    /**<fim_suffix>
    void close();
}
<fim_middle>","
     * 关闭方法，禁止抛出异常
     */","
     * 关闭对象
     */"
"<fim_prefix>package ru.nuzmsh.web.vochelper;

/**<fim_suffix>
public @interface AVocFinder {

}
<fim_middle>","
 * Поиск справочника
 */","
 * Created by <NAME> on 15."
"<fim_prefix>/**<fim_suffix>
package br.com.hslife.orcamento.specification;

import br.com.hslife.orcamento.entity.EntityPersistence;

public abstract class AbstractCRUDSpecification<E extends EntityPersistence> extends AbstractSpecification<E> implements ICRUDSpecification<E> {
	
}
<fim_middle>","*

Copyright (c) 2012 - 2021 Hércules S. S. José

Este arquivo é parte do programa Orçamento Doméstico.


Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou

modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como

publicada pela Fundação do Software Livre (FSF); na versão 3.0 da

Licença.


Este programa é distribuído na esperança que possa ser útil, mas SEM

NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer

MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral Menor

GNU em português para maiores detalhes.


Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob

o nome de ""LICENSE"" junto com este programa, se não, acesse o site do

projeto no endereco https://github.com/herculeshssj/orcamento ou escreva

para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor,

Boston, MA  02110-1301, USA.


Para mais informações sobre o programa Orçamento Doméstico e seu autor

entre em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva

para Hércules S. S. José, Rua José dos Anjos, 160 - Bl. 3 Apto. 304 -

Jardim Alvorada - CEP: 26261-130 - Nova Iguaçu, RJ, Brasil.

***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package nc.isi.fragaria_adapter_rewrite.resources;


/**<fim_suffix>
public interface ConnectionData {

}
<fim_middle>","
 * Une interface pour définir les propriétés de connection d'une dataSource Pour
 * ajouter un type de dataSource au framework, il faudra contribuer à
 * {@link ConnectionDataBuilder} une implémentation de ConnectionData associée
 * au type de dataSource
 * 
 * 
 * 
 * @author jmaltat
 * 
 */","
 * Created by <NAME> on 10/10/2017.
 */"
"<fim_prefix>.tangyuan.ognl.OgnlException;
import org.xson.tangyuan.ognl.map.OgnlMap;
import org.xson.tangyuan.ognl.xco.OgnlXCO;
import org.xson.tangyuan.util.TypeUtils;

public class ParameterConverter {

	private IConverter	fastJsonConverter	= new FastJsonConverter();
	private IConverter	jsonStringConverter	= new JsonStringConverter();
	private IConverter	xmlStringConverter	= new XmlStringConverter();

	/**<fim_suffix>
	public Object parameterConvert(Object object, Class<?> resultType) {
		if (null == object) {
			return null;
		}
		if (object instanceof XCO) {
			return object;
		}
		if (object instanceof Map) {
			return object;
		}
		if (object instanceof String) {
			if (xmlStringConverter.isSupportType(object)) {
				return xmlStringConverter.convert(object, resultType);
			}
			if (jsonStringConverter<fim_middle>","
	 * SQL Service 服务参数转换
	 */","
	 * 转换参数
	 * 
	"
"<fim_prefix>package org.tty.pcard;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

/**<fim_suffix>
@Retention(RetentionPolicy.RUNTIME)
public @interface CardIdentity {
    String type();
}
<fim_middle>","
 * 卡片标识
 */","
 * 卡片身份注解
"
"<fim_prefix>larak çözümlenecek
 * 
 * @author Hakan Uygun
 */
@Stereotype
@Dependent
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Named
@Documented
public @interface CalendarEventSource {

    /**
     * Kullanıcı tarafından oluşturulup oluşturulamıyacağı.
     * 
     * eğer true olursa Calendar New düğmesine eklenir.
     * 
     * @return 
     */
    boolean creatable() default false;
    
    /**<fim_suffix>
    boolean hasDialog() default false;
    
    /**
     * Eğer dilog bulunmuyorsa bu değer dikkate alınmaz. Eğer dialog varsa mutlaka doldurulması gerekir.
     * @return 
     */
    Class<? extends ViewConfig> dialogPage() default ViewConfig.class;
    
    /**
     * Bu kaynağı görmesi için hangi yetki domainin kullanılacağı.
     * 
     * Eğer boş ise public açık anlamına gelecektir.
     * 
     * @r<fim_middle>","
     * Event için bir dialog olup olmadığı.
     * 
     * Eğer yoksa control sınıfı tarafından redirect edilmesi istenir.
     * 
     * @return 
     */","
     * Kullanıcı tarafından düzenlenebilir mi olacağı.
     * 
     * eğer true olursa Calendar Edit düğmesine eklenir.
     * 
     * @return 
   "
"<fim_prefix>.telve.calendar.annotations;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import javax.enterprise.context.Dependent;
import javax.enterprise.inject.Stereotype;
import javax.inject.Named;
import org.apache.deltaspike.core.api.config.view.ViewConfig;

/**<fim_suffix>
@Stereotype
@Dependent
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Named
@Documented
public @interface CalendarEventSource {

    /**
     * Kullanıcı tarafından oluşturulup oluşturulamıyacağı.
     * 
     * eğer true olursa Calendar New düğmesine eklenir.
     * 
     * @return 
     */
    boolean creatable() default false;
    
    /**
     * Event için bir dialog olup olmadığı.
     <fim_middle>","
 * Takvim olayları için kaynak arayüzü.
 * 
 * Farklı sistemlerden takvim'e içerik göndermek için bir arayüz. Her içerik kaynağı geri dönüşler için bazı tanımları yapmak durumunda.
 * 
 * Bazı şeyler namingConvention ile bulunur.
 * 
 * SourceName: Sınıf ismi olacaktır. UI üzerinde calendar.source.name.{name} olarak çözümlenecek
 * Style : Her kaynak için farklı renk kodları için calendar.source.style.{name} olarak çözümlenecek
 * 
 * @author Hakan Uygun
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>ent için bir dialog olup olmadığı.
     * 
     * Eğer yoksa control sınıfı tarafından redirect edilmesi istenir.
     * 
     * @return 
     */
    boolean hasDialog() default false;
    
    /**
     * Eğer dilog bulunmuyorsa bu değer dikkate alınmaz. Eğer dialog varsa mutlaka doldurulması gerekir.
     * @return 
     */
    Class<? extends ViewConfig> dialogPage() default ViewConfig.class;
    
    /**<fim_suffix>
    String permission() default """";
}
<fim_middle>","
     * Bu kaynağı görmesi için hangi yetki domainin kullanılacağı.
     * 
     * Eğer boş ise public açık anlamına gelecektir.
     * 
     * @return 
     */","
     * Eğer dialog varsa bu değer dikkate alınmaz. Eğer dialog yoksa mutlaka doldurulması gerekir.
     * @return 
     */"
"<fim_prefix>gConvention ile bulunur.
 * 
 * SourceName: Sınıf ismi olacaktır. UI üzerinde calendar.source.name.{name} olarak çözümlenecek
 * Style : Her kaynak için farklı renk kodları için calendar.source.style.{name} olarak çözümlenecek
 * 
 * @author Hakan Uygun
 */
@Stereotype
@Dependent
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Named
@Documented
public @interface CalendarEventSource {

    /**<fim_suffix>
    boolean creatable() default false;
    
    /**
     * Event için bir dialog olup olmadığı.
     * 
     * Eğer yoksa control sınıfı tarafından redirect edilmesi istenir.
     * 
     * @return 
     */
    boolean hasDialog() default false;
    
    /**
     * Eğer dilog bulunmuyorsa bu değer dikkate alınmaz. Eğer dialog varsa mutlaka doldurulması gerekir.
     * @return 
     */
    Class<? extends Vi<fim_middle>","
     * Kullanıcı tarafından oluşturulup oluşturulamıyacağı.
     * 
     * eğer true olursa Calendar New düğmesine eklenir.
     * 
     * @return 
     */","
     * Event için bir dialog olup olmadığı.
     * 
     * Eğer yoksa control sınıfı tarafından redirect edilmesi istenir.
     * 
     * @return 
     */"
"<fim_prefix> * Kullanıcı tarafından oluşturulup oluşturulamıyacağı.
     * 
     * eğer true olursa Calendar New düğmesine eklenir.
     * 
     * @return 
     */
    boolean creatable() default false;
    
    /**
     * Event için bir dialog olup olmadığı.
     * 
     * Eğer yoksa control sınıfı tarafından redirect edilmesi istenir.
     * 
     * @return 
     */
    boolean hasDialog() default false;
    
    /**<fim_suffix>
    Class<? extends ViewConfig> dialogPage() default ViewConfig.class;
    
    /**
     * Bu kaynağı görmesi için hangi yetki domainin kullanılacağı.
     * 
     * Eğer boş ise public açık anlamına gelecektir.
     * 
     * @return 
     */
    String permission() default """";
}
<fim_middle>","
     * Eğer dilog bulunmuyorsa bu değer dikkate alınmaz. Eğer dialog varsa mutlaka doldurulması gerekir.
     * @return 
     */","
     * Event için bir dialog olup olmadığı.
     * 
     * Eğer yoksa control sınıfı tarafından redirect edilmesi istenir.
     * 
    "
"<fim_prefix>/**<fim_suffix>
package br.com.hslife.orcamento.facade;

import java.util.List;

import br.com.hslife.orcamento.entity.Montadora;

public interface IMontadora extends ICRUDService<Montadora> {

	List<Montadora> buscarPorDescricao(String descricao);

}
<fim_middle>","*

Copyright (c) 2012 - 2021 Hércules S. S. José

Este arquivo é parte do programa Orçamento Doméstico.


Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou

modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como

publicada pela Fundação do Software Livre (FSF); na versão 3.0 da

Licença.


Este programa é distribuído na esperança que possa ser útil, mas SEM

NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer

MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral Menor

GNU em português para maiores detalhes.


Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob

o nome de ""LICENSE"" junto com este programa, se não, acesse o site do

projeto no endereco https://github.com/herculeshssj/orcamento ou escreva

para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor,

Boston, MA  02110-1301, USA.


Para mais informações sobre o programa Orçamento Doméstico e seu autor

entre em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva

para Hércules S. S. José, Rua José dos Anjos, 160 - Bl. 3 Apto. 304 -

Jardim Alvorada - CEP: 26261-130 - Nova Iguaçu, RJ, Brasil.

***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package zzz.study.patterns.wrapper.rules.constants;

/**<fim_suffix>
public enum MatchStrategy {

    ANY,
    ALL,

    ;
}
<fim_middle>","
 * 多条件匹配策略
 */","
 * @author <NAME>
"
"<fim_prefix>package com.lifei.algorithms.chapter1_1;

/**<fim_suffix>
public class Exercise_32 {

	public static void main(String[] args) {
		
		
	}

}
<fim_middle>","
 * 题目：
 * 1.1.2给出以下表达式的值:
	a.( 0 + 15 ) / 2
 * @author LiFei
 *
 */","
 * 题目1.1.32
 * 编写一个程序，打印出从1到最大的n位数。
 * @author <NAME>
 *
 */"
"<fim_prefix>public class BR_0713 {

	public static void main(String[] args) {
		/*<fim_suffix>

		String line = """";
		for (int i = 2; i <= 4; i++) {
			for (int j = 1; j <= 5; j++) {
				line += i + "" * "" + j +"" = "" + String.format(""%2d"", i*j);
				if (j == 5) line += ""\n"";
				else line += String.format(""%3s"", "" "");
			}
		}
		
		
		System.out.print(line);
		
	}
	
}
<fim_middle>"," *****************************************************************
		 * 문제.
		 * 구구단의 일부를 다음과 같이 출력하는 프로그램을 작성하시오.
		 * 
		 * 곱셈의 결과는 오른쪽으로 맞추어 출력을 하고 결과값 사이의 공백은 3칸으로 한다.
		 * 
		 * 출력형식 예) 2_*_1_=__2___ (_는 공백을 나타내는 것임)​​​​
		 * 
		 * 출력 예.
		 * ===============================================================
		 * 2 * 1 =  2   2 * 2 =  4   2 * 3 =  6   2 * 4 =  8   2 * 5 = 10
		 * 3 * 1 =  3   3 * 2 =  6   3 * 3 =  9   3 * 4 = 12   3 * 5 = 15
		 * 4 * 1 =  4   4 * 2 =  8   4 * 3 = 12   4 * 4 = 16   4 * 5 = 20
		 * ===============================================================
		 * *****************************************************************/","
		 * 1 * 1 = 1
		 * 1 * 2 = 2
		 * 1 * 3 = 3
		 * 1 * 4 = 4
		 * 1 * 5 = 5
		 * 
		 * 2 * 1 = 2
		 * 2 * 2 = 4
		 * 2 * 3 = 6
		 * 2 * 4 = 8
		 * 2 * 5 = 10
		 * 
		 * 3 * 1 = 3
		 * 3 * 2 = 6
		 * 3 * 3 = 9
		 * 3 * 4 = 12
		 * 3 * 5 = 15
		 * 
		 * 4 * 1 = 4
		 * 4 * 2 = 8
		 * 4 * 3 = 12
		 * 4 * 4 = 16
		 * 4 * 5 = 20
		 * 
		 * 5 * 1 = 5
		 * 5 * 2 = 10
		 * 5 * 3 = 15
		 * 5 * 4 = 20
		 * 5 * 5 = 25
		 */"
"<fim_prefix>package cn.byteforge.openqq.ws.entity.transfer;

/**<fim_suffix>
public interface Transfer {
}
<fim_middle>","
 * 消息类型接口
 * */","
 *
 * @author <a"
"<fim_prefix>package me.wuxie.wakeshow.wakeshow.network.server_out;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import me.wuxie.wakeshow.wakeshow.network.OutPacket;

import java.util.List;
import java.util.Set;

/**<fim_suffix>
public class MessageHook extends OutPacket {
    public MessageHook(Set<String> hookData) {
        super(6);
        JsonElement je = new Gson().toJsonTree(hookData);
        getPacketBuffer().writeString(je.toString());
    }
}
<fim_middle>","
 * 1s 内连续的Hook消息发送将会被客户端阻断第一个之后的Hook消息
 */","
 * Created by Simon on 2017/3/16.
 */"
"<fim_prefix>package com.eyesmoons.lineage.neo4j.domain;

import com.eyesmoons.lineage.contants.NeoConstant;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import org.neo4j.ogm.annotation.NodeEntity;

import java.util.Optional;

/**<fim_suffix>
@EqualsAndHashCode(callSuper = true)
@NodeEntity(NeoConstant.Type.NODE_DATASOURCE)
@NoArgsConstructor
public class DataSourceNode extends BaseNodeEntity {

    public DataSourceNode(String dataSourceName) {
        Optional.ofNullable(dataSourceName).ifPresent(this::setDataSourceName);
        // dataSource
        String pk = NodeQualifiedName.ofDataSource(this.getDataSourceName()).toString();
        this<fim_middle>","
 * dataSource Node
 * 基本字段使用存储字段
 * dataSourceName
 */","
 * Created by vishna on 13/08/17.
 */"
"<fim_prefix>package org.openyu.commons.enumz;

/**<fim_suffix>
public interface LimitEnum extends BaseEnum
{
	/**
	 * 最大值,上限
	 * 
	 * @return
	 */
	int maxValue();

	/**
	 * 最小值,下限
	 * 
	 * @return
	 */
	int minValue();
}
<fim_middle>","
 * 列舉成員命名，請使用英文大寫形式
 */","
 * 限定枚举
 * 
 * @author luocong
"
"<fim_prefix>package org.openyu.commons.enumz;

/**
 * 列舉成員命名，請使用英文大寫形式
 */
public interface LimitEnum extends BaseEnum
{
	/**<fim_suffix>
	int maxValue();

	/**
	 * 最小值,下限
	 * 
	 * @return
	 */
	int minValue();
}
<fim_middle>","
	 * 最大值,上限
	 * 
	 * @return
	 */","
	 * 最大值,上限
	 * 
	 * @return
	 */"
"<fim_prefix>package org.openyu.commons.enumz;

/**
 * 列舉成員命名，請使用英文大寫形式
 */
public interface LimitEnum extends BaseEnum
{
	/**
	 * 最大值,上限
	 * 
	 * @return
	 */
	int maxValue();

	/**<fim_suffix>
	int minValue();
}
<fim_middle>","
	 * 最小值,下限
	 * 
	 * @return
	 */","
	 * 最小值,下限
	 * 
	 * @return
	 */"
"<fim_prefix>package cc.gzvtc.comment.dao;

import cc.gzvtc.common.dao.BaseMapper;
import cc.gzvtc.model.TComment;

/**<fim_suffix>
public interface ICommentDao extends BaseMapper<TComment>{

}<fim_middle>","
 * 
 * @author hzc 2017年3月1日
 *
 */","
 * Created by RAON on 2017/5/31.
 */"
"<fim_prefix>package org.ter.coyote;

import java.io.IOException;
import java.nio.ByteBuffer;

/**<fim_suffix>
public interface InputBuffer {
    /**
     * 从关联的SocketWrapper当中读取数据到缓冲区
     *
     * @return true有数据被读取，false没有读取到数据
     * @throws IOException 在读取的过程当中发生错误
     */
    int read(ByteBuffer byteBuffer) throws IOException;
}
<fim_middle>","
 * 从SocketChannel中读取数据，读取数据的操作在Adapter中进行
 */","
 * 负责从SocketWrapper当中读取数据到缓冲区
 *
 *"
"<fim_prefix>package org.ter.coyote;

import java.io.IOException;
import java.nio.ByteBuffer;

/**
 * 从SocketChannel中读取数据，读取数据的操作在Adapter中进行
 */
public interface InputBuffer {
    /**<fim_suffix>
    int read(ByteBuffer byteBuffer) throws IOException;
}
<fim_middle>","
     * 从关联的SocketWrapper当中读取数据到缓冲区
     *
     * @return true有数据被读取，false没有读取到数据
     * @throws IOException 在读取的过程当中发生错误
     */","
     * 从SocketChannel中读取数据
     * @param byteBuffer
     * @return
     * @throws IOException
     */"
"<fim_prefix>package year2020.month09;

import java.util.Scanner;

public class BR_0924 {

	public static void main(String[] args) {
		/*<fim_suffix>
		Scanner sc = new Scanner(System.in);
		
		int[] ary = new int[5];
		for (int i = 0; i < 5; i++) {
			ary[i] = (int) sc.nextInt();
		}
		
		sc.close();
		
		System.out.println(addAbs(ary));
		
	}
	
	private static int addAbs(int[] ary) {
		int result = 0;
		for (int num : ary) {
			result += (int) Math.abs(num);
		}
		return result;
	}

}
<fim_middle>"," **************************************************
		 * 문제.
		 * 5개의 정수를 입력받아 각 정수의 절대값의 합을 출력하는 프로그램을 작성하시오.
		 *
		 *
		 * 입력 예.
		 * ===========================
		 * 35 -20 10 0 55
		 * ===========================
		 *
		 * 출력 예.
		 * ===========================
		 * 120
		 * ===========================
		 * **************************************************/","
		 * 1. 문제 : https://www.acmicpc.net/problem/9247
		 * 2. 풀이 : 
		 */"
"<fim_prefix>package com.mavenr.service;

import com.mavenr.entity.Table;

import java.util.List;
import java.util.Properties;

/**<fim_suffix>
public interface DataInfoInterface {

    /**
     * 初始化信息
     * @param properties
     */
    void init(Properties properties);

    /**
     * 表信息获取
     * @param properties 参数信息
     * @return
     */
    List<Table> columns(Properties properties) throws Exception;
}
<fim_middle>","
 * @author mavenr
 * @Classname DataInfoInterface
 * @Description 数据信息接口
 * @Date 2021/12/20 17:04
 */","
 * 数据信息接口
 *
 * @author zongwei
 * @date 2021/3/25
 */"
"<fim_prefix>package com.mavenr.service;

import com.mavenr.entity.Table;

import java.util.List;
import java.util.Properties;

/**
 * @author mavenr
 * @Classname DataInfoInterface
 * @Description 数据信息接口
 * @Date 2021/12/20 17:04
 */
public interface DataInfoInterface {

    /**<fim_suffix>
    void init(Properties properties);

    /**
     * 表信息获取
     * @param properties 参数信息
     * @return
     */
    List<Table> columns(Properties properties) throws Exception;
}
<fim_middle>","
     * 初始化信息
     * @param properties
     */","
     * 初始化
     * @param properties 参数信息
    "
"<fim_prefix>package com.mavenr.service;

import com.mavenr.entity.Table;

import java.util.List;
import java.util.Properties;

/**
 * @author mavenr
 * @Classname DataInfoInterface
 * @Description 数据信息接口
 * @Date 2021/12/20 17:04
 */
public interface DataInfoInterface {

    /**
     * 初始化信息
     * @param properties
     */
    void init(Properties properties);

    /**<fim_suffix>
    List<Table> columns(Properties properties) throws Exception;
}
<fim_middle>","
     * 表信息获取
     * @param properties 参数信息
     * @return
     */","
     * 获取表信息
     * @param properties
     * @return
     * @throws"
"<fim_prefix>/**<fim_suffix>
package de.hechler.aigames.response;

public class GetGameParameterResult extends GenericResult {

	public String value;
	
	public GetGameParameterResult(ResultCodeEnum resultCode) {
		this(resultCode, null);
	}
	
	public GetGameParameterResult(ResultCodeEnum resultCode, String value) {
		super(resultCode);
		this.value = value;
	}

}
<fim_middle>","
 * Diese Datei ist Teil des Alexa Skills Rollenspiel Soloabenteuer.
 * Copyright (C) 2016-2017 Ferenc Hechler (github@fh.anderemails.de)
 *
 * Der Alexa Skills Rollenspiel Soloabenteuer ist Freie Software: 
 * Sie koennen es unter den Bedingungen
 * der GNU General Public License, wie von der Free Software Foundation,
 * Version 3 der Lizenz oder (nach Ihrer Wahl) jeder spaeteren
 * veroeffentlichten Version, weiterverbreiten und/oder modifizieren.
 *
 * Der Alexa Skills Rollenspiel Soloabenteuer wird in der Hoffnung, 
 * dass es nuetzlich sein wird, aber
 * OHNE JEDE GEWAEHRLEISTUNG, bereitgestellt; sogar ohne die implizite
 * Gewaehrleistung der MARKTFAEHIGKEIT oder EIGNUNG FUER EINEN BESTIMMTEN ZWECK.
 * Siehe die GNU General Public License fuer weitere Details.
 * 
 * Sie sollten eine Kopie der GNU General Public License zusammen mit diesem
 * Programm erhalten haben. Wenn nicht, siehe <http://www.gnu.org/licenses/>.
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

/**
 * Этот пакет содержит команды настройки даты и времени.
 */
package com.github.kurbatov.atol4j.command.common.date;
<fim_middle>","
 * atol4j - клиентская библиотека для контрольной кассовой техники (ККТ) АТОЛ
 * Copyright (C) 2019 Олег Викторович Курбатов
 *
 * Это программа является свободным программным обеспечением. Вы можете
 * распространять и/или модифицировать её согласно условиям Стандартной
 * Общественной Лицензии GNU, опубликованной Фондом Свободного Программного
 * Обеспечения, версии 3 или, по Вашему желанию, любой более поздней версии.
 *
 * Эта программа распространяется в надежде, что она будет полезной, но БЕЗ
 * ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО
 * СОСТОЯНИЯ ПРИ ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите
 * Стандартную Общественную Лицензию GNU для получения дополнительной
 * информации.
 *
 * Вы должны были получить копию Стандартной Общественной Лицензии GNU
 * вместе с программой. В случае её отсутствия, смотрите
 * http://www.gnu.org/licenses/.
 */","*
 * Этот пакет содержит команды настройки числа.
 */"
"<fim_prefix>
 * ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО
 * СОСТОЯНИЯ ПРИ ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите
 * Стандартную Общественную Лицензию GNU для получения дополнительной
 * информации.
 *
 * Вы должны были получить копию Стандартной Общественной Лицензии GNU
 * вместе с программой. В случае её отсутствия, смотрите
 * http://www.gnu.org/licenses/.
 */

/**<fim_suffix>
package com.github.kurbatov.atol4j.command.common.date;
<fim_middle>","
 * Этот пакет содержит команды настройки даты и времени.
 */","
 * @author <NAME>
 */"
"<fim_prefix>package fr.gouv.beta.fabnum.kelrisks.metier.referentiel.interfaces;

import fr.gouv.beta.fabnum.commun.metier.IAbstractCRUDService;
import fr.gouv.beta.fabnum.kelrisks.transverse.referentiel.entities.ShortUrl;

/**<fim_suffix>
public interface IShortUrlService extends IAbstractCRUDService<ShortUrl> {

}
  <fim_middle>","
 * Interface du Service qui gère les entités ShortUrl
 */","
 * @author <NAME>
 * @since 1.0
"
"<fim_prefix>package zzz.study.patterns.strategy.flow;

/**<fim_suffix>
public interface PlainFlowStrategy extends FlowStrategy {
}
<fim_middle>","
 * 普通流量策略
 */","
 * @author zhouzhao"
"<fim_prefix>package org.haic.often.tuple.record;

/**<fim_suffix>
public record EightTuple<A, B, C, D, E, F, G, H>(A first, B second, C third, D fourth, E fifth, F sixth, G seventh, H eighth) {}
<fim_middle>","
 * Tuple的实现,用于记录多个参数
 */","
 * @author <NAME>
 * @version"
"<fim_prefix>/*<fim_suffix>

/**
 * Этот пакет содержит кодировки протокола АТОЛ для представления текстовой
 * информации.
 */
package com.github.kurbatov.atol4j.charset;
<fim_middle>","
 * atol4j - клиентская библиотека для контрольной кассовой техники (ККТ) АТОЛ
 * Copyright (C) 2019 Олег Викторович Курбатов
 *
 * Это программа является свободным программным обеспечением. Вы можете
 * распространять и/или модифицировать её согласно условиям Стандартной
 * Общественной Лицензии GNU, опубликованной Фондом Свободного Программного
 * Обеспечения, версии 3 или, по Вашему желанию, любой более поздней версии.
 *
 * Эта программа распространяется в надежде, что она будет полезной, но БЕЗ
 * ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО
 * СОСТОЯНИЯ ПРИ ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите
 * Стандартную Общественную Лицензию GNU для получения дополнительной
 * информации.
 *
 * Вы должны были получить копию Стандартной Общественной Лицензии GNU
 * вместе с программой. В случае её отсутствия, смотрите
 * http://www.gnu.org/licenses/.
 */","*
 * Этот пакет содержит кодировки протокола АТОЛ для представления чисел.
 */"
"<fim_prefix>
 * ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО
 * СОСТОЯНИЯ ПРИ ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите
 * Стандартную Общественную Лицензию GNU для получения дополнительной
 * информации.
 *
 * Вы должны были получить копию Стандартной Общественной Лицензии GNU
 * вместе с программой. В случае её отсутствия, смотрите
 * http://www.gnu.org/licenses/.
 */

/**<fim_suffix>
package com.github.kurbatov.atol4j.charset;
<fim_middle>","
 * Этот пакет содержит кодировки протокола АТОЛ для представления текстовой
 * информации.
 */","
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package br.com.hslife.orcamento.facade;

import br.com.hslife.orcamento.entity.Seguro;
import br.com.hslife.orcamento.entity.Usuario;

import java.util.List;

public interface ISeguro extends ICRUDService<Seguro> {

	List<Seguro> buscarTodosPorUsuarioEAtivo(Usuario usuario, boolean ativo);

	void encerrarSeguro(Seguro seguro);

	void reativarSeguro(Seguro seguro);
}
<fim_middle>","*

Copyright (c) 2012 - 2021 Hércules S. S. José

Este arquivo é parte do programa Orçamento Doméstico.


Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou

modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como

publicada pela Fundação do Software Livre (FSF); na versão 3.0 da

Licença.


Este programa é distribuído na esperança que possa ser útil, mas SEM

NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer

MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral Menor

GNU em português para maiores detalhes.


Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob

o nome de ""LICENSE"" junto com este programa, se não, acesse o site do

projeto no endereco https://github.com/herculeshssj/orcamento ou escreva

para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor,

Boston, MA  02110-1301, USA.


Para mais informações sobre o programa Orçamento Doméstico e seu autor

entre em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva

para Hércules S. S. José, Rua José dos Anjos, 160 - Bl. 3 Apto. 304 -

Jardim Alvorada - CEP: 26261-130 - Nova Iguaçu, RJ, Brasil.

***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package br.com.hslife.orcamento.facade;

import java.util.Date;
import java.util.List;

import br.com.hslife.orcamento.entity.Conta;
import br.com.hslife.orcamento.entity.FaturaCartao;
import br.com.hslife.orcamento.enumeration.CadastroSistema;
import br.com.hslife.orcamento.model.CriterioBuscaLancamentoConta;
import br.com.hslife.orcamento.model.PanoramaLancamentoConta;
import br.com.hslife.orcamento.mod<fim_middle>","*

Copyright (c) 2012 - 2021 Hércules S. S. José

Este arquivo é parte do programa Orçamento Doméstico.


Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou

modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como

publicada pela Fundação do Software Livre (FSF); na versão 3.0 da

Licença.


Este programa é distribuído na esperança que possa ser útil, mas SEM

NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer

MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral Menor

GNU em português para maiores detalhes.


Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob

o nome de ""LICENSE"" junto com este programa, se não, acesse o site do

projeto no endereco https://github.com/herculeshssj/orcamento ou escreva

para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor,

Boston, MA  02110-1301, USA.


Para mais informações sobre o programa Orçamento Doméstico e seu autor

entre em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva

para Hércules S. S. José, Rua José dos Anjos, 160 - Bl. 3 Apto. 304 -

Jardim Alvorada - CEP: 26261-130 - Nova Iguaçu, RJ, Brasil.

***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package cn.lili.modules.connect;
<fim_middle>","
 * 项目部分参考   JustAuth
 * git地址       https://gitee.com/yadong.zhang/JustAuth
 */","
 * @author lili
 * @date 2021/3/16
 */"
"<fim_prefix>package cz.geokuk.util.lang;

/**<fim_suffix>

public class XCreateElement extends XObject0 {
	/**
	 *
	 */
	private static final long serialVersionUID = -8528654444055934985L;

	public XCreateElement(final String s) {
		super(s);
	}

	public XCreateElement(final String s, final Exception e) {
		super(s, e);
	}
}
<fim_middle>","
 * Title: Evidence exemplářů a dodávek Description: V první fázi zde bude implementace přidání dodávky a jejích exemplářů Copyright: Copyright (c) 2001 Company: TurboConsult s.r.o.
 *
 * @author
 * @version 1.0
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**
 * 
 */
/**<fim_suffix>
package fr.inria.coast.general;<fim_middle>","
 * @author ""Quang-Vinh DANG""
 *
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package dia01.laboratorio3.parte4.exercicio;

import java.util.function.Supplier;

/*<fim_suffix>
public class Exercicio_1 {
    public static void main(String[] args) {

    }
}<fim_middle>","
Com base no código abaixo crie um Supplier chamado valorAleatorioSupplier que retorne um valor aleatório do tipo Double
Invoque esse Supplier e imprima o valor retornado por ele no console.
*/","*
 * Created by <NAME> on 22/06/2015.
 */"
"<fim_prefix>package pama1234.gdx.game.element.duel.server.util.theme;

import java.util.LinkedHashMap;

/**<fim_suffix>
public class ServerThemeData{
  public LinkedHashMap<String,String> data;
}
<fim_middle>","
 * TODO 性能浪费
 */","
 * Created by <NAME> on 2016"
"<fim_prefix>package com.a4server.gameserver.model;

import com.google.gson.annotations.SerializedName;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class ActionItem
{
	@SerializedName(""name"")
	private final String _name;

	@SerializedName(""list"")
	private List<ActionItem> _list;

	public ActionItem(String name)
	{
		_name = name;
	}

	public ActionItem(String name, List<ActionItem> list)
	{
		_name = name;
		_list = list;
	}

	public void add(ActionItem actionItem)
	{
		if (_list == null)
		{
			_list = new ArrayList<>();
		}
		_list.add(actionI<fim_middle>","
 * действие доступное игроку. отображется в списке доступных действий
 * передается в виде json клиенту
 * Created by arksu on 13.10.15.
 */","
 * Created by Vitaliy on 22.03.2018.
 */"
"<fim_prefix>package cn.ihoway.annotation;

import cn.ihoway.type.AuthorityLevel;

import java.lang.annotation.*;

/**<fim_suffix>
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Processor {
    String name() default """"; //程序名称
    boolean certification() default false; //是否进行安全认证
    AuthorityLevel limitAuthority() default AuthorityLevel.COMMON_MEMBER; //普通用户访问权限
}
<fim_middle>","
 * name:程序名称
 * certification:是否进行安全认证 默认 否
 * limitAuthority:访问权限 默认 普通用户
 */","
 * Created by zhouqian on 2017/8/23.
 */"
"<fim_prefix>package fr.gouv.beta.fabnum.kelrisks.metier.referentiel.interfaces;

import fr.gouv.beta.fabnum.commun.metier.IAbstractCRUDService;
import fr.gouv.beta.fabnum.kelrisks.transverse.referentiel.entities.FamillePPR;

/**<fim_suffix>
public interface IFamillePprService extends IAbstractCRUDService<FamillePPR> {
}
  <fim_middle>","
 * Interface du Service qui gère les entités FamillePPR
 */","
 * @author <NAME>
 * @date 27/03/2017
"
"<fim_prefix> * Das Sudoku war gemäß den Constraints ungültig
	 */
	INVALID,

	/**
	 * Das Sudoku ist innerhalb der Constraints lösbar
	 */
	CONSTRAINT_SATURATION,

	/**
	 * Das Sudoku ist einfacher als die Constraints erlauben
	 */
	TO_EASY,

	/**
	 * Das Sudoku ist viel einfacher als die Constraints erlauben
	 */
	MUCH_TO_EASY,

	/**
	 * Das Sudoku ist schwieriger als die Constraints erlauben
	 */
	TO_DIFFICULT,

	/**<fim_suffix>
	MUCH_TO_DIFFICULT
}
<fim_middle>","
	 * Das Sudoku ist viel schwieriger als die Constraints erlauben
	 */","
	 * Das Sudoku ist sehr schwieriger als die Constraints erlauben"
"<fim_prefix>package de.sudoq.model.solverGenerator.solver;

/**
 * Ein Enum um die Relationen zwischen Schwierigkeiten zu klassifizieren
 */
public enum ComplexityRelation {
	/**<fim_suffix>
	INVALID,

	/**
	 * Das Sudoku ist innerhalb der Constraints lösbar
	 */
	CONSTRAINT_SATURATION,

	/**
	 * Das Sudoku ist einfacher als die Constraints erlauben
	 */
	TO_EASY,

	/**
	 * Das Sudoku ist viel einfacher als die Constraints erlauben
	 */
	MUCH_TO_EASY,

	/**
	 * Das Sudoku ist schwieriger als die Constraints erlauben
	 */
	TO_DIFFICULT,

	/**
	 * Das Sudoku ist viel schwieriger als die Constrain<fim_middle>","
	 * Das Sudoku war gemäß den Constraints ungültig
	 */","
	 * Das Sudoku ist ungültig
	 */"
"<fim_prefix>package de.sudoq.model.solverGenerator.solver;

/**
 * Ein Enum um die Relationen zwischen Schwierigkeiten zu klassifizieren
 */
public enum ComplexityRelation {
	/**
	 * Das Sudoku war gemäß den Constraints ungültig
	 */
	INVALID,

	/**<fim_suffix>
	CONSTRAINT_SATURATION,

	/**
	 * Das Sudoku ist einfacher als die Constraints erlauben
	 */
	TO_EASY,

	/**
	 * Das Sudoku ist viel einfacher als die Constraints erlauben
	 */
	MUCH_TO_EASY,

	/**
	 * Das Sudoku ist schwieriger als die Constraints erlauben
	 */
	TO_DIFFICULT,

	/**
	 * Das Sudoku ist viel schwieriger als die Constraints erlauben
	 */
	MUCH_TO_DIFFICULT
}
<fim_middle>","
	 * Das Sudoku ist innerhalb der Constraints lösbar
	 */","
	 * Das Sudoku hat keine Constraints
	 */"
"<fim_prefix>package de.sudoq.model.solverGenerator.solver;

/**
 * Ein Enum um die Relationen zwischen Schwierigkeiten zu klassifizieren
 */
public enum ComplexityRelation {
	/**
	 * Das Sudoku war gemäß den Constraints ungültig
	 */
	INVALID,

	/**
	 * Das Sudoku ist innerhalb der Constraints lösbar
	 */
	CONSTRAINT_SATURATION,

	/**
	 * Das Sudoku ist einfacher als die Constraints erlauben
	 */
	TO_EASY,

	/**<fim_suffix>
	MUCH_TO_EASY,

	/**
	 * Das Sudoku ist schwieriger als die Constraints erlauben
	 */
	TO_DIFFICULT,

	/**
	 * Das Sudoku ist viel schwieriger als die Constraints erlauben
	 */
	MUCH_TO_DIFFICULT
}
<fim_middle>","
	 * Das Sudoku ist viel einfacher als die Constraints erlauben
	 */","
	 * Das Sudoku ist sehr schwierig als die Constraints erlauben
	 */"
"<fim_prefix>zwischen Schwierigkeiten zu klassifizieren
 */
public enum ComplexityRelation {
	/**
	 * Das Sudoku war gemäß den Constraints ungültig
	 */
	INVALID,

	/**
	 * Das Sudoku ist innerhalb der Constraints lösbar
	 */
	CONSTRAINT_SATURATION,

	/**
	 * Das Sudoku ist einfacher als die Constraints erlauben
	 */
	TO_EASY,

	/**
	 * Das Sudoku ist viel einfacher als die Constraints erlauben
	 */
	MUCH_TO_EASY,

	/**<fim_suffix>
	TO_DIFFICULT,

	/**
	 * Das Sudoku ist viel schwieriger als die Constraints erlauben
	 */
	MUCH_TO_DIFFICULT
}
<fim_middle>","
	 * Das Sudoku ist schwieriger als die Constraints erlauben
	 */","
	 * Das Sudoku ist schwieriger als die Constraints erlauben"
"<fim_prefix>package de.sudoq.model.solverGenerator.solver;

/**<fim_suffix>
public enum ComplexityRelation {
	/**
	 * Das Sudoku war gemäß den Constraints ungültig
	 */
	INVALID,

	/**
	 * Das Sudoku ist innerhalb der Constraints lösbar
	 */
	CONSTRAINT_SATURATION,

	/**
	 * Das Sudoku ist einfacher als die Constraints erlauben
	 */
	TO_EASY,

	/**
	 * Das Sudoku ist viel einfacher als die Constraints erlauben
	 */
	MUCH_TO_EASY,

	/**
	 * Das Sudoku ist schwieriger als die Constra<fim_middle>","
 * Ein Enum um die Relationen zwischen Schwierigkeiten zu klassifizieren
 */","
 * Die Komplexitätsrelation zwischen einem Sudoku und den Constraints
 * 
 *"
"<fim_prefix>package de.sudoq.model.solverGenerator.solver;

/**
 * Ein Enum um die Relationen zwischen Schwierigkeiten zu klassifizieren
 */
public enum ComplexityRelation {
	/**
	 * Das Sudoku war gemäß den Constraints ungültig
	 */
	INVALID,

	/**
	 * Das Sudoku ist innerhalb der Constraints lösbar
	 */
	CONSTRAINT_SATURATION,

	/**<fim_suffix>
	TO_EASY,

	/**
	 * Das Sudoku ist viel einfacher als die Constraints erlauben
	 */
	MUCH_TO_EASY,

	/**
	 * Das Sudoku ist schwieriger als die Constraints erlauben
	 */
	TO_DIFFICULT,

	/**
	 * Das Sudoku ist viel schwieriger als die Constraints erlauben
	 */
	MUCH_TO_DIFFICULT
}
<fim_middle>","
	 * Das Sudoku ist einfacher als die Constraints erlauben
	 */","
	 * Das Sudoku ist einfach zu lösen
	 */"
"<fim_prefix>package com.easyink.common.enums.customer;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**<fim_suffix>
@AllArgsConstructor
public enum SubjectTypeEnum {
    ENTERPRISE(0),
    SERVICE_PROVIDER(1),
    ;
    @Getter
    private Integer code;
}
<fim_middle>","
 * 小程序或公众号的主体类型
 * 小程序或公众号的主体类型：0表示主体名称是企业的 (默认)，1表示主体名称是服务商的
 *
 * @author wx
 * 2023/2/9 20:06
 **/","
 * 客户类型
 *
 * @author tengchong
 * @date 2019-04-12
 */"
"<fim_prefix>/**<fim_suffix>
@SuppressWarnings({""requires-automatic"", ""requires-transitive-automatic""})
module io.github._4drian3d.authmevelocity.api.velocity {
    requires transitive com.velocitypowered.api;
    requires static org.jetbrains.annotations;
    exports io.github._4drian3d.authmevelocity.api.velocity;
    exports io.github._4drian3d.authmevelocity.api.velocity.event;
}
<fim_middle>",AuthMeVelocity Velocity API Module */,"
 * @author _4d"
"<fim_prefix>port org.crue.hercules.sgi.csp.model.Proyecto;
import org.crue.hercules.sgi.csp.model.ProyectoEntidadGestora;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface ProyectoEntidadGestoraRepository
    extends JpaRepository<ProyectoEntidadGestora, Long>, JpaSpecificationExecutor<ProyectoEntidadGestora> {

  /**<fim_suffix>
  boolean existsProyectoEntidadGestoraByProyectoIdAndEntidadRef(Long proyectoId, String entidadRef);

  /**
   * Comprueba la existencia de la relación entre el {@link Proyecto} y una
   * entidad gestora excluyendo de la búsqueda un determinado
   * {@link ProyectoEntidadGestora}
   * 
   * @param id         id del {@link ProyectoEntidadGestora}.
   * @param proyectoId id del {@link Proyecto}.
   * @param <fim_middle>","
   * Comprueba la existencia de la relación entre el {@link Proyecto} y una
   * entidad gestora.
   * 
   * @param proyectoId id del {@link Proyecto}.
   * @param entidadRef EntidadRef del {@link ProyectoEntidadGestora}.
   * @return true en el {@link Proyecto} existe un {@link ProyectoEntidadGestora}
   *         con el mismo nombre.
   */","
   * Comprueba la existencia de la relación entre el {@link Proyecto} y una
   * entidad gestora.
   * 
   * @param id         id del {@link ProyectoEntidadGestora}.
   * @param proyectoId id del {@link Proyecto}.
   * @param entidadRef referencia de la entidad gestora.  Se agrega método para buscar por proyecto y entidad gestora  package org.crue.he"
"<fim_prefix>ón entre el {@link Proyecto} y una
   * entidad gestora.
   * 
   * @param proyectoId id del {@link Proyecto}.
   * @param entidadRef EntidadRef del {@link ProyectoEntidadGestora}.
   * @return true en el {@link Proyecto} existe un {@link ProyectoEntidadGestora}
   *         con el mismo nombre.
   */
  boolean existsProyectoEntidadGestoraByProyectoIdAndEntidadRef(Long proyectoId, String entidadRef);

  /**<fim_suffix>
  boolean existsProyectoEntidadGestoraByIdNotAndProyectoIdAndEntidadRef(Long id, Long proyectoId, String entidadRef);

}
<fim_middle>","
   * Comprueba la existencia de la relación entre el {@link Proyecto} y una
   * entidad gestora excluyendo de la búsqueda un determinado
   * {@link ProyectoEntidadGestora}
   * 
   * @param id         id del {@link ProyectoEntidadGestora}.
   * @param proyectoId id del {@link Proyecto}.
   * @param entidadRef EntidadRef del {@link ProyectoEntidadGestora}.
   * @return true en el {@link Proyecto} existe un {@link ProyectoEntidadGestora}
   *         con el mismo nombre.
   */","
   * Verifica si existe un {@link ProyectoEntidadGestora} con el mismo nombre.
   * 
   * @param id id del {@link ProyectoEntidadGestora}.
   * @param proyectoId id del {@link Proyecto}.
   * @param entidadRef EntidadRef del {@link ProyectoEntidadGestora}.
   * @return true en el {@link Proyecto} existe un {@link ProyectoEntidadGestora}
   *         con el mismo nombre.
   */"
"<fim_prefix>package ru.nuzmsh.web.tags;

import java.io.IOException;

import javax.servlet.jsp.JspException;
import javax.servlet.jsp.JspWriter;

/**<fim_suffix>
public class TableEmptyTag extends TableNotEmptyTag {
    @Deprecated
    public void doTag() throws JspException, IOException {
        if(isEmpty()) {
            JspWriter out = getJspContext().getOut() ;
            getJspBody().invoke(out);
        }
    }

}
<fim_middle>","
 * @jsp.tag           name = ""tableEmpty""
 *            display-name = ""Выводит содержимое, если нет данных в таблице""
 *            body-content = ""scriptless""
 *             description = ""Выводит содержимое, если нет данных в таблице""
 */","
 * Created by alex on 11.06.17.
 */"
"<fim_prefix>package com.ysd.iep.test;

import java.util.ArrayList;
import java.util.List;


/**<fim_suffix>
public class Test4 {


    public static void main(String[] args) {

        int i, j;
        for (i = 1, j = 1; j <= 9; ) {
            if (i < j) {
                i++;
                j = 1;
                System.out.println("" "");
            } else {
                System.out.print(j + ""*"" + i * j + "" "");
                if (i * j < 10) {
                    System.out.print("" "");
                }
 <fim_middle>","
 * 一个for循环打印出九九乘法表
 */","
 * Created by Administrator on 2016/8/31.
 */"
"<fim_prefix>package yuan.interview.railroad.interactive;

/**<fim_suffix>
public interface CommandParser {
	
	/** 将一条命令的字符串表示，解析成命令数据类{@link CommandData} */
	CommandData parser(String command);

}
<fim_middle>"," 
 * @ClassName: CommandParser
 * @Description:  命令解析器
 * 						具体的命令解析器实现类。将字符串数据(只有一条命令)按自己的命令格式规则。进行解析成普通的JAVA类{@link CommandData}
 *
 * @author 袁良锭(https://github.com/yuanliangding)
 * @date 2019年5月28日-下午3:54:40
 */","
 * 命令解析器
 * @author yuan
 *
 */"
"<fim_prefix>package yuan.interview.railroad.interactive;

/** 
 * @ClassName: CommandParser
 * @Description:  命令解析器
 * 						具体的命令解析器实现类。将字符串数据(只有一条命令)按自己的命令格式规则。进行解析成普通的JAVA类{@link CommandData}
 *
 * @author 袁良锭(https://github.com/yuanliangding)
 * @date 2019年5月28日-下午3:54:40
 */
public interface CommandParser {
	
	/**<fim_suffix>
	CommandData parser(String command);

}
<fim_middle>", 将一条命令的字符串表示，解析成命令数据类{@link CommandData} */," 
	 * @Title: parser
	 * @Description: 解析命令
"
"<fim_prefix>package gui.tipos;

/**<fim_suffix>
public enum TipoCruce {

	PMX, OX, VARIANTE_OX, CICLOS_CX, ERX, COD_ORDINAL, PROPIO
}
<fim_middle>","
 * Enumerado que contiene el tipo de cruce que puede ejecutar el algoritmo
 * genético.
 * 
 * @author Grupo20.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>

package ru.datareducer.model;

/**
 * Исключение возникает при попытке получения данных ресурса,
 * или при выполнении скрипта, если значение одного из параметров не установлено.
 *
 * @author Kirill Mikhaylov
 */
public class UndefinedParameterException extends ReducerException {

    /**
     * Создаёт исключение с сообщением, содержащим имя параметра
     *
     * @param parameter Имя неустановленного п<fim_middle>","
 * Copyright (c) 2017-2020 Kirill Mikhaylov <admin@datareducer.ru>
 *
 * Этот файл — часть программы DataReducer Console <http://datareducer.ru>.
 *
 * Программа DataReducer Console является свободным программным обеспечением.
 * Вы вправе распространять ее и/или модифицировать в соответствии с условиями
 * версии 3 либо, по вашему выбору, с условиями более поздней версии
 * Стандартной Общественной Лицензии GNU, опубликованной Free Software Foundation.
 *
 * Программа DataReducer Console распространяется в надежде, что она будет полезной,
 * но БЕЗО ВСЯКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
 * и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
 * Подробнее см. в Стандартной Общественной Лицензии GNU.
 *
 * Вы должны были получить копию Стандартной Общественной Лицензии GNU
 * вместе с этой программой. Если это не так, см. <https://www.gnu.org/licenses/>.
 */","*
 * Исключение возникает при попытке получения данных ресурса,
 * или при выполнении скрипта, если значение одного из параметров не установлено.
 *
 * @author Kirill Mikhaylov
 */"
"<fim_prefix>ртной Общественной Лицензии GNU
 * вместе с этой программой. Если это не так, см. <https://www.gnu.org/licenses/>.
 */

package ru.datareducer.model;

/**
 * Исключение возникает при попытке получения данных ресурса,
 * или при выполнении скрипта, если значение одного из параметров не установлено.
 *
 * @author Kirill Mikhaylov
 */
public class UndefinedParameterException extends ReducerException {

    /**<fim_suffix>
    UndefinedParameterException(String parameter) {
        super(""Не установлено значение параметра '"" + parameter + ""'"");
    }

}
<fim_middle>","
     * Создаёт исключение с сообщением, содержащим имя параметра
     *
     * @param parameter Имя неустановленного параметра
     */","
     * Конструктор.
     *
     * @param parameter Имя параметра.
     */"
"<fim_prefix>она будет полезной,
 * но БЕЗО ВСЯКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
 * и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
 * Подробнее см. в Стандартной Общественной Лицензии GNU.
 *
 * Вы должны были получить копию Стандартной Общественной Лицензии GNU
 * вместе с этой программой. Если это не так, см. <https://www.gnu.org/licenses/>.
 */

package ru.datareducer.model;

/**<fim_suffix>
public class UndefinedParameterException extends ReducerException {

    /**
     * Создаёт исключение с сообщением, содержащим имя параметра
     *
     * @param parameter Имя неустановленного параметра
     */
    UndefinedParameterException(String parameter) {
        super(""Не установлено значение параметра '"" + parameter + ""'"");
    }

}
<fim_middle>","
 * Исключение возникает при попытке получения данных ресурса,
 * или при выполнении скрипта, если значение одного из параметров не установлено.
 *
 * @author Kirill Mikhaylov
 */","
 * Исключение, возникающее при попытке получить значение параметра,
 * которого не было установлено
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.zengtengpeng.relation.oneToMany;

import com.zengtengpeng.relation.build.BuildBaseXml;

/**<fim_suffix>
@FunctionalInterface
public interface BuildOneToManyXml extends BuildBaseXml {

}
<fim_middle>","
 * 构建一对多Xml
 */","
 * Created by zengpeng on 2017/"
"<fim_prefix>package com.dalingge.gankio.network;


import com.dalingge.gankio.data.model.ResultBean;

import io.reactivex.functions.Function;


/**<fim_suffix>

public class HttpResultFunc<T> implements Function<ResultBean<T>, T> {
    @Override
    public T apply(ResultBean<T> httpResult) {
        if (httpResult.isError()) {
            throw new RuntimeException(httpResult.getMsg());
        }
        return httpResult.getResults();
    }
}
<fim_middle>","
 * FileName: HttpResultFunc
 * description:  用来统一处理Http的resultCode,并将HttpResult的Data部分剥离出来返回给subscriber
 *                Subscriber真正需要的数据类型，也就是Data部分的数据类型
 * Author: 丁博洋
 * Date: 2016/9/1
 */","
 * Created by DuLiang on 2018/5/16.
 */"
"<fim_prefix>/*<fim_suffix>
package ifs_mover;

public enum MoveResult {
    MOVE_SUCCESS, DELETE_SUCCESS, SKIP, MOVE_FAILURE;
}
<fim_middle>","
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* ifsmover is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
*/","*
 * Created by <NAME> on 10/10/2016.
 */"
"<fim_prefix>package com.mepan.annotation;


import com.mepan.entity.enums.VerifyRegexEnum;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.PARAMETER, ElementType.FIELD})
public @interface VerifyParam {
    /**<fim_suffix>
    VerifyRegexEnum regex() default VerifyRegexEnum.NO;

    /**
     * 最小长度
     *
     * @return
     */
    int min() default -1;

    /**
     * 最大长度
     *
     * @return
     */
    int max() default -1;

    boolean required() default false;
}
<fim_middle>","
     * 校验正则
     *
     * @return
     */","
     * 正则表达式
     *
     * @return
     */"
"<fim_prefix>fyRegexEnum;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.PARAMETER, ElementType.FIELD})
public @interface VerifyParam {
    /**
     * 校验正则
     *
     * @return
     */
    VerifyRegexEnum regex() default VerifyRegexEnum.NO;

    /**<fim_suffix>
    int min() default -1;

    /**
     * 最大长度
     *
     * @return
     */
    int max() default -1;

    boolean required() default false;
}
<fim_middle>","
     * 最小长度
     *
     * @return
     */","
     * 最小长度
     *
     * @return
     */"
"<fim_prefix>ation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.PARAMETER, ElementType.FIELD})
public @interface VerifyParam {
    /**
     * 校验正则
     *
     * @return
     */
    VerifyRegexEnum regex() default VerifyRegexEnum.NO;

    /**
     * 最小长度
     *
     * @return
     */
    int min() default -1;

    /**<fim_suffix>
    int max() default -1;

    boolean required() default false;
}
<fim_middle>","
     * 最大长度
     *
     * @return
     */","
     * 最大长度
     *
     * @return
     */"
"<fim_prefix>package wiki.thin.storage;

/**
 * 文件类型
 *
 * @author Beldon
 */
public enum StorageFileType {
    /**<fim_suffix>
    IMAGE,
    MUSIC,
    VIDEO,
    FILES,
}
<fim_middle>","
     * 图片
     */","
     * 普通文件
   "
"<fim_prefix>package net.mamoe.jpre.utils;

/**<fim_suffix>
@FunctionalInterface
public interface ClassGenerator<T> {
    T generate(long number);
}<fim_middle>","
 * 用于 {@link UserList#get(long)} 的实例构造器
 */","
 * @author mamoe
 */"
"<fim_prefix>package cn.nukkit.scoreboard.data;

import cn.nukkit.api.PowerNukkitXOnly;
import cn.nukkit.api.Since;

/**<fim_suffix>
@PowerNukkitXOnly
@Since(""1.19.30-r1"")
public enum SortOrder {
    //升序
    ASCENDING,
    //降序
    DESCENDING
}
<fim_middle>","
 * 追踪目标显示顺序排序准则，客户端会依照准则根据分数排序所有追踪对象
 */","
 * 排行榜排序方式
 */"
"<fim_prefix>/*<fim_suffix>

package fr.arpinum.cocoritest;

import fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation;
import fr.arpinum.cocoritest.interne.extensionlangage.Objets;
import fr.arpinum.cocoritest.interne.specification.objet.SpecificationAutreObjet;
import fr.arpinum.cocoritest.specification.Specification;

public class FabriquePourTest {

	private FabriquePourTest() {
	}

	public static Specification<Excepti<fim_middle>","
 * Copyright (C) 2013, Arpinum
 *
 * Cocoritest est un logiciel libre ; vous pouvez le redistribuer ou le modifier suivant les termes de la GNU Lesser
 * General Public License telle que publiée par la Free Software Foundation ; soit la version 3 de la licence,
 * soit (à votre gré) toute version ultérieure.
 *
 * Cocoritest est distribué dans l'espoir qu'il sera utile, mais SANS AUCUNE GARANTIE ; pas même la garantie
 * implicite de COMMERCIABILISABILITÉ ni d'ADÉQUATION à UN OBJECTIF PARTICULIER. Consultez la GNU Lesser General
 * Public License pour plus de détails.
 *
 * Vous devez avoir reçu une copie de la GNU Lesser General Public License en même temps que Cocoritest ; si ce n'est
  * pas le cas, consultez http://www.gnu.org/licenses.
 */","*
 * Fabrique pour test.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.dimple.effectiveJava.chapter8;

/**<fim_suffix>
public class Item54 {
}
<fim_middle>","
 * @className: Item54
 * @description: 返回零长度的数组或集合，而不是null
 * 对于一个返回null而不是零长度的数组或者集合的方法，几乎每次用到该方法的时候都会需要在客户端用到判空这种处理方式。这样容易出错，因为客户端可能会忘记处理。
 * 观点：null比零长度的集合或者数组更好，因为避免了分配零长度的容器需要的开销 是错误的。
 * 因为1. 在这个级别上担心性能问题是不明智的，除非分析表明这个方法正是造成性能瓶颈的源头。
 * 2. 不需要分类零长度的集合或者数组，也可以返回他们。
 * 如果有证据表明分配零长度的数组或者集合损害了程序的性能，可以重复的返回同一个不可变的零长度集合。
 * <p>
 * 简而言之：永远不要返回null，而不返回一个零长度的数组或者集合。如果返回null，这样会导致API更难以使用，也容易出错，并且没有任何的性能优势。
 * @auther: Dimple
 * @date: 06/11/19
 * @version: 1.0
 */","
 * @author zhongyj <<EMAIL>><br/>
 * @date 2020/1/14
 */"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.vmware;
<fim_middle>","
 * <p>
 *  VMwareとの連携機能を提供します。
 * </p>
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.xm.cpsmall.utils;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegeUtils {


    /**<fim_suffix>
    public static String matchFrist(String text, Pattern pattern){
        if(text == null)
            throw new NullPointerException(""text 不能为null"");
        if(pattern == null)
            throw new NullPointerException(""pattern 不能为null"");
        List<String> result = new ArrayList<>();
        Matcher matcher = pattern.matcher(text);
        if(matcher.find()){
            return matcher.group();
     <fim_middle>","
     * 匹配第一个结果
     * @param text
     * @param pattern
     * @return
     */","
     * 匹配字符串
     * @param text
     * @param pattern
     * @return
     */"
"<fim_prefix>            throw new NullPointerException(""pattern 不能为null"");
        List<String> result = new ArrayList<>();
        Matcher matcher = pattern.matcher(text);
        if(matcher.find()){
            return matcher.group();
        }else
            return null;
    }
    public static String matchFrist(String text, String pattern){
        return matchFrist(text,Pattern.compile(pattern));
    }



    /**<fim_suffix>
    public static List<String> match(String text, Pattern pattern){
        if(text == null)
            throw new NullPointerException(""text 不能为null"");
        if(pattern == null)
            throw new NullPointerException(""pattern 不能为null"");
        List<String> result = new ArrayList<>();
        Matcher matcher = pattern.matcher(text);
        while (matcher.find()){
            result.add(matcher.group<fim_middle>","
     * 匹配一段文本中所有结果
     * @param text
     * @param pattern
     * @return
     */","
     * 匹配所有
     * @param text
     * @param pattern
     * @return
     */"
"<fim_prefix>package info.ozkan.vipera.business.notification;

import info.ozkan.vipera.entities.Doctor;
import info.ozkan.vipera.entities.Notification;

import java.util.List;

/**<fim_suffix>
public interface NotificationFacade {
    /**
     * Sistemde kayıtlı olan bildirimleri dönderir
     * 
     * @param doctor
     * @param provider
     * @return
     */
    List<Notification> get(Doctor doctor, String provider);

}
<fim_middle>","
 * Bildirim yöneticisi
 * 
 * @author Ömer Özkan
 * 
 */","
 * Bildirimlerin CRUD işlemlerini yapar
 * 
 * @author <NAME>
"
"<fim_prefix>package info.ozkan.vipera.business.notification;

import info.ozkan.vipera.entities.Doctor;
import info.ozkan.vipera.entities.Notification;

import java.util.List;

/**
 * Bildirim yöneticisi
 * 
 * @author Ömer Özkan
 * 
 */
public interface NotificationFacade {
    /**<fim_suffix>
    List<Notification> get(Doctor doctor, String provider);

}
<fim_middle>","
     * Sistemde kayıtlı olan bildirimleri dönderir
     * 
     * @param doctor
     * @param provider
     * @return
     */","
     * Bildirimleri alır
     * 
     * @param doctor
     * @param provider
     * @return
     */"
"<fim_prefix>package model.entity;

public interface Interface_Entity {
	/**<fim_suffix>

	public abstract boolean Ajouter();
	public abstract boolean Supprimer();
	public abstract boolean Modifier(Object obj);
	public abstract boolean Rechercher();
}
<fim_middle>",****************** les méthodes *************************/,"
	 * @return
	 */"
"<fim_prefix>package co.edu.utp.gia.sms.query.estadistica;

import co.edu.utp.gia.sms.dtos.DatoDTO;
import co.edu.utp.gia.sms.entidades.Referencia;
import co.edu.utp.gia.sms.entidades.Topico;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**<fim_suffix>
public class EstadisticaReferenciaOfPreguntaByTopico {
    /**
     * Consulta que permite obtener el número de referencias por Topico de una Pregunta en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param codigo        Codigo de la pregunta de la que se desean obtener las estadisticas
     * @return Stream<DatoDTO> que represent<fim_middle>","
 * Consulta que permite obtener el número de referencias por Topico de una Pregunta en una revision
 */","
 * EstadisticaReferenciaOfPreguntaByTopico
 *
 * @author <NAME>
"
"<fim_prefix>o.edu.utp.gia.sms.entidades.Topico;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Consulta que permite obtener el número de referencias por Topico de una Pregunta en una revision
 */
public class EstadisticaReferenciaOfPreguntaByTopico {
    /**<fim_suffix>
    public static Stream<DatoDTO> createQuery(Provider<Collection<Referencia>> dataProvider,String codigo) {
        Predicate<Topico> filtro = topico -> topico.getPregunta().getCodigo().equals(codigo);
        return dataProvider.get().stream()
                .flatMap(referencia -> referencia.getTopicos().stream().distinct().filter(filtro))
                .collect(Collectors.groupingBy(Function.identity(<fim_middle>","
     * Consulta que permite obtener el número de referencias por Topico de una Pregunta en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param codigo        Codigo de la pregunta de la que se desean obtener las estadisticas
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */","
     * Crea una consulta que permite obtener el número de referencias por Topico de una Pregunta en una revision
     * @param dataProvider
     * @param codigo
     * @return
     */"
"<fim_prefix>package com.taoes.simpledocker.service;

import com.taoes.simpledocker.model.OperateRecord;

/**<fim_suffix>
public interface OperateRecordService {

  /**
   * 新增操作日志
   */
  void add(OperateRecord record);

}
<fim_middle>","
 * 操作记录查询服务
 */","
 * Created by lizhihui on"
"<fim_prefix>package com.taoes.simpledocker.service;

import com.taoes.simpledocker.model.OperateRecord;

/**
 * 操作记录查询服务
 */
public interface OperateRecordService {

  /**<fim_suffix>
  void add(OperateRecord record);

}
<fim_middle>","
   * 新增操作日志
   */","
   * 添加操作记录
   *"
"<fim_prefix>package it.unisa.diem.ids2023.rpnpsc.exceptions;

/**<fim_suffix>
public class InsufficientArgumentsException extends RPNException {

    /**
     * Costruttore della classe {@code InsufficientArgumentsException}.
     *
     * @param headerText Intestazione del messaggio di errore o di warning.
     * @param contentText Testo del messaggio di errore o di warning.
     */
    public InsufficientArgumentsException(String headerText, String contentText) {
        super(head<fim_middle>","
 * L'eccezione {@code InsufficientArgumentsException} viene sollevata quando lo
 * stack o il sotto-stack non contiene argomenti a sufficienza per completare
 * l'operazione richiesta.
 *
 * @see RPNException
 */","
 * Eccezione lanciata quando il numero di argomenti passati al comando non è sufficiente.
 *
 * @author <NAME>
 * @author <NAME>
 */"
"<fim_prefix>package it.unisa.diem.ids2023.rpnpsc.exceptions;

/**
 * L'eccezione {@code InsufficientArgumentsException} viene sollevata quando lo
 * stack o il sotto-stack non contiene argomenti a sufficienza per completare
 * l'operazione richiesta.
 *
 * @see RPNException
 */
public class InsufficientArgumentsException extends RPNException {

    /**<fim_suffix>
    public InsufficientArgumentsException(String headerText, String contentText) {
        super(headerText, contentText);
    }

}
<fim_middle>","
     * Costruttore della classe {@code InsufficientArgumentsException}.
     *
     * @param headerText Intestazione del messaggio di errore o di warning.
     * @param contentText Testo del messaggio di errore o di warning.
     */","
     * Costruttore della classe.
     *
     * @param headerText titolo dell'eccezione.
     * @param contentText contenuto dell'eccezione.
     */"
"<fim_prefix>package cn.edu.buaa.scholarshipserver.utils;

import org.springframework.stereotype.Service;
import org.springframework.util.DigestUtils;

import java.util.Random;

@Service
public class DigestUtil {
    /*<fim_suffix>
    public String getRandMD5Code(String email){
        Random rd = new Random();
        int rand = rd.nextInt();
        String randMD5 = DigestUtils.md5DigestAsHex(String.valueOf(rand).getBytes());//随机数的MD5
        String emailMD5 = DigestUtils.md5DigestAsHex(email.getBytes());
        StringBuilder result = DigestUtils.appendMd5DigestAsHex(randMD5.getBytes(), new StringBuilder(emailMD5));
        return<fim_middle>",根据email获得一个随机的MD5码*/,"*
     * 生成随机数"
"<fim_prefix>(String email){
        Random rd = new Random();
        int rand = rd.nextInt();
        String randMD5 = DigestUtils.md5DigestAsHex(String.valueOf(rand).getBytes());//随机数的MD5
        String emailMD5 = DigestUtils.md5DigestAsHex(email.getBytes());
        StringBuilder result = DigestUtils.appendMd5DigestAsHex(randMD5.getBytes(), new StringBuilder(emailMD5));
        return result.toString();
    }
    /*<fim_suffix>
    public String getStableMD5Code(String email){
        return DigestUtils.md5DigestAsHex(email.getBytes());
    }
}
<fim_middle>",根据邮箱获得一个稳定的MD5码*/,"*
     * 获取稳定MD"
"<fim_prefix>package com.qwli7.blog.mapper;

import org.apache.ibatis.annotations.Mapper;

/**<fim_suffix>
@Mapper
public interface OperateLogMapper {
}
<fim_middle>","
 * 操作日志 Mapper
 */","
 * 操作日志mapper
 *"
"<fim_prefix>package com.platform.modules.chat.service;

import com.platform.common.web.service.BaseService;
import com.platform.modules.chat.domain.ChatFeedback;
import com.platform.modules.chat.vo.MyVo04;

/**<fim_suffix>
public interface ChatFeedbackService extends BaseService<ChatFeedback> {

    /**
     * 添加建议反馈
     */
    void addFeedback(MyVo04 myVo);

}
<fim_middle>","
 * <p>
 * 建议反馈 服务层
 * q3z3
 * </p>
 */","
 * @author lipengjun
 * @email <EMAIL>
 * @date 2017-08-11 09:"
"<fim_prefix>package com.platform.modules.chat.service;

import com.platform.common.web.service.BaseService;
import com.platform.modules.chat.domain.ChatFeedback;
import com.platform.modules.chat.vo.MyVo04;

/**
 * <p>
 * 建议反馈 服务层
 * q3z3
 * </p>
 */
public interface ChatFeedbackService extends BaseService<ChatFeedback> {

    /**<fim_suffix>
    void addFeedback(MyVo04 myVo);

}
<fim_middle>","
     * 添加建议反馈
     */","
     * 添加建议反馈
     *"
"<fim_prefix>package work.myfavs.framework.orm.meta.enumeration;

import work.myfavs.framework.orm.meta.clause.Cond;

/**<fim_suffix>
public enum FuzzyMode {
  /**
   * 仅支持 {@code _} 单字符模糊
   */
  SINGLE,
  /**
   * 仅支持 {@code %} 多字符模糊
   */
  MULTIPLE,
  /**
   * 同时支持 {@code _} 单字符模糊 和 {@code %} 多字符模糊
   */
  ALL
}
<fim_middle>","
 * 模糊查询模式，在 {@link Cond#}
 */","
 * 模糊匹配模式
 *
 * @author <NAME"
"<fim_prefix>package work.myfavs.framework.orm.meta.enumeration;

import work.myfavs.framework.orm.meta.clause.Cond;

/**
 * 模糊查询模式，在 {@link Cond#}
 */
public enum FuzzyMode {
  /**
   * 仅支持 {@code _} 单字符模糊
   */
  SINGLE,
  /**<fim_suffix>
  MULTIPLE,
  /**
   * 同时支持 {@code _} 单字符模糊 和 {@code %} 多字符模糊
   */
  ALL
}
<fim_middle>","
   * 仅支持 {@code %} 多字符模糊
   */","
   * 仅支持 {@code %} 多字符模糊
  "
"<fim_prefix>package work.myfavs.framework.orm.meta.enumeration;

import work.myfavs.framework.orm.meta.clause.Cond;

/**
 * 模糊查询模式，在 {@link Cond#}
 */
public enum FuzzyMode {
  /**
   * 仅支持 {@code _} 单字符模糊
   */
  SINGLE,
  /**
   * 仅支持 {@code %} 多字符模糊
   */
  MULTIPLE,
  /**<fim_suffix>
  ALL
}
<fim_middle>","
   * 同时支持 {@code _} 单字符模糊 和 {@code %} 多字符模糊
   */","
   * 支持 {@code _} 和 {@code %} 模糊
   */"
"<fim_prefix>package work.myfavs.framework.orm.meta.enumeration;

import work.myfavs.framework.orm.meta.clause.Cond;

/**
 * 模糊查询模式，在 {@link Cond#}
 */
public enum FuzzyMode {
  /**<fim_suffix>
  SINGLE,
  /**
   * 仅支持 {@code %} 多字符模糊
   */
  MULTIPLE,
  /**
   * 同时支持 {@code _} 单字符模糊 和 {@code %} 多字符模糊
   */
  ALL
}
<fim_middle>","
   * 仅支持 {@code _} 单字符模糊
   */","
   * 仅支持 {@code _} 单字符模糊
   */"
"<fim_prefix>/*<fim_suffix>
package primera2223;


public class Ejercicio011 {
    public static void main(String arg[]){
        int multiplicando = 7;
        int multiplicador = 5;
        int acumulador = 0;
        
        for (int cont = 1; cont <= multiplicador; cont++)
             acumulador += multiplicando; 
        System.out.println(multiplicando + "" * "" + multiplicador + "" es igual a "" + acumulador);
      <fim_middle>","
 Multiplicaci√≥n mediante sumas
7*5 es igual a 7+7+7+7+7
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package fr.ayfri.gui;<fim_middle>","
 * Package pour g√©rer l'application graphique.
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package br.univali.portugol.nucleo.asa;

/**<fim_suffix>
public final class NoPare extends NoBloco
{
    /**
     * {@inheritDoc }
     */
    @Override
    public Object aceitar(VisitanteASA visitante) throws ExcecaoVisitaASA
    {
        return visitante.visitar(this);
    }
}
<fim_middle>","
 * Representa o comando <code>pare</code> no código fonte.
 * <p>
 * O comando <code>pare</code> é utilizado dentro dos laços de repetição para interromper a
 * execução do laço. Quando este comando é chamado, o laço é interrompido imediatamente e 
 * o programa continua sua execução normal, executando os blocos logo após o laço.
 * <p>
 * O comando <code>pare</code> só pode ser utilizado dentro dos laços de repetição e caso haja
 * laços de repetição aninhados, somente o laço no qual o comando foi chamado será interrompido.
 * <p>
 * Exemplo:
 * <code><pre>
 * 
 *      funcao exemploPare()
 *      {
 *           logico corintiansPerdeLibertadores = verdadeiro
 * 
 *           enquanto (corintiansPerdeLibertadores)
 *           {
 *                zoarOsCorintianos()   // Isto só será executado uma vez! :-( 
 *                pare                  // É melhor interrompermos, ou ficaremos zoando os corintianos eternamente! :-D
 *           }
 * 
 *           para (inteiro i = 1; i <= 10; i++)
 *           {
 *                escreva(""Isto será executado 10 vezes"")
 * 
 *                para (inteiro j = 1; j <= 10; j++)
 *                {
 *                     escreva(""Isto será executado 5 vezes para cada iteração de i"")
 * 
 *                     se (j == 5) pare
 *                }
 *           }
 *      }
 * 
 * </pre></code>
 * 
 * @author Luiz Fernando Noschang
 * @version 1.0
 * 
 * @see NoRetorne
 */","
 * Representa um bloco de código que não possui parênteses.
 * @author <NAME>
 */"
"<fim_prefix>package ru.ecom.expert2.domain.voc;

import ru.ecom.ejb.domain.simple.VocBaseEntity;
import ru.nuzmsh.commons.formpersistence.annotation.EntityForm;

import javax.persistence.Entity;

/**<fim_suffix>
@Entity
public class VocE2EntryError extends VocBaseEntity {
}
<fim_middle>", Справочник ошибок */,"
 * Created by <NAME>"
"<fim_prefix>/*<fim_suffix>
package primera2223;


public class Ejercicio066b {
    public static void main(String arg[]){
        char frase[] = {'e', 'n', ' ', 'u', 'n', ' ', 'l', 'u', 'g', 'a', 'r', ' ', 'e', 'n', ' ', 'L', 'a', ' ','M', 'a', 'n', 'c', 'h', 'a', ' '};
        char subcad1[] = {'e','n',' '};
        char subcad2[] = {'X','X','X','X','X'};
        
        char []frase2 = new char[150];
        int j;
   <fim_middle>","
Escribir en cadena2 la frase pero sustituyendo las oruccrencias de
subcad1, por el contenido de subcad2
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>package co.edu.utp.gia.sms.query.estadistica;

import co.edu.utp.gia.sms.db.DB;
import co.edu.utp.gia.sms.entidades.Referencia;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.stream.Stream;

/**<fim_suffix>
public class EstadisticaGetYears {
    /**
     * Consulta que permite obtener el listado de años que comprenden las Referencias de la Revision
     *
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */
    public static Stream<String> createQuery() {
        return createQuery(DB.root.revision()::getReferencias);
    }

    /**
     * Consulta que permite obtener el listado de<fim_middle>","
 * Consulta que permite obtener el listado de años que comprenden las Referencias de la Revision
 */","
 * Consulta que permite obtener el listado de años que comprenden las Referencias de la Revision
 *"
"<fim_prefix>que comprenden las Referencias de la Revision
 */
public class EstadisticaGetYears {
    /**
     * Consulta que permite obtener el listado de años que comprenden las Referencias de la Revision
     *
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */
    public static Stream<String> createQuery() {
        return createQuery(DB.root.revision()::getReferencias);
    }

    /**<fim_suffix>
    public static Stream<String> createQuery(Provider<Collection<Referencia>> dataProvider) {
        return dataProvider.get().stream().map(Referencia::getYear).distinct();
    }
}
<fim_middle>","
     * Consulta que permite obtener el listado de años que comprenden las Referencias de la Revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */","
     * Consulta que permite obtener el listado de años que comprenden las Referencias de la Revision
     *
     * @param dataProvider Provider que permite obtener los datos de la consulta
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */"
"<fim_prefix>package co.edu.utp.gia.sms.query.estadistica;

import co.edu.utp.gia.sms.db.DB;
import co.edu.utp.gia.sms.entidades.Referencia;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.stream.Stream;

/**
 * Consulta que permite obtener el listado de años que comprenden las Referencias de la Revision
 */
public class EstadisticaGetYears {
    /**<fim_suffix>
    public static Stream<String> createQuery() {
        return createQuery(DB.root.revision()::getReferencias);
    }

    /**
     * Consulta que permite obtener el listado de años que comprenden las Referencias de la Revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @return Stream<DatoDTO> que representa el resultado de la consulta
   <fim_middle>","
     * Consulta que permite obtener el listado de años que comprenden las Referencias de la Revision
     *
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */","
     * Consulta que permite obtener el listado de años que comprenden las Referencias de la Revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la bú"
"<fim_prefix>package cn.foxtech.device.protocol.v1.dahua.fire.core.entity.infobj;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;


/**<fim_suffix>
@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class InfObjGetFuncReqEntity extends InfObjGeneralEntity {
}
<fim_middle>","
 * 信息对象: 注册包
 */","
 * 设备功能信息
 *
 *"
"<fim_prefix>package struktor.processor.operators;

/**<fim_suffix>


public abstract class Expr {

	// die eval Funktion
	// liefert ein beliebiges Objekt als Resultat
	// damit können nicht nur arithmetische Ausdrücke
	// sondern Ausdrücke mit beliebigem Resultat
	// behandelt werden
	

	/** Die eval Funktion liefert ei beliebiges Objekt als Resultat.
	 * In der abgeänderten Version kann das auch ein ""Expr""-Object sein.
	 * @return das Resultat der Berechnung (beliebiges <fim_middle>"," $Id: Expr.java 16 2005-02-10 19:36:29 +0000 (Do, 10 Feb 2005) kneunert $
     * eine abstrakte Klasse für die Konstruktion
     * beliebiger Ausdrücke
     * und zum Auswerten dieser Ausdrücke
     *
     */","
 * Ein Ausdruck ist ein Objekt, das aus einem Operator und einem Operand besteht.
 * Ein Operator ist ein Objekt, das aus einem String besteht.
 * Ein Operand ist ein Objekt, das aus einem Objekt besteht.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>2-10 19:36:29 +0000 (Do, 10 Feb 2005) kneunert $
     * eine abstrakte Klasse für die Konstruktion
     * beliebiger Ausdrücke
     * und zum Auswerten dieser Ausdrücke
     *
     */


public abstract class Expr {

	// die eval Funktion
	// liefert ein beliebiges Objekt als Resultat
	// damit können nicht nur arithmetische Ausdrücke
	// sondern Ausdrücke mit beliebigem Resultat
	// behandelt werden
	

	/**<fim_suffix>
	public abstract Object eval()
	throws struktor.processor.ProcessorException;

}<fim_middle>"," Die eval Funktion liefert ei beliebiges Objekt als Resultat.
	 * In der abgeänderten Version kann das auch ein ""Expr""-Object sein.
	 * @return das Resultat der Berechnung (beliebiges Objekt)    
	 * @exception   ProcessorException  
	 */","
	 * eval
	 *
	 * @return Object
	 * @exception ProcessorException
	 */"
"<fim_prefix>package com.linkwechat.domain.community.vo;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;

/**<fim_suffix>
@Data
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
public class WeGroupCodeVo {

    private Long id;

    private String codeUrl;
}
<fim_middle>","
 * 群活码简略信息
 * @Author Hang
 * @Date 2021/3/26 14:21
 */","
 * @author sharvenp
 * @date 2020/12/31
 */"
"<fim_prefix>urrent.excel.resolve.annotation;

import com.babata.concurrent.excel.resolve.CustomConvertor;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * excel导出列名称、格式转换、排序、默认值
 * @author zqj
 */
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface ExcelColumn {
    /**<fim_suffix>
    String name() default """";

    /**
     * 排序
     * @return
     */
    int index() default -1;

    /**
     * 默认值
     * @return
     */
    String defaultValue() default """";

    /**
     * 自定义转换器
     * @return
     */
    Class<? extends CustomConvertor> customConvertor() default CustomConvertor.class;

}
<fim_middle>","
     * 列名
     * @return
     */","
     * 列名称
     * @return
     */"
"<fim_prefix>olve.CustomConvertor;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * excel导出列名称、格式转换、排序、默认值
 * @author zqj
 */
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface ExcelColumn {
    /**
     * 列名
     * @return
     */
    String name() default """";

    /**<fim_suffix>
    int index() default -1;

    /**
     * 默认值
     * @return
     */
    String defaultValue() default """";

    /**
     * 自定义转换器
     * @return
     */
    Class<? extends CustomConvertor> customConvertor() default CustomConvertor.class;

}
<fim_middle>","
     * 排序
     * @return
     */","
     * 列宽
     * @return
     */"
"<fim_prefix>ort java.lang.annotation.Target;

/**
 * excel导出列名称、格式转换、排序、默认值
 * @author zqj
 */
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface ExcelColumn {
    /**
     * 列名
     * @return
     */
    String name() default """";

    /**
     * 排序
     * @return
     */
    int index() default -1;

    /**
     * 默认值
     * @return
     */
    String defaultValue() default """";

    /**<fim_suffix>
    Class<? extends CustomConvertor> customConvertor() default CustomConvertor.class;

}
<fim_middle>","
     * 自定义转换器
     * @return
     */","
     * 转换器
     * @return
     */"
"<fim_prefix>package com.babata.concurrent.excel.resolve.annotation;

import com.babata.concurrent.excel.resolve.CustomConvertor;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**<fim_suffix>
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface ExcelColumn {
    /**
     * 列名
     * @return
     */
    String name() default """";

    /**
     * 排序
     * @return
     */
    int index() default -1;

    /**
     * 默认值
     * @return
     */
    String defaultValue() default """";

    /**
     * 自定义转换器
     * @return
     */
    Class<? extends CustomConvertor> customCo<fim_middle>","
 * excel导出列名称、格式转换、排序、默认值
 * @author zqj
 */","
 * @author 作者: zhangxi
 * @date 2019/11/19 15:"
"<fim_prefix> java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * excel导出列名称、格式转换、排序、默认值
 * @author zqj
 */
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface ExcelColumn {
    /**
     * 列名
     * @return
     */
    String name() default """";

    /**
     * 排序
     * @return
     */
    int index() default -1;

    /**<fim_suffix>
    String defaultValue() default """";

    /**
     * 自定义转换器
     * @return
     */
    Class<? extends CustomConvertor> customConvertor() default CustomConvertor.class;

}
<fim_middle>","
     * 默认值
     * @return
     */","
     * 宽度
     * @return
     */"
"<fim_prefix>package net.cocotea.elysiananime.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**<fim_suffix>
@Getter
@AllArgsConstructor
public enum MenuStatusEnum {
    /**
     * 显示&启用
     */
    SHOW(0, ""显示""),
    /**
     * 隐藏&启用
     */
    HIDE(1, ""隐藏"");

    final Integer code;
    final String desc;
}
<fim_middle>","
 * 菜单状态 枚举值
 *
 * @author CoCoTea
 * @version 2.0.0
 */","
 * @author <NAME>
 * @date 2021/6/25 22:00
 */"
"<fim_prefix>package net.cocotea.elysiananime.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 菜单状态 枚举值
 *
 * @author CoCoTea
 * @version 2.0.0
 */
@Getter
@AllArgsConstructor
public enum MenuStatusEnum {
    /**<fim_suffix>
    SHOW(0, ""显示""),
    /**
     * 隐藏&启用
     */
    HIDE(1, ""隐藏"");

    final Integer code;
    final String desc;
}
<fim_middle>","
     * 显示&启用
     */","
     * 显示&启用
     */"
"<fim_prefix>package net.cocotea.elysiananime.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 菜单状态 枚举值
 *
 * @author CoCoTea
 * @version 2.0.0
 */
@Getter
@AllArgsConstructor
public enum MenuStatusEnum {
    /**
     * 显示&启用
     */
    SHOW(0, ""显示""),
    /**<fim_suffix>
    HIDE(1, ""隐藏"");

    final Integer code;
    final String desc;
}
<fim_middle>","
     * 隐藏&启用
     */","
     * 隐藏&禁用
     */"
"<fim_prefix>package com.joe.easysocket.server.common.msg;

import com.joe.easysocket.server.common.data.ProtocolData;

/**<fim_suffix>
public class DataMsg extends PubMsg<ProtocolData> {
}
<fim_middle>","
 * 后端与前端沟通使用的消息
 *
 * @author joe
 */","
 * 协议数据消息
 *
 * @author joe
 */"
"<fim_prefix>package com.gameofjess.javachess.helper.exceptions;

/**<fim_suffix>
public class InvalidHostnameException extends Exception {
    public InvalidHostnameException(String hostname) {
        super(""Invalid hostname given: \"""" + hostname + ""\"""");
    }
}
<fim_middle>","
 * Invalid hostname
 */","
 * Exception thrown when a"
"<fim_prefix>ository.specification;

import org.crue.hercules.sgi.csp.model.AnualidadGasto;
import org.crue.hercules.sgi.csp.model.AnualidadGasto_;
import org.crue.hercules.sgi.csp.model.Proyecto;
import org.crue.hercules.sgi.csp.model.ProyectoAnualidad;
import org.crue.hercules.sgi.csp.model.ProyectoAnualidad_;
import org.springframework.data.jpa.domain.Specification;

public class AnualidadGastoSpecifications {

  /**<fim_suffix>
  public static Specification<AnualidadGasto> byProyectoAnualidadId(Long id) {
    return (root, query, cb) -> {
      return cb.equal(root.get(AnualidadGasto_.proyectoAnualidad).get(ProyectoAnualidad_.id), id);
    };
  }

}<fim_middle>","
   * {@link AnualidadGasto} del {@link ProyectoAnualidad} con el id indicado.
   * 
   * @param id identificador del {@link Proyecto}.
   * @return specification para obtener los {@link AnualidadGasto} del
   *         {@link ProyectoAnualidad} con el id indicado.
   */","
   * 
   * @param id
   * @return
   */"
"<fim_prefix>/**<fim_suffix>

package br.com.hslife.orcamento.util;

import br.com.hslife.orcamento.entity.EntityPersistence;

public class RepositoryUtil {
	
	private RepositoryUtil() {
		// Não pode ser instanciada
	}

	public static void validAndAddToHQL(StringBuilder hql, String hqlToAppend, EntityPersistence entity) {
		if (entity != null && entity.getId() != null) {
			hql.append(hqlToAppend);
		}
	}
	
	public st<fim_middle>","*
  
  	Copyright (c) 2012 - 2020 Hércules S. S. José

    Este arquivo é parte do programa Orçamento Doméstico.
    

    Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou 

    modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como 

    publicada pela Fundação do Software Livre (FSF); na versão 2.1 da 

    Licença.
    

    Este programa é distribuído na esperança que possa ser útil, 

    mas SEM NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÂO a 
    
    qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública 
    
    Geral Menor GNU em português para maiores detalhes.
    

    Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob o 

    nome de ""LICENSE.TXT"" junto com este programa, se não, acesse o site do
    
    projeto no endereco https://github.com/herculeshssj/orcamento ou escreva 
    
    para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor, 
    
    Boston, MA  02110-1301, USA.
    

    Para mais informações sobre o programa Orçamento Doméstico e seu autor entre  

    em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva para 

    Hércules S. S. José, Av. Ministro Lafaeyte de Andrade, 1683 - Bl. 3 Apt 404, 

    Marco II - Nova Iguaçu, RJ, Brasil.
  
***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>cou;
    }

    public boolean criarJogador(Jogador j) throws ExcecaoDePersistencia {
        boolean autenticou = repositorioJogo.autenticar(j);
        if (autenticou) {
            return false;
        }

        return repositorioJogo.salvar(j);
    }

    public List<CartaAbstrata> obterAcervo() throws ExcecaoDePersistencia
    {
        return this.repositorioJogo.obterCartasDoAcervo();
    }

    /*<fim_suffix>

    public Jogador obterJogadorLogado() {
        return new Jogador(jogador);
    }

    public boolean salvarJogador(Jogador jgd) throws ExcecaoDePersistencia {

        if (jogador == null) {
            return false;
        }

        jgd.setID(jogador.getId());
        boolean salvou = repositorioJogo.salvar(jgd);

        if (salvou) {
            jogador = jgd;
        }

        return salvou;
   <fim_middle>","
        1 = mostro
        2 = efeito
        0 = sem filtro
     */","*
     * @return
     * @throws ExcecaoDePersistencia
     */"
"<fim_prefix>package br.com.urcontroler.data.db.dao;

import br.com.gmp.comps.data.GenericDAO;
import br.com.urcontroler.data.entity.ElementType;

/**<fim_suffix>
public class ElementTypeDAO extends GenericDAO<ElementType> {

}
<fim_middle>","
 * DAO para a entidade ElementType
 *
 * @author kaciano
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package doext.implement;

import doext.define.do_Button_MAbstract;

/**<fim_suffix>
public class do_Button_Model extends do_Button_MAbstract {

	public do_Button_Model() throws Exception {
		super();
	}
	
}
<fim_middle>","
 * 自定义扩展组件Model实现，继承Do_Button_MAbstract抽象类；
 *
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.portable.server.type;

import com.portable.server.exception.ExceptionTextType;
import lombok.Getter;

/**
 * 权限类型
 *
 * @author shiroha
 */
@Getter
public enum PermissionType implements ExceptionTextType {

    /**
     * 修改其他用户的所属用户组
     */
    CHANGE_ORGANIZATION(""修改用户组""),

    /**
     * 授权/收回其他用户拥有的权力
     */
    GRANT(""授权""),

    /**<fim_suffix>
    RESET_PASSWORD(""重置密码""),

    /**
     * 查看隐藏题目
     */
    VIEW_HIDDEN_PROBLEM(""查看隐藏题目""),

    /**
     * 变更(创建/编辑/删除)题目权限
     * <p>
     * 仅对自己拥有对题目生效
     * </p>
     */
    CREATE_AND_EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**
     * 编辑所有可访问的题目
     */
    EDIT_NOT_OWNER_PROBLEM(""编辑所有可访问的题目""),

    /**
     * 查看所有公开提交的提交详情
     */
    VIEW_PUBLIC_SOLUTION(""查看所有公开提交的提交详情""),

    /**
     * 查看提交的运行信息
     <fim_middle>","
     * 重置其他用户的密码
     */","
     * 收回其他用户拥有的权力
 "
"<fim_prefix>package com.portable.server.type;

import com.portable.server.exception.ExceptionTextType;
import lombok.Getter;

/**
 * 权限类型
 *
 * @author shiroha
 */
@Getter
public enum PermissionType implements ExceptionTextType {

    /**
     * 修改其他用户的所属用户组
     */
    CHANGE_ORGANIZATION(""修改用户组""),

    /**<fim_suffix>
    GRANT(""授权""),

    /**
     * 重置其他用户的密码
     */
    RESET_PASSWORD(""重置密码""),

    /**
     * 查看隐藏题目
     */
    VIEW_HIDDEN_PROBLEM(""查看隐藏题目""),

    /**
     * 变更(创建/编辑/删除)题目权限
     * <p>
     * 仅对自己拥有对题目生效
     * </p>
     */
    CREATE_AND_EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**
     * 编辑所有可访问的题目
     */
    EDIT_NOT_OWNER_PROBLEM(""编辑所有可访问的题目""),

    /**
     * 查看所有公开提交的提交详情
     */
    VIEW_PUBLIC_SOLUTIO<fim_middle>","
     * 授权/收回其他用户拥有的权力
     */","
     * 修改其他用户的密码
     */"
"<fim_prefix>ExceptionTextType {

    /**
     * 修改其他用户的所属用户组
     */
    CHANGE_ORGANIZATION(""修改用户组""),

    /**
     * 授权/收回其他用户拥有的权力
     */
    GRANT(""授权""),

    /**
     * 重置其他用户的密码
     */
    RESET_PASSWORD(""重置密码""),

    /**
     * 查看隐藏题目
     */
    VIEW_HIDDEN_PROBLEM(""查看隐藏题目""),

    /**
     * 变更(创建/编辑/删除)题目权限
     * <p>
     * 仅对自己拥有对题目生效
     * </p>
     */
    CREATE_AND_EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**<fim_suffix>
    EDIT_NOT_OWNER_PROBLEM(""编辑所有可访问的题目""),

    /**
     * 查看所有公开提交的提交详情
     */
    VIEW_PUBLIC_SOLUTION(""查看所有公开提交的提交详情""),

    /**
     * 查看提交的运行信息
     */
    VIEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**
     * 查看所有比赛
     */
    VIEW_ALL_CONTEST(""查看所有比赛""),

    /**
     * 创建和更新比赛内容权利
     */
    CREATE_AND_EDIT_CONTEST(""创建和更新比赛内容""),

    /**
     * 管理其他人拥有的比赛内容权利
     */
    EDIT_NOT_OWNER_CONTEST(""管理其他人<fim_middle>","
     * 编辑所有可访问的题目
     */","
     * 变更(创建/编辑/删除)题目权限
 "
"<fim_prefix>ION(""修改用户组""),

    /**
     * 授权/收回其他用户拥有的权力
     */
    GRANT(""授权""),

    /**
     * 重置其他用户的密码
     */
    RESET_PASSWORD(""重置密码""),

    /**
     * 查看隐藏题目
     */
    VIEW_HIDDEN_PROBLEM(""查看隐藏题目""),

    /**
     * 变更(创建/编辑/删除)题目权限
     * <p>
     * 仅对自己拥有对题目生效
     * </p>
     */
    CREATE_AND_EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**
     * 编辑所有可访问的题目
     */
    EDIT_NOT_OWNER_PROBLEM(""编辑所有可访问的题目""),

    /**<fim_suffix>
    VIEW_PUBLIC_SOLUTION(""查看所有公开提交的提交详情""),

    /**
     * 查看提交的运行信息
     */
    VIEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**
     * 查看所有比赛
     */
    VIEW_ALL_CONTEST(""查看所有比赛""),

    /**
     * 创建和更新比赛内容权利
     */
    CREATE_AND_EDIT_CONTEST(""创建和更新比赛内容""),

    /**
     * 管理其他人拥有的比赛内容权利
     */
    EDIT_NOT_OWNER_CONTEST(""管理其他人拥有的比赛内容""),

    /**
     * 创建和管理批量用户的权利
     */
    CREATE_AND_EDIT_BATCH(""创建和管理<fim_middle>","
     * 查看所有公开提交的提交详情
     */","
     * 查看所有公开提交的提交详情
     */"
"<fim_prefix>package com.portable.server.type;

import com.portable.server.exception.ExceptionTextType;
import lombok.Getter;

/**
 * 权限类型
 *
 * @author shiroha
 */
@Getter
public enum PermissionType implements ExceptionTextType {

    /**<fim_suffix>
    CHANGE_ORGANIZATION(""修改用户组""),

    /**
     * 授权/收回其他用户拥有的权力
     */
    GRANT(""授权""),

    /**
     * 重置其他用户的密码
     */
    RESET_PASSWORD(""重置密码""),

    /**
     * 查看隐藏题目
     */
    VIEW_HIDDEN_PROBLEM(""查看隐藏题目""),

    /**
     * 变更(创建/编辑/删除)题目权限
     * <p>
     * 仅对自己拥有对题目生效
     * </p>
     */
    CREATE_AND_EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**
     * 编辑所有可访问的题目
     */
    EDIT_NOT_OWNER_PROBLEM(""编辑<fim_middle>","
     * 修改其他用户的所属用户组
     */","
     * 普通用户
     */"
"<fim_prefix>   * 重置其他用户的密码
     */
    RESET_PASSWORD(""重置密码""),

    /**
     * 查看隐藏题目
     */
    VIEW_HIDDEN_PROBLEM(""查看隐藏题目""),

    /**
     * 变更(创建/编辑/删除)题目权限
     * <p>
     * 仅对自己拥有对题目生效
     * </p>
     */
    CREATE_AND_EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**
     * 编辑所有可访问的题目
     */
    EDIT_NOT_OWNER_PROBLEM(""编辑所有可访问的题目""),

    /**
     * 查看所有公开提交的提交详情
     */
    VIEW_PUBLIC_SOLUTION(""查看所有公开提交的提交详情""),

    /**<fim_suffix>
    VIEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**
     * 查看所有比赛
     */
    VIEW_ALL_CONTEST(""查看所有比赛""),

    /**
     * 创建和更新比赛内容权利
     */
    CREATE_AND_EDIT_CONTEST(""创建和更新比赛内容""),

    /**
     * 管理其他人拥有的比赛内容权利
     */
    EDIT_NOT_OWNER_CONTEST(""管理其他人拥有的比赛内容""),

    /**
     * 创建和管理批量用户的权利
     */
    CREATE_AND_EDIT_BATCH(""创建和管理批量用户""),

    /**
     * 上传图片的权限，上传头像不受影响
     */
    UPLOAD_FILE(""上传图片""),

  <fim_middle>","
     * 查看提交的运行信息
     */","
     * 查看所有公开提交的提交详情
   "
"<fim_prefix>     */
    VIEW_HIDDEN_PROBLEM(""查看隐藏题目""),

    /**
     * 变更(创建/编辑/删除)题目权限
     * <p>
     * 仅对自己拥有对题目生效
     * </p>
     */
    CREATE_AND_EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**
     * 编辑所有可访问的题目
     */
    EDIT_NOT_OWNER_PROBLEM(""编辑所有可访问的题目""),

    /**
     * 查看所有公开提交的提交详情
     */
    VIEW_PUBLIC_SOLUTION(""查看所有公开提交的提交详情""),

    /**
     * 查看提交的运行信息
     */
    VIEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**<fim_suffix>
    VIEW_ALL_CONTEST(""查看所有比赛""),

    /**
     * 创建和更新比赛内容权利
     */
    CREATE_AND_EDIT_CONTEST(""创建和更新比赛内容""),

    /**
     * 管理其他人拥有的比赛内容权利
     */
    EDIT_NOT_OWNER_CONTEST(""管理其他人拥有的比赛内容""),

    /**
     * 创建和管理批量用户的权利
     */
    CREATE_AND_EDIT_BATCH(""创建和管理批量用户""),

    /**
     * 上传图片的权限，上传头像不受影响
     */
    UPLOAD_FILE(""上传图片""),

    /**
     * 管理 Judge 系统的权利
     */
    MANAGER_JUDGE(""管理 Judge 系统的权利"")<fim_middle>","
     * 查看所有比赛
     */","
     * 查看所有公开提交的提交详情
  "
"<fim_prefix>建/编辑/删除)题目权限
     * <p>
     * 仅对自己拥有对题目生效
     * </p>
     */
    CREATE_AND_EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**
     * 编辑所有可访问的题目
     */
    EDIT_NOT_OWNER_PROBLEM(""编辑所有可访问的题目""),

    /**
     * 查看所有公开提交的提交详情
     */
    VIEW_PUBLIC_SOLUTION(""查看所有公开提交的提交详情""),

    /**
     * 查看提交的运行信息
     */
    VIEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**
     * 查看所有比赛
     */
    VIEW_ALL_CONTEST(""查看所有比赛""),

    /**<fim_suffix>
    CREATE_AND_EDIT_CONTEST(""创建和更新比赛内容""),

    /**
     * 管理其他人拥有的比赛内容权利
     */
    EDIT_NOT_OWNER_CONTEST(""管理其他人拥有的比赛内容""),

    /**
     * 创建和管理批量用户的权利
     */
    CREATE_AND_EDIT_BATCH(""创建和管理批量用户""),

    /**
     * 上传图片的权限，上传头像不受影响
     */
    UPLOAD_FILE(""上传图片""),

    /**
     * 管理 Judge 系统的权利
     */
    MANAGER_JUDGE(""管理 Judge 系统的权利""),
    ;

    private final String text;

    PermissionType(String t<fim_middle>","
     * 创建和更新比赛内容权利
     */","
     * 查看所有比赛的题目
     */"
"<fim_prefix>EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**
     * 编辑所有可访问的题目
     */
    EDIT_NOT_OWNER_PROBLEM(""编辑所有可访问的题目""),

    /**
     * 查看所有公开提交的提交详情
     */
    VIEW_PUBLIC_SOLUTION(""查看所有公开提交的提交详情""),

    /**
     * 查看提交的运行信息
     */
    VIEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**
     * 查看所有比赛
     */
    VIEW_ALL_CONTEST(""查看所有比赛""),

    /**
     * 创建和更新比赛内容权利
     */
    CREATE_AND_EDIT_CONTEST(""创建和更新比赛内容""),

    /**<fim_suffix>
    EDIT_NOT_OWNER_CONTEST(""管理其他人拥有的比赛内容""),

    /**
     * 创建和管理批量用户的权利
     */
    CREATE_AND_EDIT_BATCH(""创建和管理批量用户""),

    /**
     * 上传图片的权限，上传头像不受影响
     */
    UPLOAD_FILE(""上传图片""),

    /**
     * 管理 Judge 系统的权利
     */
    MANAGER_JUDGE(""管理 Judge 系统的权利""),
    ;

    private final String text;

    PermissionType(String text) {
        this.text = text;
    }
}
<fim_middle>","
     * 管理其他人拥有的比赛内容权利
     */","
     * 管理其他人拥有的比赛内容
     */"
"<fim_prefix>.ExceptionTextType;
import lombok.Getter;

/**
 * 权限类型
 *
 * @author shiroha
 */
@Getter
public enum PermissionType implements ExceptionTextType {

    /**
     * 修改其他用户的所属用户组
     */
    CHANGE_ORGANIZATION(""修改用户组""),

    /**
     * 授权/收回其他用户拥有的权力
     */
    GRANT(""授权""),

    /**
     * 重置其他用户的密码
     */
    RESET_PASSWORD(""重置密码""),

    /**
     * 查看隐藏题目
     */
    VIEW_HIDDEN_PROBLEM(""查看隐藏题目""),

    /**<fim_suffix>
    CREATE_AND_EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**
     * 编辑所有可访问的题目
     */
    EDIT_NOT_OWNER_PROBLEM(""编辑所有可访问的题目""),

    /**
     * 查看所有公开提交的提交详情
     */
    VIEW_PUBLIC_SOLUTION(""查看所有公开提交的提交详情""),

    /**
     * 查看提交的运行信息
     */
    VIEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**
     * 查看所有比赛
     */
    VIEW_ALL_CONTEST(""查看所有比赛""),

    /**
     * 创建和更新比赛内容权利
     */
    CREATE_AND_EDIT_CONTEST(""创建和更新比<fim_middle>","
     * 变更(创建/编辑/删除)题目权限
     * <p>
     * 仅对自己拥有对题目生效
     * </p>
     */","
     * 查看所有题目
     */"
"<fim_prefix>IEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**
     * 查看所有比赛
     */
    VIEW_ALL_CONTEST(""查看所有比赛""),

    /**
     * 创建和更新比赛内容权利
     */
    CREATE_AND_EDIT_CONTEST(""创建和更新比赛内容""),

    /**
     * 管理其他人拥有的比赛内容权利
     */
    EDIT_NOT_OWNER_CONTEST(""管理其他人拥有的比赛内容""),

    /**
     * 创建和管理批量用户的权利
     */
    CREATE_AND_EDIT_BATCH(""创建和管理批量用户""),

    /**
     * 上传图片的权限，上传头像不受影响
     */
    UPLOAD_FILE(""上传图片""),

    /**<fim_suffix>
    MANAGER_JUDGE(""管理 Judge 系统的权利""),
    ;

    private final String text;

    PermissionType(String text) {
        this.text = text;
    }
}
<fim_middle>","
     * 管理 Judge 系统的权利
     */","
     * 上传文件
     */"
"<fim_prefix>PROBLEM(""编辑所有可访问的题目""),

    /**
     * 查看所有公开提交的提交详情
     */
    VIEW_PUBLIC_SOLUTION(""查看所有公开提交的提交详情""),

    /**
     * 查看提交的运行信息
     */
    VIEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**
     * 查看所有比赛
     */
    VIEW_ALL_CONTEST(""查看所有比赛""),

    /**
     * 创建和更新比赛内容权利
     */
    CREATE_AND_EDIT_CONTEST(""创建和更新比赛内容""),

    /**
     * 管理其他人拥有的比赛内容权利
     */
    EDIT_NOT_OWNER_CONTEST(""管理其他人拥有的比赛内容""),

    /**<fim_suffix>
    CREATE_AND_EDIT_BATCH(""创建和管理批量用户""),

    /**
     * 上传图片的权限，上传头像不受影响
     */
    UPLOAD_FILE(""上传图片""),

    /**
     * 管理 Judge 系统的权利
     */
    MANAGER_JUDGE(""管理 Judge 系统的权利""),
    ;

    private final String text;

    PermissionType(String text) {
        this.text = text;
    }
}
<fim_middle>","
     * 创建和管理批量用户的权利
     */","
     * 管理其他人拥有的比赛内容权利
  "
"<fim_prefix>ge com.portable.server.type;

import com.portable.server.exception.ExceptionTextType;
import lombok.Getter;

/**
 * 权限类型
 *
 * @author shiroha
 */
@Getter
public enum PermissionType implements ExceptionTextType {

    /**
     * 修改其他用户的所属用户组
     */
    CHANGE_ORGANIZATION(""修改用户组""),

    /**
     * 授权/收回其他用户拥有的权力
     */
    GRANT(""授权""),

    /**
     * 重置其他用户的密码
     */
    RESET_PASSWORD(""重置密码""),

    /**<fim_suffix>
    VIEW_HIDDEN_PROBLEM(""查看隐藏题目""),

    /**
     * 变更(创建/编辑/删除)题目权限
     * <p>
     * 仅对自己拥有对题目生效
     * </p>
     */
    CREATE_AND_EDIT_PROBLEM(""创建编辑自己拥有的题目""),

    /**
     * 编辑所有可访问的题目
     */
    EDIT_NOT_OWNER_PROBLEM(""编辑所有可访问的题目""),

    /**
     * 查看所有公开提交的提交详情
     */
    VIEW_PUBLIC_SOLUTION(""查看所有公开提交的提交详情""),

    /**
     * 查看提交的运行信息
     */
    VIEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**
     * <fim_middle>","
     * 查看隐藏题目
     */","
     * 上传题目
     */"
"<fim_prefix>SOLUTION(""查看所有公开提交的提交详情""),

    /**
     * 查看提交的运行信息
     */
    VIEW_SOLUTION_MESSAGE(""查看提交的运行信息""),

    /**
     * 查看所有比赛
     */
    VIEW_ALL_CONTEST(""查看所有比赛""),

    /**
     * 创建和更新比赛内容权利
     */
    CREATE_AND_EDIT_CONTEST(""创建和更新比赛内容""),

    /**
     * 管理其他人拥有的比赛内容权利
     */
    EDIT_NOT_OWNER_CONTEST(""管理其他人拥有的比赛内容""),

    /**
     * 创建和管理批量用户的权利
     */
    CREATE_AND_EDIT_BATCH(""创建和管理批量用户""),

    /**<fim_suffix>
    UPLOAD_FILE(""上传图片""),

    /**
     * 管理 Judge 系统的权利
     */
    MANAGER_JUDGE(""管理 Judge 系统的权利""),
    ;

    private final String text;

    PermissionType(String text) {
        this.text = text;
    }
}
<fim_middle>","
     * 上传图片的权限，上传头像不受影响
     */","
     * 管理其他人拥有的批量用户
     */"
"<fim_prefix>package co.edu.utp.gia.sms.query.referencia;

import co.edu.utp.gia.sms.db.DB;
import co.edu.utp.gia.sms.entidades.Referencia;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.Comparator;
import java.util.stream.Stream;

/**<fim_suffix>
public class ReferenciaGetDestacadas {
    /**
     * Consulta que permite obtener los Referencias que han recivido una valoración de su contenido
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @return Stream<Referencia> que representa el resultado de la consulta
     */
    public static Stream<Referencia> createQuery(Provider<Collection<Refer<fim_middle>","
 * Consulta que permite obtener los Referencias que han recivido una valoración de su contenido
 */","
 * Consulta que permite obtener los Referencias que han recivido una valoración de su contenido
 */"
"<fim_prefix>package co.edu.utp.gia.sms.query.referencia;

import co.edu.utp.gia.sms.db.DB;
import co.edu.utp.gia.sms.entidades.Referencia;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.Comparator;
import java.util.stream.Stream;

/**
 * Consulta que permite obtener los Referencias que han recivido una valoración de su contenido
 */
public class ReferenciaGetDestacadas {
    /**<fim_suffix>
    public static Stream<Referencia> createQuery(Provider<Collection<Referencia>> dataProvider){
        return dataProvider.get().stream()
                .filter(referencia -> referencia.getRelevancia()!=null)
                .sorted(Comparator.comparing(Referencia::getSpsid).thenComparing(Referencia::getNombre));
    }
}
<fim_middle>","
     * Consulta que permite obtener los Referencias que han recivido una valoración de su contenido
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @return Stream<Referencia> que representa el resultado de la consulta
     */","
     * Crea una consulta que permite obtener los Referencias que han recivido una valoración de su contenido
     * @param dataProvider Proveedor de datos
     * @return Stream de Referencias
     */"
"<fim_prefix>
package com.bio4j.blueprints.model.nodes.refseq.rna;

import com.bio4j.blueprints.model.nodes.refseq.GenomeElementNode;
import com.bio4j.blueprints.model.relationships.refseq.GenomeElementMRnaRel;
import com.bio4j.model.nodes.refseq.GenomeElement;
import com.bio4j.model.nodes.refseq.rna.MRNA;
import com.tinkerpop.blueprints.Direction;
import com.bio4j.blueprints.model.Vertex;

/**<fim_suffix>
public final class MRNANode extends RNANode implements MRNA{
    
    public static final String NODE_TYPE = MRNANode.class.getCanonicalName();
    
    public MRNANode(com.tinkerpop.blueprints.Vertex v){
        super(v, NODE_TYPE);
    }
    
    @Override
    public GenomeElement getGenomeElement(){
        return new GenomeElementNode(vertex.getVertices(Direction.IN, GenomeElementMRnaRel.NAME).iterator(<fim_middle>","
 *
 * @author Pablo Pareja Tobes <ppareja@era7.com>
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.supermap.desktop.geometry.Abstract;

/**<fim_suffix>
public interface INormalFeature extends ITypeFeature {

}
<fim_middle>","
 * 表明未知的几何类型特征
 * 
 * @author highsad
 *
 */","
 * @author heykb
 * @date:2017/4/25
 */"
"<fim_prefix>package com.mumayuan.simple.query.enums;

/**<fim_suffix>
public enum OperationType {
  INSERT, DELETE, UPDATE, SELECT;
}
<fim_middle>","
 * 操作类型.
 *
 * @author zjj
 */","
 * @author lw.xu
 * @version 0.0."
"<fim_prefix>VOUsuario getUsuarioByNombre(String nombre);
    VOUsuario getUsuarioByEmail(String email);
    VOUsuario getUsuarioByAlias(String alias);

    VOColeccionUsuarios getUsuarios();

    VOUsuario validarUsuario(String alias, String contrasena);

    boolean registrarUsuario(VOUsuario usuario);
    boolean registrarUsuario(String nombre, String email, String direccion, String alias, String contrasena);

    /*<fim_suffix>
    int checkCategoria(VOUsuario usuario);

    /*El input de este metodo debera ser el VO con los datos nuevos del usuario,
    * lmanteniendo el id al anterior. Si se desconoce el id, realizar antes el
    * getUsuarioBy correspondiente :D
    * El metodo devuelve true si se ha conseguido modificar el usuario y false
    * tanto si ha ocurrido un error como si no se pasan argumentos suficientes*/
    bool<fim_middle>","Devuelve el int con la categoria, -1 si no existe el usuario
    * No se comprueba la categoria del usuario antes de sumar, por lo que
    * habra que llamar a esta funcion si la categoria del usuario en ese momento
    * no es vip
    * Siempre se le va a asignar la que corrasponda, asi que si se llama sin comprobar
    * tampoco pasa nada*/","El input de este metodo debera ser el VO con los datos nuevos del usuario,
    * lmanteniendo el id al anterior. Si se desconoce el id, realizar antes el
    * getUsuarioBy correspondiente :D
    * El metodo devuelve true si se ha conseguido modificar el usuario y false
    * tanto si ha ocurrido un error como si no se pasan argumentos suficientes*/"
"<fim_prefix>   /*El input de este metodo debera ser el VO con los datos nuevos del usuario,
    * lmanteniendo el id al anterior. Si se desconoce el id, realizar antes el
    * getUsuarioBy correspondiente :D
    * El metodo devuelve true si se ha conseguido modificar el usuario y false
    * tanto si ha ocurrido un error como si no se pasan argumentos suficientes*/
    boolean updateUsuario(VOUsuario usuario);

    /*<fim_suffix>
    boolean bloquearUsuario(VOUsuario usuario);

    /*Elimina a un usuario de la base de datos
    * Requiere que se pase como argumento un VO con minimo el id para funcionar*/
    boolean eliminarUsuario(VOUsuario usuario);




}
<fim_middle>","Marca el usuario como no registrado, pero sin eliminarlo de la base de datos
    * Requiere que se pase como argumento un VO con minimo el id para funcionar*/","Bloquea a un usuario de la base de datos
    * Requiere que se pase como argumento un VO con minimo el id para funcionar*/"
"<fim_prefix>evuelve true si se ha conseguido modificar el usuario y false
    * tanto si ha ocurrido un error como si no se pasan argumentos suficientes*/
    boolean updateUsuario(VOUsuario usuario);

    /*Marca el usuario como no registrado, pero sin eliminarlo de la base de datos
    * Requiere que se pase como argumento un VO con minimo el id para funcionar*/
    boolean bloquearUsuario(VOUsuario usuario);

    /*<fim_suffix>
    boolean eliminarUsuario(VOUsuario usuario);




}
<fim_middle>","Elimina a un usuario de la base de datos
    * Requiere que se pase como argumento un VO con minimo el id para funcionar*/",Elimina el usuario de la base de datos
"<fim_prefix>asena);

    /*Devuelve el int con la categoria, -1 si no existe el usuario
    * No se comprueba la categoria del usuario antes de sumar, por lo que
    * habra que llamar a esta funcion si la categoria del usuario en ese momento
    * no es vip
    * Siempre se le va a asignar la que corrasponda, asi que si se llama sin comprobar
    * tampoco pasa nada*/
    int checkCategoria(VOUsuario usuario);

    /*<fim_suffix>
    boolean updateUsuario(VOUsuario usuario);

    /*Marca el usuario como no registrado, pero sin eliminarlo de la base de datos
    * Requiere que se pase como argumento un VO con minimo el id para funcionar*/
    boolean bloquearUsuario(VOUsuario usuario);

    /*Elimina a un usuario de la base de datos
    * Requiere que se pase como argumento un VO con minimo el id para funcionar*/
    boolean eliminar<fim_middle>","El input de este metodo debera ser el VO con los datos nuevos del usuario,
    * lmanteniendo el id al anterior. Si se desconoce el id, realizar antes el
    * getUsuarioBy correspondiente :D
    * El metodo devuelve true si se ha conseguido modificar el usuario y false
    * tanto si ha ocurrido un error como si no se pasan argumentos suficientes*/","Devuelve el int con la categoria, -1 si no existe el usuario
    * Si se comprueba la categoria del usuario antes de sumar, se devuelve la categoria
    * de ese usuario*/"
"<fim_prefix>package com.ozguryazilim.telve.forms;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import javax.enterprise.inject.Stereotype;
import javax.inject.Named;
import org.apache.deltaspike.core.api.scope.GroupedConversationScoped;

/**<fim_suffix>
@Stereotype
@GroupedConversationScoped
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Named
@Documented
public @interface ParamEdit {
    
}
<fim_middle>","
 * Parametre tipi veri giriş control sınıflarını işaretlemek için kullanılır.
 * 
 * @author Hakan Uygun
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package br.com.competeaqui.pagseguro.service.response;

/**<fim_suffix>
public record ErrorMessage (String code, String description, String parameter_name){

}
<fim_middle>","
 * Mensagem de erro enviada como resposta de uma requisição
 * @author Manoel Campos da Silva Filho
 * @see ResponseError
 */","
 * @author <NAME>
 * @version 1.0
 * @since Release 01
 */"
"<fim_prefix>package org.openyu.commons.fto;

import org.openyu.commons.fto.commons.net.ftp.FtpClientFto;

/**<fim_suffix>
public interface CommonFto extends FtpClientFto {

}
<fim_middle>","
 * 通用 Fto
 */","
 * 通用FTP操作
 *"
"<fim_prefix>
/**<fim_suffix>
public class ProductoRefrigerado extends Producto {
    private String codigoSupervisionAlimentaria;
    private String fechaDeEnvasado;
    public String paisDeOrigen;
    public double tempCongelacionRecomendada;
       
    public ProductoRefrigerado(String fechaCaducidad, String numeroLote){
        super(fechaCaducidad, numeroLote);
        codigoSupervisionAlimentaria = ""L000000"";
         fechaDeEnva<fim_middle>","
  Clase de Productos refigerados Heredando de Producto  
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.zabbix.model;
<fim_middle>","
 * <p>
 * Zabbix APIを操作するためのエンティティクラスです。
 * </p>
 */","
 * Created by prime on 2017/08/07.
 */"
"<fim_prefix>package club.xiaojiawei.controls.ico;

import club.xiaojiawei.controls.images.ImagesLoader;
import org.girod.javafx.svgimage.SVGImage;
import org.girod.javafx.svgimage.SVGLoader;

/**<fim_suffix>
public class CutIco extends AbstractIco {

    public CutIco() {
        this(null);
    }

    public CutIco(String color) {
        super(color);
        SVGImage svgImage = SVGLoader.load(ImagesLoader.class.getResource(this.getClass().getSimpleName() + "".svg""));
        if (svgImage != null) {
            this.setMaxWidth(svgImage.getWidth());
            this.getChildren().add(svgImage);
        }
    }<fim_middle>","
 * @author 肖嘉威 xjw580@qq.com
 * @date 2023/10/31 22:28
 */","
 * @author : xiaojiawei
 * @date : 17/12/27 下午3:00
 * @description :
 */"
"<fim_prefix>package cn.item.springBoot.data.dao;

import cn.item.springBoot.domain.entity.UserRole;

import java.util.List;

public interface UserRoleMapper {

    /**<fim_suffix>
    List<UserRole> list();

}
<fim_middle>","
     * 查询所有用户
     * @return
     */","
     * 查询所有
     * @return
     */"
"<fim_prefix>package mz.lib.minecraft.bukkit.gui.inventory;

import mz.lib.minecraft.bukkit.module.IModule;
import mz.lib.minecraft.bukkit.wrappednms.*;
import org.bukkit.Bukkit;
import org.bukkit.entity.*;

import java.util.function.*;

/**<fim_suffix>
public abstract class ChestUI extends InventoryUI
{
	public ChestUI(IModule module,int size,String title)
	{
		super(module,size);
		this.inv=Bukkit.createInventory(this,size,title);
	}
	public ChestUI(IModule module,int size,Function<Player,NmsIChatBaseComponent> titleGetter)
	{
		this(module,size,"""");
		this.titleModifier=(p,c)->c.set(titleGetter.apply(p));
	}
}
<fim_middle>","
 * ChestUI
 */","
 * @author Matte"
"<fim_prefix>package org.encinet.oceanbot.common.until;

import java.util.Random;

/**<fim_suffix>
public class Verify {
    private static final Random r = new Random();
    private static final int max = 9999999;
    private static final int min = 1000000;

    public static String get() {
        return Integer.toString(r.nextInt(max - min) + min);
    }
}
<fim_middle>","
 * 验证码生成
 */","
 * @author encinet
"
"<fim_prefix>// ""   ___  ___    ""
// ""  |___ /   `   ""
// ""  |    \___,   ""
/**<fim_suffix>
package team.floracore.common;<fim_middle>","
 * FloraCore的基础代码。
 */","
 * @author Flora
 */"
"<fim_prefix>/**<fim_suffix>
package br.com.hslife.orcamento.facade;

import java.util.List;

import br.com.hslife.orcamento.entity.Conta;
import br.com.hslife.orcamento.entity.LancamentoConta;
import br.com.hslife.orcamento.entity.RegraImportacao;

public interface IRegraImportacao extends ICRUDService<RegraImportacao>{

	List<RegraImportacao> buscarTodosPorConta(Conta conta);
	
	LancamentoConta processarRegras(Conta conta<fim_middle>","*

Copyright (c) 2012 - 2021 Hércules S. S. José

Este arquivo é parte do programa Orçamento Doméstico.


Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou

modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como

publicada pela Fundação do Software Livre (FSF); na versão 3.0 da

Licença.


Este programa é distribuído na esperança que possa ser útil, mas SEM

NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer

MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral Menor

GNU em português para maiores detalhes.


Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob

o nome de ""LICENSE"" junto com este programa, se não, acesse o site do

projeto no endereco https://github.com/herculeshssj/orcamento ou escreva

para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor,

Boston, MA  02110-1301, USA.


Para mais informações sobre o programa Orçamento Doméstico e seu autor

entre em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva

para Hércules S. S. José, Rua José dos Anjos, 160 - Bl. 3 Apto. 304 -

Jardim Alvorada - CEP: 26261-130 - Nova Iguaçu, RJ, Brasil.

***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.kfyty.loveqq.framework.web.core.annotation;

import com.kfyty.loveqq.framework.core.lang.annotation.AliasFor;
import com.kfyty.loveqq.framework.web.core.request.RequestMethod;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**<fim_suffix>
@Documented
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@RequestMapping(method = RequestMethod.PUT)
public @interface PutMapping {
    @AliasFor(annotation = RequestMapping.class)
    String value() default """";

    @AliasFor(annotation = RequestMapping.class)
    String produces() default RequestMapping.DEFAULT_PRODUCES;

    @AliasFor(annotation = RequestMapping.class)
    RequestMappi<fim_middle>","
 * 请求映射路径
 *
 * @see RequestMapping
 */","
 * 描述: 映射 PUT 请求
 *
 * @author k"
"<fim_prefix>package github.kasuminova.stellarcore.mixin.util;

public interface StellarNBTTagUnique {

    void stellar_core$onModified();

    void stellar_core$setUID(final long uid);

    long stellar_core$getUID();

    void stellar_core$setUnique(final boolean unique);

    /**<fim_suffix>
    Boolean stellar_core$isUnique();

    void stellar_core$setHashCodeCache(final int hashCode);

}
<fim_middle>","
     * 使用 Boolean 而不是 boolean，沟槽的插件扫 Method 来获取方法。
     */","
     * @return the hashCode of the object
     */"
"<fim_prefix>package org.iesgrancapitan.PROGR.ejercicios.ej00secuenciales;
/*<fim_suffix>

import java.util.Scanner;

public class Ej12CalcularDistanciaEntrePuntos {

  // ################################################################################
  // Pide al usuario dos pares de números x1,y2 y x2,y2, que representen dos puntos
  // en el plano. Calcula y muestra la distancia entre ellos.
  // ################################################################################
  // Análisis
 <fim_middle>"," Este codigo ha sido generado por el modulo psexport 20180125-l64 de PSeInt.
Es posible que el codigo generado no sea completamente correcto. Si encuentra
errores por favor reportelos en el foro (http://pseint.sourceforge.net).

Retocado por Rafael del Castillo con el comando sed. */","*
 * Created by jeslopalo on 25/07/2017.
 */"
"<fim_prefix>package homework;

import java.util.Scanner;

public class badak_0817 {

	/*<fim_suffix>
	static final int MAX_SIZE = 100;
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int[] numArray = new int [MAX_SIZE]; 
		int cnt = 0;
		
		for(int i=0;i<MAX_SIZE;i++) {
			numArray[i] = sc.nextInt();
			if(numArray[i]==0) {
				break;
			}
			cnt++;
		}
		sc.close();
		System.out.println(cnt);
		for(int i=0;i<cnt;i++) {
			if(numArray[i]%2==0)
				Sy<fim_middle>","
	 * 0817

정수를 입력받다가 0 이 입력되면 0 을 제외하고 그 때까지 입력 받은 개수를 출력한 후

입력받은 정수를 차례로 출력하되 그 수가 홀수이면 2배한 값을, 

짝수인 경우에는 2로 나눈 몫을 출력하는 프로그램을 작성하시오.

 

입력되는 정수의 개수는 100개 이하이다. 


-입력 예
8 10 5 15 100 0
-출력 예
5
4 5 10 30 50
	 */","*
	 * @param args
	 */"
"<fim_prefix>package org.whirlplatform.editor.client.view.widget;

import org.whirlplatform.meta.shared.editor.ElementVisitor.VisitContext;

/**<fim_suffix>
public class DisplayNameVisitContext implements VisitContext {
    private String displayName = """";
    private String className = """";

    public DisplayNameVisitContext() {
    }

    public String getClassName() {
        return className;
    }

    public void setClassName(String className) {
        this.className = className;
    }

    public String getDisplayName() {
        return displayName;
   <fim_middle>","
 * Используется для создания отображаемого имени AbstractElement
 */","
 * Created by ruslan on 17.09.15.
 */"
"<fim_prefix>package com.easyink.common.enums;

import lombok.Getter;
import lombok.NoArgsConstructor;

/**<fim_suffix>
@NoArgsConstructor
@Getter
public enum PushType {

    /**
     * 发给客户
     */
    SEND_TO_USER(0, ""发给客户""),

    /**
     * 发给客户群
     */
    SENT_TO_USER_GROUP(1, ""发给客户群"");

    private String name;

    private Integer type;

    PushType(Integer type, String name) {
        this.name = name;
        this.type = type;
    }

}
<fim_middle>","
 * 群发类型 0 发给客户 1 发给客户群
 */","
 * 推送类型
 *
 * @author tengchong
 *"
"<fim_prefix>package com.easyink.common.enums;

import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * 群发类型 0 发给客户 1 发给客户群
 */
@NoArgsConstructor
@Getter
public enum PushType {

    /**
     * 发给客户
     */
    SEND_TO_USER(0, ""发给客户""),

    /**<fim_suffix>
    SENT_TO_USER_GROUP(1, ""发给客户群"");

    private String name;

    private Integer type;

    PushType(Integer type, String name) {
        this.name = name;
        this.type = type;
    }

}
<fim_middle>","
     * 发给客户群
     */","
     * 发给客户群
     */"
"<fim_prefix>package com.easyink.common.enums;

import lombok.Getter;
import lombok.NoArgsConstructor;

/**
 * 群发类型 0 发给客户 1 发给客户群
 */
@NoArgsConstructor
@Getter
public enum PushType {

    /**<fim_suffix>
    SEND_TO_USER(0, ""发给客户""),

    /**
     * 发给客户群
     */
    SENT_TO_USER_GROUP(1, ""发给客户群"");

    private String name;

    private Integer type;

    PushType(Integer type, String name) {
        this.name = name;
        this.type = type;
    }

}
<fim_middle>","
     * 发给客户
     */","
     * 发给客户
     */"
"<fim_prefix>package ru.ecom.expomc.ejb.services.form.impdoc;

import java.util.Collection;

import ru.ecom.expomc.ejb.domain.impdoc.IImportData;

/**<fim_suffix>
public interface IImportDataService {
    Collection<IImportData> listAll(long aTime) ;
    void join(long[] aImportedDataIds) ;
}
<fim_middle>","
 * Сервис для работы данными
 */","
 * Created by vaa25 on 13.05"
"<fim_prefix>package co.edu.utp.gia.sms.query.estadistica;

import co.edu.utp.gia.sms.dtos.DatoDTO;
import co.edu.utp.gia.sms.entidades.Referencia;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**<fim_suffix>
public class EstadisticaReferenciaByAny {

    /**
     * Consulta que permite obtener el número de referencias por año en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param mapper mapper – Función que transformará la referencia en un valor
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */
    pub<fim_middle>","
 * Consulta que permite obtener el número de referencias por año en una revision
 */","
 * EstadisticaReferenciaByAny
 *
 * @author <NAME>
"
"<fim_prefix>ión de datos en la que se realizará la búsqueda
     * @param mapper mapper – Función que transformará la referencia en un valor
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */
    public static Stream<DatoDTO> createQuery(Provider<Collection<Referencia>> dataProvider, Function<Referencia, ? > mapper) {
        return createQuery(dataProvider,r->true,mapper);
    }

    /**<fim_suffix>
    public static Stream<DatoDTO> createQuery(Provider<Collection<Referencia>> dataProvider, Predicate<Referencia> filtro, Function<Referencia, ? > mapper) {
        return createQuery(dataProvider,filtro,mapper,Collectors.counting());
    }

    /**
     * Consulta que permite obtener el número de referencias por año en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la<fim_middle>","
     * Consulta que permite obtener el número de referencias por año en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param filtro Función que permite filtrar (seleccionar o no) una referencia
     * @param mapper mapper – Función que transformará la referencia en un valor
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */","
     * Consulta que permite obtener el número de referencias por año en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda  Agregado método para obtener el número de referencias por año en una revisión  package es.uniovi.asw.model;

import java.util.Collection;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function."
"<fim_prefix>p.gia.sms.entidades.Referencia;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Consulta que permite obtener el número de referencias por año en una revision
 */
public class EstadisticaReferenciaByAny {

    /**<fim_suffix>
    public static Stream<DatoDTO> createQuery(Provider<Collection<Referencia>> dataProvider, Function<Referencia, ? > mapper) {
        return createQuery(dataProvider,r->true,mapper);
    }

    /**
     * Consulta que permite obtener el número de referencias por año en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param filtro <fim_middle>","
     * Consulta que permite obtener el número de referencias por año en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param mapper mapper – Función que transformará la referencia en un valor
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */","
     * Consulta que permite obtener el número de referencias por año en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param filtro       Filtro que se aplicará a los datos
     * @param mapper       Función que mapea los datos de"
"<fim_prefix>  * @param mapper mapper – Función que transformará la referencia en un valor
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */
    public static Stream<DatoDTO> createQuery(Provider<Collection<Referencia>> dataProvider, Predicate<Referencia> filtro, Function<Referencia, ? > mapper) {
        return createQuery(dataProvider,filtro,mapper,Collectors.counting());
    }

    /**<fim_suffix>
    public static Stream<DatoDTO> createQuery(Provider<Collection<Referencia>> dataProvider,
                                              Predicate<Referencia> filtro, Function<Referencia, ? > mapper,
                                              Collector<Referencia, ?, ? extends Number> collector) {
        return dataProvider.get().stream()
                .filter(filtro)
                .collect(Collec<fim_middle>","
     * Consulta que permite obtener el número de referencias por año en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param filtro Función que permite filtrar (seleccionar o no) una referencia
     * @param mapper mapper – Función que transformará la referencia en un valor
     * @param collector un Colector que aplica la reducción descendente (conteo, suma, promedio, minimo, maximo)
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */","
     * Crea una consulta de datos a partir de un dataProvider, un filtro y un mapper.
     *
     * @param dataProvider dataProvider – Proveedor de datos
     * @param filtro filtro – Filtro de la consulta
     * @param mapper mapper – Función que transformará la referencia en un valor
     * @param collector collector – Función que transformará el resultado de la consulta
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */"
"<fim_prefix>package pl.edu.icm.saos.common.testcommon.category;

/**<fim_suffix>

public interface SlowTest {

}
<fim_middle>","
 * @author ≈Åukasz Dumiszewski
 */","
 * @author <NAME>
 */"
"<fim_prefix>package redgame.status;
/*<fim_suffix>
import java.awt.*;
import redgame.engine.*;
import redgame.anim.*;
public class AnimStatus extends AbstractStatus{
    FileAnimation m_anim;
    AbstractParticleSystem m_p;

    /**
     * 创建一个AnimStatus
     * @param game 游戏引用
     * @param x    位置
     * @param y    位置
     */
    public AnimStatus(GameWorld game, int x, int y, String name, AbstractParticleSystem p){
        super(game);
        m_p = p;
<fim_middle>","
 * AnimStatus.java 作者：姚春晖
 */","*
 * 动画状态
 * @author liuzhengyi
 *"
"<fim_prefix>public class AnimStatus extends AbstractStatus{
    FileAnimation m_anim;
    AbstractParticleSystem m_p;

    /**
     * 创建一个AnimStatus
     * @param game 游戏引用
     * @param x    位置
     * @param y    位置
     */
    public AnimStatus(GameWorld game, int x, int y, String name, AbstractParticleSystem p){
        super(game);
        m_p = p;
        m_anim = new FileAnimation(game, x, y, name);
    }
    /**<fim_suffix>
    public int draw(long passedTime, Graphics g){
        m_anim.paint(g);
        if (m_p != null) m_p.paint(g);
        return 0;
    }

    
    public int update(long passedTime){
        if (m_p != null) m_p.move(passedTime);
        m_anim.update(passedTime);
        if (m_anim.isStop())
            return 1;
        else    
            return 0;
    }


}
<fim_middle>","
     * 画图代码
     * @param passedTime 从上一次调用到现在的时间
     * @param g          用来画图的引用 
     */","
     * 销毁
     */"
"<fim_prefix>package redgame.status;
/*
 * AnimStatus.java 作者：姚春晖
 */
import java.awt.*;
import redgame.engine.*;
import redgame.anim.*;
public class AnimStatus extends AbstractStatus{
    FileAnimation m_anim;
    AbstractParticleSystem m_p;

    /**<fim_suffix>
    public AnimStatus(GameWorld game, int x, int y, String name, AbstractParticleSystem p){
        super(game);
        m_p = p;
        m_anim = new FileAnimation(game, x, y, name);
    }
    /**
     * 画图代码
     * @param passedTime 从上一次调用到现在的时间
     * @param g          用来画图的引用 
     */
    public int draw(long passedTime, Graphics g){
        m_anim.paint(g);
        if (m_p != null) m_p.paint(g);
      <fim_middle>","
     * 创建一个AnimStatus
     * @param game 游戏引用
     * @param x    位置
     * @param y    位置
     */","
     * 构造函数
     * @param game       游戏对象
     * @param x          初始位置x
     * @param"
"<fim_prefix>package com.xm.cpsmall.module.user.serialize.vo;

import lombok.Data;

/**<fim_suffix>
@Data
public class MenuTipVo {
    private Integer menuId;
    private Boolean hot;
    private Integer num;
}
<fim_middle>","
 * 菜单提示
 */","
 * Author: WangXin
 *"
"<fim_prefix>
/**<fim_suffix>
package es.inteco.xbrl.pgc.validator;<fim_middle>","
 * Clases que componen el servicio de validación PGC2007.
 */","
 * @author <NAME> (https://github.com/victor-iy"
"<fim_prefix>package com.platform.modules.chat.service;

import com.platform.common.web.service.BaseService;
import com.platform.modules.chat.domain.ChatMsg;
import com.platform.modules.chat.vo.ChatVo01;
import com.platform.modules.chat.vo.ChatVo02;
import com.platform.modules.chat.vo.ChatVo03;

/**<fim_suffix>
public interface ChatMsgService extends BaseService<ChatMsg> {

    /**
     * 发送消息
     */
    ChatVo03 sendFriendMsg(ChatVo01 chatVo);

    /**
     * 发送群消息
     */
    ChatVo03 sendGroupMsg(ChatVo02 chatVo);

}
<fim_middle>","
 * <p>
 * 聊天消息 服务层
 * q3z3
 * </p>
 */","
 * 聊天记录Service
 *
 * @author lipengjun
 * @date 2019-02-21
"
"<fim_prefix>m.common.web.service.BaseService;
import com.platform.modules.chat.domain.ChatMsg;
import com.platform.modules.chat.vo.ChatVo01;
import com.platform.modules.chat.vo.ChatVo02;
import com.platform.modules.chat.vo.ChatVo03;

/**
 * <p>
 * 聊天消息 服务层
 * q3z3
 * </p>
 */
public interface ChatMsgService extends BaseService<ChatMsg> {

    /**
     * 发送消息
     */
    ChatVo03 sendFriendMsg(ChatVo01 chatVo);

    /**<fim_suffix>
    ChatVo03 sendGroupMsg(ChatVo02 chatVo);

}
<fim_middle>","
     * 发送群消息
     */","
     * 发送消息
     */"
"<fim_prefix>package com.platform.modules.chat.service;

import com.platform.common.web.service.BaseService;
import com.platform.modules.chat.domain.ChatMsg;
import com.platform.modules.chat.vo.ChatVo01;
import com.platform.modules.chat.vo.ChatVo02;
import com.platform.modules.chat.vo.ChatVo03;

/**
 * <p>
 * 聊天消息 服务层
 * q3z3
 * </p>
 */
public interface ChatMsgService extends BaseService<ChatMsg> {

    /**<fim_suffix>
    ChatVo03 sendFriendMsg(ChatVo01 chatVo);

    /**
     * 发送群消息
     */
    ChatVo03 sendGroupMsg(ChatVo02 chatVo);

}
<fim_middle>","
     * 发送消息
     */","
     * 发送好友消息
   "
"<fim_prefix>1 开始)</p>
 */
@Documented
@Inherited
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Pager {
    /**
     * 每页结果数的默认值，默认为 10
     * <p>请求中未传 pageSize 参数时，会使用这个值作为 pageSize</p>
     * @return 每页结果数的默认值
     */
    int df() default 10;

    /**
     * 每页结果数的最小值，默认为 1
     * <p>如果 pageSize 小于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最小值
     */
    int min() default 1;

    /**<fim_suffix>
    int max() default 100;

    /**
     * 导出模式使用的导出实现类
     * <p>如果为可实例化的类(有 public 的无参构造方法)，则这个接口支持导出为 Excel 文件</p>
     * <p>请求参数中设置 export 为 true 即可禁用分页并把请求转为文件下载</p>
     * <p>导出模式默认是禁用分页的，即查出所有结果并导出</p>
     * <p>将请求参数中设置 pager 为 true 可在导出模式时继续分页</p>
     * @return 导出模式使用的导出实现
     */
    @Nonnull
    Class<? extends IPagerExport> export() default IPagerExport.class;

    /**
     * 导出的文件的文件名前缀
     *<fim_middle>","
     * 每页结果数的最大值，默认为 100
     * <p>如果 pageSize 大于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最大值
     */","
     * 每页结果数的最大值，默认为 100
     * <p>如果 pageSize 大于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最大值
     */"
"<fim_prefix>
     * @return 导出模式使用的导出实现
     */
    @Nonnull
    Class<? extends IPagerExport> export() default IPagerExport.class;

    /**
     * 导出的文件的文件名前缀
     * <p>默认情况下，SimplePagerExport 会使用这个参数作为导出时下载的文件名的前缀</p>
     * <p>如希望自定义导出的文件名，可通过覆盖 IPagerExport 的 getFilename 方法来实现</p>
     * <p>如使用自己实现的导出类，可自行决定是否参考这个字段</p>
     * @return 导出的文件的文件名前缀
     */
    @Nonnull
    String filenamePrefix() default """";

    /**<fim_suffix>
    @Nonnull
    String[] exportColumns() default {};
}
<fim_middle>","
     * 导出的 Excel 的列标题列表
     * <p>默认情况下，SimplePagerExport 会使用这个参数作为 Excel 的第一行的内容，每个元素为一列</p>
     * <p>如保持默认值，则会视为没有列标题</p>
     * <p>如使用自己实现的导出类，可自行决定是否参考这个字段</p>
     * @return 导出的 Excel 的列标题列表
     */","
     * 导出的文件的文件名后缀
     * <p>默认情况下，SimplePagerExport 会使用这个参数作为导出时下载的文件名的后缀</p>
     * <p>如希望自定义导出的文件名，可通过覆盖 IPagerExport 的 getFilename 方法来实现</p>
     * <p>如使用自己实现的导出类，可自行决定是否参考这个字段</p>
     * @return 导出的文件的文件名后缀
  "
"<fim_prefix>ults#registerHandler} 来支持这种类型</p>
 * <p>正常情况下(外部访问而非内部调用时，且方法上直接或间接修饰着`@ResponseBody`)，结果会序列化成`JSON`输出，例：</p>
 * <pre>{""page"":1,""totalPage"":5,""totalRow"":48,""listData"":[...]}</pre>
 * <p>当请求中附带 pageSize 参数时，则以这个参数的值当做每页的结果数</p>
 * <p>当请求中附带 page 参数时，则以这个参数的值当做当前的页码，不写默认为第一页(从 1 开始)</p>
 */
@Documented
@Inherited
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Pager {
    /**<fim_suffix>
    int df() default 10;

    /**
     * 每页结果数的最小值，默认为 1
     * <p>如果 pageSize 小于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最小值
     */
    int min() default 1;

    /**
     * 每页结果数的最大值，默认为 100
     * <p>如果 pageSize 大于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最大值
     */
    int max() default 100;

    /**
     * 导出模式使用的导出实现类
     * <p>如果为可实例化的类(有 public 的无参构造方法)，则这个接口支持导出为 Excel 文件</p>
     * <p>请求参数中设置 expo<fim_middle>","
     * 每页结果数的默认值，默认为 10
     * <p>请求中未传 pageSize 参数时，会使用这个值作为 pageSize</p>
     * @return 每页结果数的默认值
     */","
     * 导出模式使用的导出实现类
     * <p>如果为可实例化的类(有 public 的无参构造方法)，则这个接口支持导出为 Excel 文件</p>
     * <p>请求参数中设置"
"<fim_prefix>""totalRow"":48,""listData"":[...]}</pre>
 * <p>当请求中附带 pageSize 参数时，则以这个参数的值当做每页的结果数</p>
 * <p>当请求中附带 page 参数时，则以这个参数的值当做当前的页码，不写默认为第一页(从 1 开始)</p>
 */
@Documented
@Inherited
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Pager {
    /**
     * 每页结果数的默认值，默认为 10
     * <p>请求中未传 pageSize 参数时，会使用这个值作为 pageSize</p>
     * @return 每页结果数的默认值
     */
    int df() default 10;

    /**<fim_suffix>
    int min() default 1;

    /**
     * 每页结果数的最大值，默认为 100
     * <p>如果 pageSize 大于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最大值
     */
    int max() default 100;

    /**
     * 导出模式使用的导出实现类
     * <p>如果为可实例化的类(有 public 的无参构造方法)，则这个接口支持导出为 Excel 文件</p>
     * <p>请求参数中设置 export 为 true 即可禁用分页并把请求转为文件下载</p>
     * <p>导出模式默认是禁用分页的，即查出所有结果并导出</p>
     * <p>将请求参数中设置 pager 为 true 可在导出模式时继续分页</p>
     * @return 导出<fim_middle>","
     * 每页结果数的最小值，默认为 1
     * <p>如果 pageSize 小于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最小值
     */","
     * 每页结果数的最小值，默认为 1
     * <p>如果 pageSize 小于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最小值
     */"
"<fim_prefix>  * 每页结果数的默认值，默认为 10
     * <p>请求中未传 pageSize 参数时，会使用这个值作为 pageSize</p>
     * @return 每页结果数的默认值
     */
    int df() default 10;

    /**
     * 每页结果数的最小值，默认为 1
     * <p>如果 pageSize 小于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最小值
     */
    int min() default 1;

    /**
     * 每页结果数的最大值，默认为 100
     * <p>如果 pageSize 大于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最大值
     */
    int max() default 100;

    /**<fim_suffix>
    @Nonnull
    Class<? extends IPagerExport> export() default IPagerExport.class;

    /**
     * 导出的文件的文件名前缀
     * <p>默认情况下，SimplePagerExport 会使用这个参数作为导出时下载的文件名的前缀</p>
     * <p>如希望自定义导出的文件名，可通过覆盖 IPagerExport 的 getFilename 方法来实现</p>
     * <p>如使用自己实现的导出类，可自行决定是否参考这个字段</p>
     * @return 导出的文件的文件名前缀
     */
    @Nonnull
    String filenamePrefix() default """";

    /**
     * 导出的 Excel 的列标题列表
     * <p>默<fim_middle>","
     * 导出模式使用的导出实现类
     * <p>如果为可实例化的类(有 public 的无参构造方法)，则这个接口支持导出为 Excel 文件</p>
     * <p>请求参数中设置 export 为 true 即可禁用分页并把请求转为文件下载</p>
     * <p>导出模式默认是禁用分页的，即查出所有结果并导出</p>
     * <p>将请求参数中设置 pager 为 true 可在导出模式时继续分页</p>
     * @return 导出模式使用的导出实现
     */","
     * 导出的文件的文件名
     * <p>默认情况下，SimplePagerExport 会使用这个参数作为导出时下载的文件名</p>
     * <p>如希望自定义导出的文件名，可通过覆盖 IPagerExport 的 getFilename 方法来实现</p>
     * <p>如使用自己实现的导出类，可自行决定是否参考这个字段</p>
     * @return 导出的文件的文件名
     */"
"<fim_prefix>package org.cat73.pager.annotation;

import org.cat73.pager.bean.PageBody;
import org.cat73.pager.export.IPagerExport;
import org.cat73.pager.result.PagerResults;

import javax.annotation.Nonnull;
import java.lang.annotation.*;
import java.util.Collection;
import java.util.Map;

/**<fim_suffix>
@Documented
@Inherited
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Pager {
    /**
     * 每页结果数的默认值，默认为 10
     * <p>请求中未传 pageSize 参数时，会使用这个值作为 pageSize</p>
     * @return 每页结果数的默认值
     */
    int df() default 10;

    /**
     * 每页结果数的最小值，默认为 1
     * <p>如果 pageSize 小于这个值，则会被强制限制为这个值</p>
     * @return 每页结果数的最小值
     */
    int min() default 1;

    /**
     * 每页结果数的<fim_middle>","
 * 被此注解标记的 Controller 中的 RequestHandler 将自动支持分页查询
 * <p>请求的返回值为 {@link Map} 时，会尝试读取其 data 属性，如存在且值为 {@link Collection} 的子类，则会将其视为查询结果，并将其转换为 {@link PageBody}</p>
 * <p>请求的返回值为其他类型时，请使用 {@link PagerResults#registerHandler} 来支持这种类型</p>
 * <p>正常情况下(外部访问而非内部调用时，且方法上直接或间接修饰着`@ResponseBody`)，结果会序列化成`JSON`输出，例：</p>
 * <pre>{""page"":1,""totalPage"":5,""totalRow"":48,""listData"":[...]}</pre>
 * <p>当请求中附带 pageSize 参数时，则以这个参数的值当做每页的结果数</p>
 * <p>当请求中附带 page 参数时，则以这个参数的值当做当前的页码，不写默认为第一页(从 1 开始)</p>
 */","
 * 标记一个方法，该方法用于分页查询
 * <p>
 * 标记的方法必须返回 {@link PagerResults} 对象
 * <p>
 * 标记的方法必须包含一个参数，该参数为 {@link PageBody} 对象
 * <p>
 * 标记的方法必须包含一个参数，该参数为 {@link Map} 对象
 * <p>
 * 标记的方法必须包含一个参数，该参数为 {@link Collection} 对象
 * <p>
 * 标记的方法必须包含一个参数，该参数为 {@link IPagerExport} 对象
 * <p>
 * 标记的方法必须包含一个参数，该参数为 {@link String} 对象
 * <p>
 * 标记的方法必须包含一个参数，该参数为 {@link Integer} 对象
 * <p>
 * 标记的方法必须包含一个参数，该参数为 {@link Long} 对象
 * <p>
 * 标记的方法必须包含一个参数，该参数为 {@link Double} 对象
 * <p>
 * 标记的方法必须包含一个参数，该参数"
"<fim_prefix>@return 每页结果数的最大值
     */
    int max() default 100;

    /**
     * 导出模式使用的导出实现类
     * <p>如果为可实例化的类(有 public 的无参构造方法)，则这个接口支持导出为 Excel 文件</p>
     * <p>请求参数中设置 export 为 true 即可禁用分页并把请求转为文件下载</p>
     * <p>导出模式默认是禁用分页的，即查出所有结果并导出</p>
     * <p>将请求参数中设置 pager 为 true 可在导出模式时继续分页</p>
     * @return 导出模式使用的导出实现
     */
    @Nonnull
    Class<? extends IPagerExport> export() default IPagerExport.class;

    /**<fim_suffix>
    @Nonnull
    String filenamePrefix() default """";

    /**
     * 导出的 Excel 的列标题列表
     * <p>默认情况下，SimplePagerExport 会使用这个参数作为 Excel 的第一行的内容，每个元素为一列</p>
     * <p>如保持默认值，则会视为没有列标题</p>
     * <p>如使用自己实现的导出类，可自行决定是否参考这个字段</p>
     * @return 导出的 Excel 的列标题列表
     */
    @Nonnull
    String[] exportColumns() default {};
}
<fim_middle>","
     * 导出的文件的文件名前缀
     * <p>默认情况下，SimplePagerExport 会使用这个参数作为导出时下载的文件名的前缀</p>
     * <p>如希望自定义导出的文件名，可通过覆盖 IPagerExport 的 getFilename 方法来实现</p>
     * <p>如使用自己实现的导出类，可自行决定是否参考这个字段</p>
     * @return 导出的文件的文件名前缀
     */","
     * 导出模式使用的导出实现类
     * <p>如果为可实例化的类(有 public 的无参构造方法)，则这个接口支持导出为 Excel 文件</p>
     * <p>请求参数中设置 export 为 true 即可禁用分页并把请求转为文件下载</p>
     * <p>导出模式默认是禁用分页的，即查出所有结果并导出</p>
     * <p>将请求参数中设置"
"<fim_prefix>package org.dromara.system.domain.convert;

import io.github.linpeilie.BaseMapper;
import org.dromara.system.api.domain.vo.RemoteTenantVo;
import org.dromara.system.domain.vo.SysTenantVo;
import org.mapstruct.Mapper;
import org.mapstruct.MappingConstants;
import org.mapstruct.ReportingPolicy;

/**<fim_suffix>
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface SysTenantVoConvert extends BaseMapper<SysTenantVo, RemoteTenantVo> {

}
<fim_middle>","
 * 租户转换器
 * @author zhujie
 */","
 * @author liangyq 2018-12-07
 */"
"<fim_prefix>/**<fim_suffix>
package poc.jbehave.testing;<fim_middle>","
 * Factorisation de facilités pour écrire les tests.
 * 
 * @author Xavier Pigeon
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package org.accen.dmzj.util.setu;

public interface SetuGreper {
	/**<fim_suffix>
	int grep();
}
<fim_middle>","
	 * 抓取图片，返回成功数
	 * @return
	 */","
	 * 抓取图集
	 * @return
	 */"
"<fim_prefix>/*<fim_suffix>
package primera2223;


public class Ejercicio026 {
    public static void main(String arg[]){
        int tabla[][] = {{10, 20, 30}, {40, 50, 60}, {70, 80, 90},{100, 110, 120}};
        for(int i = 0; i < tabla.length; i++){
            for(int j = 0; j < tabla[i].length; j++) // Como es un vector de vectores tiene la propiedad length
                System.out.printf(""%d - "", tabla[i][j]);
      <fim_middle>","
 Creación y manipulación de una tabla
Es un vector cuyos elementos son a la vez vectores
 */","*
 * Created by <NAME> on 10/04/2017.
 */"
"<fim_prefix>package com.avalon.holygrail.statistics.bean;

import com.avalon.holygrail.statistics.model.StatisticsValueCount;
import com.avalon.holygrail.statistics.norm.DataContainer;
import com.avalon.holygrail.statistics.norm.Formatter;
import com.avalon.holygrail.statistics.norm.RawDataHandler;

/**<fim_suffix>
public final class IntegerValueCount<T> extends StatisticsValueCount<T, Integer> {

    public IntegerValueCount(String name, DataContainer<Integer> dataContainer, RawDataHandler<T, Integer> rawDataHandler) {
        super(name, dataContainer, rawDataHandler);
    }

    public IntegerValueCount(String name, DataContainer<Integer> dataContainer, Formatter<T, Integer> formatter) {
        super(name, dataCon<fim_middle>","
 * 统计Integer类型值次数
 * Created by 白超 on 2018-3-12.
 */","
 * Created by semenov on 11.08.16.
 */"
"<fim_prefix>/*<fim_suffix>

package fr.arpinum.cocoritest.interne.affirmation.objet;

import fr.arpinum.cocoritest.affirmation.objet.AffirmationObjetAuFeminin;
import fr.arpinum.cocoritest.conjonction.Conjonction;

public class AffirmationObjetAuFemininDeBase<TObjet> extends AffirmationObjetDeBase<TObjet,
		Conjonction<AffirmationObjetAuFeminin<TObjet>>> implements
		AffirmationObjetAuFeminin<TObjet> {

	public AffirmationObjetAuFemi<fim_middle>","
 * Copyright (C) 2013, Arpinum
 *
 * Cocoritest est un logiciel libre ; vous pouvez le redistribuer ou le modifier suivant les termes de la GNU Lesser
 * General Public License telle que publiée par la Free Software Foundation ; soit la version 3 de la licence,
 * soit (à votre gré) toute version ultérieure.
 *
 * Cocoritest est distribué dans l'espoir qu'il sera utile, mais SANS AUCUNE GARANTIE ; pas même la garantie
 * implicite de COMMERCIABILISABILITÉ ni d'ADÉQUATION à UN OBJECTIF PARTICULIER. Consultez la GNU Lesser General
 * Public License pour plus de détails.
 *
 * Vous devez avoir reçu une copie de la GNU Lesser General Public License en même temps que Cocoritest ; si ce n'est
  * pas le cas, consultez http://www.gnu.org/licenses.
 */","*
 * @author <NAME>
 *
 * @param <TObjet>
 */"
"<fim_prefix>package week17;

/**<fim_suffix>
public class LeetCode_1468 {


    public static void main(String[] args) {

    }


    public static int xorOperation(int n, int start) {
        int result =0;

        for(int i=0; i< n; i++){
           int num = start + 2*i;
            if(i==0){
                result = num;
            }else {
                result = result ^ num;
            }
        }

        return result;
    }

}
<fim_middle>","
 * 给你两个整数，n 和 start 。
 *
 * 数组 nums 定义为：nums[i] = start + 2*i（下标从 0 开始）且 n == nums.length 。
 *
 * 请返回 nums 中所有元素按位异或（XOR）后得到的结果。
 *
 *  
 *
 * 示例 1：
 *
 * 输入：n = 5, start = 0
 * 输出：8
 * 解释：数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。
 *      ""^"" 为按位异或 XOR 运算符。
 * 示例 2：
 *
 * 输入：n = 4, start = 3
 * 输出：8
 * 解释：数组 nums 为 [3, 5, 7, 9]，其中 (3 ^ 5 ^ 7 ^ 9) = 8.
 * 示例 3：
 *
 * 输入：n = 1, start = 7
 * 输出：7
 * 示例 4：
 *
 * 输入：n = 10, start = 5
 * 输出：2
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/xor-operation-in-an-array
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */","
 * @author liujun
 * @version 1.0
 * @date 2020/7/23
 * @author—Email <EMAIL>
 * @blogURL https://blog.csdn.net/ljfirst
 * @description 求1+2+...+n
 */"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.zabbix.model.user;
<fim_middle>","
 * <p>
 * Zabbix APIのUserを操作するためのエンティティクラスです。
 * </p>
 */","
 * Created by prime on 2017/08/07.
 */"
"<fim_prefix>/*<fim_suffix>
package com.docreader.docviewer.pdfcreator.pdfreader.filereader.office.system;

/**
 * 中断文件解析异常
 * <p>
 * <p>
 * Read版本:        Read V1.0
 * <p>
 * 作者:            ljj8494
 * <p>
 * 日期:            2012-4-24
 * <p>
 * 负责人:          ljj8494
 * <p>
 * 负责小组:         
 * <p>
 * <p>
 */
public class AbortReaderError extends Error
{
    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    p<fim_middle>","
 * 文件名称:          AbortReaderException.java
 *  
 * 编译器:            android2.2
 * 时间:              下午5:06:13
 */","*
 * 中断文件解析异常
 * <p>
 * <p>
 * Read版本:        Read V1.0
 * <p>
 * 作者:            ljj8494
 * <p>
"
"<fim_prefix>/*
 * 文件名称:          AbortReaderException.java
 *  
 * 编译器:            android2.2
 * 时间:              下午5:06:13
 */
package com.docreader.docviewer.pdfcreator.pdfreader.filereader.office.system;

/**<fim_suffix>
public class AbortReaderError extends Error
{
    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    public AbortReaderError(String message)
    {
        super(message);
    }
}
<fim_middle>","
 * 中断文件解析异常
 * <p>
 * <p>
 * Read版本:        Read V1.0
 * <p>
 * 作者:            ljj8494
 * <p>
 * 日期:            2012-4-24
 * <p>
 * 负责人:          ljj8494
 * <p>
 * 负责小组:         
 * <p>
 * <p>
 */","
 * 文档阅读器异常
 * <p>
 * <p>
 * Read版本:        Read V1.0
 * <p>
 * 作者:            ljj8494
 * <p>
 * 日期:            2011-12-13
 * <p>
 * 负责人:          ljj8494
 * <p>
 * 负责小组:         
 * <p>
 * <p>
 */"
"<fim_prefix>package de.take_weiland.mods.commons.internal.sync;

import net.minecraft.entity.Entity;
import net.minecraftforge.common.IExtendedEntityProperties;

/**<fim_suffix>
public abstract class IEEPSyncCompanion extends SyncCompanion {

    public IExtendedEntityProperties _sc$ieep;
    public Entity _sc$entity;
    public int _sc$id;
    public String _sc$ident;

}
<fim_middle>","
 * @author diesieben07
 */","
 * @author <NAME>
 * @"
"<fim_prefix>package me.afoolslove.metalmaxre.editors.tank;

/**<fim_suffix>
public class TankCUnit extends TankEquipmentItem {
}
<fim_middle>","
 * 坦克C装置
 * <p>
 * *方便判断物品类型
 */","
 * 坦克装备
 *
 * @author AFoolLove
 */"
"<fim_prefix>package darkdata.factory;

import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.Resource;

import java.util.Optional;

/**<fim_suffix>
interface ObjectFactory<T, M extends Model, C extends Resource> {

    Optional<T> get(final M model, final C source);
}
<fim_middle>","
 * @author szednik
 */","
 *
 * @author <NAME>"
"<fim_prefix>/**<fim_suffix>
package com.bob.GUI;<fim_middle>","
 * API:java.awt-->Component
 * <p>
 * Graphical User Interface:图形用户接口
 * Java 为 GUI 提供的对象都存在 java.Awt 和 javax.Swing 两个包中
 * <p>
 * Container 为容器，是一个特殊的组件，该组件中可以通过add方法添加其它组件进来。
 * <p>
 * LayOut:布局管理器
 * 1、FlowLayout：流式布局，从左至右顺序排列，Panel默认的布局
 * 2、BordertLayout：边界式布局，东西南北中，Frame默认的布局
 * 3、GridLayout：网格式布局，规则的矩阵
 * 4、CardLayout：卡片式布局，选项卡
 * 5、GridBagLayout：网格包式布局，非规则的矩阵
 *
 * @author Bob
 */","
 * @author bob
 *
 */"
"<fim_prefix>package cn.disy920.slbot.bot.message;

import org.jetbrains.annotations.NotNull;

public interface Message {

    /**<fim_suffix>
    @NotNull
    String contentToString();
}
<fim_middle>","
     * 将任何消息转化为字符串的形式
     * 无法被直接转化为字符串的消息（如图片，动画表情等）将依照腾讯的格式进行显示（如：[图片]， [动画表情])
     * @return 被转化为字符串的消息
     */","
     * 获取消息内容
     *
     * @return 消息内容
     */"
"<fim_prefix>package sonnenlicht.somethinggood.common.tile;

import static sonnenlicht.somethinggood.client.registry.TileRegistry.BASE_FAN_BLOCK_TILE;

public class BaseFanBlockTileEntity extends AbstractFanBlockTileEntity {

    public BaseFanBlockTileEntity() {
        super(BASE_FAN_BLOCK_TILE.get());
    }

    /**<fim_suffix>
    @Override
    public void tick() {
        super.tick();
    }
}
<fim_middle>", <H2>保留父类方法内容</H2> */,"
     * Called when the block is added to the"
"<fim_prefix>tur pTextur);

	/** Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTexturBilddatei Ein Dateiname einer Bilddatei (.jpg 
	 * oder .png)
	 */
	public void setzeTextur(String pTexturBilddatei);

	/** Gibt das aktuelle Texturobjekt zurück. Ist keine Textur festgelegt,
	 * wird <code>null</code> zurück gegeben.
	 * @return Das aktuelle {@link GLTextur}-Objekt
	 */
	public GLTextur gibTextur();

	/**<fim_suffix>
	public void setzeDurchsichtigkeit(double pAlpha);

	/** Setzt die Farbwerte der Farbe, in der das Objekt ""leuchtet"". Ein selbstleuchtendes
	 * Objekt wird in einer Szene angezeigt, ohne dass dafür eine weitere Lichtquelle
	 * notwendig ist. Das Licht ist jedoch nicht räumlich und kann <em>insbesondere keine
	 * weiteren Objekte beleuchten</em>. Wenn ein solches Verhalten gewünscht ist, empfiehlt
	 * sich d<fim_middle>"," Setzt den Durchsichtigkeitsfaktor des Objekts.
	 * @param pAlpha Ein Wert zwischen 0 (komplett durchsichtig) und 1
	 * (vollständig opak)
	 */"," Gibt die aktuelle Durchsichtigkeit des Objekts zurück.
	 * @return Die aktuelle Durchsichtigkeit des Objekts
	 */"
"<fim_prefix>package bGLOOP;

/** Methoden, die GLObjekte mit Oberflächen unterstützen.
 * @author R. Spillner
 */
interface IGLSurface {

	/**<fim_suffix>
	public void setzeTextur(GLTextur pTextur);

	/** Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTexturBilddatei Ein Dateiname einer Bilddatei (.jpg 
	 * oder .png)
	 */
	public void setzeTextur(String pTexturBilddatei);

	/** Gibt das aktuelle Texturobjekt zurück. Ist keine Textur festgelegt,
	 * wird <code>null</code> zurück gegeben.
	 * @return Das aktuelle {@link GLTextur}-Objekt
	 */
	publ<fim_middle>"," Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTextur Ein {@link GLTextur}-Objekt
	 */"," Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTextur Ein {@link GLTextur}-Objekt
	 */"
"<fim_prefix> unterstützen.
 * @author R. Spillner
 */
interface IGLSurface {

	/** Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTextur Ein {@link GLTextur}-Objekt
	 */
	public void setzeTextur(GLTextur pTextur);

	/** Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTexturBilddatei Ein Dateiname einer Bilddatei (.jpg 
	 * oder .png)
	 */
	public void setzeTextur(String pTexturBilddatei);

	/**<fim_suffix>
	public GLTextur gibTextur();

	/** Setzt den Durchsichtigkeitsfaktor des Objekts.
	 * @param pAlpha Ein Wert zwischen 0 (komplett durchsichtig) und 1
	 * (vollständig opak)
	 */
	public void setzeDurchsichtigkeit(double pAlpha);

	/** Setzt die Farbwerte der Farbe, in der das Objekt ""leuchtet"". Ein selbstleuchtendes
	 * Objekt wird in einer Szene angezeigt, ohne dass dafür eine weitere Lichtquelle
	 * notw<fim_middle>"," Gibt das aktuelle Texturobjekt zurück. Ist keine Textur festgelegt,
	 * wird <code>null</code> zurück gegeben.
	 * @return Das aktuelle {@link GLTextur}-Objekt
	 */"," Gibt die Textur zurück, die auf das Objekt gesetzt wurde.
	 * @return Ein {@link GLTextur}-Objekt"
"<fim_prefix>package bGLOOP;

/** Methoden, die GLObjekte mit Oberflächen unterstützen.
 * @author R. Spillner
 */
interface IGLSurface {

	/** Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTextur Ein {@link GLTextur}-Objekt
	 */
	public void setzeTextur(GLTextur pTextur);

	/**<fim_suffix>
	public void setzeTextur(String pTexturBilddatei);

	/** Gibt das aktuelle Texturobjekt zurück. Ist keine Textur festgelegt,
	 * wird <code>null</code> zurück gegeben.
	 * @return Das aktuelle {@link GLTextur}-Objekt
	 */
	public GLTextur gibTextur();

	/** Setzt den Durchsichtigkeitsfaktor des Objekts.
	 * @param pAlpha Ein Wert zwischen 0 (komplett durchsichtig) und 1
	 * (vollständig opak)
	 */
	public v<fim_middle>"," Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTexturBilddatei Ein Dateiname einer Bilddatei (.jpg 
	 * oder.png)
	 */"," Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTexturBilddatei Der Pfad zur Textur-Datei
	 */"
"<fim_prefix>i);

	/** Gibt das aktuelle Texturobjekt zurück. Ist keine Textur festgelegt,
	 * wird <code>null</code> zurück gegeben.
	 * @return Das aktuelle {@link GLTextur}-Objekt
	 */
	public GLTextur gibTextur();

	/** Setzt den Durchsichtigkeitsfaktor des Objekts.
	 * @param pAlpha Ein Wert zwischen 0 (komplett durchsichtig) und 1
	 * (vollständig opak)
	 */
	public void setzeDurchsichtigkeit(double pAlpha);

	/**<fim_suffix>
	public void setzeSelbstleuchten(double pR, double pG, double pB);
}
<fim_middle>"," Setzt die Farbwerte der Farbe, in der das Objekt ""leuchtet"". Ein selbstleuchtendes
	 * Objekt wird in einer Szene angezeigt, ohne dass dafür eine weitere Lichtquelle
	 * notwendig ist. Das Licht ist jedoch nicht räumlich und kann <em>insbesondere keine
	 * weiteren Objekte beleuchten</em>. Wenn ein solches Verhalten gewünscht ist, empfiehlt
	 * sich die Benutzung der Klasse {@link GLLichtobjekt}. Diese verwendet jedoch eine
	 * Lichtquelle, von der in OpenGL in der Regel nur insgesamt 8 pro Szene zur Verfügung
	 * stehen.
	 * @param pR Rotanteil, zwischen 0 und 1
	 * @param pG Grünanteil, zwischen 0 und 1
	 * @param pB Blauanteil, zwischen 0 und 1
	 */"," Setzt die Farbe des selektierten Objekts.
	 * @param pR Die Rot-Komponente
	 * @param pG Die Grün-Komponente
	 * @param pB Die Blau-Komponente"
"<fim_prefix>package bGLOOP;

/**<fim_suffix>
interface IGLSurface {

	/** Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTextur Ein {@link GLTextur}-Objekt
	 */
	public void setzeTextur(GLTextur pTextur);

	/** Legt die übergebene Textur auf das Objekt.
	 * 
	 * @param pTexturBilddatei Ein Dateiname einer Bilddatei (.jpg 
	 * oder .png)
	 */
	public void setzeTextur(String pTexturBilddatei);

	/** Gibt das aktuelle Texturobjekt zurück. Is<fim_middle>"," Methoden, die GLObjekte mit Oberflächen unterstützen.
 * @author R. Spillner
 */"," Schnittstelle für Objekte, die Textur haben.
 * 
 * @author <NAME>
 * @version 1.0
"
"<fim_prefix>package com.ood.device.dh.lib.enumeration;
/**<fim_suffix>
public enum NET_EM_LATTICE_SCREEN_BACKGROUND_MODE {

    NET_EM_LATTICE_SCREEN_BACKGROUND_MODE_UNKNOWN,				// 未知
    NET_EM_LATTICE_SCREEN_BACKGROUND_MODE_A,					// 背景风格A
    NET_EM_LATTICE_SCREEN_BACKGROUND_MODE_B,					// 背景风格B
    NET_EM_LATTICE_SCREEN_BACKGROUND_MODE_C,					// 背景风格C

}
<fim_middle>", 逻辑屏背景风格模式  */,"
 * 网络设备的屏幕背景"
"<fim_prefix>.DataItem;
import top.wangqiaosong.minidb.backend.dm.logger.Logger;
import top.wangqiaosong.minidb.backend.dm.page.PageOne;
import top.wangqiaosong.minidb.backend.dm.pageCache.PageCache;
import top.wangqiaosong.minidb.backend.tm.TransactionManager;

public interface DataManager {
    DataItem read(long uid) throws Exception;
    long insert(long xid, byte[] data) throws Exception;
    void close();

    /**<fim_suffix>
    public static DataManager create(String path, long mem, TransactionManager tm) {
        PageCache pc = PageCache.create(path, mem);
        Logger lg = Logger.create(path);

        DataManagerImpl dm = new DataManagerImpl(pc, lg, tm);
        dm.initPageOne();
        return dm;
    }

    /**
     * 已有文件上创建，先启动检查，判断是否执行恢复流程，并重新在第一页生成字节
     */
    public static DataManager open(String path, long mem,<fim_middle>","
     * 创建数据管理器，在此项目中一切接口的实现类才是主体
     * 从0创建，初始化页面即可
     */","
     * 恢复数据
     */"
"<fim_prefix>ta) throws Exception;
    void close();

    /**
     * 创建数据管理器，在此项目中一切接口的实现类才是主体
     * 从0创建，初始化页面即可
     */
    public static DataManager create(String path, long mem, TransactionManager tm) {
        PageCache pc = PageCache.create(path, mem);
        Logger lg = Logger.create(path);

        DataManagerImpl dm = new DataManagerImpl(pc, lg, tm);
        dm.initPageOne();
        return dm;
    }

    /**<fim_suffix>
    public static DataManager open(String path, long mem, TransactionManager tm) {
        PageCache pc = PageCache.open(path, mem);
        Logger lg = Logger.open(path);
        DataManagerImpl dm = new DataManagerImpl(pc, lg, tm);
        if(!dm.loadCheckPageOne()) {
            Recover.recover(tm, lg, pc);
        }
        //构建索引
        dm.fillPageIndex();
        PageOne.setVcOpen(dm.pageOne);
      <fim_middle>","
     * 已有文件上创建，先启动检查，判断是否执行恢复流程，并重新在第一页生成字节
     */","
     * 打开数据管理器，从0开始
     */"
"<fim_prefix>package com.j2eefast.system.validator.group;

/**<fim_suffix>
public interface QcloudGroup {
}
<fim_middle>","
 * 腾讯云
 */","
 * 七牛云
 * @"
"<fim_prefix>
/**<fim_suffix>
package es.inteco.xbrl.pgc.transform;<fim_middle>","
 * Clases que componen el servicio de transformación PGC2007.
 */","
 * @author <NAME>
 */"
"<fim_prefix>package modtools.ui.comp.linstener;

import arc.scene.style.Drawable;
import arc.scene.ui.ScrollPane;

/**<fim_suffix>
public class AutoWrapListener implements Runnable {
	ScrollPane pane;
	public AutoWrapListener(ScrollPane pane) {
		this.pane = pane;
	}
	@Override
	public void run() {
		if (pane.getWidget() != null) {
			Drawable background = pane.getStyle().background;
			float sub = 0;
			if (background != null) {
				sub += background.getLeftWidth();
				sub += background.getRightWidth();
			}
			pane.getWidget().setWi<fim_middle>", 自动将widget的width设置为pane的width  */,"
 * 
 * @author Tetragon
 *"
"<fim_prefix>/**
 *
 */
package com.aritu.eloraplm.viewer.filename.api;

import org.nuxeo.ecm.core.api.DocumentModel;

import com.aritu.eloraplm.exceptions.EloraException;

/**<fim_suffix>
public interface FilenameService {

    public FilenameDescriptor getFilenameDescriptor(String id)
            throws EloraException;

    public String generateFilename(DocumentModel doc,
            String filenameDescriptorId, String action);

}
<fim_middle>","
 * @author aritu
 *
 */","
 * @author eloraplm
 *"
"<fim_prefix>package top.alumopper.mcfpp.type;

/**<fim_suffix>
public interface IMCType
{
	/** 
	 复制这个MC变量
	 
	 @return 
	*/
	IMCType Copy(IMCType mctype);
	IMCType Create(String name);
}
<fim_middle>"," 
 所有mc类型的接口
*/","
 * 代表一个MC变量"
"<fim_prefix>package top.alumopper.mcfpp.type;

/** 
 所有mc类型的接口
*/
public interface IMCType
{
	/**<fim_suffix>
	IMCType Copy(IMCType mctype);
	IMCType Create(String name);
}
<fim_middle>"," 
	 复制这个MC变量
	 
	 @return 
	*/"," 
	 复制一个mc类型
	*/"
"<fim_prefix>package com.zxl.gb;

import com.zxl.util.ByteUtil;
import lombok.Getter;

import java.util.Arrays;

/**
 * 实时数据的 信息类型标识
 */
@Getter
public enum RealTimeDataTypeEnum implements BaseEnum{


    /**<fim_suffix>
    HOLE_VEHICLE((byte) 1),

    /**
     * 驱动电机
     */
    DRIVER_MOTOR((byte) 2),

    /**
     * 燃料电池
     */
    FUEL_CELL((byte) 3),

    /**
     * 发动机数据
     */
    ENGINE_DATA((byte) 4),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION((byte) 5),


    /**
     * 极值数据
     */
    EXTREMUM_DATA((byte) 6),

    /**
     * 报警数据
     */
    WARNING_DATA((byte) 7),

    /**
     * todo: 其他的都是预留
     <fim_middle>","
     * 整车数据
     */","
     * 车辆状态
     */"
"<fim_prefix>package com.zxl.gb;

import com.zxl.util.ByteUtil;
import lombok.Getter;

import java.util.Arrays;

/**
 * 实时数据的 信息类型标识
 */
@Getter
public enum RealTimeDataTypeEnum implements BaseEnum{


    /**
     * 整车数据
     */
    HOLE_VEHICLE((byte) 1),

    /**
     * 驱动电机
     */
    DRIVER_MOTOR((byte) 2),

    /**<fim_suffix>
    FUEL_CELL((byte) 3),

    /**
     * 发动机数据
     */
    ENGINE_DATA((byte) 4),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION((byte) 5),


    /**
     * 极值数据
     */
    EXTREMUM_DATA((byte) 6),

    /**
     * 报警数据
     */
    WARNING_DATA((byte) 7),

    /**
     * todo: 其他的都是预留
     */


    ;


    /**
     * 类型
     */
    private final byte type;


    private RealTimeDataTypeEnum(byte type) <fim_middle>","
     * 燃料电池
     */","
     * 燃料电池数据
    "
"<fim_prefix>package com.zxl.gb;

import com.zxl.util.ByteUtil;
import lombok.Getter;

import java.util.Arrays;

/**
 * 实时数据的 信息类型标识
 */
@Getter
public enum RealTimeDataTypeEnum implements BaseEnum{


    /**
     * 整车数据
     */
    HOLE_VEHICLE((byte) 1),

    /**
     * 驱动电机
     */
    DRIVER_MOTOR((byte) 2),

    /**
     * 燃料电池
     */
    FUEL_CELL((byte) 3),

    /**<fim_suffix>
    ENGINE_DATA((byte) 4),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION((byte) 5),


    /**
     * 极值数据
     */
    EXTREMUM_DATA((byte) 6),

    /**
     * 报警数据
     */
    WARNING_DATA((byte) 7),

    /**
     * todo: 其他的都是预留
     */


    ;


    /**
     * 类型
     */
    private final byte type;


    private RealTimeDataTypeEnum(byte type) {
        this.type = type;
    }

    @Override
    pu<fim_middle>","
     * 发动机数据
     */","
     * 引擎数据
     */"
"<fim_prefix>m.zxl.gb;

import com.zxl.util.ByteUtil;
import lombok.Getter;

import java.util.Arrays;

/**
 * 实时数据的 信息类型标识
 */
@Getter
public enum RealTimeDataTypeEnum implements BaseEnum{


    /**
     * 整车数据
     */
    HOLE_VEHICLE((byte) 1),

    /**
     * 驱动电机
     */
    DRIVER_MOTOR((byte) 2),

    /**
     * 燃料电池
     */
    FUEL_CELL((byte) 3),

    /**
     * 发动机数据
     */
    ENGINE_DATA((byte) 4),

    /**<fim_suffix>
    VEHICLE_LOCATION((byte) 5),


    /**
     * 极值数据
     */
    EXTREMUM_DATA((byte) 6),

    /**
     * 报警数据
     */
    WARNING_DATA((byte) 7),

    /**
     * todo: 其他的都是预留
     */


    ;


    /**
     * 类型
     */
    private final byte type;


    private RealTimeDataTypeEnum(byte type) {
        this.type = type;
    }

    @Override
    public byte[] enum2Bytes() {
        return new byte[]{type}<fim_middle>","
     * 车辆位置数据
     */","
     * 车辆位置
     */"
"<fim_prefix>import java.util.Arrays;

/**
 * 实时数据的 信息类型标识
 */
@Getter
public enum RealTimeDataTypeEnum implements BaseEnum{


    /**
     * 整车数据
     */
    HOLE_VEHICLE((byte) 1),

    /**
     * 驱动电机
     */
    DRIVER_MOTOR((byte) 2),

    /**
     * 燃料电池
     */
    FUEL_CELL((byte) 3),

    /**
     * 发动机数据
     */
    ENGINE_DATA((byte) 4),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION((byte) 5),


    /**<fim_suffix>
    EXTREMUM_DATA((byte) 6),

    /**
     * 报警数据
     */
    WARNING_DATA((byte) 7),

    /**
     * todo: 其他的都是预留
     */


    ;


    /**
     * 类型
     */
    private final byte type;


    private RealTimeDataTypeEnum(byte type) {
        this.type = type;
    }

    @Override
    public byte[] enum2Bytes() {
        return new byte[]{type};
    }

    @Override
    public Object parseToEnum(byte[] by<fim_middle>","
     * 极值数据
     */","
     * 极值数据
     */"
"<fim_prefix>public enum RealTimeDataTypeEnum implements BaseEnum{


    /**
     * 整车数据
     */
    HOLE_VEHICLE((byte) 1),

    /**
     * 驱动电机
     */
    DRIVER_MOTOR((byte) 2),

    /**
     * 燃料电池
     */
    FUEL_CELL((byte) 3),

    /**
     * 发动机数据
     */
    ENGINE_DATA((byte) 4),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION((byte) 5),


    /**
     * 极值数据
     */
    EXTREMUM_DATA((byte) 6),

    /**<fim_suffix>
    WARNING_DATA((byte) 7),

    /**
     * todo: 其他的都是预留
     */


    ;


    /**
     * 类型
     */
    private final byte type;


    private RealTimeDataTypeEnum(byte type) {
        this.type = type;
    }

    @Override
    public byte[] enum2Bytes() {
        return new byte[]{type};
    }

    @Override
    public Object parseToEnum(byte[] bytes) throws Exception {
        ByteUtil.checkBytesLength(<fim_middle>","
     * 报警数据
     */","
     * 预警数据
     */"
"<fim_prefix>   /**
     * 整车数据
     */
    HOLE_VEHICLE((byte) 1),

    /**
     * 驱动电机
     */
    DRIVER_MOTOR((byte) 2),

    /**
     * 燃料电池
     */
    FUEL_CELL((byte) 3),

    /**
     * 发动机数据
     */
    ENGINE_DATA((byte) 4),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION((byte) 5),


    /**
     * 极值数据
     */
    EXTREMUM_DATA((byte) 6),

    /**
     * 报警数据
     */
    WARNING_DATA((byte) 7),

    /**<fim_suffix>


    ;


    /**
     * 类型
     */
    private final byte type;


    private RealTimeDataTypeEnum(byte type) {
        this.type = type;
    }

    @Override
    public byte[] enum2Bytes() {
        return new byte[]{type};
    }

    @Override
    public Object parseToEnum(byte[] bytes) throws Exception {
        ByteUtil.checkBytesLength(bytes,1);
        return  Arrays.stream(RealTimeDataTypeEnum.value<fim_middle>","
     * todo: 其他的都是预留
     */","
     * 车辆状态数据
     */"
"<fim_prefix>te) 1),

    /**
     * 驱动电机
     */
    DRIVER_MOTOR((byte) 2),

    /**
     * 燃料电池
     */
    FUEL_CELL((byte) 3),

    /**
     * 发动机数据
     */
    ENGINE_DATA((byte) 4),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION((byte) 5),


    /**
     * 极值数据
     */
    EXTREMUM_DATA((byte) 6),

    /**
     * 报警数据
     */
    WARNING_DATA((byte) 7),

    /**
     * todo: 其他的都是预留
     */


    ;


    /**<fim_suffix>
    private final byte type;


    private RealTimeDataTypeEnum(byte type) {
        this.type = type;
    }

    @Override
    public byte[] enum2Bytes() {
        return new byte[]{type};
    }

    @Override
    public Object parseToEnum(byte[] bytes) throws Exception {
        ByteUtil.checkBytesLength(bytes,1);
        return  Arrays.stream(RealTimeDataTypeEnum.values())
                .filter(e->e.ge<fim_middle>","
     * 类型
     */","
     * 字节数组
   "
"<fim_prefix>package com.zxl.gb;

import com.zxl.util.ByteUtil;
import lombok.Getter;

import java.util.Arrays;

/**<fim_suffix>
@Getter
public enum RealTimeDataTypeEnum implements BaseEnum{


    /**
     * 整车数据
     */
    HOLE_VEHICLE((byte) 1),

    /**
     * 驱动电机
     */
    DRIVER_MOTOR((byte) 2),

    /**
     * 燃料电池
     */
    FUEL_CELL((byte) 3),

    /**
     * 发动机数据
     */
    ENGINE_DATA((byte) 4),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION((byte) 5),


    /**
     * 极值数据
     */
    EXTREMUM_DATA((byte) 6),
<fim_middle>","
 * 实时数据的 信息类型标识
 */","
 * 实时数据类型
 *
 * @"
"<fim_prefix>package com.zxl.gb;

import com.zxl.util.ByteUtil;
import lombok.Getter;

import java.util.Arrays;

/**
 * 实时数据的 信息类型标识
 */
@Getter
public enum RealTimeDataTypeEnum implements BaseEnum{


    /**
     * 整车数据
     */
    HOLE_VEHICLE((byte) 1),

    /**<fim_suffix>
    DRIVER_MOTOR((byte) 2),

    /**
     * 燃料电池
     */
    FUEL_CELL((byte) 3),

    /**
     * 发动机数据
     */
    ENGINE_DATA((byte) 4),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION((byte) 5),


    /**
     * 极值数据
     */
    EXTREMUM_DATA((byte) 6),

    /**
     * 报警数据
     */
    WARNING_DATA((byte) 7),

    /**
     * todo: 其他的都是预留
     */


    ;


    /**
     * 类型
     */
    private final <fim_middle>","
     * 驱动电机
     */","
     * 车辆电池
    "
"<fim_prefix>package com.supermap.desktop.geometry.Abstract;

/**<fim_suffix>
public interface IFlatFeature extends IGeometryFeature {

}
<fim_middle>","
 * 表示平面特性
 * 
 * @author highsad
 *
 */","
 * @author heykb
 * @date:2017/4/25
 */"
"<fim_prefix>package com.rzg.zombieland.comunes.comunicacion;

import com.rzg.zombieland.comunes.misc.ZombielandException;

/**<fim_suffix>
public interface EnviaPeticiones {
    /**
     * Envía una petición.
     * @param peticion
     * @throws ZombielandException
     */
    public void enviarPeticion(Peticion<?, ?> peticion) throws ZombielandException;
}
<fim_middle>","
 * Interfaz para algo que envía peticiones.
 * @author nicolas
 *
 */","
 * Interfaz para enviar peticiones.
 * @author <NAME>
 */"
"<fim_prefix>package com.rzg.zombieland.comunes.comunicacion;

import com.rzg.zombieland.comunes.misc.ZombielandException;

/**
 * Interfaz para algo que envía peticiones.
 * @author nicolas
 *
 */
public interface EnviaPeticiones {
    /**<fim_suffix>
    public void enviarPeticion(Peticion<?, ?> peticion) throws ZombielandException;
}
<fim_middle>","
     * Envía una petición.
     * @param peticion
     * @throws ZombielandException
     */","
     * Envia una petición.
     * @param peticion
     * @throws ZombielandException
     */"
"<fim_prefix>/*
 * Sämtliche Werknutzungs-und Verwertungsrechte an dieser Software liegen beim Hauptverband der österreichischen
 * Sozialversicherungsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */

package at.chipkarte.client.base.soap.constants;



/**<fim_suffix>
public final class Vertragstyp {

  /**
   * Kurativer Vertrag.
   */
  public static final String KU = ""KU"";
  /**
   * Vorsorgeuntersuchungsvertrag.
   */
  public static final String GU = ""GU"";
  /**
   * Hausapothekenvertrag.
   */
  public static final String HAPO = ""HAPO"";
  /**
   * Rezepturvertrag.
   */
  public static final String REZ = ""REZ"";
  /**
   * Vorsorgeuntersuchung Al<fim_middle>","
 * Konstanten für den Vertragstyp.
 */","
 * Die Klasse Vertragstyp definiert die Vertragsarten"
"<fim_prefix>c static final String GU = ""GU"";
  /**
   * Hausapothekenvertrag.
   */
  public static final String HAPO = ""HAPO"";
  /**
   * Rezepturvertrag.
   */
  public static final String REZ = ""REZ"";
  /**
   * Vorsorgeuntersuchung Allgemeines Programm.
   */
  public static final String VUA = ""VU-A"";
  /**
   * Vorsorgeuntersuchung Koloskopie.
   */
  public static final String VUK = ""VU-K"";
  /**<fim_suffix>
  public static final String VUG = ""VU-G"";
  /**
   * Vorsorgeuntersuchung Mammographie.
   */
  public static final String VUM = ""VU-M"";

  private Vertragstyp() {
  }
  
}
<fim_middle>","
   * Vorsorgeuntersuchung Gynäkologie.
   */","
   * Vorsorgeuntersuchung Klinische Untersuchung.
  "
"<fim_prefix>/*
 * Sämtliche Werknutzungs-und Verwertungsrechte an dieser Software liegen beim Hauptverband der österreichischen
 * Sozialversicherungsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */

package at.chipkarte.client.base.soap.constants;



/**
 * Konstanten für den Vertragstyp.
 */
public final class Vertragstyp {

  /**<fim_suffix>
  public static final String KU = ""KU"";
  /**
   * Vorsorgeuntersuchungsvertrag.
   */
  public static final String GU = ""GU"";
  /**
   * Hausapothekenvertrag.
   */
  public static final String HAPO = ""HAPO"";
  /**
   * Rezepturvertrag.
   */
  public static final String REZ = ""REZ"";
  /**
   * Vorsorgeuntersuchung Allgemeines Programm.
   */
  public static final String VUA = ""VU-A"";
  /<fim_middle>","
   * Kurativer Vertrag.
   */","
   * Krankenversicherungsvertrag.
"
"<fim_prefix>
 */

package at.chipkarte.client.base.soap.constants;



/**
 * Konstanten für den Vertragstyp.
 */
public final class Vertragstyp {

  /**
   * Kurativer Vertrag.
   */
  public static final String KU = ""KU"";
  /**
   * Vorsorgeuntersuchungsvertrag.
   */
  public static final String GU = ""GU"";
  /**
   * Hausapothekenvertrag.
   */
  public static final String HAPO = ""HAPO"";
  /**<fim_suffix>
  public static final String REZ = ""REZ"";
  /**
   * Vorsorgeuntersuchung Allgemeines Programm.
   */
  public static final String VUA = ""VU-A"";
  /**
   * Vorsorgeuntersuchung Koloskopie.
   */
  public static final String VUK = ""VU-K"";
  /**
   * Vorsorgeuntersuchung Gynäkologie.
   */
  public static final String VUG = ""VU-G"";
  /**
   * Vorsorgeuntersuchung Mammographie.
   */
  public <fim_middle>","
   * Rezepturvertrag.
   */","
   * Rehabilitationsvertrag."
"<fim_prefix>ten für den Vertragstyp.
 */
public final class Vertragstyp {

  /**
   * Kurativer Vertrag.
   */
  public static final String KU = ""KU"";
  /**
   * Vorsorgeuntersuchungsvertrag.
   */
  public static final String GU = ""GU"";
  /**
   * Hausapothekenvertrag.
   */
  public static final String HAPO = ""HAPO"";
  /**
   * Rezepturvertrag.
   */
  public static final String REZ = ""REZ"";
  /**<fim_suffix>
  public static final String VUA = ""VU-A"";
  /**
   * Vorsorgeuntersuchung Koloskopie.
   */
  public static final String VUK = ""VU-K"";
  /**
   * Vorsorgeuntersuchung Gynäkologie.
   */
  public static final String VUG = ""VU-G"";
  /**
   * Vorsorgeuntersuchung Mammographie.
   */
  public static final String VUM = ""VU-M"";

  private Vertragstyp() {
  }
  
}
<fim_middle>","
   * Vorsorgeuntersuchung Allgemeines Programm.
   */","
   * Vorsorgeuntersuchung.
   */"
"<fim_prefix> public static final String KU = ""KU"";
  /**
   * Vorsorgeuntersuchungsvertrag.
   */
  public static final String GU = ""GU"";
  /**
   * Hausapothekenvertrag.
   */
  public static final String HAPO = ""HAPO"";
  /**
   * Rezepturvertrag.
   */
  public static final String REZ = ""REZ"";
  /**
   * Vorsorgeuntersuchung Allgemeines Programm.
   */
  public static final String VUA = ""VU-A"";
  /**<fim_suffix>
  public static final String VUK = ""VU-K"";
  /**
   * Vorsorgeuntersuchung Gynäkologie.
   */
  public static final String VUG = ""VU-G"";
  /**
   * Vorsorgeuntersuchung Mammographie.
   */
  public static final String VUM = ""VU-M"";

  private Vertragstyp() {
  }
  
}
<fim_middle>","
   * Vorsorgeuntersuchung Koloskopie.
   */","
   * Vorsorgeuntersuchung Krankenpflege.
  "
"<fim_prefix>/*<fim_suffix>

package at.chipkarte.client.base.soap.constants;



/**
 * Konstanten für den Vertragstyp.
 */
public final class Vertragstyp {

  /**
   * Kurativer Vertrag.
   */
  public static final String KU = ""KU"";
  /**
   * Vorsorgeuntersuchungsvertrag.
   */
  public static final String GU = ""GU"";
  /**
   * Hausapothekenvertrag.
   */
  public static final String HAPO = ""HAPO"";
  /**
   *<fim_middle>","
 * Sämtliche Werknutzungs-und Verwertungsrechte an dieser Software liegen beim Hauptverband der österreichischen
 * Sozialversicherungsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */","*
 * Konstanten für den Vertragstyp.
 */"
"<fim_prefix>gsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */

package at.chipkarte.client.base.soap.constants;



/**
 * Konstanten für den Vertragstyp.
 */
public final class Vertragstyp {

  /**
   * Kurativer Vertrag.
   */
  public static final String KU = ""KU"";
  /**
   * Vorsorgeuntersuchungsvertrag.
   */
  public static final String GU = ""GU"";
  /**<fim_suffix>
  public static final String HAPO = ""HAPO"";
  /**
   * Rezepturvertrag.
   */
  public static final String REZ = ""REZ"";
  /**
   * Vorsorgeuntersuchung Allgemeines Programm.
   */
  public static final String VUA = ""VU-A"";
  /**
   * Vorsorgeuntersuchung Koloskopie.
   */
  public static final String VUK = ""VU-K"";
  /**
   * Vorsorgeuntersuchung Gynäkologie.
   */
  public static final Stri<fim_middle>","
   * Hausapothekenvertrag.
   */","
   * Hausarzt-Programm.
   */"
"<fim_prefix>chte an dieser Software liegen beim Hauptverband der österreichischen
 * Sozialversicherungsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */

package at.chipkarte.client.base.soap.constants;



/**
 * Konstanten für den Vertragstyp.
 */
public final class Vertragstyp {

  /**
   * Kurativer Vertrag.
   */
  public static final String KU = ""KU"";
  /**<fim_suffix>
  public static final String GU = ""GU"";
  /**
   * Hausapothekenvertrag.
   */
  public static final String HAPO = ""HAPO"";
  /**
   * Rezepturvertrag.
   */
  public static final String REZ = ""REZ"";
  /**
   * Vorsorgeuntersuchung Allgemeines Programm.
   */
  public static final String VUA = ""VU-A"";
  /**
   * Vorsorgeuntersuchung Koloskopie.
   */
  public static final String VUK = ""VU-K""<fim_middle>","
   * Vorsorgeuntersuchungsvertrag.
   */","
   * Gesetzlicher Vertrag.
   */"
"<fim_prefix>String HAPO = ""HAPO"";
  /**
   * Rezepturvertrag.
   */
  public static final String REZ = ""REZ"";
  /**
   * Vorsorgeuntersuchung Allgemeines Programm.
   */
  public static final String VUA = ""VU-A"";
  /**
   * Vorsorgeuntersuchung Koloskopie.
   */
  public static final String VUK = ""VU-K"";
  /**
   * Vorsorgeuntersuchung Gynäkologie.
   */
  public static final String VUG = ""VU-G"";
  /**<fim_suffix>
  public static final String VUM = ""VU-M"";

  private Vertragstyp() {
  }
  
}
<fim_middle>","
   * Vorsorgeuntersuchung Mammographie.
   */","
   * Vorsorgeuntersuchung Medizinische Dokumentation.
   */"
"<fim_prefix>/**<fim_suffix>

package br.ufpe.cin.amadeus.amadeus_web.dao.hibernate.content_managment;

import br.ufpe.cin.amadeus.amadeus_web.dao.content_managment.LearningObjectDAO;
import br.ufpe.cin.amadeus.amadeus_web.dao.hibernate.GenericHibernateDAO;
import br.ufpe.cin.amadeus.amadeus_web.domain.content_management.LearningObject;

public class LearningObjectHibernateDAO extends GenericHibernateDAO<LearningObject, Integer<fim_middle>","
Copyright 2008, 2009 UFPE - Universidade Federal de Pernambuco
 
Este arquivo é parte do programa Amadeus Sistema de Gestão de Aprendizagem, ou simplesmente Amadeus LMS
 
O Amadeus LMS é um software livre; você pode redistribui-lo e/ou modifica-lo dentro dos termos da Licença Pública Geral GNU como
publicada pela Fundação do Software Livre (FSF); na versão 2 da Licença.
 
Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU para maiores detalhes.
 
Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título ""LICENCA.txt"", junto com este programa, se não, escreva para a Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA.
**/","
 * 
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>"
"<fim_prefix>package com.easyink.wecom.domain.dto.form;

import com.easyink.common.enums.ResultTip;
import com.easyink.common.exception.CustomException;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

/**<fim_suffix>
@Data
@NoArgsConstructor
@AllArgsConstructor
public class FormUpdateRequestDTO extends FormAddRequestDTO {

    /**
     * 表单id
     */
    @NotNull(message = ""请选择需要修改的表单"")
    private Long id;

    @Override
    public void valid() {
        super.valid();
        if (this.id == null) {
            throw new CustomException(ResultTip.TIP_FORM_ID_IS_NOT_NULL);
        }
    }

}
<fim_middle>","
 * 编辑表单请求DTO
 *
 * @author tigger
 * 2023/1/10 9:37
 **/","
 * 表单修改请求
 *
 * @author <EMAIL>
 * @date 2020/11/11
 **/"
"<fim_prefix>nums.ResultTip;
import com.easyink.common.exception.CustomException;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

/**
 * 编辑表单请求DTO
 *
 * @author tigger
 * 2023/1/10 9:37
 **/
@Data
@NoArgsConstructor
@AllArgsConstructor
public class FormUpdateRequestDTO extends FormAddRequestDTO {

    /**<fim_suffix>
    @NotNull(message = ""请选择需要修改的表单"")
    private Long id;

    @Override
    public void valid() {
        super.valid();
        if (this.id == null) {
            throw new CustomException(ResultTip.TIP_FORM_ID_IS_NOT_NULL);
        }
    }

}
<fim_middle>","
     * 表单id
     */","
     * 表单id
     */"
"<fim_prefix>package com.xm.cpsmall.module.mall.serialize.entity;

import lombok.Data;

import javax.persistence.*;
import java.io.Serializable;

@Data
@Table(name = ""sm_config"")
public class SmConfigEntity implements Serializable{
	@Id
	@Column(name = ""Id"")
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;

	/**<fim_suffix>
	private String name;

	/**
	 * 值
	 */
	private String val;

	/**
	 * 简介
	 */
	private String des;

	private java.util.Date createTime;
}
<fim_middle>","
	 * 键
	 */","
	 * 名称
	 */"
"<fim_prefix>package com.xm.cpsmall.module.mall.serialize.entity;

import lombok.Data;

import javax.persistence.*;
import java.io.Serializable;

@Data
@Table(name = ""sm_config"")
public class SmConfigEntity implements Serializable{
	@Id
	@Column(name = ""Id"")
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;

	/**
	 * 键
	 */
	private String name;

	/**<fim_suffix>
	private String val;

	/**
	 * 简介
	 */
	private String des;

	private java.util.Date createTime;
}
<fim_middle>","
	 * 值
	 */","
	 * 值"
"<fim_prefix>package com.xm.cpsmall.module.mall.serialize.entity;

import lombok.Data;

import javax.persistence.*;
import java.io.Serializable;

@Data
@Table(name = ""sm_config"")
public class SmConfigEntity implements Serializable{
	@Id
	@Column(name = ""Id"")
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;

	/**
	 * 键
	 */
	private String name;

	/**
	 * 值
	 */
	private String val;

	/**<fim_suffix>
	private String des;

	private java.util.Date createTime;
}
<fim_middle>","
	 * 简介
	 */","
	 * 描述
	 */"
"<fim_prefix>package com.ozguryazilim.telve.query.columns;

import java.util.Date;
import javax.persistence.metamodel.SingularAttribute;

/**<fim_suffix>
public class DateColumn<E> extends Column<E>{

    public DateColumn(SingularAttribute<? super E, ? extends Date> attribute, String labelKey) {
        super(attribute, labelKey);
    }

    @Override
    public String getTemplate() {
        return ""dateColumn"";
    }
    
}
<fim_middle>","
 * Tarih tipi alanlar için kolon oluşturur.
 * 
 * @author Hakan Uygun
 * @param <E> işlenecek olan Entity sınıfı
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package org.springframework.lock.enumeration;<fim_middle>","
 * 这是关于枚举类型的包.
 * 写得很清楚，直接看代码就好了.
 * @version 1.2.0.0
 * @author 宗祥瑞
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.iwuyc.tools.commons.util.xml;

import com.google.gson.JsonElement;
import com.iwuyc.tools.commons.util.json.GsonUtil;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Node;

/**
 * 将xml解析成json的工具类
 *
 * @author Neil
 */
public class XmlAndJsonUtil {
    private final static Xml2JsonParser xmlToJsonParser = new Xml2JsonParser();

    /**<fim_suffix>
    public static String xml2JsonStr(String xml) {
        try {
            Document document = DocumentHelper.parseText(xml);
            return xmlToJsonParser.parser(document);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return """";
    }

    /**
     * 将xml转换为 {@link JsonElement} 对象
     *
     * @param xml 待转换的xml字符串
     * @return 转换后的 {@link JsonElement} 实例
   <fim_middle>","
     * 将xml转换为json字符串
     *
     * @param xml 待转换的xml字符串
     * @return 转换后的json字符串
     */","
     * 将xml转换为json字符串
     *
     * @param xml 待转换的xml字符串
     * @return 转换后的json字符串
     */"
"<fim_prefix> Xml2JsonParser();

    /**
     * 将xml转换为json字符串
     *
     * @param xml 待转换的xml字符串
     * @return 转换后的json字符串
     */
    public static String xml2JsonStr(String xml) {
        try {
            Document document = DocumentHelper.parseText(xml);
            return xmlToJsonParser.parser(document);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return """";
    }

    /**<fim_suffix>
    public static JsonElement xml2JsonObj(String xml) {
        String json = xml2JsonStr(xml);
        return GsonUtil.toObject(json);
    }

    public static Node json2XmlObj(String json) {
        return json2XmlObj(GsonUtil.toObject(json));
    }

    private static Node json2XmlObj(JsonElement json) {
        Json2XmlParser parser = new Json2XmlParser();

        Node result = parser.parser(json);
   <fim_middle>","
     * 将xml转换为 {@link JsonElement} 对象
     *
     * @param xml 待转换的xml字符串
     * @return 转换后的 {@link JsonElement} 实例
     */","
     * 将xml转换为json对象
     *
     * @param xml 待转换的xml字符串
     * @return 转换后的json对象
     */"
"<fim_prefix>package org.dromara.omind.baseplat.api.service.notify;

import org.dromara.omind.baseplat.api.domain.entity.SysChargeOrder;

/**<fim_suffix>
public interface RemoteNotifyStopChargingResultService {


    /**
     *
     * @param sysChargeOrder
     * @param isSuccess
     * @param reason 0无 1此设备不存在 2此设备离线 3设备已停止充电 4-99自定义
     */
    void send(SysChargeOrder sysChargeOrder, boolean isSuccess, int reason);

}
<fim_middle>","
 * 远程停机命令回复
 */","
 * 远程通知停止充电结果服务"
"<fim_prefix>package org.dromara.omind.baseplat.api.service.notify;

import org.dromara.omind.baseplat.api.domain.entity.SysChargeOrder;

/**
 * 远程停机命令回复
 */
public interface RemoteNotifyStopChargingResultService {


    /**<fim_suffix>
    void send(SysChargeOrder sysChargeOrder, boolean isSuccess, int reason);

}
<fim_middle>","
     *
     * @param sysChargeOrder
     * @param isSuccess
     * @param reason 0无 1此设备不存在 2此设备离线 3设备已停止充电 4-99自定义
     */","
     * 发送
     *
     * @param sysChargeOrder 订单
     * @param isSuccess      是否成功
     * @param reason         原因
"
"<fim_prefix>package cn.moonmc.limboAdd.works.menu;
/**<fim_suffix>
public interface Inventory {
}
<fim_middle>","
 *  代表一个库存
 * @author jja8
 * */","
 * @author moonmc
 */"
"<fim_prefix>package io.github.kloping.qqbot.api.event;

/**<fim_suffix>
public interface ReactionEvent extends Event {

}
<fim_middle>","
 * 表情表态事件
 *
 * @author github.kloping
 */","
 * @author KLoping
 * @link https://github.com/kloping"
"<fim_prefix>/**<fim_suffix>
package javasnack.ojcp.se8gold.chapter10;
<fim_middle>","
 * マルチスレッドに関するchapterになり、テストコードの分量も多くなるためパッケージに分割した。
 * 
 * ExecutorService, CyclicBarrier については Java SE 8 Gold 教科書のサンプルコード以前に
 * 以下のテストコードを作成済みだったので、そちらを参照。
 * (教科書の練習問題などで別途追加のデモコードについてはこちらに収録)
 * 
 * {@link javasnack.concurrent.TestThreadExecutorBasics}
 * {@link javasnack.concurrent.TestExecutorFutureBasics}
 * {@link javasnack.concurrent.TestScheduledExecutorServiceDemo}
 * {@link javasnack.concurrent.TestCyclicBarrierDemo}
 */","
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package br.gov.camara.edemocracia.portlets.guiadiscussao;

import com.liferay.portal.kernel.exception.PortalException;

public class CantFaseMoveDownException extends PortalException {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4838015552764092560L;

	public CantFaseMoveDownException() {
		super();
	}
	
	public CantFaseMoveDownException(String msg, Throwable cause) {
		su<fim_middle>","
 * Copyright (c) 2009-2014 Câmara dos Deputados. Todos os direitos reservados.
 *
 * e-Democracia é um software livre; você pode redistribuí-lo e/ou modificá-lo dentro
 * dos termos da Licença Pública Geral Menor GNU como publicada pela Fundação do 
 * Software Livre (FSF); na versão 2.1 da Licença, ou (na sua opinião) qualquer versão.
 *
 * Este programa é distribuído na esperança de que possa ser  útil, mas SEM NENHUMA GARANTIA;
 * sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR.
 * Veja a Licença Pública Geral Menor GNU para maiores detalhes. 
 */","
 * 
 */"
"<fim_prefix>package cn.foxtech.device.protocol.v1.dahua.fire.core.entity.infobj.object;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class AnalogObject {
    /**<fim_suffix>
    private int type = 0;
    /**
     * 模拟量数值（2 字节）
     */
    private int value = 0;
}
<fim_middle>","
     * 模拟量类型（1 字节）
     */","
     * 模拟量类型（1 字节）
     */"
"<fim_prefix>package cn.foxtech.device.protocol.v1.dahua.fire.core.entity.infobj.object;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class AnalogObject {
    /**
     * 模拟量类型（1 字节）
     */
    private int type = 0;
    /**<fim_suffix>
    private int value = 0;
}
<fim_middle>","
     * 模拟量数值（2 字节）
     */","
     * 模拟量值（2 字节）
     */"
"<fim_prefix>package fr.gouv.beta.fabnum.kelrisks.metier.referentiel.interfaces;

import fr.gouv.beta.fabnum.commun.metier.IAbstractCRUDService;
import fr.gouv.beta.fabnum.kelrisks.transverse.referentiel.entities.CategoriePPR;

/**<fim_suffix>
public interface ICategoriePprService extends IAbstractCRUDService<CategoriePPR> {
}
  <fim_middle>","
 * Interface du Service qui gère les entités CategoriePPR
 */","
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>package cc.gzvtc.photographer.dao;

import cc.gzvtc.common.dao.BaseMapper;
import cc.gzvtc.model.TPhotographerLevel;

/**<fim_suffix>
public interface PhotographerLevelDao extends BaseMapper<TPhotographerLevel>{

}<fim_middle>","
 * 
 * @author hzc 2017年2月12日
 *
 */","
 * Created by DELL(mxd) on 2021/1/18 15:"
"<fim_prefix>package br.gov.mj.sislegis.app.parser.senado.xstream;

/*<fim_suffix>
class Autor {
	String Nome;
	String Tratamento;
	String Foto;

	public String getDescricao() {
		String desc = """";
		if (Tratamento != null && Tratamento.length() > 0) {
			desc += Tratamento + "" "";
		}
		if (Nome != null && Nome.length() > 0) {
			desc += Nome;
		}
		return desc;
	}
}<fim_middle>","
 * wrapper para o nÃ³ /Autoria/Autor
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>package ltd.kumo.plutomc.framework.bukkit.hologram;

import ltd.kumo.plutomc.framework.bukkit.player.BukkitPlayer;
import org.bukkit.inventory.ItemStack;
import org.jetbrains.annotations.NotNull;

import java.util.function.Function;

/**<fim_suffix>
public interface ItemHologram extends Hologram {

    @NotNull
    Function<BukkitPlayer, ItemStack> getItem();

    void setItem(@NotNull Function<BukkitPlayer, ItemStack> item);

}
<fim_middle>","
 * 一种物品显示，以掉落物的形式展示物品
 */","
 * 物品悬浮物
 *
 * @author kumo
"
"<fim_prefix>package a未分类;

import java.util.ArrayList;
import java.util.List;
/**<fim_suffix>

public class 按值传递和按引用传递的应用 {
	public static void main(String[] args) {
		List<String> list=new ArrayList<String>();
		String abc=new String(""123"");
		list.add(abc);
		String kb=abc;//kb->""123""  abc->""123""  这种赋值 相当于给地址123多出一种引用
		
		abc=tihua(abc);//必须添加返回值 然后赋给abc这样才能达到修改abc的目的！！！
		System.out.println(abc);
		
		
		tihua(list);
		for (String string : list) {
			System.out.println(""ri___""+str<fim_middle>","
 * 值传递仅仅传递的是值引用传递,传递的是内存地址(即原来那个引用的地址)
 * 
 * 按引用传递  传递的是新的引用
 * @author Zone
 *
 */","
 *                                           "
"<fim_prefix>		tihua(list);
		for (String string : list) {
			System.out.println(""ri___""+string);
		}
		String kan=""123"";
		Ceshi ceshi = new Ceshi();
		ceshi.add(kan);
		ceshi.remove(kan);
		System.out.println(""kan:""+kan);
	}
	private static void tihua(List<String> list1) {
		for (String item : list1) {
			//item=null;//是错的 因为这也是多出来的引用 而不是直接更改 地址 
			list1.set(list1.indexOf(item), null);
		}
		
	}
	/**<fim_suffix>
	private static String tihua(String abc) {
		abc=null;
		return abc;
	}
	static class Ceshi{
		List<String> list=new ArrayList<String>();
		public void add(String e) {
			list.add(e);
		}
		public void  remove(String e){
			list.set(list.indexOf(e), null);
		}
	} 
}
<fim_middle>","
	 * 这种方法调用  abc是另一个变量 即另一个引用 所以改变这个abc不会改变 原来的abc
	 * 看起来是一个引用 其实不然 因为{} 不是一个作用区间所以名字一样也无所谓
	 * @param abc
	 * @return
	 */","
	 * tihua
	 * @param abc
	 * @return
	 */"
"<fim_prefix>package org.crue.hercules.sgi.csp.repository.specification;

import org.crue.hercules.sgi.csp.model.TipoAmbitoGeografico;
import org.crue.hercules.sgi.framework.data.jpa.domain.Activable_;
import org.springframework.data.jpa.domain.Specification;

public class TipoAmbitoGeograficoSpecifications {

  /**<fim_suffix>
  public static Specification<TipoAmbitoGeografico> activos() {
    return (root, query, cb) -> {
      return cb.equal(root.get(Activable_.activo), Boolean.TRUE);
    };
  }

}<fim_middle>","
   * {@link TipoAmbitoGeografico} activos.
   * 
   * @return specification para obtener los {@link TipoAmbitoGeografico} activos.
   */","
   * Devuelve una especificación que filtra los tipos de ambito geográfico que no están activos.
   * @return
   */"
"<fim_prefix>/*<fim_suffix>

package fr.arpinum.cocoritest.interne.exception;

import fr.arpinum.cocoritest.exception.Action;
import fr.arpinum.cocoritest.exception.CapteurException;

public class CapteurExceptionDeBase implements CapteurException {

	@Override
	public Exception capte(Action action) {
		try {
			action.exécute();
		} catch (Exception e) {
			return e;
		}
		return null;
	}
}
<fim_middle>","
 * Copyright (C) 2013, Arpinum
 *
 * Cocoritest est un logiciel libre ; vous pouvez le redistribuer ou le modifier suivant les termes de la GNU Lesser
 * General Public License telle que publiée par la Free Software Foundation ; soit la version 3 de la licence,
 * soit (à votre gré) toute version ultérieure.
 *
 * Cocoritest est distribué dans l'espoir qu'il sera utile, mais SANS AUCUNE GARANTIE ; pas même la garantie
 * implicite de COMMERCIABILISABILITÉ ni d'ADÉQUATION à UN OBJECTIF PARTICULIER. Consultez la GNU Lesser General
 * Public License pour plus de détails.
 *
 * Vous devez avoir reçu une copie de la GNU Lesser General Public License en même temps que Cocoritest ; si ce n'est
  * pas le cas, consultez http://www.gnu.org/licenses.
 */","*
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.copy.jianshuapp.common.statusbar;

import android.annotation.TargetApi;
import android.graphics.Color;
import android.os.Build;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;

import com.copy.jianshuapp.common.LogUtils;
import com.copy.jianshuapp.common.VersionUtils;

/**<fim_suffix>
class StatusBarTransparentImpl {
    static final StatusBarCompat.StatusBarTransparent IMPL;

    static {
        if (VersionUtils.isSupport(VersionUtils.LOLLIPOP)) {
            IMPL = new LollipopTransparentImpl();
        } else if (VersionUtils.isSupport(VersionUtils.KITKAT)) {
            IMPL = new KitkatTransparentImpl();
        } else {
            IMPL = window -> LogUtils.d(""该系统不支持 StatusBarTran<fim_middle>","
 * 透明状态栏-兼容处理
 * @version imkarl 2017-04
 */","
 * Created by xingzhijian on 2017/3/15.
 */"
"<fim_prefix>package moe.ahao.process.engine.core.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**<fim_suffix>
@Getter
@AllArgsConstructor
public enum InvokeMethod {
    SYNC(""同步""),
    ASYNC(""异步""),
    ;
    private final String name;
}
<fim_middle>","
 * 流程之间的调用方式
 */","
 * 调用方式
 *
 * @"
"<fim_prefix>package com.runsidekick.agent.core.instance;

/**<fim_suffix>
public interface InstanceLoader<T> {

    T load();

}
<fim_middle>","
 * @author serkan
 */","
 * @author <NAME>
 */"
"<fim_prefix>package org.crue.hercules.sgi.pii.repository.custom;

import java.time.Instant;

import org.crue.hercules.sgi.pii.model.Invencion;
import org.crue.hercules.sgi.pii.model.PeriodoTitularidadTitular;

public interface CustomPeriodoTitularidadTitularRepository {

  /**<fim_suffix>
  PeriodoTitularidadTitular findPeriodoTitularidadTitularesInFechaBaremacion(Long invencionId,
      Instant fechaBaremacion, String universidadId);

}
<fim_middle>","
   * Devuelve una lista de {@link PeriodoTitularidadTitular} que pertenecen a la
   * universidad a fecha 31 de diciembre de una determinada {@link Invencion}
   * 
   * @param invencionId     id de {@link Invencion}
   * @param fechaBaremacion fecha de baremaci√≥n a 31 de diciembre
   * @param universidadId   id universidad
   * 
   * @return Lista de {@link PeriodoTitularidadTitular}
   */","
   * Busca un periodo titularidad titular por invencion y fecha baremacion.
   * 
   * @param invencionId
   * @param fechaBaremacion
   * @param universidadId
   * @return
   */"
"<fim_prefix>package org.javahispano.javacup.render;

import org.javahispano.javacup.model.util.Constants;
import org.javahispano.javacup.model.util.Position;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

/**<fim_suffix>
public final class PintaPublicidad {

	private Image h, v;
	private int wm, hm;

        /**Instancia la pintura de la publicidad horizontal y vertical*/
	public PintaPublicidad(String h, String v, int wm, int hm) throws SlickException {
		this.wm = wm;
		this.hm = hm;
		this.v = new Image(v);
		this.h = new Image(h);
	}
	private Position p0 = Constants.esqSupIzqCampo.movePosition(0, -2);
	private Position <fim_middle>","
Esta clase dibuja la publicidad estatica, uso interno
 */","
 * Clase que representa la pintura de la publicidad
 * @author <"
"<fim_prefix>package org.javahispano.javacup.render;

import org.javahispano.javacup.model.util.Constants;
import org.javahispano.javacup.model.util.Position;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.SlickException;

/**
Esta clase dibuja la publicidad estatica, uso interno
 */
public final class PintaPublicidad {

	private Image h, v;
	private int wm, hm;

        /**<fim_suffix>
	public PintaPublicidad(String h, String v, int wm, int hm) throws SlickException {
		this.wm = wm;
		this.hm = hm;
		this.v = new Image(v);
		this.h = new Image(h);
	}
	private Position p0 = Constants.esqSupIzqCampo.movePosition(0, -2);
	private Position p1 = Constants.esqSupIzqCampo.movePosition(0, Constants.LARGO_CAMPO);
	private Position p2 = Constants.esqSupIzqCampo.movePosition(Constants.ANCHO_CAMPO, <fim_middle>",Instancia la pintura de la publicidad horizontal y vertical*/,"
         * Dibuja"
"<fim_prefix>movePosition(0, -2);
	private Position p1 = Constants.esqSupIzqCampo.movePosition(0, Constants.LARGO_CAMPO);
	private Position p2 = Constants.esqSupIzqCampo.movePosition(Constants.ANCHO_CAMPO, 0);
	private Position p3 = Constants.esqSupIzqCampo.movePosition(-2, 0);
	private Position sizeh = new Position(Constants.ANCHO_CAMPO, 2);
	private Position sizev = new Position(2, Constants.LARGO_CAMPO);

        /**<fim_suffix>
	public void pintaPublicidad(Graphics g, Position p, double escala) {
		int[] inf = Transforma.transform(sizeh, escala);
		int[] pos = Transforma.transform(p0, p, wm, hm, escala);
		g.drawImage(h.getScaledCopy(inf[0], inf[1]), pos[0], pos[1]);

		pos = Transforma.transform(p1, p, wm, hm, escala);
		Image img = h.getScaledCopy(inf[0], inf[1]);
		img.rotate(180);
		g.drawImage(img, pos[0], pos[1]);

		img = v<fim_middle>",Pinta la publicidad*/,"
     "
"<fim_prefix>P, PhotoSize.Q, PhotoSize.R})
@Retention(RetentionPolicy.SOURCE)
public @interface PhotoSize {
    /**
     * пропорциональная копия изображения с максимальной шириной 75px
     */
    int S = 1;

    /**
     * пропорциональная копия изображения с максимальной шириной 130px
     */
    int M = 2;

    /**
     * пропорциональная копия изображения с максимальной шириной 604px
     */
    int X = 3;

    /**<fim_suffix>
    int Y = 4;

    /**
     * пропорциональная копия изображения с максимальным размером 1280x1024
     */
    int Z = 5;

    /**
     * пропорциональная копия изображения с максимальным размером 2560x2048px
     */
    int W = 6;

    /**
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 130px.
     * Если соотношен<fim_middle>","
     * пропорциональная копия изображения с максимальной стороной 807px
     */","
     * пропорциональная копия изображения с максимальной шириной 804px
    "
"<fim_prefix>риной 200px и соотношением сторон 3:2
     */
    int P = 8;

    /**
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 320px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева и
     * справа изображения с максимальной шириной 320px и соотношением сторон 3:2
     */
    int Q = 9;

    /**<fim_suffix>
    int R = 10;
}
<fim_middle>","
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 510px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева
     * и справа изображения с максимальной шириной 510px и соотношением сторон 3:2
     */","
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 480px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева и
     * справа изображения с максимальной шириной 480px и соотношением сторон 3:2
     */"
"<fim_prefix>tion;
import java.lang.annotation.RetentionPolicy;

import androidx.annotation.IntDef;

@IntDef({PhotoSize.S, PhotoSize.M, PhotoSize.X, PhotoSize.Y,
        PhotoSize.Z, PhotoSize.W, PhotoSize.O, PhotoSize.P, PhotoSize.Q, PhotoSize.R})
@Retention(RetentionPolicy.SOURCE)
public @interface PhotoSize {
    /**
     * пропорциональная копия изображения с максимальной шириной 75px
     */
    int S = 1;

    /**<fim_suffix>
    int M = 2;

    /**
     * пропорциональная копия изображения с максимальной шириной 604px
     */
    int X = 3;

    /**
     * пропорциональная копия изображения с максимальной стороной 807px
     */
    int Y = 4;

    /**
     * пропорциональная копия изображения с максимальным размером 1280x1024
     */
    int Z = 5;

    /**
     * пропорциональная копия изображения с максимальным размером 2560x<fim_middle>","
     * пропорциональная копия изображения с максимальной шириной 130px
     */","
     * пропорциональная копия изображения с максимальной шириной 130px
     */"
"<fim_prefix>ize.S, PhotoSize.M, PhotoSize.X, PhotoSize.Y,
        PhotoSize.Z, PhotoSize.W, PhotoSize.O, PhotoSize.P, PhotoSize.Q, PhotoSize.R})
@Retention(RetentionPolicy.SOURCE)
public @interface PhotoSize {
    /**
     * пропорциональная копия изображения с максимальной шириной 75px
     */
    int S = 1;

    /**
     * пропорциональная копия изображения с максимальной шириной 130px
     */
    int M = 2;

    /**<fim_suffix>
    int X = 3;

    /**
     * пропорциональная копия изображения с максимальной стороной 807px
     */
    int Y = 4;

    /**
     * пропорциональная копия изображения с максимальным размером 1280x1024
     */
    int Z = 5;

    /**
     * пропорциональная копия изображения с максимальным размером 2560x2048px
     */
    int W = 6;

    /**
     * если соотношение ""ширина/высота"" исходного изображения ме<fim_middle>","
     * пропорциональная копия изображения с максимальной шириной 604px
     */","
     * пропорциональная копия изображения с максимальной шириной 604px
     */"
"<fim_prefix>пропорциональная копия изображения с максимальной шириной 130px
     */
    int M = 2;

    /**
     * пропорциональная копия изображения с максимальной шириной 604px
     */
    int X = 3;

    /**
     * пропорциональная копия изображения с максимальной стороной 807px
     */
    int Y = 4;

    /**
     * пропорциональная копия изображения с максимальным размером 1280x1024
     */
    int Z = 5;

    /**<fim_suffix>
    int W = 6;

    /**
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 130px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева изображения
     * с максимальной шириной 130px и соотношением сторон 3:2
     */
    int O = 7;

    /**
     * если соотношение ""ширина/высота"" исходного изоб<fim_middle>","
     * пропорциональная копия изображения с максимальным размером 2560x2048px
     */","
     * пропорциональная копия изображения с максимальным размером 1280x1024"
"<fim_prefix>риной 130px и соотношением сторон 3:2
     */
    int O = 7;

    /**
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 200px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева и
     * справа изображения с максимальной шириной 200px и соотношением сторон 3:2
     */
    int P = 8;

    /**<fim_suffix>
    int Q = 9;

    /**
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 510px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева
     * и справа изображения с максимальной шириной 510px и соотношением сторон 3:2
     */
    int R = 10;
}
<fim_middle>","
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 320px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева и
     * справа изображения с максимальной шириной 320px и соотношением сторон 3:2
     */","
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 300px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева
     * и справа изображения с максимальной шириной 300px и соотношением сторон 3:2
     */"
"<fim_prefix>иональная копия изображения с максимальной шириной 604px
     */
    int X = 3;

    /**
     * пропорциональная копия изображения с максимальной стороной 807px
     */
    int Y = 4;

    /**
     * пропорциональная копия изображения с максимальным размером 1280x1024
     */
    int Z = 5;

    /**
     * пропорциональная копия изображения с максимальным размером 2560x2048px
     */
    int W = 6;

    /**<fim_suffix>
    int O = 7;

    /**
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 200px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева и
     * справа изображения с максимальной шириной 200px и соотношением сторон 3:2
     */
    int P = 8;

    /**
     * если соотношение ""ширина/высота"" исход<fim_middle>","
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 130px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева изображения
     * с максимальной шириной 130px и соотношением сторон 3:2
     */","
     * пропорциональная копия изображения с максимальным размером 3840x2160px
     */"
"<fim_prefix>package biz.dealnote.messenger.model;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

import androidx.annotation.IntDef;

@IntDef({PhotoSize.S, PhotoSize.M, PhotoSize.X, PhotoSize.Y,
        PhotoSize.Z, PhotoSize.W, PhotoSize.O, PhotoSize.P, PhotoSize.Q, PhotoSize.R})
@Retention(RetentionPolicy.SOURCE)
public @interface PhotoSize {
    /**<fim_suffix>
    int S = 1;

    /**
     * пропорциональная копия изображения с максимальной шириной 130px
     */
    int M = 2;

    /**
     * пропорциональная копия изображения с максимальной шириной 604px
     */
    int X = 3;

    /**
     * пропорциональная копия изображения с максимальной стороной 807px
     */
    int Y = 4;

    /**
     * пропорциональная копия изображения с максимальным размером 1280x1024
<fim_middle>","
     * пропорциональная копия изображения с максимальной шириной 75px
     */","
     * пропорциональная копия изображения с максимальной шириной 80px
     */"
"<fim_prefix>    * пропорциональная копия изображения с максимальной шириной 75px
     */
    int S = 1;

    /**
     * пропорциональная копия изображения с максимальной шириной 130px
     */
    int M = 2;

    /**
     * пропорциональная копия изображения с максимальной шириной 604px
     */
    int X = 3;

    /**
     * пропорциональная копия изображения с максимальной стороной 807px
     */
    int Y = 4;

    /**<fim_suffix>
    int Z = 5;

    /**
     * пропорциональная копия изображения с максимальным размером 2560x2048px
     */
    int W = 6;

    /**
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 130px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева изображения
     * с максимальной шириной 130px и <fim_middle>","
     * пропорциональная копия изображения с максимальным размером 1280x1024
     */","
     * пропорциональная копия изображения с максимальной стороной 807px
     */"
"<fim_prefix>зображения с максимальным размером 2560x2048px
     */
    int W = 6;

    /**
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 130px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева изображения
     * с максимальной шириной 130px и соотношением сторон 3:2
     */
    int O = 7;

    /**<fim_suffix>
    int P = 8;

    /**
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 320px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева и
     * справа изображения с максимальной шириной 320px и соотношением сторон 3:2
     */
    int Q = 9;

    /**
     * если соотношение ""ширина/высота"" исход<fim_middle>","
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 200px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева и
     * справа изображения с максимальной шириной 200px и соотношением сторон 3:2
     */","
     * если соотношение ""ширина/высота"" исходного изображения меньше или равно 3:2,
     * то пропорциональная копия с максимальной шириной 130px.
     * Если соотношение ""ширина/высота"" больше 3:2, то копия обрезанного слева изображения
     * с максимальной шириной 130px и соотношением сторон 3:2
     */"
"<fim_prefix>package org.binchoo.paimonganyu.redeem.driven;

import org.binchoo.paimonganyu.redeem.RedeemResultCallback;
import org.binchoo.paimonganyu.redeem.RedeemTask;
import org.binchoo.paimonganyu.redeem.UserRedeem;

import java.util.Collection;
import java.util.List;

/**<fim_suffix>
public interface RedemptionClientPort {

    /**
     * 코드 리딤 요청을 전송합니다. 요청 결과를 수신하면 주입된 콜백을 실행하여 반응합니다.
     * @param redeemTasks 리딤 태스크 집단
     * @param resultCallback 각 리딤 태스크 요청 결과에 반응하는 콜백
     * @return 유저 리뎀션 이력 - {@link UserRedeem} 리스트
     */
    List<UserRedeem> redeem(Collection<RedeemTask> redeemTasks, RedeemResultCallback resultCallback);
}
<fim_middle>","
 * 미호요 측 코드 리딤 기능에 접근하는 포트입니다.
 * @author : jbinchoo
 * @since : 2022/04/17
 */","
 * 코드 리딤 요청을 전송하는 클라이언트 인터페이스
 *
 * @author <NAME>
 */"
"<fim_prefix>package org.binchoo.paimonganyu.redeem.driven;

import org.binchoo.paimonganyu.redeem.RedeemResultCallback;
import org.binchoo.paimonganyu.redeem.RedeemTask;
import org.binchoo.paimonganyu.redeem.UserRedeem;

import java.util.Collection;
import java.util.List;

/**
 * 미호요 측 코드 리딤 기능에 접근하는 포트입니다.
 * @author : jbinchoo
 * @since : 2022/04/17
 */
public interface RedemptionClientPort {

    /**<fim_suffix>
    List<UserRedeem> redeem(Collection<RedeemTask> redeemTasks, RedeemResultCallback resultCallback);
}
<fim_middle>","
     * 코드 리딤 요청을 전송합니다. 요청 결과를 수신하면 주입된 콜백을 실행하여 반응합니다.
     * @param redeemTasks 리딤 태스크 집단
     * @param resultCallback 각 리딤 태스크 요청 결과에 반응하는 콜백
     * @return 유저 리뎀션 이력 - {@link UserRedeem} 리스트
     */","
     * 미호요 측 코드 리딤 기능을 수행합니다.
     * @param redeemTasks 리딤할 코인을 담은 리스트입니다.
     * @param resultCallback 리딤 결과를 받을 콜백입니다.
     * @return 리딤 결과를 담은 리스트입니다.
     */"
"<fim_prefix>package dt01;

public class Dt01t01 {
  /**<fim_suffix>
  public static void main(String[] args) {
    // 创建一个 Dt01t01的对象t
    // 通过t对象调用printArray()
  }

  // 构造函数，初始化数组a为 1...10
  public Dt01t01() {
    // 用循环语句，初始化数组a
  }

  // 定义printArray(可能有参数) 函数，输出数组a的元素
  public void printArray() {
    // 用循环语句，逐个输出数组a的元素
  }
}


<fim_middle>"," 定义一个二维数组b
   *  1  2  3  4  5
   *  6  7  8  9
   *  10 11 12
   *  13 14
   *  15
   */","
   * 编写一个类Dt01t01，它有两个成员变量：
   *                                 "
"<fim_prefix>ctor;
import lombok.Getter;

/**
 * <b>错误码和错误信息枚举类</b>
 * <br>
 * 1. 错误码定义规则为5为数字
 * 2. 前两位表示业务场景，最后三位表示错误码。例如：100001。10:通用 001:系统未知异常
 * 3. 维护错误码后需要维护错误描述，将他们定义为枚举形式
 * <br>
 * 错误码列表：
 * 10: 通用
 * 001：参数格式校验
 * 11: 商品
 * 12: 订单
 * 13: 购物车
 * 14: 物流
 *
 * @author liuwenjing
 */
@Getter
@AllArgsConstructor
public enum BizCodeEnum {
    /**
     * 系统未知异常
     */
    UNKNOWN_EXCEPTION(10000, ""系统未知异常""),
    /**<fim_suffix>
    VALID_EXCEPTION(10001, ""参数格式校验异常""),
    ;
    /**
     * 错误码
     */
    private final Integer code;

    /**
     * 错误消息
     */
    private final String message;
}
<fim_middle>","
     * 参数格式校验异常
     */","
     * 参数格式校验异常
     */"
"<fim_prefix>package cn.alphahub.eport.signature.base.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**<fim_suffix>
@Getter
@AllArgsConstructor
public enum BizCodeEnum {
    /**
     * 系统未知异常
     */
    UNKNOWN_EXCEPTION(10000, ""系统未知异常""),
    /**
     * 参数格式校验异常
     */
    VALID_EXCEPTION(10001, ""参数格式校验异常""),
    ;
    /**
     * 错误码
     */
    private final Integer code;

    /**
     * 错误消息
     */
    private final String message;
}
<fim_middle>","
 * <b>错误码和错误信息枚举类</b>
 * <br>
 * 1. 错误码定义规则为5为数字
 * 2. 前两位表示业务场景，最后三位表示错误码。例如：100001。10:通用 001:系统未知异常
 * 3. 维护错误码后需要维护错误描述，将他们定义为枚举形式
 * <br>
 * 错误码列表：
 * 10: 通用
 * 001：参数格式校验
 * 11: 商品
 * 12: 订单
 * 13: 购物车
 * 14: 物流
 *
 * @author liuwenjing
 */","
 * 业务异常枚举
 *
 * @author liuwenjing
 * @version 1.0
 * @date 2021/04/08
 */"
"<fim_prefix>为数字
 * 2. 前两位表示业务场景，最后三位表示错误码。例如：100001。10:通用 001:系统未知异常
 * 3. 维护错误码后需要维护错误描述，将他们定义为枚举形式
 * <br>
 * 错误码列表：
 * 10: 通用
 * 001：参数格式校验
 * 11: 商品
 * 12: 订单
 * 13: 购物车
 * 14: 物流
 *
 * @author liuwenjing
 */
@Getter
@AllArgsConstructor
public enum BizCodeEnum {
    /**
     * 系统未知异常
     */
    UNKNOWN_EXCEPTION(10000, ""系统未知异常""),
    /**
     * 参数格式校验异常
     */
    VALID_EXCEPTION(10001, ""参数格式校验异常""),
    ;
    /**<fim_suffix>
    private final Integer code;

    /**
     * 错误消息
     */
    private final String message;
}
<fim_middle>","
     * 错误码
     */","
     * 错误码
     */"
"<fim_prefix>3. 维护错误码后需要维护错误描述，将他们定义为枚举形式
 * <br>
 * 错误码列表：
 * 10: 通用
 * 001：参数格式校验
 * 11: 商品
 * 12: 订单
 * 13: 购物车
 * 14: 物流
 *
 * @author liuwenjing
 */
@Getter
@AllArgsConstructor
public enum BizCodeEnum {
    /**
     * 系统未知异常
     */
    UNKNOWN_EXCEPTION(10000, ""系统未知异常""),
    /**
     * 参数格式校验异常
     */
    VALID_EXCEPTION(10001, ""参数格式校验异常""),
    ;
    /**
     * 错误码
     */
    private final Integer code;

    /**<fim_suffix>
    private final String message;
}
<fim_middle>","
     * 错误消息
     */","
     * 错误描述
     */"
"<fim_prefix> cn.alphahub.eport.signature.base.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * <b>错误码和错误信息枚举类</b>
 * <br>
 * 1. 错误码定义规则为5为数字
 * 2. 前两位表示业务场景，最后三位表示错误码。例如：100001。10:通用 001:系统未知异常
 * 3. 维护错误码后需要维护错误描述，将他们定义为枚举形式
 * <br>
 * 错误码列表：
 * 10: 通用
 * 001：参数格式校验
 * 11: 商品
 * 12: 订单
 * 13: 购物车
 * 14: 物流
 *
 * @author liuwenjing
 */
@Getter
@AllArgsConstructor
public enum BizCodeEnum {
    /**<fim_suffix>
    UNKNOWN_EXCEPTION(10000, ""系统未知异常""),
    /**
     * 参数格式校验异常
     */
    VALID_EXCEPTION(10001, ""参数格式校验异常""),
    ;
    /**
     * 错误码
     */
    private final Integer code;

    /**
     * 错误消息
     */
    private final String message;
}
<fim_middle>","
     * 系统未知异常
     */","
     * 通用异常
     */"
"<fim_prefix>package edu.bjfu.lol.scenes.scene2d.命令;

import java.util.LinkedList;
import java.util.Queue;

import edu.bjfu.lol.scenes.scene2d.命令.命令类;

public class 命令组装器类
{
	public static 命令组装器类 实例 = new 命令组装器类();
	private Queue<命令类> 命令队列 = new LinkedList<命令类>();
	private Queue<命令类> 延迟添加命令队列 = new LinkedList<命令类>();
	/**<fim_suffix>
	public void 延迟添加命令(命令类 命令)
	{
		延迟添加命令队列.add(命令);
	}
	public void 添加命令(命令类 命令)
	{
		命令队列.add(命令);
		if (!延迟添加命令队列.isEmpty())
		{
			命令队列.addAll(延迟添加命令队列);
			延迟添加命令队列.clear();
		}
	}
	/**
	 * 命令组装完之后调用该方法得到命令队列
	 */
	public Queue<命令类> get命令队列()
	{
		if (!延迟添加命令队列.isEmpty())
		{
			命令队列.addAll(延迟添加命令队列);
			延迟添加命令队列.clear();
		}
		return 命令队列;
	}
}
<fim_middle>","
	 * 将命令添加到延迟添加队列中，该命令将会在下一个添加命令被调用时添加到那个命令的后面
	 */","
	 * 延迟添加命令
	 */"
"<fim_prefix>ublic class 命令组装器类
{
	public static 命令组装器类 实例 = new 命令组装器类();
	private Queue<命令类> 命令队列 = new LinkedList<命令类>();
	private Queue<命令类> 延迟添加命令队列 = new LinkedList<命令类>();
	/**
	 * 将命令添加到延迟添加队列中，该命令将会在下一个添加命令被调用时添加到那个命令的后面
	 */
	public void 延迟添加命令(命令类 命令)
	{
		延迟添加命令队列.add(命令);
	}
	public void 添加命令(命令类 命令)
	{
		命令队列.add(命令);
		if (!延迟添加命令队列.isEmpty())
		{
			命令队列.addAll(延迟添加命令队列);
			延迟添加命令队列.clear();
		}
	}
	/**<fim_suffix>
	public Queue<命令类> get命令队列()
	{
		if (!延迟添加命令队列.isEmpty())
		{
			命令队列.addAll(延迟添加命令队列);
			延迟添加命令队列.clear();
		}
		return 命令队列;
	}
}
<fim_middle>","
	 * 命令组装完之后调用该方法得到命令队列
	 */","
	 * 获取命令队列
	 * @return
	 */"
"<fim_prefix>package net.nanxu.payment.security;

/**<fim_suffix>
public interface PaymentBeforeSecurityModule extends SecurityModule {
}
<fim_middle>","
 * 在支付创建之前进行安全检查.
 *
 * @author: P
 **/","
 * @author Nan
 * @date 2021/10/19 16:26
 */"
"<fim_prefix>package io.gumga.core;

import java.util.Date;

/**<fim_suffix>
@FunctionalInterface
public interface Relogio {

    Date now();

}
<fim_middle>","
 * Interface que representa um hor√°rio
 *
 * @author Equipe Gumga
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.zondy.mapgis.pluginengine.enums;

/**<fim_suffix>
public enum StaticItemSizeEnum {
    /**
     * 无,根据静态文本框插件Width属性控制
     */
    NONE,

    /**
     * 内容长度控制
     */
    CONTENT,

    /**
     * 弹性控制
     */
    SPRING
}
<fim_middle>","
 * 静态框的尺寸控制方式
 *
 * @author cxy
 * @date 2019/09/11
 */","
 * @author fjl 2019-6-18 下午2:52:40
 * @content 静态文本框大小枚举
"
"<fim_prefix>package com.zondy.mapgis.pluginengine.enums;

/**
 * 静态框的尺寸控制方式
 *
 * @author cxy
 * @date 2019/09/11
 */
public enum StaticItemSizeEnum {
    /**<fim_suffix>
    NONE,

    /**
     * 内容长度控制
     */
    CONTENT,

    /**
     * 弹性控制
     */
    SPRING
}
<fim_middle>","
     * 无,根据静态文本框插件Width属性控制
     */","
     * 无控制
     */"
"<fim_prefix>package com.zondy.mapgis.pluginengine.enums;

/**
 * 静态框的尺寸控制方式
 *
 * @author cxy
 * @date 2019/09/11
 */
public enum StaticItemSizeEnum {
    /**
     * 无,根据静态文本框插件Width属性控制
     */
    NONE,

    /**<fim_suffix>
    CONTENT,

    /**
     * 弹性控制
     */
    SPRING
}
<fim_middle>","
     * 内容长度控制
     */","
     * 内容控制
     */"
"<fim_prefix>package com.zondy.mapgis.pluginengine.enums;

/**
 * 静态框的尺寸控制方式
 *
 * @author cxy
 * @date 2019/09/11
 */
public enum StaticItemSizeEnum {
    /**
     * 无,根据静态文本框插件Width属性控制
     */
    NONE,

    /**
     * 内容长度控制
     */
    CONTENT,

    /**<fim_suffix>
    SPRING
}
<fim_middle>","
     * 弹性控制
     */","
     * 宽度控制
     */"
"<fim_prefix>package com.zondy.mapgis.pluginengine.ui;

import com.zondy.mapgis.pluginengine.plugin.IPlugin;

/**<fim_suffix>
public interface IToolBar extends IBar, IPlugin {
}
<fim_middle>","
 * 工具条插件
 *
 * @author cxy
 * @date 2019/09/11
 */","
 * 工具栏
 * Created by xiaoying on 2019/9/3.
 */"
"<fim_prefix>package sdk.listener;

/**<fim_suffix>
public abstract class EnableListener<T> implements Listener<T> {

    private Boolean enable = true;//默认开启

    public void setEnable(Boolean enable) {
        this.enable = enable;
    }

    public Boolean getEnable() {
        return enable;
    }

    public Boolean enable() {
        return enable;
    }

}
<fim_middle>","
 * 提供是否开启插件
 * @param <T>
 */","
 * 监听器
 *
 * @author 赵永春"
"<fim_prefix>package beatprogramming.github.com.teacker_tracker.exception;

/**<fim_suffix>
public class CSVException extends Exception {

    public CSVException(){
    }

    public CSVException(String message)
    {
        super(message);
    }


}
<fim_middle>","
 * - Excepciones con las que trabajamos para los CSV
 */","
 * Created by <NAME> on 2/12/2016.
 */"
"<fim_prefix>/*<fim_suffix>

package wikipedia;

public class Contador extends Observable {

	//Atributos privados que mantienen el estado del contador
    private int valor, maximo;
    
    /*El constructor inicializa el estado del objeto: el maximo y el
    *valor inicial, siempre en el rango 0..maximo. Adicionalmente,
    *inicializa la parte de Observable que tiene un Contador...
    */
    public Contador(int valor, int maximo) <fim_middle>","Ejemplo de sujeto observable. Es una clase que mantiene un valor entero en
*el rango 0..maximo, donde maximo se establece en la construccion. La clase
*dispone de metodos para modificar el valor y para acceder al estado
*(valor, maximo). Extiende la clase observable heredando su
*/","*
 * @author <NAME>
 *
 */"
"<fim_prefix>ase que mantiene un valor entero en
*el rango 0..maximo, donde maximo se establece en la construccion. La clase
*dispone de metodos para modificar el valor y para acceder al estado
*(valor, maximo). Extiende la clase observable heredando su
*/

package wikipedia;

public class Contador extends Observable {

	//Atributos privados que mantienen el estado del contador
    private int valor, maximo;
    
    /*<fim_suffix>
    public Contador(int valor, int maximo) {
        super();
        this.maximo = maximo;
        this.valor = enRango(valor);
    }
    
    //Este metodo privado asegura que un valor n esta entre 0..maximo
    private int enRango(int n) {
        if (n < 0) {
            return 0;
        } else if (n > maximo) {
            return maximo;
        } else {
            return n;
        }
    }
    
    <fim_middle>","El constructor inicializa el estado del objeto: el maximo y el
    *valor inicial, siempre en el rango 0..maximo. Adicionalmente,
    *inicializa la parte de Observable que tiene un Contador...
    */","*
     * Constructor de la clase Contador.
     * @param valor el valor inicial del contador
     * @param maximo el valor máximo del contador
     */"
"<fim_prefix> n esta entre 0..maximo
    private int enRango(int n) {
        if (n < 0) {
            return 0;
        } else if (n > maximo) {
            return maximo;
        } else {
            return n;
        }
    }
    
    //Estos dos metodos permiten el acceso al estado del contador
    public int valor() {
        return valor;
    }
    
    public int maximo() {
        return maximo;
    }
    
    /*<fim_suffix>
    public void incrementarContador(int n) {
        valor = enRango(valor+n);
        notificarObservadores();
    }
}
<fim_middle>","Este metodo afecta al estado: primero se modifica de forma consistente
    *el estado y despues se notifica a los observadores del cambio
    */","*
     * Este metodo permite incrementar el contador
     * @param n es el valor que se incrementara
     */"
"<fim_prefix>package club.xiaojiawei.controls.ico;

import club.xiaojiawei.controls.images.ImagesLoader;
import org.girod.javafx.svgimage.SVGImage;
import org.girod.javafx.svgimage.SVGLoader;

/**<fim_suffix>
public class LungIco extends AbstractIco {

    public LungIco() {
        this(null);
    }

    public LungIco(String color) {
        super(color);
        SVGImage svgImage = SVGLoader.load(ImagesLoader.class.getResource(this.getClass().getSimpleName() + "".svg""));
        if (svgImage != null) {
            this.setMaxWidth(svgImage.getWidth());
            this.getChildren().add(svgImage);
        }
  <fim_middle>","
 * @author 肖嘉威 xjw580@qq.com
 * @date 2023/10/31 22:28
 */","
 * @author : xiaobolx
 * @date : 2019/05/13 14:53
 * @description :
 */"
"<fim_prefix>package cz.cas.lib.arclib.service.fixity;

/**<fim_suffix>
public enum FixityCheckMethod {
    METS,
    BAGIT,
    COMMON
}
<fim_middle>","
 * Typ SIP bal√≠ku
 */","
 * Created by <NAME> on 3. 8"
"<fim_prefix>package de.ecw.zabos.frontend.objects.fassade.klinikum;

import de.ecw.zabos.sql.vo.BereichInSchleifeVO;
import de.ecw.zabos.sql.vo.BereichVO;
import de.ecw.zabos.sql.vo.FunktionstraegerVO;
import de.ecw.zabos.sql.vo.PersonVO;

/**<fim_suffix>
public class BereichInSchleifeMitPersonenFassade extends
                BereichInSchleifeFassade
{
    private PersonVO[] personen;

    private PersonVO[] personenMitAktivemHandy;

    public BereichInSchleifeMitPersonenFassade(BereichInSchleifeFassade _bisf,
                    PersonVO[] _personen, PersonVO[] _personenMitAktivemHandy)
    {
        super(_bisf.getBereichInSchleife(), _bisf.getFunktionst<fim_middle>","
 * Fassade für die Zuweisung von Bereichen / Funktionsträgern innerhalb einer
 * Schleife mit den Personen, die der Kombination angehören
 * 
 * @author ckl
 * 
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.iohao.game.common.kit.adapter;


import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.charset.UnsupportedCharsetException;

/**<fim_suffix>
class HuCharsetUtil {

    public static final Charset CHARSET_UTF_8 = StandardCharsets.UTF_8;

    public static Charset charset(String charsetName) throws UnsupportedCharsetException {
        return HuStrUtil.isBlank(charsetName) ? Charset.defaultCharset() : Charset.forName(charsetName);
    }

    public static Charset defaultCharset() {
        return Charset.defaultCharset();
    }
}
<fim_middle>","
 * @author 渔民小镇
 * @date 2023-01-19
 */","
 * 字符集工具类
 *
 * @author 刘斌
 * @version"
"<fim_prefix>package fr.gouv.beta.fabnum.kelrisks.metier.referentiel.interfaces;

import fr.gouv.beta.fabnum.commun.metier.IAbstractCRUDService;
import fr.gouv.beta.fabnum.kelrisks.transverse.referentiel.entities.PlanPreventionRisques;

import java.util.List;

import org.geolatte.geom.Geometry;

/**<fim_suffix>
public interface IPlanPreventionRisquesService extends IAbstractCRUDService<PlanPreventionRisques> {
    
    List<PlanPreventionRisques> rechercherSitesDansPolygons(List<Geometry> multiPolygon);
    
    List<PlanPreventionRisques> rechercherSitesDansPolygon(Geometry multiPolygon);
}
  <fim_middle>","
 * Interface du Service qui gère les entités PlanPreventionRisques
 */","
 *
 * @author <NAME> <<EMAIL>>
 * @date 12"
"<fim_prefix>package de.ecw.zabos.frontend.objects.fassade.klinikum;

import de.ecw.zabos.sql.vo.SchleifeVO;

/**<fim_suffix>
public class SchleifenFassade
{
    private BereichInSchleifeMitPersonenFassade[] bereichInSchleifeMitPersonenFassade;

    private BereichInSchleifeFassade[] bereichInSchleifeFassade;

    private SchleifeVO schleifeVO;

    public SchleifenFassade(
                    SchleifeVO _schleifeVO,
                    BereichInSchleifeFassade[] _bereichInSchleifeFassade,
                    BereichInSchleifeMitP<fim_middle>","
 * Diese Fassade hält die Schleife und die Bereiche innerhalb der Schleife
 * inklusive der zugehörigen Personen vor.
 * 
 * @author ckl
 * 
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.zhishu.boot.annotations;

import com.zhishu.boot.mark.MyBatisPagePluginMark;
import org.springframework.context.annotation.Import;

import java.lang.annotation.*;

/**<fim_suffix>
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Inherited
@Import(MyBatisPagePluginMark.class)
public @interface EnableMyBatisPagePlugin {
}
<fim_middle>","
 * 分页插件自动注入启动注解
 * @author huangfu
 */","
 * @author zhishu
 * @version V1.0
 * @"
"<fim_prefix>/**<fim_suffix>
package it.unimi.di.j4im.esempi;

<fim_middle>","
 * Contiene esempi di uso della libreria.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
package org.gaixie.micrite.security.data;
<fim_middle>","
 * 提供security模块中数据初始化相关类. 
 * <p>
 *
 * @since 0.11
 */","
 * @author gaixie
 * @since 2018-07-25
 */"
"<fim_prefix>package com.dimple.effectiveJava.chapter9;

/**<fim_suffix>
public class Item57 {

}
<fim_middle>","
 * @className: Item57
 * @description: 将局部变量的作用域最小化
 * 1. 要使局部变量的作用域最小化，最有力的方法就是在第一次使用它的时候进行声明。
 * 2. 几乎每一个局部两边的声明都应该包含一个初始化表达式。try-catch除外
 * @auther: Dimple
 * @date: 06/14/19
 * @version: 1.0
 */","
 * @author zhongyj <<EMAIL>><br/>
 * @date 2020/1/14
 */"
"<fim_prefix>package com.dimple.effectiveJava.chapter10;

/**<fim_suffix>
public class Item74 {
}
<fim_middle>","
 * @className: Item74
 * @description: 每个方法抛出的所有异常都要建立文档
 * 始终要单独的声明受检异常，并且利用Javadoc的@throws标签,准确记录下抛出异常的每一个条件。如果一个公有方法可能抛出多个异常类，不能抛出这个异常类的父类。
 * 使用javadoc的@throws标签记录下一个方法可能抛出的每一个未受检异常，但不要使用throw关键字将未受检异常包含在方法的声明中。
 *
 * 总而言之，为编写的每一个方法所能抛出的异常建立文档。对于未受检异常和受检异常，以及抽象的方法和具体的方法一概如此。这个文档在文档注释中应该采用@throws标签的形式。
 * 要在方法的throws子句中为每个受检异常提供单独的声明，但是不要声明未受检异常。
 * @auther: Dimple
 * @date: 06/17/19
 * @version: 1.0
 */","
 * @author zhongyj <<EMAIL>><br/>
 * @date 2020/1/14
 */"
"<fim_prefix>/**<fim_suffix>
package jp.co.gsol.oss.ical.model;
<fim_middle>","
 * カレンダーモデル.
 * @author Global Solutions Co., Ltd.
 */","
 * @author <NAME>
 */"
"<fim_prefix>package osmo.mjexamples.gsm;

/**<fim_suffix>
public enum Req {
  VerifyCHV1, VerifyCHV5, VerifyCHV2, VerifyCHV4, VerifyCHV3, UnblockCHV1, Unblock5, Unblock7Unblock2, Unblock4, Unblock3, Enable2, Enable3, Enable1, Enable4, Enable5, Disable2, Disable3, Disable1, Disable4, Disable5, Change2, Change3, Change1, Change4, Change5, SelectFile2_File3_File4, SelectFile6, SelectFile2, SelectFile7, ReadBin2, ReadBin1, ReadBin3_5, ReadBin3_8, ReadBin1_67, ReadBi<fim_middle>", @author Teemu Kanstren */,"
 *
 * @author <NAME>"
"<fim_prefix>/*<fim_suffix>
package org.jouvieje.FmodDesigner.Examples;

public class _InfoOnly
{

}
<fim_middle>","
 * Created on 14 juil. 08
 */","*
 * @author <NAME>
 */"
"<fim_prefix>package mahomaps;

public class Gate {
	private volatile boolean pass;

	private final Object lock = new Object();

	/**<fim_suffix>
	public Gate(boolean initState) {
		pass = initState;
	}

	/**
	 * Проходит гейт. Если прохождение было разрешено вызовом {@link #Reset()},
	 * метод возвращается. Если гейт заблокирован, ожидает ближайшего вызова
	 * {@link #Reset()}.
	 *
	 * @throws InterruptedException Ожидание прервано.
	 */
	public void Pass() throws InterruptedException {
		synchronized (lock) {
			if (!pass) {
				lock.wait();
			}
	<fim_middle>","
	 * Создаёт гейт.
	 *
	 * @param initState True, если 1 ближайший проход потока должен быть разрешён.
	 */","
	 * Создаёт гейт с заданным состоянием.
	 *
	 * @param initState Состояние гейта.
	 */"
"<fim_prefix>te) {
		pass = initState;
	}

	/**
	 * Проходит гейт. Если прохождение было разрешено вызовом {@link #Reset()},
	 * метод возвращается. Если гейт заблокирован, ожидает ближайшего вызова
	 * {@link #Reset()}.
	 *
	 * @throws InterruptedException Ожидание прервано.
	 */
	public void Pass() throws InterruptedException {
		synchronized (lock) {
			if (!pass) {
				lock.wait();
			}
			pass = false;
		}
	}

	/**<fim_suffix>
	public void Pass(int timeout) throws InterruptedException {
		synchronized (lock) {
			if (!pass) {
				lock.wait(timeout);
			}
			pass = false;
		}
	}

	/**
	 * Запрещает потоку прохождение через гейт, если оно было разрешено вызовом
	 * {@link #Reset()}.
	 */
	public void Set() {
		synchronized (lock) {
			pass = false;
		}
	}

	/**
	 * Разрешает ожидающему потоку пройти гейт. Если поток ещё не достиг г<fim_middle>","
	 * Проходит гейт. Если прохождение было разрешено вызовом {@link #Reset()},
	 * метод возвращается. Если гейт заблокирован, ожидает ближайшего вызова
	 * {@link #Reset()} до таймаута.
	 *
	 * @throws InterruptedException Ожидание прервано.
	 */","
	 * Проходит гейт. Если прохождение было разрешено вызовом {@link #Reset()},
	 * метод возвращается. Если гейт заблокирован, ожидает ближайшего вызова
	 * {@link #Reset()}, или не дожидается.
	 *
	 * @param timeout Время ожидания в милли"
"<fim_prefix>package mahomaps;

public class Gate {
	private volatile boolean pass;

	private final Object lock = new Object();

	/**
	 * Создаёт гейт.
	 *
	 * @param initState True, если 1 ближайший проход потока должен быть разрешён.
	 */
	public Gate(boolean initState) {
		pass = initState;
	}

	/**<fim_suffix>
	public void Pass() throws InterruptedException {
		synchronized (lock) {
			if (!pass) {
				lock.wait();
			}
			pass = false;
		}
	}

	/**
	 * Проходит гейт. Если прохождение было разрешено вызовом {@link #Reset()},
	 * метод возвращается. Если гейт заблокирован, ожидает ближайшего вызова
	 * {@link #Reset()} до таймаута.
	 *
	 * @throws InterruptedException Ожидание прервано.
	 */
	public void Pass(int <fim_middle>","
	 * Проходит гейт. Если прохождение было разрешено вызовом {@link #Reset()},
	 * метод возвращается. Если гейт заблокирован, ожидает ближайшего вызова
	 * {@link #Reset()}.
	 *
	 * @throws InterruptedException Ожидание прервано.
	 */","
	 * Проходит гейт. Если прохождение было разрешено вызовом {@link #Reset()},
	 * метод возвращает. Если гейт заблокирован, ожидает ближайшего вызова
	 * {@link #Reset()} до таймаута.
	 *
	 * @throws InterruptedException Ожидание прер"
"<fim_prefix> таймаута.
	 *
	 * @throws InterruptedException Ожидание прервано.
	 */
	public void Pass(int timeout) throws InterruptedException {
		synchronized (lock) {
			if (!pass) {
				lock.wait(timeout);
			}
			pass = false;
		}
	}

	/**
	 * Запрещает потоку прохождение через гейт, если оно было разрешено вызовом
	 * {@link #Reset()}.
	 */
	public void Set() {
		synchronized (lock) {
			pass = false;
		}
	}

	/**<fim_suffix>
	public void Reset() {
		synchronized (lock) {
			pass = true;
			lock.notify();
		}
	}
}
<fim_middle>","
	 * Разрешает ожидающему потоку пройти гейт. Если поток ещё не достиг гейта, ему
	 * будет разрешено пройти 1 раз в будущем. После прохождения потока гейт будет
	 * заблокирован до следующего вызова {@link #Reset()}.
	 */","
	 * Разрешает потоку прохождение через гейт, если оно было запрещено вызовом
	 * {@link #Set()}.
	 */"
"<fim_prefix>	/**
	 * Проходит гейт. Если прохождение было разрешено вызовом {@link #Reset()},
	 * метод возвращается. Если гейт заблокирован, ожидает ближайшего вызова
	 * {@link #Reset()} до таймаута.
	 *
	 * @throws InterruptedException Ожидание прервано.
	 */
	public void Pass(int timeout) throws InterruptedException {
		synchronized (lock) {
			if (!pass) {
				lock.wait(timeout);
			}
			pass = false;
		}
	}

	/**<fim_suffix>
	public void Set() {
		synchronized (lock) {
			pass = false;
		}
	}

	/**
	 * Разрешает ожидающему потоку пройти гейт. Если поток ещё не достиг гейта, ему
	 * будет разрешено пройти 1 раз в будущем. После прохождения потока гейт будет
	 * заблокирован до следующего вызова {@link #Reset()}.
	 */
	public void Reset() {
		synchronized (lock) {
			pass = true;
			lock.notify();
		}
	}
}
<fim_middle>","
	 * Запрещает потоку прохождение через гейт, если оно было разрешено вызовом
	 * {@link #Reset()}.
	 */","
	 * Заблокирует ожидающего потока.
	 */"
"<fim_prefix>package top.tigercrl.minebotapi.sdk.exceptions;

import top.tigercrl.minebotapi.sdk.bot.Bot;

/**<fim_suffix>
public class ApiTimeoutException extends BotException {
    public ApiTimeoutException(Bot bot) {
        super(bot, ""API响应超时！"");
    }
}
<fim_middle>","
 * HTTP通信方式（HTTP POST）中签名不正确时抛出此异常
 */","
 * API响应超时异常
 *
 * @author Tiger
 */"
"<fim_prefix>al String ANZAHL_1 = ""1"";

  /**
   * Konstante für Anzahl 2.
   */
  public static final String ANZAHL_2 = ""2"";
  
  /**
   * Konstante für Anzahl 3.
   */
  public static final String ANZAHL_3 = ""3"";
  
  /**
   * Konstante für Anzahl 4.
   */
  public static final String ANZAHL_4 = ""4"";
  
  /**
   * Konstante für Anzahl 5.
   */
  public static final String ANZAHL_5 = ""5"";
  
  /**<fim_suffix>
  public static final String ANZAHL_GROESSER_5 = ""groesser_5"";

}<fim_middle>","
   * Konstante für Anzahl größer 5.
   */","
   * Konstante für Anzahl 6.
   */"
"<fim_prefix>package at.chipkarte.client.dbas.soap.constants;

/**
 * Konstanten für den Typ AnzahlTyp.
 */
public class AnzahlTypConstants {
  
  /**
   * Konstante für Anzahl 1.
   */
  public static final String ANZAHL_1 = ""1"";

  /**
   * Konstante für Anzahl 2.
   */
  public static final String ANZAHL_2 = ""2"";
  
  /**<fim_suffix>
  public static final String ANZAHL_3 = ""3"";
  
  /**
   * Konstante für Anzahl 4.
   */
  public static final String ANZAHL_4 = ""4"";
  
  /**
   * Konstante für Anzahl 5.
   */
  public static final String ANZAHL_5 = ""5"";
  
  /**
   * Konstante für Anzahl größer 5.
   */
  public static final String ANZAHL_GROESSER_5 = ""groesser_5"";

}<fim_middle>","
   * Konstante für Anzahl 3.
   */","
   * Konstante für Anzahl 3.
   */"
"<fim_prefix>pkarte.client.dbas.soap.constants;

/**
 * Konstanten für den Typ AnzahlTyp.
 */
public class AnzahlTypConstants {
  
  /**
   * Konstante für Anzahl 1.
   */
  public static final String ANZAHL_1 = ""1"";

  /**
   * Konstante für Anzahl 2.
   */
  public static final String ANZAHL_2 = ""2"";
  
  /**
   * Konstante für Anzahl 3.
   */
  public static final String ANZAHL_3 = ""3"";
  
  /**<fim_suffix>
  public static final String ANZAHL_4 = ""4"";
  
  /**
   * Konstante für Anzahl 5.
   */
  public static final String ANZAHL_5 = ""5"";
  
  /**
   * Konstante für Anzahl größer 5.
   */
  public static final String ANZAHL_GROESSER_5 = ""groesser_5"";

}<fim_middle>","
   * Konstante für Anzahl 4.
   */","
   * Konstante für Anzahl 4.
   */"
"<fim_prefix>lass AnzahlTypConstants {
  
  /**
   * Konstante für Anzahl 1.
   */
  public static final String ANZAHL_1 = ""1"";

  /**
   * Konstante für Anzahl 2.
   */
  public static final String ANZAHL_2 = ""2"";
  
  /**
   * Konstante für Anzahl 3.
   */
  public static final String ANZAHL_3 = ""3"";
  
  /**
   * Konstante für Anzahl 4.
   */
  public static final String ANZAHL_4 = ""4"";
  
  /**<fim_suffix>
  public static final String ANZAHL_5 = ""5"";
  
  /**
   * Konstante für Anzahl größer 5.
   */
  public static final String ANZAHL_GROESSER_5 = ""groesser_5"";

}<fim_middle>","
   * Konstante für Anzahl 5.
   */","
   * Konstante für Anzahl 5.
   */"
"<fim_prefix>package at.chipkarte.client.dbas.soap.constants;

/**
 * Konstanten für den Typ AnzahlTyp.
 */
public class AnzahlTypConstants {
  
  /**
   * Konstante für Anzahl 1.
   */
  public static final String ANZAHL_1 = ""1"";

  /**<fim_suffix>
  public static final String ANZAHL_2 = ""2"";
  
  /**
   * Konstante für Anzahl 3.
   */
  public static final String ANZAHL_3 = ""3"";
  
  /**
   * Konstante für Anzahl 4.
   */
  public static final String ANZAHL_4 = ""4"";
  
  /**
   * Konstante für Anzahl 5.
   */
  public static final String ANZAHL_5 = ""5"";
  
  /**
   * Konstante für Anzahl größer 5.
   */
  public static final Stri<fim_middle>","
   * Konstante für Anzahl 2.
   */","
   * Konstante für Anzahl 2.
   */"
"<fim_prefix>package at.chipkarte.client.dbas.soap.constants;

/**<fim_suffix>
public class AnzahlTypConstants {
  
  /**
   * Konstante für Anzahl 1.
   */
  public static final String ANZAHL_1 = ""1"";

  /**
   * Konstante für Anzahl 2.
   */
  public static final String ANZAHL_2 = ""2"";
  
  /**
   * Konstante für Anzahl 3.
   */
  public static final String ANZAHL_3 = ""3"";
  
  /**
   * Konstante für Anzahl 4.
   */
  public static final String ANZAHL_4 = ""4"";
<fim_middle>","
 * Konstanten für den Typ AnzahlTyp.
 */","
 * Konstanten für die Anzahl.
 * 
 *"
"<fim_prefix>package at.chipkarte.client.dbas.soap.constants;

/**
 * Konstanten für den Typ AnzahlTyp.
 */
public class AnzahlTypConstants {
  
  /**<fim_suffix>
  public static final String ANZAHL_1 = ""1"";

  /**
   * Konstante für Anzahl 2.
   */
  public static final String ANZAHL_2 = ""2"";
  
  /**
   * Konstante für Anzahl 3.
   */
  public static final String ANZAHL_3 = ""3"";
  
  /**
   * Konstante für Anzahl 4.
   */
  public static final String ANZAHL_4 = ""4"";
  
  /**
   * Konstante für Anzahl 5.
   */
  public static final String ANZAHL<fim_middle>","
   * Konstante für Anzahl 1.
   */","
   * Konstante für Anzahl 1.
   */"
"<fim_prefix>package net.cgt.weibo.fragment;

/**<fim_suffix>
public class MeFragment extends BaseFragment {

	@Override
	public CharSequence initContent() {
		return ""我"";
	}

}
<fim_middle>","
 * 我页面
 * 
 * @author lijian-pc
 * 
 */","
 * 我的
 * @author guanyw
 *
 */"
"<fim_prefix>package app.dsm.verify;

public interface IStrategy {
    String[] read();

    /**<fim_suffix>
    int verify(String ip);

}
<fim_middle>","
     * 验证
     *
     * @param ip
     * @return int 1-成功 -1-失败
     */","
     * @param ip
     * @return 0: success, 1: fail
     */"
"<fim_prefix>package org.dromara.omind.baseplat.service.notify;

import org.dromara.omind.baseplat.api.domain.entity.SysChargeOrder;

public interface NotifyStopChargingResultService {

    /**<fim_suffix>
    void send(SysChargeOrder sysChargeOrder, boolean isSuccess, int reason);

}
<fim_middle>","
     *
     * @param sysChargeOrder
     * @param isSuccess
     * @param reason 0无 1此设备不存在 2此设备离线 3设备已停止充电 4-99自定义
     */","
     * 发送通知
     *
     * @param sysChargeOrder 订单
     * @param isSuccess      是否成功
     * @param reason         原因"
"<fim_prefix>package com.lu.mydemo.UIMS;

/**<fim_suffix>
public interface IUIMS {



}
<fim_middle>","
 * 创建时间: 2020/06/13 09:28 <br>
 * 作者: luyajun002 <br>
 * 描述:
 */","
 * Created by Administrator on 2017/9/7.
 */"
"<fim_prefix>import java.util.Scanner;

public class BR_1028 {
	public static void main(String[] args) {
		/*<fim_suffix>
		Scanner sc = new Scanner(System.in);

		String input = sc.nextLine();
		while (input.length() > 100) {
			input = sc.nextLine();
		}
		sc.close();
		
		System.out.println(input.split("" "").length);
		
		
	}
}
<fim_middle>"," **************************************************
		 * 문제.
		 * 공백을 포함한 100글자 이하의 문자열을 입력받아 문장을 이루는 단어의 개수를 출력하는 프로그램을 작성하시오.
		 * 
		 * * 문장입력 할 때 gets()함수 대신 fgets() 함수를 사용하세요. c++14 적용!
		 *
		 *
		 * 입력 예.
		 * ===========================
		 * My name is Kimchulsoo
		 * ===========================
		 *
		 * 출력 예.
		 * ===========================
		 * 4
		 * ===========================
		 * **************************************************/","
		 * Enter your code here. Read input from STDIN. Print output to STDOUT. Your
		 * class should be named Solution.
		 */"
"<fim_prefix>package com.fit2cloud.common.provider.entity;

/**<fim_suffix>
public enum F2CEntityType {
    /**
     * 宿主机
     */
    HOST,
    /**
     * 云主机
     */
    VIRTUAL_MACHINE,
    /**
     * 云盘
     */
    DISK,
    /**
     * 存储器
     */
    DATASTORE
}
<fim_middle>","
 * 监控对象类型
 *
 * @author jianneng
 **/","
 * 实体类型
 *
 * @author phuyc
 */"
"<fim_prefix>package com.fit2cloud.common.provider.entity;

/**
 * 监控对象类型
 *
 * @author jianneng
 **/
public enum F2CEntityType {
    /**<fim_suffix>
    HOST,
    /**
     * 云主机
     */
    VIRTUAL_MACHINE,
    /**
     * 云盘
     */
    DISK,
    /**
     * 存储器
     */
    DATASTORE
}
<fim_middle>","
     * 宿主机
     */","
     * 主机
     */"
"<fim_prefix>package com.fit2cloud.common.provider.entity;

/**
 * 监控对象类型
 *
 * @author jianneng
 **/
public enum F2CEntityType {
    /**
     * 宿主机
     */
    HOST,
    /**<fim_suffix>
    VIRTUAL_MACHINE,
    /**
     * 云盘
     */
    DISK,
    /**
     * 存储器
     */
    DATASTORE
}
<fim_middle>","
     * 云主机
     */","
     * 虚拟机
    "
"<fim_prefix>package com.fit2cloud.common.provider.entity;

/**
 * 监控对象类型
 *
 * @author jianneng
 **/
public enum F2CEntityType {
    /**
     * 宿主机
     */
    HOST,
    /**
     * 云主机
     */
    VIRTUAL_MACHINE,
    /**<fim_suffix>
    DISK,
    /**
     * 存储器
     */
    DATASTORE
}
<fim_middle>","
     * 云盘
     */","
     * 存储卷"
"<fim_prefix>package com.fit2cloud.common.provider.entity;

/**
 * 监控对象类型
 *
 * @author jianneng
 **/
public enum F2CEntityType {
    /**
     * 宿主机
     */
    HOST,
    /**
     * 云主机
     */
    VIRTUAL_MACHINE,
    /**
     * 云盘
     */
    DISK,
    /**<fim_suffix>
    DATASTORE
}
<fim_middle>","
     * 存储器
     */","
     * 存储池
     */"
"<fim_prefix>package at.chipkarte.client.dbas.soap.constants;

/**<fim_suffix>
public class JaNeinTypConstants {
  /**
   * Konstante für JaNeinTyp (Ja).
   */
  public static final String JA = ""Ja"";

  /**
   * Konstante für JaNeinTyp (Nein).
   */
  public static final String NEIN = ""Nein"";
}<fim_middle>","
 * Konstanten für den Typ JaNeinTyp.
 */","
 * Konstanten für JaNeinTyp.
 * 
 *"
"<fim_prefix>package at.chipkarte.client.dbas.soap.constants;

/**
 * Konstanten für den Typ JaNeinTyp.
 */
public class JaNeinTypConstants {
  /**
   * Konstante für JaNeinTyp (Ja).
   */
  public static final String JA = ""Ja"";

  /**<fim_suffix>
  public static final String NEIN = ""Nein"";
}<fim_middle>","
   * Konstante für JaNeinTyp (Nein).
   */","
   * Konstante für JaNeinTyp (Nein).
   */"
"<fim_prefix>package at.chipkarte.client.dbas.soap.constants;

/**
 * Konstanten für den Typ JaNeinTyp.
 */
public class JaNeinTypConstants {
  /**<fim_suffix>
  public static final String JA = ""Ja"";

  /**
   * Konstante für JaNeinTyp (Nein).
   */
  public static final String NEIN = ""Nein"";
}<fim_middle>","
   * Konstante für JaNeinTyp (Ja).
   */","
   * Konstante für JaNeinTyp (Ja).
   */"
"<fim_prefix>package com.minlia.iot.signature.sign;

import com.minlia.iot.body.ApiHttpRequestBody;
import com.minlia.iot.context.ApiRuntimeContext;
import lombok.extern.slf4j.Slf4j;

/**<fim_suffix>
@Slf4j
public class DefaultXmlSignatureProcessor<REQUEST extends ApiHttpRequestBody> implements SignatureProcessor<REQUEST> {

  @Override
  public String sign(REQUEST requestBody,ApiRuntimeContext context) {
    throw new RuntimeException(""请指定具体的签名处理器"");
  }


}
<fim_middle>","
 * Created by will on 9/10/17.
 * 使用XML属性进行排序后签名
 */","
 * @author will
 */"
"<fim_prefix>package com.hawk.ecom.sms.persist.mapperex;

/**<fim_suffix>
public interface TaskExMapper  {

	

}<fim_middle>","
 * table = t_sms_task
 * desc = 短信发送记录
 * 
 * @author Gen
 */","
 * 任务持久层接口
 * @author hawk
 *
 */"
"<fim_prefix>package mx.unam.ciencias.edd.proyecto2;

/**<fim_suffix>

@FunctionalInterface
public interface AccionElementoInstruccion {
    /**
     * Acción para realizar por cada elemento.
     * @param e un elemeto de tipo entero.
     */
    public void actua(int e); 
}
<fim_middle>","
 * Interfaz fucional, para realizar una acción 
 * con los elementos de una {@link Instruccion}. 
 */","
 * Interfaz para acciones sobre elementos de tipo entero.
 */"
"<fim_prefix>package mx.unam.ciencias.edd.proyecto2;

/**
 * Interfaz fucional, para realizar una acción 
 * con los elementos de una {@link Instruccion}. 
 */

@FunctionalInterface
public interface AccionElementoInstruccion {
    /**<fim_suffix>
    public void actua(int e); 
}
<fim_middle>","
     * Acción para realizar por cada elemento.
     * @param e un elemeto de tipo entero.
     */","
     * Realiza una acción con el elemento de la 
     * instrucción.
     * @param e el elemento de la"
"<fim_prefix>/*<fim_suffix>
package com.jolly;
public class test02{    public static void main(String[] args) {

    sevenN();
    }
    public  static  void sevenN(){
        for (int i = 1;i<=100;i++){
            if (i%7==0||i%10==7||i/10%10==7){
                System.out.print(i+"", "");
            }
        }
    }
}
<fim_middle>","
*   逢七过
*       规则是：从任意一个数字开始报当要报的数字包含7或者是7的倍数的时候都要说过
*       为了帮助大家更好的玩这个游戏，这里我们直接在控制台打印1-100之间满足逢7过规则的数据
*   思路
*       1.循环遍历100之内的整数
*       2.控制语句中（X%7==0||X%10==7||X/10%10 ==7）
*       3.在控制台输出满足规则的数据
* */","*
 * Created by Administrator on 2017/9/7.
 */"
"<fim_prefix>/**<fim_suffix>
package com.monogramm.starter.api.user;
<fim_middle>","
 * The <em>Users</em> API.
 * 
 * @author madmath03
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.netease.hz.bdms.easyinsight.common.param.param.paramvalue;

import java.util.List;
import javax.validation.constraints.NotNull;
import lombok.Data;
import lombok.experimental.Accessors;

@Data
@Accessors(chain = true)
public class ParamValueUpdateParam {

  /**<fim_suffix>
  @NotNull(message = ""参数ID不能为空"")
  private Long paramId;

  /**
   * 参数取值
   */
  private List<ParamValueItemParam> values;
}
<fim_middle>","
   * 参数名
   */","
   * 参数ID
   */"
"<fim_prefix>package com.netease.hz.bdms.easyinsight.common.param.param.paramvalue;

import java.util.List;
import javax.validation.constraints.NotNull;
import lombok.Data;
import lombok.experimental.Accessors;

@Data
@Accessors(chain = true)
public class ParamValueUpdateParam {

  /**
   * 参数名
   */
  @NotNull(message = ""参数ID不能为空"")
  private Long paramId;

  /**<fim_suffix>
  private List<ParamValueItemParam> values;
}
<fim_middle>","
   * 参数取值
   */","
   * 参数值
   */"
"<fim_prefix>o       El peso del motor del vehículo.
     * @param precio     El precio del motor del vehículo.
     **************************************************************/
    public Vehiculo(int potencia, String cilindraje, int peso, int precio) {
        super(potencia, cilindraje, peso, precio); // Llama al constructor de la clase base (Motor)
        _Peso1 = 0;
        _Precio1 = 0;
    }

    /**<fim_suffix>
    public void AgregarPeso(int peso) {
        _Peso1 = peso;
    }

    /**************************************************************
     * Agrega un valor de precio adicional al vehículo.
     *
     * @param precio El valor de precio a agregar.
     **************************************************************/
    public void AgregarPrecio(int precio) {
        _Precio1 = precio;
    }<fim_middle>","************************************************************
     * Agrega un valor de peso adicional al vehículo.
     *
     * @param peso El valor de peso a agregar.
     **************************************************************/","************************************************************
     * Agrega un valor de peso adicional al vehículo.
     *
     * @param peso El valor de peso a agregar.
     **************************************************************/"
"<fim_prefix>de la clase base (Motor)
        _Peso1 = 0;
        _Precio1 = 0;
    }

    /**************************************************************
     * Agrega un valor de peso adicional al vehículo.
     *
     * @param peso El valor de peso a agregar.
     **************************************************************/
    public void AgregarPeso(int peso) {
        _Peso1 = peso;
    }

    /**<fim_suffix>
    public void AgregarPrecio(int precio) {
        _Precio1 = precio;
    }

    /**************************************************************
     * Obtiene el peso total del vehículo, incluyendo el peso.
     *
     * @param bTotal Indica si se debe incluir el peso del motor.
     * @return El peso total del vehículo.
     **************************************************************/
    p<fim_middle>","************************************************************
     * Agrega un valor de precio adicional al vehículo.
     *
     * @param precio El valor de precio a agregar.
     **************************************************************/","************************************************************
     * Agrega un valor de precio adicional al vehículo.
     *
     * @param precio El valor de precio a agregar.
     **************************************************************/"
"<fim_prefix>c void AgregarPeso(int peso) {
        _Peso1 = peso;
    }

    /**************************************************************
     * Agrega un valor de precio adicional al vehículo.
     *
     * @param precio El valor de precio a agregar.
     **************************************************************/
    public void AgregarPrecio(int precio) {
        _Precio1 = precio;
    }

    /**<fim_suffix>
    public int ObtenerPeso(boolean bTotal) {
        if (bTotal)
            return super.getPeso() + _Peso1; // Suma el peso del motor y el peso adicional.
        else
            return _Peso1; // Solo devuelve el peso adicional.
    }

    /**************************************************************
     * Obtiene el precio total del vehículo, incluyendo el precio.
     *
     * @param bTo<fim_middle>","************************************************************
     * Obtiene el peso total del vehículo, incluyendo el peso.
     *
     * @param bTotal Indica si se debe incluir el peso del motor.
     * @return El peso total del vehículo.
     **************************************************************/","**********************************************************
     * Obtiene el peso total del vehículo, incluyendo el peso.
     *
     * @param bTotal Si es true, devuelve el peso total del vehículo.
     *              "
"<fim_prefix>a.Objeto;

import Logica.General.Objetos.Motor;


/**************************************************************
 * Clase que representa un vehículo que hereda características 
 * de un motor.
 **************************************************************/
public class Vehiculo extends Motor {
    // Atributos específicos de Vehiculo
    private int _Peso1;
    private int _Precio1;

    /**<fim_suffix>
    public Vehiculo(int potencia, String cilindraje, int peso, int precio) {
        super(potencia, cilindraje, peso, precio); // Llama al constructor de la clase base (Motor)
        _Peso1 = 0;
        _Precio1 = 0;
    }

    /**************************************************************
     * Agrega un valor de peso adicional al vehículo.
     *
     * @param peso El valor de peso a agregar<fim_middle>","************************************************************
     * Constructor para crear un nuevo vehículo con características 
     * de motor.
     *
     * @param potencia   La potencia del motor del vehículo.
     * @param cilindraje El cilindraje del motor del vehículo.
     * @param peso       El peso del motor del vehículo.
     * @param precio     El precio del motor del vehículo.
     **************************************************************/","
     * Constructor de Vehiculo.
     *
     * @param potencia La potencia del vehículo.
     * @param cilindraje El cilindraje del vehículo.
     * @param peso El peso del vehículo.
     * @param precio El precio del vehículo.
     **************************************************************/"
"<fim_prefix>ca si se debe incluir el peso del motor.
     * @return El peso total del vehículo.
     **************************************************************/
    public int ObtenerPeso(boolean bTotal) {
        if (bTotal)
            return super.getPeso() + _Peso1; // Suma el peso del motor y el peso adicional.
        else
            return _Peso1; // Solo devuelve el peso adicional.
    }

    /**<fim_suffix>
    public int ObtenerPrecio(boolean bTotal) {
        if (bTotal)
            return super.getPrecio() + _Precio1; // Suma el precio del motor y el precio adicional.
        else
            return _Precio1; // Solo devuelve el precio adicional.
    }
}




/****************************************************************************************************
 * Problemas 
 ********************<fim_middle>","************************************************************
     * Obtiene el precio total del vehículo, incluyendo el precio.
     *
     * @param bTotal Indica si se debe incluir el precio del motor.
     * @return El precio total del vehículo.
     **************************************************************/","*************************************************************
     * Método que devuelve el precio total del vehículo.
     * @param bTotal Indica si se debe incluir el precio del motor.
     * @return El precio total del vehículo.
     **************************************************************/"
"<fim_prefix>l precio del motor.
     * @return El precio total del vehículo.
     **************************************************************/
    public int ObtenerPrecio(boolean bTotal) {
        if (bTotal)
            return super.getPrecio() + _Precio1; // Suma el precio del motor y el precio adicional.
        else
            return _Precio1; // Solo devuelve el precio adicional.
    }
}




/**<fim_suffix>
<fim_middle>","**************************************************************************************************
 * Problemas 
 ****************************************************************************************************
 * 1) Herencia: Esta herencia parece indicar que un vehículo es un tipo de motor.  Sin embargo, esto
 *  parece ser una estructura confusa. La herencia debería reflejar una relación ""es un"" entre las 
 *  clases, y un vehículo no es un tipo de motor. En su lugar, podría haber una composición o
 *  asociación entre un vehículo y un motor.
 * 2) Confusión de nombres: Los nombres _Peso1 y _Precio1 pueden ser confusos, ya que no proporcionan
 *  una clara distinción entre los campos de la clase base Motor y los campos específicos de la clase 
 *  Vehiculo. Sería útil utilizar nombres más descriptivos que indiquen claramente su propósito.
 * 3) Duplicación de campos: Aunque ahora no tienes campos duplicados con la clase base Motor, aún 
 *  se mantienen los campos de peso y precio en ambas clases. Esto puede ser innecesario si los campos
 *   en la clase base son suficientes para representar estas propiedades. 
 *****************************************************************************************************/","
 * Clase que representa un vehículo de la marca Ford.
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix>package Logica.Herencia.Objeto;

import Logica.General.Objetos.Motor;


/**<fim_suffix>
public class Vehiculo extends Motor {
    // Atributos específicos de Vehiculo
    private int _Peso1;
    private int _Precio1;

    /**************************************************************
     * Constructor para crear un nuevo vehículo con características 
     * de motor.
     *
     * @param potencia   La potencia del motor del vehículo.
     * @param cilindraje El cilindraje del moto<fim_middle>","************************************************************
 * Clase que representa un vehículo que hereda características 
 * de un motor.
 **************************************************************/","
 * Clase Vehiculo
 *
 * @author <NAME>
 * @author <NAME>
 *"
"<fim_prefix>package com.zxl.gb;

import com.zxl.util.ByteUtil;
import lombok.Getter;

import java.util.Arrays;

@Getter
public enum DcStateEnum implements BaseEnum{
    /**<fim_suffix>
    WORK((byte)1),

    /**
     * 断开
     */
    BREAK((byte)2),



    /**
     * 异常
     */
    EXCEPTION((byte)0xFE),


    /**
     * 无效
     */
    INVALID((byte)0xFF),

    ;

    private byte v;


    DcStateEnum(byte v) {
        this.v = v;
    }

    @Override
    public byte[] enum2Bytes() {
        return new byte[]{v};
    }

    @Override
    public Object parseToEnum(byte[] bytes) throws Exc<fim_middle>","
     * 工作
     */","
     * 正常
    "
"<fim_prefix>package com.zxl.gb;

import com.zxl.util.ByteUtil;
import lombok.Getter;

import java.util.Arrays;

@Getter
public enum DcStateEnum implements BaseEnum{
    /**
     * 工作
     */
    WORK((byte)1),

    /**
     * 断开
     */
    BREAK((byte)2),



    /**
     * 异常
     */
    EXCEPTION((byte)0xFE),


    /**<fim_suffix>
    INVALID((byte)0xFF),

    ;

    private byte v;


    DcStateEnum(byte v) {
        this.v = v;
    }

    @Override
    public byte[] enum2Bytes() {
        return new byte[]{v};
    }

    @Override
    public Object parseToEnum(byte[] bytes) throws Exception {
        ByteUtil.checkBytesLength(bytes,1);
       return  Arrays.stream(DcStateEnum.values())
                .filter(e->e.getV()==bytes[0])<fim_middle>","
     * 无效
     */","
     * 无效
     */"
"<fim_prefix>package com.zxl.gb;

import com.zxl.util.ByteUtil;
import lombok.Getter;

import java.util.Arrays;

@Getter
public enum DcStateEnum implements BaseEnum{
    /**
     * 工作
     */
    WORK((byte)1),

    /**<fim_suffix>
    BREAK((byte)2),



    /**
     * 异常
     */
    EXCEPTION((byte)0xFE),


    /**
     * 无效
     */
    INVALID((byte)0xFF),

    ;

    private byte v;


    DcStateEnum(byte v) {
        this.v = v;
    }

    @Override
    public byte[] enum2Bytes() {
        return new byte[]{v};
    }

    @Override
    public Object parseToEnum(byte[] bytes) throws Exception {
        ByteUtil.checkBytesLength(byt<fim_middle>","
     * 断开
     */","
     * 休息
     */"
"<fim_prefix>package com.zxl.gb;

import com.zxl.util.ByteUtil;
import lombok.Getter;

import java.util.Arrays;

@Getter
public enum DcStateEnum implements BaseEnum{
    /**
     * 工作
     */
    WORK((byte)1),

    /**
     * 断开
     */
    BREAK((byte)2),



    /**<fim_suffix>
    EXCEPTION((byte)0xFE),


    /**
     * 无效
     */
    INVALID((byte)0xFF),

    ;

    private byte v;


    DcStateEnum(byte v) {
        this.v = v;
    }

    @Override
    public byte[] enum2Bytes() {
        return new byte[]{v};
    }

    @Override
    public Object parseToEnum(byte[] bytes) throws Exception {
        ByteUtil.checkBytesLength(bytes,1);
       return  Arrays.stream(DcStateEnum.v<fim_middle>","
     * 异常
     */","
     * 异常
     */"
"<fim_prefix>package com.neucore.neulink.impl.listener;

import com.neucore.neulink.ICmdListener;
import com.neucore.neulink.impl.ActionResult;
import com.neucore.neulink.impl.Cmd;
import com.neucore.neulink.impl.NeulinkEvent;

/**<fim_suffix>
public class DefaultStatusCmdListener implements ICmdListener<ActionResult, Cmd> {
    @Override
    public ActionResult doAction(NeulinkEvent<Cmd> event) {
        ActionResult result = new ActionResult();
        result.setCode(STATUS_200);
        result.setMessage(MESSAGE_SUCCESS);
        return result;
    }
}
<fim_middle>","
 * 设备状态查询
 */","
 * 默认的命令监听器，"
"<fim_prefix>mport com.gitee.swsk33.findmeentity.model.Message;
import com.gitee.swsk33.findmesession.strategy.RealTimeMessageStrategy;
import jakarta.websocket.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

import static com.gitee.swsk33.findmeutility.util.KafkaNameGenerator.generateName;

/**<fim_suffix>
@Component
public class PositionMessageStrategy implements RealTimeMessageStrategy {

	@Autowired
	private KafkaTemplate<String, Message<?>> kafkaTemplate;

	@Override
	public void handleMessage(Message<?> message, Session session, String roomId, long userId) {
		// 广播到消息队列
		kafkaTemplate.send(generateName(roomId), message);
	}

}<fim_middle>","
 * 实时位置改变的消息策略
 */","
 * @author swsk33
 * @since"
"<fim_prefix>package fun.pullock.mini.dubbo.transport;

/**<fim_suffix>
public interface Server {
}
<fim_middle>","
 * 服务
 */","
 * @author Pul"
"<fim_prefix>package algorithm.day06;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class Test02 {
    public static void main(String[] args) {
        generate(5);
    }

    public static List<List<Integer>> generate(int numRows) {
        //整个杨辉三角
        List<List<Integer>> ret = new ArrayList<List<Integer>>();
        for (int i = 0; i < numRows; i++) {
            //杨辉三角每行的集合
            ArrayList<Integer> list = new ArrayList<>();
            //每行每个数生产
            for (int j <fim_middle>","
 * @author wuyj
 * @date 2021/12/22 11:05 下午
 * 给定一个非负整数 numRows，生成「杨辉三角」的前 numRows 行。
 *
 * 在「杨辉三角」中，每个数是它左上方和右上方的数的和。
 */","
 * @author: mayuan
 * @desc:
 * @date: 2018/08/07
 */"
"<fim_prefix>/*<fim_suffix>

package ch.cinus.kata.sevenkyu.halvingsum;

public class HalvingSum {
  int halvingSum(int n) {
    return doHalvingSum(n, 1);
  }

  int doHalvingSum(int number, int divisor) {
    final int addend = number / divisor;
    if (addend == 0) {
      return 0;
    }
    return addend + doHalvingSum(number, divisor * 2);
  }
}
<fim_middle>","
 * Copyright (C) Schweizerische Bundesbahnen SBB, 2020.
 */","*
 * Created by christoph on 08.07.2017.
 */"
"<fim_prefix>package com.gfive.tateti.componentes.arbol;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

import com.gfive.tateti.log.Log;
import com.gfive.tateti.metricas.Metrica;
import com.gfive.tateti.metricas.MetricasFactory;

/**<fim_suffix>
public class ArchivoNodo extends NodoArbol {
    
    /**
     * ID de serie por defecto.
     */
    private static final long serialVersionUID = 1L;


    /**
     * Construye un ArchivoNodo por path.
     * @param path - la ruta al archivo.
     */
    public ArchivoNodo(Path path) {
        super(path);
    }
    
    
    @Override
    public List<Metrica> calcularMetricas() {
        // Cargo el archi<fim_middle>","
 * Dato para los nodos del árbol de archivos.
 * @author nicolas
 *
 */","
 * Nodo que representa un archivo.
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix>util.List;
import java.util.stream.Collectors;

import com.gfive.tateti.log.Log;
import com.gfive.tateti.metricas.Metrica;
import com.gfive.tateti.metricas.MetricasFactory;

/**
 * Dato para los nodos del árbol de archivos.
 * @author nicolas
 *
 */
public class ArchivoNodo extends NodoArbol {
    
    /**
     * ID de serie por defecto.
     */
    private static final long serialVersionUID = 1L;


    /**<fim_suffix>
    public ArchivoNodo(Path path) {
        super(path);
    }
    
    
    @Override
    public List<Metrica> calcularMetricas() {
        // Cargo el archivo completo en memoria.
        final List<String> lineasArchivo;
        try {
            lineasArchivo =  Files.readAllLines(getRutaArchivo(), StandardCharsets.ISO_8859_1);
        } catch (IOException e) {
            Log log = new Log();
         <fim_middle>","
     * Construye un ArchivoNodo por path.
     * @param path - la ruta al archivo.
     */","
     * Constructor.
     * @param path
     */"
"<fim_prefix> java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

import com.gfive.tateti.log.Log;
import com.gfive.tateti.metricas.Metrica;
import com.gfive.tateti.metricas.MetricasFactory;

/**
 * Dato para los nodos del árbol de archivos.
 * @author nicolas
 *
 */
public class ArchivoNodo extends NodoArbol {
    
    /**<fim_suffix>
    private static final long serialVersionUID = 1L;


    /**
     * Construye un ArchivoNodo por path.
     * @param path - la ruta al archivo.
     */
    public ArchivoNodo(Path path) {
        super(path);
    }
    
    
    @Override
    public List<Metrica> calcularMetricas() {
        // Cargo el archivo completo en memoria.
        final List<String> lineasArchivo;
        try {
            lineas<fim_middle>","
     * ID de serie por defecto.
     */",
"<fim_prefix>/**<fim_suffix>
package com.bob.io.io07_ObjectStream;<fim_middle>","
 * ObjectStream 主要用于持久化对象（persistent object）
 * 静态内容不能被序列化
 *
 * @author Bob
 */","
 * @author Administrator
 *
 */"
"<fim_prefix>package com.taoes.simpledocker.aop.annotation;


import com.taoes.simpledocker.model.enums.OperatorResource;
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**<fim_suffix>
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface OperateRecorder {

   OperatorResource type() default OperatorResource.IMAGE_v1;
}
<fim_middle>","
 * 操作记录器
 */","
 * Created by lizhihui"
"<fim_prefix>package autoweka.randomsearch;

import java.io.File;

import autoweka.Experiment;
import autoweka.Trajectory;
import autoweka.TrajectoryParser;

/**<fim_suffix>
public class RandomSearchTrajectoryParser extends TrajectoryParser
{
    public Trajectory parseTrajectory(Experiment experiment, File folder, String seed)
    {
        return new Trajectory(seed);
    }
}
<fim_middle>", Nop trajectory parser */,"
 * A parser for"
"<fim_prefix>package ru.nuzmsh.forms.validator.validators;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

/**<fim_suffix>
@Retention(RetentionPolicy.RUNTIME)
@Target ({ElementType.METHOD})
public @interface DateString {

}
<fim_middle>","
 * Ввод даты в виде строки dd.MM.yyyy
 */","
 * Created by <NAME> on 19.11.2016.
 */"
"<fim_prefix>package cn.edu.xmu.rocketmqdemo.model;

import lombok.Data;


/**<fim_suffix>
@Data

public class SpecItem {

    private String id;

    private String content;
}
<fim_middle>","
 * 商品的可选规格的项
 * @author Ming Qiu
 **/","
 * @author <NAME>
 * Created at 2019-10-23 11:00 上"
"<fim_prefix>package client;
import util.geom.*;
/**<fim_suffix>
public class OverlayPanelA extends OverlayPanel
{
    public OverlayPanelA(Frame frame, Player p, VektorI screenSize){
        super(frame,p,screenSize);
        setVisible(true);
    }
}
<fim_middle>","
 * Das Overlay Panel für alle (Space und Craft). Zum Beispiel für den Chat
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package net.risesoft.permission.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import net.risesoft.enums.platform.ManagerLevelEnum;

/**<fim_suffix>
@Documented
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface IsAnyManager {

    /**
     * 管理员类型
     * 
     * @return {@code  ManagerLevelEnum[]} 管理员类型
     */
    ManagerLevelEnum[] value() default {};

    /**
     * 必须为全局的管理员
     * 
     * @return boolean 是否必须为全局的管理员
     */
    boolean globalOnly() default false;

}
<fim_middle>","
 * 是否为管理员 <br>
 * 可用在方法及类上，方法上的注解优先于类上的
 *
 * @author shidaobang
 * @date 2023/12/21
 */","
 * 管理员权限注解
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>rt net.risesoft.enums.platform.ManagerLevelEnum;

/**
 * 是否为管理员 <br>
 * 可用在方法及类上，方法上的注解优先于类上的
 *
 * @author shidaobang
 * @date 2023/12/21
 */
@Documented
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface IsAnyManager {

    /**
     * 管理员类型
     * 
     * @return {@code  ManagerLevelEnum[]} 管理员类型
     */
    ManagerLevelEnum[] value() default {};

    /**<fim_suffix>
    boolean globalOnly() default false;

}
<fim_middle>","
     * 必须为全局的管理员
     * 
     * @return boolean 是否必须为全局的管理员
     */","
     * 是否全局管理员
     * 
     * @return {@code boolean} 是否全局管理员
     */"
"<fim_prefix>ype;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import net.risesoft.enums.platform.ManagerLevelEnum;

/**
 * 是否为管理员 <br>
 * 可用在方法及类上，方法上的注解优先于类上的
 *
 * @author shidaobang
 * @date 2023/12/21
 */
@Documented
@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
public @interface IsAnyManager {

    /**<fim_suffix>
    ManagerLevelEnum[] value() default {};

    /**
     * 必须为全局的管理员
     * 
     * @return boolean 是否必须为全局的管理员
     */
    boolean globalOnly() default false;

}
<fim_middle>","
     * 管理员类型
     * 
     * @return {@code  ManagerLevelEnum[]} 管理员类型
     */","
     * 管理员级别
     * 
     * @return ManagerLevelEnum[] 管理员级别
     */"
"<fim_prefix>package ru.ecom.ejb.services.script;

/**<fim_suffix>
public interface IScriptService {

	/**
	 * Запуск метода сервиса на скриптовом языке
	 * @param aServiceName название сервиса
	 * @param aMethodName  название метода сервиса
	 * @param args         аргументы
	 * @return возвращение значения
	 */
	Object invoke(String aServiceName, String aMethodName, Object[] args);
}
<fim_middle>","
 * Запуск скриптов как Stateless Service
 */","
 * Интерфейс сервиса выполнения скрип"
"<fim_prefix>package ru.ecom.ejb.services.script;

/**
 * Запуск скриптов как Stateless Service
 */
public interface IScriptService {

	/**<fim_suffix>
	Object invoke(String aServiceName, String aMethodName, Object[] args);
}
<fim_middle>","
	 * Запуск метода сервиса на скриптовом языке
	 * @param aServiceName название сервиса
	 * @param aMethodName  название метода сервиса
	 * @param args         аргументы
	 * @return возвращение значения
	 */","
	 * Вызов скрипта
	 * @param aServiceName имя сервиса
	 * @param aMethodName имя метода
	 * @param args аргументы метода
	 * @return результат выполнения метода
	 */"
"<fim_prefix>/**<fim_suffix>
package com.aliyun.iotx.api.sdk.business.homelink;<fim_middle>","
 * 智能人居平台API
 *
 * @date 2019/07/09
 */","
 * 物联网平台业务API
 *
 * @author <EMAIL>
 * @version"
"<fim_prefix>/**<fim_suffix>

package jp.co.gsol.oss.ical.logic;
<fim_middle>","
 * ファイルアクセスとDBアクセス.
 * @author Global Solutions Co., Ltd.
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.tacz.guns.client.gui.components.refit;

import net.minecraft.item.ItemStack;

import java.util.function.Consumer;

public interface IStackTooltip {
    /**<fim_suffix>
    void renderTooltip(Consumer<ItemStack> consumer);
}
<fim_middle>","
     * 添加此接口，会调用此渲染文本提示
     *
     * @param consumer 需要渲染文本提示的物品
     */","
     * Renders the tooltip for the given stack.
     *
     * @param consumer The consumer to render the tooltip with.
     */"
"<fim_prefix>package com.easyink.common.enums;

import lombok.Getter;

/**<fim_suffix>
@Getter
public enum CallbackEventUpdateDetail {
    ADD_MEMBER(""add_member""),
    DEL_MEMBER(""del_member""),
    CHANGE_OWNER(""change_owner""),
    CHANGE_NAME(""change_name""),
    CHANGE_NOTICE(""change_notice"");

    private final String type;

    CallbackEventUpdateDetail(String type) {
        this.type = type;
    }
}
<fim_middle>","
 * 客户群变更时间的回调参数 UpdateDetail
 * 变更详情。目前有以下几种：
 * add_member : 成员入群
 * del_member : 成员退群
 * change_owner : 群主变更
 * change_name : 群名变更
 * change_notice : 群公告变更
 */","
 * 回调事件更新详情
 *
 * @author tengchong
 * @date 2019-04-12
 */"
"<fim_prefix>/**<fim_suffix>
package org.linotte.moteur.xml.analyse;

<fim_middle>","
 * Toutes les classes de ce package sont à déplacer dans le package alizé après une nouvelle conception.
 * 
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>
package com.kxmall.wechat.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**<fim_suffix>
@Getter
@AllArgsConstructor
public enum WechatTempateEnum {

    SEND_SUCCESS(""send_success"", ""支付成功通知"");

    private String value; //模板编号
    private String desc; //模板id
}
<fim_middle>","
 * @author kxmall
 * 微信公众号模板枚举
 */","
 * 微信模板枚举
 *
 * @author kaixin
 * @"
"<fim_prefix>package tixi.day03;

/**<fim_suffix>
public class Test03 {

    public static void main(String[] args) {
        int a = 10;
        int b = a & -a;
        System.out.println(b);
    }
}
<fim_middle>","
 * @author wuyj
 * @date 2022/11/2 22:38
 *
 * 怎么把一个整型的数最右侧的1提取出来
 */","
 * Created by baichen on 2018/1/3 下午5:01.
 */"
"<fim_prefix>package org.accen.dmzj.core.meta;

public enum RequestType {
	_ALL,
	/**<fim_suffix>
	FRIEND,
	/**
	 * 加群请求／邀请
	 */
	GROUP;
}
<fim_middle>","
	 * 加好友请求
	 */","
	 * 搜索请求
	 */"
"<fim_prefix>package org.accen.dmzj.core.meta;

public enum RequestType {
	_ALL,
	/**
	 * 加好友请求
	 */
	FRIEND,
	/**<fim_suffix>
	GROUP;
}
<fim_middle>","
	 * 加群请求／邀请
	 */","
	 * 加群请求
	 */"
"<fim_prefix>package cz.cas.lib.arclib.domain;

import lombok.Getter;

/**<fim_suffix>
@Getter
public enum HashType {
    MD5,
    Crc32,
    Sha512,
    Sha256,
    Sha1,
}
<fim_middle>","
 * Typ fixity
 */","
 * Hash type.
 *"
"<fim_prefix>package com.study;

public class FloatEx {

	/*<fim_suffix>
	
	public static void main(String[] args) {
		double var1, var2;
		long d1 = 33, d2=333333333333l;
		
		System.out.println(d2);
		
		var1 =  3.14f;
		var2 =  55.55;
		System.out.println(var1);
		System.out.println(var2);
	}
}
<fim_middle>"," float, double:실수형(실수형의 기본자료형은 double) */","*
	 * @param args
	 */"
"<fim_prefix>package com.yanhuo.common.result;

import lombok.Getter;

/**<fim_suffix>
@Getter
public enum ResultCodeEnum {

    SUCCESS(200, ""成功""),
    FAIL(201, ""失败""),
    TOKEN_FAIL(401, ""token异常""),
    TOKEN_EXIST(501, ""token过期""),

    NOT_NULL(10001, ""为空"");

    private final Integer code;

    private final String message;

    private ResultCodeEnum(Integer code, String message) {
        this.code = code;
        this.message = message;
    }
}
<fim_middle>","
 * 统一返回结果状态信息类
 *
 * @author xiaozhao
 */","
 * 通用返回结果
 *
 * @author chenshun
 * @email <EMAIL"
"<fim_prefix>package com.yyq.num;

/**<fim_suffix>
public class NumberOf1 {
    public int numberOf1(int n) {
        int num = 0;
        while (n != 0) {
            num++;
            n &= n - 1;
        }
        return num;
    }
}
<fim_middle>","
 * 输入一个整数，输出对应二进制中1的个数
 *
 * @author yyq
 * @since 2018/10/21
 */","
 * @author yyq
 * @create 2020-03-24 16:00
 */"
"<fim_prefix>/*<fim_suffix>
package primera2223;

public class Ejercicio020 {
    public static void main(String arg[]){
        int datos[] = {10, -20, 30, -40, 50, 60};
        int aux = datos[0];
        for(int i = 1; i < datos.length; i++)
            datos[i - 1] = datos [i];
        datos[datos.length - 1] = aux;
        for(int i = 0; i < datos.length; i++)
            if(i < datos.length -1)
                System<fim_middle>","
 Desplazar todos los números una posición hacia la izquierda de un vector y 
el primero al final.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>package work.myfavs.framework.orm.util.func;

/**<fim_suffix>
@FunctionalInterface
public interface ThrowingFunction<T, R, E extends Throwable> {

  R apply(T t) throws E;
}
<fim_middle>","
 * 接受一个参数并生成结果的函数。
 * 函数调用 {@link #apply(Object)} 方法
 *
 * @param <T> 输入参数的类型
 * @param <R> 返回结果类型
 * @param <E> 抛出异常的类型
 */","
 * @author <NAME>
 */"
"<fim_prefix>package io.mycat.databaseorient.constant;

import java.util.HashMap;
import java.util.Map;

/**<fim_suffix>
public class MconstantStatusVariables {
    public static final Map<String, String> MAP = new HashMap<>();
    static {

    }
}
<fim_middle>","
 * Created by 长宏 on 2017/3/23 0023.
 * 状态变量
 */","
 * Created by magicdoom on 2016/10/26.
 */"
"<fim_prefix>package org.cat73.pager.util;

/**<fim_suffix>
@Deprecated
public final class Lang {
    private Lang() {
        throw new UnsupportedOperationException();
    }

    /**
     * 将参数包装为 RuntimeException 后返回，如果它已经是一个 RuntimeException 则直接返回
     * @param e 被包装的异常
     * @return 包装后的异常
     */
    public static RuntimeException wrapThrow(Throwable e) {
        if (e instanceof RuntimeException) {
            return (RuntimeException) e;
        } else {
  <fim_middle>","
 * 一些异常相关的工具类
 * @deprecated 考虑移除
 */","
 * 语言工具类
 *
 * @author Cat
 */"
"<fim_prefix>package org.cat73.pager.util;

/**
 * 一些异常相关的工具类
 * @deprecated 考虑移除
 */
@Deprecated
public final class Lang {
    private Lang() {
        throw new UnsupportedOperationException();
    }

    /**<fim_suffix>
    public static RuntimeException wrapThrow(Throwable e) {
        if (e instanceof RuntimeException) {
            return (RuntimeException) e;
        } else {
            return new RuntimeException(e);
        }
    }
}
<fim_middle>","
     * 将参数包装为 RuntimeException 后返回，如果它已经是一个 RuntimeException 则直接返回
     * @param e 被包装的异常
     * @return 包装后的异常
     */","
     * 包装一个异常为运行时异常
     * @param e 异常
     * @return 运行时异常
     */"
"<fim_prefix>package org.mcwonderland.uhc.api.event.timer;

/**<fim_suffix>
public class UHCStartedEvent extends UHCTimerEvent {
}<fim_middle>","
 * 2019-12-10 下午 08:57
 */","
 * Created by Matthew on 4/28/2016.
"
"<fim_prefix>package org.melchor629.engine.loaders.collada;

import org.w3c.dom.Element;

/**<fim_suffix>
public class Instance_Controller extends Instance {

    /**
     * @param inst
     */
    public Instance_Controller(Element inst) {
        super(inst);

    }

}
<fim_middle>","
 * TODO mucho
 * @author melchor9000
 */","
 * Created by melchor629 on 12/15/15."
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.process.puppet;
<fim_middle>","
 * <p>
 *  パペットに関する制御機能を提供します。
 * </p>
 */","
 * @author masaki.kamachi
 */"
"<fim_prefix>/**<fim_suffix>
package br.gov.camara.edemocracia.portlets.guiadiscussao.beans.admin;

import java.io.Serializable;
import java.util.List;

import br.gov.camara.edemocracia.portlets.guiadiscussao.model.Acao;
import br.gov.camara.edemocracia.portlets.guiadiscussao.model.Fase;

public class DadosFaseDisplay implements Serializable {

	private static final long serialVersionUID = -1625645619273141514L;
	private Fa<fim_middle>","
 * Copyright (c) 2009-2014 Câmara dos Deputados. Todos os direitos reservados.
 *
 * e-Democracia é um software livre; você pode redistribuí-lo e/ou modificá-lo dentro
 * dos termos da Licença Pública Geral Menor GNU como publicada pela Fundação do 
 * Software Livre (FSF); na versão 2.1 da Licença, ou (na sua opinião) qualquer versão.
 *
 * Este programa é distribuído na esperança de que possa ser  útil, mas SEM NENHUMA GARANTIA;
 * sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR.
 * Veja a Licença Pública Geral Menor GNU para maiores detalhes. 
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package me.huiya.core.Type;

public enum Type {
    /**<fim_suffix>
    OK,

    /**
     * 에러
     */
    ERROR,
    
    /**
     * 결과가 등록되지 않음
     */
    RESULT_NOT_SET,

    /**
     * 값이 유효하지 않음
     */
    INVALID_VALUE,
}
<fim_middle>","
     * 성공
     */","
     * 성공
     */"
"<fim_prefix>package me.huiya.core.Type;

public enum Type {
    /**
     * 성공
     */
    OK,

    /**
     * 에러
     */
    ERROR,
    
    /**
     * 결과가 등록되지 않음
     */
    RESULT_NOT_SET,

    /**<fim_suffix>
    INVALID_VALUE,
}
<fim_middle>","
     * 값이 유효하지 않음
     */","
     * 값이 유효하지 않음
     */"
"<fim_prefix>package me.huiya.core.Type;

public enum Type {
    /**
     * 성공
     */
    OK,

    /**<fim_suffix>
    ERROR,
    
    /**
     * 결과가 등록되지 않음
     */
    RESULT_NOT_SET,

    /**
     * 값이 유효하지 않음
     */
    INVALID_VALUE,
}
<fim_middle>","
     * 에러
     */","
     * 실패
     */"
"<fim_prefix>package me.huiya.core.Type;

public enum Type {
    /**
     * 성공
     */
    OK,

    /**
     * 에러
     */
    ERROR,
    
    /**<fim_suffix>
    RESULT_NOT_SET,

    /**
     * 값이 유효하지 않음
     */
    INVALID_VALUE,
}
<fim_middle>","
     * 결과가 등록되지 않음
     */","
     * 결과가 설정되지 않음
     */"
"<fim_prefix>package cz.geokuk.util.exception;

import cz.geokuk.util.lang.AString0;

/**<fim_suffix>
public class AExcId extends AString0 {

  static final long serialVersionUID = -248904485707733102L;

  protected AExcId(String aValue) {
    super(aValue);
  }
  
  public static AExcId from(String s) {
    return s == null ? null : new AExcId(s);
  }

}
<fim_middle>","
 * Identifiakce výjimky. Jen obaluje řetězec, kvůli typovým kontrolám.
 * @author veverka
 *
 */","
 * Exception id.
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package com.jasonpercus.encryption.md5;<fim_middle>","
Ce package contient une classe permettant de calculer le md5 d'un objet/flux/fichier/...
*/","
 * @author JasonPercus
 *
 */"
"<fim_prefix>package osmo.tester.examples.tutorial.optimizer;

import osmo.tester.annotation.AfterTest;
import osmo.tester.examples.calendar.scripter.offline.OfflineScripter;
import osmo.tester.generator.testsuite.TestSuite;

/**<fim_suffix>
public class ScriptMob {
  private final OfflineScripter scripter;
  private TestSuite suite;

  public ScriptMob(OfflineScripter scripter) {
    this.scripter = scripter;
  }

  @AfterTest
  public void storeScript() {
    suite.getCurrentTest().setAttribute(""script"", scripter.getScript());
  }
}
<fim_middle>","
 * @author Teemu Kanstren.
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.cheng.bigtalkdesignpatterns.decorator;

import android.util.Log;

/**<fim_suffix>
public class Suit extends Finery {

    private static final String TAG = ""Suit"";

    @Override
    public void show() {
        Log.e(TAG, ""西装"" + stringBuilder);
        stringBuilder.append(""\n西装"");
        super.show();
    }
}
<fim_middle>","
 * 具体服饰类（ConcreteDecorator）
 */","
 * Created by cheng on 2017/9/7."
"<fim_prefix>/*<fim_suffix>
package org.jouvieje.FmodDesigner.Examples;

public class _Parameters
{

}
<fim_middle>","
 * Created on 14 juil. 08
 */","*
 * @author <NAME>
 */"
"<fim_prefix>package net.nanxu.payment.money;

import java.math.BigDecimal;
import reactor.core.publisher.Mono;

/**<fim_suffix>
public interface ExchangeRateConverter {

    Mono<BigDecimal> convert(Money money);

}
<fim_middle>","
 * 汇率转换器.
 *
 * @author: P
 **/","
 * 汇率转换器
 *
 * @author Nan
 * @date"
"<fim_prefix>.handler;

/**
 * Aufzählung verschiedener Spielereignisse.
 */
public enum GameEvent
{
    /**
     * Spielereignis, das ausgelöst wird, wenn der Ball als verloren gilt.
     */
    BALL_LOST,

    /**
     * Spielereignis, das ausgelöst wird, wenn der Ball gespawned wird.
     */
    BALL_SPAWNED,

    /**
     * Spielereignis, das ausgelöst wird, wenn das Spiel vorbei ist.
     */
    GAME_OVER,

    /**<fim_suffix>
    START,

    /**
     * Spielereignis, wenn das Spiel beendet wird.
     */
    PAUSE
}
<fim_middle>","
     * Spielereignis, wenn das Spiel gestartet wird.
     */","
     * Spielereignis, wenn das Spiel gestartet wird.
     */"
"<fim_prefix>package sep.fimball.model.handler;

/**
 * Aufzählung verschiedener Spielereignisse.
 */
public enum GameEvent
{
    /**
     * Spielereignis, das ausgelöst wird, wenn der Ball als verloren gilt.
     */
    BALL_LOST,

    /**<fim_suffix>
    BALL_SPAWNED,

    /**
     * Spielereignis, das ausgelöst wird, wenn das Spiel vorbei ist.
     */
    GAME_OVER,

    /**
     * Spielereignis, wenn das Spiel gestartet wird.
     */
    START,

    /**
     * Spielereignis, wenn das Spiel beendet wird.
     */
    PAUSE
}
<fim_middle>","
     * Spielereignis, das ausgelöst wird, wenn der Ball gespawned wird.
     */","
     * Spielereignis, das ausgelöst wird, wenn der Ball als gewonnen gilt.
    "
"<fim_prefix>package sep.fimball.model.handler;

/**
 * Aufzählung verschiedener Spielereignisse.
 */
public enum GameEvent
{
    /**<fim_suffix>
    BALL_LOST,

    /**
     * Spielereignis, das ausgelöst wird, wenn der Ball gespawned wird.
     */
    BALL_SPAWNED,

    /**
     * Spielereignis, das ausgelöst wird, wenn das Spiel vorbei ist.
     */
    GAME_OVER,

    /**
     * Spielereignis, wenn das Spiel gestartet wird.
     */
    START,

    /**
     * Spielereignis, wenn das Spiel beendet wird.
     */
    PAUSE
}
<fim_middle>","
     * Spielereignis, das ausgelöst wird, wenn der Ball als verloren gilt.
     */","
     * Spielereignis, das ausgelöst wird, wenn der Ball gewonnen wird.
     */"
"<fim_prefix>vent
{
    /**
     * Spielereignis, das ausgelöst wird, wenn der Ball als verloren gilt.
     */
    BALL_LOST,

    /**
     * Spielereignis, das ausgelöst wird, wenn der Ball gespawned wird.
     */
    BALL_SPAWNED,

    /**
     * Spielereignis, das ausgelöst wird, wenn das Spiel vorbei ist.
     */
    GAME_OVER,

    /**
     * Spielereignis, wenn das Spiel gestartet wird.
     */
    START,

    /**<fim_suffix>
    PAUSE
}
<fim_middle>","
     * Spielereignis, wenn das Spiel beendet wird.
     */","
     * Spielereignis, wenn das Spiel pausiert wird.
    "
"<fim_prefix>package sep.fimball.model.handler;

/**
 * Aufzählung verschiedener Spielereignisse.
 */
public enum GameEvent
{
    /**
     * Spielereignis, das ausgelöst wird, wenn der Ball als verloren gilt.
     */
    BALL_LOST,

    /**
     * Spielereignis, das ausgelöst wird, wenn der Ball gespawned wird.
     */
    BALL_SPAWNED,

    /**<fim_suffix>
    GAME_OVER,

    /**
     * Spielereignis, wenn das Spiel gestartet wird.
     */
    START,

    /**
     * Spielereignis, wenn das Spiel beendet wird.
     */
    PAUSE
}
<fim_middle>","
     * Spielereignis, das ausgelöst wird, wenn das Spiel vorbei ist.
     */","
     * Spielereignis, das ausgelöst wird, wenn der Ball gestoppt wird.
     */"
"<fim_prefix>package sep.fimball.model.handler;

/**<fim_suffix>
public enum GameEvent
{
    /**
     * Spielereignis, das ausgelöst wird, wenn der Ball als verloren gilt.
     */
    BALL_LOST,

    /**
     * Spielereignis, das ausgelöst wird, wenn der Ball gespawned wird.
     */
    BALL_SPAWNED,

    /**
     * Spielereignis, das ausgelöst wird, wenn das Spiel vorbei ist.
     */
    GAME_OVER,

    /**
     * Spielereignis, wenn das Spiel gestartet wird.
     */
  <fim_middle>","
 * Aufzählung verschiedener Spielereignisse.
 */","
 * Enumeration, die die verschiedenen Spielereignisse definiert."
"<fim_prefix>package org.zxp.jobexcutor.autocheck;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
/**<fim_suffix>
public @interface AutoCheckField {
    //如果字段上被此字段修饰，则被校验内容前缀会显示被注解的字段 显示（pojo字段名或CsvHead注解）
    boolean disUniq()default false;
    //字段校验配置注解
    boolean notNull()default false;//是否为空的注解配置 空不校验 true不允许为空
    String select()default """";//选择范围注解配置 空不校验 由于本框架限定，请配置时配置为 ,1,2,3,
    boolean isNotZero()default false;//是否不能为0 空不校验 true不允许为0
    AutoCheckFormat fieldformat()default AutoCheckFormat.none;//格式校验配置 空不<fim_middle>","*
 * 自动校验注解
 */","
 * 校验字段注解
 *"
"<fim_prefix>package cn.maple.core.framework.annotation;

import cn.maple.core.framework.constant.GXCommonConstant;
import cn.maple.core.framework.dto.res.GXBaseResDto;

import java.lang.annotation.*;

@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
public @interface GXCacheable {
    /**<fim_suffix>
    Class<? extends GXBaseResDto> retType() default GXBaseResDto.class;

    /**
     * 转换到指定类型可以指定该值来进行自定义转换规则
     */
    String methodName() default GXCommonConstant.DEFAULT_CUSTOMER_PROCESS_METHOD_NAME;

    /**
     * 缓存key
     */
    String cacheKey() default """";
}
<fim_middle>","
     * 如果命中缓存 将缓存的类型转换为该类型
     */","
     * 缓存key的前缀
     */"
"<fim_prefix>mport java.lang.annotation.*;

@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
public @interface GXCacheable {
    /**
     * 如果命中缓存 将缓存的类型转换为该类型
     */
    Class<? extends GXBaseResDto> retType() default GXBaseResDto.class;

    /**
     * 转换到指定类型可以指定该值来进行自定义转换规则
     */
    String methodName() default GXCommonConstant.DEFAULT_CUSTOMER_PROCESS_METHOD_NAME;

    /**<fim_suffix>
    String cacheKey() default """";
}
<fim_middle>","
     * 缓存key
     */","
     * 缓存的key
    "
"<fim_prefix>ramework.annotation;

import cn.maple.core.framework.constant.GXCommonConstant;
import cn.maple.core.framework.dto.res.GXBaseResDto;

import java.lang.annotation.*;

@Target({ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
public @interface GXCacheable {
    /**
     * 如果命中缓存 将缓存的类型转换为该类型
     */
    Class<? extends GXBaseResDto> retType() default GXBaseResDto.class;

    /**<fim_suffix>
    String methodName() default GXCommonConstant.DEFAULT_CUSTOMER_PROCESS_METHOD_NAME;

    /**
     * 缓存key
     */
    String cacheKey() default """";
}
<fim_middle>","
     * 转换到指定类型可以指定该值来进行自定义转换规则
     */","
     * 缓存key的前缀
     */"
"<fim_prefix>/**<fim_suffix>
package com.blzeecraft.virtualmenu.core.action.extension;

import com.blzeecraft.virtualmenu.core.conf.line.LineConfigParser;<fim_middle>","
 * 包含一些平台通用的动作实现. 这个包里的类需要在 {@link LineConfigParser} 注册.
 * @author colors_wind
 * @date 2020/1/24
 */","
 * @author blzee
 * @since 1.0.0
 */"
"<fim_prefix>/**<fim_suffix>

package br.com.hslife.orcamento.facade;

import java.util.List;

import br.com.hslife.orcamento.entity.ModeloDocumento;
import br.com.hslife.orcamento.entity.Usuario;

public interface IModeloDocumento extends ICRUDService<ModeloDocumento> {
	
	public List<ModeloDocumento> buscarDescricaoOuAtivoPorUsuario(String descricao, Boolean ativo, Usuario usuario);

}
<fim_middle>","*
  
  	Copyright (c) 2012 - 2020 Hércules S. S. José

    Este arquivo é parte do programa Orçamento Doméstico.
    

    Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou 

    modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como 

    publicada pela Fundação do Software Livre (FSF); na versão 2.1 da 

    Licença.
    

    Este programa é distribuído na esperança que possa ser útil, 

    mas SEM NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÂO a 
    
    qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública 
    
    Geral Menor GNU em português para maiores detalhes.
    

    Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob o 

    nome de ""LICENSE.TXT"" junto com este programa, se não, acesse o site do
    
    projeto no endereco https://github.com/herculeshssj/orcamento ou escreva 
    
    para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor, 
    
    Boston, MA  02110-1301, USA.
    

    Para mais informações sobre o programa Orçamento Doméstico e seu autor entre  

    em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva para 

    Hércules S. S. José, Av. Ministro Lafaeyte de Andrade, 1683 - Bl. 3 Apt 404, 

    Marco II - Nova Iguaçu, RJ, Brasil.
  
***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package org.dromara.common.excel.annotation;

import java.lang.annotation.*;

/**<fim_suffix>
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
public @interface ExcelEnumFormat {

    /**
     * 字典枚举类型
     */
    Class<? extends Enum<?>> enumClass();

    /**
     * 字典枚举类中对应的code属性名称，默认为code
     */
    String codeField() default ""code"";

    /**
     * 字典枚举类中对应的text属性名称，默认为text
     */
    String textField() default ""text"";

}
<fim_middle>","
 * 枚举格式化
 *
 * @author Liang
 */","
 * ExcelEnumFormat
 *
 * @author xiaoyu
 */"
"<fim_prefix>package org.dromara.common.excel.annotation;

import java.lang.annotation.*;

/**
 * 枚举格式化
 *
 * @author Liang
 */
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
public @interface ExcelEnumFormat {

    /**
     * 字典枚举类型
     */
    Class<? extends Enum<?>> enumClass();

    /**<fim_suffix>
    String codeField() default ""code"";

    /**
     * 字典枚举类中对应的text属性名称，默认为text
     */
    String textField() default ""text"";

}
<fim_middle>","
     * 字典枚举类中对应的code属性名称，默认为code
     */","
     * 字典枚举类中对应的code属性名称，默认为code
     */"
"<fim_prefix>package org.dromara.common.excel.annotation;

import java.lang.annotation.*;

/**
 * 枚举格式化
 *
 * @author Liang
 */
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
public @interface ExcelEnumFormat {

    /**
     * 字典枚举类型
     */
    Class<? extends Enum<?>> enumClass();

    /**
     * 字典枚举类中对应的code属性名称，默认为code
     */
    String codeField() default ""code"";

    /**<fim_suffix>
    String textField() default ""text"";

}
<fim_middle>","
     * 字典枚举类中对应的text属性名称，默认为text
     */","
     * 字典枚举类中对应的text属性名称，默认为text"
"<fim_prefix>package org.dromara.common.excel.annotation;

import java.lang.annotation.*;

/**
 * 枚举格式化
 *
 * @author Liang
 */
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
public @interface ExcelEnumFormat {

    /**<fim_suffix>
    Class<? extends Enum<?>> enumClass();

    /**
     * 字典枚举类中对应的code属性名称，默认为code
     */
    String codeField() default ""code"";

    /**
     * 字典枚举类中对应的text属性名称，默认为text
     */
    String textField() default ""text"";

}
<fim_middle>","
     * 字典枚举类型
     */","
     * 字典枚举类
     */"
"<fim_prefix>/**<fim_suffix>
package nami.connector.exception;

<fim_middle>","
 * Enthält Exceptions, die beim Zugriff auf NaMi auftreten können.
 */","
 * @author enricodelzotto
 */"
"<fim_prefix>package org.dromara.northstar.indicator.helper;

import java.util.List;

import org.dromara.northstar.indicator.AbstractIndicator;
import org.dromara.northstar.indicator.Indicator;
import org.dromara.northstar.indicator.model.Configuration;
import org.dromara.northstar.indicator.model.Num;

/**<fim_suffix>
public class HHVIndicator extends AbstractIndicator implements Indicator{

	private Indicator srcIndicator;
	
	public HHVIndicator(Configuration cfg, Indicator indicator) {
		super(cfg);
		this.srcIndicator = indicator;
	}
	
	@Override
	public List<Indicator> dependencies() {
		return List.of(srcIndicator);
	}

	@Override
	protected Num evaluate(Num num) {
		if(!srcIndicator.isReady()) {
			return Num.NaN()<fim_middle>","
 * 最大值指标
 * @author KevinHuangwl
 *
 */","
 * HHV指标
 * @author xiongshiyan
 */"
"<fim_prefix>package it.unisa.studenti.letsmeet.manager;

import it.unisa.studenti.letsmeet.model.SegnalazioneBean;
/**<fim_suffix>

public interface SegnalazioneDao extends Dao<SegnalazioneBean> {

}
<fim_middle>","
 * 
 * Interfaccia Dao per la classe SegnalazioneBean
 *
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package coloryr.colormirai.plugin.pack.to;

import coloryr.colormirai.plugin.pack.PackBase;

/**<fim_suffix>
public class BotReloginEventPack extends PackBase {
    /**
     * 原因消息
     */
    public String message;

    public BotReloginEventPack(long qq, String message) {
        this.message = message;
        this.qq = qq;
    }
}
<fim_middle>","
 * 16 [机器人]主动或被动重新登录（事件）
 */","
 * 机器人重新登录事件
 *
 * @author <NAME>
 *"
"<fim_prefix>package coloryr.colormirai.plugin.pack.to;

import coloryr.colormirai.plugin.pack.PackBase;

/**
 * 16 [机器人]主动或被动重新登录（事件）
 */
public class BotReloginEventPack extends PackBase {
    /**<fim_suffix>
    public String message;

    public BotReloginEventPack(long qq, String message) {
        this.message = message;
        this.qq = qq;
    }
}
<fim_middle>","
     * 原因消息
     */","
     * 机器人QQ
    "
"<fim_prefix>package com.github.erozabesu.yplkart.enumdata;

/**<fim_suffix>
public enum KartType {

    /** レース用カート */
    RacingKart,

    /** 展示用カート */
    DisplayKart,

    /** 一般車両 */
    DriveKart;
}
<fim_middle>","
 * カートの種類
 * @author erozabesu
 */","
 * カート種別
 *
 * @author weikun."
"<fim_prefix>package com.github.erozabesu.yplkart.enumdata;

/**
 * カートの種類
 * @author erozabesu
 */
public enum KartType {

    /**<fim_suffix>
    RacingKart,

    /** 展示用カート */
    DisplayKart,

    /** 一般車両 */
    DriveKart;
}
<fim_middle>", レース用カート */, ランニングカート
"<fim_prefix>package com.github.erozabesu.yplkart.enumdata;

/**
 * カートの種類
 * @author erozabesu
 */
public enum KartType {

    /** レース用カート */
    RacingKart,

    /**<fim_suffix>
    DisplayKart,

    /** 一般車両 */
    DriveKart;
}
<fim_middle>", 展示用カート */, 展示用カート */
"<fim_prefix>package com.github.erozabesu.yplkart.enumdata;

/**
 * カートの種類
 * @author erozabesu
 */
public enum KartType {

    /** レース用カート */
    RacingKart,

    /** 展示用カート */
    DisplayKart,

    /**<fim_suffix>
    DriveKart;
}
<fim_middle>", 一般車両 */, ドライブ用カート
"<fim_prefix>/*
 * Sämtliche Werknutzungs-und Verwertungsrechte an dieser Software liegen beim Hauptverband der österreichischen
 * Sozialversicherungsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */
package at.chipkarte.client.kse.soap.constants;

/**<fim_suffix>
public class AnfrageStatus {

  /**
   * Die Anfrage ist am e-card Serversystem in Bearbeitung.
   */
  public static final int IN_ARBEIT = 0;

  /**
   * Die Anfrage ist vom e-card Serversystem bearbeitet worden und zum Download bereit.
   */
  public static final int FERTIG = 1;

  /**
   * Die Anfrage wurde bereits downgeloadet.
   */
  public static final int ABGEHOLT = 2;

  /**
   *<fim_middle>","
 * Konstanten für den Anfragestatus.
 */","
 * Die Anfragestatus-Konstanten.
 *"
"<fim_prefix> beim Hauptverband der österreichischen
 * Sozialversicherungsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */
package at.chipkarte.client.kse.soap.constants;

/**
 * Konstanten für den Anfragestatus.
 */
public class AnfrageStatus {

  /**
   * Die Anfrage ist am e-card Serversystem in Bearbeitung.
   */
  public static final int IN_ARBEIT = 0;

  /**<fim_suffix>
  public static final int FERTIG = 1;

  /**
   * Die Anfrage wurde bereits downgeloadet.
   */
  public static final int ABGEHOLT = 2;

  /**
   * Die Verarbeitung war fehlerhaft. Der Download steht nicht zur Verfügung.
   */
  public static final int FEHLER = 3;

}
<fim_middle>","
   * Die Anfrage ist vom e-card Serversystem bearbeitet worden und zum Download bereit.
   */","
   * Die Anfrage wurde erfolgreich abgeschlossen.
   */"
"<fim_prefix>
 */
public class AnfrageStatus {

  /**
   * Die Anfrage ist am e-card Serversystem in Bearbeitung.
   */
  public static final int IN_ARBEIT = 0;

  /**
   * Die Anfrage ist vom e-card Serversystem bearbeitet worden und zum Download bereit.
   */
  public static final int FERTIG = 1;

  /**
   * Die Anfrage wurde bereits downgeloadet.
   */
  public static final int ABGEHOLT = 2;

  /**<fim_suffix>
  public static final int FEHLER = 3;

}
<fim_middle>","
   * Die Verarbeitung war fehlerhaft. Der Download steht nicht zur Verfügung.
   */","
   * Die Anfrage ist fehlerhaft."
"<fim_prefix>agt.
 */
package at.chipkarte.client.kse.soap.constants;

/**
 * Konstanten für den Anfragestatus.
 */
public class AnfrageStatus {

  /**
   * Die Anfrage ist am e-card Serversystem in Bearbeitung.
   */
  public static final int IN_ARBEIT = 0;

  /**
   * Die Anfrage ist vom e-card Serversystem bearbeitet worden und zum Download bereit.
   */
  public static final int FERTIG = 1;

  /**<fim_suffix>
  public static final int ABGEHOLT = 2;

  /**
   * Die Verarbeitung war fehlerhaft. Der Download steht nicht zur Verfügung.
   */
  public static final int FEHLER = 3;

}
<fim_middle>","
   * Die Anfrage wurde bereits downgeloadet.
   */","
   * Die Anfrage wurde vom e-card Serversystem abgeholt."
"<fim_prefix>/*<fim_suffix>
package at.chipkarte.client.kse.soap.constants;

/**
 * Konstanten für den Anfragestatus.
 */
public class AnfrageStatus {

  /**
   * Die Anfrage ist am e-card Serversystem in Bearbeitung.
   */
  public static final int IN_ARBEIT = 0;

  /**
   * Die Anfrage ist vom e-card Serversystem bearbeitet worden und zum Download bereit.
   */
  public static final int FERTIG = 1;

  /**
   * Die<fim_middle>","
 * Sämtliche Werknutzungs-und Verwertungsrechte an dieser Software liegen beim Hauptverband der österreichischen
 * Sozialversicherungsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */","*
 * Konstanten für den Anfragestatus.
 */"
"<fim_prefix>/*
 * Sämtliche Werknutzungs-und Verwertungsrechte an dieser Software liegen beim Hauptverband der österreichischen
 * Sozialversicherungsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */
package at.chipkarte.client.kse.soap.constants;

/**
 * Konstanten für den Anfragestatus.
 */
public class AnfrageStatus {

  /**<fim_suffix>
  public static final int IN_ARBEIT = 0;

  /**
   * Die Anfrage ist vom e-card Serversystem bearbeitet worden und zum Download bereit.
   */
  public static final int FERTIG = 1;

  /**
   * Die Anfrage wurde bereits downgeloadet.
   */
  public static final int ABGEHOLT = 2;

  /**
   * Die Verarbeitung war fehlerhaft. Der Download steht nicht zur Verfügung.
   */
  public static final int<fim_middle>","
   * Die Anfrage ist am e-card Serversystem in Bearbeitung.
   */","
   * Die Anfrage ist noch nicht vom e-card Serversystem bearbeitet worden.
 "
"<fim_prefix>package ru.ecom.ejb.services.entityform.interceptors;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import static java.lang.annotation.ElementType.TYPE;

/**<fim_suffix>
@Retention(RetentionPolicy.RUNTIME)
@Target({TYPE})
public @interface AViewInterceptors {
     AEntityFormInterceptor[] value() ;
}
<fim_middle>","
 * При просмотре формы
 */","
 * Created by <NAME> on 14."
"<fim_prefix>package nl.itopia.corendon.utils;

import java.net.URL;

/**<fim_suffix>
public class IO {
    
    public static URL get(String path) {
        return get(path, true);
    }

    public static URL get(String path, boolean useClassLoader) {
        if(useClassLoader) {
            return IO.class.getClassLoader().getResource(path);
        } else {
            return IO.class.getResource(path);
        }
    }
}
<fim_middle>","
 * Â© 2014, Biodiscus.net robin
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package br.gov.camara.edemocracia.portlets.priorizacao;

import com.liferay.portal.kernel.exception.PortalException;

/**
 * Exceção lançada ao tentar alterar a configuração e existir um ou mais
 * usuários que não satisfaz a nova condição para o número total de votos
 * 
 * @author p_7339
 * 
 */
public class UsuariosComMaisVotosTotaisException extends PortalException {

}
<fim_middle>","
 * Copyright (c) 2009-2014 Câmara dos Deputados. Todos os direitos reservados.
 *
 * e-Democracia é um software livre; você pode redistribuí-lo e/ou modificá-lo dentro
 * dos termos da Licença Pública Geral Menor GNU como publicada pela Fundação do 
 * Software Livre (FSF); na versão 2.1 da Licença, ou (na sua opinião) qualquer versão.
 *
 * Este programa é distribuído na esperança de que possa ser  útil, mas SEM NENHUMA GARANTIA;
 * sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR.
 * Veja a Licença Pública Geral Menor GNU para maiores detalhes. 
 */","
 * 
 * @author p_7339
 * 
 */"
"<fim_prefix>ião) qualquer versão.
 *
 * Este programa é distribuído na esperança de que possa ser  útil, mas SEM NENHUMA GARANTIA;
 * sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR.
 * Veja a Licença Pública Geral Menor GNU para maiores detalhes. 
 */
package br.gov.camara.edemocracia.portlets.priorizacao;

import com.liferay.portal.kernel.exception.PortalException;

/**<fim_suffix>
public class UsuariosComMaisVotosTotaisException extends PortalException {

}
<fim_middle>","
 * Exceção lançada ao tentar alterar a configuração e existir um ou mais
 * usuários que não satisfaz a nova condição para o número total de votos
 * 
 * @author p_7339
 * 
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package ltd.kumo.plutomc.framework.bukkit.hologram;

import ltd.kumo.plutomc.framework.bukkit.player.BukkitPlayer;
import org.bukkit.inventory.ItemStack;
import org.jetbrains.annotations.NotNull;

import java.util.function.Function;

/**<fim_suffix>
public interface WallpaperHologram extends Hologram {

    @NotNull
    Function<BukkitPlayer, ItemStack> getItem();

    void setItem(@NotNull Function<BukkitPlayer, ItemStack> item);

}
<fim_middle>","
 * 一种物品显示，放一个假的物品展示框，并在上面放一个假物品，并使物品展示框不可见
 */","
 * 墙纸悬浮物
 *
 * @author kumo
 */"
"<fim_prefix>package cn.schoolwow.quickdao.annotation;

import java.lang.annotation.*;

/**
 * 在字段上建立索引
 */
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(Indexes.class)
public @interface Index {
    /**
     * 索引类型
     */
    IndexType indexType() default IndexType.NORMAL;

    /**<fim_suffix>
    String indexName() default """";

    /**
     * 索引方法
     */
    String using() default """";

    /**
     * 索引注释
     */
    String comment() default """";
}
<fim_middle>","
     * 索引名称
     */","
     * 索引名称
     */"
"<fim_prefix>package cn.schoolwow.quickdao.annotation;

import java.lang.annotation.*;

/**<fim_suffix>
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(Indexes.class)
public @interface Index {
    /**
     * 索引类型
     */
    IndexType indexType() default IndexType.NORMAL;

    /**
     * 索引名称
     */
    String indexName() default """";

    /**
     * 索引方法
     */
    String using() default """";

    /**
     * 索引注释
     */
    String comment() default """";
}
<fim_middle>","
 * 在字段上建立索引
 */","
 * 索引注解
 *
 *"
"<fim_prefix>package cn.schoolwow.quickdao.annotation;

import java.lang.annotation.*;

/**
 * 在字段上建立索引
 */
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(Indexes.class)
public @interface Index {
    /**
     * 索引类型
     */
    IndexType indexType() default IndexType.NORMAL;

    /**
     * 索引名称
     */
    String indexName() default """";

    /**<fim_suffix>
    String using() default """";

    /**
     * 索引注释
     */
    String comment() default """";
}
<fim_middle>","
     * 索引方法
     */","
     * 索引字段
     */"
"<fim_prefix>hoolwow.quickdao.annotation;

import java.lang.annotation.*;

/**
 * 在字段上建立索引
 */
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(Indexes.class)
public @interface Index {
    /**
     * 索引类型
     */
    IndexType indexType() default IndexType.NORMAL;

    /**
     * 索引名称
     */
    String indexName() default """";

    /**
     * 索引方法
     */
    String using() default """";

    /**<fim_suffix>
    String comment() default """";
}
<fim_middle>","
     * 索引注释
     */","
     * 索引字段
     */"
"<fim_prefix>package cn.schoolwow.quickdao.annotation;

import java.lang.annotation.*;

/**
 * 在字段上建立索引
 */
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Repeatable(Indexes.class)
public @interface Index {
    /**<fim_suffix>
    IndexType indexType() default IndexType.NORMAL;

    /**
     * 索引名称
     */
    String indexName() default """";

    /**
     * 索引方法
     */
    String using() default """";

    /**
     * 索引注释
     */
    String comment() default """";
}
<fim_middle>","
     * 索引类型
     */","
     * 索引类型
     */"
"<fim_prefix>datée 0.81
    { 25, 44, 43, 65, 153, 43, 171, 64 }, //Map 16 : Vérifiée & Updatée 0.81
    { 12, 44, 38, 60, 163, 44, 189, 60 }, //Map 17 : Vérifiée & Updatée 0.81
    { 29, 43, 58, 69, 163, 12, 200, 41 }, //Map 18 : Vérifiée & Updatée 0.81
    { 17, 41, 43, 55, 159, 41, 185, 55 }, //Map 19 : Vérifiée & Updatée 0.81
    { 61, 52, 90, 66, 179, 42, 200, 55 } //Map 20 : Vérifiée & Updatée 0.82
    };
  

  /*<fim_suffix>


  public static final int[] mires = { 700, 464, 370, 510, 437, 325, 630, 550, 560, 500, 548, 475, 535, 558, 940, 475, 548, 502, 595, 495, 469 };
}
<fim_middle>"," Explications Coordonnées
   * A, B, C, D (gauche) => Frigo Gauche
   * A, B = Pixel haut gauche A = X et B = Y
   * C => Pixel haut droite C = X
   * D => Pixel bas gauche D = Y
   * (Pareil pour frigo droite)
   * 
   * Explications Mires
   * Prendre le pixel de la ligne du milieu en Y
   */","*
   * @param mapId
   * @return
   */"
"<fim_prefix>package dia01.laboratorio4.exercicio;

/*<fim_suffix>

public class Exercicio_2 {

    public static void main(String[] args) {

    }

}<fim_middle>","
Crie um método chamado calcular que receba 3 parâmetros.
Os dois primeiros parâmetros devem ser números inteiros e o terceiro parâmetro deve receber uma BiFunction.

Ao invocar este método passe como parâmetro uma BiFunction que irá multiplicar os 2 numeros recebidos no método calcular.
Após executar o método criado imprima no console o valor retornado.
* */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>package cn.foxtech.device.protocol.v1.dahua.fire.core.entity.infobj;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;


/**<fim_suffix>
@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class InfObjGeneralDataEntity extends InfObjGeneralEntity {
}

<fim_middle>","
 * 信息对象: 注册包
 */","
 * 通用数据
 *
 * @"
"<fim_prefix>package io.metersphere.commons.constants;

public enum ReportTriggerMode {
    MANUAL,
    SCHEDULE,
    API,
    /**<fim_suffix>
    CASE,
    TEST_PLAN_SCHEDULE
}
<fim_middle>","
     * 性能测试用例执行触发报告
     */","
     * This is used to trigger report generation for a test"
"<fim_prefix>package com.eeeab.eeeabsmobs.sever.entity;

/**<fim_suffix>
public interface IEntity {
}
<fim_middle>","
 * 仅作为标识符,代表模组实体
 */","
 * Created by Zheng on 3/30/16.
"
"<fim_prefix>package moe.caa.multilogin.api.internal.handle;

import lombok.AllArgsConstructor;
import lombok.Getter;
import org.jetbrains.annotations.ApiStatus;

/**<fim_suffix>
@Getter
@ApiStatus.Internal
@AllArgsConstructor
public class HandleResult {
    // 通讯结果类型
    private final Type type;
    // 如果踢出，显示踢出消息
    private final String kickMessage;

    public enum Type {
        NONE,
        KICK;
    }
}
<fim_middle>","
 * 表示一个通讯结果
 */","
 * 通讯结果
 *
"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.component.ultramonkey.process;
<fim_middle>","
 * <p>
 *  UltraMonkeyの制御機能の実装クラスを提供します。
 * </p>
 */","
 * @author yamamoto
 *
 */"
"<fim_prefix>package br.univali.portugol.nucleo.asa;

/**<fim_suffix>
public enum Quantificador
{
    /**
     * Esta enumeração define que o valor retornado na função ou recebido por parâmetro
     * será um único valor.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro exemploQuantificador()
     *      {
     *           escreva(""O quantificador desta função é: VALOR"")
     *      }
     * 
     * </pre></code>
     * 
     *<fim_middle>","
 * Utilizado em declarações de funções para quantificar os parâmetros e o retorno 
 * da função.
 * 
 * @author Luiz Fernando Noschang
 * @version 1.0
 */","
 * Enumeração que define o tipo de valor que será retornado na função ou recebido por parâmetro.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>sta enumeração define que o valor retornado na função ou recebido por parâmetro
     * será um único valor.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro exemploQuantificador()
     *      {
     *           escreva(""O quantificador desta função é: VALOR"")
     *      }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */
    VALOR, 
    
    /**<fim_suffix>
    VETOR, 
    
    /**
     * Esta enumeração define que o valor retornado na função ou recebido por parâmetro
     * será uma matriz. Este quantificador é definido pelo operador '[][]'.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro[][] exemploQuantificador(inteiro param1[][])
     *      {
     *           escreva(""O quantificador da função é MATRIZ."")
    <fim_middle>","
     * Esta enumeração define que o valor retornado na função ou recebido por parãmetro
     * será um vetor. Este quantificador é definido pelo operador '[]'.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro[] exemploQuantificador(inteiro param1[])
     *      {
     *           escreva(""O quantificador da função é VETOR."")
     *           escreva(""O quantificador do parâmetro 'param1' também é VETOR."")
     *      }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */","
     * Esta enumeração define que o valor retornado na função ou recebido por parâmetro
     * será um vetor. Este quantificador é definido pelo operador '[]'.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro[] exemploQuantificador(inteiro param1[])
     *      {
     *           escreva(""O quantificador da função é VETOR."")
     *      }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */"
"<fim_prefix>ador '[]'.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro[] exemploQuantificador(inteiro param1[])
     *      {
     *           escreva(""O quantificador da função é VETOR."")
     *           escreva(""O quantificador do parâmetro 'param1' também é VETOR."")
     *      }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */
    VETOR, 
    
    /**<fim_suffix>
    MATRIZ
}
<fim_middle>","
     * Esta enumeração define que o valor retornado na função ou recebido por parâmetro
     * será uma matriz. Este quantificador é definido pelo operador '[][]'.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro[][] exemploQuantificador(inteiro param1[][])
     *      {
     *           escreva(""O quantificador da função é MATRIZ."")
     *           escreva(""O quantificador do parâmetro 'param1' também é MATRIZ."")
     *      }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */","
     * Indica que o parâmetro é uma matriz.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro[][] exemploQuantificador(inteiro param1[][])
     *      {
     *           escreva(""O quantificador da função é MATRIZ."")
     *           escreva(""O quantificador do parâmetro 'param1' também é MATRIZ."")
     *      }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */"
"<fim_prefix>package br.univali.portugol.nucleo.asa;

/**
 * Utilizado em declarações de funções para quantificar os parâmetros e o retorno 
 * da função.
 * 
 * @author Luiz Fernando Noschang
 * @version 1.0
 */
public enum Quantificador
{
    /**<fim_suffix>
    VALOR, 
    
    /**
     * Esta enumeração define que o valor retornado na função ou recebido por parãmetro
     * será um vetor. Este quantificador é definido pelo operador '[]'.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro[] exemploQuantificador(inteiro param1[])
     *      {
     *           escreva(""O quantificador da função é VETOR."")
     *       <fim_middle>","
     * Esta enumeração define que o valor retornado na função ou recebido por parâmetro
     * será um único valor.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro exemploQuantificador()
     *      {
     *           escreva(""O quantificador desta função é: VALOR"")
     *      }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */","
     * Esta enumeração define que o valor retornado na função ou recebido por parãmetro
     * será um inteiro. Este quantificador é definido pelo operador '()'.
     * <p>
     * Exemplo:
     * <code><pre>
     * 
     *      funcao inteiro exemploQuantificador(inteiro param1)
     *      {
     *           escreva(""O quantificador da função é INTEIRO."")
     *           retorne(param1)
     *     "
"<fim_prefix>package com.iohao.game.common.kit.adapter;


import java.io.Serial;

/**<fim_suffix>
class HuUtilException extends RuntimeException {
    @Serial
    private static final long serialVersionUID = 8247610319171014183L;

    public HuUtilException(Throwable e) {
        super(HuExceptionUtil.getMessage(e), e);
    }

    public HuUtilException(String messageTemplate, Object... params) {
        super(HuStrUtil.format(messageTemplate, params));
    }

    public HuUtilException(Throwable throwa<fim_middle>","
 * @author 渔民小镇
 * @date 2023-01-19
 */","
 * 异常工具类
 *
 * @author 刘斌
 * @version 1"
"<fim_prefix>package org.openyu.mix.activity.vo.target;

import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.sun.xml.bind.AnyTypeAdapter;

/**<fim_suffix>
@XmlJavaTypeAdapter(AnyTypeAdapter.class)
public interface SpTargetActivity extends TargetActivity
{
	String KEY = SpTargetActivity.class.getName();

}
<fim_middle>","
 * 技能經驗目標活動
 */","
 * 
 * <p>
 * 目标"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.component.windows;
<fim_middle>","
 * <p>
 *  windowsコンポーネントに関する制御機能を提供します。
 * </p>
 */","
 * @author yamamoto
 *
 */"
"<fim_prefix>package com.supermap.desktop.geometry.Abstract;

/**<fim_suffix>
public interface ILineMFeature extends ITypeFeature, IFlatFeature {

}
<fim_middle>","
 * 表示二维路由数据
 * 
 * @author highsad
 *
 */","
 * @author heykb
 * @date:2017/4/25
 */"
"<fim_prefix>package com.tun.app.iats_app.Observer;

/**<fim_suffix>

public interface Function {

    void function(Object... data);
}<fim_middle>","
 * 作者：TanTun
 * 时间：2018/7/21
 * 邮箱：32965926@qq.com
 * 描述：
 */","
 * Created by Administrator on 2016/3/17.
 */"
"<fim_prefix>package org.sinrel.engine.library.cryption;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.apache.commons.codec.digest.DigestUtils;

public abstract class MD5 {

	/**<fim_suffix>
	public static String md5Hex(String s) {
		return DigestUtils.md5Hex(s);
	}

	/**
	 * @param s обрабатываемая строка
	 * @return MD5 строки
	 */
	public static String md5( String s ) {
		return new String( DigestUtils.md5(s) );
	}
	
	public static byte[] md5( byte[] s ) {
		return DigestUtils.md5( s );
	}
	
	/**
	 * @param f обрабатываемый файл
	 * @return MD5 файла в hex, если вызвано исключение возвращает<fim_middle>","
	 * @param s обрабатываемая строка
	 * @return MD5 строки в Hex
	 */","
	 * @param f обрабатываемый файл
	 * @return MD5 файла в hex
	 */"
"<fim_prefix> abstract class MD5 {

	/**
	 * @param s обрабатываемая строка
	 * @return MD5 строки в Hex
	 */
	public static String md5Hex(String s) {
		return DigestUtils.md5Hex(s);
	}

	/**
	 * @param s обрабатываемая строка
	 * @return MD5 строки
	 */
	public static String md5( String s ) {
		return new String( DigestUtils.md5(s) );
	}
	
	public static byte[] md5( byte[] s ) {
		return DigestUtils.md5( s );
	}
	
	/**<fim_suffix>
	public static String getMD5(File f) throws IOException {
		FileInputStream fis = new FileInputStream(f);
		return DigestUtils.md5Hex(fis);
	}

}<fim_middle>","
	 * @param f обрабатываемый файл
	 * @return MD5 файла в hex, если вызвано исключение возвращает пустую строку
	 * @throws IOException
	 */","
	 * @param f файл
	 * @return MD5 строки в Hex
	 * @throws IOException
	 */"
"<fim_prefix>package org.sinrel.engine.library.cryption;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import org.apache.commons.codec.digest.DigestUtils;

public abstract class MD5 {

	/**
	 * @param s обрабатываемая строка
	 * @return MD5 строки в Hex
	 */
	public static String md5Hex(String s) {
		return DigestUtils.md5Hex(s);
	}

	/**<fim_suffix>
	public static String md5( String s ) {
		return new String( DigestUtils.md5(s) );
	}
	
	public static byte[] md5( byte[] s ) {
		return DigestUtils.md5( s );
	}
	
	/**
	 * @param f обрабатываемый файл
	 * @return MD5 файла в hex, если вызвано исключение возвращает пустую строку
	 * @throws IOException
	 */
	public static String getMD5(File f) throws IOException {
		FileInputStream fis = new FileInputStream<fim_middle>","
	 * @param s обрабатываемая строка
	 * @return MD5 строки
	 */","
	 * @param s обрабатываемая строка
	 * @return MD5 строки в Hex
"
"<fim_prefix>package crucian.benchmark;

import vnreal.network.substrate.SubstrateNetwork;
import vnreal.network.virtual.VirtualNetwork;

/**<fim_suffix>
public interface MappingAlgorithm {
    /**
     * 初始化，例如初始化底层网络资源的统计信息，以便后续增量更新
     *
     * @param substrateNetwork 底层网络
     */
    public void initialize(SubstrateNetwork substrateNetwork);

    /**
     * 映射
     *
     * @param substrateNetwork 底层网络
     * @param virtualNetwork   虚拟网络
     * @throws Exception
     */
    public void map(SubstrateNetwork substrateNetwork, VirtualNetwork virtualNetwork<fim_middle>","
 * @author LiRuiNet
 *         14-2-28 上午9:47
 */","
 * 映射算法
 *
 * @author <EMAIL>
 * @date 2020/6/2 10:58 上午
 */"
"<fim_prefix>package crucian.benchmark;

import vnreal.network.substrate.SubstrateNetwork;
import vnreal.network.virtual.VirtualNetwork;

/**
 * @author LiRuiNet
 *         14-2-28 上午9:47
 */
public interface MappingAlgorithm {
    /**
     * 初始化，例如初始化底层网络资源的统计信息，以便后续增量更新
     *
     * @param substrateNetwork 底层网络
     */
    public void initialize(SubstrateNetwork substrateNetwork);

    /**<fim_suffix>
    public void map(SubstrateNetwork substrateNetwork, VirtualNetwork virtualNetwork) throws Exception;
}
<fim_middle>","
     * 映射
     *
     * @param substrateNetwork 底层网络
     * @param virtualNetwork   虚拟网络
     * @throws Exception
     */","
     * 映射
     *
     * @param substrateNetwork 底层网络
     * @param virtualNetwork   虚拟网络
     * @throws Exception
     */"
"<fim_prefix>package crucian.benchmark;

import vnreal.network.substrate.SubstrateNetwork;
import vnreal.network.virtual.VirtualNetwork;

/**
 * @author LiRuiNet
 *         14-2-28 上午9:47
 */
public interface MappingAlgorithm {
    /**<fim_suffix>
    public void initialize(SubstrateNetwork substrateNetwork);

    /**
     * 映射
     *
     * @param substrateNetwork 底层网络
     * @param virtualNetwork   虚拟网络
     * @throws Exception
     */
    public void map(SubstrateNetwork substrateNetwork, VirtualNetwork virtualNetwork) throws Exception;
}
<fim_middle>","
     * 初始化，例如初始化底层网络资源的统计信息，以便后续增量更新
     *
     * @param substrateNetwork 底层网络
     */","
     * 初始化
     *
     * @param substrateNetwork 底层网络
     */"
"<fim_prefix>package sortUtils;

/**<fim_suffix>
public interface SortTemplate {
    int[] sort(int[] array) throws Exception;

}
<fim_middle>","
 * 排序算法的接口。
 * 通过接口的方法，可以大致看到必须要实现的算法
 */","
 * Created by <NAME> on 10/12/2016.
 */"
"<fim_prefix>package org.openyu.commons.dao;

/**<fim_suffix>
public interface CommonDao extends JdbcDao, GenericDao {

}
<fim_middle>","
 * 通用Dao
 * 
 * JdbcDao+GenericDao
 */","
 * Created by xiaodong on 2016/11/29.
 */"
"<fim_prefix>package cn.foxtech.device.protocol.v1.opcua.entity;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class OpcUaDataEntity {
    /**<fim_suffix>
    private String objectName;

    /**
     * 节点ID：opc设备侧的节点ID，它在设备内具有唯一性
     */
    private OpcUaNodeId nodeId;

    /**
     * 节点名称：opc设备侧的节点名，实际上它只在同一个父亲节点下名称唯一，但是在设备中可不唯一，它更多的是作为描述信息
     */
    private String nodeName;

    /**
     * 数据类型：opc设备侧的节点数值的数据类型
     */
    private String type;
}
<fim_middle>","
     * 对象名称：用户自定义的名称，在设备内部唯一
     */","
     * 对象名称：opc设备侧的节点名，实际上它只在同一个父亲"
"<fim_prefix>package cn.foxtech.device.protocol.v1.opcua.entity;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class OpcUaDataEntity {
    /**
     * 对象名称：用户自定义的名称，在设备内部唯一
     */
    private String objectName;

    /**
     * 节点ID：opc设备侧的节点ID，它在设备内具有唯一性
     */
    private OpcUaNodeId nodeId;

    /**<fim_suffix>
    private String nodeName;

    /**
     * 数据类型：opc设备侧的节点数值的数据类型
     */
    private String type;
}
<fim_middle>","
     * 节点名称：opc设备侧的节点名，实际上它只在同一个父亲节点下名称唯一，但是在设备中可不唯一，它更多的是作为描述信息
     */","
     * 节点名称：opc设备侧的节点名称，在设备内具有唯一性
     */"
"<fim_prefix>ter;
import lombok.Setter;

@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class OpcUaDataEntity {
    /**
     * 对象名称：用户自定义的名称，在设备内部唯一
     */
    private String objectName;

    /**
     * 节点ID：opc设备侧的节点ID，它在设备内具有唯一性
     */
    private OpcUaNodeId nodeId;

    /**
     * 节点名称：opc设备侧的节点名，实际上它只在同一个父亲节点下名称唯一，但是在设备中可不唯一，它更多的是作为描述信息
     */
    private String nodeName;

    /**<fim_suffix>
    private String type;
}
<fim_middle>","
     * 数据类型：opc设备侧的节点数值的数据类型
     */","
     * 数据类型：opc设备侧的数据类型，它在设备中具有唯一性
"
"<fim_prefix>package cn.foxtech.device.protocol.v1.opcua.entity;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class OpcUaDataEntity {
    /**
     * 对象名称：用户自定义的名称，在设备内部唯一
     */
    private String objectName;

    /**<fim_suffix>
    private OpcUaNodeId nodeId;

    /**
     * 节点名称：opc设备侧的节点名，实际上它只在同一个父亲节点下名称唯一，但是在设备中可不唯一，它更多的是作为描述信息
     */
    private String nodeName;

    /**
     * 数据类型：opc设备侧的节点数值的数据类型
     */
    private String type;
}
<fim_middle>","
     * 节点ID：opc设备侧的节点ID，它在设备内具有唯一性
     */","
     * 对象ID：设备内部唯一
     */"
"<fim_prefix>package fr.gouv.beta.fabnum.kelrisks.persistance.referentiel;

import fr.gouv.beta.fabnum.commun.persistance.IAbstractDAO;
import fr.gouv.beta.fabnum.kelrisks.transverse.referentiel.entities.SecteurInformationSol;

import java.util.List;

import org.geolatte.geom.Geometry;

/**<fim_suffix>
public interface ISecteurInformationSolDAO extends IAbstractDAO<SecteurInformationSol> {
    
    List<SecteurInformationSol> rechercherSecteursDansPolygon(Geometry polygon);
    
    List<SecteurInformationSol> rechercherSecteursDansPolygons(List<Geometry> polygons);
}
  <fim_middle>","
 * Classe interface d'accès DAO à SecteurInformationSol
 */","
 *
 * @author <NAME> <<EMAIL>>
 *
"
"<fim_prefix>/**<fim_suffix>
package poc.jbehave;<fim_middle>","
 * <p>Ce paquetage contient :
 * <ul>
 * <li>la classe {@link poc.jbehave.AllStoriesTest}, pour l'exécution des scénarii de test ;</li>
 * <li>des sous-paquetages pour la définition des étapes des scénarii JBehave.</li>
 * </ul>
 * </p>
 * 
 * @author Xavier Pigeon
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package top.alumopper.mcfpp.exception;

/**<fim_suffix>
public class ArgumentNotMatchException extends RuntimeException {
    public ArgumentNotMatchException(String s) {
        super(s);
    }
}
<fim_middle>","
 * 当参数不正确时抛出此异常。例如参数类型错误，参数数量不匹配等。
 */","
 * @author alumopper
 * @date 2021/3/4 22:00
 */"
"<fim_prefix>package com.easyink.wecom.domain.vo.autotag.keyword;

import com.easyink.wecom.domain.vo.autotag.TagInfoVO;
import com.easyink.wecom.domain.vo.autotag.TagRuleUserListVO;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import java.util.List;

/**<fim_suffix>
@Data
public class TagRuleKeywordInfoVO extends TagRuleUserListVO {

    @ApiModelProperty(""模糊匹配关键词列表"")
    private List<String> fuzzyMatchKeywordList;
    @ApiModelProperty(""精确匹配关键词列表"")
    private List<String> exactMatchKeywordList;
    @ApiModelProperty(""标签名称列表"")
    private List<TagInfoVO> tagList;
}
<fim_middle>","
 * 关键词规则详情
 *
 * @author tigger
 * 2022/2/28 15:03
 **/","
 * 标签规则关键词信息
 *
 * @author 田径
 * @date 2021-12-03 16:"
"<fim_prefix>package club.xiaojiawei.enums;

/**
 * @author 肖嘉威 xjw580@qq.com
 * @date 2024/3/7 10:59
 */
public enum StylesheetEnum {
    /**<fim_suffix>
    COMMON(),

    ACCORDION(),

    BUTTON(),

    CHECK_BOX(),

    COMBO_BOX(),

    CONTEXT_MENU(),

    JAVAFX_UI(),

    LABEL(),

    PROGRESS(),

    RADIO_BUTTON(),

    SCROLL_BAR(),

    TAB_PANE(),

    TABLE_VIEW(),

    TEXT_AREA(),

    TEXT_FILED(),

    TITLE(),

    TITLED_PANE(),

    TOGGLE_BUTTON(),

}
<fim_middle>","
     * 通用样式表，一般不需要自行添加
     */","
     * 通用样式
     */"
"<fim_prefix>rt java.lang.annotation.RetentionPolicy;

/** 用于构造查询条件 */
@java.lang.annotation.Inherited
@java.lang.annotation.Target({ElementType.FIELD})
@java.lang.annotation.Retention(RetentionPolicy.RUNTIME)
@java.lang.annotation.Documented
@Repeatable(value = Criteria.class)
public @interface Criterion {
  interface Default {}

  /**
   * 数据库条件参数名称
   *
   * @return 数据库条件参数名称
   */
  String value() default """";

  /**<fim_suffix>
  Operator operator() default Operator.EQUALS;

  /**
   * 条件顺序
   *
   * @return 条件顺序
   */
  int order() default 1;

  /**
   * 组名，默认DEFAULT，用于区分不同场景的条件
   *
   * @return 组名
   */
  Class<?> group() default Default.class;
}
<fim_middle>","
   * 条件运算符
   *
   * @return 条件运算符，默认为EQUALS
   */","
   * 条件运算符
   *
   * @return 条件运算符
   */"
"<fim_prefix>import java.lang.annotation.ElementType;
import java.lang.annotation.Repeatable;
import java.lang.annotation.RetentionPolicy;

/** 用于构造查询条件 */
@java.lang.annotation.Inherited
@java.lang.annotation.Target({ElementType.FIELD})
@java.lang.annotation.Retention(RetentionPolicy.RUNTIME)
@java.lang.annotation.Documented
@Repeatable(value = Criteria.class)
public @interface Criterion {
  interface Default {}

  /**<fim_suffix>
  String value() default """";

  /**
   * 条件运算符
   *
   * @return 条件运算符，默认为EQUALS
   */
  Operator operator() default Operator.EQUALS;

  /**
   * 条件顺序
   *
   * @return 条件顺序
   */
  int order() default 1;

  /**
   * 组名，默认DEFAULT，用于区分不同场景的条件
   *
   * @return 组名
   */
  Class<?> group() default Default.class;
}
<fim_middle>","
   * 数据库条件参数名称
   *
   * @return 数据库条件参数名称
   */","
   * 条件值
   *
   * @return 条件值
   */"
"<fim_prefix>ntionPolicy.RUNTIME)
@java.lang.annotation.Documented
@Repeatable(value = Criteria.class)
public @interface Criterion {
  interface Default {}

  /**
   * 数据库条件参数名称
   *
   * @return 数据库条件参数名称
   */
  String value() default """";

  /**
   * 条件运算符
   *
   * @return 条件运算符，默认为EQUALS
   */
  Operator operator() default Operator.EQUALS;

  /**
   * 条件顺序
   *
   * @return 条件顺序
   */
  int order() default 1;

  /**<fim_suffix>
  Class<?> group() default Default.class;
}
<fim_middle>","
   * 组名，默认DEFAULT，用于区分不同场景的条件
   *
   * @return 组名
   */","
   * 条件分组
   *
   * @return 条件分组
   */"
"<fim_prefix>tation.Target({ElementType.FIELD})
@java.lang.annotation.Retention(RetentionPolicy.RUNTIME)
@java.lang.annotation.Documented
@Repeatable(value = Criteria.class)
public @interface Criterion {
  interface Default {}

  /**
   * 数据库条件参数名称
   *
   * @return 数据库条件参数名称
   */
  String value() default """";

  /**
   * 条件运算符
   *
   * @return 条件运算符，默认为EQUALS
   */
  Operator operator() default Operator.EQUALS;

  /**<fim_suffix>
  int order() default 1;

  /**
   * 组名，默认DEFAULT，用于区分不同场景的条件
   *
   * @return 组名
   */
  Class<?> group() default Default.class;
}
<fim_middle>","
   * 条件顺序
   *
   * @return 条件顺序
   */","
   * 排序
   *
   * @return 排序
   */"
"<fim_prefix>package work.myfavs.framework.orm.meta.annotation;

import work.myfavs.framework.orm.meta.enumeration.Operator;

import java.lang.annotation.ElementType;
import java.lang.annotation.Repeatable;
import java.lang.annotation.RetentionPolicy;

/**<fim_suffix>
@java.lang.annotation.Inherited
@java.lang.annotation.Target({ElementType.FIELD})
@java.lang.annotation.Retention(RetentionPolicy.RUNTIME)
@java.lang.annotation.Documented
@Repeatable(value = Criteria.class)
public @interface Criterion {
  interface Default {}

  /**
   * 数据库条件参数名称
   *
   * @return 数据库条件参数名称
   */
  String value() default """";

  /**
   * 条件运算符
   *
   * @return 条件运算符，默认为EQUALS
   */
  Oper<fim_middle>", 用于构造查询条件 */,"
 * 数据库条件注解"
"<fim_prefix>package com.easyink.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 会话发言Enum
 *
 * @author wx
 * 2023/2/20 17:48
 **/
@AllArgsConstructor
public enum ContactSpeakEnum {
    /**<fim_suffix>
    CUSTOMER(0),
    /**
     * 员工先发言
     */
    USER(1),
    ;
    @Getter
    private Integer code;
}
<fim_middle>","
     * 客户先发言
     */","
     * 客服先发言
    "
"<fim_prefix>package com.easyink.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 会话发言Enum
 *
 * @author wx
 * 2023/2/20 17:48
 **/
@AllArgsConstructor
public enum ContactSpeakEnum {
    /**
     * 客户先发言
     */
    CUSTOMER(0),
    /**<fim_suffix>
    USER(1),
    ;
    @Getter
    private Integer code;
}
<fim_middle>","
     * 员工先发言
     */","
     * 用户发言
     */"
"<fim_prefix>package com.rzg.zombieland.comunes.misc;

import java.util.List;

/**<fim_suffix>
public class ZombielandException extends Exception {
    private static final long serialVersionUID = 2748734264163995657L;

    private List<String> errores;
    
    /**
     * Construye una excepción.
     * @param mensaje - el mensaje de error.
     */
    public ZombielandException(String mensaje) {
        super(mensaje);
        Log.info(""Excepción de Zombieland esperada: "");
        Log.info(mensaje<fim_middle>","
 * Excepción con un mensaje amigable para el usuario.
 * @author nicolas
 *
 */","
 * Excepción de Zombieland.
 * @author <NAME>
 */"
"<fim_prefix>}
    
    /**
     * Construye una excepción.
     * @param mensaje - el mensaje de error.
     * @param errores - el listado de mensajes de error.
     */
    public ZombielandException(String mensaje, List<String> errores) {
        super(mensaje);
        this.errores = errores;
        Log.info(""Listado de errores: "");
        for (String error : errores)
            Log.info(error);
    }
    
    /**<fim_suffix>
    public List<String> getErrores() {
        return errores;
    }
}
<fim_middle>","
     * @return el listado de errores.
     */","
     * Devuelve la lista de errores.
     * @"
"<fim_prefix>package com.rzg.zombieland.comunes.misc;

import java.util.List;

/**
 * Excepción con un mensaje amigable para el usuario.
 * @author nicolas
 *
 */
public class ZombielandException extends Exception {
    private static final long serialVersionUID = 2748734264163995657L;

    private List<String> errores;
    
    /**<fim_suffix>
    public ZombielandException(String mensaje) {
        super(mensaje);
        Log.info(""Excepción de Zombieland esperada: "");
        Log.info(mensaje);
    }
    
    /**
     * Construye una excepción.
     * @param mensaje - el mensaje de error.
     * @param errores - el listado de mensajes de error.
     */
    public ZombielandException(String mensaje, List<String> errores) {
        super(mensaje)<fim_middle>","
     * Construye una excepción.
     * @param mensaje - el mensaje de error.
     */","
     * Construye una excepción.
     * @param mensaje - el mensaje de error.
     */"
"<fim_prefix>ndException extends Exception {
    private static final long serialVersionUID = 2748734264163995657L;

    private List<String> errores;
    
    /**
     * Construye una excepción.
     * @param mensaje - el mensaje de error.
     */
    public ZombielandException(String mensaje) {
        super(mensaje);
        Log.info(""Excepción de Zombieland esperada: "");
        Log.info(mensaje);
    }
    
    /**<fim_suffix>
    public ZombielandException(String mensaje, List<String> errores) {
        super(mensaje);
        this.errores = errores;
        Log.info(""Listado de errores: "");
        for (String error : errores)
            Log.info(error);
    }
    
    /**
     * @return el listado de errores.
     */
    public List<String> getErrores() {
        return errores;
    }
}
<fim_middle>","
     * Construye una excepción.
     * @param mensaje - el mensaje de error.
     * @param errores - el listado de mensajes de error.
     */","
     * Construye una excepción.
     * @param mensaje - el mensaje de error.
     * @param errores - el listado de errores.
     */"
"<fim_prefix>/**
 * 
 */
package fr.inria.coast.yjs;

import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;

import fr.inria.coast.general.CollaborativeWriter;

/**<fim_suffix>
public class YjsWriter extends CollaborativeWriter {

	public YjsWriter(int n_user, int type_spd, String DOC_URL, int exp_id, int textSize) {
		super(n_user, type_spd, DOC_URL, exp_id, textSize);
		driver = new ChromeDriver();
		while (this.inputElement == null) {
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
			driver.get(DOC_URL);
			this.inputElement = driver.findElement(By.id(""text<fim_middle>","
 * @author Quang Vinh DANG
 *
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package top.tocome.mirai.component.utils;

import top.tocome.utils.Error;

/**<fim_suffix>
public class Message extends Error {
    public Message(String message) {
        super(message);
    }
}
<fim_middle>","
 * Error别名
 * 供指令系统反馈消息
 */","
 * 封装错误信息
 *
 * @author tocome
"
"<fim_prefix>/**<fim_suffix>

package br.com.hslife.orcamento.entity;

import org.junit.Test;

import br.com.hslife.orcamento.exception.ValidationException;

public class MovimentacaoInvestimentoTest {

	private MovimentacaoInvestimento entity = new MovimentacaoInvestimento();

	@Test(expected=ValidationException.class)
	public void testValidateHistorico() {
		entity.setHistorico(""     ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX<fim_middle>","*
  
  	Copyright (c) 2012 - 2020 Hércules S. S. José

    Este arquivo é parte do programa Orçamento Doméstico.
    

    Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou 

    modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como 

    publicada pela Fundação do Software Livre (FSF); na versão 2.1 da 

    Licença.
    

    Este programa é distribuído na esperança que possa ser útil, 

    mas SEM NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÂO a 
    
    qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública 
    
    Geral Menor GNU em português para maiores detalhes.
    

    Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob o 

    nome de ""LICENSE.TXT"" junto com este programa, se não, acesse o site do
    
    projeto no endereco https://github.com/herculeshssj/orcamento ou escreva 
    
    para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor, 
    
    Boston, MA  02110-1301, USA.
    

    Para mais informações sobre o programa Orçamento Doméstico e seu autor entre  

    em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva para 

    Hércules S. S. José, Av. Ministro Lafaeyte de Andrade, 1683 - Bl. 3 Apt 404, 

    Marco II - Nova Iguaçu, RJ, Brasil.
  
***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package ani.rss.auth.fun;

import ani.rss.annotation.Auth;
import ani.rss.auth.enums.AuthType;
import ani.rss.auth.util.AuthUtil;
import ani.rss.entity.Login;
import cn.hutool.core.util.StrUtil;
import cn.hutool.http.server.HttpServerRequest;

import java.util.function.Function;

/**<fim_suffix>
@Auth(type = AuthType.FORM)
public class Form implements Function<HttpServerRequest, Boolean> {
    @Override
    public Boolean apply(HttpServerRequest request) {
        String s = request.getParam(""s"");
        Login login = AuthUtil.getLogin();
        String auth = AuthUtil.getAuth(login);
        return StrUtil.equals(auth, s);
    }
}
<fim_middle>","
 * 表单鉴权
 */","
 * Created by ani on 2017/"
"<fim_prefix>/*<fim_suffix>

package fr.arpinum.cocoritest.interne.specification.collection;

import java.util.Collection;

import fr.arpinum.cocoritest.specification.Specification;

public class SpecificationCollectionNonVide<E> implements Specification<Collection<E>> {

	@Override
	public boolean estSatisfaitePar(Collection<E> éléments) {
		return éléments != null && éléments.size() != 0;
	}

	@Override
	public String messageInsatis<fim_middle>","
 * Copyright (C) 2013, Arpinum
 *
 * Cocoritest est un logiciel libre ; vous pouvez le redistribuer ou le modifier suivant les termes de la GNU Lesser
 * General Public License telle que publiée par la Free Software Foundation ; soit la version 3 de la licence,
 * soit (à votre gré) toute version ultérieure.
 *
 * Cocoritest est distribué dans l'espoir qu'il sera utile, mais SANS AUCUNE GARANTIE ; pas même la garantie
 * implicite de COMMERCIABILISABILITÉ ni d'ADÉQUATION à UN OBJECTIF PARTICULIER. Consultez la GNU Lesser General
 * Public License pour plus de détails.
 *
 * Vous devez avoir reçu une copie de la GNU Lesser General Public License en même temps que Cocoritest ; si ce n'est
  * pas le cas, consultez http://www.gnu.org/licenses.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>package work.myfavs.framework.orm.util.func;

/**<fim_suffix>
public interface ThrowingRunnable<E extends Throwable> {
  void run() throws E;
}
<fim_middle>","
 * 接受一个没有参数和返回值的方法
 * 操作调用 {@link #run()}  方法
 *
 * @param <E> 抛出异常的类型
 */","
 * @author <NAME>
 */"
"<fim_prefix>package io.github.ausf_software.smbp_editor.core.tool;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**<fim_suffix>
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface EditorTool {
    /**
     * Возвращает строку с названием инструмента
     * @return строку с названием инструмента
     */
    String name();

    /**
     * Возвращает строку с путем к иконке инструмента.
     * <p>В случае если инструмент не добавляется на панель
     * инструментов, то вернется по умолчанию пустая строка.
  <fim_middle>","
 * Аннотация <code>EditorTool</code> используется для обозначения класса как
 * инструмента редактора. Имя, которое указывается в аннотации,
 * необходимо для отображения в окне настройки горячих клавиш.
 * <p>При запуске приложения, система будет искать все классы,
 * помеченные аннотацией <code>EditorTool</code>, и создавать их экземпляры.
 * Это позволяет динамически добавлять новые инструменты редактора
 * без необходимости изменения основного кода приложения.
 * <p>По умолчанию инструмент не добавляется на панель инструментов, для
 * этого необходимо указать путь к иконке инструмента. При указании
 * система автоматически добавит инструмент на панель инструментов.
 * Важно: путь к файлу указывается начиная с указания папки ресурсов.
 * @since 1.0
 * @version 1.0
 * @author Daniil Scherbina
 */","
 * Аннотация для инструментов редактора.
 * <p>
 * Инструменты редактора должны быть реализованы наследованием
 * класса {@link io.github.ausf_software.smbp_editor.core.tool.EditorTool}.
 * <p>
 * Аннотация {@link EditorTool} может быть использована только на классах,
 * реализующих интерфейс {@link io.github.ausf_software.smbp_editor.core.tool.EditorTool}.
 */"
"<fim_prefix>е добавляется на панель инструментов, для
 * этого необходимо указать путь к иконке инструмента. При указании
 * система автоматически добавит инструмент на панель инструментов.
 * Важно: путь к файлу указывается начиная с указания папки ресурсов.
 * @since 1.0
 * @version 1.0
 * @author Daniil Scherbina
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface EditorTool {
    /**<fim_suffix>
    String name();

    /**
     * Возвращает строку с путем к иконке инструмента.
     * <p>В случае если инструмент не добавляется на панель
     * инструментов, то вернется по умолчанию пустая строка.
     * @return строку с путем к иконке инструмента
     */
    String icon() default """";

    /**
     * Возвращает строку с именем конфигурационного файла
     * @return строку с именем конфигурационного ф<fim_middle>","
     * Возвращает строку с названием инструмента
     * @return строку с названием инструмента
     */","
     * Возвращает строку с именем инструмента.
     * @return строка с именем инструмента
     */"
"<fim_prefix>  /**
     * Возвращает строку с названием инструмента
     * @return строку с названием инструмента
     */
    String name();

    /**
     * Возвращает строку с путем к иконке инструмента.
     * <p>В случае если инструмент не добавляется на панель
     * инструментов, то вернется по умолчанию пустая строка.
     * @return строку с путем к иконке инструмента
     */
    String icon() default """";

    /**<fim_suffix>
    String cfg() default """";
}
<fim_middle>","
     * Возвращает строку с именем конфигурационного файла
     * @return строку с именем конфигурационного файла
     */","
     * Возвращает строку с путем к конфигурационному файлу инструмента.
     * <p>В случае если инструмент"
"<fim_prefix>ски добавит инструмент на панель инструментов.
 * Важно: путь к файлу указывается начиная с указания папки ресурсов.
 * @since 1.0
 * @version 1.0
 * @author Daniil Scherbina
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface EditorTool {
    /**
     * Возвращает строку с названием инструмента
     * @return строку с названием инструмента
     */
    String name();

    /**<fim_suffix>
    String icon() default """";

    /**
     * Возвращает строку с именем конфигурационного файла
     * @return строку с именем конфигурационного файла
     */
    String cfg() default """";
}
<fim_middle>","
     * Возвращает строку с путем к иконке инструмента.
     * <p>В случае если инструмент не добавляется на панель
     * инструментов, то вернется по умолчанию пустая строка.
     * @return строку с путем к иконке инструмента
     */","
     * Возвращает строку с иконкой инструмента
     * @return строку с иконкой инструмента
     */"
"<fim_prefix>package br.com.prova;

/*<fim_suffix>
public class Questao04 {
	public static void main(String[] args) {


		double totalCompra = 1250.40;

		double valorPago = 1250.0;

		double troco = valorPago - totalCompra;

		if (troco < 0) {
			System.out.println(""O valor pago é insuficiente. Faltam R$"" + troco);
		} else {
			System.out.println(""O troco a ser devolvido é de R$"" + troco);
		}
	}

}





<fim_middle>"," Fazer um programa que implemente a solução de troco em operação de venda/compra.
 */","*
 * @author <NAME>
 *
 */"
"<fim_prefix>/**<fim_suffix>
/**
 * 
 * @author tanyaowu 
 * @创建时间 2016年12月16日 下午4:47:30
 *
 * @操作列表
 *  编号	| 操作时间	| 操作人员	 | 操作说明
 *  (1) | 2016年12月16日 | tanyaowu | 新建类
 *
 */
package com.talent.aio.examples.im.client.ui.component;<fim_middle>","
 * **************************************************************************
 *
 * @说明: 
 * @项目名称: talent-aio-examples-im-client
 *
 * @author: tanyaowu 
 * @创建时间: 2016年12月16日 下午4:47:30
 *
 * **************************************************************************
 */","
 * 
 * @author tanyaowu 
 * @创建时间 2016年12月16日 下午4:47:30
 *
 * @操作列表
 *  编号	| 操作时间	| 操作人员	 | 操作说明
 *  (1) | 2016年12"
"<fim_prefix>/**
 * **************************************************************************
 *
 * @说明: 
 * @项目名称: talent-aio-examples-im-client
 *
 * @author: tanyaowu 
 * @创建时间: 2016年12月16日 下午4:47:30
 *
 * **************************************************************************
 */
/**<fim_suffix>
package com.talent.aio.examples.im.client.ui.component;<fim_middle>","
 * 
 * @author tanyaowu 
 * @创建时间 2016年12月16日 下午4:47:30
 *
 * @操作列表
 *  编号	| 操作时间	| 操作人员	 | 操作说明
 *  (1) | 2016年12月16日 | tanyaowu | 新建类
 *
 */","
 * @author tanyaowu
 *
 */"
"<fim_prefix>package hafta2.gun1;

/**<fim_suffix>
public class IfElseIf {

    public static void main(String[] args) {

        int not = 70;

        if (not >= 90) {
            System.out.println(""A"");
        } else if (not >= 80) {
            System.out.println(""B"");
        } else if (not >= 70) {
            System.out.println(""C"");
        } else if (not >= 60) {
            System.out.println(""D"");
        } else {
            System.out.println<fim_middle>","
 * IfElseIf sınıfı, kontrol ifadelerinde birden fazla if-else yapısının nasıl
 * kullanılacağına dair örnek içeriri.
 */","
 * @author <NAME> <<EMAIL>>
 * @since 13 May 2021
 */"
"<fim_prefix>package com.zxl.gb;

import lombok.Data;

/**<fim_suffix>
@Data
public class CustomData {
}
<fim_middle>","
 * 平台交换协议自定义数据
 * TODO: 2022/10/24
 */","
 * @author 张小龙
 * @date 2021-04-09 - 10"
"<fim_prefix>/**<fim_suffix>
package br.gov.camara.edemocracia.portlets.wikilegis.service.persistence;

public interface ArtigoFinder {
    public java.util.Map<java.lang.Long, java.util.List<br.gov.camara.edemocracia.portlets.wikilegis.ArtigoDisplay>> findAllArtigoDisplay(
        long groupId);

    public java.util.List<br.gov.camara.edemocracia.portlets.wikilegis.ArtigoDisplay> findDisplayByG_E(
        long groupId, long estrutura<fim_middle>","
 * Copyright (c) 2009-2014 Câmara dos Deputados. Todos os direitos reservados.
 *
 * e-Democracia é um software livre; você pode redistribuí-lo e/ou modificá-lo dentro
 * dos termos da Licença Pública Geral Menor GNU como publicada pela Fundação do 
 * Software Livre (FSF); na versão 2.1 da Licença, ou (na sua opinião) qualquer versão.
 *
 * Este programa é distribuído na esperança de que possa ser  útil, mas SEM NENHUMA GARANTIA;
 * sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR.
 * Veja a Licença Pública Geral Menor GNU para maiores detalhes. 
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>
 * Der WindowType im ViewModel enthält alle möglichen Fenster-Typen, die es in Fimball gibt.
 */
public enum WindowType
{
    /**
     * Das Fenster, das beim Start von Fimball angezeigt wird.
     */
    SPLASH_SCREEN,

    /**
     * Das Fenster, das das Hauptmenü darstellt.
     */
    MAIN_MENU,

    /**
     * Das Fenster, das angezeigt wird, während ein Spiel gespielt wird.
     */
    GAME,

    /**<fim_suffix>
    MACHINE_EDITOR
}
<fim_middle>","
     * Das Fenster, das den Editor darstellt.
     */","
     * Das Fenster, das angezeigt wird, während ein Spiel gespielt wird"
"<fim_prefix>package sep.fimball.viewmodel.window;

/**
 * Der WindowType im ViewModel enthält alle möglichen Fenster-Typen, die es in Fimball gibt.
 */
public enum WindowType
{
    /**<fim_suffix>
    SPLASH_SCREEN,

    /**
     * Das Fenster, das das Hauptmenü darstellt.
     */
    MAIN_MENU,

    /**
     * Das Fenster, das angezeigt wird, während ein Spiel gespielt wird.
     */
    GAME,

    /**
     * Das Fenster, das den Editor darstellt.
     */
    MACHINE_EDITOR
}
<fim_middle>","
     * Das Fenster, das beim Start von Fimball angezeigt wird.
     */","
     * Das Fenster, das beim Start angezeigt wird.
     */"
"<fim_prefix>package sep.fimball.viewmodel.window;

/**
 * Der WindowType im ViewModel enthält alle möglichen Fenster-Typen, die es in Fimball gibt.
 */
public enum WindowType
{
    /**
     * Das Fenster, das beim Start von Fimball angezeigt wird.
     */
    SPLASH_SCREEN,

    /**
     * Das Fenster, das das Hauptmenü darstellt.
     */
    MAIN_MENU,

    /**<fim_suffix>
    GAME,

    /**
     * Das Fenster, das den Editor darstellt.
     */
    MACHINE_EDITOR
}
<fim_middle>","
     * Das Fenster, das angezeigt wird, während ein Spiel gespielt wird.
     */","
     * Das Fenster, das das Spiel darstellt.
     */"
"<fim_prefix>package sep.fimball.viewmodel.window;

/**<fim_suffix>
public enum WindowType
{
    /**
     * Das Fenster, das beim Start von Fimball angezeigt wird.
     */
    SPLASH_SCREEN,

    /**
     * Das Fenster, das das Hauptmenü darstellt.
     */
    MAIN_MENU,

    /**
     * Das Fenster, das angezeigt wird, während ein Spiel gespielt wird.
     */
    GAME,

    /**
     * Das Fenster, das den Editor darstellt.
     */
    MACHINE_EDITOR
}
<fim_middle>","
 * Der WindowType im ViewModel enthält alle möglichen Fenster-Typen, die es in Fimball gibt.
 */","
 * Die verschiedenen Fenstertypen, die in Fimball verwendet werden können.
 * 
 * @author <NAME"
"<fim_prefix>package sep.fimball.viewmodel.window;

/**
 * Der WindowType im ViewModel enthält alle möglichen Fenster-Typen, die es in Fimball gibt.
 */
public enum WindowType
{
    /**
     * Das Fenster, das beim Start von Fimball angezeigt wird.
     */
    SPLASH_SCREEN,

    /**<fim_suffix>
    MAIN_MENU,

    /**
     * Das Fenster, das angezeigt wird, während ein Spiel gespielt wird.
     */
    GAME,

    /**
     * Das Fenster, das den Editor darstellt.
     */
    MACHINE_EDITOR
}
<fim_middle>","
     * Das Fenster, das das Hauptmenü darstellt.
     */","
     * Das Fenster, das beim Start von Fimball angezeigt wird.
     */"
"<fim_prefix>package top.howiehz.points.utils.message;

/**<fim_suffix>
public enum MsgKey {
    PLUGIN_STARTING,
    PLUGIN_LOADING,
    PLUGIN_DISABLING,
    PLUGIN_STARTED,
    PLUGIN_LOADED,
    PLUGIN_DISABLED,
    CREATE_DATABASE_FOLDER_SUCCESSFULLY,
    CREATE_DATABASE_FOLDER_FAILED,
    PLAYER_ONLY,
    NO_PERMISSION,
    PLAYER_NOT_ONLINE,
    FINISHED,
    COORDINATES_FORMAT,
    VOXELMAP_SUPPORT_HOVER,
    VOXELMAP_SUPPORT_COMMAND,
    XAEROS_SUPPORT_HOVER,
    XAERO<fim_middle>","
 * 枚举文字键
 */","
 * @author howie
 *"
"<fim_prefix>package coloryr.colormirai.plugin.pack.from;

/**<fim_suffix>
public class SendStrangerMessagePack extends SendFriendMessagePack {

}
<fim_middle>","
 * 117 [插件]发送陌生人消息
 */","
 * @author <NAME>
 * @since 2019-08"
"<fim_prefix>package me.wuxie.wakeshow.wakeshow.network.server_out;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import lombok.Getter;
import me.wuxie.wakeshow.wakeshow.network.OutPacket;

/**<fim_suffix>
public class MessageComponentReturnData  extends OutPacket {
    @Getter
    private final String json;
    public MessageComponentReturnData(String type, JsonElement jsonElement) {
        super(3);
        JsonElement je = new JsonObject();
        JsonObject jo = je.getAsJsonObject();
        jo.addProperty(""type"",type);
        jo.add(""data"",jsonElement);
        this.json = je.toString();
        this.<fim_middle>","
 * 处理特殊组件被人为点击后(会造成持续状态的情况)返回给客户端(是否改变状态)
 */","
 * Created by Simon on 2017/3/16.
 */"
"<fim_prefix>/**<fim_suffix>
package org.yby.ecoc2017.RSAAlgorithm.MLRSA201706;<fim_middle>","
 * 2017年6月份的新想法。
 * 大概想法是根据预测网络局部地区的流量不均匀现象（以潮汐现象为例，采用洋葱潮汐模型），将未来一段时间后的流量分布情况（使用机器
 * 学习进行预测）作为边权的考量依据，进行选路，从而降低业务阻塞率。
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package hafta1.gun2;
/*<fim_suffix>

public class DegiskenTanitmaVeAtama {

    public static void main(String[] args) {
        /* 1)
         * değişken_tipi değişken_adı;
         * Bu işleme ""Değişken Tanıtma"" adı verilir. (Variable Declaration)
         *
         * Bu işlemden sonra değişkenin bulunduğu kod bloğunda({...} arası)
         * aynı isimde başka bir değişken tanımlayamayız.
         *
         * Bu aşamada değişkenin değeri <fim_middle>","
 * DegiskenTanitmaVeAtama sınıfı değişken tanımlamada 
 * kullanılan yöntemleri içerir. Değişkenle alakalı 3 kavram vardır:
 * 1) Değişken Tanıtma
 * 2) Değişkene Değer Atama
 * 3) Değişken Tanımlama
 */","*
 * @author <NAME> <<EMAIL>>
 * @since 15.12.2019
 */"
"<fim_prefix> static void main(String[] args) {
        /* 1)
         * değişken_tipi değişken_adı;
         * Bu işleme ""Değişken Tanıtma"" adı verilir. (Variable Declaration)
         *
         * Bu işlemden sonra değişkenin bulunduğu kod bloğunda({...} arası)
         * aynı isimde başka bir değişken tanımlayamayız.
         *
         * Bu aşamada değişkenin değeri yoktur. 
         */
        int sayi;

        /*<fim_suffix>
        sayi = 10;
        System.out.println(sayi);

        /* 3)
         * değişken_tipi değişken_adı = değişken_değeri;
         * Bu işleme ""Değişken Tanımlama"" adı verilir. (Variable Definition)
         * 
         * Yukarıdaki iki işlem tek satırda gerçekleştilirmiştir.
         */
        double sapmaOrani = 2.45;
    }
}
<fim_middle>"," 2)
         * değişken_adı = değişken_değeri;
         * Bu işleme ""Değişkene Değer Atama"" adı verilir. (Variable Initialization)
         * 
         * Değişken bu adımdan sonra kendine atanan değeri taşır 
         * ve  o değerle işlem girer.
         */"," 2)
         * değişken_tipi değişken_adı = değer;
         * Bu işleme ""Değişken Atama"" adı verilir. (Variable Assignment)
         * 
         * Değişken tanımlama işleminden sonra değişkenin değeri atanır.
         * 
         * Değişken tanımlama işleminden sonra değişkenin değeri"
"<fim_prefix>      * Bu aşamada değişkenin değeri yoktur. 
         */
        int sayi;

        /* 2)
         * değişken_adı = değişken_değeri;
         * Bu işleme ""Değişkene Değer Atama"" adı verilir. (Variable Initialization)
         * 
         * Değişken bu adımdan sonra kendine atanan değeri taşır 
         * ve  o değerle işlem girer.
         */
        sayi = 10;
        System.out.println(sayi);

        /*<fim_suffix>
        double sapmaOrani = 2.45;
    }
}
<fim_middle>"," 3)
         * değişken_tipi değişken_adı = değişken_değeri;
         * Bu işleme ""Değişken Tanımlama"" adı verilir. (Variable Definition)
         * 
         * Yukarıdaki iki işlem tek satırda gerçekleştilirmiştir.
         */"," 3)
         * değişken_adı;
         * Bu işleme ""Değişkene Değer Alma"" adı verilir. (Variable Access)
         * 
         * Değişken bu adımdan sonra kendine atanan değeri taşır 
         * ve  o değerle işlem girer"
"<fim_prefix>package hafta1.gun2;
/*
 * DegiskenTanitmaVeAtama sınıfı değişken tanımlamada 
 * kullanılan yöntemleri içerir. Değişkenle alakalı 3 kavram vardır:
 * 1) Değişken Tanıtma
 * 2) Değişkene Değer Atama
 * 3) Değişken Tanımlama
 */

public class DegiskenTanitmaVeAtama {

    public static void main(String[] args) {
        /*<fim_suffix>
        int sayi;

        /* 2)
         * değişken_adı = değişken_değeri;
         * Bu işleme ""Değişkene Değer Atama"" adı verilir. (Variable Initialization)
         * 
         * Değişken bu adımdan sonra kendine atanan değeri taşır 
         * ve  o değerle işlem girer.
         */
        sayi = 10;
        System.out.println(sayi);

        /* 3)
         * değişken_tipi değişken_adı = değişken_değer<fim_middle>"," 1)
         * değişken_tipi değişken_adı;
         * Bu işleme ""Değişken Tanıtma"" adı verilir. (Variable Declaration)
         *
         * Bu işlemden sonra değişkenin bulunduğu kod bloğunda({...} arası)
         * aynı isimde başka bir değişken tanımlayamayız.
         *
         * Bu aşamada değişkenin değeri yoktur. 
         */"," 1)
         * int değişken_adı;
         * Bu işleme ""Değişken Tanıtma"" adı verilir. (Variable Declaration)
         * 
         * Değişken tanıtma işlemi, değişken adını tanımlamak için kullanılır.
         * Değişken tanıtma işlemi, değişken adını tanımlamak için kullanılır.
         * Değişken tanıtma işlemi, değişken adını tanımlamak için kullanılır.
         * Değişken tan"
"<fim_prefix>package com.github.maxwell.nc.reactivelib.callback;

/**<fim_suffix>
public interface Function<T, R> {

    /**
     * 把元素t转换成R类型的元素返回
     *
     * @return R类型的元素
     */
    R apply(T t) throws Exception;

}
<fim_middle>","
 * 功能接口
 */","
 * Created by zhang"
"<fim_prefix>package com.github.maxwell.nc.reactivelib.callback;

/**
 * 功能接口
 */
public interface Function<T, R> {

    /**<fim_suffix>
    R apply(T t) throws Exception;

}
<fim_middle>","
     * 把元素t转换成R类型的元素返回
     *
     * @return R类型的元素
     */","
     * 执行
     * @param t
     * @return
     * @throws Exception
  "
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.aws.amazon;
<fim_middle>","
 * <p>
 * AWSとの連携機能を提供します。
 * </p>
 */","
 * Amazon Web Service.
 */"
"<fim_prefix>xtends JavaBean {
	@Inject
	private LoginBean loginBean;
	
	private static final long serialVersionUID = -7332998125885395663L;

	//
	private String textoPesquisa;
	private List<TipoReserva> listaTipoReserva;

	//

	@PostConstruct
	public void init() {
		try {
			listaTipoReserva = TipoReservaService.pesquisar(loginBean.getCampus(), null, null);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**<fim_suffix>
	public void pesquisa() {
		try {
			this.listaTipoReserva = TipoReservaService.pesquisar(loginBean.getCampus(), textoPesquisa, null);
		} catch (Exception e) {
			e.printStackTrace();
			addErrorMessage(""Pesquisar"",""Erro na pesquisa"");
		}
	}

	public List<TipoReserva> getListaTipoReserva() {
		return listaTipoReserva;
	}

	public String getTextoPesquisa() {
		return textoPesquisa;
	}

	public void setText<fim_middle>","
	 * Realiza a pesquisa de itens
	 */","
	 * @return
	 */"
"<fim_prefix>/**<fim_suffix>

package br.com.hslife.orcamento.facade;

import java.util.List;

import br.com.hslife.orcamento.entity.Conta;
import br.com.hslife.orcamento.entity.LancamentoConta;
import br.com.hslife.orcamento.entity.RegraImportacao;

public interface IRegraImportacao extends ICRUDService<RegraImportacao>{

	public List<RegraImportacao> buscarTodosPorConta(Conta conta);
	
	public LancamentoConta processarR<fim_middle>","*
  
  	Copyright (c) 2012 - 2020 Hércules S. S. José

    Este arquivo é parte do programa Orçamento Doméstico.
    

    Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou 

    modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como 

    publicada pela Fundação do Software Livre (FSF); na versão 2.1 da 

    Licença.
    

    Este programa é distribuído na esperança que possa ser útil, 

    mas SEM NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÂO a 
    
    qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública 
    
    Geral Menor GNU em português para maiores detalhes.
    

    Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob o 

    nome de ""LICENSE.TXT"" junto com este programa, se não, acesse o site do
    
    projeto no endereco https://github.com/herculeshssj/orcamento ou escreva 
    
    para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor, 
    
    Boston, MA  02110-1301, USA.
    

    Para mais informações sobre o programa Orçamento Doméstico e seu autor entre  

    em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva para 

    Hércules S. S. José, Av. Ministro Lafaeyte de Andrade, 1683 - Bl. 3 Apt 404, 

    Marco II - Nova Iguaçu, RJ, Brasil.
  
***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package org.dromara.common.ratelimiter.enums;

/**<fim_suffix>

public enum LimitType {
    /**
     * 默认策略全局限流
     */
    DEFAULT,

    /**
     * 根据请求者IP进行限流
     */
    IP,

    /**
     * 实例限流(集群多后端实例)
     */
    CLUSTER
}
<fim_middle>","
 * 限流类型
 *
 * @author ruoyi
 */","
 * 限流类型
 *
 * @author xiaoyu
"
"<fim_prefix>package org.dromara.common.ratelimiter.enums;

/**
 * 限流类型
 *
 * @author ruoyi
 */

public enum LimitType {
    /**<fim_suffix>
    DEFAULT,

    /**
     * 根据请求者IP进行限流
     */
    IP,

    /**
     * 实例限流(集群多后端实例)
     */
    CLUSTER
}
<fim_middle>","
     * 默认策略全局限流
     */","
     * 默认限流
     */"
"<fim_prefix>package org.dromara.common.ratelimiter.enums;

/**
 * 限流类型
 *
 * @author ruoyi
 */

public enum LimitType {
    /**
     * 默认策略全局限流
     */
    DEFAULT,

    /**<fim_suffix>
    IP,

    /**
     * 实例限流(集群多后端实例)
     */
    CLUSTER
}
<fim_middle>","
     * 根据请求者IP进行限流
     */","
     * 客户端限流
     */"
"<fim_prefix>package org.dromara.common.ratelimiter.enums;

/**
 * 限流类型
 *
 * @author ruoyi
 */

public enum LimitType {
    /**
     * 默认策略全局限流
     */
    DEFAULT,

    /**
     * 根据请求者IP进行限流
     */
    IP,

    /**<fim_suffix>
    CLUSTER
}
<fim_middle>","
     * 实例限流(集群多后端实例)
     */","
     * 根据请求者IP和请求路径进行限流
    "
"<fim_prefix>package modtools.jsfunc.type;

import modtools.jsfunc.IScript;
import rhino.*;

import java.util.List;

/**<fim_suffix>
public interface PTYPE {
	Class<?> Z = boolean.class;
	Class<?> B = byte.class;
	Class<?> C = char.class;
	Class<?> D = double.class;
	Class<?> F = float.class;
	Class<?> I = int.class;
	Class<?> J = long.class;
	Class<?> S = short.class;

	Class<?> V = void.class;

	Class<?> L = Object.class;
	Class<?> CLS = Class.class;
	Class<?> CL = ClassLoader.class;
	Class<?> STR = String.class;

	Class<?> LIST = List<fim_middle>"," 原始数据类型和基本的类
 * @see java.lang.Class#getName */","
 * Created by modmuss50 on 06/03/2016.
 */"
"<fim_prefix>package homework;

import java.util.Scanner;

public class badak_0715 {

	/*<fim_suffix>
	public static void main(String[] args) throws Exception {
		Scanner sc = new Scanner(System.in);
		int a = sc.nextInt();

		for (int i = 0; i < a * 2; i++) {
			if (i < a) {
				for (int j = i; j < a; j++) {
					System.out.print(""*"");
				}
			} else {
				for (int j = 0; j <= i-a; j++) {
					System.out.print(""*"");
				}
			}
			System.out.println("""");
		}
	}
}
<fim_middle>","
	 * 자연수 n을 입력받아서 다음과 같이 출력하는 프로그램을 작성하시오.
	 * 
	 * - 입력 예 3 - 출력 예
	 ***
	 **
	 *
	 *
	 **
	 ***
	 */","*
	 * @param args
	 * @throws Exception 
	 */"
"<fim_prefix>package com.copy.jianshuapp.common.rom;

/**<fim_suffix>
public enum MiuiVersion {

    UNKNOWN,
    V5,
    V6,
    V7,
    V8,
    ;

}
<fim_middle>","
 * MIUI版本
 * @version imkarl 2017-03
 */","
 * Created by xingzhijian on 2017/3/15.
 */"
"<fim_prefix>package br.univali.portugol.nucleo.asa;

/**<fim_suffix>
public enum ModoAcesso
{
    /**
     * Define que, se a expressão passada através do parâmetro for uma variável, o parâmetro irá receber uma cópia do valor desta 
     * variável para ser utilizada dentro da função. Desta forma, mesmo que o valor do parâmetro seja modificado dentro da função,
     * após a chamada o valor da variável estará inalterado.
     * 
     * <code><pre>
     * 
     *   <fim_middle>","
 * Utilizado na classe {@link NoDeclaracaoParametro} para definir a forma com que uma variável será acessada ao ser passada 
 * como parâmetro de uma função.
 * 
 * @author Luiz Fernando Noschang
 * @version 1.0
 */","
 * Enumeração que define o modo de acesso de uma variável.
 * 
 * @author <NAME>
 */"
"<fim_prefix> inalterado.
     * 
     * <code><pre>
     * 
     *     funcao exemploModoAcesso(inteiro paramA, inteiro paramB)
     *     {
     *          paramA = paramA - 5
     *          paramB = paramB + paramA
     *          escreva(""Os parâmetros paramA e paramB foram passados por valor!"")
     *     }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */
    POR_VALOR, 
    
    /**<fim_suffix>
    POR_REFERENCIA
    
}
<fim_middle>","
     * Define que, se a expressão passada através do parâmetro for uma variável, o parâmetro irá receber uma referência direta (ponteiro) 
     * a esta variável para ser utilizada dentro da função. Desta forma, se o valor do parâmetro for modificado dentro da função, após a 
     * chamada o valor também terá sido alterado na variável.
     * 
     * <code><pre>
     * 
     *     funcao exemploModoAcesso(inteiro paramA, inteiro &paramB)
     *     {
     *          paramA = paramA - 5
     *          paramB = paramB + paramA
     *          escreva(""O parâmetro paramA foi passado por valor e o parâmetro paramB foi passado por referência!"")
     *     }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */","
     * Indica que o parâmetro é passado por referência.
     * 
     * <code><pre>
     * 
     *     funcao exemploModoAcesso(inteiro paramA, inteiro paramB)
     *     {
     *          paramA = paramA - 5
     *          paramB = paramB + paramA
     *          escreva(""Os parâmetros paramA e paramB foram passados por referência!"")
     *     }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */"
"<fim_prefix>package br.univali.portugol.nucleo.asa;

/**
 * Utilizado na classe {@link NoDeclaracaoParametro} para definir a forma com que uma variável será acessada ao ser passada 
 * como parâmetro de uma função.
 * 
 * @author Luiz Fernando Noschang
 * @version 1.0
 */
public enum ModoAcesso
{
    /**<fim_suffix>
    POR_VALOR, 
    
    /**
     * Define que, se a expressão passada através do parâmetro for uma variável, o parâmetro irá receber uma referência direta (ponteiro) 
     * a esta variável para ser utilizada dentro da função. Desta forma, se o valor do parâmetro for modificado dentro da função, após a 
     * chamada o valor também terá sido alterado na variável.
     * 
     * <code><pre>
     *<fim_middle>","
     * Define que, se a expressão passada através do parâmetro for uma variável, o parâmetro irá receber uma cópia do valor desta 
     * variável para ser utilizada dentro da função. Desta forma, mesmo que o valor do parâmetro seja modificado dentro da função,
     * após a chamada o valor da variável estará inalterado.
     * 
     * <code><pre>
     * 
     *     funcao exemploModoAcesso(inteiro paramA, inteiro paramB)
     *     {
     *          paramA = paramA - 5
     *          paramB = paramB + paramA
     *          escreva(""Os parâmetros paramA e paramB foram passados por valor!"")
     *     }
     * 
     * </pre></code>
     * 
     * @since 1.0
     */","
     * Define que, se a expressão passada através do parâmetro for uma variável, o parâmetro irá receber o valor da variável.
     */"
"<fim_prefix>package moe.ahao.process.management.controller.dto;

import lombok.Data;

/**<fim_suffix>
@Data
public class BizConfigListQuery {

    /**
     * 业务名称，可以模糊匹配
     */
    private String name;
}
<fim_middle>","
 * 业务配置查询请求
 */","
 * 业务配置列表查询参数
"
"<fim_prefix>package moe.ahao.process.management.controller.dto;

import lombok.Data;

/**
 * 业务配置查询请求
 */
@Data
public class BizConfigListQuery {

    /**<fim_suffix>
    private String name;
}
<fim_middle>","
     * 业务名称，可以模糊匹配
     */","
     * 业务配置名称
     */"
"<fim_prefix>package cc.renxing.push.model.dto;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import lombok.Data;
import lombok.experimental.Accessors;
import org.hibernate.validator.constraints.Length;

import java.io.Serializable;

/**<fim_suffix>
@Data
@Accessors(chain = true)
public class Msg implements Serializable {
    /**
     * 消息内容
     *
     * @mock 这是一条消息
     */
    @NotNull(message = ""消息内容不能为空"")
    @Length(max = 3000, message = ""消息内容长度不能超过3000"")
    private String content;
    /**
     * 消息元数据
     */
    @Valid
    private MsgMeta meta;

    public void setContent(String content) {
        if (content.length() > 3000) {
            con<fim_middle>","
 * 定义了消息的数据结构
 *
 * @author Renxing
 * @tag 消息类
 */","
 * 消息
 *
 * @author : liuyk
 * @date : 2020/11/26 10"
"<fim_prefix>erimental.Accessors;
import org.hibernate.validator.constraints.Length;

import java.io.Serializable;

/**
 * 定义了消息的数据结构
 *
 * @author Renxing
 * @tag 消息类
 */
@Data
@Accessors(chain = true)
public class Msg implements Serializable {
    /**
     * 消息内容
     *
     * @mock 这是一条消息
     */
    @NotNull(message = ""消息内容不能为空"")
    @Length(max = 3000, message = ""消息内容长度不能超过3000"")
    private String content;
    /**<fim_suffix>
    @Valid
    private MsgMeta meta;

    public void setContent(String content) {
        if (content.length() > 3000) {
            content = content.substring(0, 3000);
        }
        this.content = content;
    }
}
<fim_middle>","
     * 消息元数据
     */","
     * 消息类型
     */"
"<fim_prefix>package cc.renxing.push.model.dto;

import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import lombok.Data;
import lombok.experimental.Accessors;
import org.hibernate.validator.constraints.Length;

import java.io.Serializable;

/**
 * 定义了消息的数据结构
 *
 * @author Renxing
 * @tag 消息类
 */
@Data
@Accessors(chain = true)
public class Msg implements Serializable {
    /**<fim_suffix>
    @NotNull(message = ""消息内容不能为空"")
    @Length(max = 3000, message = ""消息内容长度不能超过3000"")
    private String content;
    /**
     * 消息元数据
     */
    @Valid
    private MsgMeta meta;

    public void setContent(String content) {
        if (content.length() > 3000) {
            content = content.substring(0, 3000);
        }
        this.content = content;
    }
}
<fim_middle>","
     * 消息内容
     *
     * @mock 这是一条消息
     */","
     * 消息标题
     */"
"<fim_prefix>package doext.define;

/**<fim_suffix>
public interface do_CheckBox_IMethod {
}<fim_middle>","
 * 声明自定义扩展组件方法
 */","
 *
 * @author <NAME>
"
"<fim_prefix>/*<fim_suffix>

package fr.arpinum.cocoritest.interne.extensionlangage;

public class Objets {

	public static boolean egaux(Object gauche, Object droite) {
		if (gauche == null) {
			return droite == null;
		}
		return gauche.equals(droite);
	}

	public static boolean différents(Object gauche, Object droite) {
		return !egaux(gauche, droite);
	}

	public static String enChaîne(Object objet) {
		if (objet == null) {
			re<fim_middle>","
 * Copyright (C) 2013, Arpinum
 *
 * Cocoritest est un logiciel libre ; vous pouvez le redistribuer ou le modifier suivant les termes de la GNU Lesser
 * General Public License telle que publiée par la Free Software Foundation ; soit la version 3 de la licence,
 * soit (à votre gré) toute version ultérieure.
 *
 * Cocoritest est distribué dans l'espoir qu'il sera utile, mais SANS AUCUNE GARANTIE ; pas même la garantie
 * implicite de COMMERCIABILISABILITÉ ni d'ADÉQUATION à UN OBJECTIF PARTICULIER. Consultez la GNU Lesser General
 * Public License pour plus de détails.
 *
 * Vous devez avoir reçu une copie de la GNU Lesser General Public License en même temps que Cocoritest ; si ce n'est
  * pas le cas, consultez http://www.gnu.org/licenses.
 */","*
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>partnerDruckZuname = vertragspartnerDruckZuname;
  }
  
  /**
   * Titel vorne des Vertragspartners der Erstellung.<br>
   * @return Titel vorne
   */
  public String getVertragspartnerTitelVorne() {
    return _vertragspartnerTitelVorne;
  }

  public void setVertragspartnerTitelVorne(String vertragspartnerTitelVorne) {
    _vertragspartnerTitelVorne = vertragspartnerTitelVorne;
  }
  
  /**<fim_suffix>
  public String getVertragspartnerTitelHinten() {
    return _vertragspartnerTitelHinten;
  }

  public void setVertragspartnerTitelHinten(String vertragspartnerTitelHinten) {
    _vertragspartnerTitelHinten = vertragspartnerTitelHinten;
  }
  
  /**
   * Drucktitel vorne des Vertragspartners der Erstellung.<br>
   * @return Drucktitel vorne
   */
  public String getVertragspartnerDrucktitelVor<fim_middle>","
   * Titel hitnen des Vertragspartners der Erstellung.<br>
   * @return Titel hinten
   */","
   * Titel hinten des Vertragspartners der Erstellung.<br>
   * @return Titel hinten
  "
"<fim_prefix>rTitelVorne = vertragspartnerTitelVorne;
  }
  
  /**
   * Titel hitnen des Vertragspartners der Erstellung.<br>
   * @return Titel hinten
   */
  public String getVertragspartnerTitelHinten() {
    return _vertragspartnerTitelHinten;
  }

  public void setVertragspartnerTitelHinten(String vertragspartnerTitelHinten) {
    _vertragspartnerTitelHinten = vertragspartnerTitelHinten;
  }
  
  /**<fim_suffix>
  public String getVertragspartnerDrucktitelVorne() {
    return _vertragspartnerDrucktitelVorne;
  }

  public void setVertragspartnerDrucktitelVorne(String vertragspartnerDrucktitelVorne) {
    _vertragspartnerDrucktitelVorne = vertragspartnerDrucktitelVorne;
  }
  
  /**
   * Drucktitel hinten des Vertragspartners der Erstellung.<br>
   * @return Drucktitel hinten
   */
  public String getVe<fim_middle>","
   * Drucktitel vorne des Vertragspartners der Erstellung.<br>
   * @return Drucktitel vorne
   */","
   * Titel druckt des Vertragspartners der Erstellung.<br>
   * @return Titel druckt
   */"
"<fim_prefix>lHinten;
  }
  
  /**
   * Drucktitel vorne des Vertragspartners der Erstellung.<br>
   * @return Drucktitel vorne
   */
  public String getVertragspartnerDrucktitelVorne() {
    return _vertragspartnerDrucktitelVorne;
  }

  public void setVertragspartnerDrucktitelVorne(String vertragspartnerDrucktitelVorne) {
    _vertragspartnerDrucktitelVorne = vertragspartnerDrucktitelVorne;
  }
  
  /**<fim_suffix>
  public String getVertragspartnerDrucktitelHinten() {
    return _vertragspartnerDrucktitelHinten;
  }

  public void setVertragspartnerDrucktitelHinten(String vertragspartnerDrucktitelHinten) {
    _vertragspartnerDrucktitelHinten = vertragspartnerDrucktitelHinten;
  }
  
}
<fim_middle>","
   * Drucktitel hinten des Vertragspartners der Erstellung.<br>
   * @return Drucktitel hinten
   */","
   * Drucktitel hinten des Vertragspartners der Erstellung.<br>
   * @return Drucktitel hinten
   */"
"<fim_prefix>package at.chipkarte.client.prop.soap;

/**<fim_suffix>
public class Ersteller {

  private String _erstellerId;
  
  private String _erstellerName;
  
  private String _vertragspartnerVorname;
  
  private String _vertragspartnerZuname;
  
  private String _vertragspartnerDruckVorname;
  
  private String _vertragspartnerDruckZuname;
  
  private String _vertragspartnerTitelVorne;
  
  private String _vertragspartnerTitelHinten;
  
  private <fim_middle>","
 * Beinhaltet Daten zum Vertragspartner und zum Arzt der Erstellung
 */","
 * 
 * @author <NAME>
 * 
 */"
"<fim_prefix>vate String _vertragspartnerVorname;
  
  private String _vertragspartnerZuname;
  
  private String _vertragspartnerDruckVorname;
  
  private String _vertragspartnerDruckZuname;
  
  private String _vertragspartnerTitelVorne;
  
  private String _vertragspartnerTitelHinten;
  
  private String _vertragspartnerDrucktitelVorne;
  
  private String _vertragspartnerDrucktitelHinten;

  
  /**<fim_suffix>
  public String getErstellerId() {
    return _erstellerId;
  }

  public void setErstellerId(String erstellerId) {
    _erstellerId = erstellerId;
  }

  /**
   * Name des Ersteller (Arztes) des Befundes.<br>
   * @return Name
   */
  public String getErstellerName() {
    return _erstellerName;
  }

  public void setErstellerName(String erstellerName) {
    _erstellerName = erstellerName<fim_middle>","
   * ID des Erstellers (Arztes) des Befundes.<br>
   * @return Id
   */","
   * Erstellter.
   */"
"<fim_prefix>private String _vertragspartnerTitelHinten;
  
  private String _vertragspartnerDrucktitelVorne;
  
  private String _vertragspartnerDrucktitelHinten;

  
  /**
   * ID des Erstellers (Arztes) des Befundes.<br>
   * @return Id
   */
  public String getErstellerId() {
    return _erstellerId;
  }

  public void setErstellerId(String erstellerId) {
    _erstellerId = erstellerId;
  }

  /**<fim_suffix>
  public String getErstellerName() {
    return _erstellerName;
  }

  public void setErstellerName(String erstellerName) {
    _erstellerName = erstellerName;
  }
  
  /**
   * Vorname des Vertragspartners der Erstellung.<br>
   * @return Vorname
   */
  public String getVertragspartnerVorname() {
    return _vertragspartnerVorname;
  }

  public void setVertragspartnerVorname(String vertr<fim_middle>","
   * Name des Ersteller (Arztes) des Befundes.<br>
   * @return Name
   */","
   * Name des Erstellers (Arztes) des Befundes.<br>
   * @return Name
   */"
"<fim_prefix> vertragspartnerVorname) {
    _vertragspartnerVorname = vertragspartnerVorname;
  }
  
  /**
   * Zuname des Vertragspartners der Erstellung.<br> 
   * @return Zuname
   */
  public String getVertragspartnerZuname() {
    return _vertragspartnerZuname;
  }

  public void setVertragspartnerZuname(String vertragspartnerZuname) {
    _vertragspartnerZuname = vertragspartnerZuname;
  }
  
  /**<fim_suffix>
  public String getVertragspartnerDruckVorname() {
    return _vertragspartnerDruckVorname;
  }

  public void setVertragspartnerDruckVorname(String vertragspartnerDruckVorname) {
    _vertragspartnerDruckVorname = vertragspartnerDruckVorname;
  }
  
  /**
   * Druckzuname des Vertragspartners der Erstellung.<br> 
   * @return Zuname mit diakritischen Zeichen
   */
  public String getVertragspa<fim_middle>","
   * Druckvorname des Vertragspartners der Erstellung.<br> 
   * @return Vorname mit diakritischen Zeichen
   */","
   * Vorname des Vertragspartners der Erstellung.<br> 
   * @return Vorname mit diakritischen Zeichen
   */"
"<fim_prefix>rtnerZuname;
  }
  
  /**
   * Druckvorname des Vertragspartners der Erstellung.<br> 
   * @return Vorname mit diakritischen Zeichen
   */
  public String getVertragspartnerDruckVorname() {
    return _vertragspartnerDruckVorname;
  }

  public void setVertragspartnerDruckVorname(String vertragspartnerDruckVorname) {
    _vertragspartnerDruckVorname = vertragspartnerDruckVorname;
  }
  
  /**<fim_suffix>
  public String getVertragspartnerDruckZuname() {
    return _vertragspartnerDruckZuname;
  }

  public void setVertragspartnerDruckZuname(String vertragspartnerDruckZuname) {
    _vertragspartnerDruckZuname = vertragspartnerDruckZuname;
  }
  
  /**
   * Titel vorne des Vertragspartners der Erstellung.<br>
   * @return Titel vorne
   */
  public String getVertragspartnerTitelVorne() {
    ret<fim_middle>","
   * Druckzuname des Vertragspartners der Erstellung.<br> 
   * @return Zuname mit diakritischen Zeichen
   */","
   * Druckname des Vertragspartners der Erstellung.<br> 
   * @return Name mit diakritischen Zeichen
   */"
"<fim_prefix>partnerDruckVorname;
  }
  
  /**
   * Druckzuname des Vertragspartners der Erstellung.<br> 
   * @return Zuname mit diakritischen Zeichen
   */
  public String getVertragspartnerDruckZuname() {
    return _vertragspartnerDruckZuname;
  }

  public void setVertragspartnerDruckZuname(String vertragspartnerDruckZuname) {
    _vertragspartnerDruckZuname = vertragspartnerDruckZuname;
  }
  
  /**<fim_suffix>
  public String getVertragspartnerTitelVorne() {
    return _vertragspartnerTitelVorne;
  }

  public void setVertragspartnerTitelVorne(String vertragspartnerTitelVorne) {
    _vertragspartnerTitelVorne = vertragspartnerTitelVorne;
  }
  
  /**
   * Titel hitnen des Vertragspartners der Erstellung.<br>
   * @return Titel hinten
   */
  public String getVertragspartnerTitelHinten() {
    return<fim_middle>","
   * Titel vorne des Vertragspartners der Erstellung.<br>
   * @return Titel vorne
   */","
   * Titel des Vertragspartners der Erstellung.<br> 
   * @return Titel mit diakritischen Zeichen
  "
"<fim_prefix>getErstellerId() {
    return _erstellerId;
  }

  public void setErstellerId(String erstellerId) {
    _erstellerId = erstellerId;
  }

  /**
   * Name des Ersteller (Arztes) des Befundes.<br>
   * @return Name
   */
  public String getErstellerName() {
    return _erstellerName;
  }

  public void setErstellerName(String erstellerName) {
    _erstellerName = erstellerName;
  }
  
  /**<fim_suffix>
  public String getVertragspartnerVorname() {
    return _vertragspartnerVorname;
  }

  public void setVertragspartnerVorname(String vertragspartnerVorname) {
    _vertragspartnerVorname = vertragspartnerVorname;
  }
  
  /**
   * Zuname des Vertragspartners der Erstellung.<br> 
   * @return Zuname
   */
  public String getVertragspartnerZuname() {
    return _vertragspartnerZuname;
  }

 <fim_middle>","
   * Vorname des Vertragspartners der Erstellung.<br>
   * @return Vorname
   */","
   * Vorname des Ersteller (Arztes) des Befundes.<br>
   * @return Vor"
"<fim_prefix>ErstellerName(String erstellerName) {
    _erstellerName = erstellerName;
  }
  
  /**
   * Vorname des Vertragspartners der Erstellung.<br>
   * @return Vorname
   */
  public String getVertragspartnerVorname() {
    return _vertragspartnerVorname;
  }

  public void setVertragspartnerVorname(String vertragspartnerVorname) {
    _vertragspartnerVorname = vertragspartnerVorname;
  }
  
  /**<fim_suffix>
  public String getVertragspartnerZuname() {
    return _vertragspartnerZuname;
  }

  public void setVertragspartnerZuname(String vertragspartnerZuname) {
    _vertragspartnerZuname = vertragspartnerZuname;
  }
  
  /**
   * Druckvorname des Vertragspartners der Erstellung.<br> 
   * @return Vorname mit diakritischen Zeichen
   */
  public String getVertragspartnerDruckVorname() {
    return <fim_middle>","
   * Zuname des Vertragspartners der Erstellung.<br> 
   * @return Zuname
   */","
   * Nachname des Vertragspartners der Erstellung.<br>
   * @return Nachname
   */"
"<fim_prefix>package homework;

import java.util.Scanner;

public class badak_0805 {

	/*<fim_suffix>
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		
		int a = sc.nextInt();
		int b = sc.nextInt();
		sc.close();
		
		double[] data = {85.6, 79.5, 83.1, 80.0, 78.2, 75.0};
		
		
		
		System.out.print(Math.round((data[a-1]+data[b-1])*10)/10.0);
	}
}
<fim_middle>","
1반부터 6반까지의 평균점수를 저장한 후 두 반의 반 번호를 입력받아 두 반 평균점수의 합을 출력하는 프로그램을 작성하시오.
반별 평균점수는 초기값으로 1반부터 차례로 85.6 79.5 83.1 80.0 78.2 75.0으로 초기화하고 

출력은 소수 두 번째 자리에서 반올림하여 소수 첫째자리까지 한다.

-입력 예
1 3
-출력 예
168.7
	 */","*
	 * @param args
	 */"
"<fim_prefix>package hafta3.gun2;

/**<fim_suffix>
public class StringOrnekleri3 {

    public static void main(String[] args) {

        System.out.println(12 + 13);
        System.out.println(""Sonuç = "" + 12 + 13);
        System.out.println(12 + 13 + "" = "" + 25);
        System.out.println(12 + 13 + "" = "" + 12 + 13);
        System.out.println(12 + 13 + "" = "" + (12 + 13));
    }
}
<fim_middle>","
 * StringOrnekleri3 sınıfı + operatörünün String sınıfı ile kullanımını anlatır.
 * String değerden sonra + gelirse sonrasında gelen bütün değerleri birbirine
 * sözel olarak ekler.
 */","
 * @author <NAME>
 * @since 13.12.2018
 */"
"<fim_prefix>package co.edu.utp.gia.sms.query.referencia;

import co.edu.utp.gia.sms.entidades.EvaluacionCalidad;
import co.edu.utp.gia.sms.entidades.EvaluacionCualitativa;
import co.edu.utp.gia.sms.entidades.Referencia;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.Comparator;
import java.util.function.Predicate;
import java.util.stream.Stream;

/**<fim_suffix>
public class ReferenciaGetAllByEvaluacionOfAtributoCalidad {
    /**
     * Consulta que permite obtener las referencias con una determinada calificación de un atributo de calidad dado
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param idAtributoCalidad Id del atributo de calidad
     * @param valorEvaluacion Evaluación que deben cumplir las<fim_middle>","
 * Consulta que permite obtener las referencias con una determinada calificación de un atributo de calidad dado
 */","
 * Consulta que permite obtener las referencias con una determinada calificación de un atributo de calidad dado
 *"
"<fim_prefix>Cualitativa;
import co.edu.utp.gia.sms.entidades.Referencia;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.Comparator;
import java.util.function.Predicate;
import java.util.stream.Stream;

/**
 * Consulta que permite obtener las referencias con una determinada calificación de un atributo de calidad dado
 */
public class ReferenciaGetAllByEvaluacionOfAtributoCalidad {
    /**<fim_suffix>
    public static Stream<Referencia> createQuery(Provider<Collection<Referencia>> dataProvider, String idAtributoCalidad
            , EvaluacionCualitativa valorEvaluacion){
        Predicate<EvaluacionCalidad> filtro = evaluacion ->evaluacion.getAtributoCalidad().getId().equals(idAtributoCalidad)
                && evaluacion.getEvaluacionCualitativa().equals(valorEvaluacion);

        return dataProvider<fim_middle>","
     * Consulta que permite obtener las referencias con una determinada calificación de un atributo de calidad dado
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param idAtributoCalidad Id del atributo de calidad
     * @param valorEvaluacion Evaluación que deben cumplir las referencias seleccionadas
     * @return Stream<Referencia> que representa el resultado de la consulta
     */","
     * Crea una consulta que permite obtener las referencias con una determinada calificación de un atributo de calidad dado
     * @param dataProvider Proveedor de datos
     * @param idAtributoCalidad Identificador del atributo de calidad
     * @param valorEvaluacion Evaluación de la cual se quiere obtener las referencias
     * @return Stream con las referencias
     */"
"<fim_prefix>
/**<fim_suffix>
package es.inteco.xbrl.pgc.viewer;<fim_middle>","
 * Clases que componen el servicio de visualización PGC2007.
 */","
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.process;
<fim_middle>","
 * <p>
 *  PCCの基盤制御処理機能を提供します。
 * </p>
 */","
 * @author masaki.kamachi
 */"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.component.ultramonkey;
<fim_middle>","
 * <p>
 *  UltraMonkeyに関する制御機能を提供します。
 * </p>
 */","
 * UltraMonkey
 */"
"<fim_prefix>package doext.implement;

import doext.define.do_CheckBox_MAbstract;

/**<fim_suffix>
public class do_CheckBox_Model extends do_CheckBox_MAbstract {

	public do_CheckBox_Model() throws Exception {
		super();
	}
	
}
<fim_middle>","
 * 自定义扩展组件Model实现，继承do_CheckBox_MAbstract抽象类；
 *
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.first.plug;

import java.io.Serializable;

/**<fim_suffix>
public enum AbsType implements Serializable {
    START,//开始连接

    CORE,//抽象类专用，别用

    INFO,//信息，只限服务端用,如果你的插件只想发送给某个指定客户端信息请用这个

    CHAT,//聊天文本,如果你想要只处理默认的聊天信息请写这个

    COMMAND,//聊天框架命令,如果你想要输入一些命令，就用它了

    PLUG,//自定义插件请用这个

    END,//结束，表示发送结束

    CLOSE;//代表客户端或服务端关闭
    static final long serialVersionUID = 111L;
}
<fim_middle>","
 * @author 原初
 * @create 2021 - 11 - 08
 * @version 0.0.2 一个枚举类，定义插件的传输数据类型类型
 */","
 * @author zhangbo
 * @date 2020/11/30
 */"
"<fim_prefix>package club.xiaojiawei.controls.ico;

import club.xiaojiawei.controls.images.ImagesLoader;
import javafx.scene.layout.StackPane;
import org.girod.javafx.svgimage.SVGImage;
import org.girod.javafx.svgimage.SVGLoader;

/**<fim_suffix>
public class CloseIco extends AbstractIco {

    public CloseIco() {
        this(null);
    }

    public CloseIco(String color) {
        super(color);
        SVGImage svgImage = SVGLoader.load(ImagesLoader.class.getResource(this.getClass().getSimpleName() + "".svg""));
        if (svgImage != null) {
            this.setMaxWidth(svgImage.getWidth());
            this.getChildren().add(svgImage);
        }<fim_middle>","
 * @author 肖嘉威 xjw580@qq.com
 * @date 2023/10/31 0:28
 */","
 * @author : xiaojiawei
 * @date : 17/12/21
 */"
"<fim_prefix>package cc.moecraft.icq.event.events.local;

import cc.moecraft.icq.PicqBotX;
import net.mamoe.mirai.contact.Group;
import net.mamoe.mirai.message.data.MessageChain;

/**<fim_suffix>
public class EventLocalSendGroupMessage extends EventLocalSendMessage {
    public EventLocalSendGroupMessage(PicqBotX bot, Group group, MessageChain rawMessage) {
        super(bot, group, rawMessage);
    }
}
<fim_middle>","
 * 本地调用 API 触发的发送群组消息事件
 */","
 * The class of {@link EventLocalSendMessage} that is triggered when a"
"<fim_prefix>package com.gitee.swsk33.gitdocument.service;

import com.gitee.swsk33.gitdocument.dataobject.Setting;
import com.gitee.swsk33.gitdocument.model.Result;
import org.springframework.stereotype.Service;

@Service
public interface SettingService {

	/**<fim_suffix>
	Result<Void> update(Setting setting);

}<fim_middle>","
	 * 修改用户偏好设置
	 */","
	 * 获取设置
	 * @return
"
"<fim_prefix>sbezeichnung;
	
	private ArrayList<Arbeitskraft> listeArbeitskraefte = new ArrayList<Arbeitskraft>();
	
	public Abteilung(int nr, String bezeichnung) {
		this.abteilungsnummer = nr;
		this.abteilungsbezeichnung = bezeichnung;
	}
	
	public void hinzufuegen(Arbeitskraft arbeitskraft) {
		if(listeArbeitskraefte!=null) {
			listeArbeitskraefte.add(arbeitskraft);
			arbeitskraft.setAbteilung(this);
		}
	}
	
	/**<fim_suffix>
	public Arbeitskraft loeschen(String persNrDerZuLoeschendenArbeitskraft) {
		if(listeArbeitskraefte!=null) {
			int i;
			boolean personalNrGefunden=false;
			for (i = 0; i < listeArbeitskraefte.size(); i++) {
				Arbeitskraft eineArbeitskraft = listeArbeitskraefte.get(i);
				if(eineArbeitskraft.getPersonalnr().equals(persNrDerZuLoeschendenArbeitskraft)) {
					personalNrGefunden=true;
					break; // for-S<fim_middle>","
	 * Loeschen der Arbeitskraft aus der Abteilung
	 * 
	 * @param persNrDerZuLoeschendenArbeitskraft Personalnummer der Arbeitskraft, die geloescht werden soll
	 * @return das Objekt der Arbeitskraft, welche aus der Liste geloescht wurde
	 */","
	 * @return Liste der Arbeitskräfte
	 */"
"<fim_prefix>/*<fim_suffix>

package fr.arpinum.cocoritest.interne.specification.collection;

import java.util.Collection;

import fr.arpinum.cocoritest.specification.Specification;

public class SpecificationTailleDeCollection<E> implements Specification<Collection<E>> {

	public SpecificationTailleDeCollection(int tailleSpécifiée) {
		this.tailleSpécifiée = tailleSpécifiée;
	}

	@Override
	public boolean estSatisfaitePar(Collection<<fim_middle>","
 * Copyright (C) 2013, Arpinum
 *
 * Cocoritest est un logiciel libre ; vous pouvez le redistribuer ou le modifier suivant les termes de la GNU Lesser
 * General Public License telle que publiée par la Free Software Foundation ; soit la version 3 de la licence,
 * soit (à votre gré) toute version ultérieure.
 *
 * Cocoritest est distribué dans l'espoir qu'il sera utile, mais SANS AUCUNE GARANTIE ; pas même la garantie
 * implicite de COMMERCIABILISABILITÉ ni d'ADÉQUATION à UN OBJECTIF PARTICULIER. Consultez la GNU Lesser General
 * Public License pour plus de détails.
 *
 * Vous devez avoir reçu une copie de la GNU Lesser General Public License en même temps que Cocoritest ; si ce n'est
  * pas le cas, consultez http://www.gnu.org/licenses.
 */","*
 * 
 * @author <NAME>
 *
 * @param <E>
 */"
"<fim_prefix>package cn.foxtech.device.protocol.v1.dahua.fire.core.entity;

public abstract class PduEntity {
    /**<fim_suffix>
    public abstract int getSn();

    /**
     * 填写流水号
     *
     * @param sn sn
     */
    public abstract void setSn(int sn);
}
<fim_middle>","
     * 获得流水号
     *
     * @return sn
     */","
     * 流水号
     */"
"<fim_prefix>package cn.foxtech.device.protocol.v1.dahua.fire.core.entity;

public abstract class PduEntity {
    /**
     * 获得流水号
     *
     * @return sn
     */
    public abstract int getSn();

    /**<fim_suffix>
    public abstract void setSn(int sn);
}
<fim_middle>","
     * 填写流水号
     *
     * @param sn sn
     */","
     * 设置流水号
     *
     * @param sn
     */"
"<fim_prefix>package com.ggggght.agent.bytecode;

/**<fim_suffix>
public interface EnhancerContext<T, R> extends EnhancerFactory<T, R> {

}
<fim_middle>","
 * 增强上下文
 */","
 * @author gggghtkk"
"<fim_prefix>package gui.tipos;

/**<fim_suffix>
public enum TipoCromosoma {
	
	FUNCION1, FUNCION2, FUNCION3, FUNCION4, FUNCION5;
}
<fim_middle>","
 * Enumerado que contiene el tipo de cromosoma a crear en función de la 
 * versión seleccionada por el usuario en la interfaz.
 * 
 * @author Grupo20.
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package club.xiaojiawei.controls.ico;

import club.xiaojiawei.controls.images.ImagesLoader;
import javafx.scene.layout.StackPane;
import org.girod.javafx.svgimage.SVGImage;
import org.girod.javafx.svgimage.SVGLoader;

/**<fim_suffix>
public class MessageIco extends AbstractIco {

    public MessageIco() {
        this(null);
    }

    public MessageIco(String color) {
        super(color);
        SVGImage svgImage = SVGLoader.load(ImagesLoader.class.getResource(this.getClass().getSimpleName() + "".svg""));
        if (svgImage != null) {
            this.setMaxWidth(svgImage.getWidth());
            this.getChildren().add(svgImage);
   <fim_middle>","
 * @author 肖嘉威 xjw580@qq.com
 * @date 2023/10/31 0:28
 */","
 * @author : xiaojiawei
 * @date : 17/12/21
 */"
"<fim_prefix>package org.dromara.northstar.indicator.helper;

import org.dromara.northstar.indicator.AbstractIndicator;
import org.dromara.northstar.indicator.Indicator;
import org.dromara.northstar.indicator.model.Configuration;
import org.dromara.northstar.indicator.model.Num;

/**<fim_suffix>
public class SimpleValueIndicator extends AbstractIndicator implements Indicator {

	public SimpleValueIndicator(Configuration cfg) {
		super(cfg);
	}

	@Override
	protected Num evaluate(Num num) {
		return num;
	}
	
}
<fim_middle>","
 * 简单值指标
 * @author KevinHuangwl
 *
 */","
 * 简单值指标
 * @author xiongshiyan
 */"
"<fim_prefix>package com.dimple.effectiveJava.chapter9;

/**<fim_suffix>
public class Item60 {

    public static void main(String[] args) {
        System.out.println(1.03 - 0.42);//0.6100000000000001
        System.out.println(1.00 - 9 * 0.10);//0.09999999999999998
    }

}
<fim_middle>","
 * @className: Item60
 * @description: 如果需要精确地答案，避免使用float和double
 * float和double类型主要是为了科学计算和工程计算而设计的。float和double不适合货币计算。
 * 一般使用BigDecimal、int、long进行计算
 * 然而使用BigDecimal有两个缺点：与基本运算类型相比，这样做很不方便、而且速度很慢。
 * 如果数字范围没有操作9位十进制可以使用int、不超过18位可以使用long、超过18位就使用BigDecimal
 * @auther: Dimple
 * @date: 06/14/19
 * @version: 1.0
 */","
 * @author zhongyj <<EMAIL>><br/>
 * @date 2020/1/14
 */"
"<fim_prefix>;
    /**
     * 结果消息，一般反馈给用户
     *
     * @mock 返回的消息
     */
    private String msg;
    /**
     * 结果数据，一般反馈给前端进行处理
     */
    private T data;

    public Result(String msg, T data) {
        this.flag = true;
        this.msg = msg;
        this.data = data;
    }

    public Result(boolean b, String msg, T data) {
        this.flag = b;
        this.msg = msg;
        this.data = data;
    }

    /**<fim_suffix>
    public static Result<String> defineError(String e) {
        return new Result<>(false, e, null);
    }

    /**
     * 其他异常处理方法返回的结果
     *
     * @param e 异常
     * @return
     */
    public static Result<String> otherError(Exception e) {
        return new Result<>(false, ""未知异常！信息："" + e.getMessage(), null);
    }
}
<fim_middle>","
     * 自定义异常返回的结果
     *
     * @param e 异常消息
     * @return
     */","
     * 成功返回的结果
     *
     * @param data 结果数据
     * @return
     */"
"<fim_prefix>package cc.renxing.push.model.dto;

import lombok.Data;

import java.io.Serializable;

/**
 * 所有的最终反馈会被包装为此类
 *
 * @author Renxing
 * @tag 结果类
 */
@Data
public class Result<T> implements Serializable {
    /**
     * 结果标志，true为成功，false为失败
     */
    private boolean flag;
    /**<fim_suffix>
    private String msg;
    /**
     * 结果数据，一般反馈给前端进行处理
     */
    private T data;

    public Result(String msg, T data) {
        this.flag = true;
        this.msg = msg;
        this.data = data;
    }

    public Result(boolean b, String msg, T data) {
        this.flag = b;
        this.msg = msg;
        this.data = data;
    }

    /**
     * 自定义异常返回的结果
     *
     * @param e 异常消息
     * @return
  <fim_middle>","
     * 结果消息，一般反馈给用户
     *
     * @mock 返回的消息
     */","
     * 结果信息
     */"
"<fim_prefix>package cc.renxing.push.model.dto;

import lombok.Data;

import java.io.Serializable;

/**
 * 所有的最终反馈会被包装为此类
 *
 * @author Renxing
 * @tag 结果类
 */
@Data
public class Result<T> implements Serializable {
    /**
     * 结果标志，true为成功，false为失败
     */
    private boolean flag;
    /**
     * 结果消息，一般反馈给用户
     *
     * @mock 返回的消息
     */
    private String msg;
    /**<fim_suffix>
    private T data;

    public Result(String msg, T data) {
        this.flag = true;
        this.msg = msg;
        this.data = data;
    }

    public Result(boolean b, String msg, T data) {
        this.flag = b;
        this.msg = msg;
        this.data = data;
    }

    /**
     * 自定义异常返回的结果
     *
     * @param e 异常消息
     * @return
     */
    public static Result<String> defineError(String e) {
 <fim_middle>","
     * 结果数据，一般反馈给前端进行处理
     */","
     * 结果数据，一般反馈给用户
     *
 "
"<fim_prefix> {
        this.flag = true;
        this.msg = msg;
        this.data = data;
    }

    public Result(boolean b, String msg, T data) {
        this.flag = b;
        this.msg = msg;
        this.data = data;
    }

    /**
     * 自定义异常返回的结果
     *
     * @param e 异常消息
     * @return
     */
    public static Result<String> defineError(String e) {
        return new Result<>(false, e, null);
    }

    /**<fim_suffix>
    public static Result<String> otherError(Exception e) {
        return new Result<>(false, ""未知异常！信息："" + e.getMessage(), null);
    }
}
<fim_middle>","
     * 其他异常处理方法返回的结果
     *
     * @param e 异常
     * @return
     */","
     * 自定义异常返回的结果
     *
     * @param e 异常消息
     * @return
     */"
"<fim_prefix>package cc.renxing.push.model.dto;

import lombok.Data;

import java.io.Serializable;

/**
 * 所有的最终反馈会被包装为此类
 *
 * @author Renxing
 * @tag 结果类
 */
@Data
public class Result<T> implements Serializable {
    /**<fim_suffix>
    private boolean flag;
    /**
     * 结果消息，一般反馈给用户
     *
     * @mock 返回的消息
     */
    private String msg;
    /**
     * 结果数据，一般反馈给前端进行处理
     */
    private T data;

    public Result(String msg, T data) {
        this.flag = true;
        this.msg = msg;
        this.data = data;
    }

    public Result(boolean b, String msg, T data) {
        this.flag = b;
        this.msg = msg;
        this.dat<fim_middle>","
     * 结果标志，true为成功，false为失败
     */","
     * 结果状态，true为成功，false为失败
     */"
"<fim_prefix>package cc.renxing.push.model.dto;

import lombok.Data;

import java.io.Serializable;

/**<fim_suffix>
@Data
public class Result<T> implements Serializable {
    /**
     * 结果标志，true为成功，false为失败
     */
    private boolean flag;
    /**
     * 结果消息，一般反馈给用户
     *
     * @mock 返回的消息
     */
    private String msg;
    /**
     * 结果数据，一般反馈给前端进行处理
     */
    private T data;

    public Result(String msg, T data) {
        this.flag = true;
        this.msg = msg;
        this.data = data;
    }

    public Res<fim_middle>","
 * 所有的最终反馈会被包装为此类
 *
 * @author Renxing
 * @tag 结果类
 */","
 * 统一返回结果
 *
 * @author : liuyk
 * @date : 2020/11/26 10:54 上"
"<fim_prefix>package com.cownew.cownewsql.ast.node.item;

import antlr.collections.AST;

import com.cownew.cownewsql.ast.node.SQLBaseAST;

/**<fim_suffix>
public abstract  class SqlItemBaseAST extends SQLBaseAST
{
	public SqlItemBaseAST(){
		super();
	}
	public SqlItemBaseAST(String text){
		super(text);
	}
	public SqlItemBaseAST(AST ast){
		super(ast);
	}
	public SqlItemBaseAST(String text,int type){
		super(text,type);
	}

}
<fim_middle>","
 * sql部件的基类
 * @author 杨中科
 *
 */","
 * sql语句的基本节点
 * @author gaofei
 *
 */"
"<fim_prefix>package com.zxl.gb;

import lombok.Getter;

/**<fim_suffix>
@Getter
public enum GbDataTypeFlg {


    /**
     * 整车数据
     */
    WHOLE_DATA(""01""),

    /**
     * 驱动电机数据
     */
    DRIVE_MOTOR(""02""),

    /**
     * 燃料电池数据
     */
    FUEL_CELL(""03""),

    /**
     * 发动机数据
     */
    ENGINE(""04""),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION(""05""),

    /**
     * 极值数据
     */
    EXTREMUM(""06""),

    /**
     * 报警数据
     */
    warning(""07""),




    ;
  <fim_middle>","
 * 国标数据类型标识
 */","
 * @author 张小龙
 *"
"<fim_prefix>package com.zxl.gb;

import lombok.Getter;

/**
 * 国标数据类型标识
 */
@Getter
public enum GbDataTypeFlg {


    /**
     * 整车数据
     */
    WHOLE_DATA(""01""),

    /**
     * 驱动电机数据
     */
    DRIVE_MOTOR(""02""),

    /**<fim_suffix>
    FUEL_CELL(""03""),

    /**
     * 发动机数据
     */
    ENGINE(""04""),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION(""05""),

    /**
     * 极值数据
     */
    EXTREMUM(""06""),

    /**
     * 报警数据
     */
    warning(""07""),




    ;
    /**
     * 标识
     */
    private String flg;


    GbDataTypeFlg(String flg) {
        this.flg = flg;
    }
}
<fim_middle>","
     * 燃料电池数据
     */","
     * 燃料电池数据
     */"
"<fim_prefix>package com.zxl.gb;

import lombok.Getter;

/**
 * 国标数据类型标识
 */
@Getter
public enum GbDataTypeFlg {


    /**
     * 整车数据
     */
    WHOLE_DATA(""01""),

    /**
     * 驱动电机数据
     */
    DRIVE_MOTOR(""02""),

    /**
     * 燃料电池数据
     */
    FUEL_CELL(""03""),

    /**<fim_suffix>
    ENGINE(""04""),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION(""05""),

    /**
     * 极值数据
     */
    EXTREMUM(""06""),

    /**
     * 报警数据
     */
    warning(""07""),




    ;
    /**
     * 标识
     */
    private String flg;


    GbDataTypeFlg(String flg) {
        this.flg = flg;
    }
}
<fim_middle>","
     * 发动机数据
     */","
     * 引擎数据
     */"
"<fim_prefix>package com.zxl.gb;

import lombok.Getter;

/**
 * 国标数据类型标识
 */
@Getter
public enum GbDataTypeFlg {


    /**
     * 整车数据
     */
    WHOLE_DATA(""01""),

    /**
     * 驱动电机数据
     */
    DRIVE_MOTOR(""02""),

    /**
     * 燃料电池数据
     */
    FUEL_CELL(""03""),

    /**
     * 发动机数据
     */
    ENGINE(""04""),

    /**<fim_suffix>
    VEHICLE_LOCATION(""05""),

    /**
     * 极值数据
     */
    EXTREMUM(""06""),

    /**
     * 报警数据
     */
    warning(""07""),




    ;
    /**
     * 标识
     */
    private String flg;


    GbDataTypeFlg(String flg) {
        this.flg = flg;
    }
}
<fim_middle>","
     * 车辆位置数据
     */","
     * 车辆位置数据
     */"
"<fim_prefix>package com.zxl.gb;

import lombok.Getter;

/**
 * 国标数据类型标识
 */
@Getter
public enum GbDataTypeFlg {


    /**
     * 整车数据
     */
    WHOLE_DATA(""01""),

    /**
     * 驱动电机数据
     */
    DRIVE_MOTOR(""02""),

    /**
     * 燃料电池数据
     */
    FUEL_CELL(""03""),

    /**
     * 发动机数据
     */
    ENGINE(""04""),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION(""05""),

    /**<fim_suffix>
    EXTREMUM(""06""),

    /**
     * 报警数据
     */
    warning(""07""),




    ;
    /**
     * 标识
     */
    private String flg;


    GbDataTypeFlg(String flg) {
        this.flg = flg;
    }
}
<fim_middle>","
     * 极值数据
     */","
     * 极限值数据
    "
"<fim_prefix>zxl.gb;

import lombok.Getter;

/**
 * 国标数据类型标识
 */
@Getter
public enum GbDataTypeFlg {


    /**
     * 整车数据
     */
    WHOLE_DATA(""01""),

    /**
     * 驱动电机数据
     */
    DRIVE_MOTOR(""02""),

    /**
     * 燃料电池数据
     */
    FUEL_CELL(""03""),

    /**
     * 发动机数据
     */
    ENGINE(""04""),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION(""05""),

    /**
     * 极值数据
     */
    EXTREMUM(""06""),

    /**<fim_suffix>
    warning(""07""),




    ;
    /**
     * 标识
     */
    private String flg;


    GbDataTypeFlg(String flg) {
        this.flg = flg;
    }
}
<fim_middle>","
     * 报警数据
     */","
     * 报警数据
     */"
"<fim_prefix>package com.zxl.gb;

import lombok.Getter;

/**
 * 国标数据类型标识
 */
@Getter
public enum GbDataTypeFlg {


    /**<fim_suffix>
    WHOLE_DATA(""01""),

    /**
     * 驱动电机数据
     */
    DRIVE_MOTOR(""02""),

    /**
     * 燃料电池数据
     */
    FUEL_CELL(""03""),

    /**
     * 发动机数据
     */
    ENGINE(""04""),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION(""05""),

    /**
     * 极值数据
     */
    EXTREMUM(""06""),

    /**
     * 报警数据
     */
    warning(""07""),




    ;
    /**
     * 标识
     */
    private String flg;


    GbDataTypeFl<fim_middle>","
     * 整车数据
     */","
     * 整车数据
     */"
"<fim_prefix>package com.zxl.gb;

import lombok.Getter;

/**
 * 国标数据类型标识
 */
@Getter
public enum GbDataTypeFlg {


    /**
     * 整车数据
     */
    WHOLE_DATA(""01""),

    /**<fim_suffix>
    DRIVE_MOTOR(""02""),

    /**
     * 燃料电池数据
     */
    FUEL_CELL(""03""),

    /**
     * 发动机数据
     */
    ENGINE(""04""),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION(""05""),

    /**
     * 极值数据
     */
    EXTREMUM(""06""),

    /**
     * 报警数据
     */
    warning(""07""),




    ;
    /**
     * 标识
     */
    private String flg;


    GbDataTypeFlg(String flg) {
        this.flg = flg;
    }
}
<fim_middle>","
     * 驱动电机数据
     */","
     * 驱动电机数据
     */"
"<fim_prefix>er
public enum GbDataTypeFlg {


    /**
     * 整车数据
     */
    WHOLE_DATA(""01""),

    /**
     * 驱动电机数据
     */
    DRIVE_MOTOR(""02""),

    /**
     * 燃料电池数据
     */
    FUEL_CELL(""03""),

    /**
     * 发动机数据
     */
    ENGINE(""04""),

    /**
     * 车辆位置数据
     */
    VEHICLE_LOCATION(""05""),

    /**
     * 极值数据
     */
    EXTREMUM(""06""),

    /**
     * 报警数据
     */
    warning(""07""),




    ;
    /**<fim_suffix>
    private String flg;


    GbDataTypeFlg(String flg) {
        this.flg = flg;
    }
}
<fim_middle>","
     * 标识
     */","
     * 标志
     */"
"<fim_prefix>package com.copy.jianshuapp.common.statusbar;

/**<fim_suffix>
public enum StatusBarStyle {

    /**
     * 亮色主题：状态栏背景亮色，文字、图标颜色黑色
     */
    Light,

    /**
     * 暗色主题：状态栏背景暗色，文字、图标颜色白色
     */
    Dark

}
<fim_middle>","
 * 状态栏风格
 * @version imkarl 2017-04
 */","
 * @author Copy
 * @time on 2019/3/29
 *"
"<fim_prefix>package com.copy.jianshuapp.common.statusbar;

/**
 * 状态栏风格
 * @version imkarl 2017-04
 */
public enum StatusBarStyle {

    /**
     * 亮色主题：状态栏背景亮色，文字、图标颜色黑色
     */
    Light,

    /**<fim_suffix>
    Dark

}
<fim_middle>","
     * 暗色主题：状态栏背景暗色，文字、图标颜色白色
     */","
     * 暗色主题：状态栏背景暗色，文字、图标颜色白色
     */"
"<fim_prefix>package com.copy.jianshuapp.common.statusbar;

/**
 * 状态栏风格
 * @version imkarl 2017-04
 */
public enum StatusBarStyle {

    /**<fim_suffix>
    Light,

    /**
     * 暗色主题：状态栏背景暗色，文字、图标颜色白色
     */
    Dark

}
<fim_middle>","
     * 亮色主题：状态栏背景亮色，文字、图标颜色黑色
     */","
     * 白色主题：状态栏背景白色，文字、图标颜色黑色
     */"
"<fim_prefix> de.x8bit.Fantasya.Atlantis.Region;
import de.x8bit.Fantasya.Atlantis.Items.Alpaka;
import de.x8bit.Fantasya.Atlantis.Items.Holz;
import de.x8bit.Fantasya.Atlantis.Items.Zotte;
import de.x8bit.Fantasya.util.Random;

public class Oedland extends Region
{
	
	public Oedland() {
		setSteineFuerStrasse(100);		// Steine f√ºr eine Strassenrichtung
	}
	
	@Override
	public String getArtikel() { return ""das""; }

	/**<fim_suffix>
	@Override
	public void Init() {
		super.Init();
		
		if (getBauern() == 0) setBauern(Random.rnd(100, 500));
		if (getBaum() != 0) setResource(Holz.class, getBaum()); else setResource(Holz.class, Random.rnd(0, 30));
		if (getSilber() == 0) setSilber(getBauern() * Random.rnd(11, 16));
		setResource(Zotte.class, Random.rnd(5, 30));
		setResource(Alpaka.class, Random.rnd(0, 8));
		// setResource(Mastodon.class<fim_middle>", Initialisierung der Bauern & so */,"
	 * @return
	 */"
"<fim_prefix>/**<fim_suffix>
package com.bob.collection;<fim_middle>","
 * java.util.Collection:集合
 * |- ArrayList：     数组结构             - 查询快，增删慢；线程不同步，效率高；默认初始化10个元素，超过时延长50%
 * |- List - |- LinkedList：  链表数据结构     - 查询慢，增删快
 * |         |- Vector：              数组结构             - 被ArrayList取代了；同步，数据安全；默认也是10个元素，超过时延长100%
 * Collection-|
 * |
 * |- Set  - |- HashSet：           哈希表（结构） - 存储的时候，先比较哈希值（hashCode），不相同直接存储，相同的话再进行equals比较，并顺延存储；按照hashCode排序
 * |- TreeSet：           二叉树结构         - 按照字母排序
 * <p>
 * <p>
 * <p>
 * |- HashTable：     哈希表结构     - JDK1.0，线程同步，不可以为null键和null值
 * Map    -|- HashMap：           哈希表结构     - 非同步，允许null
 * |- TreeMap：          二叉树结构      - 可以用于给map集合中的键值排序
 * <p>
 * <p>
 * List:有序，可以重复
 * Set:无序，不可重复
 * <p>
 * java.util.Iterator:迭代器
 * 用于取出集合中的元素，只有三个重要的方法：hasNext(),next(),iterator()
 *
 * @author Bob
 */","
 * 
 * @author bob
 *
 */"
"<fim_prefix>package com.blocklynukkit.bedrockLang.compiler.ast.compile;

/**<fim_suffix>
public interface StatCodeGenerator extends CodeGenerator<Void> {

}
<fim_middle>","
 * 任何语句{@link Stat}的生成器都应实现此接口
 * @see Stat
 */","
 * Created by <NAME> on 2020/05/21
 */"
"<fim_prefix>package cn.lili.modules.im.entity.enums;

/**<fim_suffix>
public enum MessageResultType {
    /**
     * 返回消息类型枚举
     * <p>
     * 好友列表
     * 增加好友
     * 消息
     * 阅读消息
     * 未读消息
     * 历史消息
     * 系统提示
     * 下线提醒
     */
    FRIENDS,
    ADD_FRIENDS,
    MESSAGE,
    READ_MESSAGE,
    UN_READ,
    HISTORY,
    SYSTEM_TIPS,
    OFFLINE

}
<fim_middle>","
 * 返回消息类型枚举
 *
 * @author liushuai
 */","
 * 消息返回类型枚举
 *
 * @author lili
 * @"
"<fim_prefix>package cn.lili.modules.im.entity.enums;

/**
 * 返回消息类型枚举
 *
 * @author liushuai
 */
public enum MessageResultType {
    /**<fim_suffix>
    FRIENDS,
    ADD_FRIENDS,
    MESSAGE,
    READ_MESSAGE,
    UN_READ,
    HISTORY,
    SYSTEM_TIPS,
    OFFLINE

}
<fim_middle>","
     * 返回消息类型枚举
     * <p>
     * 好友列表
     * 增加好友
     * 消息
     * 阅读消息
     * 未读消息
     * 历史消息
     * 系统提示
     * 下线提醒
     */","
     * 好友
     */"
"<fim_prefix>package fr.gouv.beta.fabnum.kelrisks.persistance.referentiel;

import fr.gouv.beta.fabnum.commun.persistance.IAbstractDAO;
import fr.gouv.beta.fabnum.kelrisks.transverse.referentiel.entities.ShortUrl;

/**<fim_suffix>
public interface IShortUrlDAO extends IAbstractDAO<ShortUrl> {
}
  <fim_middle>","
 * Classe interface d'accès DAO à ShortUrl
 */","
 * @author <NAME>
 * @since 1."
"<fim_prefix>package com.linkwechat.common.enums.strategicjourney;

import lombok.Getter;

/**<fim_suffix>
@Getter
public enum JourneyStatusEnum {

    /**
     * 状态 0、未发布 1、待执行 2、执行中 3、已完成 4、已暂定 5、已停用 6、失败
     */
    UNPUBLISHED(0, ""未发布""),
    PENDING(1, ""待执行""),
    EXECUTION(2, ""执行中""),
    COMPLETED(3, ""已完成""),
    PAUSED(4, ""已暂停""),
    TERMINATED(5, ""已停用""),
    ;

    Integer code;

    String value;


    JourneyStatusEnum(Integer code, String value) {
        this.code = code;
        this.value = value;
  <fim_middle>","
 * 执行状态
 */","
 * 战略行"
"<fim_prefix>package com.linkwechat.common.enums.strategicjourney;

import lombok.Getter;

/**
 * 执行状态
 */
@Getter
public enum JourneyStatusEnum {

    /**<fim_suffix>
    UNPUBLISHED(0, ""未发布""),
    PENDING(1, ""待执行""),
    EXECUTION(2, ""执行中""),
    COMPLETED(3, ""已完成""),
    PAUSED(4, ""已暂停""),
    TERMINATED(5, ""已停用""),
    ;

    Integer code;

    String value;


    JourneyStatusEnum(Integer code, String value) {
        this.code = code;
        this.value = value;
    }

    public static JourneyStatusEnum parseEnum(Integer code) {
        JourneyStatusEnum[] journeyStatus<fim_middle>","
     * 状态 0、未发布 1、待执行 2、执行中 3、已完成 4、已暂定 5、已停用 6、失败
     */","
     * 未发布
     */"
"<fim_prefix>RST;

    /**
     * 子任务ID，多个逗号分隔
     */
    String childJobId() default """";

    /**
     * 调度过期策略
     */
    MisfireStrategyEnum misfireStrategy() default MisfireStrategyEnum.DO_NOTHING;

    /**
     * 阻塞处理策略
     */
    ExecutorBlockStrategyEnum executorBlockStrategy() default ExecutorBlockStrategyEnum.SERIAL_EXECUTION;

    /**
     * 任务执行超时时间，单位秒
     */
    int executorTimeout() default 0;

    /**<fim_suffix>
    int executorFailRetryCount() default 0;

    /**
     * 是否启动 默认不启动
     */
    boolean start() default false;
}
<fim_middle>","
     * 失败重试次数
     */","
     * 失败重试次数
     */"
"<fim_prefix>eStrategyEnum executorRouteStrategy() default ExecutorRouteStrategyEnum.FIRST;

    /**
     * 子任务ID，多个逗号分隔
     */
    String childJobId() default """";

    /**
     * 调度过期策略
     */
    MisfireStrategyEnum misfireStrategy() default MisfireStrategyEnum.DO_NOTHING;

    /**
     * 阻塞处理策略
     */
    ExecutorBlockStrategyEnum executorBlockStrategy() default ExecutorBlockStrategyEnum.SERIAL_EXECUTION;

    /**<fim_suffix>
    int executorTimeout() default 0;

    /**
     * 失败重试次数
     */
    int executorFailRetryCount() default 0;

    /**
     * 是否启动 默认不启动
     */
    boolean start() default false;
}
<fim_middle>","
     * 任务执行超时时间，单位秒
     */","
     * 任务执行超时时间，单位秒
     */"
"<fim_prefix>ing scheduleConf() default """";

    /**
     * 运行模式
     */
    GlueTypeEnum glueType() default GlueTypeEnum.BEAN;

    /**
     * 执行器，任务Handler名称 默认:当前类的类名
     */
    String executorHandler() default """";

    /**
     * 执行器 任务参数
     */
    String executorParam() default """";

    /**
     * 路由策略
     */
    ExecutorRouteStrategyEnum executorRouteStrategy() default ExecutorRouteStrategyEnum.FIRST;

    /**<fim_suffix>
    String childJobId() default """";

    /**
     * 调度过期策略
     */
    MisfireStrategyEnum misfireStrategy() default MisfireStrategyEnum.DO_NOTHING;

    /**
     * 阻塞处理策略
     */
    ExecutorBlockStrategyEnum executorBlockStrategy() default ExecutorBlockStrategyEnum.SERIAL_EXECUTION;

    /**
     * 任务执行超时时间，单位秒
     */
    int executorTimeout() default 0;

    /**
     * 失败重试次数
     */
    int executorFai<fim_middle>","
     * 子任务ID，多个逗号分隔
     */","
     * 子任务ID，多个逗号分隔
     */"
"<fim_prefix> java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * xxl-job注解
 */
@Target(value = { ElementType.FIELD, ElementType.TYPE })
@Retention(RetentionPolicy.RUNTIME)
@Component
@Conditional(XxlJobCondition.class)
public @interface JobTask {

    @AliasFor(annotation = Component.class)
    String value() default """";

    /**
     * 执行器主键ID
     */
    int jobGroup() default 1;
    /**<fim_suffix>
    String taskName() default """";

    /**
     * 负责人 默认是配置文件的 spring.application.name 如果没有的情况下,继续默认当前类名
     */
    String author() default """";

    /**
     * 报警邮件
     */
    String alarmEmail() default """";

    /**
     * 调度类型 默认不调度
     */
    ScheduleTypeEnum scheduleType() default ScheduleTypeEnum.NONE;

    /**
     * 调度配置 CRON(* * * * * ?) FIX_RATE(30秒)
     */
    String scheduleConf() default """";<fim_middle>","
     * 任务描述 默认:当前类的类名
     */","
     * 执行器路由策略
     */"
"<fim_prefix>TIME)
@Component
@Conditional(XxlJobCondition.class)
public @interface JobTask {

    @AliasFor(annotation = Component.class)
    String value() default """";

    /**
     * 执行器主键ID
     */
    int jobGroup() default 1;
    /**
     * 任务描述 默认:当前类的类名
     */
    String taskName() default """";

    /**
     * 负责人 默认是配置文件的 spring.application.name 如果没有的情况下,继续默认当前类名
     */
    String author() default """";

    /**<fim_suffix>
    String alarmEmail() default """";

    /**
     * 调度类型 默认不调度
     */
    ScheduleTypeEnum scheduleType() default ScheduleTypeEnum.NONE;

    /**
     * 调度配置 CRON(* * * * * ?) FIX_RATE(30秒)
     */
    String scheduleConf() default """";

    /**
     * 运行模式
     */
    GlueTypeEnum glueType() default GlueTypeEnum.BEAN;

    /**
     * 执行器，任务Handler名称 默认:当前类的类名
     */
    String executorHandler() default """"<fim_middle>","
     * 报警邮件
     */","
     * 报警邮件 默认:当前类的类名"
"<fim_prefix>rface JobTask {

    @AliasFor(annotation = Component.class)
    String value() default """";

    /**
     * 执行器主键ID
     */
    int jobGroup() default 1;
    /**
     * 任务描述 默认:当前类的类名
     */
    String taskName() default """";

    /**
     * 负责人 默认是配置文件的 spring.application.name 如果没有的情况下,继续默认当前类名
     */
    String author() default """";

    /**
     * 报警邮件
     */
    String alarmEmail() default """";

    /**<fim_suffix>
    ScheduleTypeEnum scheduleType() default ScheduleTypeEnum.NONE;

    /**
     * 调度配置 CRON(* * * * * ?) FIX_RATE(30秒)
     */
    String scheduleConf() default """";

    /**
     * 运行模式
     */
    GlueTypeEnum glueType() default GlueTypeEnum.BEAN;

    /**
     * 执行器，任务Handler名称 默认:当前类的类名
     */
    String executorHandler() default """";

    /**
     * 执行器 任务参数
     */
    String executorParam() default ""<fim_middle>","
     * 调度类型 默认不调度
     */","
     * 调度类型 CRON(默认) FIX_RATE("
"<fim_prefix>g taskName() default """";

    /**
     * 负责人 默认是配置文件的 spring.application.name 如果没有的情况下,继续默认当前类名
     */
    String author() default """";

    /**
     * 报警邮件
     */
    String alarmEmail() default """";

    /**
     * 调度类型 默认不调度
     */
    ScheduleTypeEnum scheduleType() default ScheduleTypeEnum.NONE;

    /**
     * 调度配置 CRON(* * * * * ?) FIX_RATE(30秒)
     */
    String scheduleConf() default """";

    /**<fim_suffix>
    GlueTypeEnum glueType() default GlueTypeEnum.BEAN;

    /**
     * 执行器，任务Handler名称 默认:当前类的类名
     */
    String executorHandler() default """";

    /**
     * 执行器 任务参数
     */
    String executorParam() default """";

    /**
     * 路由策略
     */
    ExecutorRouteStrategyEnum executorRouteStrategy() default ExecutorRouteStrategyEnum.FIRST;

    /**
     * 子任务ID，多个逗号分隔
     */
    String childJobId() default<fim_middle>","
     * 运行模式
     */","
     * 任务失败重试次数 默认:0"
"<fim_prefix> alarmEmail() default """";

    /**
     * 调度类型 默认不调度
     */
    ScheduleTypeEnum scheduleType() default ScheduleTypeEnum.NONE;

    /**
     * 调度配置 CRON(* * * * * ?) FIX_RATE(30秒)
     */
    String scheduleConf() default """";

    /**
     * 运行模式
     */
    GlueTypeEnum glueType() default GlueTypeEnum.BEAN;

    /**
     * 执行器，任务Handler名称 默认:当前类的类名
     */
    String executorHandler() default """";

    /**<fim_suffix>
    String executorParam() default """";

    /**
     * 路由策略
     */
    ExecutorRouteStrategyEnum executorRouteStrategy() default ExecutorRouteStrategyEnum.FIRST;

    /**
     * 子任务ID，多个逗号分隔
     */
    String childJobId() default """";

    /**
     * 调度过期策略
     */
    MisfireStrategyEnum misfireStrategy() default MisfireStrategyEnum.DO_NOTHING;

    /**
     * 阻塞处理策略
     */
    ExecutorBlockStrategyEnum <fim_middle>","
     * 执行器 任务参数
     */","
     * 执行器，任务参数
     */"
"<fim_prefix>况下,继续默认当前类名
     */
    String author() default """";

    /**
     * 报警邮件
     */
    String alarmEmail() default """";

    /**
     * 调度类型 默认不调度
     */
    ScheduleTypeEnum scheduleType() default ScheduleTypeEnum.NONE;

    /**
     * 调度配置 CRON(* * * * * ?) FIX_RATE(30秒)
     */
    String scheduleConf() default """";

    /**
     * 运行模式
     */
    GlueTypeEnum glueType() default GlueTypeEnum.BEAN;

    /**<fim_suffix>
    String executorHandler() default """";

    /**
     * 执行器 任务参数
     */
    String executorParam() default """";

    /**
     * 路由策略
     */
    ExecutorRouteStrategyEnum executorRouteStrategy() default ExecutorRouteStrategyEnum.FIRST;

    /**
     * 子任务ID，多个逗号分隔
     */
    String childJobId() default """";

    /**
     * 调度过期策略
     */
    MisfireStrategyEnum misfireStrategy() default MisfireStrategyEnum<fim_middle>","
     * 执行器，任务Handler名称 默认:当前类的类名
     */","
     * 任务执行器
     */"
"<fim_prefix>eTypeEnum scheduleType() default ScheduleTypeEnum.NONE;

    /**
     * 调度配置 CRON(* * * * * ?) FIX_RATE(30秒)
     */
    String scheduleConf() default """";

    /**
     * 运行模式
     */
    GlueTypeEnum glueType() default GlueTypeEnum.BEAN;

    /**
     * 执行器，任务Handler名称 默认:当前类的类名
     */
    String executorHandler() default """";

    /**
     * 执行器 任务参数
     */
    String executorParam() default """";

    /**<fim_suffix>
    ExecutorRouteStrategyEnum executorRouteStrategy() default ExecutorRouteStrategyEnum.FIRST;

    /**
     * 子任务ID，多个逗号分隔
     */
    String childJobId() default """";

    /**
     * 调度过期策略
     */
    MisfireStrategyEnum misfireStrategy() default MisfireStrategyEnum.DO_NOTHING;

    /**
     * 阻塞处理策略
     */
    ExecutorBlockStrategyEnum executorBlockStrategy() default ExecutorBlockStrategyEnum.SERIAL_EXE<fim_middle>","
     * 路由策略
     */","
     * 调度路由策略
    "
"<fim_prefix>num glueType() default GlueTypeEnum.BEAN;

    /**
     * 执行器，任务Handler名称 默认:当前类的类名
     */
    String executorHandler() default """";

    /**
     * 执行器 任务参数
     */
    String executorParam() default """";

    /**
     * 路由策略
     */
    ExecutorRouteStrategyEnum executorRouteStrategy() default ExecutorRouteStrategyEnum.FIRST;

    /**
     * 子任务ID，多个逗号分隔
     */
    String childJobId() default """";

    /**<fim_suffix>
    MisfireStrategyEnum misfireStrategy() default MisfireStrategyEnum.DO_NOTHING;

    /**
     * 阻塞处理策略
     */
    ExecutorBlockStrategyEnum executorBlockStrategy() default ExecutorBlockStrategyEnum.SERIAL_EXECUTION;

    /**
     * 任务执行超时时间，单位秒
     */
    int executorTimeout() default 0;

    /**
     * 失败重试次数
     */
    int executorFailRetryCount() default 0;

    /**
     * 是否启动 默认不启动
     */
    boo<fim_middle>","
     * 调度过期策略
     */","
     * 调度策略
     */"
"<fim_prefix>ndler() default """";

    /**
     * 执行器 任务参数
     */
    String executorParam() default """";

    /**
     * 路由策略
     */
    ExecutorRouteStrategyEnum executorRouteStrategy() default ExecutorRouteStrategyEnum.FIRST;

    /**
     * 子任务ID，多个逗号分隔
     */
    String childJobId() default """";

    /**
     * 调度过期策略
     */
    MisfireStrategyEnum misfireStrategy() default MisfireStrategyEnum.DO_NOTHING;

    /**<fim_suffix>
    ExecutorBlockStrategyEnum executorBlockStrategy() default ExecutorBlockStrategyEnum.SERIAL_EXECUTION;

    /**
     * 任务执行超时时间，单位秒
     */
    int executorTimeout() default 0;

    /**
     * 失败重试次数
     */
    int executorFailRetryCount() default 0;

    /**
     * 是否启动 默认不启动
     */
    boolean start() default false;
}
<fim_middle>","
     * 阻塞处理策略
     */","
     * 阻塞处理策略
     */"
"<fim_prefix>;

/**
 * xxl-job注解
 */
@Target(value = { ElementType.FIELD, ElementType.TYPE })
@Retention(RetentionPolicy.RUNTIME)
@Component
@Conditional(XxlJobCondition.class)
public @interface JobTask {

    @AliasFor(annotation = Component.class)
    String value() default """";

    /**
     * 执行器主键ID
     */
    int jobGroup() default 1;
    /**
     * 任务描述 默认:当前类的类名
     */
    String taskName() default """";

    /**<fim_suffix>
    String author() default """";

    /**
     * 报警邮件
     */
    String alarmEmail() default """";

    /**
     * 调度类型 默认不调度
     */
    ScheduleTypeEnum scheduleType() default ScheduleTypeEnum.NONE;

    /**
     * 调度配置 CRON(* * * * * ?) FIX_RATE(30秒)
     */
    String scheduleConf() default """";

    /**
     * 运行模式
     */
    GlueTypeEnum glueType() default GlueTypeEnum.BEAN;

    /**
     * 执行器，任务Handle<fim_middle>","
     * 负责人 默认是配置文件的 spring.application.name 如果没有的情况下,继续默认当前类名
     */","
     * 执行器路由策略 默认:FIRST
     */"
"<fim_prefix>"";

    /**
     * 调度过期策略
     */
    MisfireStrategyEnum misfireStrategy() default MisfireStrategyEnum.DO_NOTHING;

    /**
     * 阻塞处理策略
     */
    ExecutorBlockStrategyEnum executorBlockStrategy() default ExecutorBlockStrategyEnum.SERIAL_EXECUTION;

    /**
     * 任务执行超时时间，单位秒
     */
    int executorTimeout() default 0;

    /**
     * 失败重试次数
     */
    int executorFailRetryCount() default 0;

    /**<fim_suffix>
    boolean start() default false;
}
<fim_middle>","
     * 是否启动 默认不启动
     */","
     * 失败重试间隔时间，单位秒
  "
"<fim_prefix>package io.metersphere.jmeter.mock.field;

/**<fim_suffix>
@FunctionalInterface
public interface FieldValueGetter<T> {

    /**
     * 获取这个字段的参数
     */
    T value();

}
<fim_middle>","
 * 字段值获取器
 *
 * 
 */","
 * 字段值获取器
 *
 * @author"
"<fim_prefix>package io.metersphere.jmeter.mock.field;

/**
 * 字段值获取器
 *
 * 
 */
@FunctionalInterface
public interface FieldValueGetter<T> {

    /**<fim_suffix>
    T value();

}
<fim_middle>","
     * 获取这个字段的参数
     */","
     * 获取字段值
     *
"
"<fim_prefix>
/**<fim_suffix>
package es.inteco.xbrl.pgc.transform.maps.descriptors;<fim_middle>","
 * Contiene las clases generadas automáticamente por Castor para el acceso
 * a la configuración de mapas con los identificadores que componen PGC2007.
 *  
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.mquan86.pattern.structural.bridge.example;

/**<fim_suffix>
public class LinuxButton implements Button {
    @Override
    public void create() {}

}
<fim_middle>","
 * @author Minh Quan Pham (mquan86@gmail.com)
 *
 */","
 * @author MQuan
 * @date 2020/3/18
 * @desc
 **/"
"<fim_prefix>package com.avalon.holygrail.db.norm;

/**<fim_suffix>
public interface CharacterSet {
}
<fim_middle>","
 * 数据库字符集
 * Created by 白超 on 2018/2/8.
 */","
 * @author 凯少
 * @create 2021-04-07
 */"
"<fim_prefix>package cms.bean.like;

import java.io.Serializable;

import javax.persistence.Entity;
import javax.persistence.Index;
import javax.persistence.Table;


/**<fim_suffix>
@Entity
@Table(name=""like_0"",indexes = {@Index(name=""like_1_idx"", columnList=""userName,addtime"")})
public class Like extends LikeEntity implements Serializable{
	private static final long serialVersionUID = -3428288178109539216L;



}
<fim_middle>","
 * 点赞
 *
 */","
 * 点赞
 * @author"
"<fim_prefix>/**<fim_suffix>
package com.jasonpercus.encryption;<fim_middle>","
Ce package regroupe les classes primaires du projet Encryption
*/","
 * 
 * @author Jason
 *
 */"
"<fim_prefix>package com.cheng.zenofdesignpatterns.patternpk.structural.proxy_vs_decorator.proxy;

/**<fim_suffix>
public interface IPRunner {
	
	//运动员的主要工作就是跑
	void run();

}
<fim_middle>","
 * 抽象运动员
 */","
 * 运动员接口
 *"
"<fim_prefix>package rprocessing.mode;

/**<fim_suffix>
public enum DisplayType {
  WINDOWED, PRESENTATION;
}
<fim_middle>","
 * 
 * @author github.com/gaocegege
 */","
 * Created by <NAME> on 11-Nov-16.
 */"
"<fim_prefix>t java.util.Optional;

import org.crue.hercules.sgi.csp.model.TipoOrigenFuenteFinanciacion;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface TipoOrigenFuenteFinanciacionRepository
    extends JpaRepository<TipoOrigenFuenteFinanciacion, Long>, JpaSpecificationExecutor<TipoOrigenFuenteFinanciacion> {

  /**<fim_suffix>
  Optional<TipoOrigenFuenteFinanciacion> findByNombreAndActivoIsTrue(String nombre);

}
<fim_middle>","
   * Busca un {@link TipoOrigenFuenteFinanciacion} activo por su nombre.
   * 
   * @param nombre Nombre del {@link TipoOrigenFuenteFinanciacion}.
   * @return un {@link TipoOrigenFuenteFinanciacion} si tiene el nombre buscado.
   */","
   * Busca un tipo de origen de financiación por nombre.
   *
   * @param nombre nombre del tipo de origen de financiación
   * @return tipo de origen de financiación
   */"
"<fim_prefix>package team.combinatorics.shuwashuwa.dao;

import org.springframework.stereotype.Repository;

@Repository
public interface MethodsOfTesting {
    /**<fim_suffix>
    void truncateAllTables();
}
<fim_middle>","
     * 清空所有表，自增的id也会归零
     * 超级管理员会添加
     */","
     * すべてのテーブルをtruncateする
     */"
"<fim_prefix>package org.mcwonderland.uhc.model.deathmsg;

import org.mcwonderland.uhc.game.player.UHCPlayer;
import org.mcwonderland.uhc.settings.UHCFiles;
import org.mineacademy.fo.RandomUtil;
import org.mineacademy.fo.settings.YamlConfig;

import java.util.List;

/**<fim_suffix>
public abstract class DeathMessages extends YamlConfig {
    private List<String> messages;

    protected DeathMessages(String stringCauses) {
        loadConfiguration(UHCFiles.MESSAGES);

        this.messages = getStringList(stringCauses);
    }

    public String getMessage(UHCPlayer uhcPlayer) {
        if (messages.isEmpty())
            return """";

        return replacePlaceholders(uhcPlayer, Rando<fim_middle>","
 * 怎麼寫 load 跟 reload 比較順？
 */","
 * Created by Matthew on 8/9/2014.
 */"
"<fim_prefix>package demo001.simgame;

/**<fim_suffix>
public enum Warenart {
	BIER,
	WEIN,
	KORN,
	GLAS,
	TUCH,
	GOLD
}
<fim_middle>","
 * Es gibt verschiedene Warenarten, die in der Wirtschaftssimulation produziert,
 * transportiert und gehandelt werden können.
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package org.shikimori.library.interfaces;

/**<fim_suffix>
public interface UserDataChangeListener {
    public void updateUserUI();
}
<fim_middle>","
 * Created by Владимир on 30.03.2015.
 * Срабатывает когда данные пользователя изменились и нужно обновить UI
 */","
 * Created by Shikimori on 2017-05-10.
 */"
"<fim_prefix>package com.linkwechat.common.enums.strategicjourney;

import lombok.Getter;

/**<fim_suffix>
@Getter
public enum JourneyTypeEnum {


    IMMEDIATELY(1, ""立即执行""),
    TIMING(2, ""定时执行""),
    REPEAT(3, ""重复执行""),

    ;

    Integer code;

    String value;


    JourneyTypeEnum(Integer code, String value) {
        this.code = code;
        this.value = value;
    }

    public static JourneyTypeEnum parseEnum(Integer code) {
        JourneyTypeEnum[] journeyTypeEnums = JourneyTypeEnum.values();
       <fim_middle>","
 * 执行方式
 */","
 * 战略行"
"<fim_prefix>package com.ozguryazilim.telve.feature;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import javax.enterprise.context.SessionScoped;
import javax.enterprise.inject.Stereotype;
import javax.inject.Named;

/**<fim_suffix>
@Stereotype
@SessionScoped
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Named
@Documented
public @interface Feature {

    /**
     * Özellik için kullanılacak genel isim. Message bundle'da aranır 
     * 
     * Örneğin : fetaure.caption.SimpleFeature
     * 
     * varsayılan olarak fetaure.caption.FatureName döner
     * 
     * @return 
     */
    String caption() default """";
    
   <fim_middle>","
 * Bir modül içindeki bir özelliği sisteme tanıtmak için kullanıcak olan yapıdır. 
 * 
 * Link üretmek generic aramalar yapmak için yapı sağlar.
 * 
 * FeatureHandler interface'ni implemete eden bir sınıf üzerinde bulunur.
 * 
 * @author Hakan Uygun
 */","
 * @author <NAME>
 * 
 * Feature annotationu
 */"
"<fim_prefix>reotype
@SessionScoped
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Named
@Documented
public @interface Feature {

    /**
     * Özellik için kullanılacak genel isim. Message bundle'da aranır 
     * 
     * Örneğin : fetaure.caption.SimpleFeature
     * 
     * varsayılan olarak fetaure.caption.FatureName döner
     * 
     * @return 
     */
    String caption() default """";
    
    /**<fim_suffix>
    String permission();
    
    /**
     * Her hangi bir domain sınıfı üzerinden taranabilmesi istenir ise
     * 
     * FeatureRegistery.for( getEntity().getClass()); şeklinde sorgulamalar için 
     * 
     * @return 
     */
    Class<?> forEntity() default Object.class;
}
<fim_middle>","
     * Özellik için kullanılcak olan permission domain
     * 
     * @return 
     */","
     * Özellik için kullanılacak genel isim. Message bundle'da aranır 
     * 
    "
"<fim_prefix>ture {

    /**
     * Özellik için kullanılacak genel isim. Message bundle'da aranır 
     * 
     * Örneğin : fetaure.caption.SimpleFeature
     * 
     * varsayılan olarak fetaure.caption.FatureName döner
     * 
     * @return 
     */
    String caption() default """";
    
    /**
     * Özellik için kullanılcak olan permission domain
     * 
     * @return 
     */
    String permission();
    
    /**<fim_suffix>
    Class<?> forEntity() default Object.class;
}
<fim_middle>","
     * Her hangi bir domain sınıfı üzerinden taranabilmesi istenir ise
     * 
     * FeatureRegistery.for( getEntity().getClass()); şeklinde sorgulamalar için 
     * 
     * @return 
     */","
     * Özellik için kullanılcak olan entity class
     * 
     * @return 
     */"
"<fim_prefix>Named;

/**
 * Bir modül içindeki bir özelliği sisteme tanıtmak için kullanıcak olan yapıdır. 
 * 
 * Link üretmek generic aramalar yapmak için yapı sağlar.
 * 
 * FeatureHandler interface'ni implemete eden bir sınıf üzerinde bulunur.
 * 
 * @author Hakan Uygun
 */
@Stereotype
@SessionScoped
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@Named
@Documented
public @interface Feature {

    /**<fim_suffix>
    String caption() default """";
    
    /**
     * Özellik için kullanılcak olan permission domain
     * 
     * @return 
     */
    String permission();
    
    /**
     * Her hangi bir domain sınıfı üzerinden taranabilmesi istenir ise
     * 
     * FeatureRegistery.for( getEntity().getClass()); şeklinde sorgulamalar için 
     * 
     * @return 
     */
    Class<?> forEntity() default Object.class;<fim_middle>","
     * Özellik için kullanılacak genel isim. Message bundle'da aranır 
     * 
     * Örneğin : fetaure.caption.SimpleFeature
     * 
     * varsayılan olarak fetaure.caption.FatureName döner
     * 
     * @return 
     */","
     * Özelliğin adı
     * 
     * @return 
     */"
"<fim_prefix>package ru.ecom.expert2.domain.voc;

import ru.ecom.ejb.domain.simple.VocBaseEntity;

import javax.persistence.Entity;

/**<fim_suffix>
@Entity
public class VocStacType extends VocBaseEntity {
}
<fim_middle>","
 * Тип стационара (дневной, круглосуточный)
 */","
 * Created by aleksey on 17.03.15.
 */"
"<fim_prefix>package io.gumga.testmodel;

import io.gumga.domain.repository.GumgaCrudRepository;

import java.util.List;

/**<fim_suffix>
public interface BookRepository extends GumgaCrudRepository<Book,Long> {

}
<fim_middle>","
 * Repositorio de livros
 */","
 * Created by <NAME> on 10/06"
"<fim_prefix>package net.cocotea.elysiananime.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**<fim_suffix>
@Getter
@AllArgsConstructor
public enum LogStatusEnum {
    /**
     * 0异常 1成功
     */
    ERROR(0, ""异常""),
    SUCCESS(1, ""成功"");

    final Integer code;
    final String desc;
}
<fim_middle>","
 * 操作状态 枚举类
 *
 * @author CoCoTea
 * @version 2.0.0
 */","
 * @author <NAME>
 * @date 2021/6/25 22:00
 */"
"<fim_prefix>package net.cocotea.elysiananime.common.enums;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 操作状态 枚举类
 *
 * @author CoCoTea
 * @version 2.0.0
 */
@Getter
@AllArgsConstructor
public enum LogStatusEnum {
    /**<fim_suffix>
    ERROR(0, ""异常""),
    SUCCESS(1, ""成功"");

    final Integer code;
    final String desc;
}
<fim_middle>","
     * 0异常 1成功
     */","
     * 操作状态
     */"
"<fim_prefix>package ru.ecom.expert2.domain.voc.federal;

import javax.persistence.Entity;

/**<fim_suffix>
@Entity
public class VocE2FondV017 extends VocBaseFederal {
}
<fim_middle>","
 * Справочник результатов диспансеризации
 */","
 * Created by aleksey on 11.04.15.
 */"
"<fim_prefix>package pl.edu.icm.saos.persistence.correction.model;

/**<fim_suffix>

public enum ChangeOperation {

    CREATE,
    UPDATE,
    DELETE
    
}
<fim_middle>","
 * @author ≈Åukasz Dumiszewski
 */","
 *
 * @author <NAME> <<EMAIL>>
 */"
"<fim_prefix>package com.particle.api.block;

import com.particle.model.block.Block;
import com.particle.model.math.Vector3;
import com.particle.model.player.Player;

public interface IBlockInteractedProcessor {

    /**<fim_suffix>
    boolean interactive(Player player, Block targetBlock, Vector3 targetPosition);

}
<fim_middle>","
     * 当目标方块被交互
     *
     * @param player
     * @param targetBlock
     * @param targetPosition
     * @return true表示可以继续交互，false表示交互取消
     */","
     * Called when a block is interacted with.
     *
     * @param player       The player interacting with the block.
     * @param targetBlock  The block that was interacted with.
     * @param target"
"<fim_prefix>/**<fim_suffix>
package es.inteco.xbrl.lenlocpenloc.errors.out;<fim_middle>","
 * Clases que definen la salida de errores.
 * 
 */","
 * 
 * @author <NAME> (inteco)
 *"
"<fim_prefix>package edu.bjfu.lol.scenes.scene2d.动作;


public class 动作类
{
	/**<fim_suffix>
	public boolean is完成(){return true;}
	/**
	 * 只能被调用一次使动作开始
	 */
	public void 开始(){}
}
<fim_middle>","
	 * 返回动作是否已完成,且完成后会自动完成结束清理，所以必须保证只调用一次
	 */","
	 * 动作是否完成
	 */"
"<fim_prefix>package edu.bjfu.lol.scenes.scene2d.动作;


public class 动作类
{
	/**
	 * 返回动作是否已完成,且完成后会自动完成结束清理，所以必须保证只调用一次
	 */
	public boolean is完成(){return true;}
	/**<fim_suffix>
	public void 开始(){}
}
<fim_middle>","
	 * 只能被调用一次使动作开始
	 */","
	 * 开始动作
	 */"
"<fim_prefix>package year2020.month09;
import java.util.Scanner;

public class BR_0902 {
	private static double PI = 3.14;
	public static void main(String[] args) throws Exception {
		/*<fim_suffix>
		
		Scanner sc = new Scanner(System.in);
		
		printCircle(sc.nextInt());
		
		sc.close();
		
	}
	
	private static void printCircle(int r) {
		
		System.out.println(String.format(""%.2f"", r*r*PI));
		
	}
}
<fim_middle>"," **************************************************
		 * 문제.
		 * 반지름의 길이를 전달받아 넓이를 출력하는 함수를 작성하고 반지름의 길이를 입력받아 함수를 호출하여 넓이를 출력하는 프로그램을 작성하시오.
		 * (원주율은 3.14로 하고 반올림하여 소수 둘째자리까지 출력한다. 원의 넓이 = 반지름 * 반지름 * 원주율이다.)
		 * 
		 * 
		 * 입력 예.
		 * ===========================
		 * 10
		 * ===========================
		 * 
		 * 출력 예.
		 * ===========================
		 * 314.00
		 * ===========================
		 * **************************************************/","
		 * 圆的面积
		 */"
"<fim_prefix>package com.pongsky.kit.captcha.autoconfigure;

import com.pongsky.kit.captcha.properties.InputCharCaptchaProperties;
import com.pongsky.kit.captcha.utils.InputCharCaptchaUtils;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


/**<fim_suffix>
@Configuration(proxyBeanMethods = false)
@EnableConfigurationProperties({InputCharCaptchaProperties.class})
public class InputCharCaptchaAutoConfiguration {

    /**
     * 创建验证码工具类
     *
     * @param properties 验证码参数配置
     * @return 验证码工具类
     */
    @Bean
    public InputCharCaptchaUtils captchaUtils(InputCharCaptchaProperties properties) {
        return new InputCharCaptchaUtils(properties.getCodeNu<fim_middle>","
 * 输入型字符 验证码 自动装配
 *
 * @author pengsenhao
 */","
 * 验证码自动配置
 *
 * @author tenny
 * date 2021/12"
"<fim_prefix>ort org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


/**
 * 输入型字符 验证码 自动装配
 *
 * @author pengsenhao
 */
@Configuration(proxyBeanMethods = false)
@EnableConfigurationProperties({InputCharCaptchaProperties.class})
public class InputCharCaptchaAutoConfiguration {

    /**<fim_suffix>
    @Bean
    public InputCharCaptchaUtils captchaUtils(InputCharCaptchaProperties properties) {
        return new InputCharCaptchaUtils(properties.getCodeNum(),
                properties.getCodeNum() * properties.getCodeWidthSpace(),
                properties.getImageHeight(),
                properties.getDrawCount(), properties.getLineWidth());
    }

}
<fim_middle>","
     * 创建验证码工具类
     *
     * @param properties 验证码参数配置
     * @return 验证码工具类
     */","
     * 验证码工具类
     *
     * @param properties 验证码配置
     * @return 验证码工具类
     */"
"<fim_prefix>package fr.gouv.beta.fabnum.kelrisks.metier.referentiel.interfaces;

import fr.gouv.beta.fabnum.commun.metier.IAbstractCRUDService;
import fr.gouv.beta.fabnum.kelrisks.transverse.referentiel.entities.SiteIndustrielBasias;

import java.util.List;

import org.geolatte.geom.Geometry;

/**<fim_suffix>
public interface ISiteIndustrielBasiasService extends IAbstractCRUDService<SiteIndustrielBasias> {
    
    List<SiteIndustrielBasias> rechercherSiteSurParcelle(String codeParcelle);
    
    List<SiteIndustrielBasias> rechercherSiteDansRayonCentroideGeometry(Geometry codeParcelle, double distance);
    
    List<SiteIndustrielBasias> rechercherSitesDansPolygons(List<Geometry> multiPolygon);
    
    List<S<fim_middle>","
 * Interface du Service qui gère les entités SiteIndustrielBasias
 */","
 *
 * @author <NAME> <<EMAIL>>
 * @date 12/03/"
"<fim_prefix>package com.linkwechat.domain.wecom.vo.customer.groupchat;


import com.linkwechat.domain.wecom.vo.WeResultVo;
import lombok.Data;
import lombok.EqualsAndHashCode;


/**<fim_suffix>
@EqualsAndHashCode(callSuper = true)
@Data
public class WeGroupChatAddJoinWayVo extends WeResultVo {
    //联系方式的配置id
    private String config_id;
}
<fim_middle>","
 *配置客户群进群方式,返回
 */","
 * 群聊添加入群方式
 */"
"<fim_prefix>package org.openyu.commons.service;

import org.openyu.commons.dao.JdbcDao;

/**<fim_suffix>
public interface JdbcService extends BaseService, JdbcDao
{

}
<fim_middle>","
 * JDBC服務
 */","
 * Created by luo"
"<fim_prefix>package com.controllers;

import com.utils.exception.*;
import com.services.web_connections.LoginWCS;

/**<fim_suffix>
public class LoginController extends BaseController {

    private final LoginWCS loginWCS;

    public LoginController() {
        loginWCS = new LoginWCS();
    }

    /**
     * Accion de logueo, trata de loguear este nombre de usuario con este contrasenna en el sistema.
     *
     * @param username Nombre de usuario.
     * @param password Contrasenna.
     * @return true si se loguea exitosamente, fal<fim_middle>","
 * Capa: Controllers
 * Clase controladora de LoginActivity, encargada de manejar sus peticiones con la capa inferior.
 *
 * @extends BaseController ya que es un controller plicacion.
 */","
 * Controlador de login.
 *
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @see com.controllers.BaseController
 * @see com.services."
"<fim_prefix>port com.services.web_connections.LoginWCS;

/**
 * Capa: Controllers
 * Clase controladora de LoginActivity, encargada de manejar sus peticiones con la capa inferior.
 *
 * @extends BaseController ya que es un controller plicacion.
 */
public class LoginController extends BaseController {

    private final LoginWCS loginWCS;

    public LoginController() {
        loginWCS = new LoginWCS();
    }

    /**<fim_suffix>
    public boolean loginAction(String username, String password) throws Exception {
        boolean resp = loginWCS.authenticate(username,password);//no el return directo para si hay que simular offline
        return resp;
    }

    public String getToken() {
        return loginWCS.getToken();
    }

    public void setToken(String token) {
        loginWCS.setToken(token);
    }
}
<fim_middle>","
     * Accion de logueo, trata de loguear este nombre de usuario con este contrasenna en el sistema.
     *
     * @param username Nombre de usuario.
     * @param password Contrasenna.
     * @return true si se loguea exitosamente, false de lo contrario.
     * @throws ServerErrorException  si hay error en el servidor.
     * @throws NoConnectionException si no hay coneccion con el servidor.
     */","
     * Metodo encargado de realizar la peticion de login.
     *
     * @param username
     * @param password
     * @return
     * @throws Exception
     */"
"<fim_prefix>package com.zondy.mapgis.pluginengine.plugincollection;

/**<fim_suffix>
public interface IAppLogManager {

}
<fim_middle>","
 * 日志管理器接口
 *
 * @author cxy
 * @date 2019/10/15
 */","
 * @author fjl 2019-6-18 下午2:52:40
 * @content
 */"
"<fim_prefix>package com.hengmall.goods.model;

import lombok.Data;

/**<fim_suffix>
@Data
public class RelRecommendEntity {

    private int id;
    private int productid;   //推荐商品Id

}
<fim_middle>","
 * 推荐商品 实体类
 */","
 * @author: wangheng
 *"
"<fim_prefix>package ru.nuzmsh.forms.validator.validators;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.annotation.ElementType;

/**<fim_suffix>
@Retention(RetentionPolicy.RUNTIME)
@Target ({ElementType.METHOD})
public @interface MinLength {
    int value() ;
}
<fim_middle>","
 * Минимальная длина поля
 */","
 * Created by <NAME> on 19.11.2016"
"<fim_prefix>package cn.truistic.enmicromsg.common.db;

import android.content.Context;

import net.sqlcipher.database.SQLiteDatabase;

import java.io.File;

/**<fim_suffix>
public class DBUtill {

    public static void init(Context context) {
        SQLiteDatabase.loadLibs(context);
        File file = new File(context.getFilesDir().getPath() + ""EnMicroMsg0.db"");

    }

    public static void test() {

    }

}<fim_middle>","
 * 数据库工具类
 */","
 * Created by ychan on"
"<fim_prefix>package sep.fimball.viewmodel.window.pinballmachine.editor;

/**<fim_suffix>
public enum MouseMode
{
    /**
     * Die Maus wird zum Platzieren von Spielelementen genutzt.
     */
    PLACING,

    /**
     * Die Maus wird zur Auswahl von Spielelementen genutzt.
     */
    SELECTING
}
<fim_middle>","
 * MouseMode enth√§lt die unterschiedlichen Modi der Benutzung der Elemente im Editor durch die Maus.
 */","
 * Die verschiedenen Modi, in denen die Maus im Editor verwendet werden kann.
 * 
 * @author <NAME>
 *"
"<fim_prefix>package sep.fimball.viewmodel.window.pinballmachine.editor;

/**
 * MouseMode enth√§lt die unterschiedlichen Modi der Benutzung der Elemente im Editor durch die Maus.
 */
public enum MouseMode
{
    /**
     * Die Maus wird zum Platzieren von Spielelementen genutzt.
     */
    PLACING,

    /**<fim_suffix>
    SELECTING
}
<fim_middle>","
     * Die Maus wird zur Auswahl von Spielelementen genutzt.
     */","
     * Die Maus wird zum Auswählen von Spielelementen genutzt.
     */"
"<fim_prefix>package sep.fimball.viewmodel.window.pinballmachine.editor;

/**
 * MouseMode enth√§lt die unterschiedlichen Modi der Benutzung der Elemente im Editor durch die Maus.
 */
public enum MouseMode
{
    /**<fim_suffix>
    PLACING,

    /**
     * Die Maus wird zur Auswahl von Spielelementen genutzt.
     */
    SELECTING
}
<fim_middle>","
     * Die Maus wird zum Platzieren von Spielelementen genutzt.
     */","
     * Die Maus wird zur Positionierung von Spielelementen genutzt.
     */"
"<fim_prefix>package ru.nuzmsh.logicpool.api.pkconverter;

import ru.nuzmsh.logicpool.api.IPkConverter;

/**<fim_suffix>
public class LongPkConverter implements IPkConverter {

    public Object convert(String aStr) {
        return Long.parseLong(aStr) ;
    }
}<fim_middle>","
 * Преобразование из String в java.lang.Long
 */","
 * Created by nikita on 12.11.2016.
 */"
"<fim_prefix>package org.accen.dmzj.core.meta;

public enum MessageSubType {
	_ALL,
	/**
	 * 私聊-好友消息
	 */
	FRIEND,
	/**
	 * 私聊-群临时会话
	 */
	GROUP,
	/**
	 * 私聊-其他
	 */
	OTHER,
	/**
	 * 群聊-正常
	 */
	NORMAL,
	/**<fim_suffix>
	ANONYMOUS,
	/**
	 * 群聊-系统提示
	 */
	NOTICE;
}
<fim_middle>","
	 * 群聊-匿名
	 */","
	 * 群聊-匿名
	 */"
"<fim_prefix>package org.accen.dmzj.core.meta;

public enum MessageSubType {
	_ALL,
	/**
	 * 私聊-好友消息
	 */
	FRIEND,
	/**
	 * 私聊-群临时会话
	 */
	GROUP,
	/**
	 * 私聊-其他
	 */
	OTHER,
	/**
	 * 群聊-正常
	 */
	NORMAL,
	/**
	 * 群聊-匿名
	 */
	ANONYMOUS,
	/**<fim_suffix>
	NOTICE;
}
<fim_middle>","
	 * 群聊-系统提示
	 */","
	 * 群聊-系统
	 */"
"<fim_prefix>package org.accen.dmzj.core.meta;

public enum MessageSubType {
	_ALL,
	/**
	 * 私聊-好友消息
	 */
	FRIEND,
	/**
	 * 私聊-群临时会话
	 */
	GROUP,
	/**
	 * 私聊-其他
	 */
	OTHER,
	/**<fim_suffix>
	NORMAL,
	/**
	 * 群聊-匿名
	 */
	ANONYMOUS,
	/**
	 * 群聊-系统提示
	 */
	NOTICE;
}
<fim_middle>","
	 * 群聊-正常
	 */","
	 * 私聊-系统提示
	"
"<fim_prefix>package org.accen.dmzj.core.meta;

public enum MessageSubType {
	_ALL,
	/**
	 * 私聊-好友消息
	 */
	FRIEND,
	/**<fim_suffix>
	GROUP,
	/**
	 * 私聊-其他
	 */
	OTHER,
	/**
	 * 群聊-正常
	 */
	NORMAL,
	/**
	 * 群聊-匿名
	 */
	ANONYMOUS,
	/**
	 * 群聊-系统提示
	 */
	NOTICE;
}
<fim_middle>","
	 * 私聊-群临时会话
	 */","
	 * 私聊-群消息
	 */"
"<fim_prefix>package org.accen.dmzj.core.meta;

public enum MessageSubType {
	_ALL,
	/**<fim_suffix>
	FRIEND,
	/**
	 * 私聊-群临时会话
	 */
	GROUP,
	/**
	 * 私聊-其他
	 */
	OTHER,
	/**
	 * 群聊-正常
	 */
	NORMAL,
	/**
	 * 群聊-匿名
	 */
	ANONYMOUS,
	/**
	 * 群聊-系统提示
	 */
	NOTICE;
}
<fim_middle>","
	 * 私聊-好友消息
	 */","
	 * 私聊-好友
	 */"
"<fim_prefix>package org.accen.dmzj.core.meta;

public enum MessageSubType {
	_ALL,
	/**
	 * 私聊-好友消息
	 */
	FRIEND,
	/**
	 * 私聊-群临时会话
	 */
	GROUP,
	/**<fim_suffix>
	OTHER,
	/**
	 * 群聊-正常
	 */
	NORMAL,
	/**
	 * 群聊-匿名
	 */
	ANONYMOUS,
	/**
	 * 群聊-系统提示
	 */
	NOTICE;
}
<fim_middle>","
	 * 私聊-其他
	 */","
	 * 私聊-群消息
	"
"<fim_prefix>package com.cheng.zenofdesignpatterns.patternpk.crosswarzone.wrapper.proxy;

/**<fim_suffix>
public interface IStarProxy {
	
	// 明星都会签名
	void sign();

}
<fim_middle>","
 * 明星类
 */","
 * 明星代理
 *"
"<fim_prefix>package homework;

import java.util.Scanner;

public class badak_0807 {

	/*<fim_suffix>
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		int[] a = new int[10];
		int max = 0;
		int min = 10000;
		for (int i = 0; i < a.length; i++) {
			a[i] = sc.nextInt();
			if (a[i] < 100) {
				max = a[i] > max ? a[i] : max;
			} else {
				min = a[i] < min ? a[i] : min;
			}
		}
		if (max == 0) {
			max = 100;
		}
		if (min == 10000) {
			min = 100;
		<fim_middle>","
	 * 0807
	 * 
	 * 10개의 정수를 입력받아 100 미만의 수 중 가장 큰 수와 100 이상의 수 중 가장 작은 수를 출력하는 프로그램을 작성하시오.
	 * 
	 * (입력되는 정수의 범위는 1이상 10,000 미만이다. 만약 해당하는 수가 없을 때에는 100 을 출력한다.)
	 * 
	 * 
	 * -입력 예 88 123 659 15 443 1 99 313 105 48 -출력 예 99 105
	 */","*
	 * @param args
	 */"
"<fim_prefix>package com.mizhousoft.push.vivo;

import com.mizhousoft.push.MessageCategory;
import com.mizhousoft.push.vivo.constant.ViVoConstants;

/**<fim_suffix>
public abstract class ViVoMessageCateConverter
{
	public static String convert(String requestData)
	{
		if (MessageCategory.CATEGORY_IM.equals(requestData))
		{
			return ViVoConstants.SYSTEM_CATEGORY_IM;
		}
		else if (MessageCategory.CATEGORY_ACCOUNT.equals(requestData))
		{
			return ViVoConstants.SYSTEM_CATEGORY_ACCOUNT;
		}
		else if (MessageCategory.CATEGORY_TODO.equals(requestData))
		{
			return ViV<fim_middle>","
 * 消息转换器
 *
 */","
 * 推送消息分类转换器
"
"<fim_prefix>package com.github.maxwell.nc.reactivelib.callback;

/**<fim_suffix>
public interface Predicate<T> {

    /**
     * 断言元素t是否符合某个逻辑
     *
     * @return 是否符合规则
     */
    boolean test(T t) throws Exception;

}
<fim_middle>","
 * 功能接口
 */","
 * Created by zhang"
"<fim_prefix>package com.github.maxwell.nc.reactivelib.callback;

/**
 * 功能接口
 */
public interface Predicate<T> {

    /**<fim_suffix>
    boolean test(T t) throws Exception;

}
<fim_middle>","
     * 断言元素t是否符合某个逻辑
     *
     * @return 是否符合规则
     */","
     * 断言
     * @param t
     * @return
     * @throws Exception
 "
"<fim_prefix>package com.cnblog.clarck;

/**<fim_suffix>
public enum ProductType {
	PRODUCTA, PRODUCTB
}
<fim_middle>","
 * 产品A，产品B的类型
 * 
 * @author clarck
 * 
 */","
 * 产品类型
 * @author sang
 *
 */"
"<fim_prefix>package com.jam54.jam54_launcher.database_access;

/**<fim_suffix>
public interface DataAccessContext extends AutoCloseable
{

    ApplicationDAO getApplicationDAO();
    OtherDAO getOtherDAO();

    @Override
    void close() throws DataAccessException;
}
<fim_middle>","
 * Deze data access context geeft ons toegang tot de verschillende
 * data access objects. Deze context moet gesloten worden nadat hij is gebruikt.
 */","
 * Created by jam54 on 2017-08-09.
 */"
"<fim_prefix>/*<fim_suffix>
import java.util.Scanner;

public class Questao09 {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int[] vetor = new int[10];
        for(int i = 0; i < vetor.length; i++){
            System.out.println(""Digite um numero para a posicao "" + i);
            vetor[i] = scan.nextInt();
        }
        
        int maior = vetor[0];

        for(int i = 1; <fim_middle>"," Escreva um algoritmo que receba dez números do usuário e armazene em um vetor,
procure no vetor o maior número digitado e exiba-o. */","*
 * Escreva um programa que leia 10 números inteiros e armazene-os em um vetor.
 * Mostre o maior número do vetor.
 */"
"<fim_prefix>package cn.nukkit.scoreboard.data;

/**<fim_suffix>


public enum SortOrder {
    //升序
    ASCENDING,
    //降序
    DESCENDING
}
<fim_middle>","
 * 追踪目标显示顺序排序准则，客户端会依照准则根据分数排序所有追踪对象
 */","
 * 排行榜排序方式
 */"
"<fim_prefix>package doext.define;

/**<fim_suffix>
public interface do_SwitchView_IMethod {
}<fim_middle>","
 * 声明自定义扩展组件方法
 */","
 * Created by luying on 15/4"
"<fim_prefix>package ru.bgcrm.dao;

import java.sql.Connection;

/**<fim_suffix>
@Deprecated
public class ParamDAO extends org.bgerp.dao.param.ParamDAO {
    public ParamDAO(Connection con) {
        super(con);
    }
}
<fim_middle>","
 * @see org.bgerp.dao.param.ParamDAO
 */","
 * @author <NAME>
 * @version $Id$
 * @since"
"<fim_prefix>/**<fim_suffix>
package org.yby.ecoc2017.defragAlgorithm.icocn2017_2;<fim_middle>","
 * 考虑根据对业务持续时间的预测，以发生业务次数为触发阈值，来触发重构。
 * 重点是在相通重构次数，接近业务中断次数的情况下，降低同样的业务阻塞率。
 * 被人捷足先登了，不爽！！！
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package help.lixin.starlink.plugin.credential.event.opaque;

import io.eventuate.tram.events.common.DomainEvent;

/**<fim_suffix>
public interface ISysOpaqueCredentialEvent extends DomainEvent {
}
<fim_middle>","
 * @Author: 伍岳林
 * @Date: 2024/5/24 下午7:36
 * @Description
 */","
 * @author lixin
 */"
"<fim_prefix>/*<fim_suffix>

package net.comcraft.src;

/**
 *
 * @author Piotr Wójcik
 */
public class InvItemHammer extends InvItem {

    public InvItemHammer(int id, int index) {
        super(id, index);
    }
    
    public boolean onItemUse(InvItemStack itemStack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
        if (world.isAirBlock(x, y, z)) {
            return false;
        }
        
      <fim_middle>","
 * Copyright (C) 2013 Piotr Wójcik
 *
 */","*
 *
 * @author Piotr Wójcik
 */"
"<fim_prefix>/*
 * Copyright (C) 2013 Piotr Wójcik
 *
 */

package net.comcraft.src;

/**<fim_suffix>
public class InvItemHammer extends InvItem {

    public InvItemHammer(int id, int index) {
        super(id, index);
    }
    
    public boolean onItemUse(InvItemStack itemStack, EntityPlayer entityPlayer, World world, int x, int y, int z, int side) {
        if (world.isAirBlock(x, y, z)) {
            return false;
        }
        
        world.setBlockID(x, y, z, 0);
        
        return true;
 <fim_middle>","
 *
 * @author Piotr Wójcik
 */","
 *
 * @author Piotr Wójcik
 */"
"<fim_prefix>/*<fim_suffix>
/**
 * SLF4J 的工具。
 */
package net.matrix.org.slf4j;
<fim_middle>","
 * 版权所有 2023 Matrix。
 * 保留所有权利。
 */","*
 * 日志工具。
 */"
"<fim_prefix>/*
 * 版权所有 2023 Matrix。
 * 保留所有权利。
 */
/**<fim_suffix>
package net.matrix.org.slf4j;
<fim_middle>","
 * SLF4J 的工具。
 */","
 * @author <NAME>
 */"
"<fim_prefix>package pers.neige.neigeitems.command.coordinates;

public enum LocationType {
    /**<fim_suffix>
    ABSOLUTE,
    /**
     * 相对坐标
     */
    RELATIVE,
    /**
     * 局部坐标
     */
    LOCAL
}
<fim_middle>","
     * 绝对坐标
     */","
     * 绝对坐标
     */"
"<fim_prefix>package pers.neige.neigeitems.command.coordinates;

public enum LocationType {
    /**
     * 绝对坐标
     */
    ABSOLUTE,
    /**
     * 相对坐标
     */
    RELATIVE,
    /**<fim_suffix>
    LOCAL
}
<fim_middle>","
     * 局部坐标
     */","
     * 本地坐标
     */"
"<fim_prefix>package pers.neige.neigeitems.command.coordinates;

public enum LocationType {
    /**
     * 绝对坐标
     */
    ABSOLUTE,
    /**<fim_suffix>
    RELATIVE,
    /**
     * 局部坐标
     */
    LOCAL
}
<fim_middle>","
     * 相对坐标
     */","
     * 相对坐标
     */"
"<fim_prefix>package com.pongsky.kit.captcha.config;

import com.pongsky.kit.captcha.properties.InputMathCaptchaProperties;
import com.pongsky.kit.captcha.utils.InputMathCaptchaUtils;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


/**<fim_suffix>
@Configuration(proxyBeanMethods = false)
@EnableConfigurationProperties({InputMathCaptchaProperties.class})
public class InputMathCaptchaAutoConfiguration {

    /**
     * 创建验证码工具类
     *
     * @param properties 验证码参数配置
     * @return 验证码工具类
     */
    @Bean
    public InputMathCaptchaUtils captchaUtils(InputMathCaptchaProperties properties) {
        return new InputMathCaptchaUtils(properties.getMinCod<fim_middle>","
 * 输入型算数 验证码 自动装配
 *
 * @author pengsenhao
 */","
 * 验证码自动配置
 *
 * @author tenny
 * date 2021/8/"
"<fim_prefix>ort org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


/**
 * 输入型算数 验证码 自动装配
 *
 * @author pengsenhao
 */
@Configuration(proxyBeanMethods = false)
@EnableConfigurationProperties({InputMathCaptchaProperties.class})
public class InputMathCaptchaAutoConfiguration {

    /**<fim_suffix>
    @Bean
    public InputMathCaptchaUtils captchaUtils(InputMathCaptchaProperties properties) {
        return new InputMathCaptchaUtils(properties.getMinCode(), properties.getMaxCode(),
                (String.valueOf(properties.getMaxCode()).length() + 3)
                        * properties.getCodeWidthSpace(),
                properties.getImageHeight(),
                properties.getDrawCount(), prope<fim_middle>","
     * 创建验证码工具类
     *
     * @param properties 验证码参数配置
     * @return 验证码工具类
     */","
     * 验证码工具类
     *
     * @param properties 验证码配置
     * @return 验证码工具类
     */"
"<fim_prefix>package nami.beitrag;

/**<fim_suffix>
public enum Rechnungsstatus {
    /**
     * Die Rechnung wurde erstellt, aber noch nicht bezahlt.
     */
    OFFEN,
    /**
     * Die Rechnung wurde bezahlt.
     */
    BEGLICHEN,
    /**
     * Die Rechnung wurde noch nicht bezahlt und man kann nicht davon ausgehen,
     * dass sie noch bezahlt wird.
     */
    ABGESCHRIEBEN
}
<fim_middle>","
 * Beschreibt die Stati, die eine Rechnung haben kann.
 * 
 * @author Fabian Lipp
 * 
 */","
 * Die Rechnungsstatus-Enumeration.
 */"
"<fim_prefix>package nami.beitrag;

/**
 * Beschreibt die Stati, die eine Rechnung haben kann.
 * 
 * @author Fabian Lipp
 * 
 */
public enum Rechnungsstatus {
    /**
     * Die Rechnung wurde erstellt, aber noch nicht bezahlt.
     */
    OFFEN,
    /**
     * Die Rechnung wurde bezahlt.
     */
    BEGLICHEN,
    /**<fim_suffix>
    ABGESCHRIEBEN
}
<fim_middle>","
     * Die Rechnung wurde noch nicht bezahlt und man kann nicht davon ausgehen,
     * dass sie noch bezahlt wird.
     */","
     * Die Rechnung wurde bezahlt und ist abgeschlossen.
     */"
"<fim_prefix>package nami.beitrag;

/**
 * Beschreibt die Stati, die eine Rechnung haben kann.
 * 
 * @author Fabian Lipp
 * 
 */
public enum Rechnungsstatus {
    /**
     * Die Rechnung wurde erstellt, aber noch nicht bezahlt.
     */
    OFFEN,
    /**<fim_suffix>
    BEGLICHEN,
    /**
     * Die Rechnung wurde noch nicht bezahlt und man kann nicht davon ausgehen,
     * dass sie noch bezahlt wird.
     */
    ABGESCHRIEBEN
}
<fim_middle>","
     * Die Rechnung wurde bezahlt.
     */","
     * Die Rechnung wurde bezahlt.
     */"
"<fim_prefix>package nami.beitrag;

/**
 * Beschreibt die Stati, die eine Rechnung haben kann.
 * 
 * @author Fabian Lipp
 * 
 */
public enum Rechnungsstatus {
    /**<fim_suffix>
    OFFEN,
    /**
     * Die Rechnung wurde bezahlt.
     */
    BEGLICHEN,
    /**
     * Die Rechnung wurde noch nicht bezahlt und man kann nicht davon ausgehen,
     * dass sie noch bezahlt wird.
     */
    ABGESCHRIEBEN
}
<fim_middle>","
     * Die Rechnung wurde erstellt, aber noch nicht bezahlt.
     */","
     * Die Rechnung wurde noch nicht bezahlt.
     */"
"<fim_prefix>package com.copy.jianshuapp.uilayer.enums;

/**<fim_suffix>
public enum NotificationType {
    COMMENT,
    LIKE,
    FOLLOW,
    REQUEST,
    OTHER,
    MESSAGE,
    MONEY
}
<fim_middle>","
 * 通知类型
 * @version imkarl 2017-04
 */","
 * Created by xingzhijian on 2017/3/16.
 */"
"<fim_prefix>tadistica;

import co.edu.utp.gia.sms.dtos.DatoDTO;
import co.edu.utp.gia.sms.entidades.EvaluacionCualitativa;
import co.edu.utp.gia.sms.entidades.Referencia;
import co.edu.utp.gia.sms.entidades.Topico;
import jakarta.inject.Provider;

import java.util.Collection;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**<fim_suffix>
public class EstadisticaReferenciaOfPreguntaWithAtributoCalidadByTopico {
    /**
     * Consulta que permite obtener el número de referencias que cumplem con un determinado atributo de calidad por Topico de una Pregunta en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param codigo        Codigo de la pregunta de la que se desean<fim_middle>","
 * Consulta que permite obtener el número de referencias que cumplem con un determinado atributo de calidad por Topico de una Pregunta en una revision
 */","
 * EstadisticaReferenciaOfPreguntaWithAtributoCalidadByTopico
 *
 * @author <NAME>
 * @version 1.0
"
"<fim_prefix>mport java.util.Collection;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Consulta que permite obtener el número de referencias que cumplem con un determinado atributo de calidad por Topico de una Pregunta en una revision
 */
public class EstadisticaReferenciaOfPreguntaWithAtributoCalidadByTopico {
    /**<fim_suffix>
    public static Stream<DatoDTO> createQuery(Provider<Collection<Referencia>> dataProvider, String codigo, String idAtributoCalidad) {
        Predicate<Topico> filtro = topico -> topico.getPregunta().getCodigo().equals(codigo);
        Predicate<Referencia> filtroReferencia = referencia -> referencia.getEvaluacionCalidad().stream()
                .anyMatch(evaluacionCalidad ->
                        eva<fim_middle>","
     * Consulta que permite obtener el número de referencias que cumplem con un determinado atributo de calidad por Topico de una Pregunta en una revision
     *
     * @param dataProvider Proveedor de la colección de datos en la que se realizará la búsqueda
     * @param codigo        Codigo de la pregunta de la que se desean obtener las estadisticas
     * @param idAtributoCalidad Id del atributo de calidad
     * @return Stream<DatoDTO> que representa el resultado de la consulta
     */","
     * Crea una consulta que permite obtener el número de referencias que cumplem con un determinado atributo de calidad por Topico de una Pregunta en una revision
     *
     * @param dataProvider                                                                                             "
"<fim_prefix>package com.minlia.iot.scope;

/**<fim_suffix>
public interface ApiScopes {


}<fim_middle>","
 * 定义本SDK提供的API范围
 *
 * 交易, 查询, 退款等各种API集合
 */","
 * @author will
 */"
"<fim_prefix>package com.fang.bbks.modules.sys.entity;

import java.io.Serializable;

import javax.persistence.Entity;
import javax.persistence.Table;

/**<fim_suffix>
@Entity
@Table(name=""t_bookdb"")
public class BookDB extends BookDetail{

}
<fim_middle>","
 * @des:豆瓣网数据
 * @author:Lee
 *
 */","
 * 图书数据库
 * @author 郑杰
 *
 */"
"<fim_prefix>package com.anheinno.android.libs.ui;
/**<fim_suffix>
public interface UpdateUIClientInterface {
	public void doUpdate();
}
<fim_middle>","
 * @author 安和创新科技（北京）有限公司
 * 
 * @version 1.0
 */","
 * 
 * @author zhao.wenjie
 *
 */"
"<fim_prefix>/*<fim_suffix>

package ru.datareducer.ui;

interface Window<E> {
    E getEntity();

    void show();

    void close();
}
<fim_middle>","
 * Copyright (c) 2017-2020 Kirill Mikhaylov <admin@datareducer.ru>
 *
 * Этот файл — часть программы DataReducer Console <http://datareducer.ru>.
 *
 * Программа DataReducer Console является свободным программным обеспечением.
 * Вы вправе распространять ее и/или модифицировать в соответствии с условиями
 * версии 3 либо, по вашему выбору, с условиями более поздней версии
 * Стандартной Общественной Лицензии GNU, опубликованной Free Software Foundation.
 *
 * Программа DataReducer Console распространяется в надежде, что она будет полезной,
 * но БЕЗО ВСЯКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
 * и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ.
 * Подробнее см. в Стандартной Общественной Лицензии GNU.
 *
 * Вы должны были получить копию Стандартной Общественной Лицензии GNU
 * вместе с этой программой. Если это не так, см. <https://www.gnu.org/licenses/>.
 */","*
 * @author <NAME>
 */"
"<fim_prefix>package com.ozguryazilim.telve.forms;

/**<fim_suffix>
public enum EntityChangeAction {
    
    INSERT,
    UPDATE,
    DELETE
    
}
<fim_middle>","
 * Entity üzerinde gerçekleşen değişiklik türü.
 * @author Hakan Uygun
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.wanyue.shop.view.view.order;

import com.wanyue.shop.R;

/*<fim_suffix>
public class WaitEvaluateODViewProxy extends AbsOderDetailBottomViewProxy {
    @Override
    public int getLayoutId() {
        return R.layout.view_order_detail_bottom_wait_evaluate;
    }
}
<fim_middle>",等待评价*/,"*
 *"
"<fim_prefix>/*<fim_suffix>
package primera2223;

public class Ejercicio024b {
    public static void main(String arg[]){
        int[] datos = {10, 20, 30, 40, 50, 60};
        int[] multiplos = {3, 5, 7};
        for(int i = 0; i < multiplos.length; i++){
            for(int j = 0; j < datos.length; j++)
               System.out.printf("" %d - "", datos[j]*multiplos[i]);
        System.out.println();
        }
    }
}
<fim_middle>","
 Mostrar por pantalla el contenido de los elementos de datos multiplicados
por los elementos de múltiplos, en tres líneas, una línea por cada uno de los
elementos contenidos en multiplos.
 */","
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */"
"<fim_prefix>package top.alumopper.mcfpp.lang;

import top.alumopper.mcfpp.type.SbObject;

/**<fim_suffix>
public interface OnScoreboard {
    public OnScoreboard setObj(SbObject sbObject);
}
<fim_middle>","
 * 描述了所有基于单个记分板表达的类。
 */","
 * @author alumopper
 * @create 2021-08-"
"<fim_prefix>package com.ozguryazilim.tekir.activity.email.imports.commands;

import com.ozguryazilim.telve.messagebus.command.AbstractStorableCommand;

/**<fim_suffix>
public class EMailFetchCommand extends AbstractStorableCommand{
    
}
<fim_middle>","
 * E-Posta Import işlemi için Zamanlanmış Görev Komutu
 * 
 * @author Hakan Uygun
 */","
 * Created by <NAME> on 02.02.2016.
 */"
"<fim_prefix>package fr.gouv.beta.fabnum.kelrisks.persistance.referentiel;

import fr.gouv.beta.fabnum.commun.persistance.IAbstractDAO;
import fr.gouv.beta.fabnum.kelrisks.transverse.referentiel.entities.PlanPreventionRisques;

import java.util.List;

import org.geolatte.geom.Geometry;

/**<fim_suffix>
public interface IPlanPreventionRisquesDAO extends IAbstractDAO<PlanPreventionRisques> {
    
    List<PlanPreventionRisques> rechercherSitesDansPolygons(List<Geometry> multiPolygon);
    
    List<PlanPreventionRisques> rechercherSitesDansPolygon(Geometry multiPolygon);
}
  <fim_middle>","
 * Classe interface d'accès DAO à PlanPreventionRisques
 */","
 *
 * @author <NAME> <<EMAIL>>
 *
"
"<fim_prefix>/**<fim_suffix>
package br.com.hslife.orcamento.facade;

import java.util.List;

import br.com.hslife.orcamento.entity.Banco;

public interface IBanco extends ICRUDService<Banco>{
	
	List<Banco> buscarPorNome(String nome);
	
	List<Banco> buscarPorNomeEAtivo(String nome, boolean ativo);
	
}
<fim_middle>","*

Copyright (c) 2012 - 2021 Hércules S. S. José

Este arquivo é parte do programa Orçamento Doméstico.


Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou

modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como

publicada pela Fundação do Software Livre (FSF); na versão 3.0 da

Licença.


Este programa é distribuído na esperança que possa ser útil, mas SEM

NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer

MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral Menor

GNU em português para maiores detalhes.


Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob

o nome de ""LICENSE"" junto com este programa, se não, acesse o site do

projeto no endereco https://github.com/herculeshssj/orcamento ou escreva

para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor,

Boston, MA  02110-1301, USA.


Para mais informações sobre o programa Orçamento Doméstico e seu autor

entre em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva

para Hércules S. S. José, Rua José dos Anjos, 160 - Bl. 3 Apto. 304 -

Jardim Alvorada - CEP: 26261-130 - Nova Iguaçu, RJ, Brasil.

***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package cn.byteforge.openqq.http.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**<fim_suffix>
@Getter
@AllArgsConstructor
public enum UploadFileType {

    /**
     * 图片
     * */
    IMAGE(1),

    /**
     * 视频
     * */
    VIDEO(2),

    /**
     * 语音
     * */
    RECORD(3),

    /**
     * 文件（暂未开放）
     * */
    FILE(4);

    private final int value;

}
<fim_middle>","
 * 上传文件类型
 * */","
 * @author <a href=""mailto"
"<fim_prefix>package cn.byteforge.openqq.http.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 上传文件类型
 * */
@Getter
@AllArgsConstructor
public enum UploadFileType {

    /**
     * 图片
     * */
    IMAGE(1),

    /**<fim_suffix>
    VIDEO(2),

    /**
     * 语音
     * */
    RECORD(3),

    /**
     * 文件（暂未开放）
     * */
    FILE(4);

    private final int value;

}
<fim_middle>","
     * 视频
     * */","
     * 视频
     * */"
"<fim_prefix>package cn.byteforge.openqq.http.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 上传文件类型
 * */
@Getter
@AllArgsConstructor
public enum UploadFileType {

    /**<fim_suffix>
    IMAGE(1),

    /**
     * 视频
     * */
    VIDEO(2),

    /**
     * 语音
     * */
    RECORD(3),

    /**
     * 文件（暂未开放）
     * */
    FILE(4);

    private final int value;

}
<fim_middle>","
     * 图片
     * */","
     * 图片
     * */"
"<fim_prefix>package cn.byteforge.openqq.http.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 上传文件类型
 * */
@Getter
@AllArgsConstructor
public enum UploadFileType {

    /**
     * 图片
     * */
    IMAGE(1),

    /**
     * 视频
     * */
    VIDEO(2),

    /**
     * 语音
     * */
    RECORD(3),

    /**<fim_suffix>
    FILE(4);

    private final int value;

}
<fim_middle>","
     * 文件（暂未开放）
     * */","
     * 文件
     * */"
"<fim_prefix>package cn.byteforge.openqq.http.entity;

import lombok.AllArgsConstructor;
import lombok.Getter;

/**
 * 上传文件类型
 * */
@Getter
@AllArgsConstructor
public enum UploadFileType {

    /**
     * 图片
     * */
    IMAGE(1),

    /**
     * 视频
     * */
    VIDEO(2),

    /**<fim_suffix>
    RECORD(3),

    /**
     * 文件（暂未开放）
     * */
    FILE(4);

    private final int value;

}
<fim_middle>","
     * 语音
     * */","
     * 语音
     * */"
"<fim_prefix>package com.leetcode.tree;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class Solution_08_06 {
    public void hanota(List<Integer> A, List<Integer> B, List<Integer> C) {
        System.out.println(""刚开始："" + A);
        System.out.println(""刚开始："" + C);
        int size = A.size();
        move(size, A, B, C);
        System.out.println(""后来->"" + A);
        System.out.println(""后来->"" + C);
    }

    public void move(int index, List<Integer> original, List<Integer> auxiliary<fim_middle>","
 * 在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:
 * (1) 每次只能移动一个盘子;
 * (2) 盘子只能从柱子顶端滑出移到下一根柱子;
 * (3) 盘子只能叠在比它大的盘子上。
 * 请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。
 * 你需要原地修改栈。
 * 示例1:
 * <p>
 * 输入：A = [2, 1, 0], B = [], C = []
 * 输出：C = [2, 1, 0]
 * 示例2:
 * <p>
 * 输入：A = [1, 0], B = [], C = []
 * 输出：C = [1, 0]
 * 提示:
 * <p>
 * A中盘子的数目不大于14个。
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/hanota-lcci
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author lwj
 * @date 2020/9/24 11:09
 */","
 * @author fcz
 * @description
 * @date 2019/4/8
 * @since 1.0
 */"
"<fim_prefix>package com.ozguryazilim.telve.reports;

import java.io.Serializable;

/**<fim_suffix>
public abstract class AbstractSubreportBase implements Serializable{
    
}
<fim_middle>","
 * Subreportlar için base sınıf.
 * 
 * 
 * 
 * @author Hakan Uygun
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.elasticsearch.mapping;

/**<fim_suffix>
public class MappingVisitor extends MappingParserBaseVisitor<String> {
    @Override public String visitIndex_name(MappingParser.Index_nameContext ctx) { return visitChildren(ctx); }
}
<fim_middle>","
 * 说明:
 * 作者: LDL
 * 日期: 2016/7/26.
 */","
 * Created by shisheng on 2/25/16.
 */"
"<fim_prefix>package org.foa.data.transactiondata;

/**<fim_suffix>
public interface TransactionCustom {
}
<fim_middle>","
 * @author 王川源
 * 本类为自定义的TransactionDAO
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
package primera2223;


public class Ejercicio067b {
    public static void main(String arg[]){
        char frase[] = {' ','e', 'n', ' ', 'u', 'n', ' ', 'l', 'u', 'g', 'a', 'r', ' ', 'e', 'n', ' ', 'L', 'a', ' ','M', 'a', 'n', 'c', 'h', 'a',' '};
        char []frase2 = new char[150];
        int posini = frase.length - 1, posfin = frase.length - 1, i2 = 0;
        while(posini > 0){
            w<fim_middle>","
Meter en frase2 la misma frase, pero con las palabras en sentido inverso
mancha la en lugar un en
 */","*
 * Created by <NAME> on 10/04/2017.
 */"
"<fim_prefix>package org.autowebauth.core.api.network.provider.conn;

/**<fim_suffix>
public enum ConnectionAction
{

    CONNECTED,

    DISCONNECTED;

}
<fim_middle>","
 * 
 * @author Andrin Bertschi
 * 
 */","
 *
 * @author <NAME>
 * @since 0."
"<fim_prefix>package lista2;

import java.util.Scanner;

/**<fim_suffix>
public class Ex12 {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String name1, name2;
        
        System.out.print(""Informe um nome: "");
        name1 = input.next();
        System.out.print(""Informe outro nome: "");
        name2 = input.next();
        input.close();
        
        if (name1.equals(name2))
            System.out.println(""Os n<fim_middle>","
 * Enunciado: 12) Implemente uma aplicação Java que recebe dois nomes e informa
 * se são iguais.
 *
 * @author Clederson Cruz
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.dimple.effectiveJava.chapter9;

/**<fim_suffix>
public class Item62 {

}
<fim_middle>","
 * @className: Item62
 * @description: 如果其他类型更适合，尽量避免使用字符串
 * 字符串不适合代替其他的值类型
 * 字符串不适合代替枚举类型
 * 字符串不适合代替聚合类型
 * 字符串不适合代替能力表
 * 总而言之：如果可以使用更加适合的数据类型，就编写更加适当的数据类型，就应该避免字符串表示对象。
 * @auther: Dimple
 * @date: 06/14/19
 * @version: 1.0
 */","
 * @author zhongyj <<EMAIL>><br/>
 * @date 2020/1/14
 */"
"<fim_prefix>/**<fim_suffix>
@com.maximuslotro.mc.NonNullByDefault
@API(apiVersion = ""1.0"", owner = ""bnnwidget"", provides = ""bnnwidget"")
package com.maximuslotro.mc.bnnwidget;

import cpw.mods.fml.common.API;<fim_middle>","
 * BnnWidgetの主要なコンポーネントが含まれるパッケージです。
 * <p>
 * {@link com.maximuslotro.mc.bnnwidget.WFrame WFrame}はMinecraftのGUIとウィジェットをつなぐ重量コンポーネントです。
 * <br>
 * {@link com.maximuslotro.mc.bnnwidget.WCommon WCommon}はウィジェットの軽量コンポーネントの基本インターフェイスです。
 */","
 * Created by Maximus on 12.03.2014.
 */"
"<fim_prefix>package com.steven.solomon.sort;

import com.steven.solomon.sort.enums.SortTypeEnum;
import com.steven.solomon.verification.ValidateUtils;

import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;

public class SortUtil {

    /**<fim_suffix>
    public static <T> Collection<T> sort(SortTypeEnum sortTypeEnum, Collection<T> list, Comparator<? super T> comparator) {
        if (ValidateUtils.isEmpty(list)) {
            return list;
        }
        return sortTypeEnum.getService().sort(list, comparator);
    }
}<fim_middle>","
     * 对给定的列表进行排序，支持升序和降序排序。
     *
     * @param <T>            列表元素的类型
     * @param sortTypeEnum   排序类型
     * @param list           要排序的列表
     * @param comparator 用于比较列表元素的比较器
     * @return 排序后的列表
     */","
     * 排序
     *
     * @param sortTypeEnum 排序类型
     * @param list         待排序集合
     * @param <T>          泛型
     * @return 排序后的集合
     */"
"<fim_prefix>package com.chuidiang.mockito_examples.when;

/**<fim_suffix>
public record Data(int id, String name) {
}
<fim_middle>","
 * @author Chuidiang
 * date 03/03/2024
 */","
 * @author chuidiang
 * @since 2021-04-07
"
"<fim_prefix>/*<fim_suffix>
package primera2223;


public class Ejercicio070 {
    public static void main(String arg[]){
        char frase[] = {'e', 'n', ' ', 'u', 'n', ' ', 'l', 'u', 'g', 'a', 'r', ' ', 'e', 'n', ' ', 'd', 'e', ' ', 'L', 'a', ' ','M', 'a', 'n', 'c', 'h', 'a', ' '};
        int posini = 0;
        int posfin = 0;
        
        while(posfin < frase.length)
            if(frase[posfin] != ' ')
         <fim_middle>","
poner en mayúsculas la primera y última letra de cada palabra.
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>package net.nanxu.payment.generator;

/**<fim_suffix>
public interface PaymentLinkGenerator {
    /**
     * 生成一个收银台访问地址
     *
     * @param orderNo 订单号
     * @param channel 支付渠道
     * @return 收银台地址
     */
    String checkoutUrl(String orderNo, String channel);

    /**
     * 生成一个支付状态回调接口地址
     *
     * @param internal 内部地址，由用户自定义的路径
     * @param orderNo 订单号
     * @param channel 支付渠道
     * @return 回调接口地址
     */
    String callbackUrl(String internal,<fim_middle>","
 * 外部地址生成器.
 *
 * @author: P
 **/","
 * 支付链接生成器
 *
 * @author Nan
 * @date"
"<fim_prefix>package net.nanxu.payment.generator;

/**
 * 外部地址生成器.
 *
 * @author: P
 **/
public interface PaymentLinkGenerator {
    /**<fim_suffix>
    String checkoutUrl(String orderNo, String channel);

    /**
     * 生成一个支付状态回调接口地址
     *
     * @param internal 内部地址，由用户自定义的路径
     * @param orderNo 订单号
     * @param channel 支付渠道
     * @return 回调接口地址
     */
    String callbackUrl(String internal, String orderNo, String channel);
}
<fim_middle>","
     * 生成一个收银台访问地址
     *
     * @param orderNo 订单号
     * @param channel 支付渠道
     * @return 收银台地址
     */","
     * 生成一个支付页面地址
     *
     * @param orderNo 订单号
     * @param channel 支付渠道
     * @return 支付页面地址
     */"
"<fim_prefix>package net.nanxu.payment.generator;

/**
 * 外部地址生成器.
 *
 * @author: P
 **/
public interface PaymentLinkGenerator {
    /**
     * 生成一个收银台访问地址
     *
     * @param orderNo 订单号
     * @param channel 支付渠道
     * @return 收银台地址
     */
    String checkoutUrl(String orderNo, String channel);

    /**<fim_suffix>
    String callbackUrl(String internal, String orderNo, String channel);
}
<fim_middle>","
     * 生成一个支付状态回调接口地址
     *
     * @param internal 内部地址，由用户自定义的路径
     * @param orderNo 订单号
     * @param channel 支付渠道
     * @return 回调接口地址
     */","
     * 生成一个回调地址
     *
     * @param internal 内部地址
     * @param orderNo  订单号
     * @param channel  支付渠道
     * @return 回调地址
     */"
"<fim_prefix>package org.zenframework.z8.server.ie;

public enum ImportPolicy {

	/**<fim_suffix>
	Keep,

	/**
	 * Если импортируемая запись существует, обновить
	 */
	Override,
	
	/**
	 * Если импортируемая запись существует, использовать метод <code>DataMessage.onMerge()</code>
	 */
	Merge;

	public static final ImportPolicy Default = Keep;
}
<fim_middle>","
	 * Если импортируемое запись существует, не менять
	 */","
	 * Если импортируемая запись существует, не обновлять
	 */"
"<fim_prefix>package org.zenframework.z8.server.ie;

public enum ImportPolicy {

	/**
	 * Если импортируемое запись существует, не менять
	 */
	Keep,

	/**<fim_suffix>
	Override,
	
	/**
	 * Если импортируемая запись существует, использовать метод <code>DataMessage.onMerge()</code>
	 */
	Merge;

	public static final ImportPolicy Default = Keep;
}
<fim_middle>","
	 * Если импортируемая запись существует, обновить
	 */","
	 * Если импортируемая запись существует, заменить
	"
"<fim_prefix>package org.zenframework.z8.server.ie;

public enum ImportPolicy {

	/**
	 * Если импортируемое запись существует, не менять
	 */
	Keep,

	/**
	 * Если импортируемая запись существует, обновить
	 */
	Override,
	
	/**<fim_suffix>
	Merge;

	public static final ImportPolicy Default = Keep;
}
<fim_middle>","
	 * Если импортируемая запись существует, использовать метод <code>DataMessage.onMerge()</code>
	 */","
	 * Если импортируемая запись существует, обновить, если нет - добавить
	 */"
"<fim_prefix>age pama1234.server.game.net;

public enum ClientIntention{
  /** 玩家登录自己的账号 */
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /** 创建账号 */
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /**<fim_suffix>
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /** 中断，让服务端停止发送正在发送的东东 */
  Interrupt
}<fim_middle>", 让服务端生成一个角色 */, 获取服务端的头像 */
"<fim_prefix>package pama1234.server.game.net;

public enum ClientIntention{
  /** 玩家登录自己的账号 */
  Login,
  /**<fim_suffix>
  Logout,
  /** 创建账号 */
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /** 中断，让服务端停止发送正在发送的东东 */
  Interrup<fim_middle>", 玩家退出登录自己的账号 */, 玩家登出自己的账号 */
"<fim_prefix>package pama1234.server.game.net;

public enum ClientIntention{
  /**<fim_suffix>
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /** 创建账号 */
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /** 中断<fim_middle>", 玩家登录自己的账号 */, 登录自己的账号 */
"<fim_prefix>package pama1234.server.game.net;

public enum ClientIntention{
  /** 玩家登录自己的账号 */
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /**<fim_suffix>
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /** 中断，让服务端停止发送正在发送的东东 */
  Interrupt
}<fim_middle>", 创建账号 */, 玩家创建
"<fim_prefix>package pama1234.server.game.net;

public enum ClientIntention{
  /** 玩家登录自己的账号 */
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /** 创建账号 */
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /**<fim_suffix>
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /** 中断，让服务端停止发送正在发送的东东 */
  Interrupt
}<fim_middle>", 离开现有房间 */, 离开现有房间 */
"<fim_prefix>package pama1234.server.game.net;

public enum ClientIntention{
  /** 玩家登录自己的账号 */
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /** 创建账号 */
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /**<fim_suffix>
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /** 中断，让服务端停止发送正在发送的东东 */
  Interrupt
}<fim_middle>", 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */, 创建房间 */
"<fim_prefix>package pama1234.server.game.net;

public enum ClientIntention{
  /** 玩家登录自己的账号 */
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /** 创建账号 */
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /**<fim_suffix>
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /** 中断，让服务端停止发送正在发送的东东 */
  Interrupt
}<fim_middle>", 发送游戏中的控制信息（按键鼠标等） */, 让服务端发送游戏控制缓存 */
"<fim_prefix>package pama1234.server.game.net;

public enum ClientIntention{
  /** 玩家登录自己的账号 */
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /** 创建账号 */
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /**<fim_suffix>
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /** 中断，让服务端停止发送正在发送的东东 */
  Interrupt
}<fim_middle>", 获取服务端的类型 */, 客户端请求服务端
"<fim_prefix>enum ClientIntention{
  /** 玩家登录自己的账号 */
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /** 创建账号 */
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /**<fim_suffix>
  Confirm,
  /** 中断，让服务端停止发送正在发送的东东 */
  Interrupt
}<fim_middle>", 确认（我也不知道到底确认了些什么） */, 确认，让服务端确认东东已经发送完毕 */
"<fim_prefix>*/
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /** 创建账号 */
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /**<fim_suffix>
  Interrupt
}<fim_middle>", 中断，让服务端停止发送正在发送的东东 */, 取消 */
"<fim_prefix>package pama1234.server.game.net;

public enum ClientIntention{
  /** 玩家登录自己的账号 */
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /** 创建账号 */
  CreateAccount,
  /** 加入现有房间 */
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /**<fim_suffix>
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /** 中断，让服务端停止发送正在发送的东东 */
  Interrupt
}<fim_middle>", 将玩家创建的本地房间链接到服务端上 */, 加入本地房间 */
"<fim_prefix>package pama1234.server.game.net;

public enum ClientIntention{
  /** 玩家登录自己的账号 */
  Login,
  /** 玩家退出登录自己的账号 */
  Logout,
  /** 创建账号 */
  CreateAccount,
  /**<fim_suffix>
  JoinRoom,
  /** 离开现有房间 */
  LeaveRoom,
  /** 在服务端创建房间（公开版本应当设置限制，例如每个账号每天的次数和时常限制） */
  CreateRemoteRoom,
  /** 将玩家创建的本地房间链接到服务端上 */
  LinkLocalRoom,
  /** 发送游戏中的控制信息（按键鼠标等） */
  SendGameCtrlCache,
  /** 获取服务端的类型 */
  RequireServerType,
  /** 让服务端生成一个角色 */
  RequireAvatar,

  /** 确认（我也不知道到底确认了些什么） */
  Confirm,
  /** 中断，让服务端停止发送正在发送的东东 */
  Interrupt
}<fim_middle>", 加入现有房间 */, 玩家登录其他账号 */
"<fim_prefix>package org.crue.hercules.sgi.csp.repository;

import java.util.Optional;

import org.crue.hercules.sgi.csp.model.TipoFacturacion;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface TipoFacturacionRepository
    extends JpaRepository<TipoFacturacion, Long>, JpaSpecificationExecutor<TipoFacturacion> {

  /**<fim_suffix>
  Optional<TipoFacturacion> findByNombreAndActivoIsTrue(String nombre);

}
<fim_middle>","
   * Obtiene la entidad {@link TipoFacturacion} activo con el nombre
   * indicado
   *
   * @param nombre el nombre de {@link TipoFacturacion}.
   * @return el {@link TipoFacturacion} con el nombre
   *         indicado
   */","
   * Busca un tipo de facturación por nombre.
   *
   * @param nombre
   *          Nombre del tipo de facturación.
   * @return Tipo de facturación.
   */"
"<fim_prefix>tions;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

public class MapEx02 {

	public static void main(String[] args) {
	
		HashMap<String, Integer> map = new HashMap<>();
		
		map.put(""홍길동"", 90);
		map.put(""홍길동1"", 190);
		map.put(""홍길동2"", 290);
		map.put(""홍길동3"", 390);
		map.put(""홍길동4"", 490);
		
		Set<Map.Entry<String, Integer>> set1 = map.entrySet();
	
		/*<fim_suffix>
	
		Iterator<Map.Entry<String, Integer>> it1 = set1.iterator();
		
		while(it1.hasNext()) {
			
			Map.Entry<String, Integer> e = it1.next();
			e.getKey();
			e.getValue();
			
			System.out.println(e.getKey() + "" "" + e.getValue());
			
		}
		
		Set set2 = map.keySet();
		System.out.println(set2);

		
		Collection<Integer> v = map.values();
		System.out.println(v);
		Iterator<Integer> it2 = v.iterator();
	<fim_middle>","entry
		 * 키와 값을 set형태로 저장(HashMap을 이용해서 key와 value을 묶어주기 위해서 entry을 이용할
		 * 
		 * 맵.엔트리(키와 값을 한쌍(페어)이다)
		 * Map.Entry에는 entrySet()메소드가 있는데
		 * entrySet()메소드는 현재 클래스에 속하는 요소를 가지는 맵의 컬렉션뷰를 돌려줌
		 * 맵의 엔트리의 참조를 취득하는 유일한 방법은 반복자(Iterator)를 이용해서 취득함
		 * )
		 * */","*
		 * Iterator<Map.Entry<String, Integer>> it = set1.iterator();
		 * while(it.hasNext()) {
		 * 
		 * Map.Entry<String, Integer> e = it.next();
		 * e.getKey();
		 * e.getValue();
		 * 
		 * System.out.println(e.getKey() + "" "" + e.getValue());
		 * 
		 * }
		 */"
"<fim_prefix>/**<fim_suffix>
package nami.beitrag.hibiscus;
<fim_middle>","
 * Stellt Funktionen bereit, die mittels XML-RPC-Schnittstelle auf Hibiscus zugreifen.
 * 
 * @author Fabian Lipp
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.imguns.guns.client.gui.components.refit;

import net.minecraft.item.ItemStack;

import java.util.function.Consumer;

public interface IStackTooltip {
    /**<fim_suffix>
    void renderTooltip(Consumer<ItemStack> consumer);
}
<fim_middle>","
     * 添加此接口，会调用此渲染文本提示
     *
     * @param consumer 需要渲染文本提示的物品
     */","
     * Renders the tooltip for the given stack.
     *
     * @param consumer The consumer to render the tooltip with.
     */"
"<fim_prefix>/**<fim_suffix>

package br.ufpe.cin.amadeus.amadeus_web.domain.content_management;

public enum Status {
	APPROVED, DISAPPROVED, WAITING
}
<fim_middle>","
Copyright 2008, 2009 UFPE - Universidade Federal de Pernambuco
 
Este arquivo é parte do programa Amadeus Sistema de Gestão de Aprendizagem, ou simplesmente Amadeus LMS
 
O Amadeus LMS é um software livre; você pode redistribui-lo e/ou modifica-lo dentro dos termos da Licença Pública Geral GNU como
publicada pela Fundação do Software Livre (FSF); na versão 2 da Licença.
 
Este programa é distribuído na esperança que possa ser útil, mas SEM NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral GNU para maiores detalhes.
 
Você deve ter recebido uma cópia da Licença Pública Geral GNU, sob o título ""LICENCA.txt"", junto com este programa, se não, escreva para a Fundação do Software Livre (FSF) Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA.
**/","
 * 
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>
 * @author <NAME>"
"<fim_prefix>/**<fim_suffix>
package es.inteco.xbrl.lenlocpenloc.apifacade.xbreeze;<fim_middle>","
 * Clases necesarias interactuar con XBreeze (UBMatrix), funcionando a modo de fachada con el resto de la aplicación.
 * 
 */","
 * @author <NAME> (inteco)
 *
 */"
"<fim_prefix>/**
 *
 */
package com.aritu.eloraplm.templating.api;

import org.nuxeo.ecm.core.api.Blob;
import org.nuxeo.ecm.core.api.DocumentModel;

import com.aritu.eloraplm.exceptions.EloraException;

/**<fim_suffix>
public interface TemplatingService {

    public boolean existsTemplate(String id);

    public TemplateDescriptor getTemplate(String id);

    public Blob processTemplate(String id, DocumentModel doc)
            throws EloraException;

}
<fim_middle>","
 * @author aritu
 *
 */","
 * @author eloraplm
 *"
"<fim_prefix>/**<fim_suffix>
package br.com.hslife.orcamento.repository;

import org.springframework.stereotype.Repository;

import br.com.hslife.orcamento.entity.ResgateSeguro;

@Repository
public class ResgateSeguroRepository extends AbstractCRUDRepository<ResgateSeguro> {

	public ResgateSeguroRepository() {
		super(new ResgateSeguro());
	}


}
<fim_middle>","*

Copyright (c) 2012 - 2021 Hércules S. S. José

Este arquivo é parte do programa Orçamento Doméstico.


Orçamento Doméstico é um software livre; você pode redistribui-lo e/ou

modificá-lo dentro dos termos da Licença Pública Geral Menor GNU como

publicada pela Fundação do Software Livre (FSF); na versão 3.0 da

Licença.


Este programa é distribuído na esperança que possa ser útil, mas SEM

NENHUMA GARANTIA; sem uma garantia implícita de ADEQUAÇÃO a qualquer

MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a Licença Pública Geral Menor

GNU em português para maiores detalhes.


Você deve ter recebido uma cópia da Licença Pública Geral Menor GNU sob

o nome de ""LICENSE"" junto com este programa, se não, acesse o site do

projeto no endereco https://github.com/herculeshssj/orcamento ou escreva

para a Fundação do Software Livre(FSF) Inc., 51 Franklin St, Fifth Floor,

Boston, MA  02110-1301, USA.


Para mais informações sobre o programa Orçamento Doméstico e seu autor

entre em contato pelo e-mail herculeshssj@outlook.com, ou ainda escreva

para Hércules S. S. José, Rua José dos Anjos, 160 - Bl. 3 Apto. 304 -

Jardim Alvorada - CEP: 26261-130 - Nova Iguaçu, RJ, Brasil.

***/","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.ktools.warehouse.task.element;

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;

/**<fim_suffix>
public enum DataType implements Serializable {
    /**
     * 未知类型
     */
    UNKNOWN_DATA,
    NULL,
    BYTE,
    SHORT,
    INT,
    LONG,
    STRING,
    BOOLEAN,
    FLOAT,
    DOUBLE,
    BINARY,
    DECIMAL,
    DATE,
    TIMESTAMP;

    public Object convertData(Object o) {
        if (o == null) {
            return null;
        }
        return switch (this) {
            case NULL -> null;
    <fim_middle>","
 * 数据类型
 *
 * @author WCG
 */","
 * 数据类型
 *
 * @author lorne
 *"
"<fim_prefix>package com.ktools.warehouse.task.element;

import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;

/**
 * 数据类型
 *
 * @author WCG
 */
public enum DataType implements Serializable {
    /**<fim_suffix>
    UNKNOWN_DATA,
    NULL,
    BYTE,
    SHORT,
    INT,
    LONG,
    STRING,
    BOOLEAN,
    FLOAT,
    DOUBLE,
    BINARY,
    DECIMAL,
    DATE,
    TIMESTAMP;

    public Object convertData(Object o) {
        if (o == null) {
            return null;
        }
        return switch (this) {
            case NULL -> null;
            case BYTE -> Byte.parseByte(String.valueOf(o));
            case SH<fim_middle>","
     * 未知类型
     */","
     * 未知数据
     */"
"<fim_prefix>package sep.fimball.model.handler;


/**<fim_suffix>
public interface ElementHandler extends SomeHandler
{
    /**
     * Ist eine Kollision passiert, wird der Handler aktiviert.
     *
     * @param element    Das Element, das mit dem Ball kollidiert ist.
     * @param elementHandlerArgs Die Argumente die bei einer Kollision an den ElementHandler übergeben werden.
     */
    void activateElementHandler(HandlerGameElement element, ElementHandlerArgs elementH<fim_middle>","
 * Handler, der bei der Kollision von Spielelement und Ball ausgelöst wird.
 */","
 * Interface für alle Handler, die auf Elemente reagieren.
 *
 * @author <NAME>"
"<fim_prefix>package sep.fimball.model.handler;


/**
 * Handler, der bei der Kollision von Spielelement und Ball ausgelöst wird.
 */
public interface ElementHandler extends SomeHandler
{
    /**<fim_suffix>
    void activateElementHandler(HandlerGameElement element, ElementHandlerArgs elementHandlerArgs);
}
<fim_middle>","
     * Ist eine Kollision passiert, wird der Handler aktiviert.
     *
     * @param element    Das Element, das mit dem Ball kollidiert ist.
     * @param elementHandlerArgs Die Argumente die bei einer Kollision an den ElementHandler übergeben werden.
     */","
     * Aktiviert den Handler.
     * 
     * @param element
     *            Spielelement, der den Handler aktiviert.
     * @param elementHandlerArgs
     *            Argumente, die"
"<fim_prefix>package io.metersphere.jmeter.mock.invoker;

/**<fim_suffix>
@FunctionalInterface
public interface Invoker {

    /**
     * 返回方法执行的结果
     * @return 获取执行结果
     * @throws Exception 可能会存在异常
     */
    Object invoke() throws Exception;
}

<fim_middle>","
 * 执行者接口，定义了一个执行者的函数，执行者会通过invoke()方法获得结果
 * 
 */","
 * 模拟器调用接口
 *
 * @author metersphere
 * @date 2019-11-21
"
"<fim_prefix>package io.metersphere.jmeter.mock.invoker;

/**
 * 执行者接口，定义了一个执行者的函数，执行者会通过invoke()方法获得结果
 * 
 */
@FunctionalInterface
public interface Invoker {

    /**<fim_suffix>
    Object invoke() throws Exception;
}

<fim_middle>","
     * 返回方法执行的结果
     * @return 获取执行结果
     * @throws Exception 可能会存在异常
     */","
     * 执行者执行函数
     * 
     * @return 执行结果
     * @throws Exception 执行异常
  "
"<fim_prefix>package com.ljh.project.service;

import com.baomidou.mybatisplus.extension.service.IService;
import com.ljh.ljhcommon.model.entity.InterfaceInfo;


/**<fim_suffix>
public interface InterfaceInfoService extends IService<InterfaceInfo> {

    void validInterfaceInfo(InterfaceInfo interfaceInfo, boolean add);

}
<fim_middle>","
* @author 李俊豪
* @description 针对表【interface_info(接口信息)】的数据库操作Service
* @createDate 2023-03-13 21:45:42
*/","
 * <p>
 *  服务类
 * </p>
 *
 * @author ljh
 * @since 2020-10-19
 */"
"<fim_prefix>package cn.hnit.starter.cache.annotation;

import cn.hnit.starter.cache.aspect.Cacheable4PageSupport;

import java.lang.annotation.*;

/**<fim_suffix>
@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Cacheable4Page {
    String cacheName();

    /**
     * keyField对应的缓存
     */
    String itemCacheName();

    /**
     * 缓存对应的key
     */
    String itemKeyField() default ""id"";

    /**
     * 分页key，不包括分页参数，包含查询条件
     */
    String pageKey() default """";

    /**
     * 分页参数
     *<fim_middle>","
 * 用来标记应该缓存
 *
 * @author 梁峰源
 * @since 2022年9月25日17:28:36
 */","
 * 缓存支持分页的注解
 *
 * @author h-nit
 * @date 2019/10/31
 */"
"<fim_prefix>notation;

import cn.hnit.starter.cache.aspect.Cacheable4PageSupport;

import java.lang.annotation.*;

/**
 * 用来标记应该缓存
 *
 * @author 梁峰源
 * @since 2022年9月25日17:28:36
 */
@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Cacheable4Page {
    String cacheName();

    /**
     * keyField对应的缓存
     */
    String itemCacheName();

    /**<fim_suffix>
    String itemKeyField() default ""id"";

    /**
     * 分页key，不包括分页参数，包含查询条件
     */
    String pageKey() default """";

    /**
     * 分页参数
     */
    String pageParam() default Cacheable4PageSupport.DEFAULT_PAGE_PARAM;
}
<fim_middle>","
     * 缓存对应的key
     */","
     * keyField对应的缓存
     */"
"<fim_prefix>年9月25日17:28:36
 */
@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Cacheable4Page {
    String cacheName();

    /**
     * keyField对应的缓存
     */
    String itemCacheName();

    /**
     * 缓存对应的key
     */
    String itemKeyField() default ""id"";

    /**
     * 分页key，不包括分页参数，包含查询条件
     */
    String pageKey() default """";

    /**<fim_suffix>
    String pageParam() default Cacheable4PageSupport.DEFAULT_PAGE_PARAM;
}
<fim_middle>","
     * 分页参数
     */","
     * 分页参数"
"<fim_prefix>package cn.hnit.starter.cache.annotation;

import cn.hnit.starter.cache.aspect.Cacheable4PageSupport;

import java.lang.annotation.*;

/**
 * 用来标记应该缓存
 *
 * @author 梁峰源
 * @since 2022年9月25日17:28:36
 */
@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Cacheable4Page {
    String cacheName();

    /**<fim_suffix>
    String itemCacheName();

    /**
     * 缓存对应的key
     */
    String itemKeyField() default ""id"";

    /**
     * 分页key，不包括分页参数，包含查询条件
     */
    String pageKey() default """";

    /**
     * 分页参数
     */
    String pageParam() default Cacheable4PageSupport.DEFAULT_PAGE_PARAM;
}
<fim_middle>","
     * keyField对应的缓存
     */","
     * 缓存对应的key
     */"
"<fim_prefix>port java.lang.annotation.*;

/**
 * 用来标记应该缓存
 *
 * @author 梁峰源
 * @since 2022年9月25日17:28:36
 */
@Target({ElementType.METHOD, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Cacheable4Page {
    String cacheName();

    /**
     * keyField对应的缓存
     */
    String itemCacheName();

    /**
     * 缓存对应的key
     */
    String itemKeyField() default ""id"";

    /**<fim_suffix>
    String pageKey() default """";

    /**
     * 分页参数
     */
    String pageParam() default Cacheable4PageSupport.DEFAULT_PAGE_PARAM;
}
<fim_middle>","
     * 分页key，不包括分页参数，包含查询条件
     */","
     * 缓存对应的key
     */"
"<fim_prefix>package org.openyu.mix.item.vo.thing;

/**<fim_suffix>
public interface PotionInstantHpThing extends PotionThing
{

}
<fim_middle>","
 * 立即治癒藥水道具
 */","
 * 物品的生命值
 *
 * @author l"
"<fim_prefix>package com.himoo.ydsc.mvc;

import java.io.File;
import java.util.List;
import android.util.SparseArray;

/**<fim_suffix>
public interface ServiceListener{
	/**
	 * Service跟V视图层通讯接口，当Serivice层解析完数据后会调用该方法把数据带到视图层
	 * @param model 服务层Service解析完之后所生成的序列化对象
	 * @param dataInstruction  该数据的标志性常量
	 */
	void handlerIntent(BaseModel model,int dataInstruction);
	
	void handlerIntent(List<? extends BaseModel> models,int dataInstruction);
	
	void handlerIntent(SparseArray<? extends BaseModel> models,int dataInstruction);
	
<fim_middle>","
 * MVC模式中Service跟V(视图层)通讯的回调接口
 */","
 * 通讯接口，当Service层解析完数据后会调用该方法把"
"<fim_prefix>package com.himoo.ydsc.mvc;

import java.io.File;
import java.util.List;
import android.util.SparseArray;

/**
 * MVC模式中Service跟V(视图层)通讯的回调接口
 */
public interface ServiceListener{
	/**<fim_suffix>
	void handlerIntent(BaseModel model,int dataInstruction);
	
	void handlerIntent(List<? extends BaseModel> models,int dataInstruction);
	
	void handlerIntent(SparseArray<? extends BaseModel> models,int dataInstruction);
	
	void handlerIntent(File file,int dataInstruction);
}
<fim_middle>","
	 * Service跟V视图层通讯接口，当Serivice层解析完数据后会调用该方法把数据带到视图层
	 * @param model 服务层Service解析完之后所生成的序列化对象
	 * @param dataInstruction  该数据的标志性常量
	 */","
	 * 回调接口
	 * @param model
	 * @param dataInstruction
	 */"
"<fim_prefix>package net.nanxu.payment.channel.model;

/**<fim_suffix>
public enum PaymentMethod {
    PC,
    WAP,
    APP,
    MINI

}
<fim_middle>","
 * 支付方式.
 *
 * @author: P
 **/","
 * 支付方式
 *
 * @author Nan
 * @date"
"<fim_prefix>/*<fim_suffix>

package fun.logcatcher.ui;

public interface XCall<TYPE> {
    void call(TYPE t);
}
<fim_middle>","
 *                               _ooOoo_
 *                              o8888888o
 *                              88"". ""88
 *                              (| -_- |)
 *                              O\  =  /O
 *                           ____/`- -'\____
 *                        .'  \\|     |//  `.
 *                        /  \\|||  :  |||//  \
 *                       /  _||||| -:- |||||-  \
 *                       |   | \\\  -  /// |   |
 *                       | \_|  ''\- -/''  |   |
 *                       \ .-\__  `-`  ___/-. /
 *                     ___`..'  / -.- \  `.. __
 *                 ."""" '<  `.___\_<|>_/___.'  >'"""".
 *                 | | :  `- \`.;`\ _ /`;.`/ - ` : | |
 *                 \  \ `-.   \_ __\ /__ _/  .-` /  /
 *            ======`-.____`-.___\_____/___.-`____.-'======
 *                               `=- -='
 *            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 *                       佛祖保佑        永无BUG
 *              佛曰:
 *                     写字楼里写字间，写字间里程序员；
 *                     程序人员写程序，又拿程序换酒钱。
 *                     酒醒只在网上坐，酒醉还来网下眠；
 *                     酒醉酒醒日复日，网上网下年复年。
 *                     但愿老死电脑间，不愿鞠躬老板前；
 *                     奔驰宝马贵者趣，公交自行程序员。
 *                     别人笑我忒疯癫，我笑自己命太贱；
 *                     不见满街漂亮妹，哪个归得程序员？
 */","*
 * Created by <NAME> on 2018/1/18.
 */"
"<fim_prefix>package osmo.visualizer;

/**<fim_suffix>
public class Main {
}
<fim_middle>","
 * @author Teemu Kanstren
 */","
 * Created by <NAME> on 10/12/"
"<fim_prefix>package nami.beitrag.db;

import java.util.Date;

import lombok.Data;
import lombok.NoArgsConstructor;
import nami.connector.Halbjahr;

/**<fim_suffix>
@Data
@NoArgsConstructor
public class BeitragZeitraum {
    private Halbjahr halbjahr;
    private Date abgeschlossen = null;

    /**
     * Erzeugt einen neuen Zeitraum, gegeben durch Halbjahr und Jahr.
     * 
     * @param halbjahr
     *            Halbjahr
     * @param jahr
     *            Jahr
     */
    public BeitragZeitraum(int halbjahr, int jahr) {
        this.halbjahr = new Halbjahr(halbjah<fim_middle>","
 * Beschreibt einen Zeitraum für den Mitgliedsbeiträge berechnet werden.
 * 
 * @author Fabian Lipp
 * 
 */","
 * Enthält den Zeitraum eines Beitrags.
 * 
 * @author anamul
 *
 */"
"<fim_prefix>
public class BeitragZeitraum {
    private Halbjahr halbjahr;
    private Date abgeschlossen = null;

    /**
     * Erzeugt einen neuen Zeitraum, gegeben durch Halbjahr und Jahr.
     * 
     * @param halbjahr
     *            Halbjahr
     * @param jahr
     *            Jahr
     */
    public BeitragZeitraum(int halbjahr, int jahr) {
        this.halbjahr = new Halbjahr(halbjahr, jahr);
    }

    /**<fim_suffix>
    public BeitragZeitraum(Halbjahr halbjahr) {
        this.halbjahr = halbjahr;
    }

    /**
     * Erzeugt den Zeitraum, in dem das übergebene Datum liegt.
     * 
     * @param date
     *            Datum, dessen Zeitraum bestimmt werden soll
     */
    public BeitragZeitraum(Date date) {
        this.halbjahr = new Halbjahr(date);
    }
}
<fim_middle>","
     * Erzeugt einen neuen Zeitraum, gegeben durch ein Halbjahr.
     * 
     * @param halbjahr
     *            Halbjahr (inkl. Jahr)
     */","
     * Erzeugt den Zeitraum, in dem das übergebene Halbjahr liegt.
     * 
     * @param halbjahr
     *            Halbjahr
     */"
"<fim_prefix>   * @param jahr
     *            Jahr
     */
    public BeitragZeitraum(int halbjahr, int jahr) {
        this.halbjahr = new Halbjahr(halbjahr, jahr);
    }

    /**
     * Erzeugt einen neuen Zeitraum, gegeben durch ein Halbjahr.
     * 
     * @param halbjahr
     *            Halbjahr (inkl. Jahr)
     */
    public BeitragZeitraum(Halbjahr halbjahr) {
        this.halbjahr = halbjahr;
    }

    /**<fim_suffix>
    public BeitragZeitraum(Date date) {
        this.halbjahr = new Halbjahr(date);
    }
}
<fim_middle>","
     * Erzeugt den Zeitraum, in dem das übergebene Datum liegt.
     * 
     * @param date
     *            Datum, dessen Zeitraum bestimmt werden soll
     */","
     * Erzeugt einen neuen Zeitraum, gegeben durch ein Datum.
     * 
     * @param date
     *            Datum
     */"
"<fim_prefix>package nami.beitrag.db;

import java.util.Date;

import lombok.Data;
import lombok.NoArgsConstructor;
import nami.connector.Halbjahr;

/**
 * Beschreibt einen Zeitraum für den Mitgliedsbeiträge berechnet werden.
 * 
 * @author Fabian Lipp
 * 
 */
@Data
@NoArgsConstructor
public class BeitragZeitraum {
    private Halbjahr halbjahr;
    private Date abgeschlossen = null;

    /**<fim_suffix>
    public BeitragZeitraum(int halbjahr, int jahr) {
        this.halbjahr = new Halbjahr(halbjahr, jahr);
    }

    /**
     * Erzeugt einen neuen Zeitraum, gegeben durch ein Halbjahr.
     * 
     * @param halbjahr
     *            Halbjahr (inkl. Jahr)
     */
    public BeitragZeitraum(Halbjahr halbjahr) {
        this.halbjahr = halbjahr;
    }

    /**
     * Erzeugt den Zeitraum, in dem das übergeb<fim_middle>","
     * Erzeugt einen neuen Zeitraum, gegeben durch Halbjahr und Jahr.
     * 
     * @param halbjahr
     *            Halbjahr
     * @param jahr
     *            Jahr
     */","
     * Erzeugt einen neuen Zeitraum, gegeben durch ein Jahr.
     * 
     * @param halbjahr
     *            Halbjahr (inkl. Jahr)
     * @param jahr
     *            Jahr
  "
"<fim_prefix>package com.mavenr.service;

import com.mavenr.entity.BaseConfig;
import com.mavenr.entity.Table;

import java.util.List;
import java.util.Properties;

/**<fim_suffix>
public interface DataInfoInterface {

    /**
     * 初始化信息
     * @param baseConfig
     */
    void init(BaseConfig baseConfig) throws Exception;

    /**
     * 表信息获取
     * @param baseConfig 参数信息
     * @return
     */
    List<Table> columns(BaseConfig baseConfig) throws Exception;
}
<fim_middle>","
 * @author mavenr
 * @Classname DataInfoInterface
 * @Description 数据信息接口
 * @Date 2021/12/20 17:04
 */","
 * 数据信息接口
 * @author zongwei
 * @date 17/2/27
 */"
"<fim_prefix>package com.mavenr.service;

import com.mavenr.entity.BaseConfig;
import com.mavenr.entity.Table;

import java.util.List;
import java.util.Properties;

/**
 * @author mavenr
 * @Classname DataInfoInterface
 * @Description 数据信息接口
 * @Date 2021/12/20 17:04
 */
public interface DataInfoInterface {

    /**<fim_suffix>
    void init(BaseConfig baseConfig) throws Exception;

    /**
     * 表信息获取
     * @param baseConfig 参数信息
     * @return
     */
    List<Table> columns(BaseConfig baseConfig) throws Exception;
}
<fim_middle>","
     * 初始化信息
     * @param baseConfig
     */","
     * 初始化
     * @param baseConfig 参数信息
    "
"<fim_prefix>age com.mavenr.service;

import com.mavenr.entity.BaseConfig;
import com.mavenr.entity.Table;

import java.util.List;
import java.util.Properties;

/**
 * @author mavenr
 * @Classname DataInfoInterface
 * @Description 数据信息接口
 * @Date 2021/12/20 17:04
 */
public interface DataInfoInterface {

    /**
     * 初始化信息
     * @param baseConfig
     */
    void init(BaseConfig baseConfig) throws Exception;

    /**<fim_suffix>
    List<Table> columns(BaseConfig baseConfig) throws Exception;
}
<fim_middle>","
     * 表信息获取
     * @param baseConfig 参数信息
     * @return
     */","
     * 获取表信息
     * @param baseConfig
     * @return
     * @throws"
"<fim_prefix>package com.gxitsky.common.enumclass;

/**<fim_suffix>
public enum Events {
    E1, E2
}
<fim_middle>","
 * 事件枚举
 */","
 * @author gxing"
"<fim_prefix>package osmo.tester.model.dataflow.serialization;

/**<fim_suffix>
public class IntegerDeserializer implements Deserializer<Integer> {
  @Override
  public Integer deserialize(String serialized) {
    return Integer.parseInt(serialized);
  }
}
<fim_middle>", @author Teemu Kanstren */,"
 * @author <NAME>
 */"
"<fim_prefix>package unstudio.chinacraft.client.model;

/**<fim_suffix>
public interface ModelExtendBlock {
    void render(float f5);
}
<fim_middle>","
 * 简易的渲染接口
 */","
 * Created by luoqii on 16"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.service;
<fim_middle>","
 * <p>
 *  Serviceのサポートクラスを提供します。
 * </p>
 */","
 * @author masaki.kamachi
 */"
"<fim_prefix>package hafta4.gun2.statics;

import hafta4.gun2.soyutlama.Kare;

public class TestStatic {

    public static void main(String[] args) {
        /**<fim_suffix>
        double d = StaticSinif.oran;
        System.out.println(d);
        System.out.println(StaticSinif.oran);

        StaticSinif.ekranaYazdir(new Kare(5, ""mavi"", true));

        int topla = StaticSinif.topla(new int[]{1, 2, 3});
        System.out.println(topla);

    }

}
<fim_middle>","
         * static metot ve özelliklere ise sınıftan nesne oluşturulmadan da
         * erişilebilir.
         */","
         * Static siniflerin kullanımı
         */"
"<fim_prefix>/**<fim_suffix>
package cn.nukkit.math;<fim_middle>","
 * 一些数学工具类.
 * <p>
 * Some math tool classes.
 */","
 * @author <NAME>
 */"
"<fim_prefix>package br.univali.portugol.nucleo.asa;

/**<fim_suffix>
public final class NoDeclaracaoVetor extends NoDeclaracaoInicializavel
{
    private final NoExpressao tamanho;

    /**
     *
     * @param nome o nome deste vetor.
     *
     * @param tipoDado o tipo de dado deste vetor.
     *
     * @param tamanho a expressão que define o número de elementos deste vetor.
     *
     * @param constante define se os valores detse vetor serão constantes. Se<fim_middle>","
 * Representa a declaração de um vetor no código fonte.
 * <p>
 * Um vetor é uma estrutura de dados que armazena vários valores, de forma
 * semelhante a uma lista. No Portugol, os vetores sao declarados colocando o
 * símbolo ""[]"" após o nome da variável. É possível declarar vetores de várias
 * formas diferentes:
 *
 * <code><pre>
 *
 *       funcao exemploDeclaracaoVetor()
 *       {
 *            /*
 *             * Declara um vetor com capacidade para 5 elementos. Este vetor não possui
 *             * inicilização, logo, seus valores estarão zerados.
 *             *&#47;
 *            inteiro vetA[5]
 *
 *            /*
 *             * Declara um vetor com capacidade para 5 elementos. Este vetor será inicializado
 *             * com os valores entre chaves ""{}"".
 *             *&#47;
 *            inteiro vetB[5] = {1, 2, 3, 4, 5}
 *
 *             /*
 *             * Declara um vetor sem definir seu tamanho. Este tipo de declaração obriga
 *             * que o vetor seja inicializado. O tamaho do vetor será determinado pela
 *             * inicilização. Neste caso o vetor terá capacidade para 8 elementos.
 *             *&#47;
 *            inteiro vetC[] = {8, 7, 6, 5, 4, 3, 2, 1}
 *
 *       }
 *
 * </pre></code>
 *
 * @author Luiz Fernando Noschang
 * @version 1.0
 */","
 * Representa um vetor.
 *
 * @author <NAME>
 */"
"<fim_prefix>param constante define se os valores detse vetor serão constantes. Se
     * <code>true</code> os valores não poderão ser alterados após a
     * inicialização do vetor.
     *
     * @since 1.0
     */
    public NoDeclaracaoVetor(String nome, TipoDado tipoDado, NoExpressao tamanho, boolean constante)
    {
        super(nome, tipoDado, constante);
        this.tamanho = tamanho;
    }

    /**<fim_suffix>
    public NoExpressao getTamanho()
    {
        return tamanho;
    }

    /**
     * {@inheritDoc }
     */
    @Override
    public Object aceitar(VisitanteASA visitante) throws ExcecaoVisitaASA
    {
        return visitante.visitar(this);
    }
}
<fim_middle>","
     * Obtém a expressão que define o tamanho, deste vetor, isto é, o número de
     * elementos que ele terá.
     *
     * @return a expressão que define o tamanho deste vetor.
     *
     * @since 1.0
     */","
     * {@inheritDoc }
     */"
"<fim_prefix>erá determinado pela
 *             * inicilização. Neste caso o vetor terá capacidade para 8 elementos.
 *             *&#47;
 *            inteiro vetC[] = {8, 7, 6, 5, 4, 3, 2, 1}
 *
 *       }
 *
 * </pre></code>
 *
 * @author Luiz Fernando Noschang
 * @version 1.0
 */
public final class NoDeclaracaoVetor extends NoDeclaracaoInicializavel
{
    private final NoExpressao tamanho;

    /**<fim_suffix>
    public NoDeclaracaoVetor(String nome, TipoDado tipoDado, NoExpressao tamanho, boolean constante)
    {
        super(nome, tipoDado, constante);
        this.tamanho = tamanho;
    }

    /**
     * Obtém a expressão que define o tamanho, deste vetor, isto é, o número de
     * elementos que ele terá.
     *
     * @return a expressão que define o tamanho deste vetor.
     *
     * @since 1<fim_middle>","
     *
     * @param nome o nome deste vetor.
     *
     * @param tipoDado o tipo de dado deste vetor.
     *
     * @param tamanho a expressão que define o número de elementos deste vetor.
     *
     * @param constante define se os valores detse vetor serão constantes. Se
     * <code>true</code> os valores não poderão ser alterados após a
     * inicialização do vetor.
     *
     * @since 1.0
     */","
     * Construtor da classe.
     *
     * @param nome o nome do vetor.
     * @param tipoDado o tipo de dado do vetor.
     * @param tamanho a expressão que define o tamanho deste vetor.
     * @param constante se o vetor é constante ou não.
     *
     * @since 1.0
     */"
"<fim_prefix>package gui.tipos;

/**<fim_suffix>
public enum TipoVista {

	/**
	 * Vista de la interfaz para la Practica 1.
	 */
	PRACTICA1,
	/**
	 * Vista de la interfaz para la Practica 2.
	 */
	PRACTICA2,
	/**
	 * Vista de la interfaz para la Practica 3.
	 */
	PRACTICA3;	
}
<fim_middle>","
 * Enumerado que define los tipos de vista de la interfaz para las distintas practicas desarrolladas.
 * 
 * @author Grupo20
 */","
 * Enumeración que contiene los tipos de vistas de la interfaz.
 * 
 * @author <NAME>
 * @author <NAME>
 * @"
"<fim_prefix>package gui.tipos;

/**
 * Enumerado que define los tipos de vista de la interfaz para las distintas practicas desarrolladas.
 * 
 * @author Grupo20
 */
public enum TipoVista {

	/**<fim_suffix>
	PRACTICA1,
	/**
	 * Vista de la interfaz para la Practica 2.
	 */
	PRACTICA2,
	/**
	 * Vista de la interfaz para la Practica 3.
	 */
	PRACTICA3;	
}
<fim_middle>","
	 * Vista de la interfaz para la Practica 1.
	 */","
	 * Vista de la interfaz para la Practica 1.
	 */"
"<fim_prefix>package gui.tipos;

/**
 * Enumerado que define los tipos de vista de la interfaz para las distintas practicas desarrolladas.
 * 
 * @author Grupo20
 */
public enum TipoVista {

	/**
	 * Vista de la interfaz para la Practica 1.
	 */
	PRACTICA1,
	/**<fim_suffix>
	PRACTICA2,
	/**
	 * Vista de la interfaz para la Practica 3.
	 */
	PRACTICA3;	
}
<fim_middle>","
	 * Vista de la interfaz para la Practica 2.
	 */","
	 * Vista de la interfaz para la Practica 2.
	 */"
"<fim_prefix>package gui.tipos;

/**
 * Enumerado que define los tipos de vista de la interfaz para las distintas practicas desarrolladas.
 * 
 * @author Grupo20
 */
public enum TipoVista {

	/**
	 * Vista de la interfaz para la Practica 1.
	 */
	PRACTICA1,
	/**
	 * Vista de la interfaz para la Practica 2.
	 */
	PRACTICA2,
	/**<fim_suffix>
	PRACTICA3;	
}
<fim_middle>","
	 * Vista de la interfaz para la Practica 3.
	 */","
	 * Vista de la interfaz para la Practica 3.
	 */"
"<fim_prefix>package view.Parametres_View;

import javax.swing.JOptionPane;

public class OverInderSize_Exception extends Exception{

	private static final long serialVersionUID = 1L;

	/**<fim_suffix>

	public OverInderSize_Exception(String over,String inder, int i){
	if(i == 1)
		JOptionPane.showMessageDialog(null,over);
	if(i == -1)
		JOptionPane.showMessageDialog(null,inder);
	}
}
<fim_middle>",********************** le constructeur ***************************/,"
	 * @param over
	"
"<fim_prefix>package fr.inserm.server.bean;

/**<fim_suffix>
public enum FunctionalObjectType {

	file, site, sample, table, field
}
<fim_middle>","*
 * enum d objet fonctionnel.
 * 
 * @author nicolas
 * 
 */","
 * 
 * @author florent
 *
 */"
"<fim_prefix>package com.joe.utils.function;

/**<fim_suffix>
public interface Task {

    /**
     * 执行任务
     * 
     * @throws Throwable
     *             异常
     */
    void run() throws Throwable;
}
<fim_middle>","
 * 可执行的任务（可以抛异常）
 * 
 * @author JoeKerouac
 * @version $Id: joe, v 0.1 2018年12月18日 21:22 JoeKerouac Exp $
 */","
 * 任务接口
 * 
 * @author joe
 *
 */"
"<fim_prefix>package com.joe.utils.function;

/**
 * 可执行的任务（可以抛异常）
 * 
 * @author JoeKerouac
 * @version $Id: joe, v 0.1 2018年12月18日 21:22 JoeKerouac Exp $
 */
public interface Task {

    /**<fim_suffix>
    void run() throws Throwable;
}
<fim_middle>","
     * 执行任务
     * 
     * @throws Throwable
     *             异常
     */","
     * 执行任务
     * 
     * @throws Throwable
     */"
"<fim_prefix>package org.openyu.mix.activity.vo.target;

import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.sun.xml.bind.AnyTypeAdapter;

/**<fim_suffix>
@XmlJavaTypeAdapter(AnyTypeAdapter.class)
public interface VipTargetActivity extends TargetActivity
{
	String KEY = VipTargetActivity.class.getName();

}
<fim_middle>","
 * vip目標活動
 */","
 * 目标活动-会员
"
"<fim_prefix>package zip.fediverso.seu.diario_classe_v1.negocio.diario;

/**<fim_suffix>
public class DiarioExcecao extends RuntimeException {

    /**
     * Constrói uma nova exceção com a mensagem de erro e a causa fornecidas.
     *
     * @param mensagem a mensagem de erro que descreve a exceção
     * @param causa a causa da exceção, pode ser nulo se a causa não for conhecida ou relevante
     */
    public DiarioExcecao(String mensagem, Throwable causa) {
        super(mensagem, causa);
<fim_middle>","
 * Uma exceção personalizada para representar erros relacionados a operações com diários.
 * Esta exceção estende RuntimeException, o que significa que é uma exceção não verificada.
 */","
 * Exceção lançada quando ocorre um erro no acesso ao banco de dados.
 *
 * @author <NAME>
 * @since 1.0
 */"
"<fim_prefix>package zip.fediverso.seu.diario_classe_v1.negocio.diario;

/**
 * Uma exceção personalizada para representar erros relacionados a operações com diários.
 * Esta exceção estende RuntimeException, o que significa que é uma exceção não verificada.
 */
public class DiarioExcecao extends RuntimeException {

    /**<fim_suffix>
    public DiarioExcecao(String mensagem, Throwable causa) {
        super(mensagem, causa);
    }
}
<fim_middle>","
     * Constrói uma nova exceção com a mensagem de erro e a causa fornecidas.
     *
     * @param mensagem a mensagem de erro que descreve a exceção
     * @param causa a causa da exceção, pode ser nulo se a causa não for conhecida ou relevante
     */","
     * Construtor padrão.
     */"
"<fim_prefix>package com.youai.aistore;

/**<fim_suffix>
public interface BaseLeftClickListener {

	/**
	 * 点击监听
	 */
	public void onTopLeftClickListener();
}
<fim_middle>","
 * 基本页 左上点击监听
 * 
 * @author dxv
 * 
 */","
 * @author zhangmingfei
 * @date 2017/12/19
 */"
"<fim_prefix>package com.youai.aistore;

/**
 * 基本页 左上点击监听
 * 
 * @author dxv
 * 
 */
public interface BaseLeftClickListener {

	/**<fim_suffix>
	public void onTopLeftClickListener();
}
<fim_middle>","
	 * 点击监听
	 */","
	 * 左上点击事件"
"<fim_prefix>package helper.frame.bo;

import lombok.Data;

import javax.swing.*;
import java.awt.*;

/**<fim_suffix>
@Data
public class LocationBO {
	private JLabel jLabel;
	private GridBagConstraints grid;
}
<fim_middle>","
 * 组件和布局
 */","
 * @author liufeng"
"<fim_prefix>package org.iesgrancapitan.PROGR.ejercicios.ej00secuenciales;

/*<fim_suffix>

// En java, el nombre de un archivo fuente debe coincidir con el nombre de la clase que contiene,
// por lo que este archivo debería llamarse ""SALUDAR.java.""

import java.util.Scanner;

public class Ej01Saludar {

  // ################################################################################
  // Escribir un programa que pregunte al usuario su nombre, y luego lo salude.
  // ########################<fim_middle>"," Este codigo ha sido generado por el modulo psexport 20180125-l64 de PSeInt.
Es posible que el codigo generado no sea completamente correcto. Si encuentra
errores por favor reportelos en el foro (http://pseint.sourceforge.net). */","*
 * Ejercicio 01:
 * 
 * Escribir un programa que pregunte al usuario su nombre, y luego lo salude.
 * 
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix>d.newbee.mall.config;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import org.apache.commons.text.StringEscapeUtils;
import org.springframework.boot.jackson.JsonComponent;

import java.io.IOException;

/**
 * 添加全局的json反序列化设置
 */
@JsonComponent
public class GlobalJsonDeserializer {

    /**<fim_suffix>
    public static class StringDeserializer extends JsonDeserializer<String> {

        @Override
        public String deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
            // 防止xss攻击
            return StringEscapeUtils.escapeHtml4(jsonParser.getValueAsString());
        }
    }
}
<fim_middle>","
     * 字符串反序列化器
     * 过滤特殊字符，解决 XSS 攻击
     */","
     * 字符串反序列化
     */"
"<fim_prefix>package com.eyesmoons.lineage.neo4j.service;

import java.util.List;

/**<fim_suffix>
public interface RelationshipService {

    /**
     * 批量合并relation 以多对一的方式合并去建立关系 table|field -(relation_input)> relation
     * @param starts 开始节点的列表
     * @param end    结束节点
     */
    void mergeRelRelationInputs(List<String> starts, String end);
}
<fim_middle>","
 * 关联创建
 */","
 * Created by vishna"
"<fim_prefix>package com.eyesmoons.lineage.neo4j.service;

import java.util.List;

/**
 * 关联创建
 */
public interface RelationshipService {

    /**<fim_suffix>
    void mergeRelRelationInputs(List<String> starts, String end);
}
<fim_middle>","
     * 批量合并relation 以多对一的方式合并去建立关系 table|field -(relation_input)> relation
     * @param starts 开始节点的列表
     * @param end    结束节点
     */","
     * 合并关系输入
     * @param starts
     * @param end
     */"
"<fim_prefix>package regeln;

import lib.Karte;
import lib.Model;

public interface Control {
	
	/**
	 * Bestimmt den Sieger eines Spiels
	 * @param model
	 * @return SpielerID des Siegers
	 */
	public int sieger(Model m, int erster);
	
	/**<fim_suffix>
	public boolean erlaubt(Model m, int ID);
	
	/**
	 * Bestimmt einen eventuellen Mitspieler
	 * @param model
	 * @return mitspieler oder null
	 */
	public int mitspieler(Model m);
	
	/**
	 * Bestimmt, ob eine Karte Trumpf ist
	 * @param wert
	 * @param farbe
	 * @return
	 */
	public boolean istTrumpf(Karte.wert wert, Karte.farbe farbe);

	/**
	 * Errechnet die Laufenden der Spieler.
	 * @param spieler
	 * @p<fim_middle>","
	 * Bestimmt, ob ein Spielzug erlaubt ist und gibt das Ergebnis zur√ºck
	 * @param model
	 * @param ID
	 * @return erlaubt
	 */","
	 * Bestimmt, ob ein Spieler eine Karte spielen darf
	 * @param model
	 * @param ID
	 * @return
	 */"
"<fim_prefix>package regeln;

import lib.Karte;
import lib.Model;

public interface Control {
	
	/**
	 * Bestimmt den Sieger eines Spiels
	 * @param model
	 * @return SpielerID des Siegers
	 */
	public int sieger(Model m, int erster);
	
	/**
	 * Bestimmt, ob ein Spielzug erlaubt ist und gibt das Ergebnis zur√ºck
	 * @param model
	 * @param ID
	 * @return erlaubt
	 */
	public boolean erlaubt(Model m, int ID);
	
	/**<fim_suffix>
	public int mitspieler(Model m);
	
	/**
	 * Bestimmt, ob eine Karte Trumpf ist
	 * @param wert
	 * @param farbe
	 * @return
	 */
	public boolean istTrumpf(Karte.wert wert, Karte.farbe farbe);

	/**
	 * Errechnet die Laufenden der Spieler.
	 * @param spieler
	 * @param mitspieler
	 * @param model
	 * @return
	 */
	public int laufende(int spieler, int mitspieler, Model model);

}
<fim_middle>","
	 * Bestimmt einen eventuellen Mitspieler
	 * @param model
	 * @return mitspieler oder null
	 */","
	 * Bestimmt, ob ein Spielzug erlaubt ist und gibt das Ergebnis zur√ºck
	 * @param model
	"
"<fim_prefix>is zur√ºck
	 * @param model
	 * @param ID
	 * @return erlaubt
	 */
	public boolean erlaubt(Model m, int ID);
	
	/**
	 * Bestimmt einen eventuellen Mitspieler
	 * @param model
	 * @return mitspieler oder null
	 */
	public int mitspieler(Model m);
	
	/**
	 * Bestimmt, ob eine Karte Trumpf ist
	 * @param wert
	 * @param farbe
	 * @return
	 */
	public boolean istTrumpf(Karte.wert wert, Karte.farbe farbe);

	/**<fim_suffix>
	public int laufende(int spieler, int mitspieler, Model model);

}
<fim_middle>","
	 * Errechnet die Laufenden der Spieler.
	 * @param spieler
	 * @param mitspieler
	 * @param model
	 * @return
	 */","
	 * Bestimmt, ob eine Karte Karo erlaubt ist
	 * @param wert
	 * @param farbe
	 * @return
	 */"
"<fim_prefix>ram model
	 * @return SpielerID des Siegers
	 */
	public int sieger(Model m, int erster);
	
	/**
	 * Bestimmt, ob ein Spielzug erlaubt ist und gibt das Ergebnis zur√ºck
	 * @param model
	 * @param ID
	 * @return erlaubt
	 */
	public boolean erlaubt(Model m, int ID);
	
	/**
	 * Bestimmt einen eventuellen Mitspieler
	 * @param model
	 * @return mitspieler oder null
	 */
	public int mitspieler(Model m);
	
	/**<fim_suffix>
	public boolean istTrumpf(Karte.wert wert, Karte.farbe farbe);

	/**
	 * Errechnet die Laufenden der Spieler.
	 * @param spieler
	 * @param mitspieler
	 * @param model
	 * @return
	 */
	public int laufende(int spieler, int mitspieler, Model model);

}
<fim_middle>","
	 * Bestimmt, ob eine Karte Trumpf ist
	 * @param wert
	 * @param farbe
	 * @return
	 */","
	 * Bestimmt, ob die Karte eine Trumpf ist
	 * @param wert
	 * @param farbe
	 * @return
	"
"<fim_prefix>package regeln;

import lib.Karte;
import lib.Model;

public interface Control {
	
	/**<fim_suffix>
	public int sieger(Model m, int erster);
	
	/**
	 * Bestimmt, ob ein Spielzug erlaubt ist und gibt das Ergebnis zur√ºck
	 * @param model
	 * @param ID
	 * @return erlaubt
	 */
	public boolean erlaubt(Model m, int ID);
	
	/**
	 * Bestimmt einen eventuellen Mitspieler
	 * @param model
	 * @return mitspieler oder null
	 */
	public int mitspieler(Model m);
	
	/**
	 * Bestimmt, ob eine Karte Trumpf ist
	 * @para<fim_middle>","
	 * Bestimmt den Sieger eines Spiels
	 * @param model
	 * @return SpielerID des Siegers
	 */","
	 * Bestimmt, ob ein Spielzug erlaubt ist und gibt das Ergebnis zur√ºck
	 * @param model"
"<fim_prefix>/**<fim_suffix>
package net.javafxchina.xmdp.addon.entrys;<fim_middle>","
 * 默认的入口定义，包括桌面图标，按钮等
 * @author Victor
 *
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package cn.yitulin.ci.infrastructure.model;

import lombok.Builder;
import lombok.Data;

import java.io.Serializable;

@Data
@Builder
public class ParameterDesc implements Serializable {

    private static final long serialVersionUID = 2646699746127900426L;
    /**<fim_suffix>
    private String name;

    /**
     * 类型
     */
    private Class<?> type;

    /**
     * 默认值
     */
    private Object defaultValue;

}
<fim_middle>","
     * 名字
     */","
     * 参数名
     */"
"<fim_prefix>package cn.yitulin.ci.infrastructure.model;

import lombok.Builder;
import lombok.Data;

import java.io.Serializable;

@Data
@Builder
public class ParameterDesc implements Serializable {

    private static final long serialVersionUID = 2646699746127900426L;
    /**
     * 名字
     */
    private String name;

    /**<fim_suffix>
    private Class<?> type;

    /**
     * 默认值
     */
    private Object defaultValue;

}
<fim_middle>","
     * 类型
     */","
     * 类型
     */"
"<fim_prefix>package cn.yitulin.ci.infrastructure.model;

import lombok.Builder;
import lombok.Data;

import java.io.Serializable;

@Data
@Builder
public class ParameterDesc implements Serializable {

    private static final long serialVersionUID = 2646699746127900426L;
    /**
     * 名字
     */
    private String name;

    /**
     * 类型
     */
    private Class<?> type;

    /**<fim_suffix>
    private Object defaultValue;

}
<fim_middle>","
     * 默认值
     */","
     * 默认值
     */"
"<fim_prefix>package demo.scriptCore.cryptoCoin.service;

import demo.autoTestBase.testEvent.pojo.bo.TestEventBO;
import demo.scriptCore.cryptoCoin.pojo.result.CryptoCoinDailyDataResult;
import finance.cryptoCoin.pojo.dto.CryptoCoinDailyDataQueryDTO;

public interface CryptoCompareService {

	/**<fim_suffix>
	CryptoCoinDailyDataResult cryptoCoinDailyDataAPI(TestEventBO tbo, CryptoCoinDailyDataQueryDTO paramDTO);

}
<fim_middle>","
	 * 
	 * 每次调用, 仅获取一个币种法币对的数据
	 * @param te
	 * @param reportDTO
	 * @return
	 */","
	 * 币安日K线数据
	 * @param tbo
	 * @param paramDTO
	 * @return
	 */"
"<fim_prefix>package uk.co.bbr.services.framework.mixins;

import com.github.slugify.Slugify;

public interface SlugTools {
    /**<fim_suffix>
    default String slugify(String input) {
        final Slugify slg = Slugify.builder().build();
        String slug = slg.slugify(input);
        if (slug.length() > 50) {
            slug = slug.substring(0, 50);
        }
        return slug;
    }
}
<fim_middle>","
     * https://github.com/slugify/slugify
     */","
     * Slugify a string.
     *
    "
"<fim_prefix>package com.chuidiang.examples.springboot_actuator;

/**<fim_suffix>
public class Pepe {
}
<fim_middle>","
 * @author Chuidiang
 * date 16/12/2023
 */","
 * @author chuidiang
 * @create 2021-03-18 21"
"<fim_prefix>package com.mz.common.translation.annotation;

import com.fasterxml.jackson.annotation.JacksonAnnotationsInside;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.mz.common.translation.core.handler.TranslationHandler;

import java.lang.annotation.*;

/**<fim_suffix>
@Inherited
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.FIELD, ElementType.METHOD})
@Documented
@JacksonAnnotationsInside
@JsonSerialize(using = TranslationHandler.class)
public @interface Translation {

    /**
     * 类型 (需与实现类上的 {@link TranslationType} 注解type对应)
     * <p>
     * 默认取当前字段的值 如果设置了 @{@link Translation#mapper()} 则取映射字段的值
     */
    String type();

    /**
     * 映射字段 (如果不为空则取此字段的<fim_middle>","
 * 通用翻译注解
 *
 * @author Lion Li
 */","
 * 翻译注解
 *
 * @author mz
 * @date"
"<fim_prefix>*
 * @author Lion Li
 */
@Inherited
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.FIELD, ElementType.METHOD})
@Documented
@JacksonAnnotationsInside
@JsonSerialize(using = TranslationHandler.class)
public @interface Translation {

    /**
     * 类型 (需与实现类上的 {@link TranslationType} 注解type对应)
     * <p>
     * 默认取当前字段的值 如果设置了 @{@link Translation#mapper()} 则取映射字段的值
     */
    String type();

    /**<fim_suffix>
    String mapper() default """";

    /**
     * 其他条件 例如: 字典type(sys_user_sex)
     */
    String other() default """";

}
<fim_middle>","
     * 映射字段 (如果不为空则取此字段的值)
     */","
     * 映射字段
     * <p>
     *"
"<fim_prefix>rxml.jackson.databind.annotation.JsonSerialize;
import com.mz.common.translation.core.handler.TranslationHandler;

import java.lang.annotation.*;

/**
 * 通用翻译注解
 *
 * @author Lion Li
 */
@Inherited
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.FIELD, ElementType.METHOD})
@Documented
@JacksonAnnotationsInside
@JsonSerialize(using = TranslationHandler.class)
public @interface Translation {

    /**<fim_suffix>
    String type();

    /**
     * 映射字段 (如果不为空则取此字段的值)
     */
    String mapper() default """";

    /**
     * 其他条件 例如: 字典type(sys_user_sex)
     */
    String other() default """";

}
<fim_middle>","
     * 类型 (需与实现类上的 {@link TranslationType} 注解type对应)
     * <p>
     * 默认取当前字段的值 如果设置了 @{@link Translation#mapper()} 则取映射字段的值
     */","
     * 翻译类型
     */"
"<fim_prefix>get({ElementType.FIELD, ElementType.METHOD})
@Documented
@JacksonAnnotationsInside
@JsonSerialize(using = TranslationHandler.class)
public @interface Translation {

    /**
     * 类型 (需与实现类上的 {@link TranslationType} 注解type对应)
     * <p>
     * 默认取当前字段的值 如果设置了 @{@link Translation#mapper()} 则取映射字段的值
     */
    String type();

    /**
     * 映射字段 (如果不为空则取此字段的值)
     */
    String mapper() default """";

    /**<fim_suffix>
    String other() default """";

}
<fim_middle>","
     * 其他条件 例如: 字典type(sys_user_sex)
     */","
     * 其它字段 (如果不为空则取此字段的值)
     */"
"<fim_prefix>package com.k4m.dx.tcontrol.util;


/**<fim_suffix>
public class XmlParsingUtil {

}
<fim_middle>","
* @author 박태혁
* @see
* 
*      <pre>
* == 개정이력(Modification Information) ==
*
*   수정일       수정자           수정내용
*  -------     --------    ---------------------------
*  2018.04.23   박태혁 최초 생성
*      </pre>
*/","
 * Created by k4m on 4/16/2015.
 */"
"<fim_prefix>package com.dubbo.debug.service;

import com.dubbo.debug.param.DubboDebugParam;

/**<fim_suffix>
public interface DubboDebugService {

    /**
     * 调用
     * 
     * @param param
     *            入参
     * @return 返回结果
     */
    Object invoke(DubboDebugParam param);

}
<fim_middle>","
 * dubbo调试服务接口
 *
 * @author hkb
 * @date 2019-09-02
 */","
 * dubbo调试服务
 * 
 * @author wangyong
 */"
"<fim_prefix>package com.dubbo.debug.service;

import com.dubbo.debug.param.DubboDebugParam;

/**
 * dubbo调试服务接口
 *
 * @author hkb
 * @date 2019-09-02
 */
public interface DubboDebugService {

    /**<fim_suffix>
    Object invoke(DubboDebugParam param);

}
<fim_middle>","
     * 调用
     * 
     * @param param
     *            入参
     * @return 返回结果
     */","
     * 调用dubbo服务
     *
     * @param param
     * @return
     */"
"<fim_prefix>package br.com.zalem.ymir.client.android.entity.data.query.select;

/**<fim_suffix>
public interface IRestrictionStatement extends ITerminalStatement {
	
	/**
	 * Aplica o operador lógico <code>e</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link IConditionStatement} para definir a próxima restrição da query.
	 */
	IConditionStatement and();

	/**
	 * Aplica o operador lógico <code>ou</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link<fim_middle>","
 * Instrução de restrição de uma query de seleção de dados.
 * Permite a continuidade da condição através de operadores lógicos ou a finalização da query.
 *
 * @author Thiago Gesser
 */","
 * Interface que representa uma restrição de consulta.
 * 
 * @author <NAME>
 * @since 1.0.0
 * @version 1.0.0
 */"
"<fim_prefix>package br.com.zalem.ymir.client.android.entity.data.query.select;

/**
 * Instrução de restrição de uma query de seleção de dados.
 * Permite a continuidade da condição através de operadores lógicos ou a finalização da query.
 *
 * @author Thiago Gesser
 */
public interface IRestrictionStatement extends ITerminalStatement {
	
	/**<fim_suffix>
	IConditionStatement and();

	/**
	 * Aplica o operador lógico <code>ou</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link IConditionStatement} para definir a próxima restrição da query.
	 */
	IConditionStatement or();

	/**
	 * Fecha um escopo na query, fazendo com que as restrições que estejam dentro dele sejam consideradas de maneira isolada
	 * das demais restrições.<br>
	 * <fim_middle>","
	 * Aplica o operador lógico <code>e</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link IConditionStatement} para definir a próxima restrição da query.
	 */","
	 * Aplica o operador lógico <code>e</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link IConditionStatement} para definir a próxima restrição da query."
"<fim_prefix>o <code>e</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link IConditionStatement} para definir a próxima restrição da query.
	 */
	IConditionStatement and();

	/**
	 * Aplica o operador lógico <code>ou</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link IConditionStatement} para definir a próxima restrição da query.
	 */
	IConditionStatement or();

	/**<fim_suffix>
	IRestrictionStatement c();
}
<fim_middle>","
	 * Fecha um escopo na query, fazendo com que as restrições que estejam dentro dele sejam consideradas de maneira isolada
	 * das demais restrições.<br>
	 * @return o IRestrictionStatement com os métodos disponíveis para continuar a construção da query.
	 */","
	 * Aplica o operador lógico <code>não</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link IConditionStatement} para definir a próxima restrição da query.
	 */"
"<fim_prefix> a continuidade da condição através de operadores lógicos ou a finalização da query.
 *
 * @author Thiago Gesser
 */
public interface IRestrictionStatement extends ITerminalStatement {
	
	/**
	 * Aplica o operador lógico <code>e</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link IConditionStatement} para definir a próxima restrição da query.
	 */
	IConditionStatement and();

	/**<fim_suffix>
	IConditionStatement or();

	/**
	 * Fecha um escopo na query, fazendo com que as restrições que estejam dentro dele sejam consideradas de maneira isolada
	 * das demais restrições.<br>
	 * @return o IRestrictionStatement com os métodos disponíveis para continuar a construção da query.
	 */
	IRestrictionStatement c();
}
<fim_middle>","
	 * Aplica o operador lógico <code>ou</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link IConditionStatement} para definir a próxima restrição da query.
	 */","
	 * Aplica o operador lógico <code>ou</code> entre a restrição atual e a próxima da query.
	 * 
	 * @return o {@link IConditionStatement} para definir a próxima restrição da query.
	 */"
"<fim_prefix>package tarea3;

public class NodoCombate extends Nodo {
    private Personaje enemigo;

    public NodoCombate(Integer id) {
        super(id);
        enemigo = new Personaje(true);
    }

    /**<fim_suffix>
    void interactuar(Jugador jugador) {
        jugador.combate(enemigo);
    }

    // Todos los getters
    Personaje getEnemigo() {
        return this.enemigo;
    }
    
    // Todos los setters
    void setEnemigo(Personaje enemigo) {
        this.enemigo = enemigo;
    }
}
<fim_middle>","
     * Interactua con el nodo combate: Pelea con el enemigo del nivel
     * 
     * @param jugador: Jugador que interactuara
     * 
     * @return void
     */","
     * Método que interactúa con el jugador
     * @param jugador
     */"
"<fim_prefix>package com.moxtar_1s.android.disease_charts.pattern;

/**<fim_suffix>
public interface Observer {
    /**
     * 简介：初始化控件的方法。
     * 调用：{@link Subject#addObserver(Observer)}
     */
    void initialize();

    /**
     * 简介：更新控件中数据内容的方法。
     * 调用：{@link Subject#notifyAllObservers()}
     */
    void update(Subject subject, Object data);
}
<fim_middle>","
 * @author MoXtar
 * 简介：观测{@link Subject}的观测者类接口。
 * 功能：用于将数据通过某种方法（图表等）表现出来，并能对其进行更新。
 * 注意：请参阅“观察者模式”的相关文献并参照相关例子来实现这个接口。
 * <p>
 * 如果想实现自己的Observer，按顺序做：
 * 1. 这个Observer应当被用于绘制某些控件（图表，TextView或ListView等），
 *    故其构造方法的参数以及成员变量应含有这些控件的引用。
 * 2. 实现{@link #initialize()}方法，完成控件的初始化，例如图表的样式设定等。
 * 3. 实现{@link #update(Subject, Object)}方法，在数据更新时重绘控件中的数据内容。
 * 4. 在Fragment或Activity中创建实例，用构造方法来绑定控件。
 */","
 * 简介：观察者接口。
 *
 * @author moxtar_1s
 */"
"<fim_prefix>果想实现自己的Observer，按顺序做：
 * 1. 这个Observer应当被用于绘制某些控件（图表，TextView或ListView等），
 *    故其构造方法的参数以及成员变量应含有这些控件的引用。
 * 2. 实现{@link #initialize()}方法，完成控件的初始化，例如图表的样式设定等。
 * 3. 实现{@link #update(Subject, Object)}方法，在数据更新时重绘控件中的数据内容。
 * 4. 在Fragment或Activity中创建实例，用构造方法来绑定控件。
 */
public interface Observer {
    /**
     * 简介：初始化控件的方法。
     * 调用：{@link Subject#addObserver(Observer)}
     */
    void initialize();

    /**<fim_suffix>
    void update(Subject subject, Object data);
}
<fim_middle>","
     * 简介：更新控件中数据内容的方法。
     * 调用：{@link Subject#notifyAllObservers()}
     */","
     * 简介：更新控件的方法。
     * 调用：{@link Subject#notifyObservers(Object)}
     */"
"<fim_prefix>@link Subject}的观测者类接口。
 * 功能：用于将数据通过某种方法（图表等）表现出来，并能对其进行更新。
 * 注意：请参阅“观察者模式”的相关文献并参照相关例子来实现这个接口。
 * <p>
 * 如果想实现自己的Observer，按顺序做：
 * 1. 这个Observer应当被用于绘制某些控件（图表，TextView或ListView等），
 *    故其构造方法的参数以及成员变量应含有这些控件的引用。
 * 2. 实现{@link #initialize()}方法，完成控件的初始化，例如图表的样式设定等。
 * 3. 实现{@link #update(Subject, Object)}方法，在数据更新时重绘控件中的数据内容。
 * 4. 在Fragment或Activity中创建实例，用构造方法来绑定控件。
 */
public interface Observer {
    /**<fim_suffix>
    void initialize();

    /**
     * 简介：更新控件中数据内容的方法。
     * 调用：{@link Subject#notifyAllObservers()}
     */
    void update(Subject subject, Object data);
}
<fim_middle>","
     * 简介：初始化控件的方法。
     * 调用：{@link Subject#addObserver(Observer)}
     */","
     * 简介：初始化控件的方法。
     * 调用：{@link Subject#registerObserver(Observer)}
     */"
"<fim_prefix>package com.yll.simple;

/**<fim_suffix>
public class DateUtil {

}
<fim_middle>","
 * 这里提供简单的date函数的使用
 * 
 * @author Yuelili
 *
 */","
 * @author luliang_yu
 * @date 2018-11-28
 */"
"<fim_prefix>package org.dice_research.sask.repo_ms.hdfs;

/**<fim_suffix>
public enum Types {
	FILE, DIRECTORY
}
<fim_middle>","
 * @author Andr√© Sonntag
 */","
 * @author <NAME>
 */"
"<fim_prefix>package org.binchoo.paimonganyu.hoyoapi.error;

import org.binchoo.paimonganyu.hoyoapi.pojo.HoyoResponse;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface Retcode {

    /**<fim_suffix>
    int[] codes() default {};
}
<fim_middle>","
     * @return 이 런타임 오류에 대응되는 {@link HoyoResponse}의 retcode 값 여러 개
     */","
     * 响应码
     *
     * @return 响应码
     */"
"<fim_prefix>package cn.ihoway.util;

/**<fim_suffix>
public class AccessXmlParser {
    public static XmlParser parser;
    public static void init() throws ConfigException{
        parser = new XmlParser();
        parser.setPathName(""/META-INF/access.xml"");
        parser.init();
    }
}
<fim_middle>","
 * access.xml解析器
 */","
 * Created by zhouqiang on"
"<fim_prefix>package com.yyq.dp;

/**<fim_suffix>
public class MaxValue {
    public int maxValue(int[][] arr) {
        if (arr == null || arr.length == 0) {
            return 0;
        }
        int rows = arr.length;
        int cols = arr[0].length;
        int[][] dp = new int[rows][cols];
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[0].length; j++) {
                int left = 0;
                int up = 0;
   <fim_middle>","
 * 礼物的最大价值
 *
 * @author yyq
 * @since 2018/01/12
 */","
 * @author yyq
 */"
"<fim_prefix>package work.chiro.game.config;

/**<fim_suffix>
public enum Difficulty {
    // 简单
    Easy,
    // 中等
    Medium,
    // 困难
    Hard
}
<fim_middle>","
 * 难度枚举
 *
 * @author Chiro
 */","
 * 难度
 *
 * @author chiro
 */"
"<fim_prefix>package org.aspcfs.controller;

import java.util.ArrayList;

public class Tree {

	/**<fim_suffix>
	
	private String nomeTabella ;
	private String descrizione ;
	/**
	 * LISTA DEI NODI DI PRIMO LIVELLO DELL'ALBERO
	 */
	private ArrayList<Nodo> listaNodi = null ;
	
	public Tree(String tabella)
	{
		listaNodi = new ArrayList<Nodo>() ;
		nomeTabella = tabella ;
	}
	
	public Tree(String tabella,ArrayList<Nodo> lista)
	{
		if(lista != null)
			listaNodi = lista 	;
		else
			listaNodi = new ArrayList<Nodo>() ;<fim_middle>","
	 * NOME DELLA TABELLA CHE MAPPA L'ALBERO
	 */","
	 * NOME DELLA TABELLA
	 */"
"<fim_prefix>package org.aspcfs.controller;

import java.util.ArrayList;

public class Tree {

	/**
	 * NOME DELLA TABELLA CHE MAPPA L'ALBERO
	 */
	
	private String nomeTabella ;
	private String descrizione ;
	/**<fim_suffix>
	private ArrayList<Nodo> listaNodi = null ;
	
	public Tree(String tabella)
	{
		listaNodi = new ArrayList<Nodo>() ;
		nomeTabella = tabella ;
	}
	
	public Tree(String tabella,ArrayList<Nodo> lista)
	{
		if(lista != null)
			listaNodi = lista 	;
		else
			listaNodi = new ArrayList<Nodo>() ;
		
		nomeTabella = tabella ;
	}
	public Tree()
	{
		listaNodi = new ArrayList<Nodo>() ;
		
	}

	public String getNomeTa<fim_middle>","
	 * LISTA DEI NODI DI PRIMO LIVELLO DELL'ALBERO
	 */","
	 * LISTA DI NODI DELLA TABELLA
	 */"
"<fim_prefix>package org.vadere.state.scenario;

/**<fim_suffix>
public interface DynamicElementMoveListener<T extends DynamicElement> {
	public void elementMove(T element);
}
<fim_middle>","
 * @Benedikt Zoennchen
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.eqgis.ar;

/**<fim_suffix>
public class ARImageMetadata {

    com.google.ar.core.ImageMetadata coreMetadata = null;
    com.huawei.hiar.ARImageMetadata hwMetadata = null;

    ARImageMetadata(com.google.ar.core.ImageMetadata coreobj,com.huawei.hiar.ARImageMetadata hwobj){
        if (coreobj==null && hwobj==null){
            throw new IllegalArgumentException();
        }
        coreMetadata = coreobj;
        hwMetadata = hwobj;
<fim_middle>","
 * AR图片元数据
 * <p>提供对相机图像捕获结果metadata信息的访问。暂不引入这部分功能</p>
 */","
 * Created by Administrator on 2018/9/6 0006.
 */"
"<fim_prefix>package cc.gzvtc.admin.dao;

import cc.gzvtc.common.dao.BaseMapper;
import cc.gzvtc.model.TAdmin;

/**<fim_suffix>
public interface IAdminDao extends BaseMapper<TAdmin>{

}<fim_middle>","
 * 
 * @author hzc 2017年2月12日
 *
 */","
 * Created by RAON on 2017/5/31.
 */"
"<fim_prefix>package net.nanxu.payment.security;

/**<fim_suffix>
public interface PaymentAfterSecurityModule extends SecurityModule {
}
<fim_middle>","
 * 在支付创建之后进行安全检查.
 *
 * @author: P
 **/","
 * @author Nan
 * @date 2021/10/19 16:26
 */"
"<fim_prefix>package org.crue.hercules.sgi.csp.exceptions.eti;

import org.crue.hercules.sgi.framework.problem.Problem;
import org.crue.hercules.sgi.framework.problem.exception.ProblemException;
import org.crue.hercules.sgi.framework.problem.message.ProblemMessage;

/**<fim_suffix>
public class GetPeticionEvaluacionException extends ProblemException {
  private static final long serialVersionUID = 1L;

  public GetPeticionEvaluacionException() {
    super(Problem.builder().title(ProblemMessage.builder().key(GetPeticionEvaluacionException.class).build()).build());
  }
}
<fim_middle>","
 * Excepción lanzada cuando se produce un error recuperando el contenido de una
 * petición de evaluación de ETICA
 */","
 * Exception to be thrown when a problem occurs while getting a peticion evaluation.
 *
 * @author <NAME>
 */"
"<fim_prefix>package org.dromara.system.mapper;

import org.dromara.common.mybatis.core.mapper.BaseMapperPlus;
import org.dromara.system.domain.SysNotice;
import org.dromara.system.domain.vo.SysNoticeVo;

/**<fim_suffix>
public interface SysNoticeMapper extends BaseMapperPlus<SysNotice, SysNoticeVo> {

}
<fim_middle>","
 * 通知公告表 数据层
 *
 * @author Lion Li
 */","
 * <p>
 * 通知公告表 Mapper 接口
 * </p>"
"<fim_prefix>package cn.foxtech.device.protocol.v1.iec104.core.entity;

import lombok.Data;

/**<fim_suffix>
@Data
public class VsqEntity {

    /**
     * 地址是否连续
     */
    boolean sq = false;
    /**
     * 当地址为连续时，信息体元素地址数量   0-7位
     */
    int num = 0;
}
<fim_middle>","
 * 可变结构限定词
 * SQ = 0 ：信息对象的地址不连续（意思就是每个信息对象都会一个对象地址）
 * SQ = 1 ： 信息对象的地址连续 （只有第一个信息对象有地址，其他对象的地址就是累加1）
 * Tips：总召唤时，为了压缩信息传输时间SQ=1；而在从站主动上传变化数据时，因为地址不连续，采用SQ=0；
 */","
 * 信息体元素地址
 *
 * @author zhuhao
 * @date 2020/4/30
 */"
"<fim_prefix>package cn.foxtech.device.protocol.v1.iec104.core.entity;

import lombok.Data;

/**
 * 可变结构限定词
 * SQ = 0 ：信息对象的地址不连续（意思就是每个信息对象都会一个对象地址）
 * SQ = 1 ： 信息对象的地址连续 （只有第一个信息对象有地址，其他对象的地址就是累加1）
 * Tips：总召唤时，为了压缩信息传输时间SQ=1；而在从站主动上传变化数据时，因为地址不连续，采用SQ=0；
 */
@Data
public class VsqEntity {

    /**
     * 地址是否连续
     */
    boolean sq = false;
    /**<fim_suffix>
    int num = 0;
}
<fim_middle>","
     * 当地址为连续时，信息体元素地址数量   0-7位
     */","
     * 信息对象的数量
     */"
"<fim_prefix>package cn.foxtech.device.protocol.v1.iec104.core.entity;

import lombok.Data;

/**
 * 可变结构限定词
 * SQ = 0 ：信息对象的地址不连续（意思就是每个信息对象都会一个对象地址）
 * SQ = 1 ： 信息对象的地址连续 （只有第一个信息对象有地址，其他对象的地址就是累加1）
 * Tips：总召唤时，为了压缩信息传输时间SQ=1；而在从站主动上传变化数据时，因为地址不连续，采用SQ=0；
 */
@Data
public class VsqEntity {

    /**<fim_suffix>
    boolean sq = false;
    /**
     * 当地址为连续时，信息体元素地址数量   0-7位
     */
    int num = 0;
}
<fim_middle>","
     * 地址是否连续
     */","
     * 信息对象地址连续（只有第一个信息"
"<fim_prefix>/**<fim_suffix>

package es.inteco.xbrl.lenlocpenloc.config.descriptors;<fim_middle>","
 * Descriptores de los objetos de configuración.
 */","
 * @author <NAME> (inteco)"
"<fim_prefix>package de.slgdev.leoapp.view;

/**<fim_suffix>

public enum ActivityStatus {
    ACTIVE, PAUSED, DESTROYED
}
<fim_middle>","
 * ActivityStatus
 * <p>
 * Gibt den Status einer Activity an.
 */","
 * Created by slgdev on 12.03.17.
 */"
"<fim_prefix>package org.haic.often.tuple.record;

/**<fim_suffix>
public record FiveTuple<A, B, C, D, E>(A first, B second, C third, D fourth, E fifth) {}
<fim_middle>","
 * Tuple的实现,用于记录多个参数
 */","
 * @author <NAME>
 * @version"
"<fim_prefix>package org.dromara.system.domain.convert;

import io.github.linpeilie.BaseMapper;
import org.dromara.system.api.domain.vo.RemoteDictDataVo;
import org.dromara.system.domain.vo.SysDictDataVo;
import org.mapstruct.Mapper;
import org.mapstruct.MappingConstants;
import org.mapstruct.ReportingPolicy;

/**<fim_suffix>
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING, unmappedTargetPolicy = ReportingPolicy.IGNORE)
public interface SysDictDataVoConvert extends BaseMapper<SysDictDataVo, RemoteDictDataVo> {

}
<fim_middle>","
 * 字典数据转换器
 * @author zhujie
 */","
 * @author liangyq 2018-12-07
 */"
"<fim_prefix>package io.mosip.biometrics.util.nist.parser.v2011.dto;

import java.io.Serializable;

import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;

import io.mosip.biometrics.util.nist.parser.v2011.constant.XmlnsNameSpaceConstant;
import lombok.Data;

@Data
/**<fim_suffix>
public class DentalVisualImageDataInfo implements Serializable {
    @JacksonXmlProperty(namespace = XmlnsNameSpaceConstant.NAMESPACE_URL_BIOM, localName = ""DentalVisualImageCode"")
    private String dviCode;
    
    @JacksonXmlProperty(namespace = XmlnsNameSpaceConstant.NAMESPACE_URL_BIOM, localName = ""DentalVisualImageDescriptiveText"")
    private String dviDesc;
    
    @JacksonXmlProperty(namespace = <fim_middle>","
 * DVI = DentalVisualImage
 */","
 * 
 * @author  <NAME>"
"<fim_prefix>package ltd.icecold.vexmusic.interfaceservice;

/**<fim_suffix>
public interface MessageService {
    String message(String msg);
}
<fim_middle>","提供数据接口
 * @author gd
 */","
 * Created by Liang on 2017/3"
"<fim_prefix>package kr.co.rtst.autosar.ap4x.core.model;

abstract public class AbstractAPSubVirtualElement extends AbstractAPVirtualElement implements IAPSubVirtualElement {
	
	public AbstractAPSubVirtualElement(IAPProject apProject, IAPVirtualElement parent, String name,
			int index, int depth, String iconPath) {
		super(apProject, parent, parent.getName()/*<fim_suffix>, name, index, depth, iconPath);
	}

}
<fim_middle>",서브인 경우 카테고리는 부모의 이름과 같다*/,"+name*/,"
"<fim_prefix>acidadQuery tipoDiscapacidadQuery) {
		TipoDiscapacidad tipoDiscapacidadAux = tipoDiscapacidadDAO.searchUnique(tipoDiscapacidadQuery);
		TipoDiscapacidadBean tipoDiscapacidadBean = toTipoDiscapacidadBean(tipoDiscapacidadAux);
		if(tipoDiscapacidadBean == null){
			return null;
		}
		return tipoDiscapacidadBean;
	}

	public TipoDiscapacidadDAO getTipoDiscapacidadDAO() {
		return tipoDiscapacidadDAO;
	}

	/**<fim_suffix>
	public void setTipoDiscapacidadDAO(TipoDiscapacidadDAO tipoDiscapacidadDAO) {
		this.tipoDiscapacidadDAO = tipoDiscapacidadDAO;
	}

	
	
	
}
<fim_middle>","
	 * Establece el tipo discapacidad DAO.
	 *
	 * @param tipoDiscapacidadDAO el nuevo tipo discapacidad DAO
	 */",
"<fim_prefix>package olddata;

/**<fim_suffix>
public class Accelerometer extends PositionData {
    public Accelerometer(int equipmentID, double accX, double accY, double accZ) {
        super(equipmentID, accX, accY, accZ);
    }

    public Accelerometer(int equipmentID, Double[] arrayAcc) {
        super(equipmentID, arrayAcc);
    }

    public Accelerometer(int id, int equipmentID, double accX, double accY, double accZ) {
        super(<fim_middle>","
 * 这个类用作存储加速度
 *
 * @author Qchrx
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/**
 * 
 */
package it.regioneveneto.mygov.payment.nodoregionalefesp.domain.utils;

/**<fim_suffix>
public class ChiediStatoRTPBean {

	private int intervalloMinutiModelloImmediato;
	private int intervalloMinutiModelloDifferito;
	private int intervalloMinutiModelloAttivatoPressoPsp;
	private boolean forzaGenerazioneRtNegativa;

	public int getIntervalloMinutiModelloImmediato() {
		return intervalloMinutiModelloImmediato;
	}

	public void setIntervalloMinutiModelloImmediato(int intervalloMinutiModelloImmed<fim_middle>","
 * @author regione del veneto
 *
 */","
 * @author riccardo.casadei
 *
"
"<fim_prefix>package org.ter.coyote.http11.filter;

import org.ter.coyote.OutputBuffer;

/**<fim_suffix>
public interface OutputFilter extends OutputBuffer {
}
<fim_middle>","
 * 输出过滤器
 */","
 * 
 * @author d"
"<fim_prefix>package feng.qiye.enums;
/**<fim_suffix>
public enum EnumMenuKey {
	
}
<fim_middle>","
 * 按钮click类型Key值枚举
 * @author sunlight
 *
 */","
 * 菜单key
 * @author Administrator
 *
 */"
"<fim_prefix>package com.avalon.holygrail.ss.view;

import java.io.Serializable;

/**<fim_suffix>
public interface DataView extends Serializable {

}
<fim_middle>","
 * 数据视图
 * 所有SpringMVC的Controller AJAX返回此接口
 */","
 * Created by 风象南(yuboon) on 2018/9"
"<fim_prefix>package com.utils.exception;

/**<fim_suffix>
public class NoCacheException extends InterruptedException {

}
<fim_middle>","
 * Clase: Services
 * Esta el la excepcion que se lanza cuando no existe coneccion con el servidor y no hay cache almacenada.
 * En realidad la que se lanza es {@link InterruptedException } pero se castea a esta para tener
 * un mejor control sobre la excepcion en caso que se necesite.
 *
 * @extends InterruptedException.
 */","
 * Created by 谢长春 on 2017/4/18.
 */"
"<fim_prefix>package es.seresco.cursojee.gestbifly.business.service;

/**<fim_suffix>
public interface Service {

}
<fim_middle>","
 * Interfaz de marca de todos los {@literal Service}.
 */","
 * Created by martin on 11/05/2017.
 */"
"<fim_prefix>/*<fim_suffix>
/**
 * {@link java.math} 包的工具。
 */
package net.matrix.java.math;
<fim_middle>","
 * 版权所有 2024 Matrix。
 * 保留所有权利。
 */","*
 * {@link java.util} 包的工具。
 */"
"<fim_prefix>/*
 * 版权所有 2024 Matrix。
 * 保留所有权利。
 */
/**<fim_suffix>
package net.matrix.java.math;
<fim_middle>","
 * {@link java.math} 包的工具。
 */","
 * @author wangcheng
 */"
"<fim_prefix>package ru.nuzmsh.commons.formpersistence.annotation;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import static java.lang.annotation.ElementType.TYPE;

/**<fim_suffix>
@Retention(RetentionPolicy.RUNTIME)
@Target({TYPE})
public @interface Parent {
    /**
     * Метод для получения значения
     */
    String property() ;

    Class parentForm() default Void.class ;

    String orderBy() default """" ;
    
    String parentMapForm() default """" ;
}
<fim_middle>","
 * Связанный родитель
 */","
 * Аннотация для указания р"
"<fim_prefix>package ru.nuzmsh.commons.formpersistence.annotation;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import static java.lang.annotation.ElementType.TYPE;

/**
 * Связанный родитель
 */
@Retention(RetentionPolicy.RUNTIME)
@Target({TYPE})
public @interface Parent {
    /**<fim_suffix>
    String property() ;

    Class parentForm() default Void.class ;

    String orderBy() default """" ;
    
    String parentMapForm() default """" ;
}
<fim_middle>","
     * Метод для получения значения
     */","
     * Свойство родительского объекта
   "
"<fim_prefix>package Server.Server_Interface;

import Server.Zone;

import java.rmi.RemoteException;

/**<fim_suffix>
public interface IChatServerManagement extends IChatServer{
    void updateZone(Zone z) throws RemoteException;
}
<fim_middle>","
 * Interface du Chat server utilis√© par le serverController
 * Mais inutilisable par les players
 */","
 * Created by <NAME> on 11/11/2016.
 */"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.common;<fim_middle>","
 * <p>
 * 共通的な機能を提供します。
 * </p>
 */","
 * @author yamamoto
 *
 */"
"<fim_prefix>package cn.milai.ib.role.explosion;

import cn.milai.ib.role.Role;

/**<fim_suffix>
public interface Explosion extends Role {

}
<fim_middle>","
 * 爆炸类游戏对象，不一定是“爆炸”，通称角色死亡后的效果
 * @author milai
 * @date 2020.02.20
 */","
 * Created by caoliang on 2016/5/31.
 */"
"<fim_prefix>package com.tyron.test;

public class CompleteIdentifier {
  private static final Object IDENTIFIER = new Object();

  public static void main() {
    /**<fim_suffix>
  }
}
<fim_middle>","
     * @insert
     */","
     *        "
"<fim_prefix>/**<fim_suffix>
package poc.jbehave.calculator.plumbing;<fim_middle>","
 * Ce paquetage fournit des classes techniquement utiles pour 
 * l'implémentation de tests d'acceptation avec JBehave, 
 * c'est-à-dire de scénarii de test textuels structurés en étapes Given-When-Then.
 * 
 * @author Xavier Pigeon
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.mquan86.pattern.behavior.iterator;

/**<fim_suffix>
public interface Iterator {
    public Context next();
}
<fim_middle>","
 * @author Minh Quan Pham (mquan86@gmail.com)
 *
 */","
 * @author MQuan
 * @date 2020/3/18
 * @desc
 */"
"<fim_prefix>
package com.arcadsoftware.ae.core.logger.messages.impl;

public class ErrorMessage extends StatusMessage {
	/**<fim_suffix>
	public ErrorMessage(final String serviceName, final String message) {
		super(serviceName, TYPE_MSG_ERROR, message, false);
	}

}
<fim_middle>","
	 * Constructeur de classe.
	 *
	 * @param serviceName
	 *            String : Nom du service Ã©metteur.
	 * @param message
	 *            : Texte principal du message.
	 */","
	 * 
	 */"
"<fim_prefix>/**<fim_suffix>
package poc.jbehave.steps;<fim_middle>","
 * <p>Ce paquetage contient la définition des étapes des scénarii JBehave.
 * </p>
 * 
 * @author Xavier Pigeon
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>/*<fim_suffix>
/**
 * {@link java.lang} 包的工具。
 */
package net.matrix.java.lang;
<fim_middle>","
 * 版权所有 2024 Matrix。
 * 保留所有权利。
 */","*
 * 工具类。
 *
 * @author wangcheng
 */"
"<fim_prefix>/*
 * 版权所有 2024 Matrix。
 * 保留所有权利。
 */
/**<fim_suffix>
package net.matrix.java.lang;
<fim_middle>","
 * {@link java.lang} 包的工具。
 */","
 * @author wangcheng
 */"
"<fim_prefix>is.Items.Alpaka;
import de.x8bit.Fantasya.Atlantis.Items.Holz;
import de.x8bit.Fantasya.Atlantis.Items.Mastodon;
import de.x8bit.Fantasya.Atlantis.Items.Zotte;
import de.x8bit.Fantasya.util.Random;

public class Trockenwald extends Region
{
	
	public Trockenwald() {
		setSteineFuerStrasse(200);		// Steine f√ºr eine Strassenrichtung
	}
	
	@Override
	public String getArtikel() { return ""der"".intern(); }

	/**<fim_suffix>
	@Override
	public void Init() {
		super.Init();
		
		if (getBauern() == 0) setBauern(Random.rnd(500, 1000));
		if (getBaum() != 0) setResource(Holz.class, getBaum()); else setResource(Holz.class, Random.rnd(100, 150));
		if (getSilber() == 0) setSilber(getBauern() * Random.rnd(11, 16));
		setResource(Zotte.class, Random.rnd(0, 20));
		setResource(Alpaka.class, Random.rnd(0, 20));
		setResource(Mastodon.cla<fim_middle>", Initialisierung der Bauern & so */,"
	 * @see de.x8"
"<fim_prefix>import java.util.*;

/**<fim_suffix>
public class Rotation {
    /**
     * 思路：
     * 1.将字符串A复制一份拼接在A后面
     * 2.到拼接后的字符串中查找是否存在字符串B
     */
    public boolean chkRotation(String A, int lena, String B, int lenb) {
        return (A + A).indexOf(B) != -1;
    }
}<fim_middle>","
 * 题目名称：旋转词
 * 题目描述：如果对于一个字符串A，将A的前面任意一部分挪到后边去形成的字符串称为A的旋转词。
 * 比如A=""12345"",A的旋转词有""12345"",""23451"",""34512"",""45123""和""51234""。
 * 对于两个字符串A和B，请判断A和B是否互为旋转词。
 * 给定两个字符串A和B及他们的长度lena，lenb，请返回一个bool值，代表他们是否互为旋转词。
 */","
 * @author liweiwei1419
 * @date 2019/10/31 9:49 上午
 */"
"<fim_prefix>import java.util.*;

/**
 * 题目名称：旋转词
 * 题目描述：如果对于一个字符串A，将A的前面任意一部分挪到后边去形成的字符串称为A的旋转词。
 * 比如A=""12345"",A的旋转词有""12345"",""23451"",""34512"",""45123""和""51234""。
 * 对于两个字符串A和B，请判断A和B是否互为旋转词。
 * 给定两个字符串A和B及他们的长度lena，lenb，请返回一个bool值，代表他们是否互为旋转词。
 */
public class Rotation {
    /**<fim_suffix>
    public boolean chkRotation(String A, int lena, String B, int lenb) {
        return (A + A).indexOf(B) != -1;
    }
}<fim_middle>","
     * 思路：
     * 1.将字符串A复制一份拼接在A后面
     * 2.到拼接后的字符串中查找是否存在字符串B
     */","
     * 思路：
     * 1. 首先判断A和B是否相等，如果相等，则返回true
     * 2. 然后判断A和B的前lena个字符"
"<fim_prefix>package com.leetcode.sword2offer;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;

/**<fim_suffix>
public class Solution_30 {

    Stack<Integer> stackA;
    Stack<Integer> stackB;

    public Solution_30() {
        stackA = new Stack<>();
        stackB = new Stack<>();
    }

    public void push(int x) {
        stackA.add(x);
        if (stackB.empty() || x <= stackB.peek()){
            stackB.add(x);
        }
    }

    public void pop() {
        if(stackA.pop().equals(stackB.peek())){
         <fim_middle>","
 * 定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。
 * 示例:
 * MinStack minStack = new MinStack();
 * minStack.push(-2);
 * minStack.push(0);
 * minStack.push(-3);
 * minStack.min();   --> 返回 -3.
 * minStack.pop();
 * minStack.top();      --> 返回 0.
 * minStack.min();   --> 返回 -2.
 * 提示：
 * 各函数的调用总次数不超过 20000 次
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author LWJ
 * @date 2020/6/1 11:06
 */","
 * @author fcz
 * @description
 * @date 2020-04-08
 * @since 2020-04-08
 */"
"<fim_prefix>package gui.tipos;

/**<fim_suffix>
public enum TipoMutacion {

	TERMINAL_SIMPLE, FUNCIONAL_SIMPLE, ARBOL;
}
<fim_middle>","
 * Enumerado que contiene el tipo de mutacion que puede ejecutar el algoritmo
 * genético.
 * 
 * @author Grupo20.
 */","
 * Enumeración que contiene los tipos de mutaciones.
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package classe;

public class Produto {
	
	String nome;
	double preco;
	static double desconto;
	
	/*<fim_suffix>
	Produto(){
		//Construtor padrão
	}
	
	Produto(String nome, double preco){ //,double desconto){
		//Com a modificação do static acima, perde-se o sentido manter o desconto no construtor
		//Assim ele foi removido, fazendo com que a forma de acesso a variavel desconto seja através da classe, veja:
		//Produto.desconto -> Conforme citado acima
		
		this.nome = nome;
		this.preco = preco;
		//this.desconto = <fim_middle>","Quando um static é definido, a maneira correta de se modificar o valor é através da propria classe
	* Por exemplo: Produto.desconto = 15;
	* Isso ocorre porque com a definição static, a variavel passa ser de responsabilidade da classe e não do objeto
	*/","*
	 * Construtor sem parâmetros
	 */"
"<fim_prefix>package com.ks.demo.susi.service.sms;

/**<fim_suffix>
public interface SendSms {
    /**
     *
     * @param sendSmsDataDto 短信发送的一系列参数
     * @return 短信验证码
     */
    String send(SendSmsDataDto sendSmsDataDto);
}
<fim_middle>","
 * 发送短信验证码
 */","
 * Created by xiaox"
"<fim_prefix>package com.ks.demo.susi.service.sms;

/**
 * 发送短信验证码
 */
public interface SendSms {
    /**<fim_suffix>
    String send(SendSmsDataDto sendSmsDataDto);
}
<fim_middle>","
     *
     * @param sendSmsDataDto 短信发送的一系列参数
     * @return 短信验证码
     */","
     * 发送短信验证码
     * @param sendSmsDataDto
     * @return
     */"
"<fim_prefix>package algorithm.day05;

/**<fim_suffix>
public class Test02 {

    public static void main(String[] args) {
        int[] arr = {7,1,5,3,6,4};
        maxProfit(arr);
    }

    public static int maxProfit(int[] prices) {
        int min = Integer.MAX_VALUE;
        int max = 0;
        for (int price : prices) {
            if (price < min){
                min = price;
            }else if (price - min > max){
                max = price - min;<fim_middle>","
 * @author wuyj
 * @date 2021/12/22 12:22 上午
 *
 * 给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。
 *
 * 你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。
 *
 * 返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
 *
 */","
 * @author: mayuan
 * @desc:
 * @date: 2018/08/06
 */"
"<fim_prefix>package com.cabin.ter.service;

import com.cabin.ter.constants.participant.msg.MessageParticipant;

/**<fim_suffix>
public interface MessageProcessing {

     <T extends MessageParticipant> void initMessage(MessageParticipant message);
     <T extends MessageParticipant> void messageRisk(MessageParticipant message);
}
<fim_middle>","
 * 这个类是一些公共处理，暂未想好怎么使用
 * 这里我的想法是，由用户来进行消息发送初始化和风控的公共接口
 *
 * @author xiaoye
 * @date Created in 2024-05-01 19:47
 */","
 * @author zhanghejie
 * @date 2020/12/21  15:31
 * @Description: TODO
 */"
"<fim_prefix>package com.mquan86.pattern.creational.factory.example;

/**<fim_suffix>
public interface File {

}
<fim_middle>","
 * @author Minh Quan Pham (mquan86@gmail.com)
 *
 */","
 * @author MQuan
 * @date 2020/3/18
 * @desc
 */"
"<fim_prefix>package fr.efreicraft.ecatup.players.menus.interfaces;

import org.bukkit.event.Event;

/**<fim_suffix>
public interface IMenuClickCallback {

    void run(Event event);

}
<fim_middle>","
 * Interface fonctionnelle permettant de définir une action à effectuer lors d'un clic sur un item d'un menu.
 *
 * @author Antoine B. {@literal <antoine@jiveoff.fr>}
 * @project ECATUP
 */","
 * Created by Zaryl on 10/04/2016.
 */"
"<fim_prefix>package team.floracore.common.util.io;

/**<fim_suffix>
public enum CopyOption {
	/**
	 * 完成后自动关闭输入流
	 */
	CLOSE_INPUT,
	/**
	 * 完成后自动关闭输出流
	 */
	CLOSE_OUTPUT
}<fim_middle>","
 * IOUtils中的copy选项
 */","
 * 复制选项
 * 
 *"
"<fim_prefix>package team.floracore.common.util.io;

/**
 * IOUtils中的copy选项
 */
public enum CopyOption {
	/**
	 * 完成后自动关闭输入流
	 */
	CLOSE_INPUT,
	/**<fim_suffix>
	CLOSE_OUTPUT
}<fim_middle>","
	 * 完成后自动关闭输出流
	 */","
	 * 完成后自动关闭输出流"
"<fim_prefix>package team.floracore.common.util.io;

/**
 * IOUtils中的copy选项
 */
public enum CopyOption {
	/**<fim_suffix>
	CLOSE_INPUT,
	/**
	 * 完成后自动关闭输出流
	 */
	CLOSE_OUTPUT
}<fim_middle>","
	 * 完成后自动关闭输入流
	 */","
	 * 完成后自动关闭输入流
	 */"
"<fim_prefix>package nc.isi.fragaria_adapter_rewrite.resources;

import java.util.Map;


/**<fim_suffix>
public interface MasterDsLoader {
	Map<String, Datasource> getDs();
}
<fim_middle>","
 * 
 * @author bjonathas Service permettant de charger toutes des datasources à
 *         utiliser dans le projet. Le chargement s'effectue grace à des
 *         services plus spécifics permettant de construir ces datasources à
 *         partir de différentes sources de données (ex : fichier.yaml). Pour
 *         rajouter une source de données, il suffit de contribuer à ce service
 *         le specificDsLoader correspondant à la source de données (ex :
 *         yamlDsLoader)
 */","
 * @author <NAME> (<EMAIL>)
 * @version 1.0
 * @since 1.0
 */"
"<fim_prefix>package me.zhenxin.aida.entity;

/**<fim_suffix>
public class SimpleItemEntity {
    /**
     * 简单子项图片
     */
    private Object simpleItemImg;
    /**
     * 简单子项标题
     */
    private String simpleItemTitle;
    /**
     * 简单子项摘要
     */
    private String simpleItemSummary;

    public Object getSimpleItemImg() {
        return simpleItemImg;
    }

    public void setSimpleItemImg(Object simpleItemImg) {
        this.simpleItemImg = simpleItemImg;
  <fim_middle>","
 * 简单子项实体类
 */","
 * 简单子项实体类
 *"
"<fim_prefix>package me.zhenxin.aida.entity;

/**
 * 简单子项实体类
 */
public class SimpleItemEntity {
    /**<fim_suffix>
    private Object simpleItemImg;
    /**
     * 简单子项标题
     */
    private String simpleItemTitle;
    /**
     * 简单子项摘要
     */
    private String simpleItemSummary;

    public Object getSimpleItemImg() {
        return simpleItemImg;
    }

    public void setSimpleItemImg(Object simpleItemImg) {
        this.simpleItemImg = simpleItemImg;
    }

    public String getSimpleItemTitle() {
        return s<fim_middle>","
     * 简单子项图片
     */","
     * 简单子项图片
     */"
"<fim_prefix>package me.zhenxin.aida.entity;

/**
 * 简单子项实体类
 */
public class SimpleItemEntity {
    /**
     * 简单子项图片
     */
    private Object simpleItemImg;
    /**
     * 简单子项标题
     */
    private String simpleItemTitle;
    /**<fim_suffix>
    private String simpleItemSummary;

    public Object getSimpleItemImg() {
        return simpleItemImg;
    }

    public void setSimpleItemImg(Object simpleItemImg) {
        this.simpleItemImg = simpleItemImg;
    }

    public String getSimpleItemTitle() {
        return simpleItemTitle;
    }

    public void setSimpleItemTitle(String simpleItemTitle) {
        this.simpleItemTitle = simpleItemTitle<fim_middle>","
     * 简单子项摘要
     */","
     * 简单子项摘要
     */"
"<fim_prefix>package me.zhenxin.aida.entity;

/**
 * 简单子项实体类
 */
public class SimpleItemEntity {
    /**
     * 简单子项图片
     */
    private Object simpleItemImg;
    /**<fim_suffix>
    private String simpleItemTitle;
    /**
     * 简单子项摘要
     */
    private String simpleItemSummary;

    public Object getSimpleItemImg() {
        return simpleItemImg;
    }

    public void setSimpleItemImg(Object simpleItemImg) {
        this.simpleItemImg = simpleItemImg;
    }

    public String getSimpleItemTitle() {
        return simpleItemTitle;
    }

    public void setSimpleItemTitle(String<fim_middle>","
     * 简单子项标题
     */","
     * 简单子项标题
     */"
"<fim_prefix>/**<fim_suffix>
package nami.connector;
<fim_middle>","
 * Abstrahiert die Kommunikation mit NaMi.
 */","
 * @author enricodelzotto
 */"
"<fim_prefix>package org.openyu.mix.item.vo.thing;

/**<fim_suffix>
public interface PotionInstantMpThing extends PotionThing
{

}
<fim_middle>","
 * 立即魔法藥水道具
 */","
 * 物品的效果
 *
 * @author l"
"<fim_prefix>package cms.bean.template;

import java.io.Serializable;

/**<fim_suffix>
public class Forum_AdvertisingRelated_Image implements Serializable{
	private static final long serialVersionUID = -804692041640768504L;

	/** 版块---广告相关--轮播广告  Id **/
	private String image_id;
	
	/** 图片名称 **/
	private String image_name;
	/** 图片链接 **/
	private String image_link;

	/** 图片文件路径 储存时不包括模板目录路径 使用时示例: image_filePath + 模板目录 + /   **/
	private String image_filePath;
	/** 图片文件名称 **/
	pr<fim_middle>","
 * 版块---广告相关--图片广告
 *
 */","
 * 版块---广告相关--轮播广告
 * @"
"<fim_prefix>package cms.bean.template;

import java.io.Serializable;

/**
 * 版块---广告相关--图片广告
 *
 */
public class Forum_AdvertisingRelated_Image implements Serializable{
	private static final long serialVersionUID = -804692041640768504L;

	/**<fim_suffix>
	private String image_id;
	
	/** 图片名称 **/
	private String image_name;
	/** 图片链接 **/
	private String image_link;

	/** 图片文件路径 储存时不包括模板目录路径 使用时示例: image_filePath + 模板目录 + /   **/
	private String image_filePath;
	/** 图片文件名称 **/
	private String image_fileName;
	
	
	/** 图片路径 
	private String image_path; **/
	
	public String getImage_id() {
		return image_id;
	}
	public void setImage_id(String<fim_middle>", 版块---广告相关--轮播广告  Id **/, 图片ID **/
"<fim_prefix>package cms.bean.template;

import java.io.Serializable;

/**
 * 版块---广告相关--图片广告
 *
 */
public class Forum_AdvertisingRelated_Image implements Serializable{
	private static final long serialVersionUID = -804692041640768504L;

	/** 版块---广告相关--轮播广告  Id **/
	private String image_id;
	
	/**<fim_suffix>
	private String image_name;
	/** 图片链接 **/
	private String image_link;

	/** 图片文件路径 储存时不包括模板目录路径 使用时示例: image_filePath + 模板目录 + /   **/
	private String image_filePath;
	/** 图片文件名称 **/
	private String image_fileName;
	
	
	/** 图片路径 
	private String image_path; **/
	
	public String getImage_id() {
		return image_id;
	}
	public void setImage_id(String image_id) {
		this.image_id = image_id;
	}<fim_middle>", 图片名称 **/, 图片名称 **/
"<fim_prefix>package cms.bean.template;

import java.io.Serializable;

/**
 * 版块---广告相关--图片广告
 *
 */
public class Forum_AdvertisingRelated_Image implements Serializable{
	private static final long serialVersionUID = -804692041640768504L;

	/** 版块---广告相关--轮播广告  Id **/
	private String image_id;
	
	/** 图片名称 **/
	private String image_name;
	/** 图片链接 **/
	private String image_link;

	/**<fim_suffix>
	private String image_filePath;
	/** 图片文件名称 **/
	private String image_fileName;
	
	
	/** 图片路径 
	private String image_path; **/
	
	public String getImage_id() {
		return image_id;
	}
	public void setImage_id(String image_id) {
		this.image_id = image_id;
	}
	public String getImage_name() {
		return image_name;
	}
	public void setImage_name(String image_name) {
		this.image_name = image_nam<fim_middle>", 图片文件路径 储存时不包括模板目录路径 使用时示例: image_filePath + 模板目录 + /   **/, 图片文件路径 **/
"<fim_prefix>--图片广告
 *
 */
public class Forum_AdvertisingRelated_Image implements Serializable{
	private static final long serialVersionUID = -804692041640768504L;

	/** 版块---广告相关--轮播广告  Id **/
	private String image_id;
	
	/** 图片名称 **/
	private String image_name;
	/** 图片链接 **/
	private String image_link;

	/** 图片文件路径 储存时不包括模板目录路径 使用时示例: image_filePath + 模板目录 + /   **/
	private String image_filePath;
	/**<fim_suffix>
	private String image_fileName;
	
	
	/** 图片路径 
	private String image_path; **/
	
	public String getImage_id() {
		return image_id;
	}
	public void setImage_id(String image_id) {
		this.image_id = image_id;
	}
	public String getImage_name() {
		return image_name;
	}
	public void setImage_name(String image_name) {
		this.image_name = image_name;
	}
	public String getImage_link() {
		return<fim_middle>", 图片文件名称 **/, 图片文件名 
"<fim_prefix>package cms.bean.template;

import java.io.Serializable;

/**
 * 版块---广告相关--图片广告
 *
 */
public class Forum_AdvertisingRelated_Image implements Serializable{
	private static final long serialVersionUID = -804692041640768504L;

	/** 版块---广告相关--轮播广告  Id **/
	private String image_id;
	
	/** 图片名称 **/
	private String image_name;
	/**<fim_suffix>
	private String image_link;

	/** 图片文件路径 储存时不包括模板目录路径 使用时示例: image_filePath + 模板目录 + /   **/
	private String image_filePath;
	/** 图片文件名称 **/
	private String image_fileName;
	
	
	/** 图片路径 
	private String image_path; **/
	
	public String getImage_id() {
		return image_id;
	}
	public void setImage_id(String image_id) {
		this.image_id = image_id;
	}
	public String getImage_name() {
		return<fim_middle>", 图片链接 **/, 图片链接 **/
"<fim_prefix>package com.runsidekick.agent.probe.condition;

/**<fim_suffix>
public interface Condition {

    boolean evaluate(ConditionContext conditionContext);

}
<fim_middle>","
 * @author serkan
 */","
 * @author <NAME>
 */"
"<fim_prefix>package ltd.kumo.plutomc.framework.shared.command.arguments;

import ltd.kumo.plutomc.framework.shared.command.Argument;

/**<fim_suffix>
public abstract class ArgumentString implements Argument<String> {

}
<fim_middle>","
 * 字符串参数
 */","
 * 字符串参数
 *"
"<fim_prefix>package com.pongsky.kit.excel.handler.read;

import com.pongsky.kit.excel.annotation.ExcelProperty;
import com.pongsky.kit.excel.enums.ParseType;

import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;

/**<fim_suffix>
public class ExcelAutoImportHandler implements ExcelImportHandler {

    @Override
    public void exec(Object result, Field field, ExcelProperty excelProperty, Object obj) throws ReflectiveOperationException {
        ParseType type = ParseType.getFieldType(field);
        if (type.getImportHandler() == null) {
            return;
        }
        try {
            type.getImportHandler().getDeclaredConst<fim_middle>","
 * 自动转换 处理器
 *
 * @author pengsenhao
 **/","
 * @author 王智刚
 * @date 2022/1/12
"
"<fim_prefix>package com.mquan86.pattern.behavior.observer;

/**<fim_suffix>
public class ObserverB implements Observer {

    @Override
    public void update() {}
}
<fim_middle>","
 * @author Minh Quan Pham (mquan86@gmail.com)
 *
 */","
 * @author shawn
 * @create 2020/01/01
 * @description
 */"
"<fim_prefix>package cn.edu.hust.array;

import java.util.ArrayList;
import java.util.List;

public class _118_Traigle {
    /**<fim_suffix>
    public static List<List<Integer>> generate(int numRows) {
        //按照特点计算即可
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        if(numRows==0) return result;
        List<Integer> tmp1=new ArrayList<Integer>();
        tmp1.add(1);
        result.add(tmp1);
        for(int i=2;i<=numRows;i++)
        {
            List<Integer> tmp2=new ArrayList<Integer>();
            List<Inte<fim_middle>","
     * 这里根据杨辉三角形的特点进行计算就可以了
     * @param numRows
     * @return
     */","
     * 给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。
     *
     * @param numRows
 "
"<fim_prefix>package cms.utils;

/**<fim_suffix>
public class MD5 {
	/**  
    * MD5 加密  
    */   
   public static String getMD5(String str) {   
	   String md5Hex = org.apache.commons.codec.digest.DigestUtils.md5Hex(str);   
	   return md5Hex;
   }   
   
   
}
<fim_middle>","
 * MD5加密
 *
 */","
 * MD5加密
 * @author"
"<fim_prefix>package cms.utils;

/**
 * MD5加密
 *
 */
public class MD5 {
	/**<fim_suffix>   
   public static String getMD5(String str) {   
	   String md5Hex = org.apache.commons.codec.digest.DigestUtils.md5Hex(str);   
	   return md5Hex;
   }   
   
   
}
<fim_middle>","  
    * MD5 加密  
    */","
	 * MD5加密
	 * @param str
	"
"<fim_prefix>package cn.byteforge.openqq.ws.entity.transfer;

import lombok.Data;

/**<fim_suffix>
@Data
public class Text implements Transfer {

    private String content;

}
<fim_middle>","
 * 文本消息
 * */","
 * @author <a href="""
"<fim_prefix>package work.myfavs.framework.orm.util.func;

/**<fim_suffix>
public interface ThrowingSupplier<R, E extends Throwable> {
  R get() throws E;
}
<fim_middle>","
 * 接受没有参数并生成结果的函数
 * 函数调用 {@link #get()} 方法
 *
 * @param <R> 返回结果类型
 * @param <E> 抛出异常的类型
 */","
 * @author ivan
 */"
"<fim_prefix>/*<fim_suffix>
package ifs_mover;

public enum SyncMode {
    UNKNOWN, ETAG, SIZE, EXIST;
}
<fim_middle>","
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* ifsmover is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
*/","*
 * Created by <NAME> on 10/10/2016.
 */"
"<fim_prefix>package cn.handyplus.chat.hook;

import cn.handyplus.chat.PlayerChat;
import me.clip.placeholderapi.PlaceholderAPI;
import org.bukkit.entity.Player;

import java.util.List;

/**<fim_suffix>
public class PlaceholderApiUtil {

    /**
     * 替换变量
     *
     * @param player 玩家
     * @param str    字符串
     * @return 新字符串
     */
    public static String set(Player player, String str) {
        if (!PlayerChat.USE_PAPI || player == null) {
            return str;
        }
        // 是否包含变量
        if (PlaceholderAPI.containsPlaceholders(str)) {
            str = PlaceholderAPI.setPlaceholders(pl<fim_middle>","
 * 变量工具类
 *
 * @author handy
 */","
 * 占位符工具类
 *
 * @author <"
"<fim_prefix>package cn.handyplus.chat.hook;

import cn.handyplus.chat.PlayerChat;
import me.clip.placeholderapi.PlaceholderAPI;
import org.bukkit.entity.Player;

import java.util.List;

/**
 * 变量工具类
 *
 * @author handy
 */
public class PlaceholderApiUtil {

    /**<fim_suffix>
    public static String set(Player player, String str) {
        if (!PlayerChat.USE_PAPI || player == null) {
            return str;
        }
        // 是否包含变量
        if (PlaceholderAPI.containsPlaceholders(str)) {
            str = PlaceholderAPI.setPlaceholders(player, str);
        }
        // 双重解析,处理变量嵌套变量
        if (PlaceholderAPI.containsPlaceholders(str)) {
            str = PlaceholderAPI.set<fim_middle>","
     * 替换变量
     *
     * @param player 玩家
     * @param str    字符串
     * @return 新字符串
     */","
     * 替换变量
     *
     * @param player 玩家
     * @param str    字符串
     * @return 替换后的字符串
   "
"<fim_prefix>PlayerChat.USE_PAPI || player == null) {
            return str;
        }
        // 是否包含变量
        if (PlaceholderAPI.containsPlaceholders(str)) {
            str = PlaceholderAPI.setPlaceholders(player, str);
        }
        // 双重解析,处理变量嵌套变量
        if (PlaceholderAPI.containsPlaceholders(str)) {
            str = PlaceholderAPI.setPlaceholders(player, str);
        }
        return str;
    }

    /**<fim_suffix>
    public static List<String> set(Player player, List<String> strList) {
        if (!PlayerChat.USE_PAPI || player == null) {
            return strList;
        }
        // 解析变量
        strList = PlaceholderAPI.setPlaceholders(player, strList);
        // 双重解析,处理变量嵌套变量
        return PlaceholderAPI.setPlaceholders(player, strList);
    }

}<fim_middle>","
     * 替换变量
     *
     * @param player  玩家
     * @param strList 字符串集合
     * @return 新字符串集合
     */","
     * 解析变量
     *
     * @param player 玩家
     * @param str    字符串
     * @return 解析后的字符串
    "
"<fim_prefix>package com.example.myapplication.ui;

/**<fim_suffix>
public class Piece_map {
    public int x;
    public int y;

    public Piece_map(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
<fim_middle>","
 * 屏幕坐标与棋盘坐标的映射
 */","
 * Created by Administrator on 2017/11/28.
 */"
"<fim_prefix>/*<fim_suffix>

package p_JavaPatterns;

import java.awt.Color;
import java.awt.Toolkit;
import javax.swing.JFrame;

public class C_JFrame {//класс

	//конструктор с параметрами
public C_JFrame(JFrame frame, String title, boolean resizable,int width,int height,Color background){
	frame.setTitle(title);//установить заголовок
	frame.setResizable(resizable);//установить возможность изменени€ границ окна
	//уста<fim_middle>","Ётот класс обеспечивает создание JFrame окна дл€ класса,
 * создающего экземпл€р данного класса, а также создание заставки
 *
 * ƒл€ этого необходимо в вызывающем классе прописать код:
 *
 *
 *		JFrame frame=new JFrame();
 *
 *		public Main(){
 * 			new C_JFrame(frame,""LYRICS v.1.1"",false,600,800,Color.cyan, new int[]{5,5,2009});
 * 		}
 *
 * где ""frame"" - объект в главном классе, содержащий окно JFrame дл€ главного класса
 * где ""LYRICS v.1.1"" - заголовок окна с версией программы
 * где ""false"" - возможность изменени€ границ окна типа boolean
 * где 600,800 - ширина и высота окна
 * где Color.cyan - фоновый цвет окна
 * где new int[]{5,5,2009} - массив с параметрами заставки
 * 		(5,5 - координаты отображени€ заставки, 2009 - год)
 *
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package io.github.ramerf.wind.core.helper;
<fim_middle>","
 * 常用辅助工具.
 *
 * @since 2020/5/5
 * @author ramer
 */","
 * 常量类.
 *
 * @author ramer
 */"
"<fim_prefix>/**<fim_suffix>
package cn.edu.gzmu.controller;<fim_middle>","
 * 控制器，用来处理 <a href=""https://docs.spring.io/spring-data/rest/docs/current/reference/html/"">Spring data rest</> 未提供的服务.
 *
 * <p>
 * 注意的是，在路径相同的时候，他可能会完全覆盖 spring data rest 的配置，例如路径为
 * {@code /{resource}/search/} 时，会覆盖 {@link cn.edu.gzmu.repository.base.BaseRepository} 中的自定义方法。
 * 所以在 此处 进行书写时，请注意路径不要覆盖以及重复的问题。
 * </p>
 *
 * <b>另一方面，在每次资源处理的时候，如果响应中拥有响应体，请务必将其封装为符合 restful 规范的响应体。</b>
 *
 * <p>
 * 这里的 {@code redis} 同样被 redisson 进行管理，  {@link cn.edu.gzmu.config.RedisConfig} 配置文件路径。
 * </p>
 *
 * @author echo
 * @version 1.0
 * @date 19-4-13 20:19
 */","
 * @author <a href=""https://echocow.cn"">EchoCow</a>
 * @date 2019/12/27 下午3:01
 */"
"<fim_prefix>package help.lixin.starlink.plugin.jsch.action.domain.command;

/**<fim_suffix>
public enum ExecuteSuccessStrategy {
    /**
     * 所有的都执行成功, 才会成功.
     */
    ALL_SUCCESS,
    /**
     * 只要有一个执行成功,则成功.
     */
    LEAST_ONCE
}
<fim_middle>","
 * 执行成功策略.
 */","
 * 执行成功策略
 *
"
"<fim_prefix>package help.lixin.starlink.plugin.jsch.action.domain.command;

/**
 * 执行成功策略.
 */
public enum ExecuteSuccessStrategy {
    /**
     * 所有的都执行成功, 才会成功.
     */
    ALL_SUCCESS,
    /**<fim_suffix>
    LEAST_ONCE
}
<fim_middle>","
     * 只要有一个执行成功,则成功.
     */","
     * 只有一个成功, 才会成功.
    "
"<fim_prefix>package help.lixin.starlink.plugin.jsch.action.domain.command;

/**
 * 执行成功策略.
 */
public enum ExecuteSuccessStrategy {
    /**<fim_suffix>
    ALL_SUCCESS,
    /**
     * 只要有一个执行成功,则成功.
     */
    LEAST_ONCE
}
<fim_middle>","
     * 所有的都执行成功, 才会成功.
     */","
     * 所有执行成功,则成功.
     */"
"<fim_prefix>lementierung des @{@link EKKostVerschCalculator}-Inteface
 */
public final class CFConfig {

    private static double precision = 0.001;

    private static EKKostVerschCalculator ekKostVerschCalculator = new TaxShieldEKKostVerschCalculator();

    /**
     * Konstruktor für CFConfig, der das Initieren verhindern, da alle Methoden statisch sind.
     */
    private CFConfig() {
    }

    /**<fim_suffix>
    public static EKKostVerschCalculator getEkKostVerschCalculator() {
        return ekKostVerschCalculator;
    }

    public static void setEkKostVerschCalculator(final EKKostVerschCalculator ekKostVerschCalculator) {
        CFConfig.ekKostVerschCalculator = ekKostVerschCalculator;
    }

    /**
     * Getter Methode für die gewünschte Präzision.
     * 
     * @return Gibt die Präzision al<fim_middle>","
     * Gibt ein Objekt zurück, mit dem die EK-Kosten berechnet werden können.
     * 
     * @return Gibt eine Implementierung des @{@link EKKostVerschCalculator} zurück.
     */","
     * Getter Methode für die gewünschte Präzision.
     * 
     * @return Gibt die Präzision alligermaßen zurück.  CFConfig: EKKostVerschCalculator wird jetzt über die Setter-"
"<fim_prefix>ckage dhbw.ka.mwi.businesshorizon2.cf;

/**
 * Enthält die Einstellungen der Libary:
 *      -gewünschte Präzension bei Iterationen
 *      -Implementierung des @{@link EKKostVerschCalculator}-Inteface
 */
public final class CFConfig {

    private static double precision = 0.001;

    private static EKKostVerschCalculator ekKostVerschCalculator = new TaxShieldEKKostVerschCalculator();

    /**<fim_suffix>
    private CFConfig() {
    }

    /**
     * Gibt ein Objekt zurück, mit dem die EK-Kosten berechnet werden können.
     * 
     * @return Gibt eine Implementierung des @{@link EKKostVerschCalculator} zurück.
     */
    public static EKKostVerschCalculator getEkKostVerschCalculator() {
        return ekKostVerschCalculator;
    }

    public static void setEkKostVerschCalculator(final EKKost<fim_middle>","
     * Konstruktor für CFConfig, der das Initieren verhindern, da alle Methoden statisch sind.
     */","
     * Privater Konstruktor.
     */"
"<fim_prefix>

    public static void setEkKostVerschCalculator(final EKKostVerschCalculator ekKostVerschCalculator) {
        CFConfig.ekKostVerschCalculator = ekKostVerschCalculator;
    }

    /**
     * Getter Methode für die gewünschte Präzision.
     * 
     * @return Gibt die Präzision als double Wert zurück.
     */
    public static double getPrecision() {
        return precision;
    }

    /**<fim_suffix>
    public static void setPrecision(final double precision) {
        CFConfig.precision = precision;
    }
}
<fim_middle>","
     * Setter Methode um die Präzision der Unternehmenswertberechnung über alle Verfahren hinweg gleich zu setzen.
     * @param precision double Wert für die Präzision; empfohlen: 0.001
     */","
     * Setter Methode für die gewünschte Präzision.
     * 
     * @param precision Gibt die Präzision als double Wert zurück.
     */"
"<fim_prefix>  * 
     * @return Gibt eine Implementierung des @{@link EKKostVerschCalculator} zurück.
     */
    public static EKKostVerschCalculator getEkKostVerschCalculator() {
        return ekKostVerschCalculator;
    }

    public static void setEkKostVerschCalculator(final EKKostVerschCalculator ekKostVerschCalculator) {
        CFConfig.ekKostVerschCalculator = ekKostVerschCalculator;
    }

    /**<fim_suffix>
    public static double getPrecision() {
        return precision;
    }

    /**
     * Setter Methode um die Präzision der Unternehmenswertberechnung über alle Verfahren hinweg gleich zu setzen.
     * @param precision double Wert für die Präzision; empfohlen: 0.001
     */
    public static void setPrecision(final double precision) {
        CFConfig.precision = precision;
    }
}
<fim_middle>","
     * Getter Methode für die gewünschte Präzision.
     * 
     * @return Gibt die Präzision als double Wert zurück.
     */","
     * Getter Methode um die Präzision der Unternehmenswertberechnung über alle Verfahren hinweg zu erhalten.
     * @return double Wert für die Präzision; emp"
"<fim_prefix>package dhbw.ka.mwi.businesshorizon2.cf;

/**<fim_suffix>
public final class CFConfig {

    private static double precision = 0.001;

    private static EKKostVerschCalculator ekKostVerschCalculator = new TaxShieldEKKostVerschCalculator();

    /**
     * Konstruktor für CFConfig, der das Initieren verhindern, da alle Methoden statisch sind.
     */
    private CFConfig() {
    }

    /**
     * Gibt ein Objekt zurück, mit dem die EK-Kosten berechne<fim_middle>","
 * Enthält die Einstellungen der Libary:
 *      -gewünschte Präzension bei Iterationen
 *      -Implementierung des @{@link EKKostVerschCalculator}-Inteface
 */","
 * Klasse für die Konfiguration der Anwendung.
 */"
"<fim_prefix>package mx.unam.ciencias.edd.proyecto2.svg;

/**<fim_suffix>
public class DibujaArreglosSvg {
    
    private int [] arreglo;

    public DibujaArreglosSvg(int [] arreglo){
        this.arreglo = arreglo;
    }

    public String dibujaSvg(){
        
        String svg = SvgUlti.XML_PROLOG;

        int longitud = arreglo.length;
        double witdh = (60*longitud) - 20;

        svg += SvgUlti.getOpneSvg(witdh, 100);
        double x = 20 * (witdh / 100);
       <fim_middle>","
 * Clase para bibujar Arreglos en SVG.
 */","
 * Clase que dibuja un arreglo de enteros en"
"<fim_prefix>package cqt.goai.run.notice;

/**<fim_suffix>
public enum NoticeType {
    /**
     * 邮箱
     */
    Email,
    /**
     * 电报
     */
    Telegram
}
<fim_middle>","
 * 通知类型
 *
 * @author goai
 */","
 * @author Bingo
 * @date 2019/12/23"
"<fim_prefix>package cqt.goai.run.notice;

/**
 * 通知类型
 *
 * @author goai
 */
public enum NoticeType {
    /**
     * 邮箱
     */
    Email,
    /**<fim_suffix>
    Telegram
}
<fim_middle>","
     * 电报
     */","
     * 钉钉
   "
"<fim_prefix>package cqt.goai.run.notice;

/**
 * 通知类型
 *
 * @author goai
 */
public enum NoticeType {
    /**<fim_suffix>
    Email,
    /**
     * 电报
     */
    Telegram
}
<fim_middle>","
     * 邮箱
     */","
     * 邮件
     */"
"<fim_prefix>package org.haic.often.tuple.record;

/**<fim_suffix>
public record FourTuple<A, B, C, D>(A first, B second, C third, D fourth) {}
<fim_middle>","
 * Tuple的实现,用于记录多个参数
 */","
 * @author <NAME>
 * @version"
"<fim_prefix>package com.cownew.cownewsql.ast.node.stmt;

import antlr.collections.AST;

import com.cownew.cownewsql.ast.node.SQLBaseAST;
/**<fim_suffix>
abstract public class SqlStmtBaseAST extends SQLBaseAST
{
	public SqlStmtBaseAST(){
		super();
	}
	public SqlStmtBaseAST(String text){
		super(text);
	}
	public SqlStmtBaseAST(String text,int type){
		super(text,type);
	}
	public SqlStmtBaseAST(AST ast){
		super(ast);
	}
}
<fim_middle>","
 * sql语句的基类
 * @author 杨中科
 *
 */","
 * 语句节点
 * @author gaofeng
 *
 */"
"<fim_prefix>package pama1234.gdx.game.sandbox.platformer;

import pama1234.gdx.util.ui.CompositionUtil;

/**<fim_suffix>
public class CompositionUtilLocal extends CompositionUtil{
}
<fim_middle>","
 * 用来调整UI尤其是按钮UI的位置的类，已搬到framework
 */","
 * Created by <NAME> on 2016/11/04.
 */"
"<fim_prefix>/**<fim_suffix>
package es.inteco.xbrl.lenlocpenloc.config.format;<fim_middle>","
 * Clases que definen el formato del informe
 * 
 */","
 * @author <NAME> (inteco)
 *
"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.component.prjserver;
<fim_middle>","
 * <p>
 * TODO: パッケージコメントを記述
 * </p>
 */","
 * @author yamamoto
 *
 */"
"<fim_prefix>/*<fim_suffix>
package net.matrix.java.util;

import java.util.Collections;
import java.util.Enumeration;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class EnumerationIterableTest {
    @Test
    void testIterator() {
        Enumeration<String> enumeration = Collections.enumeration(Collections.singletonList(""a""));

        EnumerationIterable<String> iterable = new Enum<fim_middle>","
 * 版权所有 2024 Matrix。
 * 保留所有权利。
 */","*
 * Copyright (c) 2018 <NAME>
 *
 * Permission is hereby granted"
"<fim_prefix>package com.fit2cloud.common.constants;

/**<fim_suffix>
public enum SensitiveFieldConstants {
    password, email, phone, pwd,ak ,sk, accessKeyId, accessKeySecret, secret, secretId, secretKey, vPassword;
}
<fim_middle>","
 * 敏感属性
 */","
 * Created by dusuo on"
"<fim_prefix>package com.hawk.framework.pub.web;

/**<fim_suffix>
public interface ResponseData {
	
	
}
<fim_middle>","
 * 标记接口,所有的web返回结果的数据部分,都需要用该接口标记
 * @author pzhang1
 *
 */","
 * 响应数据
 * @author hawk
 *
 */"
"<fim_prefix>/**<fim_suffix>
package br.gov.camara.edemocracia.portlets.priorizacao;

import com.liferay.portal.kernel.exception.PortalException;

/**
 * Exceção lançada quando, durante uma mudança de configuração, detectar que há
 * usuários que já votaram mais do que o novo máximo permitido em uma proposta
 * 
 * @author p_7339
 * 
 */
public class UsuariosComMaisVotosPorPropostaException extends PortalException {

}
<fim_middle>","
 * Copyright (c) 2009-2014 Câmara dos Deputados. Todos os direitos reservados.
 *
 * e-Democracia é um software livre; você pode redistribuí-lo e/ou modificá-lo dentro
 * dos termos da Licença Pública Geral Menor GNU como publicada pela Fundação do 
 * Software Livre (FSF); na versão 2.1 da Licença, ou (na sua opinião) qualquer versão.
 *
 * Este programa é distribuído na esperança de que possa ser  útil, mas SEM NENHUMA GARANTIA;
 * sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR.
 * Veja a Licença Pública Geral Menor GNU para maiores detalhes. 
 */","
 * 
 * @author p_7339
 * 
 */"
"<fim_prefix>ião) qualquer versão.
 *
 * Este programa é distribuído na esperança de que possa ser  útil, mas SEM NENHUMA GARANTIA;
 * sem uma garantia implícita de ADEQUAÇÃO a qualquer MERCADO ou APLICAÇÃO EM PARTICULAR.
 * Veja a Licença Pública Geral Menor GNU para maiores detalhes. 
 */
package br.gov.camara.edemocracia.portlets.priorizacao;

import com.liferay.portal.kernel.exception.PortalException;

/**<fim_suffix>
public class UsuariosComMaisVotosPorPropostaException extends PortalException {

}
<fim_middle>","
 * Exceção lançada quando, durante uma mudança de configuração, detectar que há
 * usuários que já votaram mais do que o novo máximo permitido em uma proposta
 * 
 * @author p_7339
 * 
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.vlad805.fmradio.helper.json;

import org.json.JSONObject;

/**<fim_suffix>
public interface IJsonable {
	public JSONObject toJson();
}
<fim_middle>","
 * vlad805 (c) 2020
 */","
 * Created by vlad on 11.02."
"<fim_prefix>package com.easyink.wecom.domain.dto.autotag;

import io.swagger.annotations.ApiModelProperty;
import lombok.Data;

import javax.validation.constraints.NotEmpty;
import java.util.List;

/**<fim_suffix>
@Data
public class TagRuleBatchStatusDTO {

    @ApiModelProperty(""启用禁用状态 0:禁用1:启用"")
    private Boolean status;
    @NotEmpty(message = ""请至少选择一个修改的目标"")
    @ApiModelProperty(""规则id列表"")
    private List<Long> idList;
    private String corpId;
}
<fim_middle>","
 * 批量启用禁用DTO
 *
 * @author tigger
 * 2022/3/1 15:31
 **/","
 * @author 田径
 * @title
 * @date 9:58
 * @description
 */"
"<fim_prefix>package cf.vbnm.gui.components;

/**<fim_suffix>
public enum Direction {
	/**
	 * 上
	 */
	UP,
	/**
	 * 下
	 */
	DOWN,
	/**
	 * 右
	 */
	RIGHT,
	/**
	 * 左
	 */
	LEFT
}
<fim_middle>","
 * 蛇可以前进的所有方向
 */","
 * 方向
 * @author vbnm
 *"
"<fim_prefix>package cf.vbnm.gui.components;

/**
 * 蛇可以前进的所有方向
 */
public enum Direction {
	/**
	 * 上
	 */
	UP,
	/**
	 * 下
	 */
	DOWN,
	/**<fim_suffix>
	RIGHT,
	/**
	 * 左
	 */
	LEFT
}
<fim_middle>","
	 * 右
	 */","
	 * 右"
"<fim_prefix>package cf.vbnm.gui.components;

/**
 * 蛇可以前进的所有方向
 */
public enum Direction {
	/**
	 * 上
	 */
	UP,
	/**<fim_suffix>
	DOWN,
	/**
	 * 右
	 */
	RIGHT,
	/**
	 * 左
	 */
	LEFT
}
<fim_middle>","
	 * 下
	 */","
	 * 下
	 */"
"<fim_prefix>package cf.vbnm.gui.components;

/**
 * 蛇可以前进的所有方向
 */
public enum Direction {
	/**<fim_suffix>
	UP,
	/**
	 * 下
	 */
	DOWN,
	/**
	 * 右
	 */
	RIGHT,
	/**
	 * 左
	 */
	LEFT
}
<fim_middle>","
	 * 上
	 */","
	 * 上
	 */"
"<fim_prefix>package cf.vbnm.gui.components;

/**
 * 蛇可以前进的所有方向
 */
public enum Direction {
	/**
	 * 上
	 */
	UP,
	/**
	 * 下
	 */
	DOWN,
	/**
	 * 右
	 */
	RIGHT,
	/**<fim_suffix>
	LEFT
}
<fim_middle>","
	 * 左
	 */","
	 * 左"
"<fim_prefix>package org.xson.tangyuan.executor;

/**<fim_suffix>
public interface IServiceExceptionInfo {
	
}
<fim_middle>","
 * Service执行过程中的异常辅助信息
 */","
 * 异常信息
 * 
 * @author"
"<fim_prefix>package ru.ecom.expomc.ejb.services.check.checkers;

import ru.nuzmsh.commons.formpersistence.annotation.Comment;

/**<fim_suffix>
@Comment(""Замена букв O (русскую) и O (латинскую) на 0 (ноль)"")
public class ChangeOToZero extends AbstractChangeLetters {

    public ChangeOToZero() {
        super() ;
        put('О', '0');
        put('O', '0');
    }
}
<fim_middle>","
 * Замена букв O (русскую) и O (латинскую) на 0 (ноль)
 */","
 * Created by <NAME> on 02.04.2016.
 */"
"<fim_prefix>package osmo.tester.examples.helloworld.online;

import org.junit.runner.RunWith;
import osmo.tester.OSMOConfiguration;
import osmo.tester.generator.endcondition.Length;
import osmo.tester.reporting.junit.OSMOConfigurationFactory;
import osmo.tester.reporting.junit.OSMORunner;

/**<fim_suffix>
@RunWith(OSMORunner.class)
public class JUnitTests {
  @OSMOConfigurationFactory
  public static OSMOConfiguration configure() {
    OSMOConfiguration config = new OSMOConfiguration();
    config.setSeed(345);
    config.addModelObject(new OnlineHelloModel());
    config.setJUnitLength(3);
    config.addTestEndCondition(new Length(5));
    return config;
  }
}
<fim_middle>", @author Teemu Kanstren */,"
 * This is a simple example of a"
"<fim_prefix>/**<fim_suffix>
package nami.beitrag.letters;

<fim_middle>","
 * Enthält Klassen, die Briefe als LaTeX-Quelltexte erzeugen und
 * anschließend kompilieren können.
 * 
 * @author Fabian Lipp
 */","
 * @author <NAME>
 */"
"<fim_prefix>package com.fly.jdbc;

import java.util.ArrayList;
import java.util.List;

/**<fim_suffix>
public class SAP {

	
	public String sql = """";
	public List<Object> args = new ArrayList<Object>();

	
	
	
	
	
	
}
<fim_middle>","
 * SqlFly的执行辅助类
 */","
 * 
 * @author Administrator
 *
"
"<fim_prefix>package ru.ecom.mis.ejb.domain.medcase.voc;

import ru.ecom.ejb.domain.simple.VocBaseEntity;

import javax.persistence.Entity;

/**<fim_suffix>
@Entity
public class VocLeftRight  extends VocBaseEntity {
}
<fim_middle>", Справочник лвевый - правый*/,"
 * Created by <NAME> on 26.04."
"<fim_prefix>package ru.bgcrm.dao;

import java.sql.Connection;

/**<fim_suffix>
@Deprecated
public class ParamLogDAO extends org.bgerp.dao.param.ParamLogDAO {
    public ParamLogDAO(Connection con) {
        super(con);
    }
}
<fim_middle>","
 * @see org.bgerp.dao.param.ParamLogDAO
 */","
 * @author <NAME>
 * @version $Id$
 * @since 0"
"<fim_prefix>kage app.isparks.core.anotation;




import app.isparks.core.pojo.enums.LogType;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
public @interface Log {

    String value() default """";

    String description() default """";

    /**<fim_suffix>
    LogType[] types() default LogType.UNKNOWN;
}
<fim_middle>","
     * 日志类型 / 调用的接口（方法）类型
     */","
     * 日志类型
     */"
"<fim_prefix>package cxc;

import java.io.Serializable;

/**<fim_suffix>
public enum Modifier implements Serializable {
    PUBLIC,
    DEFAULT,
    PRIVATE
}
<fim_middle>","
 *
 * @author Erdem Ayaz
 */","
 * Created by cxc Coder on 2017/6/28"
"<fim_prefix>package com.tom.marmot.test;

/**<fim_suffix>
public interface TestService {
    /**
     * 测试用服务类方法
     * @return Boolean
     */
    Boolean checkExists();
}
<fim_middle>","
 * 测试用服务类接口
 *
 * @author : tdl
 * @date : 2019/7/1 下午1:52
 **/","
 * @author WangTao
 */"
"<fim_prefix>package com.tom.marmot.test;

/**
 * 测试用服务类接口
 *
 * @author : tdl
 * @date : 2019/7/1 下午1:52
 **/
public interface TestService {
    /**<fim_suffix>
    Boolean checkExists();
}
<fim_middle>","
     * 测试用服务类方法
     * @return Boolean
     */","
     * 测试方法
     *
     * @return
   "
"<fim_prefix>package com.lifei.algorithms.chapter1_2;

import edu.princeton.cs.algs4.Counter;

/**<fim_suffix>
public class Exercise_10 {
	
	public static void main(String[] args) {
		
		// 代码详细参见 VisualCounter.java
		
		// 代码详细参见 VisualCounter.java
		
		// 代码详细参见 VisualCounter.java
		
	}
	
}

<fim_middle>","
 * 题目：
 * 1.2.10 编写一个类 VisualCounter，支持加一和减一操作。它的构造函数接受两个参数 N 和 max，
 * 		其中 N 指定了操作的最大次数， max 指定了计数器的最大绝对值。作为副作用，用图像显示每次计数器变化后的值。
 * @author LiFei
 *
 */","
 * 练习题 1.2.1
 *
 * @author <a href=""mailto:<EMAIL>"">xianlei</a>
 * @date 2017/2/28 下午2:00
 */"
"<fim_prefix>/**
 *
 */
package cz.geokuk.plugins.kesoid;

/**<fim_suffix>
public abstract class Weikoid0 {

	// Propojení do kruhu všech waypointů jednoho kešoidu.
	protected Weikoid0 next = this;
}
<fim_middle>","
 * Spoločný předek kešoidu a waypointu.
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package cc.gzvtc.spots.dao;

import cc.gzvtc.common.dao.BaseMapper;
import cc.gzvtc.model.TSpots;

/**<fim_suffix>
public interface SpotsDao extends BaseMapper<TSpots>{

}<fim_middle>","
 * 
 * @author hzc 2017年2月12日
 *
 */","
 * Created by DELL(mxd) on 2021/1/18 15:"
"<fim_prefix>package cn.lili.modules.member.entity.enums;


import lombok.Getter;

@Getter
public enum QRCodeLoginSessionStatusEnum {

    /**<fim_suffix>
    WAIT_SCANNING(0,""等待扫码""),

    /**
     * app端已经扫码，等待确认同意登录
     */
    SCANNING(1,""已经扫码""),

    /**
     * 用户在app端点击了同意登录
     */
    VERIFIED(2,""确认登录""),

    /**
     * 用户在app端点击了取消登录
     */
    CANCELED(3,""取消登录""),

    /**
     * 二维码不存在/或者已经过期
     */
    NO_EXIST(4,""二维码已过期"")

    ;


    private Integer code;

    private String desc;


    QRCodeLoginSessionStatusEnum(Integer code,String desc){
   <fim_middle>","
     * 二维码创建完毕，等待app端扫码
     */","
     * 用户未扫码
     */"
"<fim_prefix>package cn.lili.modules.member.entity.enums;


import lombok.Getter;

@Getter
public enum QRCodeLoginSessionStatusEnum {

    /**
     * 二维码创建完毕，等待app端扫码
     */
    WAIT_SCANNING(0,""等待扫码""),

    /**
     * app端已经扫码，等待确认同意登录
     */
    SCANNING(1,""已经扫码""),

    /**
     * 用户在app端点击了同意登录
     */
    VERIFIED(2,""确认登录""),

    /**
     * 用户在app端点击了取消登录
     */
    CANCELED(3,""取消登录""),

    /**<fim_suffix>
    NO_EXIST(4,""二维码已过期"")

    ;


    private Integer code;

    private String desc;


    QRCodeLoginSessionStatusEnum(Integer code,String desc){
        this.code = code;
        this.desc = desc;
    }
}
<fim_middle>","
     * 二维码不存在/或者已经过期
     */","
     * 二维码已过期
     */"
"<fim_prefix>package cn.lili.modules.member.entity.enums;


import lombok.Getter;

@Getter
public enum QRCodeLoginSessionStatusEnum {

    /**
     * 二维码创建完毕，等待app端扫码
     */
    WAIT_SCANNING(0,""等待扫码""),

    /**
     * app端已经扫码，等待确认同意登录
     */
    SCANNING(1,""已经扫码""),

    /**
     * 用户在app端点击了同意登录
     */
    VERIFIED(2,""确认登录""),

    /**<fim_suffix>
    CANCELED(3,""取消登录""),

    /**
     * 二维码不存在/或者已经过期
     */
    NO_EXIST(4,""二维码已过期"")

    ;


    private Integer code;

    private String desc;


    QRCodeLoginSessionStatusEnum(Integer code,String desc){
        this.code = code;
        this.desc = desc;
    }
}
<fim_middle>","
     * 用户在app端点击了取消登录
     */","
     * 用户在app端点击了拒绝登录
     */"
"<fim_prefix>package cn.lili.modules.member.entity.enums;


import lombok.Getter;

@Getter
public enum QRCodeLoginSessionStatusEnum {

    /**
     * 二维码创建完毕，等待app端扫码
     */
    WAIT_SCANNING(0,""等待扫码""),

    /**
     * app端已经扫码，等待确认同意登录
     */
    SCANNING(1,""已经扫码""),

    /**<fim_suffix>
    VERIFIED(2,""确认登录""),

    /**
     * 用户在app端点击了取消登录
     */
    CANCELED(3,""取消登录""),

    /**
     * 二维码不存在/或者已经过期
     */
    NO_EXIST(4,""二维码已过期"")

    ;


    private Integer code;

    private String desc;


    QRCodeLoginSessionStatusEnum(Integer code,String desc){
        this.code = code;
        this.desc = desc;
    }
}
<fim_middle>","
     * 用户在app端点击了同意登录
     */","
     * 用户在app端点击了确认登录
     */"
"<fim_prefix>package cn.lili.modules.member.entity.enums;


import lombok.Getter;

@Getter
public enum QRCodeLoginSessionStatusEnum {

    /**
     * 二维码创建完毕，等待app端扫码
     */
    WAIT_SCANNING(0,""等待扫码""),

    /**<fim_suffix>
    SCANNING(1,""已经扫码""),

    /**
     * 用户在app端点击了同意登录
     */
    VERIFIED(2,""确认登录""),

    /**
     * 用户在app端点击了取消登录
     */
    CANCELED(3,""取消登录""),

    /**
     * 二维码不存在/或者已经过期
     */
    NO_EXIST(4,""二维码已过期"")

    ;


    private Integer code;

    private String desc;


    QRCodeLoginSessionStatusEnum(Integer code,String desc){
        this.code = code;
        this.desc = desc;
    }
}
<fim_middle>","
     * app端已经扫码，等待确认同意登录
     */","
     * 二维码已经被扫码
     */"
"<fim_prefix>package de.sedico.sql.reading;

import de.sedico.partition.PartitionDescriptor;
import de.sedico.sql.OracleSQLBuilder;
import de.sedico.sql.SQLBuilder;

/**<fim_suffix>
public class OracleSQLReaderStrategy extends SQLReaderStrategyBase {
    public OracleSQLReaderStrategy(PartitionDescriptor partition) {
        super(partition);
    }
/**
 * Diese Methode erzeugt einen SQLBuilder.
 * @return new OracleSQLBuilder() - Erzeuger der SQL-Datenbank
 */
    @Override
    protected SQLBuilder createSQLBuilder() {
        return new OracleSQLBuilder();
    }
}
<fim_middle>","
 * Diese Klasse implementiert die Lesestrategie der Oracle-Datenbank. Sie implementiert die SQLReaderStrategyBase.
 * @author jens
 *
 */","
 * Diese Klasse erzeugt einen SQLReaderStrategy für Oracle.
 * @author <NAME>
 */"
"<fim_prefix>scriptor;
import de.sedico.sql.OracleSQLBuilder;
import de.sedico.sql.SQLBuilder;

/**
 * Diese Klasse implementiert die Lesestrategie der Oracle-Datenbank. Sie implementiert die SQLReaderStrategyBase.
 * @author jens
 *
 */
public class OracleSQLReaderStrategy extends SQLReaderStrategyBase {
    public OracleSQLReaderStrategy(PartitionDescriptor partition) {
        super(partition);
    }
/**<fim_suffix>
    @Override
    protected SQLBuilder createSQLBuilder() {
        return new OracleSQLBuilder();
    }
}
<fim_middle>","
 * Diese Methode erzeugt einen SQLBuilder.
 * @return new OracleSQLBuilder() - Erzeuger der SQL-Datenbank
 */","
 * Diese Methode erstellt einen SQLBuilder.
 * @return SQLBuilder
 */"
"<fim_prefix>/**<fim_suffix>
@SuppressWarnings({""requires-automatic"", ""requires-transitive-automatic""})
module io.github._4drianed.authmevelocity.api.paper {
    requires transitive org.bukkit;
    requires static org.jetbrains.annotations;
    exports io.github._4drian3d.authmevelocity.api.paper.event;
}
<fim_middle>",AuthMeVelocity Paper API Module */,"
 * @author _4d"
"<fim_prefix>re.net.coder;

import com.sencorsta.ids.core.config.GlobalConfig;
import com.sencorsta.ids.core.net.protocol.RpcMessage;
import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.MessageToMessageEncoder;
import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
import lombok.extern.slf4j.Slf4j;

import java.util.Arrays;
import java.util.List;

/**<fim_suffix>
@Slf4j
public final class IdsWsEncoder extends MessageToMessageEncoder<RpcMessage> {
	@Override
	protected void encode(ChannelHandlerContext channelHandlerContext, RpcMessage msg, List<Object> list) throws Exception {
		BinaryWebSocketFrame frame=new BinaryWebSocketFrame();
		ByteBuf out=frame.content();
		msg.encode(out);

		if (GlobalConfig.IS_DEBUG) {
			out.markReaderIndex();
			byte[] temp = new byte[o<fim_middle>","
 * 发送消息编码类
 * @author ICe
 */","
 * @author <NAME>
 */"
"<fim_prefix>package sep.fimball.model.physics.element;

/**<fim_suffix>
public interface Modify
{

}
<fim_middle>","
 * Ein Modify dient als Observer-Interface für alle Modifies, welche Daten für Änderungen an Physikelemente speichern.
 */","
 * Interface for all objects that can be modified.
 * 
 * @author <NAME>
 * @version 1.0
 * @"
"<fim_prefix>package com.rzg.zombieland.comunes.comunicacion.pojo;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.junit.Test;

import com.rzg.zombieland.comunes.misc.ParametrosNoValidosException;

/**<fim_suffix>
public class POJOInicioSesionTest {

    /**
     * Intenta construir un pojo con valores válidos.
     * @throws ParametrosNoValidosException no debería.
     */
    @Test
    public void testValido() throws ParametrosNoValidosException {
        POJOInicioSesion pojo = new POJOInicioSesion(""juan"", ""1234"");
        assertEquals(""juan"", pojo.getNombre());
        assertEquals(""1234"", pojo.getClave());
    }<fim_middle>","
 * Verifica el correcto funcionamiento del POJO de inicio de sesión.
 * @author nicolas
 *
 */","
 * Pruebas unitarias para POJOInicioSesion.
 * @author <NAME>
 */"
"<fim_prefix>POJOInicioSesionTest {

    /**
     * Intenta construir un pojo con valores válidos.
     * @throws ParametrosNoValidosException no debería.
     */
    @Test
    public void testValido() throws ParametrosNoValidosException {
        POJOInicioSesion pojo = new POJOInicioSesion(""juan"", ""1234"");
        assertEquals(""juan"", pojo.getNombre());
        assertEquals(""1234"", pojo.getClave());
    }
    
    /**<fim_suffix>
    @Test
    public void testNoValido() {
        try {
            new POJOInicioSesion("""", """");
            fail(""Debería haber lanzado una excepción"");
        } catch (ParametrosNoValidosException e) {
            assertEquals(2, e.getCantidadParametros());
        }
    }
}
<fim_middle>","
     * Intenta construir un pojo con ambos valores no válidos.
     */","
     * Intenta construir un pojo con valores inválidos.
     */"
"<fim_prefix>package com.rzg.zombieland.comunes.comunicacion.pojo;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.junit.Test;

import com.rzg.zombieland.comunes.misc.ParametrosNoValidosException;

/**
 * Verifica el correcto funcionamiento del POJO de inicio de sesión.
 * @author nicolas
 *
 */
public class POJOInicioSesionTest {

    /**<fim_suffix>
    @Test
    public void testValido() throws ParametrosNoValidosException {
        POJOInicioSesion pojo = new POJOInicioSesion(""juan"", ""1234"");
        assertEquals(""juan"", pojo.getNombre());
        assertEquals(""1234"", pojo.getClave());
    }
    
    /**
     * Intenta construir un pojo con ambos valores no válidos.
     */
    @Test
    public void testNoValido() {
        try {
            new POJOI<fim_middle>","
     * Intenta construir un pojo con valores válidos.
     * @throws ParametrosNoValidosException no debería.
     */","
     * Intenta construir un pojo con ambos valores válidos.
     */"
"<fim_prefix>
/**<fim_suffix>
package es.inteco.xbrl.pgc.transform.config;<fim_middle>","
 * Contiene las clases generadas automáticamente por Castor para el acceso
 * a la configuración de informes y módulos que componen PGC2007.
 *  
 */","
 * @author <NAME> (inteco)
 *
 */"
"<fim_prefix>/*<fim_suffix>
/**
 * {@link java.text} 包的工具。
 */
package net.matrix.java.text;
<fim_middle>","
 * 版权所有 2024 Matrix。
 * 保留所有权利。
 */","*
 * {@link java.util} 包的工具。
 */"
"<fim_prefix>/*
 * 版权所有 2024 Matrix。
 * 保留所有权利。
 */
/**<fim_suffix>
package net.matrix.java.text;
<fim_middle>","
 * {@link java.text} 包的工具。
 */","
 *
 */"
"<fim_prefix>on si l'affirmation est erronée.
	 */
	TConjonction est(TObjet objetAttendu);

	/**
	 * Affirme que l'objet n'est pas celui attendu.
	 *
	 * @param objetNonAttendu l'objet non attendu.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */
	TConjonction nEstPas(TObjet objetNonAttendu);

	/**<fim_suffix>
	TConjonction respecte(Specification<TObjet> spécification);
}
<fim_middle>","
	 * Affirme que l'objet respecte la spécification.
	 *
	 * @param spécification la spécification à respecter.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */","
	 * Affirme que l'objet respecte la spécification.
	 *
	 * @param spécification la spécification.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */"
"<fim_prefix> la GNU Lesser General
 * Public License pour plus de détails.
 *
 * Vous devez avoir reçu une copie de la GNU Lesser General Public License en même temps que Cocoritest ; si ce n'est
  * pas le cas, consultez http://www.gnu.org/licenses.
 */

package fr.arpinum.cocoritest.affirmation.objet;

import fr.arpinum.cocoritest.conjonction.Conjonction;
import fr.arpinum.cocoritest.specification.Specification;

/**<fim_suffix>
public interface AffirmationObjet<TObjet, TConjonction extends Conjonction<? extends AffirmationObjet<TObjet,
		? extends TConjonction>>> {

	/**
	 * Affirme que l'objet est celui attendu.
	 *
	 * @param objetAttendu l'objet attendu.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */
	TC<fim_middle>","
 * Représente une affirmation concernant un objet typé.
 *
 * @param <TObjet>       le type de l'objet concerné par l'affirmation.
 * @param <TConjonction> le type de conjonction utilisé pour chaîner les affirmations.
 */","
 * Interface pour les affirmations sur des objets.
 *
 * @param <TObjet>                                                   "
"<fim_prefix>/*<fim_suffix>

package fr.arpinum.cocoritest.affirmation.objet;

import fr.arpinum.cocoritest.conjonction.Conjonction;
import fr.arpinum.cocoritest.specification.Specification;

/**
 * Représente une affirmation concernant un objet typé.
 *
 * @param <TObjet>       le type de l'objet concerné par l'affirmation.
 * @param <TConjonction> le type de conjonction utilisé pour chaîner les affirmations.
 */
public interface Aff<fim_middle>","
 * Copyright (C) 2013, Arpinum
 *
 * Cocoritest est un logiciel libre ; vous pouvez le redistribuer ou le modifier suivant les termes de la GNU Lesser
 * General Public License telle que publiée par la Free Software Foundation ; soit la version 3 de la licence,
 * soit (à votre gré) toute version ultérieure.
 *
 * Cocoritest est distribué dans l'espoir qu'il sera utile, mais SANS AUCUNE GARANTIE ; pas même la garantie
 * implicite de COMMERCIABILISABILITÉ ni d'ADÉQUATION à UN OBJECTIF PARTICULIER. Consultez la GNU Lesser General
 * Public License pour plus de détails.
 *
 * Vous devez avoir reçu une copie de la GNU Lesser General Public License en même temps que Cocoritest ; si ce n'est
  * pas le cas, consultez http://www.gnu.org/licenses.
 */","*
 * Représente une affirmation concernant un objet typé.
 *
 * @param <TObjet>       le type de l'objet concerné par l'affirmation.
 * @param <TConjonction> le type de conjonction utilisé pour chaîner les affirmations.
 */"
"<fim_prefix>coritest.specification.Specification;

/**
 * Représente une affirmation concernant un objet typé.
 *
 * @param <TObjet>       le type de l'objet concerné par l'affirmation.
 * @param <TConjonction> le type de conjonction utilisé pour chaîner les affirmations.
 */
public interface AffirmationObjet<TObjet, TConjonction extends Conjonction<? extends AffirmationObjet<TObjet,
		? extends TConjonction>>> {

	/**<fim_suffix>
	TConjonction est(TObjet objetAttendu);

	/**
	 * Affirme que l'objet n'est pas celui attendu.
	 *
	 * @param objetNonAttendu l'objet non attendu.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */
	TConjonction nEstPas(TObjet objetNonAttendu);

	/**
	 * Affirme que l'objet respecte la s<fim_middle>","
	 * Affirme que l'objet est celui attendu.
	 *
	 * @param objetAttendu l'objet attendu.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */","
	 * Affirme que l'objet est celui attendu.
	 *
	 * @param objetAttendu l'objet attendu.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */"
"<fim_prefix>TConjonction extends Conjonction<? extends AffirmationObjet<TObjet,
		? extends TConjonction>>> {

	/**
	 * Affirme que l'objet est celui attendu.
	 *
	 * @param objetAttendu l'objet attendu.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */
	TConjonction est(TObjet objetAttendu);

	/**<fim_suffix>
	TConjonction nEstPas(TObjet objetNonAttendu);

	/**
	 * Affirme que l'objet respecte la spécification.
	 *
	 * @param spécification la spécification à respecter.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */
	TConjonction respecte(Specification<TObjet> spécification);
}
<fim_middle>","
	 * Affirme que l'objet n'est pas celui attendu.
	 *
	 * @param objetNonAttendu l'objet non attendu.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */","
	 * Affirme que l'objet n'est pas celui attendu.
	 *
	 * @param objetNonAttendu l'objet non attendu.
	 * @return une conjonction pour chaîner d'autres affirmations
	 * @throws fr.arpinum.cocoritest.interne.affirmation.ExceptionAffirmation si l'affirmation est erronée.
	 */"
"<fim_prefix>/*<fim_suffix>
package com.pspace.ifs.ksan.gw.object.osdclient;

import org.apache.commons.pool2.PooledObjectFactory;
import org.apache.commons.pool2.impl.GenericObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import com.pspace.ifs.ksan.libs.osd.OSDClient;

public class OSDClientPool extends GenericObjectPool<OSDClient> {

    public OSDClientPool(PooledObjectFactory<OSDClient> factory, GenericOb<fim_middle>","
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
*/","*
 * @author <NAME>
 *
 */"
"<fim_prefix>package com.moekr.moocoder.util.enums;

public enum FileType {
	/**<fim_suffix>
	PUBLIC,
	/**
	 * 不可修改的文件，表示学生不可以修改该文件，进行测试时保持试题文件不变化
	 */
	PROTECTED,
	/**
	 * 隐藏文件，表示学生无法看到该文件，通常用于测试用例等
	 */
	PRIVATE
}
<fim_middle>","
	 * 可修改的文件，表示学生可以修改该文件，进行测试时应用学生的文件替换试题中的文件
	 */","
	 * 公共文件，表示学生可以查看该文件，进行测试时保持试题文件不变化
	 */"
"<fim_prefix>package com.moekr.moocoder.util.enums;

public enum FileType {
	/**
	 * 可修改的文件，表示学生可以修改该文件，进行测试时应用学生的文件替换试题中的文件
	 */
	PUBLIC,
	/**
	 * 不可修改的文件，表示学生不可以修改该文件，进行测试时保持试题文件不变化
	 */
	PROTECTED,
	/**<fim_suffix>
	PRIVATE
}
<fim_middle>","
	 * 隐藏文件，表示学生无法看到该文件，通常用于测试用例等
	 */","
	 * 私有文件，表示学生不能查看该文件，进行测试时保持试题文件不变化"
"<fim_prefix>package com.moekr.moocoder.util.enums;

public enum FileType {
	/**
	 * 可修改的文件，表示学生可以修改该文件，进行测试时应用学生的文件替换试题中的文件
	 */
	PUBLIC,
	/**<fim_suffix>
	PROTECTED,
	/**
	 * 隐藏文件，表示学生无法看到该文件，通常用于测试用例等
	 */
	PRIVATE
}
<fim_middle>","
	 * 不可修改的文件，表示学生不可以修改该文件，进行测试时保持试题文件不变化
	 */","
	 * 受保护的文件，表示学生只能看到该文件，不能修改，通常用于测试用例等
	 */"
"<fim_prefix>package org.futurepages.formatters;

import org.futurepages.util.EmojiUtil;
import org.futurepages.util.html.HtmlMapChars;
import java.util.Locale;
import org.futurepages.core.formatter.AbstractFormatter;
 
/**<fim_suffix>
 public class TextAreaFormatter extends AbstractFormatter {
 	
	@Override
 	public String format(Object value, Locale loc) {
            return HtmlMapChars.textAreaValue(value!=null? EmojiUtil.decodeAll((String) value): (String) value);
 	}
 }<fim_middle>","
 * Formata o texto escrito em textaerea em texto com quebras de linhas de html.
 */","
 *
 * @author <NAME>
 */"
"<fim_prefix>package com.jvmbytes.filter.annotation;


import com.jvmbytes.filter.Filter;

import java.lang.annotation.ElementType;
import java.lang.annotation.Inherited;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**<fim_suffix>
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Inherited
public @interface IncludeSubClasses {
}
<fim_middle>","
 * 拥有此标注的{@link Filter}将能匹配到目标类的子类
 *
 * @author luanjia
 */","
 * @author <NAME>
 */"
"<fim_prefix>package cz.geokuk.plugins.mapy.kachle;

import java.io.IOException;
import java.io.OutputStream;


/**<fim_suffix>
interface DiskSaveSpi {
	
	public void save(OutputStream ostm) throws IOException;

}
<fim_middle>","
 * Umí zapsat sebe na disk jako kachli, tedy jako obrázek
 * v nějakém vhodném formátu.
 * Jedna z implementací má v sobě bytové pole;
 * @author tatinek
 *
 */","
 * Disk save SPI.
 * 
 * @author <NAME>
 */"
"<fim_prefix>package org.foa.data.userdata;

/**<fim_suffix>
public class UserDAOImpl implements UserCustom {
}
<fim_middle>","
 * @author 王川源
 */","
 *
 * @author <NAME>
"
"<fim_prefix>/*<fim_suffix>
public class Bar {
    public <T extends Object> T[] convert(T[] arg) { return arg; }
}
<fim_middle>","
 * @subtest
 */","
 * @author <NAME>
 */"
"<fim_prefix>package co.edu.uniquindio.poo;

/**<fim_suffix>
public class CuentaCorriente extends CuentaBancaria {

    private double limite_sobregiro;

    /**
     * Metodo constructor de la cuenta corriente
     * @param titular
     * @param numero_cuenta
     * @param saldo
     * @param cuenta_activa
     * @param limite_sobregiro
     */
    public CuentaCorriente(Titular titular, int numero_cuenta, double saldo, boolean cuenta_activa,
            double limi<fim_middle>","
 * Clase para modelar una cuenta corriente
 */","
 * Clase que representa una cuenta corriente
 * @"
"<fim_prefix>orriente
     * @param titular
     * @param numero_cuenta
     * @param saldo
     * @param cuenta_activa
     * @param limite_sobregiro
     */
    public CuentaCorriente(Titular titular, int numero_cuenta, double saldo, boolean cuenta_activa,
            double limite_sobregiro) {
        super(titular, numero_cuenta, saldo, cuenta_activa);
        this.limite_sobregiro = limite_sobregiro;
    }

    /**<fim_suffix>
    public void retirar(double monto) {
        assert monto > 0 && monto <= getSaldo() + limite_sobregiro;
        double nuevoSaldo = getSaldo() - monto;
        setSaldo(nuevoSaldo);
        if (getSaldo() == 0) {
            setCuenta_activa(false);
        }
    }

}
<fim_middle>","
     * Metodo que permite retirar de una cuenta corriente
     */","
     * @return the limite_sobregiro
     */"
"<fim_prefix>package co.edu.uniquindio.poo;

/**
 * Clase para modelar una cuenta corriente
 */
public class CuentaCorriente extends CuentaBancaria {

    private double limite_sobregiro;

    /**<fim_suffix>
    public CuentaCorriente(Titular titular, int numero_cuenta, double saldo, boolean cuenta_activa,
            double limite_sobregiro) {
        super(titular, numero_cuenta, saldo, cuenta_activa);
        this.limite_sobregiro = limite_sobregiro;
    }

    /**
     * Metodo que permite retirar de una cuenta corriente
     */
    public void retirar(double monto) {
        assert monto > 0 && monto <= ge<fim_middle>","
     * Metodo constructor de la cuenta corriente
     * @param titular
     * @param numero_cuenta
     * @param saldo
     * @param cuenta_activa
     * @param limite_sobregiro
     */","
     * Constructor de la clase CuentaCorriente
     * 
     * @param titular          Titular de la cuenta
     * @param numero_cuenta    Numero de la cuenta
     * @param saldo    "
"<fim_prefix>package com.locydragon.mlgrush.utils;

/**<fim_suffix>
public enum HomeEnum {
    A,B
}
<fim_middle>","
 * 弃用的类,以后也许会用
 */","
 * @author LocyDragon
 */"
"<fim_prefix>uac.shiro.core.Bot;
import com.mikuac.shiro.core.BotContainer;
import com.zkb.bot.domain.BotAdmins;
import com.zkb.bot.server.IBotAdminsServer;
import com.zkb.common.utils.spring.SpringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Map;

public class SendAdminMessage {

    static Logger log = LoggerFactory.getLogger(SendAdminMessage.class);

    /**<fim_suffix>
    public static void sendAllAdminMsg(Msg msg){
        Map<Long, Bot> bots = SpringUtils.getBean(BotContainer.class).robots;
        List<BotAdmins> botAdmins = SpringUtils.getBean(IBotAdminsServer.class).selectBotAdminsList(null);
        if(botAdmins==null){
            log.info(""未设置管理员！无法发送通知消息！"");
            return;
        }
        for (Long botId : bots.keySet()) {
            for (BotAdmins botAd<fim_middle>","
     * 向所有管理员用户发送通知消息
     * @param msg 消息体
     */","
     * 发送所有管理员消息
     * @param msg
     */"
"<fim_prefix>package demo001.personalverwaltung;

public class Arbeitskraft {

	private String personalnr;
	private String name;
	private int gehalt;
	private String abteilung;
	
	public Arbeitskraft(String nr, String name, int gehalt) {
		this.personalnr=nr;
		this.name=name;
		this.gehalt=gehalt;
	}
	
	/**<fim_suffix>
	public void erhoeheGehalt(int gehaltserhoehung) {
		this.gehalt = this.gehalt+gehaltserhoehung;
	}
	
	/**
	 * Es kann die Abteilung für die Arbeitskraft festgelegt werden.
	 * 
	 * @param neueAbteilung die Abteilung, welcher die Arbeitskraft zugeordnet wird
	 */
	public void versetzeInAbteilung(String neueAbteilung) {
		this.abteilung=neueAbteilung;
	}
	
	/**
	 * Ein Teil der Personendaten kann fuer das Dr<fim_middle>","
	 * Es kann das Gehalt fuer die Arbeitskraft erhoeht werden.
	 * 
	 * @param gehaltserhoehung Betrag, um den das Gehalt erhoeht werden soll
	 */","
	 * Die Personalnummer der Arbeitskraft kann abgefragt werden.
	 * 
	 * @return die Personalnummer der Arbeitskraft
	 */"
"<fim_prefix>rag, um den das Gehalt erhoeht werden soll
	 */
	public void erhoeheGehalt(int gehaltserhoehung) {
		this.gehalt = this.gehalt+gehaltserhoehung;
	}
	
	/**
	 * Es kann die Abteilung für die Arbeitskraft festgelegt werden.
	 * 
	 * @param neueAbteilung die Abteilung, welcher die Arbeitskraft zugeordnet wird
	 */
	public void versetzeInAbteilung(String neueAbteilung) {
		this.abteilung=neueAbteilung;
	}
	
	/**<fim_suffix>
	public String druckeAusweis() {
		String ausgabeString = this.personalnr + "", ""+this.name+"", ""+this.abteilung;
		return ausgabeString;
	}
	
	
}
 <fim_middle>","
	 * Ein Teil der Personendaten kann fuer das Drucken eines Ausweises ausgegeben werden.
	 * 
	 * @return eine Zeichenkette, die Personalnummer, Name und Abteilung enthaelt
	 */","
	 * Die Methode gibt die Abteilung zurück, in der die Arbeitskraft arbeitet.
	 * 
	 * @return die Abteilung, in der die Arbeitskraft arbeitet
	 */"
"<fim_prefix>private String abteilung;
	
	public Arbeitskraft(String nr, String name, int gehalt) {
		this.personalnr=nr;
		this.name=name;
		this.gehalt=gehalt;
	}
	
	/**
	 * Es kann das Gehalt fuer die Arbeitskraft erhoeht werden.
	 * 
	 * @param gehaltserhoehung Betrag, um den das Gehalt erhoeht werden soll
	 */
	public void erhoeheGehalt(int gehaltserhoehung) {
		this.gehalt = this.gehalt+gehaltserhoehung;
	}
	
	/**<fim_suffix>
	public void versetzeInAbteilung(String neueAbteilung) {
		this.abteilung=neueAbteilung;
	}
	
	/**
	 * Ein Teil der Personendaten kann fuer das Drucken eines Ausweises ausgegeben werden.
	 * 
	 * @return eine Zeichenkette, die Personalnummer, Name und Abteilung enthaelt
	 */
	public String druckeAusweis() {
		String ausgabeString = this.personalnr + "", ""+this.name+"", ""+this.abteilung;
		return ausgabeString<fim_middle>","
	 * Es kann die Abteilung für die Arbeitskraft festgelegt werden.
	 * 
	 * @param neueAbteilung die Abteilung, welcher die Arbeitskraft zugeordnet wird
	 */","
	 * Es kann die Abteilung fuer die Arbeitskraft geaendert werden.
	 * 
	 * @param neueAbteilung Abteilung, in die die Arbeitskraft versetzt werden soll
	"
"<fim_prefix>package work.chiro.game.utils.callback;

/**<fim_suffix>
public interface BasicCallback {
    /**
     * 当满足需求时调用。
     */
    void run();
}
<fim_middle>","
 * 通用回调接口
 * @author Chiro
 */","
 * 基础回调接口
 *
 * @author chiro"
"<fim_prefix>package work.chiro.game.utils.callback;

/**
 * 通用回调接口
 * @author Chiro
 */
public interface BasicCallback {
    /**<fim_suffix>
    void run();
}
<fim_middle>","
     * 当满足需求时调用。
     */","
     * 回调方法
     */"
"<fim_prefix>package com.anheinno.android.libs.ui;

/**<fim_suffix>
public interface ProgressUIInterface {
    public void updateGauge(int val);
    public void resetGauge(String msg, int max, int start);
    public void resetGauge(String msg, int wait_seconds);
}
<fim_middle>","
 * @author 安和创新科技（北京）有限公司
 * 
 * @version 1.0
 */","
 * Created by lzn on 16/6/29.
 */"
"<fim_prefix>package com.fit2cloud.service;

import com.baomidou.mybatisplus.core.metadata.IPage;
import com.fit2cloud.controller.request.PageBillDetailedRequest;
import com.fit2cloud.controller.response.BillDetailResponse;

public interface IBillDetailedService {
    /**<fim_suffix>
    IPage<BillDetailResponse> page(Integer currentPage, Integer pageSize, PageBillDetailedRequest request);
}
<fim_middle>","
     * 分页查询账单详情
     *
     * @param currentPage 当前页
     * @param pageSize    每页显示多少条
     * @param request     查询参数
     * @return 分页对象
     */","
     * 分页查询账单明细
     *
     * @param currentPage
     * @param pageSize
     * @param request
     * @return
     */"
"<fim_prefix>package top.flya.common.enums;

/**<fim_suffix>
public enum EncodeType {

    /**
     * 默认使用yml配置
     */
    DEFAULT,

    /**
     * base64编码
     */
    BASE64,

    /**
     * 16进制编码
     */
    HEX;

}
<fim_middle>","
 * 编码类型
 *
 * @author 老马
 * @version 4.6.0
 */","
 * 编码类型
 *
 * @author liushaoming
 * @date 2019/1/10
 */"
"<fim_prefix>package top.flya.common.enums;

/**
 * 编码类型
 *
 * @author 老马
 * @version 4.6.0
 */
public enum EncodeType {

    /**<fim_suffix>
    DEFAULT,

    /**
     * base64编码
     */
    BASE64,

    /**
     * 16进制编码
     */
    HEX;

}
<fim_middle>","
     * 默认使用yml配置
     */","
     * 默认编码
     */"
"<fim_prefix>package top.flya.common.enums;

/**
 * 编码类型
 *
 * @author 老马
 * @version 4.6.0
 */
public enum EncodeType {

    /**
     * 默认使用yml配置
     */
    DEFAULT,

    /**<fim_suffix>
    BASE64,

    /**
     * 16进制编码
     */
    HEX;

}
<fim_middle>","
     * base64编码
     */","
     * base64编码
     */"
"<fim_prefix>package top.flya.common.enums;

/**
 * 编码类型
 *
 * @author 老马
 * @version 4.6.0
 */
public enum EncodeType {

    /**
     * 默认使用yml配置
     */
    DEFAULT,

    /**
     * base64编码
     */
    BASE64,

    /**<fim_suffix>
    HEX;

}
<fim_middle>","
     * 16进制编码
     */","
     * hex编码
     */"
"<fim_prefix>package top.tigercrl.minebotapi.sdk.records;

import top.tigercrl.minebotapi.sdk.bot.Bot;
import org.jetbrains.annotations.NotNull;
import org.json.JSONObject;

/**<fim_suffix>
public record MessageSenderAnonymous(long id, @NotNull String name, @NotNull String flag) {
    /**
     * 转换为 JSONObject
     *
     * @return JSON 对象
     */
    public JSONObject toJSON() {
        return new JSONObject()
                .put(""id"", id)
                .put(""name"", name)
                .put(""flag"", flag);
    }

    /**
     * 从 JSONObject 中创建匿名消息发送人信息
     *
     * @param jsonObject JSO<fim_middle>","
 * 匿名消息发送人信息
 *
 * @param id   匿名用户 ID
 * @param name 匿名用户名称
 * @param flag 匿名用户 flag，在调用 {@link Bot#setGroupAnonymousMute} 时需要传入
 */","
 * 匿名消息发送人信息
 *
 * @author Tiger
 */"
"<fim_prefix>package top.tigercrl.minebotapi.sdk.records;

import top.tigercrl.minebotapi.sdk.bot.Bot;
import org.jetbrains.annotations.NotNull;
import org.json.JSONObject;

/**
 * 匿名消息发送人信息
 *
 * @param id   匿名用户 ID
 * @param name 匿名用户名称
 * @param flag 匿名用户 flag，在调用 {@link Bot#setGroupAnonymousMute} 时需要传入
 */
public record MessageSenderAnonymous(long id, @NotNull String name, @NotNull String flag) {
    /**<fim_suffix>
    public JSONObject toJSON() {
        return new JSONObject()
                .put(""id"", id)
                .put(""name"", name)
                .put(""flag"", flag);
    }

    /**
     * 从 JSONObject 中创建匿名消息发送人信息
     *
     * @param jsonObject JSON 对象
     * @return 匿名消息发送人信息
     */
    public static MessageSenderAnonymous fromJSON(JSONObject jsonObject) {
        return new MessageSenderAnonymous(
    <fim_middle>","
     * 转换为 JSONObject
     *
     * @return JSON 对象
     */","
     * 将匿名消息发送人信息转换为 JSON 对象
     *
     * @return JSON"
"<fim_prefix>param flag 匿名用户 flag，在调用 {@link Bot#setGroupAnonymousMute} 时需要传入
 */
public record MessageSenderAnonymous(long id, @NotNull String name, @NotNull String flag) {
    /**
     * 转换为 JSONObject
     *
     * @return JSON 对象
     */
    public JSONObject toJSON() {
        return new JSONObject()
                .put(""id"", id)
                .put(""name"", name)
                .put(""flag"", flag);
    }

    /**<fim_suffix>
    public static MessageSenderAnonymous fromJSON(JSONObject jsonObject) {
        return new MessageSenderAnonymous(
                jsonObject.getLong(""id""),
                jsonObject.getString(""name""),
                jsonObject.getString(""flag"")
        );
    }
}
<fim_middle>","
     * 从 JSONObject 中创建匿名消息发送人信息
     *
     * @param jsonObject JSON 对象
     * @return 匿名消息发送人信息
     */","
     * 从 JSON 对象创建 {@link MessageSenderAnonymous}
     *
     * @param jsonObject JSON 对象
     * @return {@link MessageSenderAnonymous}
     */"
"<fim_prefix>package modtools.annotations.watch;

import java.lang.annotation.*;

/**<fim_suffix>
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.SOURCE)
public @interface WatchField {
	float interval() default 1;
	String group() default """";
	WatchUpdater updater() default WatchUpdater.def;
	// Class<?> caller() default Object.class;
}
<fim_middle>","
 * 给字段添加监视
 *
 * @see test0.Private
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>/*<fim_suffix>


package grafix.telas.secundarias;

public interface FormAtualizacao {

    public void iniciarTelaLog();
     
    public void cancelarAtualizacao();

    public void informarLog(final String mensagem);

    public void habilitaBotao(final boolean habilita);

    public boolean isPararAtualizacao();

    public void setTextoBotao(final String texto);

    public void definirPercentualProgresso(final int p<fim_middle>","
  Copyright (C) 2001-2012, Joao Medeiros, Paulo Vilela (grafix2.com)
  
  Este arquivo é parte do programa Grafix2.com
  
  Grafix2.com é um software livre; você pode redistribui-lo e/ou 
  modifica-lo dentro dos termos da Licença Pública Geral GNU como 
  publicada pela Fundação do Software Livre (FSF); na versão 2 da 
  Licença.

  Este programa é distribuido na esperança que possa ser útil, 
  mas SEM NENHUMA GARANTIA; sem uma garantia implicita de ADEQUAÇÂO a qualquer
  MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a
  Licença Pública Geral GNU para maiores detalhes.

  Você deve ter recebido uma cópia da Licença Pública Geral GNU
  junto com este programa, se não, veja uma cópia em
  <http://www.gnu.org/licenses/>
  
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>package cms.web.action.cache;

/**<fim_suffix>
public class SelectCache {
	/** 启用何种缓存 memcached  ehcache **/
	private String cacheName;
	
	public SelectCache() {
	}
	public SelectCache(String cacheName) {
		this.cacheName = cacheName;
	}
	public String getCacheName() {
		return cacheName;
	}
	public void setCacheName(String cacheName) {
		this.cacheName = cacheName;
	}
	
	
}
<fim_middle>","
 * 选择缓存
 *
 */","
 * 缓存选择
 * @"
"<fim_prefix>package cms.web.action.cache;

/**
 * 选择缓存
 *
 */
public class SelectCache {
	/**<fim_suffix>
	private String cacheName;
	
	public SelectCache() {
	}
	public SelectCache(String cacheName) {
		this.cacheName = cacheName;
	}
	public String getCacheName() {
		return cacheName;
	}
	public void setCacheName(String cacheName) {
		this.cacheName = cacheName;
	}
	
	
}
<fim_middle>", 启用何种缓存 memcached  ehcache **/,
"<fim_prefix>/*<fim_suffix>



package grafix.graficos.elementos;

import grafix.telas.MolduraAreaDados;
import java.awt.*;
import java.awt.geom.Rectangle2D;

public abstract class ElementoRetangular extends ElementoGrafico {
    
    public ElementoRetangular() {
        super();
    }
    
    public ElementoRetangular(Color cor) {
        super(cor);
    }
    
    public void desenharSelecao(MolduraAreaDados mo<fim_middle>","
  Copyright (C) 2001-2012, Joao Medeiros, Paulo Vilela (grafix2.com)
  
  Este arquivo é parte do programa Grafix2.com
  
  Grafix2.com é um software livre; você pode redistribui-lo e/ou 
  modifica-lo dentro dos termos da Licença Pública Geral GNU como 
  publicada pela Fundação do Software Livre (FSF); na versão 2 da 
  Licença.

  Este programa é distribuido na esperança que possa ser útil, 
  mas SEM NENHUMA GARANTIA; sem uma garantia implicita de ADEQUAÇÂO a qualquer
  MERCADO ou APLICAÇÃO EM PARTICULAR. Veja a
  Licença Pública Geral GNU para maiores detalhes.

  Você deve ter recebido uma cópia da Licença Pública Geral GNU
  junto com este programa, se não, veja uma cópia em
  <http://www.gnu.org/licenses/>
  
 */","*
 *
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package uniandes.cupi2.toDoList.mundo;

/**
 * Excepción que se lanza si se pregunta por un elemento que no existe.
 */
public class ElementoNoExisteException extends Exception
{

    /**
     * Construye la excepción con el mensaje que describe el problema
     * 
     * @param mensaje Mensaje que describe la causa de la excepción
     */
    public ElementoNoExisteException( String mensaje )<fim_middle>","
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * $Id$
 * Universidad de los Andes (Bogotá - Colombia)
 * Departamento de Ingeniería de Sistemas y Computación 
 * Licenciado bajo el esquema Academic Free License version 2.1 
 *
 * Proyecto Cupi2 (http://cupi2.uniandes.edu.co)
 * Ejercicio: n9_toDoList
 * Autor: Carlos Navarrete Puentes - 24-feb-2011
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */","
 * Excepción que se lanza si se pregunta por un elemento que no existe.
 * 
 * @author <NAME>
 * @version 1.0
 */"
"<fim_prefix> los Andes (Bogotá - Colombia)
 * Departamento de Ingeniería de Sistemas y Computación 
 * Licenciado bajo el esquema Academic Free License version 2.1 
 *
 * Proyecto Cupi2 (http://cupi2.uniandes.edu.co)
 * Ejercicio: n9_toDoList
 * Autor: Carlos Navarrete Puentes - 24-feb-2011
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
package uniandes.cupi2.toDoList.mundo;

/**<fim_suffix>
public class ElementoNoExisteException extends Exception
{

    /**
     * Construye la excepción con el mensaje que describe el problema
     * 
     * @param mensaje Mensaje que describe la causa de la excepción
     */
    public ElementoNoExisteException( String mensaje )
    {
        super( mensaje );
    }
}
<fim_middle>","
 * Excepción que se lanza si se pregunta por un elemento que no existe.
 */","
 * Excepción que se lanza cuando se intenta acceder a un elemento que no existe
"
"<fim_prefix>2.1 
 *
 * Proyecto Cupi2 (http://cupi2.uniandes.edu.co)
 * Ejercicio: n9_toDoList
 * Autor: Carlos Navarrete Puentes - 24-feb-2011
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 */
package uniandes.cupi2.toDoList.mundo;

/**
 * Excepción que se lanza si se pregunta por un elemento que no existe.
 */
public class ElementoNoExisteException extends Exception
{

    /**<fim_suffix>
    public ElementoNoExisteException( String mensaje )
    {
        super( mensaje );
    }
}
<fim_middle>","
     * Construye la excepción con el mensaje que describe el problema
     * 
     * @param mensaje Mensaje que describe la causa de la excepción
     */","
     * Constructor de la clase.
     */"
"<fim_prefix>package ar.edu.unnoba.compilador.ast.expresiones.valor;

import ar.edu.unnoba.compilador.ast.sentencias.declaracion.Declaracion;
import ar.edu.unnoba.compilador.util.Normalizador;

/**<fim_suffix>

public class SimboloVariable extends Identificador {
    /** El nombre original, pero único y normalizado para usarse en IR. */
    private String ptroIR;

    private final Boolean esGlobal;

    public SimboloVariable(Declaracion d, Boolean esGlobal) {
        super(d.getIdent().getNombre(), d.getIdent().getTipo());
        this.esGlobal = esGlobal;
        this.setPtroIR(getEsGlobal() ?
                <fim_middle>","
 * Clase para representar las variables en la tabla de símbolos.
 * Luego, mediante un Transformer, este nodo reemplaza a Identificador.
 */","
 * Representa un simbolo de variable.
 */"
"<fim_prefix>package ar.edu.unnoba.compilador.ast.expresiones.valor;

import ar.edu.unnoba.compilador.ast.sentencias.declaracion.Declaracion;
import ar.edu.unnoba.compilador.util.Normalizador;

/**
 * Clase para representar las variables en la tabla de símbolos.
 * Luego, mediante un Transformer, este nodo reemplaza a Identificador.
 */

public class SimboloVariable extends Identificador {
    /**<fim_suffix>
    private String ptroIR;

    private final Boolean esGlobal;

    public SimboloVariable(Declaracion d, Boolean esGlobal) {
        super(d.getIdent().getNombre(), d.getIdent().getTipo());
        this.esGlobal = esGlobal;
        this.setPtroIR(getEsGlobal() ?
                Normalizador.crearNomPtroGbl(getNombre()) :
                Normalizador.crearNomPtroLcl(getNombre()));
    }

    public String <fim_middle>"," El nombre original, pero único y normalizado para usarse en IR. */","
     * Constructor de la clase.
    "
"<fim_prefix>/*<fim_suffix>
package com.pspace.ifs.ksan.gw.sign;

public enum AuthenticationType {
    AWS_V2,
    AWS_V4,
    AWS_V2_OR_V4,
    GOOGLE,
    NONE;
}<fim_middle>","
* Copyright (c) 2021 PSPACE, inc. KSAN Development Team ksan@pspace.co.kr
* KSAN is a suite of free software: you can redistribute it and/or modify it under the terms of
* the GNU General Public License as published by the Free Software Foundation, either version 
* 3 of the License.  See LICENSE for details
*
* 본 프로그램 및 관련 소스코드, 문서 등 모든 자료는 있는 그대로 제공이 됩니다.
* KSAN 프로젝트의 개발자 및 개발사는 이 프로그램을 사용한 결과에 따른 어떠한 책임도 지지 않습니다.
* KSAN 개발팀은 사전 공지, 허락, 동의 없이 KSAN 개발에 관련된 모든 결과물에 대한 LICENSE 방식을 변경 할 권리가 있습니다.
*/","*
 * Created by pspace on 16/2/16.
 */"
"<fim_prefix>package com.github.douyin.common;

/**<fim_suffix>
@FunctionalInterface
public interface VideoListUrlCreater {

    String create(String uid, long cursor);
}
<fim_middle>","
 * @author Bu HuaYang
 */","
 * @author 张东明
 *"
"<fim_prefix>hercules.sgi.csp.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Data
@EqualsAndHashCode(callSuper = false)
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class RequisitoEquipoNivelAcademicoOutput {
  /** Id */
  private Long id;

  /** RequisitoEquipo Id */
  private Long requisitoEquipoId;

  /**<fim_suffix>
  private String nivelAcademicoRef;
}
<fim_middle>", Referencia a la entidad externa NivelAcademico del ESB */, RequisitoId */
"<fim_prefix>package xuan.cat.syncstaticmapview.database.sql.builder;

/**
 * 判斷式互相配合形式枚舉
 */
public enum WhereMutual {
    /** 必須與另一判斷式同時符合 */
    AND (""AND""),
    /** 或是符合另一判斷式 */
    OR  (""OR"");


    private final String value;


    /**
     * 設定此枚舉的SQL字符串片段
     * @param v SQL可拼湊字符串片段
     */
    WhereMutual(String v) {
        value = v;
    }


    /**<fim_suffix>
    public String part() {
        return value;
    }


}
<fim_middle>","
     * 取得此枚舉的SQL字符串片段
     * @return SQL可拼湊字符串片段
     */","
     * 取得此枚舉的SQL片段
     * @return SQL片段
     */"
"<fim_prefix>package xuan.cat.syncstaticmapview.database.sql.builder;

/**<fim_suffix>
public enum WhereMutual {
    /** 必須與另一判斷式同時符合 */
    AND (""AND""),
    /** 或是符合另一判斷式 */
    OR  (""OR"");


    private final String value;


    /**
     * 設定此枚舉的SQL字符串片段
     * @param v SQL可拼湊字符串片段
     */
    WhereMutual(String v) {
        value = v;
    }


    /**
     * 取得此枚舉的SQL字符串片段
     * @return SQL可拼湊字符串片段
     */
    public String part() {
        return value;
    }


}
<fim_middle>","
 * 判斷式互相配合形式枚舉
 */","
 * 判斷式的SQL片段
 *
 * @"
"<fim_prefix>package xuan.cat.syncstaticmapview.database.sql.builder;

/**
 * 判斷式互相配合形式枚舉
 */
public enum WhereMutual {
    /**<fim_suffix>
    AND (""AND""),
    /** 或是符合另一判斷式 */
    OR  (""OR"");


    private final String value;


    /**
     * 設定此枚舉的SQL字符串片段
     * @param v SQL可拼湊字符串片段
     */
    WhereMutual(String v) {
        value = v;
    }


    /**
     * 取得此枚舉的SQL字符串片段
     * @return SQL可拼湊字符串片段
     */
    public String part() {
        return value;
    }


}
<fim_middle>", 必須與另一判斷式同時符合 */, 且是符合另一判斷式 */
"<fim_prefix>package xuan.cat.syncstaticmapview.database.sql.builder;

/**
 * 判斷式互相配合形式枚舉
 */
public enum WhereMutual {
    /** 必須與另一判斷式同時符合 */
    AND (""AND""),
    /** 或是符合另一判斷式 */
    OR  (""OR"");


    private final String value;


    /**<fim_suffix>
    WhereMutual(String v) {
        value = v;
    }


    /**
     * 取得此枚舉的SQL字符串片段
     * @return SQL可拼湊字符串片段
     */
    public String part() {
        return value;
    }


}
<fim_middle>","
     * 設定此枚舉的SQL字符串片段
     * @param v SQL可拼湊字符串片段
     */","
     * 建構子
     * @param v 判斷式
     */"
"<fim_prefix>package xuan.cat.syncstaticmapview.database.sql.builder;

/**
 * 判斷式互相配合形式枚舉
 */
public enum WhereMutual {
    /** 必須與另一判斷式同時符合 */
    AND (""AND""),
    /**<fim_suffix>
    OR  (""OR"");


    private final String value;


    /**
     * 設定此枚舉的SQL字符串片段
     * @param v SQL可拼湊字符串片段
     */
    WhereMutual(String v) {
        value = v;
    }


    /**
     * 取得此枚舉的SQL字符串片段
     * @return SQL可拼湊字符串片段
     */
    public String part() {
        return value;
    }


}
<fim_middle>", 或是符合另一判斷式 */, 必須與另一判斷式同
"<fim_prefix>package nami.cli.commands;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;

import nami.cli.annotation.AlternateCommands;
import nami.cli.annotation.CliCommand;
import nami.cli.annotation.CommandDoc;
import nami.connector.NamiConnector;
import nami.connector.exception.NamiApiException;
import nami.connector.namitypes.NamiGruppierung;

/**<fim_suffix>
public final class Gruppierungen {
    private Gruppierungen() {
    }

    /**
     * Listet die verfügbaren Gruppierungen baumförmig auf.
     * 
     * @param args
     *            das erste Argument (falls vorhanden) gibt die
     *            Gruppierungsnummer der Wurzel des Gruppierungsbaumes an
     * @param con
     *            Verbindung zum NaMi-Server
     * @param out
     *            Writer<fim_middle>","
 * Funktionen zum Anzeigen von Informationen zu Gruppierungen.
 * 
 * @author Fabian Lipp
 * 
 */","
 * Listet die verfügbaren Gruppierungen auf.
 * 
 * @author gnaegi
 */"
"<fim_prefix>nateCommands;
import nami.cli.annotation.CliCommand;
import nami.cli.annotation.CommandDoc;
import nami.connector.NamiConnector;
import nami.connector.exception.NamiApiException;
import nami.connector.namitypes.NamiGruppierung;

/**
 * Funktionen zum Anzeigen von Informationen zu Gruppierungen.
 * 
 * @author Fabian Lipp
 * 
 */
public final class Gruppierungen {
    private Gruppierungen() {
    }

    /**<fim_suffix>
    @CliCommand(""listGruppierungen"")
    @AlternateCommands(""lg"")
    @CommandDoc(""Listet die verfügbaren Gruppierungen auf"")
    public static void listGruppierungen(String[] args, NamiConnector con,
            PrintWriter out) throws NamiApiException, IOException {
        NamiGruppierung rootGruppierung;
        if (args.length > 0) {
            rootGruppierung = NamiGruppierung.getGruppierungen(con, a<fim_middle>","
     * Listet die verfügbaren Gruppierungen baumförmig auf.
     * 
     * @param args
     *            das erste Argument (falls vorhanden) gibt die
     *            Gruppierungsnummer der Wurzel des Gruppierungsbaumes an
     * @param con
     *            Verbindung zum NaMi-Server
     * @param out
     *            Writer, auf dem die Ausgabe erfolgt
     * @throws NamiApiException
     *             API-Fehler beim Zugriff auf NaMi
     * @throws IOException
     *             IOException
     */","
     * Listet die verfügbaren Gruppierungen auf.
     * 
     * @param args
     *            Die Argumente der Kommandozeile.
     * @param con
     *            Der Connector, mit dem die Kommandozeile interagiert.
     * @param out
     *            Ausgabestream.
     * @throws NamiApiException
     *             Wenn beim Zugriff auf den Connector ein Fehler auftritt.
     * @throws IOException
     *             Wenn beim Schreiben in den Ausgabestream ein Fehler auftritt.
     */"
"<fim_prefix>, NamiConnector con,
            PrintWriter out) throws NamiApiException, IOException {
        NamiGruppierung rootGruppierung;
        if (args.length > 0) {
            rootGruppierung = NamiGruppierung.getGruppierungen(con, args[0]);
        } else {
            rootGruppierung = NamiGruppierung.getGruppierungen(con);
        }
        printGruppierungenTeilbaum(out, rootGruppierung, 0);
    }

    /**<fim_suffix>
    private static void printGruppierungenTeilbaum(PrintWriter out,
            NamiGruppierung root, int depth) {
        StringBuffer line = new StringBuffer();
        for (int i = 1; i <= depth; i++) {
            line.append(""  "");
        }
        line.append(root.getDescriptor()).append("" ["");
        line.append(root.getId()).append(""]"");
        out.println(line);

        Iterator<NamiGruppierung<fim_middle>","
     * Gibt einen Teilbaum des Gruppierungsbaums aus.
     * 
     * @param out
     *            Ausgabe-Writer
     * @param root
     *            Wurzel des Teilbaums
     * @param depth
     *            Tiefe der Wurzel
     */","
     * @param out
     * @param rootGruppierung
     * @param depth
     */"
"<fim_prefix>package com.platform.common.enums;

import com.baomidou.mybatisplus.annotation.EnumValue;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.Getter;

/**<fim_suffix>
@Getter
public enum GenderEnum {

    /**
     * 未知
     */
    UNKNOWN(""0"", ""未知""),
    /**
     * 男
     */
    MALE(""1"", ""男""),
    /**
     * 女
     */
    FEMALE(""2"", ""女"");

    @EnumValue
    @JsonValue
    private final String code;
    private final String info;

    GenderEnum(String code, String info) {
        this.code = code;
        this.info = info;
    }

}
<fim_middle>","
 * 性别类型枚举
 */","
 * 性别枚举
 *
"
"<fim_prefix>package com.platform.common.enums;

import com.baomidou.mybatisplus.annotation.EnumValue;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.Getter;

/**
 * 性别类型枚举
 */
@Getter
public enum GenderEnum {

    /**
     * 未知
     */
    UNKNOWN(""0"", ""未知""),
    /**<fim_suffix>
    MALE(""1"", ""男""),
    /**
     * 女
     */
    FEMALE(""2"", ""女"");

    @EnumValue
    @JsonValue
    private final String code;
    private final String info;

    GenderEnum(String code, String info) {
        this.code = code;
        this.info = info;
    }

}
<fim_middle>","
     * 男
     */","
     * 男
     */"
"<fim_prefix>package com.platform.common.enums;

import com.baomidou.mybatisplus.annotation.EnumValue;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.Getter;

/**
 * 性别类型枚举
 */
@Getter
public enum GenderEnum {

    /**
     * 未知
     */
    UNKNOWN(""0"", ""未知""),
    /**
     * 男
     */
    MALE(""1"", ""男""),
    /**<fim_suffix>
    FEMALE(""2"", ""女"");

    @EnumValue
    @JsonValue
    private final String code;
    private final String info;

    GenderEnum(String code, String info) {
        this.code = code;
        this.info = info;
    }

}
<fim_middle>","
     * 女
     */","
     * 女
     */"
"<fim_prefix>package com.platform.common.enums;

import com.baomidou.mybatisplus.annotation.EnumValue;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.Getter;

/**
 * 性别类型枚举
 */
@Getter
public enum GenderEnum {

    /**<fim_suffix>
    UNKNOWN(""0"", ""未知""),
    /**
     * 男
     */
    MALE(""1"", ""男""),
    /**
     * 女
     */
    FEMALE(""2"", ""女"");

    @EnumValue
    @JsonValue
    private final String code;
    private final String info;

    GenderEnum(String code, String info) {
        this.code = code;
        this.info = info;
    }

}
<fim_middle>","
     * 未知
     */","
     * 未知
     */"
"<fim_prefix>package me.wuxie.wakeshow.wakeshow.network.server_out;

import me.wuxie.wakeshow.wakeshow.network.OutPacket;

/**<fim_suffix>
public class MessageUnpacking extends OutPacket {
    public MessageUnpacking(byte[] bytes) {
        super(19);
        getPacketBuffer().writeBytes(bytes);
    }
}
<fim_middle>","
 * 分包发送的数据包
 */","
 * Created by Simon on 2017/3"
"<fim_prefix>package com.mquan86.pattern.structural.facade;

/**<fim_suffix>
public class SubFunction2 {
    public void function2() {}
}
<fim_middle>","
 * @author Minh Quan Pham (mquan86@gmail.com)
 *
 */","
 * @author angus
 * @date 2018/12/28
 */"
"<fim_prefix>package com.helper.plugs;
/**<fim_suffix>
public abstract class PlugModule implements IPlugModule
{
		private ParameterBridge parameterBridge;
		
		public void setParameterBridge(ParameterBridge parameterBridge) {
			this.parameterBridge = parameterBridge;
		}
		public ParameterBridge getParameterBridge() {
			return parameterBridge;
		}
		public abstract void moduleInit(); 
		
}
<fim_middle>","
 * 插件抽象类，可实现该类来实现插件。
 * 初始化消耗时间的操作请放在moduleInit函数中，初始化的时候自动以多线程的方式执行
 * @author jx
 *
 */","
 * 插件模块基类
 * @author liujunkai
 *
 */"
"<fim_prefix>package com.redhat.lightblue.client.request.metadata;

import com.fasterxml.jackson.databind.JsonNode;
import com.redhat.lightblue.client.http.HttpMethod;
import com.redhat.lightblue.client.request.LightblueMetadataRequest;

/**<fim_suffix>
public class MetadataGetEntityNamesRequest extends LightblueMetadataRequest {

    public MetadataGetEntityNamesRequest() {
        super(HttpMethod.GET,null,null,null);
    }

}
<fim_middle>","
 * GET /metadata
 */","
 * Request to get the list"
"<fim_prefix>PostConstruct
	public void init() {
		try {
			lista = InstituicaoService.pesquisar(null);
			// this.addInfoMessage(""Pesquisa"", ""Exibindo  "" +
			// HibernateDAO.PESQUISA_LIMITE +
			// "" itens. Pesquise utilizando par√¢metros para obter mais registros."");
		} catch (Exception e) {
			// this.addErrorMessage(""Pesquisa"",
			// ""Erro ao realizar pesquisa inicial. Entre em contato com o Admin."");
		}
	}

	/**<fim_suffix>
	public void pesquisa() {
		try {
			this.lista = InstituicaoService.pesquisar(textoPesquisa);
		} catch (Exception e) {
			e.printStackTrace();
			addErrorMessage(""Pesquisa"", ""Erro na pesquisa"");
		}
	}

	public List<Instituicao> getLista() {
		return lista;
	}

	public String getTextoPesquisa() {
		return textoPesquisa;
	}

	public void setTextoPesquisa(String textoPesquisa) {
		this.textoPesquisa = texto<fim_middle>","
	 * Realiza a pesquisa de itens
	 */","
	 * 
	 */"
"<fim_prefix>package com.zhishu.config;

import com.zhishu.common.dto.Page;
import org.apache.ibatis.cache.CacheKey;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**<fim_suffix>
public class CachePageConfig {
    public final static Map<CacheKey, Page> PAGE_CACHE = new ConcurrentHashMap<>(32);
}
<fim_middle>","
 * 分页缓存配置
 *
 * @author huangfu
 */","
 * @author zhishu
 * @version V1.0
 *"
"<fim_prefix>package dia01.laboratorio5.exercicio;

/*<fim_suffix>


import java.util.function.Consumer;
import java.util.function.Function;

public class Exercicio_1 {

    public static void main(String[] args) {

    }

}
<fim_middle>","

Com base no exemplo acima crie um closure seguindo os seguintes passos:
 * Crie uma Function chamada calculaRaizQuadrada que irá receber um número inteiro como parâmetro e retornar um valor do tipo Double referente a raiz quadrada do mesmo.
 * Dentro dessa Function crie um Consumer chamado imprimirRaizQuadrada e o invoque dentro da Function calculaRaizQuadrada passando como argumento a raiz quadrada já calculada.
 * Este consumer deve imprimir a seguinte mensagem no console: ""O resultado da raiz quadrada do número VALOR_RECEBIDO é: RAIZ_QUADRADA"".
Por exemplo, a função calculaRaizQuadrada foi invocada com o valor 25, o valor impresso pelo consumer imprimirRaizQuadrada deve ser semelhante a isso: ""O resultado da raiz quadrada do número 25 é: 5"".

* */","*
 * @author <NAME>
 */"
"<fim_prefix>package com.jvmbytes.spy.enhance;

import com.jvmbytes.spy.event.EventType;

import java.util.Set;

/**
 * 代码增强
 *
 * @author luanjia
 */
public interface Enhancer {

    /**<fim_suffix>
    byte[] toByteCodeArray(ClassLoader loader,
                           byte[] srcByteCodeArray,
                           Set<String> signCodes,
                           String namespace,
                           int listenerId,
                           EventType[] eventTypeArray);

}
<fim_middle>","
     * 转换为增强后的字节码数组
     *
     * @param loader           目标类加载器
     * @param srcByteCodeArray 源字节码数组
     * @param signCodes        需要被增强的行为签名
     * @param namespace        命名空间
     * @param listenerId       需要埋入的监听器ID
     * @param eventTypeArray   需要配埋入的事件类型
     * @return 增强后的字节码数组
     */","
     * 增强字节码
     *
     * @param loader                                                                                                                                              "
"<fim_prefix>package org.xson.tangyuan.task;

/**<fim_suffix>
public interface AsyncTask {
	public void run();
}
<fim_middle>","
 * 异步任务对象
 */","
 * 异步任务
 * 
"
"<fim_prefix>package moe.ahao.tend.consistency.core.utils;

/**<fim_suffix>
public class ThreadLocalUtil {
    /**
     * 任务表示Action被AOP拦截的时候是不是应该立即执行，不再创建任务
     */
    private static final ThreadLocal<Boolean> FLAG = ThreadLocal.withInitial(() -> false);

    public static void setFlag(boolean flag) {
        FLAG.set(flag);
    }

    public static Boolean getFlag() {
        return FLAG.get();
    }
}
<fim_middle>","
 * 当前线程的标志位
 *
 */","
 * Created by Ahaochan on 2017/"
"<fim_prefix>package moe.ahao.tend.consistency.core.utils;

/**
 * 当前线程的标志位
 *
 */
public class ThreadLocalUtil {
    /**<fim_suffix>
    private static final ThreadLocal<Boolean> FLAG = ThreadLocal.withInitial(() -> false);

    public static void setFlag(boolean flag) {
        FLAG.set(flag);
    }

    public static Boolean getFlag() {
        return FLAG.get();
    }
}
<fim_middle>","
     * 任务表示Action被AOP拦截的时候是不是应该立即执行，不再创建任务
     */",
"<fim_prefix>package shaochen.cube.data;

import java.io.PrintWriter;

/**<fim_suffix>
public interface IDataGenerator {
	
	/**
	 * 创建3维数据集。
	 * @param pw 打印流。
	 */
	public void create3D(PrintWriter pw);

	/**
	 * 创建4维数据集。
	 * @param pw 打印流。
	 */
	public void create4D(PrintWriter pw);

	/**
	 * 创建5维数据集。
	 * @param pw 打印流。
	 */
	public void create5D(PrintWriter pw);

	/**
	 * 创建6维数据集。
	 * @param pw 打印流。
	 */
	public void create6D(PrintWriter pw);

	/**
	 * 创建7维数据集。<fim_middle>","
 * 定义生成多维数据集的操作。
 * @author Shaochen
 *
 */","
 * 数据生成器。
 * @author 林浩
 *
 */"
"<fim_prefix>package shaochen.cube.data;

import java.io.PrintWriter;

/**
 * 定义生成多维数据集的操作。
 * @author Shaochen
 *
 */
public interface IDataGenerator {
	
	/**
	 * 创建3维数据集。
	 * @param pw 打印流。
	 */
	public void create3D(PrintWriter pw);

	/**<fim_suffix>
	public void create4D(PrintWriter pw);

	/**
	 * 创建5维数据集。
	 * @param pw 打印流。
	 */
	public void create5D(PrintWriter pw);

	/**
	 * 创建6维数据集。
	 * @param pw 打印流。
	 */
	public void create6D(PrintWriter pw);

	/**
	 * 创建7维数据集。
	 * @param pw 打印流。
	 */
	public void create7D(PrintWriter pw);

}
<fim_middle>","
	 * 创建4维数据集。
	 * @param pw 打印流。
	 */","
	 * 创建4维数据集。
	 * @param pw 打印流。
	 */"
"<fim_prefix>ochen.cube.data;

import java.io.PrintWriter;

/**
 * 定义生成多维数据集的操作。
 * @author Shaochen
 *
 */
public interface IDataGenerator {
	
	/**
	 * 创建3维数据集。
	 * @param pw 打印流。
	 */
	public void create3D(PrintWriter pw);

	/**
	 * 创建4维数据集。
	 * @param pw 打印流。
	 */
	public void create4D(PrintWriter pw);

	/**
	 * 创建5维数据集。
	 * @param pw 打印流。
	 */
	public void create5D(PrintWriter pw);

	/**<fim_suffix>
	public void create6D(PrintWriter pw);

	/**
	 * 创建7维数据集。
	 * @param pw 打印流。
	 */
	public void create7D(PrintWriter pw);

}
<fim_middle>","
	 * 创建6维数据集。
	 * @param pw 打印流。
	 */","
	 * 创建6维数据集。
	 * @param pw 打印流。
	 */"
"<fim_prefix>package shaochen.cube.data;

import java.io.PrintWriter;

/**
 * 定义生成多维数据集的操作。
 * @author Shaochen
 *
 */
public interface IDataGenerator {
	
	/**<fim_suffix>
	public void create3D(PrintWriter pw);

	/**
	 * 创建4维数据集。
	 * @param pw 打印流。
	 */
	public void create4D(PrintWriter pw);

	/**
	 * 创建5维数据集。
	 * @param pw 打印流。
	 */
	public void create5D(PrintWriter pw);

	/**
	 * 创建6维数据集。
	 * @param pw 打印流。
	 */
	public void create6D(PrintWriter pw);

	/**
	 * 创建7维数据集。
	 * @param pw 打印流。
	 */
	public void create7D(PrintWriter pw);

}
<fim_middle>","
	 * 创建3维数据集。
	 * @param pw 打印流。
	 */","
	 * 创建1维数据集。
	 * @param pw 打印流。
	 */"
"<fim_prefix>ochen
 *
 */
public interface IDataGenerator {
	
	/**
	 * 创建3维数据集。
	 * @param pw 打印流。
	 */
	public void create3D(PrintWriter pw);

	/**
	 * 创建4维数据集。
	 * @param pw 打印流。
	 */
	public void create4D(PrintWriter pw);

	/**
	 * 创建5维数据集。
	 * @param pw 打印流。
	 */
	public void create5D(PrintWriter pw);

	/**
	 * 创建6维数据集。
	 * @param pw 打印流。
	 */
	public void create6D(PrintWriter pw);

	/**<fim_suffix>
	public void create7D(PrintWriter pw);

}
<fim_middle>","
	 * 创建7维数据集。
	 * @param pw 打印流。
	 */","
	 * 创建7维数据集。
	 * @param pw 打印流。"
"<fim_prefix>package shaochen.cube.data;

import java.io.PrintWriter;

/**
 * 定义生成多维数据集的操作。
 * @author Shaochen
 *
 */
public interface IDataGenerator {
	
	/**
	 * 创建3维数据集。
	 * @param pw 打印流。
	 */
	public void create3D(PrintWriter pw);

	/**
	 * 创建4维数据集。
	 * @param pw 打印流。
	 */
	public void create4D(PrintWriter pw);

	/**<fim_suffix>
	public void create5D(PrintWriter pw);

	/**
	 * 创建6维数据集。
	 * @param pw 打印流。
	 */
	public void create6D(PrintWriter pw);

	/**
	 * 创建7维数据集。
	 * @param pw 打印流。
	 */
	public void create7D(PrintWriter pw);

}
<fim_middle>","
	 * 创建5维数据集。
	 * @param pw 打印流。
	 */","
	 * 创建5维数据集。
	 * @param pw 打印流。
	 */"
"<fim_prefix>package cn.foxtech.device.protocol.v1.hikvision.fire.core.entity.infobj.object;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class AnalogObject {
    /**<fim_suffix>
    private int type = 0;
    /**
     * 模拟量数值（2 字节）
     */
    private int value = 0;
}
<fim_middle>","
     * 模拟量类型（1 字节）
     */","
     * 模拟量类型（1 字节）
     */"
"<fim_prefix>package cn.foxtech.device.protocol.v1.hikvision.fire.core.entity.infobj.object;

import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PUBLIC)
public class AnalogObject {
    /**
     * 模拟量类型（1 字节）
     */
    private int type = 0;
    /**<fim_suffix>
    private int value = 0;
}
<fim_middle>","
     * 模拟量数值（2 字节）
     */","
     * 模拟量值（2 字节）
     */"
"<fim_prefix>/**<fim_suffix>
package cn.edu.bit.ruixin.community.handler;
<fim_middle>","
 * <p>
 * 控制器、过滤器和入口点指的是一类没有内部状态的代码，这些代码定义了服务器对HTTP请求的响应。
 * </p><p>
 * 在响应HTTP请求的过程中，需要处理不匹配任何一个控制器的错误请求，通常由认证失败、格式或参数错误、动作无法执行等导致。
 * 此时框架会调用入口点对象（Entrypoint或handler）的方法来处理此类请求。
 * 入口点可以读取http请求的所有内容，必须调用响应组件来响应。
 * </p>
 * 
 * @author 78165
 * @author jingkaimori
 * @see cn.edu.bit.ruixin.base.security.utils.UnauthorizedEntryPoint
 */","
 * @author soso
 * @date 2017年7月5日
 * @version V1.0
 */"
"<fim_prefix>package com.iohao.game.common.kit.attr;

import lombok.Getter;
import org.junit.Assert;
import org.junit.Test;

/**<fim_suffix>
public class AttrOptionDynamicTest {

    final MyAttrOptions myAttrOptions = new MyAttrOptions();

    AttrOption<AttrCat> catAttrOption = AttrOption.valueOf(""AttrCat"");

    @Test
    public void ifNull() {
        Assert.assertNull(myAttrOptions.option(catAttrOption));

        // 如果 catAttrOption 属性为 null，创建 AttrCat 对象，并赋值到属性中
        myAttrOptions.ifNull(catAttrOption, AttrCat::new);
        Assert.ass<fim_middle>","
 * @author 渔民小镇
 * @date 2024-06-05
 */","
 * @author 刘斌
 * @version 1.0
 * @since 2019/"
"<fim_prefix>/*<fim_suffix>

import java.util.*;
import java.io.*;

class Main {

    public static void main(String... args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int[] in = read(br);
        int N = in[0], K = in[1];
        int[][] cl = new int[N][2];
        for (int i = 0; i < N; i++) {
            int[] t = read(br);
            cl[i][0] = t[0]; cl[i][1] = t[<fim_middle>","
儿童节那天有 K 位小朋友到小明家做客。

小明拿出了珍藏的巧克力招待小朋友们。

小明一共有 N 块巧克力，其中第 i 块是 Hi×Wi 的方格组成的长方形。

为了公平起见，小明需要从这 N 块巧克力中切出 K 块巧克力分给小朋友们。

切出的巧克力需要满足：

形状是正方形，边长是整数
大小相同
例如一块 6×5 的巧克力可以切出 6 块 2×2 的巧克力或者 2 块 3×3 的巧克力。

当然小朋友们都希望得到的巧克力尽可能大，你能帮小明计算出最大的边长是多少么？

输入格式
第一行包含两个整数 N 和 K。

以下 N 行每行包含两个整数 Hi 和 Wi。

输入保证每位小朋友至少能获得一块 1×1 的巧克力。

输出格式
输出切出的正方形巧克力最大可能的边长。

数据范围
1≤N,K≤105,
1≤Hi,Wi≤105
输入样例：
2 10
6 5
5 6
输出样例：
2
 */","

Score : 200 points




### Problem Statement

N *Snukes* called Snuke 1, Snuke 2,..., Snuke N live in a town.


There are K kinds of snacks sold in this town, called Snack 1, Snack 2,..., Snack K. The following d\_i Snukes have Snack i: Snuke A\_{i, 1}, A\_{i, 2}, \\cdots, A\_{i, {d\_i}}.


Takahashi will walk around this town and make mischief on the Snukes who have no snacks. How many Snukes will fall victim to Takahashi's mischief?






### Constraints

* All values in input are integers.
* 1 \\leq N \\leq 100
* 1 \\leq K \\leq 100
* 1 \\leq d\_i \\leq N
* 1 \\leq A\_{i, 1} \< \\cdots \< A\_{i, d\_i} \\leq N






---





### Input

Input is given from Standard Input in the following format:



```
N K
d_1
A_{1, 1} \cdots A_{1, d_1}
\vdots
d_K
A_{K, 1} \cdots A_{K"
"<fim_prefix>package com.zq.webridge.util;

/**<fim_suffix>
public interface WBWebridgeListener {

}
<fim_middle>","
 * 根据js发送的command注册的方法抽象接口，可自行扩展
 * 
 * @author user
 *
 */","
 * @author zhangqi
 * @date 2018/12/26
 */"
"<fim_prefix>package com.easyink.framework.config;

import cn.hutool.extra.qrcode.QrConfig;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Bean;

import java.awt.*;

/**<fim_suffix>
@Configuration
public class QRCodeConfig {
    @Bean
    public QrConfig qrConfig(){
        QrConfig qrConfig = new QrConfig();
        qrConfig.setBackColor(Color.white.getRGB());
        qrConfig.setForeColor(Color.black.getRGB());
        return qrConfig;
    }
}
<fim_middle>","
 * 生成二维码配置类
 *
 * @author wx
 * 2023/1/16 11:27
 **/","
 * @author 田径
 * @title
 * @description
 * @date 9:58
 */"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.ui.data;
<fim_middle>","
 * <p>
 * TODO: パッケージコメントを記述
 * </p>
 */","
 * @author masaki.kamachi
 */"
"<fim_prefix>package it.regioneveneto.mygov.payment.nodoregionalefesp.dao;

import org.springframework.dao.DataAccessException;

/**<fim_suffix>
public interface IuvDao {

	/**
	 * @param codiceIpaEnte
	 * @param tipoVersamento
	 * @param iuv
	 * @throws DataAccessException
	 */
	void insert(final String codiceIpaEnte, final String tipoVersamento, final String iuv) throws DataAccessException;

}
<fim_middle>","
 * @author regione del veneto
 *
 */","
 * @author <NAME> on 08/08/20"
"<fim_prefix>package ua.naiksoftware.waronline.map;

/**<fim_suffix>
public enum MapObjCode {
	HATA_1,
	FORT,
	ATB_1,
        ATB_2,
	CHURCH,
	REMAINS1,
	REMAINS2,
	HATA_2,
	TREE_1,
	TREE_2,
	HATA_3,
	HATA_4,
	TENT,
	STOLB_1,
	STOLB_2,
	WELL,
	KPP
}
<fim_middle>","
 * Дерева, будівлі, і т.п.
 */","
 * Created by naik on 12.03.16.
 */"
"<fim_prefix>package com.peiban.service.receiver;
/**<fim_suffix>
public interface NotifyMessage {
	void notifyMessage(String msg);
}
<fim_middle>","
 * 
 * 功能：通知广播app得到了聊天信息 <br />
 * 日期：2013-4-27<br />
 * 地点：淘高手网<br />
 * 版本：ver 1.0<br />
 * 
 * @author fighter
 * @since
 */","
 * 接收消息的接口
 * @author Administrator
 *
 */"
"<fim_prefix>package tp.pr4.logica;


/**<fim_suffix>
public class ReglasGravity extends ReglasJuegoAbstracta{
	private int numCols;
	private int numFilas;
	
	/**
	 * Constructor de la clase.
	 * @param numCols - Número de columnas del tablero.
	 * @param numFilas -  Número de filas del tablero.
	 */
	public ReglasGravity(int numCols, int numFilas)
	{
		this.numCols = numCols;
		this.numFilas = numFilas;
	}
	
	/**
	 * Comprueba que se haya hecho 4 en raya a tr<fim_middle>","
 * Implementación de las reglas del Gravity. 
 * Se deben implementar todos los métodos del interfaz, además del constructor.
 */","
 * Clase que contiene las reglas de juego de Gravity.
 * @author <NAME>, <NAME>
 */"
"<fim_prefix>	 * Comprueba que se haya hecho 4 en raya a través de la última ficha puesta.
	 * Sino lanza una excepcion.
	 */
	@Override
	public Ficha hayGanador(Movimiento ultimoMovimiento, Tablero t) throws MovimientoInvalido {
		int col = ultimoMovimiento.getDonde();
		int fila = ultimoMovimiento.getFila();
		if (comprueba(col, fila, t))
			return ultimoMovimiento.getJugador();
		else
			return Ficha.VACIA;
	}
	
	/**<fim_suffix>
	@Override
	public Tablero iniciaTablero() {
		return new Tablero(numCols, numFilas);
	}

	/**
	 * Comprueba que la partida no haya terminado en tablas recorriendo el tablero.
	 */
	@Override
	public boolean tablas(Ficha ultimoEnPoner, Tablero t){
		for (int i = 1; i <= numCols; i++) {
			for (int j = 1; j <= numFilas; j++) {
				if (t.getCasilla(i, j) == Ficha.VACIA)
					return false;
			}
		}
		return tr<fim_middle>","
	 * Incia el tablero con las dimensiones que recibe.
	 */","
	 * Comprueba que la partida no haya terminado en tablas recor"
"<fim_prefix>miento ultimoMovimiento, Tablero t) throws MovimientoInvalido {
		int col = ultimoMovimiento.getDonde();
		int fila = ultimoMovimiento.getFila();
		if (comprueba(col, fila, t))
			return ultimoMovimiento.getJugador();
		else
			return Ficha.VACIA;
	}
	
	/**
	 * Incia el tablero con las dimensiones que recibe.
	 */
	@Override
	public Tablero iniciaTablero() {
		return new Tablero(numCols, numFilas);
	}

	/**<fim_suffix>
	@Override
	public boolean tablas(Ficha ultimoEnPoner, Tablero t){
		for (int i = 1; i <= numCols; i++) {
			for (int j = 1; j <= numFilas; j++) {
				if (t.getCasilla(i, j) == Ficha.VACIA)
					return false;
			}
		}
		return true;
	}

}
<fim_middle>","
	 * Comprueba que la partida no haya terminado en tablas recorriendo el tablero.
	 */","
	 * Comprueba si la casilla que se quiere poner es válida.
	 */"
"<fim_prefix>package tp.pr4.logica;


/**
 * Implementación de las reglas del Gravity. 
 * Se deben implementar todos los métodos del interfaz, además del constructor.
 */
public class ReglasGravity extends ReglasJuegoAbstracta{
	private int numCols;
	private int numFilas;
	
	/**<fim_suffix>
	public ReglasGravity(int numCols, int numFilas)
	{
		this.numCols = numCols;
		this.numFilas = numFilas;
	}
	
	/**
	 * Comprueba que se haya hecho 4 en raya a través de la última ficha puesta.
	 * Sino lanza una excepcion.
	 */
	@Override
	public Ficha hayGanador(Movimiento ultimoMovimiento, Tablero t) throws MovimientoInvalido {
		int col = ultimoMovimiento.getDonde();
		int fila = ultimoMovimiento.getFil<fim_middle>","
	 * Constructor de la clase.
	 * @param numCols - Número de columnas del tablero.
	 * @param numFilas -  Número de filas del tablero.
	 */","
	 * Constructor de la clase.
	 * @param numCols número de columnas del tablero.
	 * @param numFilas número de filas del tablero.
	 */"
"<fim_prefix>odos del interfaz, además del constructor.
 */
public class ReglasGravity extends ReglasJuegoAbstracta{
	private int numCols;
	private int numFilas;
	
	/**
	 * Constructor de la clase.
	 * @param numCols - Número de columnas del tablero.
	 * @param numFilas -  Número de filas del tablero.
	 */
	public ReglasGravity(int numCols, int numFilas)
	{
		this.numCols = numCols;
		this.numFilas = numFilas;
	}
	
	/**<fim_suffix>
	@Override
	public Ficha hayGanador(Movimiento ultimoMovimiento, Tablero t) throws MovimientoInvalido {
		int col = ultimoMovimiento.getDonde();
		int fila = ultimoMovimiento.getFila();
		if (comprueba(col, fila, t))
			return ultimoMovimiento.getJugador();
		else
			return Ficha.VACIA;
	}
	
	/**
	 * Incia el tablero con las dimensiones que recibe.
	 */
	@Override
	public Tablero iniciaTablero() {
		return <fim_middle>","
	 * Comprueba que se haya hecho 4 en raya a través de la última ficha puesta.
	 * Sino lanza una excepcion.
	 */","
	 * Comprueba si hay un ganador en el tablero.
	 * @param col - Columna donde se encuentra el jugador.
	 * @param fila - Fila"
"<fim_prefix>/*<fim_suffix>

package com.jolly;
import java.util.Scanner;
public class test01 {
    public static void main(String[] args) {
        System.out.print(""请输入当前的星期数 ： "");
        Scanner sc = new Scanner(System.in);
        int week = sc.nextInt();

        //对当前的星期数进行判断
        switch(week){
            case 1 :
                System.out.println(""跑步"");
                break;
            case 2 :
         <fim_middle>","
*   制作一个减肥计划：
*           根据输入的星期数，指定对应的训练计划
*
*
*/","*
 * Created by Administrator on 2017/9/21.
 */"
"<fim_prefix>package osmo.visualizer.model;

import edu.uci.ics.jung.visualization.renderers.DefaultVertexLabelRenderer;
import osmo.tester.model.FSMTransition;

import java.awt.*;

/**<fim_suffix>
public class TransitionVertextLabelRenderer extends DefaultVertexLabelRenderer {
  public TransitionVertextLabelRenderer(Color pickedVertexLabelColor) {
    super(pickedVertexLabelColor);
  }

  @Override
  protected void setValue(Object value) {
    FSMTransition t = (FSMTransition) value;
    super.setValue(t.getName());
  }
}
<fim_middle>","
 * @author Teemu Kanstren
 */","
 * Created by pestano on 10/04/"
"<fim_prefix>package org.xson.tangyuan.xml.node.vo;

/**<fim_suffix>
public class PropertyItem {

	public String	name;
	public Object	value;

	public PropertyItem(String name, Object value) {
		this.name = name;
		this.value = value;
	}
}
<fim_middle>","
 * 属性项，支持Call, Return
 */","
 * 属性项
 */"
"<fim_prefix>package com.atherys.quests.script.lib.quest;

import com.atherys.quests.quest.SimpleQuest;
import com.atherys.script.api.function.ScriptQuadFunction;
import org.spongepowered.api.text.Text;

/**<fim_suffix>
public class CreateSimpleQuest implements ScriptQuadFunction<String, Text, Text, Integer, SimpleQuest> {

    @Override
    public SimpleQuest call(String id, Text name, Text description, Integer version) {
        return new SimpleQuest(id, name, description, version);
    }

}
<fim_middle>","
 * @jsfunc
 */","
 * A function that creates a"
"<fim_prefix>package org.crue.hercules.sgi.csp.repository;

import java.util.Optional;

import org.crue.hercules.sgi.csp.model.TipoFinalidad;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface TipoFinalidadRepository
    extends JpaRepository<TipoFinalidad, Long>, JpaSpecificationExecutor<TipoFinalidad> {

  /**<fim_suffix>
  Optional<TipoFinalidad> findByNombreAndActivoIsTrue(String nombre);
}
<fim_middle>","
   * Obtiene la entidad {@link TipoFinalidad} activa con el nombre indicado
   *
   * @param nombre el nombre de {@link TipoFinalidad}.
   * @return el {@link TipoFinalidad} con el nombre indicado
   */","
   * Busca un tipo finalidad por nombre.
   *
   * @param nombre nombre del tipo finalidad.
   * @return el tipo finalidad.
   */"
"<fim_prefix>package ru.khasang.cachoeira.viewcontroller.contextmenus;

import javafx.scene.control.CheckMenuItem;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.TreeTableView;

import java.util.ArrayList;

/**<fim_suffix>
public class ColumnContextMenu extends ContextMenu {
    public ColumnContextMenu(TreeTableView<?> treeTableView) {
        updateContextMenuColumnTTV(treeTableView);
    }

    public void updateContextMenuColumnTTV(TreeTableView<?> treeTableView) {
        super.getItems().clear();
        super.getItems().addAll(getCheckMenuItems(treeTableView));
    }

    private ArrayList<CheckMenuItem> getCheckMenuIt<fim_middle>","
 * Контекстное меню для выбора видимых столбцов в таблицах
 */","
 * Класс для создания контекстного меню для таблицы
 */"
"<fim_prefix>package mueller;

import java.util.HashSet;

public class LottoTip {
	
	/**<fim_suffix>
	HashSet<Integer> tip = new HashSet<Integer>();
	
	public LottoTip() {
		while (tip.size()<=6) {
			tip.add((int) ((Math.random()*46)+1));
		}
	}
	
}
<fim_middle>","
	 * Der Lotto Tipp(6 einmalige zahlen zwischen 1-45)
	 */","
	 * 
	 */"
"<fim_prefix>package com.ozguryazilim.telve.view;


import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import org.apache.deltaspike.core.api.config.view.metadata.ViewMetaData;

/**<fim_suffix>
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@ViewMetaData
public @interface PageTitle {
    /**
     * View için verilecek olan title
     * @return 
     */
    String value();
}
<fim_middle>","
 * DeltaSpike ViewConfig'leri için title tanımlama annotationı.
 * 
 * Bu annotation ile tanımlanan title bilgisi PageTitleResolver ile alınabilir.
 * 
 * @author Hakan Uygun
 */","
 * @author <NAME>
 */"
"<fim_prefix>cy;
import java.lang.annotation.Target;
import org.apache.deltaspike.core.api.config.view.metadata.ViewMetaData;

/**
 * DeltaSpike ViewConfig'leri için title tanımlama annotationı.
 * 
 * Bu annotation ile tanımlanan title bilgisi PageTitleResolver ile alınabilir.
 * 
 * @author Hakan Uygun
 */
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
@ViewMetaData
public @interface PageTitle {
    /**<fim_suffix>
    String value();
}
<fim_middle>","
     * View için verilecek olan title
     * @return 
     */","
     * Title bilgisi.
     * 
     * @return title bilgisi."
"<fim_prefix>package club.xiaojiawei.controls.ico;

import club.xiaojiawei.controls.images.ImagesLoader;
import org.girod.javafx.svgimage.SVGImage;
import org.girod.javafx.svgimage.SVGLoader;

/**<fim_suffix>
public class SaveIco extends AbstractIco {

    public SaveIco() {
        this(null);
    }

    public SaveIco(String color) {
        super(color);
        SVGImage svgImage = SVGLoader.load(ImagesLoader.class.getResource(this.getClass().getSimpleName() + "".svg""));
        if (svgImage != null) {
            this.setMaxWidth(svgImage.getWidth());
            this.getChildren().add(svgImage);
        }
  <fim_middle>","
 * @author 肖嘉威 xjw580@qq.com
 * @date 2023/10/31 22:28
 */","
 * @author : xiaojiawei
 * @date : 17/12/27 下午3:00
 * @description :
 */"
"<fim_prefix>package br.com.competeaqui.pagseguro.data;

/**<fim_suffix>
public record Holder(String name, String tax_id) {
}
<fim_middle>","
 * Informações sobre o titular de um método de pagamento
 * utilizado para pagar um determinado pedido.
 *
 * @author Manoel Campos da Silva Filho
 * @see br.com.competeaqui.pagseguro.data.Charge
 */","
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>

package ch.ech.ech0010;
<fim_middle>","
 * eCH 0010 beschreibt eine Adresse. Im Schema wird dabei zwischen einer Adresse
 * für Personen und eine für Organisation unterschieden. Ausserdem zwischen
 * Schweizer- und Auslandadresse. Die Unterschiede sind minimal. Hier sind alle
 * Adresse in einer Klasse zusammengefasst. Daher ist das ganze package
 * 'handmade'.
 *
 */","
 * @author <NAME>
 */"
"<fim_prefix>package de.sedico.cloudservices;
/**<fim_suffix>
public class EucaInstance extends GenericInstance {

}
<fim_middle>","
 * Diese Klasse instanziiert die Eucalyptus-Datenbank, welche von der Klasse GenericInstance erbt.
 * @author jens
 *
 */","
 * 
 * @author <NAME>
 *
 */"
"<fim_prefix>package hafta3.gun1;

/*<fim_suffix>
public class MetotOrnekleri {

    public static void main(String[] args) {
        int toplam1 = topla(0, 10);
        ekranaYazdir(""1 - 10 toplam = "" + toplam1);
        int toplam2 = topla(20, 40);
        ekranaYazdir(20, 40, toplam2);

    }

    /**
     * topla metodu toplama işi yapar.
     *
     * @param baslangic
     * @param bitis
     * @return
     */
    public static int topla(int baslangic<fim_middle>","
 Metot : Metot yazdığımız kodların tekrar kullanılabilir, düzenli ve
 basit olmasını sağlar. 5 kısımdan oluşur:                       
 1. modifier(public, protected, [default], private) ve static( static metotlara erişim ), 
 2. return-value(geri dönüş değeri),
 3. metot adı,
 4. parametre listesi

 Metot İmzası : Bir metodun diğer metotlardan ayırt edilmesinde metodun 
 iki özelliğine bakılır.
 1. metot adı
 2. parametre listesi
 Bu iki özellik bir metodu diğer metottan ayırır.
 */","*
 * @author <NAME> <<EMAIL>>
 * @since 15.07.2018
 */"
"<fim_prefix>   int toplam2 = topla(20, 40);
        ekranaYazdir(20, 40, toplam2);

    }

    /**
     * topla metodu toplama işi yapar.
     *
     * @param baslangic
     * @param bitis
     * @return
     */
    public static int topla(int baslangic, int bitis) {
        int toplam = 0;
        for (int i = baslangic; i < bitis; i++) {
            toplam = toplam + i;
        }
        return toplam;
    }

    /**<fim_suffix>
    public static void ekranaYazdir(String str) {
        System.out.println(str);
    }

    /**
     * ekranaYazdir metodu aldığı integer parametreleri ekrana yazdırır.
     *
     * @param a
     * @param b
     * @param c
     */
    public static void ekranaYazdir(int a, int b, int c) {
        System.out.println(a + "" - "" + b + "" toplam = "" + c);
    }
}
<fim_middle>","
     * ekranaYazdir metodu aldığı String parametreyi ekrana yazdırır.
     *
     * @param str
     */","
     * ekranaYazdir metodu aldığı string parametreleri ekrana yazdırır.
     *
     * @param str
     */"
"<fim_prefix>   public static int topla(int baslangic, int bitis) {
        int toplam = 0;
        for (int i = baslangic; i < bitis; i++) {
            toplam = toplam + i;
        }
        return toplam;
    }

    /**
     * ekranaYazdir metodu aldığı String parametreyi ekrana yazdırır.
     *
     * @param str
     */
    public static void ekranaYazdir(String str) {
        System.out.println(str);
    }

    /**<fim_suffix>
    public static void ekranaYazdir(int a, int b, int c) {
        System.out.println(a + "" - "" + b + "" toplam = "" + c);
    }
}
<fim_middle>","
     * ekranaYazdir metodu aldığı integer parametreleri ekrana yazdırır.
     *
     * @param a
     * @param b
     * @param c
     */","
     * ekranaYazdir metodu aldığı int parametreleri ekrana yazdırır.
     *
     * @param a
     * @param b
     * @param c
     */"
"<fim_prefix> metotlardan ayırt edilmesinde metodun 
 iki özelliğine bakılır.
 1. metot adı
 2. parametre listesi
 Bu iki özellik bir metodu diğer metottan ayırır.
 */
public class MetotOrnekleri {

    public static void main(String[] args) {
        int toplam1 = topla(0, 10);
        ekranaYazdir(""1 - 10 toplam = "" + toplam1);
        int toplam2 = topla(20, 40);
        ekranaYazdir(20, 40, toplam2);

    }

    /**<fim_suffix>
    public static int topla(int baslangic, int bitis) {
        int toplam = 0;
        for (int i = baslangic; i < bitis; i++) {
            toplam = toplam + i;
        }
        return toplam;
    }

    /**
     * ekranaYazdir metodu aldığı String parametreyi ekrana yazdırır.
     *
     * @param str
     */
    public static void ekranaYazdir(String str) {
        System.out.println(str);
    }

    /*<fim_middle>","
     * topla metodu toplama işi yapar.
     *
     * @param baslangic
     * @param bitis
     * @return
     */","
     * topla metodu aldığı iki parametre alır ve toplamını döndürür.
     *
     * @param baslangic
     * @param bitis
   "
"<fim_prefix>package com.yanhuo.common.constant;


import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**<fim_suffix>
@ApiModel(""消息通知数量"")
public interface ImConstant {

    @ApiModelProperty(""消息通知数量"")
    String MESSAGE_COUNT_KEY = ""messageCountKey:"";
}
<fim_middle>","
 * 消息通知数量设置
 * @author xiaozhao
 */","
 * 消息通知数量常量
 *
 * @author chen.yan"
"<fim_prefix>package com.chengjs.cjsssmsweb.mybatis.mapper.master;

import com.chengjs.cjsssmsweb.mybatis.pojo.master.UUser;
import tk.mybatis.mapper.common.Mapper;

import java.util.List;
import java.util.Map;

public interface UUserMapper extends Mapper<UUser> {

  /**<fim_suffix>
  List<UUser> gridUsers(UUser uuser);

  /**
   * 测试通过Map参数方式获取page
   * @param params
   * @return
   */
  List<Map<String,String>> users(Map<String,String> params);

}<fim_middle>","
   * 测试通过POJO参数方式获取page
   * @param uuser
   * @return
   */","
   * 测试通过对象方式获取page
   * @param uuser
   * @return
   */"
"<fim_prefix>package com.chengjs.cjsssmsweb.mybatis.mapper.master;

import com.chengjs.cjsssmsweb.mybatis.pojo.master.UUser;
import tk.mybatis.mapper.common.Mapper;

import java.util.List;
import java.util.Map;

public interface UUserMapper extends Mapper<UUser> {

  /**
   * 测试通过POJO参数方式获取page
   * @param uuser
   * @return
   */
  List<UUser> gridUsers(UUser uuser);

  /**<fim_suffix>
  List<Map<String,String>> users(Map<String,String> params);

}<fim_middle>","
   * 测试通过Map参数方式获取page
   * @param params
   * @return
   */","
   * 测试通过Map参数方式获取page
   * @param params
   * @return
   */"
"<fim_prefix>package antimattermod.core.Util;

import antimattermod.core.AntiMatterModCore;
import antimattermod.core.Item.MetaItem;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.List;

/**<fim_suffix>
public class ItemUtil {
	/**
	 * 無機能なアイテムオブジェクトを作成します<br>
	 * @param name アイテム名 {@link Item#setUnlocalizedName(String)}
	 * @param textureName テクスチャ―名 {@link Item#setTextureName(String)}
	 * @param addTab 追加タブ {@link Item#setCreativeTab(CreativeTabs)}
	 * @param stackSize 最大スタックサイズ {@link Item#setMaxStackSize(int)}
	 * @param hasSubtype メタ値でアイテムが分けられているか {@link Item#setHasSubtypes(boolean)}
	 * @param maxMe<fim_middle>","
 * Created by Raiti-chan
 * 中間アイテム簡易登録クラス<br>
 * @author Raiti
 * 
 */","
 * アイテムユーティリティクラス
 */"
"<fim_prefix>ring, String, CreativeTabs, int, boolean, int, boolean, Item)}のラッパー関数
	 * @param name 名前
	 * @param textureName テクスチャ名
	 * @param maxMeta メタデータ最大値
	 * @param tabs クリエイティブタブ
	 * @return アイテムオブジェクト
	 */
	public static Item CreateItem(@NotNull String name,@NotNull String textureName,int maxMeta,@Nullable CreativeTabs tabs){
		return CreateItem(name, textureName, tabs, 64, true, maxMeta, false, null);
	}
	
	/**<fim_suffix>
	public static Item CreateItem(String name, String textureName, int maxMeta, CreativeTabs addTab, AddInformationfunction addfunc) {
		MetaItemBase item = new MetaItemBase(maxMeta, addfunc);
		item.setUnlocalizedName(name);
		item.setTextureName(AntiMatterModCore.MOD_ID+"":""+textureName);
		if(addTab != null) item.setCreativeTab(addTab);
		item.setMaxStackSize(64);
		item.setMaxDamage(0);
		return item;
	}
	
<fim_middle>","
	 * {@link MetaItemBase}クラスを継承したクラスを使用してアイテムを生成します。<br>
	 * 主にツールチップの説明表示などに使います。
	 * @param name アイテム名 {@link Item#setUnlocalizedName(String)}
	 * @param textureName テクスチャ―名 {@link Item#setTextureName(String)}
	 * @param maxMeta 最大メタ値
	 * @param addTab 追加タブ {@link Item#setCreativeTab(CreativeTabs)}
	 * @param addfunc 情報追加関数 {@link AddInformationfunction#addInformation(ItemStack, EntityPlayer, List, boolean)}
	 * @return アイテムオブジェクト
	 */","
	 * アイテムを作成する
	 * @param name 名前
	 * @param textureName テクスチャ名
	 * @param maxMeta メタデータ最大値
	 * @param addTab クリエイティブタブ
	 * @param addfunc アイテム情報追加関数
	 * @return アイテムオブジェクト
	 */"
"<fim_prefix>timattermod.core.Item.MetaItem;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.List;

/**
 * Created by Raiti-chan
 * 中間アイテム簡易登録クラス<br>
 * @author Raiti
 * 
 */
public class ItemUtil {
	/**<fim_suffix>
	public static Item CreateItem(@NotNull String name , @Nullable String textureName ,@Nullable CreativeTabs addTab ,int stackSize , boolean hasSubtype ,
								  int maxMeta , boolean isFull3D,@Nullable Item containerItem) {
		
		Item item = hasSubtype ? new MetaItem(maxMeta) : new Item();
		item.setUnlocalizedName(name);
		if(textureName == null || textureName.isEmpty()){
			textureName = name;
		}
		item.<fim_middle>","
	 * 無機能なアイテムオブジェクトを作成します<br>
	 * @param name アイテム名 {@link Item#setUnlocalizedName(String)}
	 * @param textureName テクスチャ―名 {@link Item#setTextureName(String)}
	 * @param addTab 追加タブ {@link Item#setCreativeTab(CreativeTabs)}
	 * @param stackSize 最大スタックサイズ {@link Item#setMaxStackSize(int)}
	 * @param hasSubtype メタ値でアイテムが分けられているか {@link Item#setHasSubtypes(boolean)}
	 * @param maxMeta
	 * @param isFull3D アイテムを3Dで表示するか {@link Item#isFull3D()}
	 * @param containerItem クラフト時に帰ってくるアイテム {@link Item#setContainerItem(Item)}
	 * @return アイテムオブジェクト
	 */","
	 * 登録アイテムを登録する
	 * @param name アイテム名
	 * @param textureName アイテムのテクスチャ名
	 * @param addTab アイテムのタブ
	 * @param stackSize アイテムのスタックサイズ
	 * @param hasSubtype アイテムのサブタイプ
	 * @param maxMeta アイテムのメタデータの最大値
	 * @param isFull3D アイテムが3D表示可能か
	 * @param containerItem アイテムが入れるコンテナアイテム
	 * @return アイテム
	 */"
"<fim_prefix>item.setUnlocalizedName(name);
		if(textureName == null || textureName.isEmpty()){
			textureName = name;
		}
		item.setTextureName(AntiMatterModCore.MOD_ID+"":""+textureName);
		if(addTab != null) item.setCreativeTab(addTab);
		item.setMaxStackSize(stackSize);
		item.setMaxDamage(0);
		if(isFull3D) item.setFull3D();
		if(containerItem != null) item.setContainerItem(containerItem);
		
		return item;
	}
	
	/**<fim_suffix>
	public static Item CreateItem(@NotNull String name,@NotNull String textureName,int maxMeta,@Nullable CreativeTabs tabs){
		return CreateItem(name, textureName, tabs, 64, true, maxMeta, false, null);
	}
	
	/**
	 * {@link MetaItemBase}クラスを継承したクラスを使用してアイテムを生成します。<br>
	 * 主にツールチップの説明表示などに使います。
	 * @param name アイテム名 {@link Item#setUnlocalizedName(String)}
	 * @param textureName テクスチャ―名 {@link Item#setTextureNam<fim_middle>","
	 * {@link ItemUtil#CreateItem(String, String, CreativeTabs, int, boolean, int, boolean, Item)}のラッパー関数
	 * @param name 名前
	 * @param textureName テクスチャ名
	 * @param maxMeta メタデータ最大値
	 * @param tabs クリエイティブタブ
	 * @return アイテムオブジェクト
	 */","
	 * {@link MetaItemBase}クラスを継承したクラスを使用してアイテムを生成します。<br>
	 * 主にツールチップの説明表示などに使います。
	 * @param name アイテム名 {@link Item#setUnlocalizedName(String)}
	 * @param textureName テクスチャ―名 {@link Item#setTextureNam(String)}
	 * @param"
"<fim_prefix>package osmo.tester.model.dataflow.serialization;

/**<fim_suffix>
public class FloatDeserializer implements Deserializer<Float> {
  @Override
  public Float deserialize(String serialized) {
    return Float.parseFloat(serialized);
  }
}
<fim_middle>", @author Teemu Kanstren */,"
 * @author <NAME>
 */"
"<fim_prefix>package io.github.ausf_software.smbp_editor.core.tool;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**<fim_suffix>
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface ToolRenderOverCanvasViewport {
    /**
     * Возвращает строку с именем элемента рендера
     * @return строку с именем элемента рендера
     */
    String name();

    /**
     * Возвращает время (в миллисекундах) спустя которое
     * отрисовка данного элемента будет автоматически прекращена
     * @return время (в миллисекун<fim_middle>","
 * Аннотация <code>ToolRenderOverCanvasViewport</code> используется для обозначения
 * класса как объекта для отрисовки поверх всей панели редактора. Имя,
 * которое указывается в аннотации, необходимо для последующего запроса
 * на отрисовку.
 * <p>Параметр <code>timeRender</code> указывает время (в миллисекундах) спустя которое
 * отрисовка данного элемента будет автоматически прекращена. Значение 0
 * указывает, что отмена отрисовки будет указана вручную.
 * <p>При запуске приложения, система будет искать все классы,
 * помеченные аннотацией <code>ToolRenderOverCanvasViewport</code>, и создавать их экземпляры.
 * Это позволяет динамически добавлять все дополнительные элементы отрисовки
 * поверх редактора без необходимости изменения основного кода приложения.
 * @see RenderOverCanvasViewport
 * @since 1.0
 * @version 1.0
 * @author Daniil Scherbina
 */","
 * Аннотация, которая указывает, что данный элемент рендера
 * должен быть отрисован в области видимости канваса
 */"
"<fim_prefix>sViewport</code>, и создавать их экземпляры.
 * Это позволяет динамически добавлять все дополнительные элементы отрисовки
 * поверх редактора без необходимости изменения основного кода приложения.
 * @see RenderOverCanvasViewport
 * @since 1.0
 * @version 1.0
 * @author Daniil Scherbina
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface ToolRenderOverCanvasViewport {
    /**<fim_suffix>
    String name();

    /**
     * Возвращает время (в миллисекундах) спустя которое
     * отрисовка данного элемента будет автоматически прекращена
     * @return время (в миллисекундах) спустя которое
     * отрисовка данного элемента будет автоматически прекращена
     */
    short timeRender() default 0;
}
<fim_middle>","
     * Возвращает строку с именем элемента рендера
     * @return строку с именем элемента рендера
     */","
     * Возвращает имя элемента отрисовки
     * @return имя элемента отрисовки
     */"
"<fim_prefix>актора без необходимости изменения основного кода приложения.
 * @see RenderOverCanvasViewport
 * @since 1.0
 * @version 1.0
 * @author Daniil Scherbina
 */
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface ToolRenderOverCanvasViewport {
    /**
     * Возвращает строку с именем элемента рендера
     * @return строку с именем элемента рендера
     */
    String name();

    /**<fim_suffix>
    short timeRender() default 0;
}
<fim_middle>","
     * Возвращает время (в миллисекундах) спустя которое
     * отрисовка данного элемента будет автоматически прекращена
     * @return время (в миллисекундах) спустя которое
     * отрисовка данного элемента будет автоматически прекращена
     */","
     * Возвращает время рендера
     * @return время рендера
     */"
"<fim_prefix>/**<fim_suffix>
package com.monogramm.starter.api.type;
<fim_middle>","
 * The <em>Types</em> API.
 * 
 * @author madmath03
 */","
 * @author <NAME>
 */"
"<fim_prefix>/**<fim_suffix>
package jp.primecloud.auto.component.prjserver.process;
<fim_middle>","
 * <p>
 * TODO: パッケージコメントを記述
 * </p>
 */","
 * @author yamamoto.kuwahara
 */"
"<fim_prefix>package com.pugwoo.wooutils.collect;

/**<fim_suffix>
public enum SortingOrderEnum {

	/**顺序*/
	ASC, 
	/**逆序*/
	DESC;
	
}
<fim_middle>","
 * 排列顺序
 */","
 * 排序顺序枚举
 *"
"<fim_prefix>package com.pugwoo.wooutils.collect;

/**
 * 排列顺序
 */
public enum SortingOrderEnum {

	/**<fim_suffix>
	ASC, 
	/**逆序*/
	DESC;
	
}
<fim_middle>",顺序*/,升序
"<fim_prefix>package com.pugwoo.wooutils.collect;

/**
 * 排列顺序
 */
public enum SortingOrderEnum {

	/**顺序*/
	ASC, 
	/**<fim_suffix>
	DESC;
	
}
<fim_middle>",逆序*/,倒序*/
"<fim_prefix>/**<fim_suffix>
package jamel.models.m18.r02.markets;<fim_middle>","
 * Classes for the markets.
 * 
 * 2018-03-02: on essaie d'introduire un marché des biens.
 * 
 * 2018-01-28: il y a besoin d'un marché du travail pour coordonner l'offre et la demande 
 * avec plusieurs secteurs employeurs.
 */","
 * Created by jamel on 12/12/16.
 */"
"<fim_prefix>package club.xiaojiawei.controls.ico;

import club.xiaojiawei.controls.images.ImagesLoader;
import javafx.scene.layout.StackPane;
import org.girod.javafx.svgimage.SVGImage;
import org.girod.javafx.svgimage.SVGLoader;

/**<fim_suffix>
public class UpdateIco extends AbstractIco {

    public UpdateIco() {
        this(null);
    }

    public UpdateIco(String color) {
        super(color);
        SVGImage svgImage = SVGLoader.load(ImagesLoader.class.getResource(this.getClass().getSimpleName() + "".svg""));
        if (svgImage != null) {
            this.setMaxWidth(svgImage.getWidth());
            this.getChildren().add(svgImage);
      <fim_middle>","
 * @author 肖嘉威 xjw580@qq.com
 * @date 2023/10/31 14:54
 */","
 * @author : xiaojiawei
 * @date : 17/12/21
 */"
"<fim_prefix>package miskyle.realsurvival.api.status;

public enum StatusType {
  SLEEP, THIRST, WEIGHT, ENERGY,
  /**<fim_suffix>
  DISEASE, 
  /**
   * API方法没写包括则为不包括.
   */
  TEMPERATURE;
}
<fim_middle>","
   * API方法没写包括则为不包括.
   */","
   * API方法没写包括则为不包括.
   */"
"<fim_prefix>package miskyle.realsurvival.api.status;

public enum StatusType {
  SLEEP, THIRST, WEIGHT, ENERGY,
  /**
   * API方法没写包括则为不包括.
   */
  DISEASE, 
  /**<fim_suffix>
  TEMPERATURE;
}
<fim_middle>","
   * API方法没写包括则为不包括.
   */","
   * 体温
   */"
"<fim_prefix>/*<fim_suffix>
package at.chipkarte.client.abs.soap;

/**
 * Enthält die Rückantwortdaten zu einer beantragten Langzeitverordnung innerhalb einer {@link BewilligungsAnfrage}.
 */
public class LangzeitVerordnung {
  private Integer _beantragteMonate;
  private Integer _bewilligteMonate;
  private Integer _bewilligtePackungen;

  /**
   * Die beantragten Monate. 
   * <br/>Format: [1..99]
   * @return Beantrag<fim_middle>","
 * Sämtliche Werknutzungs-und Verwertungsrechte an dieser Software liegen beim Hauptverband der österreichischen
 * Sozialversicherungsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */","*
   * Die beantragten Monate. 
   * <br/>Format: [1..99]
   * @return BeantragMonate
   */"
"<fim_prefix>dass das Feld in der Rückantwort nicht versorgt wurde.
   */
  public Integer getBeantragteMonate() {
    return _beantragteMonate;
  }

  /**
   * Die bewilligten Monate. 
   * <br/>Format: [0..99]
   * @return Bewilligte Monate; der Wert -1 bedeutet, dass das Feld in der Rückantwort nicht versorgt wurde.
   */
  public Integer getBewilligteMonate() {
    return _bewilligteMonate;
  }

  /**<fim_suffix>
  public Integer getBewilligtePackungen() {
    return _bewilligtePackungen;
  }

  public void setBeantragteMonate(Integer beantragteMonate) {
    _beantragteMonate = beantragteMonate;
  }

  public void setBewilligteMonate(Integer bewilligteMonate) {
    _bewilligteMonate = bewilligteMonate;
  }

  public void setBewilligtePackungen(Integer bewilligtePackungen) {
    _bewilligtePackungen = b<fim_middle>","
   * Die bewilligte gesamte Packungsanzahl für die Langzeitverordnung. 
   * <br/>Format: [0..99]
   * @return Bewilligte Packungen; der Wert -1 bedeutet, dass das Feld in der Rückantwort nicht versorgt wurde.
   */","
   * Die bewilligten Packungen. 
   * <br/>Format: [0..99]
   * @return Bewilligte Packungen; der Wert -1 bedeutet, dass das Feld in der Rückantwort nicht versorgt wurde.
   */"
"<fim_prefix>s LangzeitVerordnung {
  private Integer _beantragteMonate;
  private Integer _bewilligteMonate;
  private Integer _bewilligtePackungen;

  /**
   * Die beantragten Monate. 
   * <br/>Format: [1..99]
   * @return Beantragte Monate; der Wert -1 bedeutet, dass das Feld in der Rückantwort nicht versorgt wurde.
   */
  public Integer getBeantragteMonate() {
    return _beantragteMonate;
  }

  /**<fim_suffix>
  public Integer getBewilligteMonate() {
    return _bewilligteMonate;
  }

  /**
   * Die bewilligte gesamte Packungsanzahl für die Langzeitverordnung. 
   * <br/>Format: [0..99]
   * @return Bewilligte Packungen; der Wert -1 bedeutet, dass das Feld in der Rückantwort nicht versorgt wurde.
   */
  public Integer getBewilligtePackungen() {
    return _bewilligtePackungen;
  }

  public void se<fim_middle>","
   * Die bewilligten Monate. 
   * <br/>Format: [0..99]
   * @return Bewilligte Monate; der Wert -1 bedeutet, dass das Feld in der Rückantwort nicht versorgt wurde.
   */","
   * Die beantragten Monate. 
   * <br/>Format: [1..99]
   * @param beantragteMonate
   */"
"<fim_prefix>sbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */
package at.chipkarte.client.abs.soap;

/**
 * Enthält die Rückantwortdaten zu einer beantragten Langzeitverordnung innerhalb einer {@link BewilligungsAnfrage}.
 */
public class LangzeitVerordnung {
  private Integer _beantragteMonate;
  private Integer _bewilligteMonate;
  private Integer _bewilligtePackungen;

  /**<fim_suffix>
  public Integer getBeantragteMonate() {
    return _beantragteMonate;
  }

  /**
   * Die bewilligten Monate. 
   * <br/>Format: [0..99]
   * @return Bewilligte Monate; der Wert -1 bedeutet, dass das Feld in der Rückantwort nicht versorgt wurde.
   */
  public Integer getBewilligteMonate() {
    return _bewilligteMonate;
  }

  /**
   * Die bewilligte gesamte Packungsanzahl für die Langzeitv<fim_middle>","
   * Die beantragten Monate. 
   * <br/>Format: [1..99]
   * @return Beantragte Monate; der Wert -1 bedeutet, dass das Feld in der Rückantwort nicht versorgt wurde.
   */","
   * Die beantragten Monate. 
   * <br/>Format: [0..99]
   * @return Beantragte Monate; der Wert -1 bedeutet, dass das Feld in der Rückantwort nicht versorgt wurde.
   */"
"<fim_prefix>/*
 * Sämtliche Werknutzungs-und Verwertungsrechte an dieser Software liegen beim Hauptverband der österreichischen
 * Sozialversicherungsträger. Insbesondere ist die Veränderung der Software oder einzelner Teile untersagt.
 */
package at.chipkarte.client.abs.soap;

/**<fim_suffix>
public class LangzeitVerordnung {
  private Integer _beantragteMonate;
  private Integer _bewilligteMonate;
  private Integer _bewilligtePackungen;

  /**
   * Die beantragten Monate. 
   * <br/>Format: [1..99]
   * @return Beantragte Monate; der Wert -1 bedeutet, dass das Feld in der Rückantwort nicht versorgt wurde.
   */
  public Integer getBeantragteMonate() {
    return _beantragteMonate;
<fim_middle>","
 * Enthält die Rückantwortdaten zu einer beantragten Langzeitverordnung innerhalb einer {@link BewilligungsAnfrage}.
 */","
 * Die LangzeitVerordnung ist eine Sammlung von Daten, die die LangzeitVerordnung für einen Kunden enthält.
 * 
 * @author"
"<fim_prefix>package org.cat73.pager.application.resulthandler;

import org.springframework.stereotype.Component;

/**<fim_suffix>
@Component
public class Result2PagerResultHandlerSubClass extends Result2PagerResultHandler {}
<fim_middle>","
 * 用于测试多个返回值处理器，以及返回值处理器在有继承关系时是否正常工作
 */","
 * Created by Cat on 3/3/2017.
 */"
"<fim_prefix>/**<fim_suffix>
package poc.jbehave.plumbing;<fim_middle>","
 * Ce paquetage fournit des classes techniquement utiles pour 
 * l'implémentation de tests d'acceptation avec JBehave, 
 * c'est-à-dire de scénarii de test textuels structurés en étapes Given-When-Then.
 * 
 * @author Xavier Pigeon
 */","
 * @author <NAME>
 *
 */"
"<fim_prefix>package cn.maple.extension.exception;

import cn.hutool.core.lang.Dict;
import cn.hutool.http.HttpStatus;
import cn.maple.core.framework.exception.GXBusinessException;

/**<fim_suffix>
public class GXExtensionException extends GXBusinessException {
    private static final String MSG = ""扩展点异常"";

    public GXExtensionException(String msg, int code, Dict data, Throwable e) {
        super(msg, code, data, e);
    }

    public GXExtensionException(String msg, int code, Dict data) {
        this(MSG, code, data, null);
    }

    public GXExtensionException(String msg, int code, Throwable e<fim_middle>","
 * 扩展点初始化或者查找失败时，使用次异常
 * <p>
 * 扩展点初始化或者查找失败时，使用次异常
 * <p>
 */","
 * 扩展点异常
 *
 * @author maple
 * @version 1.0
 * @since 2020-06-30 14:40
 */"
"<fim_prefix>package fr.gouv.beta.fabnum.kelrisks.persistance.referentiel;


import fr.gouv.beta.fabnum.commun.persistance.IAbstractDAO;
import fr.gouv.beta.fabnum.kelrisks.transverse.referentiel.entities.SiteIndustrielBasol;

import java.util.List;

import org.geolatte.geom.Geometry;

/**<fim_suffix>
public interface ISiteIndustrielBasolDAO extends IAbstractDAO<SiteIndustrielBasol> {
    
    List<SiteIndustrielBasol> rechercherSiteSurParcelle(String codeParcelle);
    
    List<SiteIndustrielBasol> rechercherSiteDansRayonCentroideParcelle(String codeParcelle, double distance);
    
    List<SiteIndustrielBasol> rechercherSitesDansPolygons(List<Geometry> multiPolygon);
    
    List<SiteIndustrielBasol><fim_middle>","
 * Classe interface d'accès DAO à SiteIndustrielBasol
 */","
 *
 * @author <NAME> <<EMAIL>>
 * @date 12"
